i : type.
o : type.
imp : o -> o -> o.
and : o -> o -> o.
true : o.
or : o -> o -> o.
false : o.
forall : (i -> o) -> o.
exists : (i -> o) -> o.
not : o -> o = \A:o. imp A false.
nd : o -> type.
impi : (nd A -> nd B) -> nd (imp A B).
impe : nd (imp A B) -> nd A -> nd B.
andi : nd A -> nd B -> nd (and A B).
ande1 : nd (and A B) -> nd A.
ande2 : nd (and A B) -> nd B.
truei : nd true.
ori1 : nd A -> nd (or A B).
ori2 : nd B -> nd (or A B).
ore : nd (or A B) -> (nd A -> nd C) -> (nd B -> nd C) -> nd C.
falsee : nd false -> nd C.
foralli : (Pi x:i. nd (A x)) -> nd (forall (\t:i. A t)).
foralle : nd (forall (\t:i. A t)) -> (Pi T':i. nd (A T')).
existsi : Pi T':i. nd (A T') -> nd (exists (\t:i. A t)).
existse : nd (exists (\t:i. A t)) -> (Pi x:i. nd (A x) -> nd C) -> nd C.
noti : Pi A. (nd A -> nd false) -> nd (not A)
   = \A. \D:nd A -> nd false. impi (\d:nd A. D d).
note : Pi A. nd (not A) -> nd A -> nd false = \A. \D:nd (not A). \E:nd A. impe D E.


red : nd A -> nd A -> type.
impred : red (impe (impi (\d:nd A2. D d)) E) (D E).
andred1 : red (ande1 (andi D E)) D.
andred2 : red (ande2 (andi D E)) E.
orred1 : red (ore (ori1 D) (\d:nd A2. E1 d) (\d:nd A3. E2 d)) (E1 D).
orred2 : red (ore (ori2 D) (\d:nd A2. E1 d) (\d:nd A3. E2 d)) (E2 D).
forallred : red (foralle (foralli (\x:i. D x)) T') (D T').
existsred : red (existse (existsi T' D) (\x:i. \d:nd (A2 x). E x d)) (E T' D).
trivI : (Pi A:o. nd (imp A A)) -> type.
% skolem trivI#1 : Pi A:o. nd (imp A A).
list : type.
nil : list.
cons : o -> list -> list.
append : list -> list -> list -> type.
appNil : append nil K K.
appCons : append L K M -> append (cons A L) K (cons A M).
tp : type.
arrow : tp -> tp -> tp.
exp : type.
lam : (exp -> exp) -> exp.
app : exp -> exp -> exp.
of : exp -> tp -> type.
tp_lam :
   (Pi x:exp. of x T1 -> of (E x) T2) -> of (lam (\e:exp. E e)) (arrow T1 T2).
tp_app : of E2 T2 -> of E1 (arrow T2 T1) -> of (app E1 E2) T1.
eval : exp -> exp -> type.
ev_lam : eval (lam (\e:exp. E e)) (lam (\e:exp. E e)).
ev_app :
   eval (E1' V2) V -> eval E2 V2 -> eval E1 (lam (\e:exp. E1' e))
      -> eval (app E1 E2) V.

tps : eval E V -> of E T' -> of V T' -> type.
tps_lam :
   tps ev_lam (tp_lam (\x:exp. \p:of x T1. P x p))
      (tp_lam (\x:exp. \p:of x T1. P x p)).
tps_app :
   tps D3 (Q1' V2 Q2) Q -> tps D2 P2 Q2
      -> tps D1 P1 (tp_lam (\x:exp. \p:of x T2. Q1' x p))
      -> tps (ev_app D3 D2 D1) (tp_app P2 P1) Q.
tpsa : eval E V -> of E T' -> of V T' -> type.
% skolem tpsa#1 : Pi D:eval E V. Pi P:of E T'. of V T'.
e0 : exp = app (lam (\x:exp. x)) (lam (\y:exp. y)).
p0 : Pi T1. of e0 (arrow T1 T1)
   = \T1. tp_app (tp_lam (\x:exp. \p:of x T1. p))
        (tp_lam (\x:exp. \p:of x (arrow T1 T1). p)).
d0 : eval e0 (lam (\e:exp. e)) = ev_app ev_lam ev_lam ev_lam.
tps0 : Pi T1. tps d0 (p0 _) (tp_lam (\x:exp. \p:of x T1. p))
   = \T1. tps_app tps_lam tps_lam tps_lam.
cp : exp -> exp -> type.
cp_app : cp E2 F2 -> cp E1 F1 -> cp (app E1 E2) (app F1 F2).
cp_lam :
   (Pi x:exp. cp x x -> cp (E x) (F x))
      -> cp (lam (\x:exp. E x)) (lam (\x:exp. F x)).

cpt : Pi E:exp. Pi F:exp. cp E F -> type.
% skolem cpt#1 : Pi E:exp. exp.
% skolem cpt#2 : Pi E:exp. cp E (cpt#1 E).
