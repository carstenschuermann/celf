tp : type.
=> : tp -> tp -> tp.
all : (tp -> tp) -> tp.
tm : tp -> type.
lam : (tm A -> tm B) -> tm (=> A B).
app : tm (=> A B) -> tm A -> tm B.
tlam : (Pi a:tp. tm (A a)) -> tm (all (\x:tp. A x)).
tapp : tm (all (\x:tp. A x)) -> (Pi B:tp. tm (A B)).
nat : tp = all (\a:tp. => a (=> (=> a a) a)).
zero : tm (all (\x:tp. => x (=> (=> x x) x)))
   = tlam (\a:tp. lam (\z:tm a. lam (\s:tm (=> a a). z))).
succ : tm (=> nat (all (\x:tp. => x (=> (=> x x) x))))
   = lam
        (\x:tm nat.
            tlam
               (\a:tp.
                   lam
                      (\z:tm a.
                          lam (\s:tm (=> a a). app s (app (app (tapp x a) z) s))))).
succ' : tm (=> nat nat)
   = lam
        (\x:tm (all (\x:tp. => x (=> (=> x x) x))).
            tlam
               (\a:tp.
                   lam
                      (\z:tm a.
                          lam (\s:tm (=> a a). app s (app (app (tapp x a) z) s))))).
plus : tm (=> nat (=> nat nat))
   = lam (\x:tm nat. lam (\y:tm nat. app (app (tapp y nat) x) succ)).
times : tm (=> nat (=> nat nat))
   = lam (\x:tm nat. lam (\y:tm nat. app (app (tapp y nat) zero) (app plus x))).
exp : tm (=> nat (=> nat nat))
   = lam
        (\x:tm nat.
            lam
               (\y:tm nat. app (app (tapp y nat) (app succ zero)) (app times x))).
