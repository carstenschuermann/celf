i : type.
o : type.
p : type.
atom : p -> o.
and : o -> o -> o.
imp : o -> o -> o.
true : o.
forall : (i -> o) -> o.
pf : o -> type.
andi : pf A -> pf B -> pf (and A B).
andel : pf (and A B) -> pf A.
ander : pf (and A B) -> pf B.
impi : (pf A -> pf B) -> pf (imp A B).
impe : pf (imp A B) -> pf A -> pf B.
truei : pf true.
foralli : (Pi a:i. pf (A a)) -> pf (forall (\t:i. A t)).
foralle : pf (forall (\t:i. A t)) -> (Pi T':i. pf (A T')).
can : Pi A:o. pf A -> type.
atm : pf A -> type.
can_andi : can B E -> can A D -> can (and A B) (andi D E).
can_impi :
   (Pi u:pf A. atm u -> can B (D u)) -> can (imp A B) (impi (\d:pf A. D d)).
can_truei : can true truei.
can_foralli :
   (Pi a:i. can (A a) (D a)) -> can (forall (\t:i. A t)) (foralli (\a:i. D a)).
can_atm : atm D -> can (atom P) D.
atm_andel : atm D -> atm (andel D).
atm_ander : atm D -> atm (ander D).
atm_impe : can B E -> atm D -> atm (impe D E).
atm_foralle : atm D -> atm (foralle D T').


whr : pf A -> pf A -> type.
whr_andl : whr (andel (andi D E)) D.
whr_andr : whr (ander (andi D E)) E.
whr_imp : whr (impe (impi (\d:pf A2. D d)) E) (D E).
whr_forall : whr (foralle (foralli (\a:i. D a)) T') (D T').
whr_andel : whr D D' -> whr (andel D) (andel D').
whr_ander : whr D D' -> whr (ander D) (ander D').
whr_impe : whr D D' -> whr (impe D E) (impe D' E).
whr_foralle : whr D D' -> whr (foralle D T') (foralle D' T').
tocan : Pi A:o. pf A -> pf A -> type.
toatm : pf A -> pf A -> type.
tc_and :
   tocan B (ander D) D2' -> tocan A (andel D) D1'
      -> tocan (and A B) D (andi D1' D2').
tc_imp :
   (Pi u:pf A. toatm u u -> tocan B (impe D u) (D' u))
      -> tocan (imp A B) D (impi (\d:pf A. D' d)).
tc_true : tocan true D truei.
tc_forall :
   (Pi a:i. tocan (A a) (foralle D a) (D' a))
      -> tocan (forall (\t:i. A t)) D (foralli (\a:i. D' a)).
tc_whr : tocan (atom P) D'' D' -> whr D D'' -> tocan (atom P) D D'.
tc_atm : toatm D D' -> tocan (atom P) D D'.
ta_impe : tocan A E E' -> toatm D D' -> toatm (impe D E) (impe D' E').
ta_andel : toatm D D' -> toatm (andel D) (andel D').
ta_ander : toatm D D' -> toatm (ander D) (ander D').
ta_foralle : toatm D D' -> toatm (foralle D T') (foralle D' T').
iscan : tocan A D D' -> can A D' -> type.
isatm : toatm D D' -> atm D' -> type.
isc_and :
   iscan TC2 CN2 -> iscan TC1 CN1 -> iscan (tc_and TC2 TC1) (can_andi CN2 CN1).
isc_imp :
   (Pi u:pf A. Pi ta:toatm u u. Pi at:atm u.
       isatm ta at -> iscan (TC1 u ta) (CN1 u at))
      -> iscan (tc_imp (\u:pf A. \ta:toatm u u. TC1 u ta))
            (can_impi (\u:pf A. \at:atm u. CN1 u at)).
isc_true : iscan tc_true can_truei.
isc_forall :
   (Pi a:i. iscan (TC1 a) (CN1 a))
      -> iscan (tc_forall (\a:i. TC1 a)) (can_foralli (\a:i. CN1 a)).
isc_whr : iscan TC1 CN1 -> iscan (tc_whr TC1 WHR) CN1.
isc_atm : isatm TA1 AT1 -> iscan (tc_atm TA1) (can_atm AT1).
isa_impe :
   iscan TC2 CN2 -> isatm TA1 AT1 -> isatm (ta_impe TC2 TA1) (atm_impe CN2 AT1).
isa_andel : isatm TA1 AT1 -> isatm (ta_andel TA1) (atm_andel AT1).
isa_ander : isatm TA1 AT1 -> isatm (ta_ander TA1) (atm_ander AT1).
isa_foralle : isatm TA1 AT1 -> isatm (ta_foralle TA1) (atm_foralle AT1).


solve : o -> type.
assume : o -> type.
>> : o -> p -> type.
s_and : solve A2 -> solve A1 -> solve (and A1 A2).
s_imp : (assume A2 -> solve A1) -> solve (imp A2 A1).
s_true : solve true.
s_forall : (Pi a:i. solve (A1 a)) -> solve (forall (\t:i. A1 t)).
s_atom : >> A P -> assume A -> solve (atom P).
i_andl : >> A1 P -> >> (and A1 A2) P.
i_andr : >> A2 P -> >> (and A1 A2) P.
i_imp : solve A2 -> >> A1 P -> >> (imp A2 A1) P.
i_forall : Pi T':i. >> (A1 T') P -> >> (forall (\t:i. A1 t)) P.
i_atom : >> (atom P) P.
s_sound : solve A -> pf A -> type.
h_sound : assume A -> pf A -> type.
i_sound : >> A P -> (pf A -> pf (atom P)) -> type.
ss_and : s_sound S2 D2 -> s_sound S1 D1 -> s_sound (s_and S2 S1) (andi D1 D2).
ss_imp :
   (Pi d:assume A. Pi u:pf A. h_sound d u -> s_sound (S1 d) (D1 u))
      -> s_sound (s_imp (\h:assume A. S1 h)) (impi (\d:pf A. D1 d)).
ss_true : s_sound s_true truei.
ss_forall :
   (Pi a:i. s_sound (S1 a) (D1 a))
      -> s_sound (s_forall (\a:i. S1 a)) (foralli (\a:i. D1 a)).
ss_atom :
   i_sound I2 (\d:pf A1. D2 d) -> h_sound H1 D1
      -> s_sound (s_atom I2 H1) (D2 D1).
is_andl :
   i_sound I1 (\d:pf A1. D1 d)
      -> i_sound (i_andl I1) (\u:pf (and A1 A2). D1 (andel u)).
is_andr :
   i_sound I2 (\d:pf A2. D2 d)
      -> i_sound (i_andr I2) (\u:pf (and A1 A2). D2 (ander u)).
is_imp :
   s_sound S2 D2 -> i_sound I1 (\d:pf A1. D1 d)
      -> i_sound (i_imp S2 I1) (\u:pf (imp A2 A1). D1 (impe u D2)).
is_forall :
   i_sound I1 (\d:pf (A1 T'). D1 d)
      -> i_sound (i_forall T' I1)
            (\u:pf (forall (\t:i. A1 t)). D1 (foralle u T')).
is_atom : i_sound i_atom (\u:pf (atom P). u).

ss_can : s_sound S D -> can A D -> type.
hs_atm : h_sound H D -> atm D -> type.
is_atm : i_sound I (\d:pf A. D d) -> (Pi u:pf A. atm u -> atm (D u)) -> type.
ssc_and :
   ss_can SS2 CN2 -> ss_can SS1 CN1
      -> ss_can (ss_and SS2 SS1) (can_andi CN2 CN1).
ssc_imp :
   (Pi d:assume A. Pi u:pf A. Pi hs:h_sound d u. Pi at:atm u.
       hs_atm hs at -> ss_can (SS1 d u hs) (CN1 u at))
      -> ss_can (ss_imp (\d:assume A. \u:pf A. \hs:h_sound d u. SS1 d u hs))
            (can_impi (\u:pf A. \at:atm u. CN1 u at)).
ssc_true : ss_can ss_true can_truei.
ssc_forall :
   (Pi a:i. ss_can (SS1 a) (CN1 a))
      -> ss_can (ss_forall (\a:i. SS1 a)) (can_foralli (\a:i. CN1 a)).
ssc_atom :
   is_atm IS2 (\u:pf A1. \at:atm u. AT2 u at) -> hs_atm HS1 AT1
      -> ss_can (ss_atom IS2 HS1) (can_atm (AT2 D2 AT1)).
isc_andl :
   is_atm IS1 (\u:pf A. \at:atm u. AT1 u at)
      -> is_atm (is_andl IS1)
            (\u:pf (and A B). \at:atm u. AT1 (andel u) (atm_andel at)).
isc_andr :
   is_atm IS1 (\u:pf B. \at:atm u. AT1 u at)
      -> is_atm (is_andr IS1)
            (\u:pf (and A B). \at:atm u. AT1 (ander u) (atm_ander at)).
isc_imp' :
   ss_can SS2 CN2 -> is_atm IS1 (\u:pf B. \at:atm u. AT1 u at)
      -> is_atm (is_imp SS2 IS1)
            (\u:pf (imp A B). \at:atm u. AT1 (impe u D1) (atm_impe CN2 at)).
isc_forall' :
   is_atm IS1 (\u:pf (A T1). \at:atm u. AT1 u at)
      -> is_atm (is_forall IS1)
            (\u:pf (forall (\t:i. A t)). \at:atm u.
                AT1 (foralle u T1) (atm_foralle at)).
isc_atom : is_atm is_atom (\u:pf (atom P). \at:atm u. at).

cmpcs : can A D -> solve A -> type.
cmpai : Pi D:pf A. atm D -> (Pi P:p. >> A P -> solve (atom P)) -> type.
cmpcs_andi :
   cmpcs CN2 S2 -> cmpcs CN1 S1 -> cmpcs (can_andi CN2 CN1) (s_and S2 S1).
cmpcs_impi :
   (Pi u:pf A2. Pi a:atm u. Pi d:assume A2.
       cmpai u a (\P:p. \i1:>> A2 P. s_atom i1 d) -> cmpcs (CN1 u a) (S1 d))
      -> cmpcs (can_impi (\u:pf A2. \at:atm u. CN1 u at))
            (s_imp (\h:assume A2. S1 h)).
cmpcs_truei : cmpcs can_truei s_true.
cmpcs_foralli :
   (Pi a:i. cmpcs (CN1 a) (S1 a))
      -> cmpcs (can_foralli (\a:i. CN1 a)) (s_forall (\a:i. S1 a)).
cmpcs_atm :
   cmpai D AT1 (\P:p. \i1:>> (atom Q) P. I1 P i1)
      -> cmpcs (can_atm AT1) (I1 Q i_atom).
cmpai_andel :
   cmpai D1 CN1 (\P:p. \i1:>> (and A A1) P. I1 P i1)
      -> cmpai (andel D1) (atm_andel CN1) (\P:p. \i1:>> A P. I1 P (i_andl i1)).
cmpai_ander :
   cmpai D1 CN1 (\P:p. \i1:>> (and A1 A) P. I1 P i1)
      -> cmpai (ander D1) (atm_ander CN1) (\P:p. \i1:>> A P. I1 P (i_andr i1)).
cmpai_impe :
   cmpcs CN2 S2 -> cmpai D1 AT1 (\P:p. \i1:>> (imp A1 A) P. I1 P i1)
      -> cmpai (impe D1 D2) (atm_impe CN2 AT1)
            (\P:p. \i1:>> A P. I1 P (i_imp S2 i1)).
cmpai_foralle :
   cmpai D1 AT1 (\P:p. \i1:>> (forall (\t:i. A1 t)) P. I1 P i1)
      -> cmpai (foralle D1 T') (atm_foralle AT1)
            (\P:p. \i1:>> (A1 T') P. I1 P (i_forall T' i1)).

goal : type.
prog : type.
atom' : p -> goal.
and' : goal -> goal -> goal.
imp' : prog -> goal -> goal.
true' : goal.
forall' : (i -> goal) -> goal.
or' : goal -> goal -> goal.
false' : goal.
exists' : (i -> goal) -> goal.
== : p -> p -> goal.
atom@ : p -> prog.
and@ : prog -> prog -> prog.
imp@ : goal -> prog -> prog.
true@ : prog.
forall@ : (i -> prog) -> prog.
gl : o -> goal -> type.
pg : o -> prog -> type.
gl_atom : gl (atom P) (atom' P).
gl_and : gl A2 G2 -> gl A1 G1 -> gl (and A1 A2) (and' G1 G2).
gl_imp : pg A2 D2 -> gl A1 G1 -> gl (imp A2 A1) (imp' D2 G1).
gl_true : gl true true'.
gl_forall :
   (Pi a:i. gl (A1 a) (G1 a)) -> gl (forall (\t:i. A1 t)) (forall' (\t:i. G1 t)).
pg_atom : pg (atom P) (atom@ P).
pg_and : pg A2 G2 -> pg A1 G1 -> pg (and A1 A2) (and@ G1 G2).
pg_imp : gl A2 G2 -> pg A1 D1 -> pg (imp A2 A1) (imp@ G2 D1).
pg_true : pg true true@.
pg_forall :
   (Pi a:i. pg (A1 a) (D1 a)) -> pg (forall (\t:i. A1 t)) (forall@ (\t:i. D1 t)).
solve' : goal -> type.
assume' : prog -> type.
resolve : prog -> p -> goal -> type.
s'_and : solve' G2 -> solve' G1 -> solve' (and' G1 G2).
s'_imp : (assume' D2 -> solve' G1) -> solve' (imp' D2 G1).
s'_true : solve' true'.
s'_forall : (Pi a:i. solve' (G1 a)) -> solve' (forall' (\t:i. G1 t)).
s'_eqp : solve' (== P P).
s'_orl : solve' G1 -> solve' (or' G1 G2).
s'_orr : solve' G2 -> solve' (or' G1 G2).
s'_exists : Pi T':i. solve' (G1 T') -> solve' (exists' (\t:i. G1 t)).
s'_atom : solve' G -> resolve D P G -> assume' D -> solve' (atom' P).
r_and :
   resolve D2 P G2 -> resolve D1 P G1 -> resolve (and@ D1 D2) P (or' G1 G2).
r_imp : resolve D1 P G1 -> resolve (imp@ G2 D1) P (and' G1 G2).
r_true : resolve true@ P false'.
r_forall :
   (Pi a:i. resolve (D1 a) P (G1 a))
      -> resolve (forall@ (\t:i. D1 t)) P (exists' (\t:i. G1 t)).
r_atom : resolve (atom@ Q) P (== Q P).
s'_sound : solve' G -> gl A G -> solve A -> type.
h'_sound : assume' D -> pg A D -> assume A -> type.
r_sound : resolve D P G -> solve' G -> pg A D -> >> A P -> type.
s's_and :
   s'_sound S'2 GL2 S2 -> s'_sound S'1 GL1 S1
      -> s'_sound (s'_and S'2 S'1) (gl_and GL2 GL1) (s_and S2 S1).
s's_imp :
   (Pi h':assume' D2. Pi h:assume A2.
       h'_sound h' PG2 h -> s'_sound (S'1 h') GL1 (S1 h))
      -> s'_sound (s'_imp (\h':assume' D2. S'1 h')) (gl_imp PG2 GL1)
            (s_imp (\h:assume A2. S1 h)).
s's_true : s'_sound s'_true gl_true s_true.
s's_forall :
   (Pi a:i. s'_sound (S'1 a) (GL1 a) (S1 a))
      -> s'_sound (s'_forall (\a:i. S'1 a)) (gl_forall (\a:i. GL1 a))
            (s_forall (\a:i. S1 a)).
s's_atom :
   r_sound R2 S'3 PG1 I2 -> h'_sound H'1 PG1 PR1
      -> s'_sound (s'_atom S'3 R2 H'1) gl_atom (s_atom I2 PR1).
rs'_andl :
   r_sound R1 S'1 PG1 I1
      -> r_sound (r_and R2 R1) (s'_orl S'1) (pg_and PG2 PG1) (i_andl I1).
rs'_andr :
   r_sound R2 S'2 PG2 I2
      -> r_sound (r_and R2 R1) (s'_orr S'2) (pg_and PG2 PG1) (i_andr I2).
rs'_imp :
   s'_sound S'2 GL2 S2 -> r_sound R1 S'1 PG1 I1
      -> r_sound (r_imp R1) (s'_and S'2 S'1) (pg_imp GL2 PG1) (i_imp S2 I1).
rs'_forall :
   r_sound (R1 T') S'1 (PG1 T') I1
      -> r_sound (r_forall (\a:i. R1 a)) (s'_exists T' S'1)
            (pg_forall (\a:i. PG1 a)) (i_forall T' I1).
rs'_atom : r_sound r_atom s'_eqp pg_atom i_atom.

r_total : Pi D:prog. resolve D P G -> type.
rt_and : r_total D2 R2 -> r_total D1 R1 -> r_total (and@ D1 D2) (r_and R2 R1).
rt_imp : r_total D1 R1 -> r_total (imp@ G2 D1) (r_imp R1).
rt_true : r_total true@ r_true.
rt_forall :
   (Pi a:i. r_total (D1 a) (R1 a))
      -> r_total (forall@ (\t:i. D1 t)) (r_forall (\a:i. R1 a)).
rt_atom : r_total (atom@ Q) r_atom.
s'_comp : solve A -> gl A G -> solve' G -> type.
h'_comp : assume A -> pg A D -> assume' D -> type.
r_comp : >> A P -> pg A D -> resolve D P G -> solve' G -> type.
s's_and' :
   s'_comp S2 GL2 S'2 -> s'_comp S1 GL1 S'1
      -> s'_comp (s_and S2 S1) (gl_and GL2 GL1) (s'_and S'2 S'1).
s's_imp' :
   (Pi h:assume A2. Pi h':assume' D2.
       h'_comp h PG2 h' -> s'_comp (S1 h) GL1 (S'1 h'))
      -> s'_comp (s_imp (\h:assume A2. S1 h)) (gl_imp PG2 GL1)
            (s'_imp (\h':assume' D2. S'1 h')).
s's_true' : s'_comp s_true gl_true s'_true.
s's_forall' :
   (Pi a:i. s'_comp (S1 a) (GL1 a) (S'1 a))
      -> s'_comp (s_forall (\a:i. S1 a)) (gl_forall (\a:i. GL1 a))
            (s'_forall (\a:i. S'1 a)).
s's_atom' :
   r_comp I2 PG1 R2 S'3 -> r_total D R2 -> h'_comp H1 PG1 H'1
      -> s'_comp (s_atom I2 H1) gl_atom (s'_atom S'3 R2 H'1).
rs'_andl' :
   r_comp I1 PG1 R1 S'1
      -> r_comp (i_andl I1) (pg_and PG2 PG1) (r_and R2 R1) (s'_orl S'1).
rs'_andr' :
   r_comp I2 PG2 R2 S'2
      -> r_comp (i_andr I2) (pg_and PG2 PG1) (r_and R2 R1) (s'_orr S'2).
rs'_imp' :
   s'_comp S2 GL2 S'2 -> r_comp I1 PG1 R1 S'1
      -> r_comp (i_imp S2 I1) (pg_imp GL2 PG1) (r_imp R1) (s'_and S'2 S'1).
rs'_forall' :
   r_comp I1 (PG1 T') (R1 T') S'1
      -> r_comp (i_forall T' I1) (pg_forall (\a:i. PG1 a))
            (r_forall (\a:i. R1 a)) (s'_exists T' S'1).
rs'_atom' : r_comp i_atom pg_atom r_atom s'_eqp.

