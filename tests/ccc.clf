obj : type.
mor : obj -> obj -> type.
== : mor A B -> mor A B -> type.
id : mor A A.
@ : mor B C -> mor A B -> mor A C.
refl : == F F.
then : == F F' -> == F' F'' -> == F F''.
sym : == F F' -> == F' F.
=@= : == F F' -> == G G' -> == (@ F G) (@ F' G').
id_l : == (@ id F) F.
id_r : == (@ F id) F.
ass : == (@ H (@ G F)) (@ (@ H G) F).
1' : obj.
'* : obj -> obj -> obj.
drop : mor A 1'.
fst : mor ('* A B) A.
snd : mor ('* A B) B.
pair : mor A B -> mor A C -> mor A ('* B C).
=pair= : == F F' -> == G G' -> == (pair F G) (pair F' G').
term_u : == H drop.
prod_l : == (@ fst (pair F G)) F.
prod_r : == (@ snd (pair F G)) G.
prod_u : == (pair (@ fst H) (@ snd H)) H.
=> : obj -> obj -> obj.
app : mor ('* (=> B C) B) C.
cur : mor ('* A B) C -> mor A (=> B C).
=cur= : == F F' -> == (cur F) (cur F').
exp_e : == (@ app (pair (@ (cur F) fst) snd)) F.
exp_u : == (cur (@ app (pair (@ G fst) snd))) G.
term : obj -> type.
conv : term A -> term A -> type.
lpair : term A -> term B -> term ('* A B).
lfst : term ('* A B) -> term A.
lsnd : term ('* A B) -> term B.
lunit : term 1'.
llam : (term A -> term B) -> term (=> A B).
lapp : term (=> A B) -> term A -> term B.
c_refl : conv E E.
c_trans : conv E E' -> conv E' E'' -> conv E E''.
c_sym : conv E E' -> conv E' E.
c_fst : conv E E' -> conv (lfst E) (lfst E').
c_snd : conv E E' -> conv (lsnd E) (lsnd E').
c_pair : conv E1 E1' -> conv E2 E2' -> conv (lpair E1 E2) (lpair E1' E2').
c_lam :
   (Pi x:term _A1. conv (E x) (E' x))
      -> conv (llam (\_e:term _A1. E _e)) (llam (\_e:term _A1. E' _e)).
c_app : conv E1 E1' -> conv E2 E2' -> conv (lapp E1 E2) (lapp E1' E2').
c_unit : conv lunit E.
c_prl : conv (lfst (lpair E1 E2)) E1.
c_prr : conv (lsnd (lpair E1 E2)) E2.
c_surj : conv (lpair (lfst E) (lsnd E)) E.
c_beta : conv (lapp (llam (\_e:term _A2. E1 _e)) E2) (E1 E2).
c_eta : conv (llam (\x:term _A1. lapp E x)) E.
distp : == (@ (pair F G) H) (pair (@ F H) (@ G H)) -> type.
distp1 :
   distp
      (then (sym prod_u)
          (=pair= (then ass (=@= prod_l refl)) (then ass (=@= prod_r refl)))).
appl : == (@ app (pair (@ (cur F) G) H)) (@ F (pair G H)) -> type.
appl1 :
   distp DP
      -> appl
            (then
                (=@= refl
                    (then
                        (=pair= (then (=@= refl (sym prod_l)) ass) (sym prod_r))
                        (sym DP)))
                (then ass (=@= exp_e refl))).
distc : == (@ (cur F) G) (cur (@ F (pair (@ G fst) snd))) -> type.
distc1 :
   appl AP
      -> distc
            (then (sym exp_u)
                (=cur= (then (=@= refl (=pair= (sym ass) refl)) AP))).
cong : Pi M:term A -> term B. (conv E E' -> conv (M E) (M E')) -> type.
cong_var : cong (\x:term _A1. x) (\c:conv _E1 _E2. c).
cong_unit : cong (\x:term _A1. lunit) (\c:conv _E1 _E2. c_refl).
cong_pair :
   cong (\_e:term _A1. E2 _e) (\_lc:conv _E1 _E2. CP2 _lc)
      -> cong (\_e:term _A1. E1 _e) (\_lc:conv _E1 _E2. CP1 _lc)
      -> cong (\x:term _A1. lpair (E1 x) (E2 x))
            (\c:conv _E1 _E2. c_pair (CP1 c) (CP2 c)).
cong_fst :
   cong (\_e:term _A1. E _e) (\_lc:conv _E1 _E2. CP _lc)
      -> cong (\x:term _A1. lfst (E x)) (\c:conv _E1 _E2. c_fst (CP c)).
cong_snd :
   cong (\_e:term _A1. E _e) (\_lc:conv _E1 _E2. CP _lc)
      -> cong (\x:term _A1. lsnd (E x)) (\c:conv _E1 _E2. c_snd (CP c)).
cong_lam :
   (Pi y:term _A1.
       cong (\x:term (_A2 y). y) (\c:conv (_E1 y) (_E2 y). c_refl)
          -> cong (\x:term _A3. E x y) (\c:conv _E3 _E4. CP c y))
      -> cong (\x:term _A3. llam (\y:term _A1. E x y))
            (\c:conv _E3 _E4. c_lam (\y:term _A1. CP c y)).
cong_app :
   cong (\_e:term _A1. E2 _e) (\_lc:conv _E1 _E2. CP2 _lc)
      -> cong (\_e:term _A1. E1 _e) (\_lc:conv _E1 _E2. CP1 _lc)
      -> cong (\x:term _A1. lapp (E1 x) (E2 x))
            (\c:conv _E1 _E2. c_app (CP1 c) (CP2 c)).
env : obj -> type.
empty : env 1'.
addv : env P -> term A -> env ('* P A).
absv : env A -> term B -> mor A B -> type.
av_x : absv (addv G X) X snd.
av_y : absv G X M -> absv (addv G Y) X (@ M fst).
abse : env A -> term B -> mor A B -> type.
avar : absv G X M -> abse G X M.
aunit : abse G lunit drop.
apair : abse G E1 F1 -> abse G E2 F2 -> abse G (lpair E1 E2) (pair F1 F2).
afst : abse G E F -> abse G (lfst E) (@ fst F).
asnd : abse G E F -> abse G (lsnd E) (@ snd F).
alam :
   (Pi x:term _A1. abse (addv G x) (E x) F)
      -> abse G (llam (\x:term _A1. E x)) (cur F).
aapp :
   abse G E1 F1 -> abse G E2 F2 -> abse G (lapp E1 E2) (@ app (pair F1 F2)).
conc : mor A B -> (term A -> term B) -> type.
cid : conc id (\x:term _A1. x).
ccomp :
   conc F (\_e:term _A1. M _e) -> conc G (\_e:term _A3. N _e)
      -> conc (@ F G) (\x:term _A3. M (N x)).
cunit : conc drop (\x:term _A1. lunit).
cpair :
   conc F (\_e:term _A1. M _e) -> conc G (\_e:term _A1. N _e)
      -> conc (pair F G) (\x:term _A1. lpair (M x) (N x)).
cfst : conc fst (\x:term ('* _A1 _A2). lfst x).
csnd : conc snd (\x:term ('* _A1 _A2). lsnd x).
ccur :
   conc F (\_e:term ('* _A1 _A2). M _e)
      -> conc (cur F) (\a:term _A1. llam (\b:term _A2. M (lpair a b))).
capp : conc app (\a:term ('* (=> _A1 _A2) _A1). lapp (lfst a) (lsnd a)).
etoc :
   == F F' -> conc F (\_e:term _A1. M _e) -> conc F' (\_e:term _A1. M' _e)
      -> (Pi x:term _A1. conv (M x) (M' x)) -> type.
etoc_refl : etoc refl CF CF (\x:term _A1. c_refl).
etoc_then :
   etoc EP1 CF'' CF' (\x:term _A1. CP2 x)
      -> etoc EP1 CF CF'' (\x:term _A1. CP1 x)
      -> etoc (then EP1 EP2) CF CF' (\x:term _A1. c_trans (CP1 x) (CP2 x)).
etoc_sym :
   etoc EP CF' CF (\x:term _A1. CP x)
      -> etoc (sym EP) CF CF' (\x:term _A1. c_sym (CP x)).
etoc_comp :
   (Pi x:term _A1.
       cong (\_e:term _A2. N' _e) (\_lc:conv (M x) (_E1 x). CVF' x _lc))
      -> etoc EPG CG CG' (\x:term _A1. CPG x)
      -> etoc EPF CF CF' (\x:term _A2. CPF x)
      -> etoc (=@= EPF EPG) (ccomp CF (CG : conc _ M)) (ccomp (CF' : conc _ N') CG')
            (\x:term _A1. c_trans (CPF (M x)) (CVF' x (CPG x))).
etoc_pair :
   etoc EPG CG CG' (\x:term _A1. CPG x) -> etoc EPF CF CF' (\x:term _A1. CPF x)
      -> etoc (=pair= EPF EPG) (cpair CF CG) (cpair CF' CG')
            (\x:term _A1. c_pair (CPF x) (CPG x)).
etoc_cur :
   etoc EPF CF CF' (\x:term ('* _A1 _A2). CPF x)
      -> etoc (=cur= EPF) (ccur CF) (ccur CF')
            (\x:term _A1. c_lam (\y:term _A2. CPF (lpair x y))).
etoc_idl : etoc id_l (ccomp cid CF) CF (\x:term _A1. c_refl).
etoc_idr : etoc id_r (ccomp CF cid) CF (\x:term _A1. c_refl).
etoc_ass :
   etoc ass (ccomp CF (ccomp CG CH)) (ccomp (ccomp CF CG) CH)
      (\x:term _A1. c_refl).
etoc_termu : etoc term_u cunit CF (\x:term _A1. c_unit).
etoc_prodl : etoc prod_l (ccomp cfst (cpair CF CG)) CF (\x:term _A1. c_prl).
etoc_prodr : etoc prod_r (ccomp csnd (cpair CF CG)) CG (\x:term _A1. c_prr).
etoc_produ :
   etoc prod_u (cpair (ccomp cfst CF) (ccomp csnd CF)) CF (\x:term _A1. c_surj).
etoc_expe :
   (Pi x:term ('* _A1 _A2).
       cong (\_e:term ('* _A1 _A2). M _e)
          (\_lc:conv (lpair (lfst x) (lsnd x)) x. CC x _lc))
      -> etoc exp_e (ccomp capp (cpair (ccomp (ccur CF) cfst) csnd)) CF
            (\x:term ('* _A1 _A2).
                c_trans (c_app c_prl c_prr) (c_trans c_beta (CC x c_surj))).
etoc_expu :
   (Pi x:term _A1. Pi y:term _A2.
       cong (\_e:term _A1. M _e) (\_lc:conv (lfst (lpair x y)) x. CC x y _lc))
      -> etoc exp_u (ccur (ccomp capp (cpair (ccomp CF cfst) csnd))) CF
            (\x:term _A1.
                c_trans
                   (c_lam
                       (\y:term _A2.
                           c_app (c_trans c_prl (CC x y c_prl))
                              (c_trans c_prr c_prr))) c_eta).
exp : env P -> term P -> type.
exp_empty : exp empty lunit.
exp_addv : exp G N -> exp (addv G X) (lpair N X).
invcav :
   absv G X F -> conc F (\_e:term _A1. M _e) -> exp G N -> conv (M N) X -> type.
invcav_x : invcav av_x csnd (exp_addv EP) c_prr.
invcav_y :
   invcav AV CP EP CVP
      -> cong (\_e:term _A1. M _e) (\_lc:conv (lfst (lpair MG Y)) MG. CC _lc)
      -> invcav (av_y AV) (ccomp (CP : conc _ M) cfst) (exp_addv EP : exp _ (lpair MG Y)) (c_trans (CC (c_prl : conv (lfst (lpair MG Y)) _)) CVP).
invca :
   abse G E F -> conc F (\_e:term _A1. M _e) -> exp G N -> conv (M N) E -> type.
invca_var : invcav AV CP EP CVP -> invca (avar AV) CP EP CVP.
invca_fst :
   invca AP CP EP CVP -> invca (afst AP) (ccomp cfst CP) EP (c_fst CVP).
invca_snd :
   invca AP CP EP CVP -> invca (asnd AP) (ccomp csnd CP) EP (c_snd CVP).
invca_pair :
   invca AP2 CP2 EP CVP2 -> invca AP1 CP1 EP CVP1
      -> invca (apair AP1 AP2) (cpair CP1 CP2) EP (c_pair CVP1 CVP2).
invca_lam :
   (Pi x:term _A1. invca (AP x) CP (exp_addv EP) (CVP x))
      -> invca (alam (\x:term _A1. AP x)) (ccur CP) EP
            (c_lam (\x:term _A1. CVP x)).
invca_app :
   invca AP2 CP2 EP CVP2 -> invca AP1 CP1 EP CVP1
      -> invca (aapp AP1 AP2) (ccomp capp (cpair CP1 CP2)) EP
            (c_app (c_trans c_prl CVP1) (c_trans c_prr CVP2)).
zconc : mor A B -> env A -> term B -> type.
zconc1 : exp G MG -> conc F (\_e:term _A1. M _e) -> zconc F G (M MG).
inv : abse G E F -> zconc F G E' -> conv E' E -> type.
inv1 : invca AP CP EXP EE -> inv AP (zconc1 EXP CP) EE.
