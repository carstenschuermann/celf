nat : type.
z : nat.
s : nat -> nat.
nt : nat -> type.
nt_z : nt z.
nt_s : nt X -> nt (s X).
plus : nat -> nat -> nat -> type.
p_z : plus z Y Y.
p_s : plus X Y Z -> plus (s X) Y (s Z).
acker : nat -> nat -> nat -> type.
a_1 : acker z Y (s Y).
a_2 : acker X (s z) Z -> acker (s X) z Z.
a_3 : acker X Z' Z -> acker (s X) Y Z' -> acker (s X) (s Y) Z.
arg1 : nat = s (s (s z)).
arg2 : nat = s (s (s (s (s z)))).
