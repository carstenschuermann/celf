exp : type.
z : exp.
s : exp -> exp.
case : exp -> exp -> (exp -> exp) -> exp.
pair : exp -> exp -> exp.
fst : exp -> exp.
snd : exp -> exp.
lam : (exp -> exp) -> exp.
app : exp -> exp -> exp.
letv : exp -> (exp -> exp) -> exp.
letn : exp -> (exp -> exp) -> exp.
fix : (exp -> exp) -> exp.
eval : exp -> exp -> type.
ev_z : eval z z.
ev_s : eval E V -> eval (s E) (s V).
ev_case_z : eval E2 V -> eval E1 z -> eval (case E1 E2 (\x:exp. E3 x)) V.
ev_case_s :
   eval (E3 V1') V -> eval E1 (s V1') -> eval (case E1 E2 (\x:exp. E3 x)) V.
ev_pair : eval E2 V2 -> eval E1 V1 -> eval (pair E1 E2) (pair V1 V2).
ev_fst : eval E (pair V1 V2) -> eval (fst E) V1.
ev_snd : eval E (pair V1 V2) -> eval (snd E) V2.
ev_lam : eval (lam (\x:exp. E x)) (lam (\x:exp. E x)).
ev_app :
   eval (E1' V2) V -> eval E2 V2 -> eval E1 (lam (\x:exp. E1' x))
      -> eval (app E1 E2) V.
ev_letv : eval (E2 V1) V -> eval E1 V1 -> eval (letv E1 (\x:exp. E2 x)) V.
ev_letn : eval (E2 E1) V -> eval (letn E1 (\x:exp. E2 x)) V.
ev_fix : eval (E (fix (\x:exp. E x))) V -> eval (fix (\x:exp. E x)) V.
value : exp -> type.
val_z : value z.
val_lam : value (lam (\x:exp. E x)).
val_s : value V -> value (s V).
val_pair : value V2 -> value V1 -> value (pair V1 V2).
vs : eval E V -> value V -> type.
vs_z : vs ev_z val_z.
vs_s : vs D1 P1 -> vs (ev_s D1) (val_s P1).
vs_case_z : vs D2 P2 -> vs (ev_case_z D2 D1) P2.
vs_case_s : vs D3 P3 -> vs (ev_case_s D3 D1) P3.
vs_pair : vs D2 P2 -> vs D1 P1 -> vs (ev_pair D2 D1) (val_pair P2 P1).
vs_fst : vs D' (val_pair P2 P1) -> vs (ev_fst D') P1.
vs_snd : vs D' (val_pair P2 P1) -> vs (ev_snd D') P2.
vs_lam : vs ev_lam val_lam.
vs_app : vs D3 P3 -> vs (ev_app D3 D2 D1) P3.
vs_letv : vs D2 P2 -> vs (ev_letv D2 D1) P2.
vs_letn : vs D2 P2 -> vs (ev_letn D2) P2.
vs_fix : vs D1 P1 -> vs (ev_fix D1) P1.
closed : exp -> type.
clo_z : closed z.
clo_s : closed E -> closed (s E).
clo_case :
   (Pi x:exp. closed x -> closed (E3 x)) -> closed E2 -> closed E1
      -> closed (case E1 E2 (\x:exp. E3 x)).
clo_pair : closed E2 -> closed E1 -> closed (pair E1 E2).
clo_fst : closed E -> closed (fst E).
clo_snd : closed E -> closed (snd E).
clo_lam : (Pi x:exp. closed x -> closed (E x)) -> closed (lam (\x:exp. E x)).
clo_app : closed E2 -> closed E1 -> closed (app E1 E2).
clo_letv :
   (Pi x:exp. closed x -> closed (E2 x)) -> closed E1
      -> closed (letv E1 (\x:exp. E2 x)).
clo_letn :
   (Pi x:exp. closed x -> closed (E2 x)) -> closed E1
      -> closed (letn E1 (\x:exp. E2 x)).
clo_fix : (Pi x:exp. closed x -> closed (E x)) -> closed (fix (\x:exp. E x)).

open : exp -> type.
open_s : open E -> open (s E).
open_case1 : open E1 -> open (case E1 E2 (\x:exp. E3 x)).
open_case2 : open E2 -> open (case E1 E2 (\x:exp. E3 x)).
open_case3 : (Pi x:exp. open (E3 x)) -> open (case E1 E2 (\x:exp. E3 x)).
open_pair1 : open E1 -> open (pair E1 E2).
open_pair2 : open E2 -> open (pair E1 E2).
open_fst : open E -> open (fst E).
open_snd : open E -> open (snd E).
open_lam : (Pi x:exp. open (E x)) -> open (lam (\x:exp. E x)).
open_app1 : open E1 -> open (app E1 E2).
open_app2 : open E2 -> open (app E1 E2).
open_letv1 : open E1 -> open (letv E1 (\x:exp. E2 x)).
open_letv2 : (Pi x:exp. open (E2 x)) -> open (letv E1 (\x:exp. E2 x)).
open_letn1 : open E1 -> open (letn E1 (\x:exp. E2 x)).
open_letn2 : (Pi x:exp. open (E2 x)) -> open (letn E1 (\x:exp. E2 x)).
open_fix : (Pi x:exp. open (E x)) -> open (fix (\x:exp. E x)).

tp : type.
nat : tp.
cross : tp -> tp -> tp.
arrow : tp -> tp -> tp.
of : exp -> tp -> type.
tp_z : of z nat.
tp_s : of E nat -> of (s E) nat.
tp_case :
   (Pi x:exp. of x nat -> of (E3 x) T') -> of E2 T' -> of E1 nat
      -> of (case E1 E2 (\x:exp. E3 x)) T'.
tp_pair : of E2 T2 -> of E1 T1 -> of (pair E1 E2) (cross T1 T2).
tp_fst : of E (cross T1 T2) -> of (fst E) T1.
tp_snd : of E (cross T1 T2) -> of (snd E) T2.
tp_lam :
   (Pi x:exp. of x T1 -> of (E x) T2) -> of (lam (\x:exp. E x)) (arrow T1 T2).
tp_app : of E2 T2 -> of E1 (arrow T2 T1) -> of (app E1 E2) T1.
tp_letv :
   (Pi x:exp. of x T1 -> of (E2 x) T2) -> of E1 T1
      -> of (letv E1 (\x:exp. E2 x)) T2.
tp_letn : of (E2 E1) T2 -> of E1 T1 -> of (letn E1 (\x:exp. E2 x)) T2.
tp_fix : (Pi x:exp. of x T' -> of (E x) T') -> of (fix (\x:exp. E x)) T'.

tps : eval E V -> of E T' -> of V T' -> type.
tps_z : tps ev_z tp_z tp_z.
tps_s : tps D1 P1 Q1 -> tps (ev_s D1) (tp_s P1) (tp_s Q1).
tps_case_z :
   tps D2 P2 Q2
      -> tps (ev_case_z D2 D1) (tp_case (\x:exp. \u:of x nat. P3 x u) P2 P1) Q2.
tps_case_s :
   tps D3 (P3 V1 Q1') Q3 -> tps D1 P1 (tp_s Q1')
      -> tps (ev_case_s D3 D1) (tp_case (\x:exp. \u:of x nat. P3 x u) P2 P1) Q3.
tps_pair :
   tps D2 P2 Q2 -> tps D1 P1 Q1
      -> tps (ev_pair D2 D1) (tp_pair P2 P1) (tp_pair Q2 Q1).
tps_fst : tps D1 P1 (tp_pair Q2 Q1) -> tps (ev_fst D1) (tp_fst P1) Q1.
tps_snd : tps D1 P1 (tp_pair Q2 Q1) -> tps (ev_snd D1) (tp_snd P1) Q2.
tps_lam :
   tps ev_lam (tp_lam (\x:exp. \u:of x T1. P x u))
      (tp_lam (\x:exp. \u:of x T1. P x u)).
tps_app :
   tps D3 (Q1' V2 Q2) Q3 -> tps D2 P2 Q2
      -> tps D1 P1 (tp_lam (\x:exp. \u:of x T2. Q1' x u))
      -> tps (ev_app D3 D2 D1) (tp_app P2 P1) Q3.
tps_letv :
   tps D2 (P2 V1 Q1) Q2 -> tps D1 P1 Q1
      -> tps (ev_letv D2 D1) (tp_letv (\x:exp. \u:of x T2. P2 x u) P1) Q2.
tps_letn : tps D2 P2 Q2 -> tps (ev_letn D2) (tp_letn P2 P1) Q2.
tps_fix :
   tps D1 (P1 (fix (\x:exp. E1 x)) (tp_fix (\x:exp. \u:of x T1. P1 x u))) Q1
      -> tps (ev_fix D1) (tp_fix (\x:exp. \u:of x T1. P1 x u)) Q1.
