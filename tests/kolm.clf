i : type.
o : type.
and : o -> o -> o.
imp : o -> o -> o.
or : o -> o -> o.
not : o -> o.
true : o.
false : o.
forall : (i -> o) -> o.
exists : (i -> o) -> o.
nk : o -> type.
nk_andi : nk A -> nk B -> nk (and A B).
nk_andel : nk (and A B) -> nk A.
nk_ander : nk (and A B) -> nk B.
nk_impi : (nk A -> nk B) -> nk (imp A B).
nk_impe : nk (imp A B) -> nk A -> nk B.
nk_oril : nk A -> nk (or A B).
nk_orir : nk B -> nk (or A B).
nk_ore : nk (or A B) -> (nk A -> nk C) -> (nk B -> nk C) -> nk C.
nk_noti : (Pi p:o. nk A -> nk p) -> nk (not A).
nk_note : nk (not A) -> (Pi C:o. nk A -> nk C).
nk_truei : nk true.
nk_falsee : nk false -> nk C.
nk_foralli : (Pi a:i. nk (A a)) -> nk (forall (\t:i. A t)).
nk_foralle : nk (forall (\t:i. A t)) -> (Pi T':i. nk (A T')).
nk_existsi : Pi T':i. nk (A T') -> nk (exists (\t:i. A t)).
nk_existse : nk (exists (\t:i. A t)) -> (Pi a:i. nk (A a) -> nk C) -> nk C.
nk_dnotr : nk (not (not A)) -> nk A.
nk_dnotx_auto : (nk A -> nk (not (not A))) -> type.
% skolem nk_dnotx_auto#1 : nk A -> nk (not (not A)).
nk_dnotx : Pi A. nk A -> nk (not (not A))
   = \A. \NK:nk A. nk_noti (\p:o. \u:nk (not A). nk_note u p NK).
nj : o -> type.
nj_andi : nj A -> nj B -> nj (and A B).
nj_andel : nj (and A B) -> nj A.
nj_ander : nj (and A B) -> nj B.
nj_impi : (nj A -> nj B) -> nj (imp A B).
nj_impe : nj (imp A B) -> nj A -> nj B.
nj_oril : nj A -> nj (or A B).
nj_orir : nj B -> nj (or A B).
nj_ore : nj (or A B) -> (nj A -> nj C) -> (nj B -> nj C) -> nj C.
nj_noti : (Pi p:o. nj A -> nj p) -> nj (not A).
nj_note : nj (not A) -> (Pi C:o. nj A -> nj C).
nj_truei : nj true.
nj_falsee : nj false -> nj C.
nj_foralli : (Pi a:i. nj (A a)) -> nj (forall (\t:i. A t)).
nj_foralle : nj (forall (\t:i. A t)) -> (Pi T':i. nj (A T')).
nj_existsi : Pi T':i. nj (A T') -> nj (exists (\t:i. A t)).
nj_existse : nj (exists (\t:i. A t)) -> (Pi a:i. nj (A a) -> nj C) -> nj C.
nj_dnotx_auto : (nj A -> nj (not (not A))) -> type.
% skolem nj_dnotx_auto#1 : nj A -> nj (not (not A)).
nj_dnotx : Pi A. nj A -> nj (not (not A))
   = \A. \NJ:nj A. nj_noti (\p:o. \u:nj (not A). nj_note u p NJ).
nj_triple_neg_red : Pi A. nj (not (not (not A))) -> nj (not A)
   = \A. \NJ:nj (not (not (not A))).
        nj_noti (\q:o. \u:nj A. nj_note NJ q (nj_dnotx _ u)).
nj_dneg_falser_auto : (nj (not (not false)) -> (Pi C:o. nj C)) -> type.
% skolem nk_dnotx_auto#2 : nk A -> nk (not (not A)).
nj_dneg_falser : nj (not (not false)) -> (Pi C:o. nj C)
   = \NJ1:nj (not (not false)). \C:o.
        nj_note NJ1 C (nj_noti (\p:o. \u:nj false. nj_falsee u)).
n : o -> o = \p:o. not (not p).
kolm : o -> o -> type.
kolm_and : kolm B B* -> kolm A A* -> kolm (and A B) (n (and A* B*)).
kolm_imp : kolm B B* -> kolm A A* -> kolm (imp A B) (n (imp A* B*)).
kolm_or : kolm B B* -> kolm A A* -> kolm (or A B) (n (or A* B*)).
kolm_not : kolm A A* -> kolm (not A) (n (not A*)).
kolm_true : kolm true (n true).
kolm_false : kolm false (n false).
kolm_forall :
   (Pi a:i. kolm (A a) (A* a))
      -> kolm (forall (\t:i. A t)) (n (forall (\t:i. A* t))).
kolm_exists :
   (Pi a:i. kolm (A a) (A* a))
      -> kolm (exists (\t:i. A t)) (n (exists (\t:i. A* t))).
prop : o -> type.
and_prop : prop A -> prop B -> prop (and A B).
imp_prop : prop A -> prop B -> prop (imp A B).
or_prop : prop A -> prop B -> prop (or A B).
not_prop : prop A -> prop (not A).
true_prop : prop true.
false_prop : prop false.
exkolm : Pi A:o. Pi A*:o. kolm A A* -> type.
% skolem exkolm#1 : Pi A:o. o.
% skolem exkolm#2 : Pi A:o. kolm A (exkolm#1 A).
existskolm : Pi A:o. Pi A*:o. kolm A A* -> type.
existskolm_and :
   existskolm B B* KB -> existskolm A A* KA
      -> existskolm (and A B) (n (and A* B*)) (kolm_and KB KA).
existskolm_imp :
   existskolm B B* KB -> existskolm A A* KA
      -> existskolm (imp A B) (n (imp A* B*)) (kolm_imp KB KA).
existskolm_or :
   existskolm B B* KB -> existskolm A A* KA
      -> existskolm (or A B) (n (or A* B*)) (kolm_or KB KA).
existskolm_not :
   existskolm A A* KA -> existskolm (not A) (n (not A*)) (kolm_not KA).
existskolm_true : existskolm true (n true) kolm_true.
existskolm_false : existskolm false (n false) kolm_false.
existskolm_forall :
   (Pi a:i. existskolm (A a) (A* a) (KA a))
      -> existskolm (forall (\t:i. A t)) (n (forall (\t:i. A* t)))
            (kolm_forall (\a:i. KA a)).
existskolm_exists :
   (Pi a:i. existskolm (A a) (A* a) (KA a))
      -> existskolm (exists (\t:i. A t)) (n (exists (\t:i. A* t)))
            (kolm_exists (\a:i. KA a)).
sound_auto : nk A -> kolm A A* -> nj A* -> type.
sound : nk A -> kolm A A* -> nj A* -> type.
sound_andi :
   sound NKB KB NJB -> sound NKA KA NJA
      -> sound (nk_andi NKA NKB) (kolm_and KB KA) (nj_dnotx _ (nj_andi NJA NJB)).
sound_andel :
   sound NK1 (kolm_and KB KA) NJ1 -> existskolm B B* KB
      -> sound (nk_andel NK1) KA
            (nj_noti
                (\q:o. \u:nj (not A+).
                    nj_note NJ1 q
                       (nj_noti
                           (\p:o. \v:nj (and (n A+) B*).
                               nj_note (nj_andel v) p u)))).
sound_ander :
   sound NK1 (kolm_and KB KA) NJ1 -> existskolm A A* KA
      -> sound (nk_ander NK1) KB
            (nj_noti
                (\q:o. \u:nj (not B+).
                    nj_note NJ1 q
                       (nj_noti
                           (\p:o. \v:nj (and A* (n B+)).
                               nj_note (nj_ander v) p u)))).
sound_impi :
   (Pi u:nk A. Pi v:nj A*. sound u KA v -> sound (NKB u) KB (NJB v))
      -> sound (nk_impi (\x:nk A. NKB x)) (kolm_imp KB KA)
            (nj_dnotx _ (nj_impi (\x:nj A*. NJB x))).
sound_impe :
   sound NKI (kolm_imp KB KA) NJI -> sound NKA KA NJA -> existskolm A A* KA
      -> sound (nk_impe NKI NKA) KB
            (nj_noti
                (\q:o. \v:nj (not B+).
                    nj_note NJI q
                       (nj_noti
                           (\p:o. \u:nj (imp A* (n B+)).
                               nj_note (nj_impe u NJA) p v)))).
sound_oril :
   sound NK KA NJ -> sound (nk_oril NK) (kolm_or KB KA) (nj_dnotx _ (nj_oril NJ)).
sound_orir :
   sound NK KB NJ -> sound (nk_orir NK) (kolm_or KB KA) (nj_dnotx _ (nj_orir NJ)).
sound_ore :
   (Pi u:nk B. Pi v:nj B*. sound u KB v -> sound (NKB u) KC (NJB v))
      -> (Pi u:nk A. Pi v:nj A*. sound u KA v -> sound (NKA u) KC (NJA v))
      -> sound NK (kolm_or KB KA) NJ -> existskolm B B* KB -> existskolm A A* KA
      -> sound (nk_ore NK (\x:nk A. NKA x) (\x:nk B. NKB x)) KC
            (nj_noti
                (\q:o. \v:nj (not C+).
                    nj_note NJ q
                       (nj_noti
                           (\p:o. \u:nj (or A* B*).
                               nj_note
                                  (nj_ore u (\x:nj A*. NJA x) (\x:nj B*. NJB x))
                                  p v)))).
sound_noti :
   (Pi p:o. Pi u:nk A. Pi v:nj A*. Pi kp:kolm p (n p).
       existskolm p (n p) kp -> sound u K v -> sound (NK1 p u) kp (NJ1 p v))
      -> sound (nk_noti (\p:o. \x:nk A. NK1 p x)) (kolm_not K)
            (nj_dnotx _ (nj_noti (\q:o. \v:nj A*. nj_dneg_falser (NJ1 false v) q))).
sound_note :
   sound NK1 KA NJ1 -> sound NK2 (kolm_not KA) NJ2 -> existskolm A A* KA
      -> sound (nk_note NK2 C NK1) KC
            (nj_note (nj_triple_neg_red _ NJ2) (n C*) NJ1).
sound_truei : sound nk_truei kolm_true (nj_dnotx _ nj_truei).
sound_falsee :
   sound NK kolm_false NJ -> sound (nk_falsee NK) KC (nj_dneg_falser NJ C*).
sound_foralli :
   (Pi a:i. sound (NK a) (KA a) (NJ a))
      -> sound (nk_foralli (\a:i. NK a)) (kolm_forall (\a:i. KA a))
            (nj_dnotx _ (nj_foralli (\a:i. NJ a))).
sound_foralle :
   sound NK (kolm_forall (\a:i. KA a)) NJ
      -> existskolm (forall (\t:i. A t)) (n (forall (\x:i. n (A+ x))))
            (kolm_forall (\a:i. KA a))
      -> sound (nk_foralle NK T') (KA T')
            (nj_noti
                (\q:o. \v:nj (not (A+ T')).
                    nj_note NJ q
                       (nj_noti
                           (\p:o. \u:nj (forall (\x:i. n (A+ x))).
                               nj_note (nj_foralle u T') p v)))).
sound_existi :
   sound NK (KA T') NJ
      -> sound (nk_existsi T' NK) (kolm_exists (\a:i. KA a))
            (nj_dnotx _ (nj_existsi T' NJ)).
sound_existse :
   (Pi a:i. Pi u:nk (A a). Pi v:nj (A* a).
       sound u (KA a) v -> sound (NKC a u) KC (NJC a v))
      -> sound NKEA (kolm_exists (\a:i. KA a)) NJnnEA
      -> existskolm (exists (\t:i. A t)) (n (exists (\t:i. A* t)))
            (kolm_exists (\a:i. KA a))
      -> sound (nk_existse NKEA (\a:i. \x:nk (A a). NKC a x)) KC
            (nj_noti
                (\q:o. \v:nj (not C+).
                    nj_note NJnnEA q
                       (nj_noti
                           (\p:o. \u:nj (exists (\t:i. A* t)).
                               nj_note
                                  (nj_existse u (\a:i. \x:nj (A* a). NJC a x)) p
                                  v)))).
sound_dnotr :
   sound NK1 (kolm_not (kolm_not KA)) NJ1
      -> sound (nk_dnotr NK1) KA
            (nj_triple_neg_red _ (nj_triple_neg_red _ (nj_triple_neg_red _ NJ1))).




nj_nk : nj A -> nk A -> type.
nj_nk_andi :
   nj_nk NJB NKB -> nj_nk NJA NKA -> nj_nk (nj_andi NJA NJB) (nk_andi NKA NKB).
nj_nk_andel : nj_nk NJ NK -> nj_nk (nj_andel NJ) (nk_andel NK).
nj_nk_ander : nj_nk NJ NK -> nj_nk (nj_ander NJ) (nk_ander NK).
nj_nk_impi :
   (Pi u:nj A1. Pi v:nk A1. nj_nk u v -> nj_nk (NJ u) (NK v))
      -> nj_nk (nj_impi (\x:nj A1. NJ x)) (nk_impi (\x:nk A1. NK x)).
nj_nk_impe :
   nj_nk NJA NKA -> nj_nk NJI NKI -> nj_nk (nj_impe NJI NJA) (nk_impe NKI NKA).
nj_nk_oril : nj_nk NJ NK -> nj_nk (nj_oril NJ) (nk_oril NK).
nj_nk_orir : nj_nk NJ NK -> nj_nk (nj_orir NJ) (nk_orir NK).
nj_nk_ore :
   (Pi u:nj A1. Pi v:nk A1. nj_nk u v -> nj_nk (NJ2 u) (NK2 v))
      -> (Pi u:nj A3. Pi v:nk A3. nj_nk u v -> nj_nk (NJ1 u) (NK1 v))
      -> nj_nk NJ NK
      -> nj_nk (nj_ore NJ (\x:nj A3. NJ1 x) (\x:nj A1. NJ2 x))
            (nk_ore NK (\x:nk A3. NK1 x) (\x:nk A1. NK2 x)).
nj_nk_noti :
   (Pi p:o. Pi u:nj A1. Pi v:nk A1. nj_nk u v -> nj_nk (NJ p u) (NK p v))
      -> nj_nk (nj_noti (\p:o. \x:nj A1. NJ p x))
            (nk_noti (\p:o. \x:nk A1. NK p x)).
nj_nk_note :
   nj_nk NJ2 NK2 -> nj_nk NJ1 NK1
      -> nj_nk (nj_note NJ1 C NJ2) (nk_note NK1 C NK2).
nj_nk_truei : nj_nk nj_truei nk_truei.
nj_nk_falsee : nj_nk NJ NK -> nj_nk (nj_falsee NJ) (nk_falsee NK).
nj_nk_foralli :
   (Pi a:i. nj_nk (NJ a) (NK a))
      -> nj_nk (nj_foralli (\a:i. NJ a)) (nk_foralli (\a:i. NK a)).
nj_nk_foralle : nj_nk NJ NK -> nj_nk (nj_foralle NJ T') (nk_foralle NK T').
nj_nk_existsi : nj_nk NJ NK -> nj_nk (nj_existsi T' NJ) (nk_existsi T' NK).
nj_nk_existse :
   (Pi a:i. Pi u:nj (A1 a). Pi v:nk (A1 a).
       nj_nk u v -> nj_nk (NJ2 a u) (NK2 a v)) -> nj_nk NJ1 NK1
      -> nj_nk (nj_existse NJ1 (\a:i. \x:nj (A1 a). NJ2 a x))
            (nk_existse NK1 (\a:i. \x:nk (A1 a). NK2 a x)).


equiv : kolm A A* -> (nk A -> nk A*) -> (nk A* -> nk A) -> type.
equiv_and :
   equiv KB (\x:nk B. NKB* x) (\x:nk B*. NKB x)
      -> equiv KA (\x:nk A. NKA* x) (\x:nk A*. NKA x)
      -> equiv (kolm_and KB KA)
            (\u:nk (and A B).
                nk_dnotx _ (nk_andi (NKA* (nk_andel u)) (NKB* (nk_ander u))))
            (\u:nk (n (and A* B*)).
                nk_andi (NKA (nk_andel (nk_dnotr u)))
                   (NKB (nk_ander (nk_dnotr u)))).
equiv_imp :
   equiv KB (\x:nk B. NKB* x) (\x:nk B*. NKB x)
      -> equiv KA (\x:nk A. NKA* x) (\x:nk A*. NKA x)
      -> equiv (kolm_imp KB KA)
            (\v:nk (imp A B).
                nk_dnotx _ (nk_impi (\u:nk A*. NKB* (nk_impe v (NKA u)))))
            (\v:nk (n (imp A* B*)).
                nk_impi (\u:nk A. NKB (nk_impe (nk_dnotr v) (NKA* u)))).
equiv_or :
   equiv KB (\x:nk B. NKB* x) (\x:nk B*. NKB x)
      -> equiv KA (\x:nk A. NKA* x) (\x:nk A*. NKA x)
      -> equiv (kolm_or KB KA)
            (\v:nk (or A B).
                nk_dnotx _
                   (nk_ore v (\u:nk A. nk_oril (NKA* u))
                       (\u:nk B. nk_orir (NKB* u))))
            (\v:nk (n (or A* B*)).
                nk_ore (nk_dnotr v) (\u:nk A*. nk_oril (NKA u))
                   (\u:nk B*. nk_orir (NKB u))).
equiv_not :
   equiv K (\x:nk A. NKA* x) (\x:nk A*. NKA x)
      -> equiv (kolm_not K)
            (\v:nk (not A).
                nk_noti
                   (\p:o. \u:nk (not (not A*)). nk_note v p (NKA (nk_dnotr u))))
            (\v:nk (n (not A*)).
                nk_noti (\p:o. \u:nk A. nk_note (nk_dnotr v) p (NKA* u))).
equiv_true :
   equiv kolm_true (\v:nk true. nk_dnotx _ v) (\v:nk (n true). nk_dnotr v).
equiv_false :
   equiv kolm_false (\v:nk false. nk_dnotx _ v) (\v:nk (n false). nk_dnotr v).
equiv_forall :
   (Pi a:i. equiv (K a) (\x:nk (A a). NK* a x) (\x:nk (A* a). NK a x))
      -> equiv (kolm_forall (\a:i. K a))
            (\v:nk (forall (\t:i. A t)).
                nk_dnotx _ (nk_foralli (\a:i. NK* a (nk_foralle v a))))
            (\v:nk (n (forall (\t:i. A* t))).
                nk_foralli (\a:i. NK a (nk_foralle (nk_dnotr v) a))).
equiv_exists :
   (Pi a:i. equiv (K a) (\x:nk (A a). NK* a x) (\x:nk (A* a). NK a x))
      -> equiv (kolm_exists (\a:i. K a))
            (\v:nk (exists (\t:i. A t)).
                nk_dnotx _
                   (nk_existse v (\a:i. \u:nk (A a). nk_existsi a (NK* a u))))
            (\v:nk (n (exists (\t:i. A* t))).
                nk_existse (nk_dnotr v)
                   (\a:i. \u:nk (A* a). nk_existsi a (NK a u))).
complete : kolm A A* -> nj A* -> nk A -> type.
complete1 :
   equiv K (\x:nk A1. NK2* x) (\x:nk A2. NK2 x) -> nj_nk NJ NK1*
      -> complete K NJ (NK2 NK1*).
