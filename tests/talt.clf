nat : type.
z : nat.
s : nat <- nat.
sum : nat -> nat -> nat -> type.
sum_z : sum z N N.
sum_s : sum (s N1) N2 (s N3) <- sum N1 N2 N3.
product : nat -> nat -> nat -> type.
product_z : product z N1 z.
product_s : product (s N1) N2 N3 <- product N1 N2 N3' <- sum N2 N3' N3.
expon : nat -> nat -> nat -> type.
expon_z : expon N1 z (s z).
expon_s : expon N1 (s N2) N3 <- expon N1 N2 N3' <- product N1 N3' N3.
max : nat -> nat -> nat -> type.
max_z1 : max z N N.
max_z2 : max N z N.
max_s : max (s N1) (s N2) (s N3) <- max N1 N2 N3.
leq : nat -> nat -> type.
leq_z : leq z N1.
leq_s : leq (s N1) (s N2) <- leq N1 N2.
lt : nat -> nat -> type.
lt_z : lt z (s N1).
lt_s : lt (s N1) (s N2) <- lt N1 N2.
nat_eq : nat -> nat -> type.
nat_eq_ : nat_eq N N.
neq : nat -> nat -> type.
neq_zs : neq z (s N1).
neq_sz : neq (s N1) z.
neq_s : neq (s M) (s N) <- neq M N.
diff : nat -> nat -> nat -> type.
diff_z : diff N z N.
diff_s : diff (s N) (s M) P <- diff N M P.
quotrem : nat -> nat -> nat -> nat -> type.
quotrem_z : quotrem z N z z.
quotrem_sr : quotrem (s N1) N2 Q (s R) <- quotrem N1 N2 Q R <- lt (s R) N2.
quotrem_sq : quotrem (s N1) (s N2) (s Q) z <- quotrem N1 (s N2) Q N2.
s2toN : nat -> (nat -> nat) -> type.
s2to0 : s2toN z (\x:nat. s x).
s2tos : s2toN (s N) (\x:nat. F (F x)) <- s2toN N (\n:nat. F n).
0' : nat = z.
1' : nat = s 0'.
2' : nat = s 1'.
3' : nat = s 2'.
4' : nat = s 3'.
5' : nat = s 4'.
6' : nat = s 5'.
7' : nat = s 6'.
8' : nat = s 7'.
9' : nat = s 8'.
10' : nat = s 9'.
11' : nat = s 10'.
12' : nat = s 11'.
13' : nat = s 12'.
14' : nat = s 13'.
15' : nat = s 14'.
16' : nat = s 15'.
17' : nat = s 16'.
18' : nat = s 17'.
19' : nat = s 18'.
20' : nat = s 19'.
21' : nat = s 20'.
22' : nat = s 21'.
23' : nat = s 22'.
24' : nat = s 23'.
25' : nat = s 24'.
26' : nat = s 25'.
27' : nat = s 26'.
28' : nat = s 27'.
29' : nat = s 28'.
30' : nat = s 29'.
31' : nat = s 30'.
32' : nat = s 31'.
33' : nat = s 32'.
35' : nat = s (s (s (s (s 30')))).
36' : nat = s 35'.
37' : nat = s 36'.
38' : nat = s 37'.
40' : nat = s (s (s (s (s 35')))).
45' : nat = s (s (s (s (s 40')))).
46' : nat = s 45'.
47' : nat = s 46'.
48' : nat = s 47'.
50' : nat = s (s (s (s (s 45')))).
55' : nat = s (s (s (s (s 50')))).
56' : nat = s 55'.
57' : nat = s 56'.
58' : nat = s 57'.
60' : nat = s (s (s (s (s 55')))).
61' : nat = s 60'.
62' : nat = s 61'.
63' : nat = s 62'.
64' : nat = s 63'.
65' : nat = s 64'.
66' : nat = s 65'.
70' : nat = s (s (s (s (s 65')))).
71' : nat = s 70'.
72' : nat = s 71'.
73' : nat = s 72'.
80' : nat = s (s (s (s (s (s (s (s (s (s 70'))))))))).
81' : nat = s 80'.
82' : nat = s 81'.
83' : nat = s 82'.
90' : nat = s (s (s (s (s (s (s (s (s (s 80'))))))))).
91' : nat = s 90'.
92' : nat = s 91'.
93' : nat = s 92'.
94' : nat = s 93'.
95' : nat = s 94'.
96' : nat = s 95'.
97' : nat = s 96'.
98' : nat = s 97'.
99' : nat = s 98'.
100' : nat = s (s (s (s (s (s (s (s (s (s 90'))))))))).
101' : nat = s 100'.
105' : nat = s (s (s (s (s 100')))).
106' : nat = s 105'.
107' : nat = s 106'.
110' : nat = s (s (s (s (s (s (s (s (s (s 100'))))))))).
115' : nat = s (s (s (s (s 110')))).
116' : nat = s 115'.
117' : nat = s 116'.
118' : nat = s 117'.
119' : nat = s 118'.
120' : nat = s (s (s (s (s (s (s (s (s (s 110'))))))))).
130' : nat = s (s (s (s (s (s (s (s (s (s 120'))))))))).
140' : nat = s (s (s (s (s (s (s (s (s (s 130'))))))))).
145' : nat = s (s (s (s (s 140')))).
146' : nat = s 145'.
147' : nat = s 146'.
150' : nat = s (s (s (s (s (s (s (s (s (s 140'))))))))).
155' : nat = s (s (s (s (s 150')))).
156' : nat = s 155'.
157' : nat = s 156'.
160' : nat = s (s (s (s (s (s (s (s (s (s 150'))))))))).
165' : nat = s (s (s (s (s 160')))).
166' : nat = s 165'.
167' : nat = s 166'.
170' : nat = s (s (s (s (s (s (s (s (s (s 160'))))))))).
175' : nat = s (s (s (s (s 170')))).
176' : nat = s 175'.
177' : nat = s 176'.
180' : nat = s (s (s (s (s (s (s (s (s (s 170'))))))))).
185' : nat = s (s (s (s (s 180')))).
186' : nat = s 185'.
187' : nat = s 186'.
bit : type.
zero : bit.
one' : bit.
binary : nat -> type.
nil$ : binary z.
$ : binary (s N) <- binary N <- bit.
addbit : bit -> bit -> bit -> bit -> bit -> type.
addbit_000 : addbit zero zero zero zero zero.
addbit_001 : addbit zero zero one' one' zero.
addbit_010 : addbit zero one' zero one' zero.
addbit_011 : addbit zero one' one' zero one'.
addbit_100 : addbit one' zero zero one' zero.
addbit_101 : addbit one' zero one' zero one'.
addbit_110 : addbit one' one' zero zero one'.
addbit_111 : addbit one' one' one' one' one'.
subbit : bit -> bit -> bit -> bit -> bit -> type.
subbit_000 : subbit zero zero zero zero zero.
subbit_001 : subbit zero zero one' one' one'.
subbit_010 : subbit zero one' zero one' one'.
subbit_011 : subbit zero one' one' zero one'.
subbit_100 : subbit one' zero zero one' zero.
subbit_101 : subbit one' zero one' zero zero.
subbit_110 : subbit one' one' zero zero zero.
subbit_111 : subbit one' one' one' one' one'.
flipbit : bit -> bit -> type.
flipbit_zero : flipbit zero one'.
flipbit_one : flipbit one' zero.
addc : bit -> binary N -> binary N -> binary N -> bit -> type.
addc_nil : addc BIT nil$ nil$ nil$ BIT.
addc_cons :
   addc CARRY_IN ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3) CARRY
      <- addbit BIT1 BIT2 CARRY_IN BIT3 CARRY_OUT
      <- addc CARRY_OUT B1 B2 B3 CARRY.
add : binary N -> binary N -> binary N -> bit -> type.
add_ : add B1 B2 B3 CARRY <- addc zero B1 B2 B3 CARRY.
subc : bit -> binary N -> binary N -> binary N -> bit -> type.
subc_nil : subc BIT nil$ nil$ nil$ BIT.
subc_cons :
   subc BORROW_IN ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3) BORROW
      <- subbit BIT1 BIT2 BORROW_IN BIT3 BORROW_OUT
      <- subc BORROW_OUT B1 B2 B3 BORROW.
sub : binary N -> binary N -> binary N -> bit -> type.
sub_ : sub B1 B2 B3 BORROW <- subc zero B1 B2 B3 BORROW.
negc : bit -> binary N -> binary N -> bit -> type.
negc_nil : negc BIT nil$ nil$ BIT.
negc_cons :
   negc CARRY_IN ($ BIT B) ($ BIT'' B') CARRY
      <- flipbit BIT BIT'
      <- addbit zero BIT' CARRY_IN BIT'' CARRY_OUT
      <- negc CARRY_OUT B B' CARRY.
neg : binary N -> binary N -> bit -> type.
neg_ : neg B B' CARRY <- negc one' B B' CARRY.
is_zero : binary N -> type.
is_zero_nil : is_zero nil$.
is_zero_cons : is_zero ($ zero B) <- is_zero B.
is_nonzero : binary N -> type.
is_nonzero_zero : is_nonzero ($ zero B) <- is_nonzero B.
is_nonzero_one : is_nonzero ($ one' B1).
is_one : binary N1 -> type.
is_one_ : is_one ($ one' B) <- is_zero B.
is_negone : binary N -> type.
is_negone_sing : is_negone ($ one' nil$).
is_negone_cons : is_negone ($ one' B) <- is_negone B.
binary_neq : binary N -> binary N -> type.
binary_neq_ : binary_neq B1 B2 <- add B B1 B2 B3 <- is_nonzero B.
binary_append :
   binary N1 -> binary N2 -> binary N3 -> type.
binary_append_nil : binary_append B nil$ B.
binary_append_cons :
   binary_append B1 ($ BIT B2) ($ BIT B3) <- binary_append B1 B2 B3.
highbit : binary (s N) -> bit -> binary N -> type.
highbit_sing : highbit ($ BIT nil$) BIT nil$.
highbit_cons : highbit ($ BIT B) HIGHBIT ($ BIT B') <- highbit B HIGHBIT B'.
lowbit : binary (s N) -> bit -> binary N -> type.
lowbit_ : lowbit ($ BIT B) BIT B.
times : binary N -> nat -> binary N -> type.
times_z : times B z B1 <- is_zero B1.
times_s : times B (s N) B2 <- times B N B1 <- add B B1 B2 zero.
represents : nat -> binary N1 -> type.
represents_z : represents z B <- is_zero B.
represents_s :
   represents (s N) B' <- represents N B <- is_one Bone <- add B Bone B' zero.
infer_represents : binary N1 -> nat -> type.
infer_represents_z : infer_represents nil$ z.
infer_represents_s0 :
   infer_represents ($ zero B) N' <- infer_represents B N <- sum N N N'.
infer_represents_s1 :
   infer_represents ($ one' B) (s N') <- infer_represents B N <- sum N N N'.
unrepresentable : nat -> nat -> type.
unrepresentable_ :
   unrepresentable N Nbits
      <- is_negone Bmax
      <- represents Nmax Bmax
      <- lt Nmax N.
and_bit : bit -> bit -> bit -> type.
and_bit_00 : and_bit zero zero zero.
and_bit_01 : and_bit zero one' zero.
and_bit_10 : and_bit one' zero zero.
and_bit_11 : and_bit one' one' one'.
or_bit : bit -> bit -> bit -> type.
or_bit_00 : or_bit zero zero zero.
or_bit_01 : or_bit zero one' one'.
or_bit_10 : or_bit one' zero one'.
or_bit_11 : or_bit one' one' one'.
xor_bit : bit -> bit -> bit -> type.
xor_bit_00 : xor_bit zero zero zero.
xor_bit_01 : xor_bit zero one' one'.
xor_bit_10 : xor_bit one' zero one'.
xor_bit_11 : xor_bit one' one' zero.
and : binary N -> binary N -> binary N -> type.
and_nil : and nil$ nil$ nil$.
and_cons :
   and ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3)
      <- and_bit BIT1 BIT2 BIT3
      <- and B1 B2 B3.
or : binary N -> binary N -> binary N -> type.
or_nil : or nil$ nil$ nil$.
or_cons :
   or ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3)
      <- or_bit BIT1 BIT2 BIT3
      <- or B1 B2 B3.
xor : binary N -> binary N -> binary N -> type.
xor_nil : xor nil$ nil$ nil$.
xor_cons :
   xor ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3)
      <- xor_bit BIT1 BIT2 BIT3
      <- xor B1 B2 B3.
not : binary N -> binary N -> type.
not_nil : not nil$ nil$.
not_cons : not ($ BIT1 B1) ($ BIT2 B2) <- flipbit BIT1 BIT2 <- not B1 B2.
addc_wo :
   bit -> binary (s N) -> binary (s N) -> binary (s N) -> bit -> bit -> type.
addc_wo_ :
   addc_wo CARRY_IN B1 B2 B3 CARRY OVERFLOW
      <- highbit B1 BIT1 B1'
      <- highbit B2 BIT2 B2'
      <- addc CARRY_IN B1' B2' B3' CARRY_OUT
      <- addbit BIT1 BIT2 CARRY_OUT BIT3 CARRY
      <- binary_append ($ BIT3 nil$) B3' B3
      <- xor_bit CARRY_OUT CARRY OVERFLOW.
add_wo :
   binary (s N) -> binary (s N) -> binary (s N) -> bit -> bit -> type.
add_wo_ :
   add_wo B1 B2 B3 CARRY_OUT OVERFLOW
      <- addc_wo zero B1 B2 B3 CARRY_OUT OVERFLOW.
n_bit_zero : Pi n:nat. binary n -> type.
n_bit_zero_z : n_bit_zero z nil$.
n_bit_zero_s : n_bit_zero (s N) ($ zero B) <- n_bit_zero N B.
n_bit_one : Pi n:nat. binary n -> type.
n_bit_one_ : n_bit_one (s N) ($ one' B) <- n_bit_zero N B.
pad : Pi n:nat. binary M -> binary n -> type.
pad_z : pad z B nil$.
pad_nil : pad (s N) nil$ B <- n_bit_zero (s N) B.
pad_$ : pad (s N) ($ Bit B) ($ Bit B') <- pad N B B'.
infer_represents_width : nat -> Pi Nsz:nat. binary Nsz -> type.
infer_represents_width_z : infer_represents_width z N B <- n_bit_zero N B.
infer_represents_width_s :
   infer_represents_width (s M) N B3
      <- infer_represents_width M N B1
      <- n_bit_one N B2
      <- add B1 B2 B3 zero.
rotate_left_once : binary (s N) -> binary (s N) -> type.
rotate_left_once_ : rotate_left_once B ($ HIBIT B') <- highbit B HIBIT B'.
rotate_left : nat -> binary (s N) -> binary (s N) -> type.
rotate_left_z : rotate_left z B B.
rotate_left_s :
   rotate_left (s N) B1 B3 <- rotate_left N B1 B2 <- rotate_left_once B2 B3.
rotate_right_once : binary (s N) -> binary (s N) -> type.
rotate_right_once_ : rotate_right_once ($ LOBIT B) B' <- highbit B' LOBIT B.
rotate_right : nat -> binary (s N) -> binary (s N) -> type.
rotate_right_z : rotate_right z B B.
rotate_right_s :
   rotate_right (s N) B1 B3 <- rotate_right N B1 B2 <- rotate_right_once B2 B3.
shift_left_once : binary (s N) -> bit -> binary (s N) -> type.
shift_left_once_ : shift_left_once B INBIT ($ INBIT B') <- highbit B HIBIT B'.
shift_left : nat -> binary (s N) -> binary (s N) -> bit -> type.
shift_left_z : shift_left z B B zero.
shift_left_s :
   shift_left (s N) B4 B3 Cout
      <- shift_left N B4 B2 B5
      <- highbit B2 Cout B1
      <- shift_left_once B2 zero B3.
shift_right_once : binary (s N) -> bit -> binary (s N) -> type.
shift_right_once_ : shift_right_once ($ LOBIT B) INBIT B' <- highbit B' INBIT B.
shift_right : nat -> binary (s N) -> binary (s N) -> bit -> type.
shift_right_z : shift_right z B B zero.
shift_right_s :
   shift_right (s N) B4 B3 Cout
      <- shift_right N B4 B2 B5
      <- lowbit B2 Cout B1
      <- shift_right_once B2 zero B3.
shift_arith_right_once : binary (s N) -> binary (s N) -> type.
shift_arith_right_once_ :
   shift_arith_right_once B B'
      <- highbit B HIBIT B1
      <- shift_right_once B HIBIT B'.
shift_arith_right :
   nat -> binary (s N) -> binary (s N) -> bit -> type.
shift_arith_right_z : shift_arith_right z B B zero.
shift_arith_right_s :
   shift_arith_right (s N) B4 B3 Cout
      <- shift_arith_right N B4 B2 B5
      <- lowbit B2 Cout B1
      <- shift_arith_right_once B2 B3.
rol_once_wo : binary (s N) -> binary (s N) -> bit -> bit -> type.
rol_once_wo_ :
   rol_once_wo Bin Bout Cout Oout
      <- highbit Bin Cout B2
      <- rotate_left_once Bin Bout
      <- highbit Bout BITms B1
      <- xor_bit Cout BITms Oout.
ror_once_wo : binary (s N) -> binary (s N) -> bit -> bit -> type.
ror_once_wo_ :
   ror_once_wo Bin Bout Cout Oout
      <- highbit Bin BIToms B2
      <- rotate_right_once Bin Bout
      <- highbit Bout Cout B1
      <- xor_bit BIToms Cout Oout.
shl_once_wo : binary (s N) -> binary (s N) -> bit -> bit -> type.
shl_once_wo_ :
   shl_once_wo Bin Bout Cout Oout
      <- highbit Bin Cout B2
      <- shift_left_once Bin zero Bout
      <- highbit Bout BITout B1
      <- xor_bit Cout BITout Oout.
shr_once_wo : binary (s N) -> binary (s N) -> bit -> bit -> type.
shr_once_wo_ :
   shr_once_wo Bin Bout Cout Oout
      <- lowbit Bin Cout B2
      <- shift_right_once Bin zero Bout
      <- highbit Bin Oout B1.
sar_once_wo : binary (s N) -> binary (s N) -> bit -> bit -> type.
sar_once_wo_ :
   sar_once_wo Bin Bout Cout zero
      <- lowbit Bin Cout B1
      <- shift_arith_right_once Bin Bout.
0_1 : binary 1' = $ zero nil$.
1_1 : binary 1' = $ one' nil$.
0_2 : binary 2' = $ zero 0_1.
1_2 : binary 2' = $ one' 0_1.
2_2 : binary 2' = $ zero 1_1.
3_2 : binary 2' = $ one' 1_1.
0_3 : binary 3' = $ zero 0_2.
1_3 : binary 3' = $ one' 0_2.
2_3 : binary 3' = $ zero 1_2.
3_3 : binary 3' = $ one' 1_2.
4_3 : binary 3' = $ zero 2_2.
5_3 : binary 3' = $ one' 2_2.
6_3 : binary 3' = $ zero 3_2.
7_3 : binary 3' = $ one' 3_2.
0_4 : binary 4' = $ zero 0_3.
1_4 : binary 4' = $ one' 0_3.
2_4 : binary 4' = $ zero 1_3.
3_4 : binary 4' = $ one' 1_3.
4_4 : binary 4' = $ zero 2_3.
5_4 : binary 4' = $ one' 2_3.
6_4 : binary 4' = $ zero 3_3.
7_4 : binary 4' = $ one' 3_3.
8_4 : binary 4' = $ zero 4_3.
9_4 : binary 4' = $ one' 4_3.
a_4 : binary 4' = $ zero 5_3.
b_4 : binary 4' = $ one' 5_3.
c_4 : binary 4' = $ zero 6_3.
d_4 : binary 4' = $ one' 6_3.
e_4 : binary 4' = $ zero 7_3.
f_4 : binary 4' = $ one' 7_3.
00_5 : binary 5' = $ zero 0_4.
01_5 : binary 5' = $ one' 0_4.
02_5 : binary 5' = $ zero 1_4.
03_5 : binary 5' = $ one' 1_4.
04_5 : binary 5' = $ zero 2_4.
05_5 : binary 5' = $ one' 2_4.
06_5 : binary 5' = $ zero 3_4.
07_5 : binary 5' = $ one' 3_4.
08_5 : binary 5' = $ zero 4_4.
09_5 : binary 5' = $ one' 4_4.
0a_5 : binary 5' = $ zero 5_4.
0b_5 : binary 5' = $ one' 5_4.
0c_5 : binary 5' = $ zero 6_4.
0d_5 : binary 5' = $ one' 6_4.
0e_5 : binary 5' = $ zero 7_4.
0f_5 : binary 5' = $ one' 7_4.
10_5 : binary 5' = $ zero 8_4.
11_5 : binary 5' = $ one' 8_4.
12_5 : binary 5' = $ zero 9_4.
13_5 : binary 5' = $ one' 9_4.
14_5 : binary 5' = $ zero a_4.
15_5 : binary 5' = $ one' a_4.
16_5 : binary 5' = $ zero b_4.
17_5 : binary 5' = $ one' b_4.
18_5 : binary 5' = $ zero c_4.
19_5 : binary 5' = $ one' c_4.
1a_5 : binary 5' = $ zero d_4.
1b_5 : binary 5' = $ one' d_4.
1c_5 : binary 5' = $ zero e_4.
1d_5 : binary 5' = $ one' e_4.
1e_5 : binary 5' = $ zero f_4.
1f_5 : binary 5' = $ one' f_4.
00_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 0_4))).
01_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 0_4))).
02_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 0_4))).
03_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 0_4))).
04_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 0_4))).
05_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 0_4))).
06_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 0_4))).
07_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 0_4))).
08_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 0_4))).
09_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 0_4))).
0a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 0_4))).
0b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 0_4))).
0c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 0_4))).
0d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 0_4))).
0e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 0_4))).
0f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 0_4))).
10_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 1_4))).
11_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 1_4))).
12_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 1_4))).
13_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 1_4))).
14_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 1_4))).
15_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 1_4))).
16_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 1_4))).
17_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 1_4))).
18_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 1_4))).
19_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 1_4))).
1a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 1_4))).
1b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 1_4))).
1c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 1_4))).
1d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 1_4))).
1e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 1_4))).
1f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 1_4))).
20_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 2_4))).
21_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 2_4))).
22_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 2_4))).
23_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 2_4))).
24_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 2_4))).
25_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 2_4))).
26_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 2_4))).
27_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 2_4))).
28_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 2_4))).
29_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 2_4))).
2a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 2_4))).
2b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 2_4))).
2c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 2_4))).
2d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 2_4))).
2e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 2_4))).
2f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 2_4))).
30_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 3_4))).
31_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 3_4))).
32_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 3_4))).
33_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 3_4))).
34_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 3_4))).
35_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 3_4))).
36_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 3_4))).
37_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 3_4))).
38_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 3_4))).
39_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 3_4))).
3a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 3_4))).
3b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 3_4))).
3c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 3_4))).
3d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 3_4))).
3e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 3_4))).
3f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 3_4))).
40_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 4_4))).
41_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 4_4))).
42_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 4_4))).
43_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 4_4))).
44_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 4_4))).
45_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 4_4))).
46_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 4_4))).
47_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 4_4))).
48_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 4_4))).
49_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 4_4))).
4a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 4_4))).
4b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 4_4))).
4c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 4_4))).
4d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 4_4))).
4e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 4_4))).
4f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 4_4))).
50_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 5_4))).
51_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 5_4))).
52_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 5_4))).
53_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 5_4))).
54_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 5_4))).
55_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 5_4))).
56_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 5_4))).
57_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 5_4))).
58_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 5_4))).
59_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 5_4))).
5a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 5_4))).
5b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 5_4))).
5c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 5_4))).
5d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 5_4))).
5e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 5_4))).
5f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 5_4))).
60_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 6_4))).
61_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 6_4))).
62_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 6_4))).
63_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 6_4))).
64_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 6_4))).
65_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 6_4))).
66_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 6_4))).
67_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 6_4))).
68_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 6_4))).
69_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 6_4))).
6a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 6_4))).
6b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 6_4))).
6c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 6_4))).
6d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 6_4))).
6e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 6_4))).
6f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 6_4))).
70_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 7_4))).
71_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 7_4))).
72_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 7_4))).
73_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 7_4))).
74_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 7_4))).
75_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 7_4))).
76_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 7_4))).
77_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 7_4))).
78_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 7_4))).
79_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 7_4))).
7a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 7_4))).
7b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 7_4))).
7c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 7_4))).
7d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 7_4))).
7e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 7_4))).
7f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 7_4))).
80_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 8_4))).
81_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 8_4))).
82_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 8_4))).
83_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 8_4))).
84_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 8_4))).
85_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 8_4))).
86_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 8_4))).
87_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 8_4))).
88_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 8_4))).
89_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 8_4))).
8a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 8_4))).
8b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 8_4))).
8c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 8_4))).
8d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 8_4))).
8e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 8_4))).
8f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 8_4))).
90_8 : binary 8' = $ zero ($ zero ($ zero ($ zero 9_4))).
91_8 : binary 8' = $ one' ($ zero ($ zero ($ zero 9_4))).
92_8 : binary 8' = $ zero ($ one' ($ zero ($ zero 9_4))).
93_8 : binary 8' = $ one' ($ one' ($ zero ($ zero 9_4))).
94_8 : binary 8' = $ zero ($ zero ($ one' ($ zero 9_4))).
95_8 : binary 8' = $ one' ($ zero ($ one' ($ zero 9_4))).
96_8 : binary 8' = $ zero ($ one' ($ one' ($ zero 9_4))).
97_8 : binary 8' = $ one' ($ one' ($ one' ($ zero 9_4))).
98_8 : binary 8' = $ zero ($ zero ($ zero ($ one' 9_4))).
99_8 : binary 8' = $ one' ($ zero ($ zero ($ one' 9_4))).
9a_8 : binary 8' = $ zero ($ one' ($ zero ($ one' 9_4))).
9b_8 : binary 8' = $ one' ($ one' ($ zero ($ one' 9_4))).
9c_8 : binary 8' = $ zero ($ zero ($ one' ($ one' 9_4))).
9d_8 : binary 8' = $ one' ($ zero ($ one' ($ one' 9_4))).
9e_8 : binary 8' = $ zero ($ one' ($ one' ($ one' 9_4))).
9f_8 : binary 8' = $ one' ($ one' ($ one' ($ one' 9_4))).
a0_8 : binary 8' = $ zero ($ zero ($ zero ($ zero a_4))).
a1_8 : binary 8' = $ one' ($ zero ($ zero ($ zero a_4))).
a2_8 : binary 8' = $ zero ($ one' ($ zero ($ zero a_4))).
a3_8 : binary 8' = $ one' ($ one' ($ zero ($ zero a_4))).
a4_8 : binary 8' = $ zero ($ zero ($ one' ($ zero a_4))).
a5_8 : binary 8' = $ one' ($ zero ($ one' ($ zero a_4))).
a6_8 : binary 8' = $ zero ($ one' ($ one' ($ zero a_4))).
a7_8 : binary 8' = $ one' ($ one' ($ one' ($ zero a_4))).
a8_8 : binary 8' = $ zero ($ zero ($ zero ($ one' a_4))).
a9_8 : binary 8' = $ one' ($ zero ($ zero ($ one' a_4))).
aa_8 : binary 8' = $ zero ($ one' ($ zero ($ one' a_4))).
ab_8 : binary 8' = $ one' ($ one' ($ zero ($ one' a_4))).
ac_8 : binary 8' = $ zero ($ zero ($ one' ($ one' a_4))).
ad_8 : binary 8' = $ one' ($ zero ($ one' ($ one' a_4))).
ae_8 : binary 8' = $ zero ($ one' ($ one' ($ one' a_4))).
af_8 : binary 8' = $ one' ($ one' ($ one' ($ one' a_4))).
b0_8 : binary 8' = $ zero ($ zero ($ zero ($ zero b_4))).
b1_8 : binary 8' = $ one' ($ zero ($ zero ($ zero b_4))).
b2_8 : binary 8' = $ zero ($ one' ($ zero ($ zero b_4))).
b3_8 : binary 8' = $ one' ($ one' ($ zero ($ zero b_4))).
b4_8 : binary 8' = $ zero ($ zero ($ one' ($ zero b_4))).
b5_8 : binary 8' = $ one' ($ zero ($ one' ($ zero b_4))).
b6_8 : binary 8' = $ zero ($ one' ($ one' ($ zero b_4))).
b7_8 : binary 8' = $ one' ($ one' ($ one' ($ zero b_4))).
b8_8 : binary 8' = $ zero ($ zero ($ zero ($ one' b_4))).
b9_8 : binary 8' = $ one' ($ zero ($ zero ($ one' b_4))).
ba_8 : binary 8' = $ zero ($ one' ($ zero ($ one' b_4))).
bb_8 : binary 8' = $ one' ($ one' ($ zero ($ one' b_4))).
bc_8 : binary 8' = $ zero ($ zero ($ one' ($ one' b_4))).
bd_8 : binary 8' = $ one' ($ zero ($ one' ($ one' b_4))).
be_8 : binary 8' = $ zero ($ one' ($ one' ($ one' b_4))).
bf_8 : binary 8' = $ one' ($ one' ($ one' ($ one' b_4))).
c0_8 : binary 8' = $ zero ($ zero ($ zero ($ zero c_4))).
c1_8 : binary 8' = $ one' ($ zero ($ zero ($ zero c_4))).
c2_8 : binary 8' = $ zero ($ one' ($ zero ($ zero c_4))).
c3_8 : binary 8' = $ one' ($ one' ($ zero ($ zero c_4))).
c4_8 : binary 8' = $ zero ($ zero ($ one' ($ zero c_4))).
c5_8 : binary 8' = $ one' ($ zero ($ one' ($ zero c_4))).
c6_8 : binary 8' = $ zero ($ one' ($ one' ($ zero c_4))).
c7_8 : binary 8' = $ one' ($ one' ($ one' ($ zero c_4))).
c8_8 : binary 8' = $ zero ($ zero ($ zero ($ one' c_4))).
c9_8 : binary 8' = $ one' ($ zero ($ zero ($ one' c_4))).
ca_8 : binary 8' = $ zero ($ one' ($ zero ($ one' c_4))).
cb_8 : binary 8' = $ one' ($ one' ($ zero ($ one' c_4))).
cc_8 : binary 8' = $ zero ($ zero ($ one' ($ one' c_4))).
cd_8 : binary 8' = $ one' ($ zero ($ one' ($ one' c_4))).
ce_8 : binary 8' = $ zero ($ one' ($ one' ($ one' c_4))).
cf_8 : binary 8' = $ one' ($ one' ($ one' ($ one' c_4))).
d0_8 : binary 8' = $ zero ($ zero ($ zero ($ zero d_4))).
d1_8 : binary 8' = $ one' ($ zero ($ zero ($ zero d_4))).
d2_8 : binary 8' = $ zero ($ one' ($ zero ($ zero d_4))).
d3_8 : binary 8' = $ one' ($ one' ($ zero ($ zero d_4))).
d4_8 : binary 8' = $ zero ($ zero ($ one' ($ zero d_4))).
d5_8 : binary 8' = $ one' ($ zero ($ one' ($ zero d_4))).
d6_8 : binary 8' = $ zero ($ one' ($ one' ($ zero d_4))).
d7_8 : binary 8' = $ one' ($ one' ($ one' ($ zero d_4))).
d8_8 : binary 8' = $ zero ($ zero ($ zero ($ one' d_4))).
d9_8 : binary 8' = $ one' ($ zero ($ zero ($ one' d_4))).
da_8 : binary 8' = $ zero ($ one' ($ zero ($ one' d_4))).
db_8 : binary 8' = $ one' ($ one' ($ zero ($ one' d_4))).
dc_8 : binary 8' = $ zero ($ zero ($ one' ($ one' d_4))).
dd_8 : binary 8' = $ one' ($ zero ($ one' ($ one' d_4))).
de_8 : binary 8' = $ zero ($ one' ($ one' ($ one' d_4))).
df_8 : binary 8' = $ one' ($ one' ($ one' ($ one' d_4))).
e0_8 : binary 8' = $ zero ($ zero ($ zero ($ zero e_4))).
e1_8 : binary 8' = $ one' ($ zero ($ zero ($ zero e_4))).
e2_8 : binary 8' = $ zero ($ one' ($ zero ($ zero e_4))).
e3_8 : binary 8' = $ one' ($ one' ($ zero ($ zero e_4))).
e4_8 : binary 8' = $ zero ($ zero ($ one' ($ zero e_4))).
e5_8 : binary 8' = $ one' ($ zero ($ one' ($ zero e_4))).
e6_8 : binary 8' = $ zero ($ one' ($ one' ($ zero e_4))).
e7_8 : binary 8' = $ one' ($ one' ($ one' ($ zero e_4))).
e8_8 : binary 8' = $ zero ($ zero ($ zero ($ one' e_4))).
e9_8 : binary 8' = $ one' ($ zero ($ zero ($ one' e_4))).
ea_8 : binary 8' = $ zero ($ one' ($ zero ($ one' e_4))).
eb_8 : binary 8' = $ one' ($ one' ($ zero ($ one' e_4))).
ec_8 : binary 8' = $ zero ($ zero ($ one' ($ one' e_4))).
ed_8 : binary 8' = $ one' ($ zero ($ one' ($ one' e_4))).
ee_8 : binary 8' = $ zero ($ one' ($ one' ($ one' e_4))).
ef_8 : binary 8' = $ one' ($ one' ($ one' ($ one' e_4))).
f0_8 : binary 8' = $ zero ($ zero ($ zero ($ zero f_4))).
f1_8 : binary 8' = $ one' ($ zero ($ zero ($ zero f_4))).
f2_8 : binary 8' = $ zero ($ one' ($ zero ($ zero f_4))).
f3_8 : binary 8' = $ one' ($ one' ($ zero ($ zero f_4))).
f4_8 : binary 8' = $ zero ($ zero ($ one' ($ zero f_4))).
f5_8 : binary 8' = $ one' ($ zero ($ one' ($ zero f_4))).
f6_8 : binary 8' = $ zero ($ one' ($ one' ($ zero f_4))).
f7_8 : binary 8' = $ one' ($ one' ($ one' ($ zero f_4))).
f8_8 : binary 8' = $ zero ($ zero ($ zero ($ one' f_4))).
f9_8 : binary 8' = $ one' ($ zero ($ zero ($ one' f_4))).
fa_8 : binary 8' = $ zero ($ one' ($ zero ($ one' f_4))).
fb_8 : binary 8' = $ one' ($ one' ($ zero ($ one' f_4))).
fc_8 : binary 8' = $ zero ($ zero ($ one' ($ one' f_4))).
fd_8 : binary 8' = $ one' ($ zero ($ one' ($ one' f_4))).
fe_8 : binary 8' = $ zero ($ one' ($ one' ($ one' f_4))).
ff_8 : binary 8' = $ one' ($ one' ($ one' ($ one' f_4))).
0_24 : binary 24'
   = $ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero
		($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero
		($ zero ($ zero ($ zero ($ zero ($ zero ($ zero nil$))))))))))))))))))))))).
-1_24 : binary 24'
   = $ one' ($ one' ($ one' ($ one' ($ one' ($ one' ($ one' ($ one' ($ one'
		($ one' ($ one' ($ one' ($ one' ($ one' ($ one' ($ one' ($ one' ($ one'
		($ one' ($ one' ($ one' ($ one' ($ one' ($ one' nil$))))))))))))))))))))))).
0_32 : binary 32' = $ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero 0_24))))))).
1_32 : binary 32' = $ one' ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero 0_24))))))).
2_32 : binary 32' = $ zero ($ one' ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero 0_24))))))).
3_32 : binary 32' = $ one' ($ one' ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero 0_24))))))).
4_32 : binary 32' = $ zero ($ zero ($ one' ($ zero ($ zero ($ zero ($ zero ($ zero 0_24))))))).
5_32 : binary 32' = $ one' ($ zero ($ one' ($ zero ($ zero ($ zero ($ zero ($ zero 0_24))))))).
6_32 : binary 32' = $ zero ($ one' ($ one' ($ zero ($ zero ($ zero ($ zero ($ zero 0_24))))))).
7_32 : binary 32' = $ one' ($ one' ($ one' ($ zero ($ zero ($ zero ($ zero ($ zero 0_24))))))).
1024_16 : binary 16'
   = $ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero 04_8))))))).
00_16 : binary 16'
   = $ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero 00_8))))))).
represents32_20_8 : represents 32' 20_8
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_001)
                                addbit_101)
                            addbit_101)
                        addbit_101)
                    addbit_101)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_100)
                            addbit_100)
                        addbit_100)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_100)
                                addbit_100)
                            addbit_001)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_100)
                                        addbit_100)
                                    addbit_100)
                                addbit_000)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_100)
                                            addbit_100)
                                        addbit_001)
                                    addbit_101)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_100)
        addbit_100)
    addbit_000)
                                        addbit_100)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_100)
            addbit_100)
        addbit_000)
    addbit_001)
                                        addbit_110))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_100)
                addbit_100)
            addbit_000)
        addbit_000)
    addbit_010))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_001)
                addbit_101)
            addbit_101)
        addbit_110))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_000)
                    addbit_100)
                addbit_100)
            addbit_010))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_000)
                        addbit_100)
                    addbit_001)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_000)
                            addbit_100)
                        addbit_000)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_000)
                                addbit_001)
                            addbit_101)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_100)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_100)
                                            addbit_000)
                                        addbit_000)
                                    addbit_001)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_100)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_001)
            addbit_101)
        addbit_101)
    addbit_101)
                                        addbit_110))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_100)
            addbit_100)
        addbit_100)
    addbit_010))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_100)
                addbit_100)
            addbit_001)
        addbit_110))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_100)
                addbit_000)
            addbit_010))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_001)
                    addbit_101)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_000)
                        addbit_100)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_000)
                            addbit_001)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_000)
                                addbit_000)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_001)
                                        addbit_101)
                                    addbit_101)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_100)
                                        addbit_100)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_100)
    addbit_001)
                                        addbit_110))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_100)
        addbit_000)
    addbit_010))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_001)
            addbit_101)
        addbit_110))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_100)
            addbit_010))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_001)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_z
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil)))))))))))))))))))))))))))))))))))))))).
represents31_1f_8 : represents 31' 1f_8
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_100)
                        addbit_100)
                    addbit_100)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_100)
                            addbit_100)
                        addbit_001)
                    addbit_110))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_100)
                                addbit_100)
                            addbit_000)
                        addbit_010))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_100)
                                        addbit_100)
                                    addbit_001)
                                addbit_101)
                            addbit_110))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_100)
                                            addbit_100)
                                        addbit_000)
                                    addbit_100)
                                addbit_010))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_100)
        addbit_100)
    addbit_000)
                                        addbit_001)
                                    addbit_110))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_100)
            addbit_100)
        addbit_000)
    addbit_000)
                                        addbit_010))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_100)
                addbit_001)
            addbit_101)
        addbit_101)
    addbit_110))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_000)
                addbit_100)
            addbit_100)
        addbit_010))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_000)
                    addbit_100)
                addbit_001)
            addbit_110))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_000)
                        addbit_100)
                    addbit_000)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_000)
                            addbit_001)
                        addbit_101)
                    addbit_110))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_010))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_100)
                                        addbit_000)
                                    addbit_000)
                                addbit_001)
                            addbit_110))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_100)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_010))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_001)
        addbit_101)
    addbit_101)
                                        addbit_101)
                                    addbit_110))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_100)
        addbit_100)
    addbit_100)
                                        addbit_010))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_100)
            addbit_100)
        addbit_001)
    addbit_110))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_100)
                addbit_100)
            addbit_000)
        addbit_010))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_001)
                addbit_101)
            addbit_110))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_000)
                    addbit_100)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_000)
                        addbit_001)
                    addbit_110))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_000)
                            addbit_000)
                        addbit_010))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_001)
                                    addbit_101)
                                addbit_101)
                            addbit_110))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_100)
                                addbit_010))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_100)
                                        addbit_001)
                                    addbit_110))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_100)
    addbit_000)
                                        addbit_010))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_001)
        addbit_101)
    addbit_110))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_100)
        addbit_010))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_001)
            addbit_110))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_z
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))))))))).
1024_32 : binary 32'
   = $ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ one'
        ($ zero ($ zero ($ zero ($ zero ($ zero 00_16))))))))))))))).
1+ : nat -> nat = \n:nat. s n.
2+ : nat -> nat = \n:nat. s (s n).
3+ : nat -> nat = \n:nat. s (s (s n)).
4+ : nat -> nat = \n:nat. s (s (s (s n))).
5+ : nat -> nat = \n:nat. s (s (s (s (s n)))).
6+ : nat -> nat = \n:nat. s (s (s (s (s (s n))))).
7+ : nat -> nat = \n:nat. s (s (s (s (s (s (s n)))))).
8+ : nat -> nat = \n:nat. s (s (s (s (s (s (s (s n))))))).
9+ : nat -> nat = \n:nat. s (s (s (s (s (s (s (s (s n)))))))).
bw : nat = 8'.
ww : nat = 4'.
wwb : nat = 32'.
dw : nat = 8'.
abyte : type = binary bw.
aword : type = binary wwb.
address : type = binary wwb.
string : nat -> type.
# : string z.
/ : string (s N) <- string N <- binary bw.
word : type = string ww.
byte : type = string 1'.
oracle : type.
oracle_nil : oracle.
oracle_cons : oracle <- oracle <- bit.
segment : type.
ss : segment.
cs : segment.
hs : segment.
runfac : nat -> type.
rsection : nat -> type.
rsection_reserved : rsection N.
rsection_runtime : rsection N <- runfac IRF.
rsection_trappage : rsection N.
section : nat -> type.
section_valid : section N <- string N <- segment.
section_reserved : section N <- rsection N.
memory : type.
mnil : memory.
mcons : (Pi n:nat. memory <- memory <- section n) <- binary wwb.
ireg : type = nat.
eax : nat = 0'.
ecx : nat = 1'.
edx : nat = 2'.
ebx : nat = 3'.
ebp : nat = 4'.
esi : nat = 5'.
edi : nat = 6'.
esp : nat = 7'.
numregs : nat = 8'.
regs : nat -> type.
regs_nil : regs z.
regs_cons : regs (s N) <- regs N <- string ww.
flags : type.
flags_ : flags <- bit <- bit <- bit <- bit.
state : type.
state_ : state <- oracle <- binary wwb <- flags <- regs numregs <- memory.
stopped : state.
getmem : state -> memory -> type.
putmem : state -> memory -> state -> type.
getmem_ : getmem (state_ H R FR A OR) H.
putmem_ : putmem (state_ H1 R FR A OR) H (state_ H R FR A OR).
getregs : state -> regs numregs -> type.
putregs : state -> regs numregs -> state -> type.
getregs_ : getregs (state_ H R FR A OR) R.
putregs_ : putregs (state_ H R1 FR A OR) R (state_ H R FR A OR).
getflags : state -> flags -> type.
putflags : state -> flags -> state -> type.
getflags_ : getflags (state_ H R FR A OR) FR.
putflags_ : putflags (state_ H R FR1 A OR) FR (state_ H R FR A OR).
geteip : state -> binary wwb -> type.
puteip : state -> binary wwb -> state -> type.
geteip_ : geteip (state_ H R FR A OR) A.
puteip_ : puteip (state_ H R FR B1 OR) A (state_ H R FR A OR).
getoracle : state -> oracle -> type.
putoracle : state -> oracle -> state -> type.
getoracle_ : getoracle (state_ H R FR A OR) OR.
putoracle_ : putoracle (state_ H R FR A OR1) OR (state_ H R FR A OR).
consume_bit : oracle -> bit -> oracle -> type.
consume_nil : consume_bit oracle_nil zero oracle_nil.
consume_cons : consume_bit (oracle_cons BIT OR) BIT OR.
consume : oracle -> Pi N:nat. binary N -> oracle -> type.
consume_z : consume OR z nil$ OR.
consume_s :
   consume OR (s N) ($ BIT B) OR''
      <- consume_bit OR BIT OR'
      <- consume OR' N B OR''.
consume_string : oracle -> Pi N:nat. string N -> oracle -> type.
consume_string_z : consume_string OR z # OR.
consume_string_s :
   consume_string OR (s N) (/ A S) OR''
      <- consume OR bw A OR'
      <- consume_string OR' N S OR''.
st_consume : state -> Pi N:nat. binary N -> state -> type.
st_consume_ :
   st_consume (state_ H R FR A OR) N B (state_ H R FR A OR')
      <- consume OR N B OR'.
index :
   Pi N:nat. string N1 -> string N -> string N2 -> type.
index_z : index z S # S.
index_s : index (s N) (/ B S) (/ B W) S' <- index N S W S'.
string_exp : string N1 -> nat -> string N2 -> type.
string_exp_z : string_exp S1 z #.
string_exp_s :
   string_exp S1 (s N) Sall <- string_exp S1 N S2 <- index N3 Sall S1 S2.
mload* : memory -> binary wwb -> string N1 -> type.
mload_hit :
   mload* (mcons Astart Nsize (section_valid SEG1 S) Mrest) Aaddr S'
      <- add Astart Boffset Aaddr zero
      <- represents Noffset Boffset
      <- lt Noffset Nsize
      <- index Noffset S S1 S'.
mload_miss :
   mload* (mcons Astart Nsize SECT1 Mrest) Aaddr S
      <- represents Nsize Bsize
      <- add Astart Bsize Bend zero
      <- add Bend B1 Aaddr zero
      <- mload* Mrest Aaddr S.
mload : state -> binary wwb -> Pi N:nat. string N -> type.
mload_ : mload ST A N Sout <- getmem ST H <- mload* H A S <- index N S Sout S1.
segment_of : memory -> binary wwb -> segment -> type.
segment_of_hit :
   segment_of (mcons Astart Nsize (section_valid SEG S1) H1) Aaddr SEG
      <- add Astart Boffset Aaddr zero
      <- represents Noffset Boffset
      <- lt Noffset Nsize.
segment_of_miss :
   segment_of (mcons Astart Nsize SECT1 Mrest) Aaddr SEG
      <- represents Nsize Bsize
      <- add Astart Bsize Bend zero
      <- add Bend B1 Aaddr zero
      <- segment_of Mrest Aaddr SEG.
runtime_address : memory -> binary wwb -> runfac N1 -> type.
runtime_address_hit :
   runtime_address (mcons A (s N2) (section_reserved (rsection_runtime IRF)) H1)
      A IRF.
runtime_address_miss :
   runtime_address (mcons A' Nsize SECT1 H) A IRF
      <- represents Nsize Bsize
      <- add A' Bsize Aend zero
      <- add Aend B1 A zero
      <- runtime_address H A IRF.
trap_address : memory -> binary wwb -> type.
trap_address_hit :
   trap_address (mcons Astart Nsize (section_reserved rsection_trappage) H1)
      Aaddr
      <- add Astart Boffset Aaddr zero
      <- represents Noffset Boffset
      <- lt Noffset Nsize.
trap_address_miss :
   trap_address (mcons Astart Nsize SECT1 Mrest) Aaddr
      <- represents Nsize Bsize
      <- add Astart Bsize Bend zero
      <- add Bend B1 Aaddr zero
      <- trap_address Mrest Aaddr.
stack_absent : memory -> type.
stack_absent_nil : stack_absent mnil.
stack_absent_cs :
   stack_absent (mcons B1 N1 (section_valid cs S1) Mrest) <- stack_absent Mrest.
stack_absent_hs :
   stack_absent (mcons B1 N1 (section_valid hs S1) Mrest) <- stack_absent Mrest.
stack_absent_reserved :
   stack_absent (mcons B1 N1 (section_reserved RSECT1) Mrest)
      <- stack_absent Mrest.
stack_section : memory -> binary wwb -> Pi N:nat. string N -> type.
stack_section_hit :
   stack_section (mcons Astart Nsize (section_valid ss S) H) Astart Nsize S
      <- stack_absent H.
stack_section_hs :
   stack_section (mcons B1 N1 (section_valid hs S1) M) Astart Nsize S
      <- stack_section M Astart Nsize S.
stack_section_cs :
   stack_section (mcons B1 N1 (section_valid cs S1) M) Astart Nsize S
      <- stack_section M Astart Nsize S.
stack_section_reserved :
   stack_section (mcons B1 N1 (section_reserved RSECT1) M) Astart Nsize S
      <- stack_section M Astart Nsize S.
mstore* : memory -> binary wwb -> string N1 -> memory -> type.
mstore_hit :
   mstore* (mcons Astart Nsize (section_valid SEG S) Mrest) Aaddr Sput
      (mcons Astart Nsize (section_valid SEG S') Mrest)
      <- add Astart Boffset Aaddr zero
      <- represents Noffset Boffset
      <- lt Noffset Nsize
      <- index Noffset S Sinit S12
      <- index N S12 S1 S2
      <- index N S12' Sput S2
      <- index Noffset S' Sinit S12'.
mstore_miss :
   mstore* (mcons Astart Nsize SECT Mrest) Aaddr Sput
      (mcons Astart Nsize SECT Mrest')
      <- represents Nsize Bsize
      <- add Astart Bsize Bend zero
      <- add Bend B1 Aaddr zero
      <- mstore* Mrest Aaddr Sput Mrest'.
mstore : state -> binary wwb -> string N -> state -> type.
mstore_ :
   mstore ST A Sput ST'
      <- getmem ST H
      <- mstore* H A Sput H'
      <- putmem ST H' ST'.
mextend* : memory -> binary wwb -> section N1 -> memory -> type.
mextend_nil : mextend* mnil Astart SECT (mcons Astart (s N) SECT mnil).
mextend_cons :
   mextend* (mcons Astart' Nsize SECT' Mrest) Astart SECT
      (mcons Astart' Nsize SECT' Mrest')
      <- represents Nsize Bsize
      <- add Astart' Bsize Aend' zero
      <- add Aend' B1 Astart zero
      <- mextend* Mrest Astart SECT Mrest'.
mextend_between :
   mextend* (mcons Astart' Nsize SECT' Mrest) Astart SECT
      (mcons Astart (s N) SECT (mcons Astart' Nsize SECT' Mrest))
      <- represents (s N) Bsize
      <- add Astart Bsize Aend zero
      <- add Aend B1 Astart' zero.
is_valid_addr* : memory -> binary wwb -> binary wwb -> type.
is_valid_addr_nil : is_valid_addr* mnil B1 B2.
is_valid_addr_cons :
   is_valid_addr* (mcons Astart' Nsize SECT1 Mrest) Astart Aend
      <- represents Nsize Bsize
      <- add Astart' Bsize Aend' zero
      <- add Aend' B1 Astart zero
      <- is_valid_addr* Mrest Astart Aend.
is_valid_addr_between :
   is_valid_addr* (mcons Astart' Nsize SECT1 Mrest) Astart Aend
      <- add Aend B1 Astart' zero
      <- is_valid_addr* Mrest Astart Aend.
alignment : binary 2' = 0_2.
is_aligned : binary wwb -> type.
is_aligned_ : is_aligned B <- binary_append B1 alignment B.
is_valid_addr : memory -> binary wwb -> binary wwb -> type.
is_valid_addr_ :
   is_valid_addr H Astart Aend
      <- is_aligned Astart
      <- is_valid_addr* H Astart Aend.
is_invalid_addr* : memory -> binary wwb -> binary wwb -> type.
is_invalid_addr_hit :
   is_invalid_addr* (mcons Astart' Nsize SECT1 H1) Astart Aend
      <- represents Nsize Bsz
      <- add Astart' Bsz Aend' zero
      <- add Astart B1 Aend' zero
      <- add Astart' B2 Aend zero
      <- is_nonzero B1
      <- is_nonzero B2.
is_invalid_addr_cons :
   is_invalid_addr* (mcons B1 N1 SECT1 Mrest) Astart Aend
      <- is_invalid_addr* Mrest Astart Aend.
is_unaligned : binary wwb -> type.
is_unaligned_1 : is_unaligned B <- binary_append B1 1_2 B.
is_unaligned_2 : is_unaligned B <- binary_append B1 2_2 B.
is_unaligned_3 : is_unaligned B <- binary_append B1 3_2 B.
is_invalid_addr : memory -> binary wwb -> binary wwb -> type.
is_invalid_addr_unaligned : is_invalid_addr H Astart B1 <- is_unaligned Astart.
is_invalid_addr_ :
   is_invalid_addr H Astart Aend <- is_invalid_addr* H Astart Aend.
increment : binary 32' = 4_32.
get_valid_addr :
   oracle -> memory -> binary wwb -> binary wwb -> bit -> binary wwb -> oracle
      -> type.
get_valid_addr_hit :
   get_valid_addr OR H Bsize Acurr one' Acurr OR'
      <- add Acurr Bsize Aend zero
      <- is_valid_addr H Acurr Aend
      <- consume_bit OR one' OR'.
get_valid_addr_oracle :
   get_valid_addr OR H Bsize Acurr SUCC? Astart OR''
      <- add Acurr Bsize Aend zero
      <- is_valid_addr H Acurr Aend
      <- consume_bit OR zero OR'
      <- add Acurr increment Anext zero
      <- get_valid_addr OR' H Bsize Anext SUCC? Astart OR''.
get_valid_addr_invalid :
   get_valid_addr OR H Bsize Acurr SUCC? Astart OR'
      <- add Acurr Bsize Aend zero
      <- is_invalid_addr H Acurr Aend
      <- add Acurr increment Anext zero
      <- get_valid_addr OR H Bsize Anext SUCC? Astart OR'.
get_valid_addr_fail_o :
   get_valid_addr OR H Bsize Acurr zero 0_32 OR'
      <- add Acurr Bsize Aend zero
      <- is_valid_addr H Acurr Aend
      <- consume_bit OR zero OR'
      <- add Acurr increment B1 one'.
get_valid_addr_fail_i :
   get_valid_addr OR H Bsize Acurr zero 0_32 OR
      <- add Acurr Bsize Aend zero
      <- is_invalid_addr H Acurr Aend
      <- add Acurr increment B1 one'.
get_valid_addr_fail_ov :
   get_valid_addr OR H Bsize Acurr zero 0_32 OR <- add Acurr Bsize Aend one'.
mextend :
   state -> segment -> string N1 -> state -> binary wwb -> bit -> type.
mextend_ :
   mextend ST SEG S ST'' Astart one'
      <- represents N Bsize
      <- getmem ST H
      <- getoracle ST OR
      <- get_valid_addr OR H Bsize 0_32 one' Astart OR'
      <- mextend* H Astart (section_valid SEG S) H'
      <- putmem ST H' ST'
      <- putoracle ST' OR' ST''.
mextend_fail_toobig :
   mextend ST SEG S stopped 0_32 zero <- unrepresentable N wwb.
mextend_fail_nospace :
   mextend ST SEG S stopped 0_32 zero
      <- represents N Bsize
      <- getmem ST H
      <- getoracle ST OR
      <- get_valid_addr OR H Bsize 0_32 zero 0_32 OR1.
rload* : regs N1 -> nat -> string ww -> type.
rload_z : rload* (regs_cons W R1) z W.
rload_s : rload* (regs_cons S1 R) (s N) W <- rload* R N W.
rload : state -> nat -> string ww -> type.
rload_ : rload ST REG W <- getregs ST R <- rload* R REG W.
rstore* : regs N -> nat -> string ww -> regs N -> type.
rstore_z : rstore* (regs_cons S1 R) z W (regs_cons W R).
rstore_s :
   rstore* (regs_cons W R) (s N) W' (regs_cons W R') <- rstore* R N W' R'.
rstore : state -> nat -> string ww -> state -> type.
rstore_ :
   rstore ST REG W ST'
      <- getregs ST R
      <- rstore* R REG W R'
      <- putregs ST R' ST'.
load_cf : state -> bit -> type.
load_cf_ : load_cf ST CF <- getflags ST (flags_ CF ZF SF OF).
load_zf : state -> bit -> type.
load_zf_ : load_zf ST ZF <- getflags ST (flags_ CF ZF SF OF).
load_sf : state -> bit -> type.
load_sf_ : load_sf ST SF <- getflags ST (flags_ CF ZF SF OF).
load_of : state -> bit -> type.
load_of_ : load_of ST OF <- getflags ST (flags_ CF ZF SF OF).
store_cf : state -> bit -> state -> type.
store_cf_ :
   store_cf ST CF ST'
      <- getflags ST (flags_ B1 ZF SF OF)
      <- putflags ST (flags_ CF ZF SF OF) ST'.
store_zf : state -> bit -> state -> type.
store_zf_ :
   store_zf ST ZF ST'
      <- getflags ST (flags_ CF B1 SF OF)
      <- putflags ST (flags_ CF ZF SF OF) ST'.
store_sf : state -> bit -> state -> type.
store_sf_ :
   store_sf ST SF ST'
      <- getflags ST (flags_ CF ZF B1 OF)
      <- putflags ST (flags_ CF ZF SF OF) ST'.
store_of : state -> bit -> state -> type.
store_of_ :
   store_sf ST OF ST'
      <- getflags ST (flags_ CF ZF SF B1)
      <- putflags ST (flags_ CF ZF SF OF) ST'.
result_flags : type.
result_flags_ : result_flags <- bit <- bit <- bit <- bit.
store_result_flags : state -> result_flags -> state -> type.
store_result_flags_ :
   store_result_flags ST (result_flags_ CF ZF SF OF) ST'
      <- putflags ST (flags_ CF ZF SF OF) ST'.
overflow_lim : binary wwb = 1024_32.
at_runtime_address : state -> runfac N1 -> type.
at_runtime_address_ :
   at_runtime_address ST IRF
      <- geteip ST A
      <- getmem ST H
      <- runtime_address H A IRF.
icond : type.
icond_e : icond.
icond_ne : icond.
icond_a : icond.
icond_ae : icond.
icond_b : icond.
icond_be : icond.
icond_g : icond.
icond_ge : icond.
icond_l : icond.
icond_le : icond.
icond_s : icond.
icond_ns : icond.
icond_o : icond.
icond_no : icond.
icond_sat : icond -> state -> type.
icond_sat_e : icond_sat icond_e ST <- load_zf ST one'.
icond_sat_ne : icond_sat icond_ne ST <- load_zf ST zero.
icond_sat_a : icond_sat icond_a ST <- load_cf ST zero <- load_zf ST zero.
icond_sat_ae : icond_sat icond_ae ST <- load_cf ST zero.
icond_sat_b : icond_sat icond_b ST <- load_cf ST one'.
icond_sat_be_b : icond_sat icond_be ST <- load_cf ST one'.
icond_sat_be_e : icond_sat icond_be ST <- load_zf ST one'.
icond_sat_g_nov :
   icond_sat icond_g ST <- load_zf ST zero <- load_sf ST zero <- load_of ST 
zero.
icond_sat_g_ov :
   icond_sat icond_g ST <- load_zf ST zero <- load_sf ST one' <- load_of ST 
one'.
icond_sat_ge_nov : icond_sat icond_ge ST <- load_sf ST zero <- load_of ST zero.
icond_sat_ge_ov : icond_sat icond_ge ST <- load_sf ST one' <- load_of ST one'.
icond_sat_l_nov : icond_sat icond_l ST <- load_sf ST one' <- load_of ST zero.
icond_sat_l_ov : icond_sat icond_l ST <- load_sf ST zero <- load_of ST one'.
icond_sat_le_nov : icond_sat icond_le ST <- load_sf ST one' <- load_of ST zero.
icond_sat_le_ov : icond_sat icond_le ST <- load_sf ST zero <- load_of ST one'.
icond_sat_le_e : icond_sat icond_le ST <- load_zf ST one'.
icond_sat_s : icond_sat icond_s ST <- load_sf ST one'.
icond_sat_ns : icond_sat icond_ns ST <- load_sf ST zero.
icond_sat_o : icond_sat icond_o ST <- load_of ST one'.
icond_sat_no : icond_sat icond_no ST <- load_of ST zero.
icond_negate : icond -> icond -> type.
icond_negate_e : icond_negate icond_e icond_ne.
icond_negate_ne : icond_negate icond_ne icond_e.
icond_negate_a : icond_negate icond_a icond_be.
icond_negate_ae : icond_negate icond_ae icond_b.
icond_negate_b : icond_negate icond_b icond_ae.
icond_negate_be : icond_negate icond_be icond_a.
icond_negate_g : icond_negate icond_g icond_le.
icond_negate_ge : icond_negate icond_ge icond_l.
icond_negate_l : icond_negate icond_l icond_ge.
icond_negate_le : icond_negate icond_le icond_g.
icond_negate_s : icond_negate icond_s icond_ns.
icond_negate_ns : icond_negate icond_ns icond_s.
icond_negate_o : icond_negate icond_o icond_no.
icond_negate_no : icond_negate icond_no icond_o.
icond_unsat : icond -> state -> type.
icond_unsat_ :
   icond_unsat Icond ST <- icond_negate Icond Icond1 <- icond_sat Icond1 ST.
asignextend : binary bw -> binary wwb -> type.
asignextend_nonneg :
   asignextend ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 ($ B6 0_1)))))))
      ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 ($ B6 ($ zero 0_24)))))))).
asignextend_neg :
   asignextend ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 ($ B6 1_1)))))))
      ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 ($ B6 ($ one' -1_24)))))))).
signextend_byte : binary bw -> binary bw -> type.
signextend_byte_nonneg :
   signextend_byte ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 ($ B6 0_1))))))) 00_8.
signextend_byte_neg :
   signextend_byte ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 ($ B6 1_1))))))) ff_8.
implode_word : string ww -> binary wwb -> type.
implode_word_ :
   implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B
      <- binary_append B3 B2 B32
      <- binary_append B32 B1 B31
      <- binary_append B31 B0 B.
implode_word_2 : string 2' -> binary 16' -> type.
implode_word_2_ : implode_word_2 (/ B0 (/ B1 #)) B <- binary_append B1 B0 B.
implode_word_3 : string 3' -> binary 24' -> type.
implode_word_3_ :
   implode_word_3 (/ B0 (/ B1 (/ B2 #))) B
      <- binary_append B2 B1 B21
      <- binary_append B21 B0 B.
alu_zf_of : binary (s N) -> bit -> type.
alu_zf_of_set : alu_zf_of B one' <- is_zero B.
alu_zf_of_clear : alu_zf_of B zero <- is_nonzero B.
alu_sf_of : binary (s N) -> bit -> type.
alu_sf_of_1 : alu_sf_of ($ BIT nil$) BIT.
alu_sf_of_n : alu_sf_of ($ B1 B) BIT <- alu_sf_of B BIT.
overflow_flag_of : binary (s (s N)) -> bit -> type.
overflow_flag_of_ :
   overflow_flag_of ($ BIT1 ($ BIT2 B1)) BIT3 <- xor_bit BIT1 BIT2 BIT3.
result_flags_of : binary (s N) -> bit -> bit -> result_flags -> type.
result_flags_of_ :
   result_flags_of AW CF OF (result_flags_ CF ZF SF OF)
      <- alu_zf_of AW ZF
      <- alu_sf_of AW SF.
aluop : type.
iadd : aluop.
isub : aluop.
ineg : aluop.
inot : aluop.
iand : aluop.
ior : aluop.
ixor : aluop.
ishl : aluop.
ishr : aluop.
isar : aluop.
irol : aluop.
iror : aluop.
ircl : aluop.
ircr : aluop.
binop* :
   aluop -> binary N -> binary N -> binary N -> result_flags -> type.
binop_add :
   binop* iadd B1 B2 B3 RF
      <- add_wo B1 B2 B3 CF OF
      <- result_flags_of B3 CF OF RF.
binop_sub :
   binop* isub B1 B2 B3 RF
      <- add_wo B2 B3 B1 CF OF
      <- result_flags_of B3 CF OF RF.
binop_and :
   binop* iand B1 B2 B3 RF <- and B1 B2 B3 <- result_flags_of B3 zero zero RF.
binop_or :
   binop* ior B1 B2 B3 RF <- or B1 B2 B3 <- result_flags_of B3 zero zero RF.
binop_xor :
   binop* ixor B1 B2 B3 RF <- xor B1 B2 B3 <- result_flags_of B3 zero zero RF.
binop :
   aluop -> string N -> string N -> string N -> result_flags -> type.
binop_4 :
   binop ALUOP S1 S2 S3 RF
      <- implode_word S1 B1
      <- implode_word S2 B2
      <- binop* ALUOP B1 B2 B3 RF
      <- implode_word S3 B3.
binop_1 : binop ALUOP (/ B1 #) (/ B2 #) (/ B3 #) RF <- binop* ALUOP B1 B2 B3 RF.
unaryop* : aluop -> binary N -> binary N -> result_flags -> type.
unaryop_neg :
   unaryop* ineg B1 B2 RF
      <- neg B1 B2 CF
      <- overflow_flag_of B2 OF
      <- result_flags_of B3 CF OF RF.
unaryop : aluop -> string N -> string N -> result_flags -> type.
unaryop_4 :
   unaryop ALUOP S1 S2 RF
      <- implode_word S1 B1
      <- unaryop* ALUOP B1 B2 RF
      <- implode_word S2 B2.
unaryop_1 : unaryop ALUOP (/ B1 #) (/ B2 #) RF <- unaryop* ALUOP B1 B2 RF.
shiftop_1 :
   aluop -> binary N -> flags -> binary N -> result_flags -> type.
shiftop_rol_1 :
   shiftop_1 irol Bin (flags_ Cin Zin Sin Oin) Bout
      (result_flags_ Cout Zin Sin Oout)
      <- rol_once_wo Bin Bout Cout Oout.
shiftop_ror_1 :
   shiftop_1 iror Bin (flags_ Cin Zin Sin Oin) Bout
      (result_flags_ Cout Zin Sin Oout)
      <- ror_once_wo Bin Bout Cout Oout.
shiftop_rcl_1 :
   shiftop_1 ircl Bin (flags_ Cin Zin Sin Oin) Bout
      (result_flags_ Cout Zin Sin Oout)
      <- rol_once_wo ($ Cin Bin) ($ B1 Bout) Cout Oout.
shiftop_rcr_1 :
   shiftop_1 ircr Bin (flags_ Cin Zin Sin Oin) Bout
      (result_flags_ Cout Zin Sin Oout)
      <- ror_once_wo ($ Cin Bin) ($ B1 Bout) Cout Oout.
shiftop_shl_1 :
   shiftop_1 ishl Bin (flags_ Cin Zin Sin Oin) Bout
      (result_flags_ Cout Zin Sin Oout)
      <- shl_once_wo Bin Bout Cout Oout.
shiftop_shr_1 :
   shiftop_1 ishr Bin (flags_ Cin Zin Sin Oin) Bout
      (result_flags_ Cout Zin Sin Oout)
      <- shr_once_wo Bin Bout Cout Oout.
shiftop_sar_1 :
   shiftop_1 isar Bin (flags_ Cin Zin Sin Oin) Bout
      (result_flags_ Cout Zin Sin Oout)
      <- sar_once_wo Bin Bout Cout Oout.
shiftop_gt_1 :
   aluop -> binary N -> flags -> nat -> oracle -> binary N -> result_flags
         -> oracle -> type.
shiftop_rol_gt_1 :
   shiftop_gt_1 irol Bin (flags_ Cin Zin Sin Oin) N OR Bout
      (result_flags_ Cout Zin Sin Oout) OR''
      <- rotate_left N Bin Bout
      <- consume_bit OR Cout OR'
      <- consume_bit OR' Oout OR''.
shiftop_ror_gt_1 :
   shiftop_gt_1 iror Bin (flags_ Cin Zin Sin Oin) N OR Bout
      (result_flags_ Cout Zin Sin Oout) OR''
      <- rotate_right N Bin Bout
      <- consume_bit OR Cout OR'
      <- consume_bit OR' Oout OR''.
shiftop_rcl_gt_1 :
   shiftop_gt_1 ircl Bin (flags_ Cin Zin Sin Oin) N OR Bout
      (result_flags_ Cout Zin Sin Oout) OR''
      <- rotate_left N ($ Cin Bin) ($ B1 Bout)
      <- consume_bit OR Cout OR'
      <- consume_bit OR' Oout OR''.
shiftop_rcr_gt_1 :
   shiftop_gt_1 ircr Bin (flags_ Cin Zin Sin Oin) N OR Bout
      (result_flags_ Cout Zin Sin Oout) OR''
      <- rotate_right N ($ Cin Bin) ($ B1 Bout)
      <- consume_bit OR Cout OR'
      <- consume_bit OR' Oout OR''.
shiftop_shl_gt_1 :
   shiftop_gt_1 ishl Bin (flags_ Cin Zin Sin Oin) N OR Bout
      (result_flags_ Cout Zin Sin Oout) OR'
      <- shift_left N Bin Bout Cout
      <- consume_bit OR Oout OR'.
shiftop_shr_gt_1 :
   shiftop_gt_1 ishr Bin (flags_ Cin Zin Sin Oin) N OR Bout
      (result_flags_ Cout Zin Sin Oout) OR'
      <- shift_right N Bin Bout Cout
      <- consume_bit OR Oout OR'.
shiftop_sar_gt_1 :
   shiftop_gt_1 isar Bin (flags_ Cin Zin Sin Oin) N OR Bout
      (result_flags_ Cout Zin Sin Oout) OR'
      <- shift_arith_right N Bin Bout Cout
      <- consume_bit OR Oout OR'.
shiftop* :
   aluop -> binary N -> flags -> binary bw -> oracle -> binary N
         -> result_flags -> oracle -> type.
shiftop*_z :
   shiftop* OP B (flags_ Cin Zin Sin Oin) Bzeropad OR B
      (result_flags_ Cin Zin Sin Oin) OR''
      <- and Bzeropad 1f_8 Bzero
      <- represents z Bzero
      <- consume_bit OR Cout OR'
      <- consume_bit OR' Oout OR''.
shiftop*_1 :
   shiftop* OP Bin F Bonepad OR Bout RF OR
      <- and Bonepad 1f_8 Bone
      <- represents 1' Bone
      <- shiftop_1 OP Bin F Bout RF.
shiftop*_gt_1 :
   shiftop* OP Bin F Bgtopad OR Bout RF OR'
      <- and Bgtopad 1f_8 Bgto
      <- represents N Bgto
      <- lt 1' N
      <- shiftop_gt_1 OP Bin F N OR Bout RF OR'.
is_shift_op : aluop -> type.
is_shift_op_ishl : is_shift_op ishl.
is_shift_op_ishr : is_shift_op ishr.
is_shift_op_isar : is_shift_op isar.
shiftop :
   aluop -> string N -> flags -> string 1' -> oracle -> string N
         -> result_flags -> oracle -> type.
shiftop_len_4 :
   shiftop ALUOP S1 F1 (/ B2 #) OR1 S3 RF2 OR2
      <- implode_word S1 B1
      <- shiftop* ALUOP B1 F1 B2 OR1 B3 RF2 OR2
      <- implode_word S3 B3.
shiftop_len_1 :
   shiftop ALUOP (/ B1 #) F1 (/ B2 #) OR1 (/ B3 #) RF2 OR2
      <- is_shift_op ALUOP
      <- shiftop* ALUOP B1 F1 B2 OR1 B3 RF2 OR2.
eaddress : nat -> type.
eaddr_reg : eaddress ww <- nat.
eaddr_reglow : eaddress 1' <- nat.
eaddr_reghigh : eaddress 1' <- nat.
eaddr_deref : (Pi n:nat. eaddress n) <- binary wwb <- nat <- nat <- nat.
eaddr_abs : (Pi n:nat. eaddress n) <- binary wwb <- nat <- nat.
oper : nat -> type.
oper_rm : oper N <- eaddress N.
oper_imm : oper N <- string N.
oper_pcrel : oper ww <- binary wwb.
iinst : type.
ii_add : Pi Nsz:nat. iinst <- oper Nsz <- eaddress Nsz.
ii_and : Pi Nsz:nat. iinst <- oper Nsz <- eaddress Nsz.
ii_call : iinst <- oper ww.
ii_cmp : Pi Nsz:nat. iinst <- oper Nsz <- eaddress Nsz.
ii_fload : Pi Nsz:nat. iinst <- eaddress Nsz.
ii_fstoreflags : iinst.
ii_fnop : iinst.
ii_fstore : Pi Nsz:nat. iinst <- eaddress Nsz.
ii_jecxz : iinst <- oper ww.
ii_jcc : iinst <- oper ww <- icond.
ii_jmp : iinst <- oper ww.
ii_mov : Pi Nsz:nat. iinst <- oper Nsz <- eaddress Nsz.
ii_movsx : Pi Ndsz:nat. Pi Nosz:nat. iinst <- oper Nosz <- eaddress Ndsz.
ii_movzx : Pi Ndsz:nat. Pi Nosz:nat. iinst <- oper Nosz <- eaddress Ndsz.
ii_or : Pi Nsz:nat. iinst <- oper Nsz <- eaddress Nsz.
ii_nop : iinst.
ii_pop : iinst <- eaddress ww.
ii_push : iinst <- oper ww.
ii_rcl : Pi Nsz:nat. iinst <- oper 1' <- eaddress Nsz.
ii_rcr : Pi Nsz:nat. iinst <- oper 1' <- eaddress Nsz.
ii_rol : Pi Nsz:nat. iinst <- oper 1' <- eaddress Nsz.
ii_ror : Pi Nsz:nat. iinst <- oper 1' <- eaddress Nsz.
ii_ret : iinst.
ii_shl : Pi Nsz:nat. iinst <- oper 1' <- eaddress Nsz.
ii_sar : Pi Nsz:nat. iinst <- oper 1' <- eaddress Nsz.
ii_shr : Pi Nsz:nat. iinst <- oper 1' <- eaddress Nsz.
ii_sub : Pi Nsz:nat. iinst <- oper Nsz <- eaddress Nsz.
ii_xor : Pi Nsz:nat. iinst <- oper Nsz <- eaddress Nsz.
irf_malloc : runfac 0'.
irf_mallocarr : runfac 1'.
irf_mallocarrb : runfac 2'.
parse_modrm : binary bw -> binary 2' -> binary 3' -> binary 3' -> type.
parse_modrm_ :
   parse_modrm ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 B67)))))) B67 ($ B3 ($ B4 ($ B5 nil$)))
      ($ B0 ($ B1 ($ B2 nil$))).
parse_44 : binary bw -> binary 4' -> binary 4' -> type.
parse_44_ : parse_44 ($ B0 ($ B1 ($ B2 ($ B3 B47)))) B47 ($ B0 ($ B1 ($ B2 ($ B3 nil$)))).
parse_53 : binary bw -> binary 5' -> binary 3' -> type.
parse_53_ : parse_53 ($ B0 ($ B1 ($ B2 B37))) B37 ($ B0 ($ B1 ($ B2 nil$))).
parse_35 : binary bw -> binary 3' -> binary 5' -> type.
parse_35_ :
   parse_35 ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 B57))))) B57 ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 nil$))))).
decode_si : binary 2' -> binary 3' -> nat -> nat -> type.
decode_si_00 : decode_si 0_2 0_3 1' eax.
decode_si_01 : decode_si 0_2 1_3 1' ecx.
decode_si_02 : decode_si 0_2 2_3 1' edx.
decode_si_03 : decode_si 0_2 3_3 1' ebx.
decode_si_04 : decode_si 0_2 4_3 0' eax.
decode_si_05 : decode_si 0_2 5_3 1' ebp.
decode_si_06 : decode_si 0_2 6_3 1' esi.
decode_si_07 : decode_si 0_2 7_3 1' edi.
decode_si_10 : decode_si 1_2 0_3 2' eax.
decode_si_11 : decode_si 1_2 1_3 2' ecx.
decode_si_12 : decode_si 1_2 2_3 2' edx.
decode_si_13 : decode_si 1_2 3_3 2' ebx.
decode_si_14 : decode_si 1_2 4_3 0' eax.
decode_si_15 : decode_si 1_2 5_3 2' ebp.
decode_si_16 : decode_si 1_2 6_3 2' esi.
decode_si_17 : decode_si 1_2 7_3 2' edi.
decode_si_20 : decode_si 2_2 0_3 4' eax.
decode_si_21 : decode_si 2_2 1_3 4' ecx.
decode_si_22 : decode_si 2_2 2_3 4' edx.
decode_si_23 : decode_si 2_2 3_3 4' ebx.
decode_si_24 : decode_si 2_2 4_3 0' eax.
decode_si_25 : decode_si 2_2 5_3 4' ebp.
decode_si_26 : decode_si 2_2 6_3 4' esi.
decode_si_27 : decode_si 2_2 7_3 4' edi.
decode_si_30 : decode_si 3_2 0_3 8' eax.
decode_si_31 : decode_si 3_2 1_3 8' ecx.
decode_si_32 : decode_si 3_2 2_3 8' edx.
decode_si_33 : decode_si 3_2 3_3 8' ebx.
decode_si_34 : decode_si 3_2 4_3 0' eax.
decode_si_35 : decode_si 3_2 5_3 8' ebp.
decode_si_36 : decode_si 3_2 6_3 8' esi.
decode_si_37 : decode_si 3_2 7_3 8' edi.
decode_reg : binary 3' -> nat -> type.
decode_reg_0 : decode_reg 0_3 eax.
decode_reg_1 : decode_reg 1_3 ecx.
decode_reg_2 : decode_reg 2_3 edx.
decode_reg_3 : decode_reg 3_3 ebx.
decode_reg_4 : decode_reg 4_3 esp.
decode_reg_5 : decode_reg 5_3 ebp.
decode_reg_6 : decode_reg 6_3 esi.
decode_reg_7 : decode_reg 7_3 edi.
decode_reg8 : binary 3' -> eaddress 1' -> type.
decode_reg8_0 : decode_reg8 0_3 (eaddr_reglow eax).
decode_reg8_1 : decode_reg8 1_3 (eaddr_reglow ecx).
decode_reg8_2 : decode_reg8 2_3 (eaddr_reglow edx).
decode_reg8_3 : decode_reg8 3_3 (eaddr_reglow ebx).
decode_reg8_4 : decode_reg8 4_3 (eaddr_reghigh eax).
decode_reg8_5 : decode_reg8 5_3 (eaddr_reghigh ecx).
decode_reg8_6 : decode_reg8 6_3 (eaddr_reghigh edx).
decode_reg8_7 : decode_reg8 7_3 (eaddr_reghigh ebx).
decode_si_disp :
   nat -> nat -> binary 3' -> string N1
         -> Pi N:nat. eaddress N -> string N3 -> type.
decode_si_disp_0 :
   decode_si_disp Scale Index 0_3 S Size (eaddr_deref eax Scale Index 0_32 Size)
      S.
decode_si_disp_1 :
   decode_si_disp Scale Index 1_3 S Size (eaddr_deref ecx Scale Index 0_32 Size)
      S.
decode_si_disp_2 :
   decode_si_disp Scale Index 2_3 S Size (eaddr_deref edx Scale Index 0_32 Size)
      S.
decode_si_disp_3 :
   decode_si_disp Scale Index 3_3 S Size (eaddr_deref ebx Scale Index 0_32 Size)
      S.
decode_si_disp_4 :
   decode_si_disp Scale Index 4_3 S Size (eaddr_deref esp Scale Index 0_32 Size)
      S.
decode_si_disp_5 :
   decode_si_disp Scale Index 5_3 (/ A0 (/ A1 (/ A2 (/ A3 S)))) Size
      (eaddr_abs Scale Index A Size) S
      <- implode_word (/ A0 (/ A1 (/ A2 (/ A3 #)))) A.
decode_si_disp_6 :
   decode_si_disp Scale Index 6_3 S Size (eaddr_deref esi Scale Index 0_32 Size)
      S.
decode_si_disp_7 :
   decode_si_disp Scale Index 7_3 S Size (eaddr_deref edi Scale Index 0_32 Size)
      S.
decode_modrm :
   binary 2' -> binary 3' -> string N1
         -> Pi N:nat. eaddress N -> string N3 -> type.
decode_modrm_00 :
   decode_modrm 0_2 0_3 S Size (eaddr_deref eax 0' eax 0_32 Size) S.
decode_modrm_01 :
   decode_modrm 0_2 1_3 S Size (eaddr_deref ecx 0' eax 0_32 Size) S.
decode_modrm_02 :
   decode_modrm 0_2 2_3 S Size (eaddr_deref edx 0' eax 0_32 Size) S.
decode_modrm_03 :
   decode_modrm 0_2 3_3 S Size (eaddr_deref ebx 0' eax 0_32 Size) S.
decode_modrm_04 :
   decode_modrm 0_2 4_3 (/ Bsib S) Sz EA S'
      <- parse_modrm Bsib Bs Bi Bb
      <- decode_si Bs Bi Scale Index
      <- decode_si_disp Scale Index Bb S Sz EA S'.
decode_modrm_05 :
   decode_modrm 0_2 5_3 (/ A0 (/ A1 (/ A2 (/ A3 S)))) Size (eaddr_abs 0' eax A Size) S
      <- implode_word (/ A0 (/ A1 (/ A2 (/ A3 #)))) A.
decode_modrm_06 :
   decode_modrm 0_2 6_3 S Size (eaddr_deref esi 0' eax 0_32 Size) S.
decode_modrm_07 :
   decode_modrm 0_2 7_3 S Size (eaddr_deref edi 0' eax 0_32 Size) S.
decode_modrm_10 :
   decode_modrm 1_2 0_3 (/ B S) Size (eaddr_deref eax 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_11 :
   decode_modrm 1_2 1_3 (/ B S) Size (eaddr_deref ecx 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_12 :
   decode_modrm 1_2 2_3 (/ B S) Size (eaddr_deref edx 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_13 :
   decode_modrm 1_2 3_3 (/ B S) Size (eaddr_deref ebx 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_14 :
   decode_modrm 1_2 4_3 (/ Bsib (/ B S)) Size
      (eaddr_deref Base Scale Index B' Size) S
      <- parse_modrm Bsib Bs Bi Bb
      <- decode_si Bs Bi Scale Index
      <- decode_reg Bb Base
      <- asignextend B B'.
decode_modrm_15 :
   decode_modrm 1_2 5_3 (/ B S) Size (eaddr_deref ebp 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_16 :
   decode_modrm 1_2 6_3 (/ B S) Size (eaddr_deref esi 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_17 :
   decode_modrm 1_2 7_3 (/ B S) Size (eaddr_deref edi 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_20 :
   decode_modrm 2_2 0_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref eax 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_21 :
   decode_modrm 2_2 1_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref ecx 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_22 :
   decode_modrm 2_2 2_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref edx 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_23 :
   decode_modrm 2_2 3_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref ebx 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_24 :
   decode_modrm 2_2 4_3 (/ Bsib (/ B0 (/ B1 (/ B2 (/ B3 S))))) Size
      (eaddr_deref Base Scale Index B Size) S
      <- parse_modrm Bsib Bs Bi Bb
      <- decode_si Bs Bi Scale Index
      <- decode_reg Bb Base
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_25 :
   decode_modrm 2_2 5_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref ebp 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_26 :
   decode_modrm 2_2 6_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref esi 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_27 :
   decode_modrm 2_2 7_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref edi 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_30 : decode_modrm 3_2 0_3 S ww (eaddr_reg eax) S.
decode_modrm_31 : decode_modrm 3_2 1_3 S ww (eaddr_reg ecx) S.
decode_modrm_32 : decode_modrm 3_2 2_3 S ww (eaddr_reg edx) S.
decode_modrm_33 : decode_modrm 3_2 3_3 S ww (eaddr_reg ebx) S.
decode_modrm_34 : decode_modrm 3_2 4_3 S ww (eaddr_reg esp) S.
decode_modrm_35 : decode_modrm 3_2 5_3 S ww (eaddr_reg ebp) S.
decode_modrm_36 : decode_modrm 3_2 6_3 S ww (eaddr_reg esi) S.
decode_modrm_37 : decode_modrm 3_2 7_3 S ww (eaddr_reg edi) S.
decode_modrm_30_8 : decode_modrm 3_2 0_3 S 1' (eaddr_reglow eax) S.
decode_modrm_31_8 : decode_modrm 3_2 1_3 S 1' (eaddr_reglow ecx) S.
decode_modrm_32_8 : decode_modrm 3_2 2_3 S 1' (eaddr_reglow edx) S.
decode_modrm_33_8 : decode_modrm 3_2 3_3 S 1' (eaddr_reglow ebx) S.
decode_modrm_34_8 : decode_modrm 3_2 4_3 S 1' (eaddr_reghigh eax) S.
decode_modrm_35_8 : decode_modrm 3_2 5_3 S 1' (eaddr_reghigh ecx) S.
decode_modrm_36_8 : decode_modrm 3_2 6_3 S 1' (eaddr_reghigh edx) S.
decode_modrm_37_8 : decode_modrm 3_2 7_3 S 1' (eaddr_reghigh ebx) S.
decode_modrm_esc :
   binary 2' -> binary 3' -> string N1
         -> Pi N:nat. eaddress N -> string N3 -> type.
decode_modrm_esc_00 :
   decode_modrm_esc 0_2 0_3 S Size (eaddr_deref eax 0' eax 0_32 Size) S.
decode_modrm_esc_01 :
   decode_modrm_esc 0_2 1_3 S Size (eaddr_deref ecx 0' eax 0_32 Size) S.
decode_modrm_esc_02 :
   decode_modrm_esc 0_2 2_3 S Size (eaddr_deref edx 0' eax 0_32 Size) S.
decode_modrm_esc_03 :
   decode_modrm_esc 0_2 3_3 S Size (eaddr_deref ebx 0' eax 0_32 Size) S.
decode_modrm_esc_04 :
   decode_modrm_esc 0_2 4_3 (/ Bsib S) Sz EA S'
      <- parse_modrm Bsib Bs Bi Bb
      <- decode_si Bs Bi Scale Index
      <- decode_si_disp Scale Index Bb S Sz EA S'.
decode_modrm_esc_05 :
   decode_modrm_esc 0_2 5_3 (/ A0 (/ A1 (/ A2 (/ A3 S)))) Size
      (eaddr_abs 0' eax A Size) S
      <- implode_word (/ A0 (/ A1 (/ A2 (/ A3 #)))) A.
decode_modrm_esc_06 :
   decode_modrm_esc 0_2 6_3 S Size (eaddr_deref esi 0' eax 0_32 Size) S.
decode_modrm_esc_07 :
   decode_modrm_esc 0_2 7_3 S Size (eaddr_deref edi 0' eax 0_32 Size) S.
decode_modrm_esc_10 :
   decode_modrm_esc 1_2 0_3 (/ B S) Size (eaddr_deref eax 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_esc_11 :
   decode_modrm_esc 1_2 1_3 (/ B S) Size (eaddr_deref ecx 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_esc_12 :
   decode_modrm_esc 1_2 2_3 (/ B S) Size (eaddr_deref edx 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_esc_13 :
   decode_modrm_esc 1_2 3_3 (/ B S) Size (eaddr_deref ebx 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_esc_14 :
   decode_modrm_esc 1_2 4_3 (/ Bsib (/ B S)) Size
      (eaddr_deref Base Scale Index B' Size) S
      <- parse_modrm Bsib Bs Bi Bb
      <- decode_si Bs Bi Scale Index
      <- decode_reg Bb Base
      <- asignextend B B'.
decode_modrm_esc_15 :
   decode_modrm_esc 1_2 5_3 (/ B S) Size (eaddr_deref ebp 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_esc_16 :
   decode_modrm_esc 1_2 6_3 (/ B S) Size (eaddr_deref esi 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_esc_17 :
   decode_modrm_esc 1_2 7_3 (/ B S) Size (eaddr_deref edi 0' eax B' Size) S
      <- asignextend B B'.
decode_modrm_esc_20 :
   decode_modrm_esc 2_2 0_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref eax 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_esc_21 :
   decode_modrm_esc 2_2 1_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref ecx 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_esc_22 :
   decode_modrm_esc 2_2 2_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref edx 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_esc_23 :
   decode_modrm_esc 2_2 3_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref ebx 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_esc_24 :
   decode_modrm_esc 2_2 4_3 (/ Bsib (/ B0 (/ B1 (/ B2 (/ B3 S))))) Size
      (eaddr_deref Base Scale Index B Size) S
      <- parse_modrm Bsib Bs Bi Bb
      <- decode_si Bs Bi Scale Index
      <- decode_reg Bb Base
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_esc_25 :
   decode_modrm_esc 2_2 5_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref ebp 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_esc_26 :
   decode_modrm_esc 2_2 6_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref esi 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_modrm_esc_27 :
   decode_modrm_esc 2_2 7_3 (/ B0 (/ B1 (/ B2 (/ B3 S)))) Size
      (eaddr_deref edi 0' eax B Size) S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_cond : binary 4' -> icond -> type.
decode_cond_e : decode_cond 4_4 icond_e.
decode_cond_ne : decode_cond 5_4 icond_ne.
decode_cond_a : decode_cond 7_4 icond_a.
decode_cond_ae : decode_cond 3_4 icond_ae.
decode_cond_b : decode_cond 2_4 icond_b.
decode_cond_be : decode_cond 6_4 icond_be.
decode_cond_g : decode_cond f_4 icond_g.
decode_cond_ge : decode_cond d_4 icond_ge.
decode_cond_l : decode_cond c_4 icond_l.
decode_cond_le : decode_cond e_4 icond_le.
decode_cond_s : decode_cond 8_4 icond_s.
decode_cond_ns : decode_cond 9_4 icond_ns.
decode_cond_o : decode_cond 0_4 icond_o.
decode_cond_no : decode_cond 1_4 icond_no.
adjust_plus_op : oper N -> nat -> oper N -> type.
adjust_plus_op_rm : adjust_plus_op (oper_rm EA) N (oper_rm EA).
adjust_plus_op_imm : adjust_plus_op (oper_imm S) N2 (oper_imm S).
adjust_plus_op_pcrel :
   adjust_plus_op (oper_pcrel B) Nadj (oper_pcrel B')
      <- represents Nadj Badj
      <- add B' Badj B B1.
adjust_minus_op : oper N -> nat -> oper N -> type.
adjust_minus_op_rm : adjust_minus_op (oper_rm EA) N (oper_rm EA).
adjust_minus_op_imm : adjust_minus_op (oper_imm S) N2 (oper_imm S).
adjust_minus_op_pcrel :
   adjust_minus_op (oper_pcrel B) Nadj (oper_pcrel B')
      <- represents Nadj Badj
      <- add B Badj B' B1.
idecode_eax :
   (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N -> iinst
         -> string N' -> type.
idecode_eax_ :
   idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
      (/ B0 (/ B1 (/ B2 (/ B3 S))))
      (I ww (eaddr_reg eax) (oper_imm (/ B0 (/ B1 (/ B2 (/ B3 #)))))) S.
idecode_al :
   (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N -> iinst
         -> string N' -> type.
idecode_al_ :
   idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) (/ B0 S)
      (I 1' (eaddr_reglow eax) (oper_imm (/ B0 #))) S.
idecode_mi :
   binary 3' -> (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N
         -> iinst -> string N' -> type.
idecode_mi_ :
   idecode_mi Bopcode (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
      (/ Bmodrm S) (I ww EA (oper_imm (/ B0 (/ B1 (/ B2 (/ B3 #)))))) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm Bmod Brm S ww EA (/ B0 (/ B1 (/ B2 (/ B3 S')))).
idecode_mi8 :
   binary 3' -> (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N
         -> iinst -> string N' -> type.
idecode_mi8_ :
   idecode_mi8 Bopcode (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
      (/ Bmodrm S) (I 1' EA (oper_imm (/ B0 #))) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm Bmod Brm S 1' EA (/ B0 S').
idecode_mi_oper8 :
   binary 3' -> (Pi Nsz:nat. eaddress Nsz -> oper 1' -> iinst) -> string N
         -> iinst -> string N' -> type.
idecode_mi_oper8_ :
   idecode_mi_oper8 Bopcode (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o)
      (/ Bmodrm S) (I ww EA (oper_imm (/ B0 #))) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm Bmod Brm S ww EA (/ B0 S').
idecode_mi8_oper8 :
   binary 3' -> (Pi Nsz:nat. eaddress Nsz -> oper 1' -> iinst) -> string N
         -> iinst -> string N' -> type.
idecode_mi8_oper8_ :
   idecode_mi8_oper8 Bopcode (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o)
      (/ Bmodrm S) (I 1' EA (oper_imm (/ B0 #))) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm Bmod Brm S 1' EA (/ B0 S').
idecode_mib :
   binary 3' -> (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N
         -> iinst -> string N' -> type.
idecode_mib_ :
   idecode_mib Bopcode (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
      (/ Bmodrm S) (I ww EA (oper_imm (/ B0 (/ Bext (/ Bext (/ Bext #)))))) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm Bmod Brm S ww EA (/ B0 S')
      <- signextend_byte B0 Bext.
idecode_mr :
   (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N -> iinst
         -> string N' -> type.
idecode_mr_ :
   idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) (/ Bmodrm S)
      (I ww EA (oper_rm (eaddr_reg REG))) S'
      <- parse_modrm Bmodrm Bmod Breg Brm
      <- decode_modrm Bmod Brm S ww EA S'
      <- decode_reg Breg REG.
idecode_mr8 :
   (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N -> iinst
         -> string N' -> type.
idecode_mr8_ :
   idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
      (/ Bmodrm S) (I 1' EA (oper_rm EREG)) S'
      <- parse_modrm Bmodrm Bmod Breg Brm
      <- decode_modrm Bmod Brm S 1' EA S'
      <- decode_reg8 Breg EREG.
idecode_rm :
   (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N -> iinst
         -> string N' -> type.
idecode_rm_ :
   idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) (/ Bmodrm S)
      (I ww (eaddr_reg REG) (oper_rm EA)) S'
      <- parse_modrm Bmodrm Bmod Breg Brm
      <- decode_modrm Bmod Brm S ww EA S'
      <- decode_reg Breg REG.
idecode_rm_oper8 :
   (Pi Ndsz:nat. Pi Nosz:nat. eaddress Ndsz -> oper Nosz -> iinst)
         -> string N -> iinst -> string N' -> type.
idecode_rm_oper8_ :
   idecode_rm_oper8
      (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz. I Ndsz Nosz ea o)
      (/ Bmodrm S) (I ww 1' (eaddr_reg REG) (oper_rm EA)) S'
      <- parse_modrm Bmodrm Bmod Breg Brm
      <- decode_modrm Bmod Brm S 1' EA S'
      <- decode_reg Breg REG.
idecode_rm8 :
   (Pi Nsz:nat. eaddress Nsz -> oper Nsz -> iinst) -> string N -> iinst
         -> string N' -> type.
idecode_rm8_ :
   idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
      (/ Bmodrm S) (I 1' EREG (oper_rm EA)) S'
      <- parse_modrm Bmodrm Bmod Breg Brm
      <- decode_modrm Bmod Brm S 1' EA S'
      <- decode_reg8 Breg EREG.
idecode_nr :
   (oper ww -> iinst) -> string N -> iinst -> string N' -> type.
idecode_nr_ :
   idecode_nr (\o:oper ww. I o) (/ B0 (/ B2 (/ B3 (/ B4 S)))) (I (oper_pcrel B)) S
      <- implode_word (/ B0 (/ B2 (/ B3 (/ B4 #)))) B'
      <- add B' 5_32 B B1.
idecode_nai :
   binary 3' -> (oper ww -> iinst) -> string N -> iinst -> string N' -> type.
idecode_nai_ :
   idecode_nai Bopcode (\o:oper ww. I o) (/ Bmodrm S) (I (oper_rm EA)) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm Bmod Brm S ww EA S'.
idecode_sh :
   (oper ww -> iinst) -> string N -> iinst -> string N' -> type.
idecode_sh_ :
   idecode_sh (\o:oper ww. I o) (/ B S) (I (oper_pcrel B'')) S
      <- asignextend B B'
      <- add B' 2_32 B'' B1.
idecode_m :
   binary 3' -> (eaddress ww -> iinst) -> string N -> iinst -> string N'
         -> type.
idecode_m_ :
   idecode_m Bopcode (\ea:eaddress ww. I ea) (/ Bmodrm S) (I EA) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm Bmod Brm S ww EA S'.
idecode_m16fp :
   binary 3' -> (eaddress 2' -> iinst) -> string N -> iinst -> string N'
         -> type.
idecode_m16fp_ :
   idecode_m16fp Bopcode (\ea:eaddress 2'. I ea) (/ Bmodrm S) (I EA) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm_esc Bmod Brm S 2' EA S'.
idecode_m32fp :
   binary 3' -> (eaddress ww -> iinst) -> string N -> iinst -> string N'
         -> type.
idecode_m32fp_ :
   idecode_m32fp Bopcode (\ea:eaddress ww. I ea) (/ Bmodrm S) (I EA) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm_esc Bmod Brm S ww EA S'.
idecode_m64fp :
   binary 3' -> (eaddress dw -> iinst) -> string N -> iinst -> string N'
         -> type.
idecode_m64fp_ :
   idecode_m64fp Bopcode (\ea:eaddress dw. I ea) (/ Bmodrm S) (I EA) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm_esc Bmod Brm S dw EA S'.
idecode_m80fp :
   binary 3' -> (eaddress 10' -> iinst) -> string N -> iinst -> string N'
         -> type.
idecode_m80fp_ :
   idecode_m80fp Bopcode (\ea:eaddress 10'. I ea) (/ Bmodrm S) (I EA) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm_esc Bmod Brm S 10' EA S'.
idecode_m8 :
   binary 3' -> (eaddress 1' -> iinst) -> string N -> iinst -> string N'
         -> type.
idecode_m8_ :
   idecode_m8 Bopcode (\ea:eaddress 1'. I ea) (/ Bmodrm S) (I EA) S'
      <- parse_modrm Bmodrm Bmod Bopcode Brm
      <- decode_modrm Bmod Brm S 1' EA S'.
idecode_r :
   binary 5' -> (eaddress ww -> iinst) -> string N -> iinst -> string N'
         -> type.
idecode_r_ :
   idecode_r Bopcode (\ea:eaddress ww. I ea) (/ Bc S) (I (eaddr_reg R)) S
      <- parse_53 Bc Bopcode B20
      <- decode_reg B20 R.
idecode* : string N -> iinst -> string N' -> type.
idecode_add_eax :
   idecode* (/ 05_8 S) I S'
      <- idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o)
            S I S'.
idecode_add_al :
   idecode* (/ 04_8 S) I S'
      <- idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o) S
            I S'.
idecode_add_mi :
   idecode* (/ 81_8 S) I S'
      <- idecode_mi 0_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o) S I S'.
idecode_add_mi8 :
   idecode* (/ 80_8 S) I S'
      <- idecode_mi8 0_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o) S I S'.
idecode_add_mib :
   idecode* (/ 83_8 S) I S'
      <- idecode_mib 0_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o) S I S'.
idecode_add_mr :
   idecode* (/ 01_8 S) I S'
      <- idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o) S
            I S'.
idecode_add_mr8 :
   idecode* (/ 00_8 S) I S'
      <- idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o)
            S I S'.
idecode_add_rm :
   idecode* (/ 03_8 S) I S'
      <- idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o) S
            I S'.
idecode_add_rm8 :
   idecode* (/ 02_8 S) I S'
      <- idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_add Nsz ea o)
            S I S'.
idecode_and_eax :
   idecode* (/ 25_8 S) I S'
      <- idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o)
            S I S'.
idecode_and_al :
   idecode* (/ 24_8 S) I S'
      <- idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o) S
            I S'.
idecode_and_mi :
   idecode* (/ 81_8 S) I S'
      <- idecode_mi 4_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o) S I S'.
idecode_and_mi8 :
   idecode* (/ 80_8 S) I S'
      <- idecode_mi8 4_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o) S I S'.
idecode_and_mib :
   idecode* (/ 83_8 S) I S'
      <- idecode_mib 4_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o) S I S'.
idecode_and_mr :
   idecode* (/ 21_8 S) I S'
      <- idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o) S
            I S'.
idecode_and_mr8 :
   idecode* (/ 20_8 S) I S'
      <- idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o)
            S I S'.
idecode_and_rm :
   idecode* (/ 23_8 S) I S'
      <- idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o) S
            I S'.
idecode_and_rm8 :
   idecode* (/ 22_8 S) I S'
      <- idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_and Nsz ea o)
            S I S'.
idecode_call_nr :
   idecode* (/ e8_8 S) I S' <- idecode_nr (\o:oper ww. ii_call o) S I S'.
idecode_call_nai :
   idecode* (/ ff_8 S) I S' <- idecode_nai 2_3 (\o:oper ww. ii_call o) S I S'.
idecode_cmp_eax :
   idecode* (/ 3d_8 S) I S'
      <- idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o)
            S I S'.
idecode_cmp_al :
   idecode* (/ 3c_8 S) I S'
      <- idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o) S
            I S'.
idecode_cmp_mi :
   idecode* (/ 81_8 S) I S'
      <- idecode_mi 7_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o) S I S'.
idecode_cmp_mi8 :
   idecode* (/ 80_8 S) I S'
      <- idecode_mi8 7_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o) S I S'.
idecode_cmp_mib :
   idecode* (/ 83_8 S) I S'
      <- idecode_mib 7_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o) S I S'.
idecode_cmp_mr :
   idecode* (/ 39_8 S) I S'
      <- idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o) S
            I S'.
idecode_cmp_mr8 :
   idecode* (/ 38_8 S) I S'
      <- idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o)
            S I S'.
idecode_cmp_rm :
   idecode* (/ 3b_8 S) I S'
      <- idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o) S
            I S'.
idecode_cmp_rm8 :
   idecode* (/ 3a_8 S) I S'
      <- idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_cmp Nsz ea o)
            S I S'.
idecode_f2xm1 : idecode* (/ d9_8 (/ f0_8 S)) ii_fnop S.
idecode_fabs : idecode* (/ d9_8 (/ e1_8 S)) ii_fnop S.
idecode_fadd32 :
   idecode* (/ d8_8 S) I S'
      <- idecode_m32fp 0_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fadd64 :
   idecode* (/ dc_8 S) I S'
      <- idecode_m64fp 0_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fadd_rt :
   idecode* (/ d8_8 S) I S' <- idecode_r 18_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fadd_tr :
   idecode* (/ dc_8 S) I S' <- idecode_r 18_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_faddp_tr :
   idecode* (/ de_8 S) I S' <- idecode_r 18_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fiadd32 :
   idecode* (/ da_8 S) I S'
      <- idecode_m32fp 0_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fiadd64 :
   idecode* (/ de_8 S) I S'
      <- idecode_m64fp 0_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fchs : idecode* (/ d9_8 (/ e0_8 S)) ii_fnop S.
idecode_fclex : idecode* (/ 9b_8 (/ db_8 (/ e2_8 S))) ii_fnop S.
idecode_fnclex : idecode* (/ db_8 (/ e2_8 S)) ii_fnop S.
idecode_fcmov1 : idecode* (/ da_8 (/ B S)) ii_fnop S <- parse_35 B 6_3 B1.
idecode_fcmov2 : idecode* (/ db_8 (/ B S)) ii_fnop S <- parse_35 B 6_3 B1.
idecode_fcom_tr :
   idecode* (/ d8_8 S) I S' <- idecode_r 1a_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fcomp_tr :
   idecode* (/ d8_8 S) I S' <- idecode_r 1b_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fcompp : idecode* (/ de_8 (/ d9_8 S)) ii_fnop S.
idecode_fcomi : idecode* (/ db_8 (/ B S)) ii_fstoreflags S <- parse_53 B 1e_5 B1.
idecode_fcomip : idecode* (/ df_8 (/ B S)) ii_fstoreflags S <- parse_53 B 1e_5 B1.
idecode_fucomi : idecode* (/ db_8 (/ B S)) ii_fstoreflags S <- parse_53 B 1d_5 B1.
idecode_fucomip :
   idecode* (/ df_8 (/ B S)) ii_fstoreflags S <- parse_53 B 1c_5 B1.
idecode_fcos : idecode* (/ d9_8 (/ ff_8 S)) ii_fnop S.
idecode_fdecstp : idecode* (/ d9_8 (/ f6_8 S)) ii_fnop S.
idecode_fdiv32 :
   idecode* (/ d8_8 S) I S'
      <- idecode_m32fp 6_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fdiv64 :
   idecode* (/ dc_8 S) I S'
      <- idecode_m64fp 6_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fdiv_rt :
   idecode* (/ d8_8 S) I S' <- idecode_r 1e_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fdiv_tr :
   idecode* (/ dc_8 S) I S' <- idecode_r 1f_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fdivp_tr :
   idecode* (/ de_8 S) I S' <- idecode_r 1f_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fidiv32 :
   idecode* (/ da_8 S) I S'
      <- idecode_m32fp 6_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fidiv64 :
   idecode* (/ de_8 S) I S'
      <- idecode_m64fp 6_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fdivr32 :
   idecode* (/ d8_8 S) I S'
      <- idecode_m32fp 7_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fdivr64 :
   idecode* (/ dc_8 S) I S'
      <- idecode_m64fp 7_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fdivr_rt :
   idecode* (/ d8_8 S) I S' <- idecode_r 1f_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fdivr_tr :
   idecode* (/ dc_8 S) I S' <- idecode_r 1e_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fdivrp_tr :
   idecode* (/ de_8 S) I S' <- idecode_r 1e_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fidivr32 :
   idecode* (/ da_8 S) I S'
      <- idecode_m32fp 7_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fidivr64 :
   idecode* (/ de_8 S) I S'
      <- idecode_m64fp 7_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_ffree : idecode* (/ dd_8 (/ B S)) ii_fnop S <- parse_53 B 18_5 B1.
idecode_ficom16 :
   idecode* (/ de_8 S) I S'
      <- idecode_m16fp 2_3 (\e:eaddress 2'. ii_fload 2' e) S I S'.
idecode_ficom32 :
   idecode* (/ da_8 S) I S'
      <- idecode_m32fp 2_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_ficomp16 :
   idecode* (/ de_8 S) I S'
      <- idecode_m16fp 3_3 (\e:eaddress 2'. ii_fload 2' e) S I S'.
idecode_ficomp32 :
   idecode* (/ da_8 S) I S'
      <- idecode_m32fp 3_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fild16 :
   idecode* (/ df_8 S) I S'
      <- idecode_m16fp 0_3 (\e:eaddress 2'. ii_fload 2' e) S I S'.
idecode_fild32 :
   idecode* (/ db_8 S) I S'
      <- idecode_m32fp 0_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fild64 :
   idecode* (/ df_8 S) I S'
      <- idecode_m64fp 5_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fincstp : idecode* (/ d9_8 (/ f7_8 S)) ii_fnop S.
idecode_finit : idecode* (/ 9b_8 (/ db_8 (/ e3_8 S))) ii_fnop S.
idecode_fninit : idecode* (/ db_8 (/ e3_8 S)) ii_fnop S.
idecode_fist16 :
   idecode* (/ df_8 S) I S'
      <- idecode_m16fp 2_3 (\e:eaddress 2'. ii_fstore 2' e) S I S'.
idecode_fist32 :
   idecode* (/ db_8 S) I S'
      <- idecode_m32fp 2_3 (\e:eaddress ww. ii_fstore ww e) S I S'.
idecode_fistp16 :
   idecode* (/ df_8 S) I S'
      <- idecode_m16fp 3_3 (\e:eaddress 2'. ii_fstore 2' e) S I S'.
idecode_fistp32 :
   idecode* (/ db_8 S) I S'
      <- idecode_m32fp 3_3 (\e:eaddress ww. ii_fstore ww e) S I S'.
idecode_fistp64 :
   idecode* (/ df_8 S) I S'
      <- idecode_m64fp 7_3 (\e:eaddress dw. ii_fstore dw e) S I S'.
idecode_fisttp16 :
   idecode* (/ df_8 S) I S'
      <- idecode_m16fp 1_3 (\e:eaddress 2'. ii_fstore 2' e) S I S'.
idecode_fisttp32 :
   idecode* (/ db_8 S) I S'
      <- idecode_m32fp 1_3 (\e:eaddress ww. ii_fstore ww e) S I S'.
idecode_fisttp64 :
   idecode* (/ dd_8 S) I S'
      <- idecode_m64fp 1_3 (\e:eaddress dw. ii_fstore dw e) S I S'.
idecode_fld32 :
   idecode* (/ d9_8 S) I S'
      <- idecode_m32fp 0_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fld64 :
   idecode* (/ dd_8 S) I S'
      <- idecode_m64fp 0_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fld80 :
   idecode* (/ db_8 S) I S'
      <- idecode_m80fp 5_3 (\e:eaddress 10'. ii_fload 10' e) S I S'.
idecode_fld_t :
   idecode* (/ d9_8 S) I S' <- idecode_r 18_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fld1 : idecode* (/ d9_8 (/ e8_8 S)) ii_fnop S.
idecode_fldl2t : idecode* (/ d9_8 (/ e9_8 S)) ii_fnop S.
idecode_fldl2e : idecode* (/ d9_8 (/ ea_8 S)) ii_fnop S.
idecode_fldpi : idecode* (/ d9_8 (/ eb_8 S)) ii_fnop S.
idecode_fldlg2 : idecode* (/ d9_8 (/ ec_8 S)) ii_fnop S.
idecode_fldln2 : idecode* (/ d9_8 (/ ed_8 S)) ii_fnop S.
idecode_fldz : idecode* (/ d9_8 (/ ee_8 S)) ii_fnop S.
idecode_fmul32 :
   idecode* (/ d8_8 S) I S'
      <- idecode_m32fp 1_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fmul64 :
   idecode* (/ dc_8 S) I S'
      <- idecode_m64fp 1_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fmul_rt :
   idecode* (/ d8_8 S) I S' <- idecode_r 19_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fmul_tr :
   idecode* (/ dc_8 S) I S' <- idecode_r 19_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fmulp_tr :
   idecode* (/ de_8 S) I S' <- idecode_r 19_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fimul32 :
   idecode* (/ da_8 S) I S'
      <- idecode_m32fp 1_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fimul64 :
   idecode* (/ de_8 S) I S'
      <- idecode_m64fp 1_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fnop : idecode* (/ d9_8 (/ d0_8 S)) ii_fnop S.
idecode_fpatan : idecode* (/ d9_8 (/ f3_8 S)) ii_fnop S.
idecode_fprem : idecode* (/ d9_8 (/ f8_8 S)) ii_fnop S.
idecode_fprem1 : idecode* (/ d9_8 (/ f5_8 S)) ii_fnop S.
idecode_fptan : idecode* (/ d9_8 (/ f2_8 S)) ii_fnop S.
idecode_frndint : idecode* (/ d9_8 (/ fc_8 S)) ii_fnop S.
idecode_fscale : idecode* (/ d9_8 (/ fd_8 S)) ii_fnop S.
idecode_fsin : idecode* (/ d9_8 (/ fe_8 S)) ii_fnop S.
idecode_fsincos : idecode* (/ d9_8 (/ fb_8 S)) ii_fnop S.
idecode_fsqrt : idecode* (/ d9_8 (/ fa_8 S)) ii_fnop S.
idecode_fst32 :
   idecode* (/ d9_8 S) I S'
      <- idecode_m32fp 2_3 (\e:eaddress ww. ii_fstore ww e) S I S'.
idecode_fst64 :
   idecode* (/ dd_8 S) I S'
      <- idecode_m64fp 2_3 (\e:eaddress dw. ii_fstore dw e) S I S'.
idecode_fst_t :
   idecode* (/ dd_8 S) I S' <- idecode_r 1a_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fstp32 :
   idecode* (/ d9_8 S) I S'
      <- idecode_m32fp 3_3 (\e:eaddress ww. ii_fstore ww e) S I S'.
idecode_fstp64 :
   idecode* (/ dd_8 S) I S'
      <- idecode_m64fp 3_3 (\e:eaddress dw. ii_fstore dw e) S I S'.
idecode_fstp80 :
   idecode* (/ db_8 S) I S'
      <- idecode_m80fp 7_3 (\e:eaddress 10'. ii_fstore 10' e) S I S'.
idecode_fstp_t :
   idecode* (/ dd_8 S) I S' <- idecode_r 1b_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fsub32 :
   idecode* (/ d8_8 S) I S'
      <- idecode_m32fp 4_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fsub64 :
   idecode* (/ dc_8 S) I S'
      <- idecode_m64fp 4_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fsub_rt :
   idecode* (/ d8_8 S) I S' <- idecode_r 1c_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fsub_tr :
   idecode* (/ dc_8 S) I S' <- idecode_r 1d_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fsubp_tr :
   idecode* (/ de_8 S) I S' <- idecode_r 1d_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fisub32 :
   idecode* (/ da_8 S) I S'
      <- idecode_m32fp 4_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fisub64 :
   idecode* (/ de_8 S) I S'
      <- idecode_m64fp 4_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fsubr32 :
   idecode* (/ d8_8 S) I S'
      <- idecode_m32fp 5_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fsubr64 :
   idecode* (/ dc_8 S) I S'
      <- idecode_m64fp 5_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_fsubr_rt :
   idecode* (/ d8_8 S) I S' <- idecode_r 1d_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fsubr_tr :
   idecode* (/ dc_8 S) I S' <- idecode_r 1c_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fsubrp_tr :
   idecode* (/ de_8 S) I S' <- idecode_r 1c_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fisubr32 :
   idecode* (/ da_8 S) I S'
      <- idecode_m32fp 5_3 (\e:eaddress ww. ii_fload ww e) S I S'.
idecode_fisubr64 :
   idecode* (/ de_8 S) I S'
      <- idecode_m64fp 5_3 (\e:eaddress dw. ii_fload dw e) S I S'.
idecode_ftst : idecode* (/ d9_8 (/ e4_8 S)) ii_fnop S.
idecode_fucom :
   idecode* (/ dd_8 S) I S' <- idecode_r 1c_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fucomp :
   idecode* (/ dd_8 S) I S' <- idecode_r 1d_5 (\ea:eaddress ww. ii_fnop) S I S'.
idecode_fucompp : idecode* (/ da_8 (/ e9_8 S)) ii_fnop S.
idecode_fxam : idecode* (/ d9_8 (/ e5_8 S)) ii_fnop S.
idecode_fxch : idecode* (/ d9_8 (/ B S)) ii_fnop S <- parse_53 B 19_5 B1.
idecode_fxtract : idecode* (/ d9_8 (/ f4_8 S)) ii_fnop S.
idecode_fyl2x : idecode* (/ d9_8 (/ f1_8 S)) ii_fnop S.
idecode_fyl2xp1 : idecode* (/ d9_8 (/ f9_8 S)) ii_fnop S.
idecode_jcc :
   idecode* (/ 0f_8 (/ Bc (/ B0 (/ B2 (/ B3 (/ B4 S)))))) (ii_jcc Icond (oper_pcrel B)) S
      <- parse_44 Bc 8_4 Bc'
      <- decode_cond Bc' Icond
      <- implode_word (/ B0 (/ B2 (/ B3 (/ B4 #)))) B'
      <- add B' 6_32 B B1.
idecode_jcc_sh :
   idecode* (/ Bc (/ B0 S)) (ii_jcc Icond (oper_pcrel B)) S
      <- parse_44 Bc 7_4 Bc'
      <- decode_cond Bc' Icond
      <- asignextend B0 B'
      <- add B' 2_32 B B1.
idecode_jecxz :
   idecode* (/ e3_8 S) I S' <- idecode_sh (\o:oper ww. ii_jecxz o) S I S'.
idecode_jmp_nr :
   idecode* (/ e9_8 S) I S' <- idecode_nr (\o:oper ww. ii_jmp o) S I S'.
idecode_jmp_nai :
   idecode* (/ ff_8 S) I S' <- idecode_nai 4_3 (\o:oper ww. ii_jmp o) S I S'.
idecode_jmp_sh :
   idecode* (/ eb_8 S) I S' <- idecode_sh (\o:oper ww. ii_jmp o) S I S'.
idecode_mov_mi :
   idecode* (/ c7_8 S) I S'
      <- idecode_mi 0_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_mov Nsz ea o) S I S'.
idecode_mov_mi8 :
   idecode* (/ c6_8 S) I S'
      <- idecode_mi8 0_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_mov Nsz ea o) S I S'.
idecode_mov_mr :
   idecode* (/ 89_8 S) I S'
      <- idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_mov Nsz ea o) S
            I S'.
idecode_mov_mr8 :
   idecode* (/ 88_8 S) I S'
      <- idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_mov Nsz ea o)
            S I S'.
idecode_mov_ri :
   idecode* (/ Bc (/ B0 (/ B1 (/ B2 (/ B3 S)))))
      (ii_mov ww (eaddr_reg R) (oper_imm (/ B0 (/ B1 (/ B2 (/ B3 #)))))) S
      <- parse_53 Bc 17_5 B20
      <- decode_reg B20 R.
idecode_mov_ri8 :
   idecode* (/ Bc (/ B0 S)) (ii_mov 1' EREG (oper_imm (/ B0 #))) S
      <- parse_53 Bc 16_5 B20
      <- decode_reg8 B20 EREG.
idecode_mov_rm :
   idecode* (/ 8b_8 S) I S'
      <- idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_mov Nsz ea o) S
            I S'.
idecode_mov_rm8 :
   idecode* (/ 8a_8 S) I S'
      <- idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_mov Nsz ea o)
            S I S'.
idecode_movsx :
   idecode* (/ 0f_8 (/ be_8 S)) I S'
      <- idecode_rm_oper8
            (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz.
                ii_movsx Ndsz Nosz ea o) S I S'.
idecode_movzx :
   idecode* (/ 0f_8 (/ b6_8 S)) I S'
      <- idecode_rm_oper8
            (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz.
                ii_movzx Ndsz Nosz ea o) S I S'.
idecode_or_eax :
   idecode* (/ 0d_8 S) I S'
      <- idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S
            I S'.
idecode_or_al :
   idecode* (/ 0c_8 S) I S'
      <- idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S
            I S'.
idecode_or_mi :
   idecode* (/ 81_8 S) I S'
      <- idecode_mi 1_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S I S'.
idecode_or_mi8 :
   idecode* (/ 80_8 S) I S'
      <- idecode_mi8 1_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S I S'.
idecode_or_mib :
   idecode* (/ 83_8 S) I S'
      <- idecode_mib 1_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S I S'.
idecode_or_mr :
   idecode* (/ 09_8 S) I S'
      <- idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S
            I S'.
idecode_or_mr8 :
   idecode* (/ 08_8 S) I S'
      <- idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S
            I S'.
idecode_or_rm :
   idecode* (/ 0b_8 S) I S'
      <- idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S
            I S'.
idecode_or_rm8 :
   idecode* (/ 0a_8 S) I S'
      <- idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_or Nsz ea o) S
            I S'.
idecode_nop : idecode* (/ 90_8 S) ii_nop S.
idecode_pop_m :
   idecode* (/ 8f_8 S) I S' <- idecode_m 0_3 (\ea:eaddress ww. ii_pop ea) S I S'.
idecode_pop_r :
   idecode* S I S' <- idecode_r 0b_5 (\ea:eaddress ww. ii_pop ea) S I S'.
idecode_push_i :
   idecode* (/ 68_8 (/ B0 (/ B1 (/ B2 (/ B3 S)))))
      (ii_push (oper_imm (/ B0 (/ B1 (/ B2 (/ B3 #)))))) S.
idecode_push_ib :
   idecode* (/ 6a_8 (/ B S)) (ii_push (oper_imm (/ B (/ 00_8 (/ 00_8 (/ 00_8 #)))))) S.
idecode_push_m :
   idecode* (/ ff_8 S) I S'
      <- idecode_m 6_3 (\ea:eaddress ww. ii_push (oper_rm ea)) S I S'.
idecode_push_r :
   idecode* S I S'
      <- idecode_r 0a_5 (\ea:eaddress ww. ii_push (oper_rm ea)) S I S'.
idecode_rcl_one :
   idecode* (/ d1_8 S) I S'
      <- idecode_m 2_3 (\ea:eaddress ww. ii_rcl ww ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_rcl_cl :
   idecode* (/ d3_8 S) I S'
      <- idecode_m 2_3
            (\ea:eaddress ww. ii_rcl ww ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_rcl_imm :
   idecode* (/ c1_8 S) I S'
      <- idecode_mi_oper8 2_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_rcl Nsz ea o) S I S'.
idecode_rcr_one :
   idecode* (/ d1_8 S) I S'
      <- idecode_m 3_3 (\ea:eaddress ww. ii_rcr ww ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_rcr_cl :
   idecode* (/ d3_8 S) I S'
      <- idecode_m 3_3
            (\ea:eaddress ww. ii_rcr ww ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_rcr_imm :
   idecode* (/ c1_8 S) I S'
      <- idecode_mi_oper8 3_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_rcr Nsz ea o) S I S'.
idecode_ret : idecode* (/ c3_8 S) ii_ret S.
idecode_rol_one :
   idecode* (/ d1_8 S) I S'
      <- idecode_m 0_3 (\ea:eaddress ww. ii_rol ww ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_rol_cl :
   idecode* (/ d3_8 S) I S'
      <- idecode_m 0_3
            (\ea:eaddress ww. ii_rol ww ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_rol_imm :
   idecode* (/ c1_8 S) I S'
      <- idecode_mi_oper8 0_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_rol Nsz ea o) S I S'.
idecode_ror_one :
   idecode* (/ d1_8 S) I S'
      <- idecode_m 1_3 (\ea:eaddress ww. ii_ror ww ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_ror_cl :
   idecode* (/ d3_8 S) I S'
      <- idecode_m 1_3
            (\ea:eaddress ww. ii_ror ww ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_ror_imm :
   idecode* (/ c1_8 S) I S'
      <- idecode_mi_oper8 1_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_ror Nsz ea o) S I S'.
idecode_sar_one8 :
   idecode* (/ d0_8 S) I S'
      <- idecode_m8 7_3 (\ea:eaddress 1'. ii_sar 1' ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_sar_cl8 :
   idecode* (/ d2_8 S) I S'
      <- idecode_m8 7_3
            (\ea:eaddress 1'. ii_sar 1' ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_sar_imm8 :
   idecode* (/ c0_8 S) I S'
      <- idecode_mi8_oper8 7_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_sar Nsz ea o) S I S'.
idecode_sar_one :
   idecode* (/ d1_8 S) I S'
      <- idecode_m 7_3 (\ea:eaddress ww. ii_sar ww ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_sar_cl :
   idecode* (/ d3_8 S) I S'
      <- idecode_m 7_3
            (\ea:eaddress ww. ii_sar ww ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_sar_imm :
   idecode* (/ c1_8 S) I S'
      <- idecode_mi_oper8 7_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_sar Nsz ea o) S I S'.
idecode_shl_one8 :
   idecode* (/ d0_8 S) I S'
      <- idecode_m8 4_3 (\ea:eaddress 1'. ii_shl 1' ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_shl_cl8 :
   idecode* (/ d2_8 S) I S'
      <- idecode_m8 4_3
            (\ea:eaddress 1'. ii_shl 1' ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_shl_imm8 :
   idecode* (/ c0_8 S) I S'
      <- idecode_mi8_oper8 4_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_shl Nsz ea o) S I S'.
idecode_shl_one :
   idecode* (/ d1_8 S) I S'
      <- idecode_m 4_3 (\ea:eaddress ww. ii_shl ww ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_shl_cl :
   idecode* (/ d3_8 S) I S'
      <- idecode_m 4_3
            (\ea:eaddress ww. ii_shl ww ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_shl_imm :
   idecode* (/ c1_8 S) I S'
      <- idecode_mi_oper8 4_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_shl Nsz ea o) S I S'.
idecode_shr_one8 :
   idecode* (/ d0_8 S) I S'
      <- idecode_m8 5_3 (\ea:eaddress 1'. ii_shr 1' ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_shr_cl8 :
   idecode* (/ d2_8 S) I S'
      <- idecode_m8 5_3
            (\ea:eaddress 1'. ii_shr 1' ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_shr_imm8 :
   idecode* (/ c0_8 S) I S'
      <- idecode_mi8_oper8 5_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_shr Nsz ea o) S I S'.
idecode_shr_one :
   idecode* (/ d1_8 S) I S'
      <- idecode_m 5_3 (\ea:eaddress ww. ii_shr ww ea (oper_imm (/ 01_8 #))) S I
            S'.
idecode_shr_cl :
   idecode* (/ d3_8 S) I S'
      <- idecode_m 5_3
            (\ea:eaddress ww. ii_shr ww ea (oper_rm (eaddr_reglow ecx))) S I S'.
idecode_shr_imm :
   idecode* (/ c1_8 S) I S'
      <- idecode_mi_oper8 5_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. ii_shr Nsz ea o) S I S'.
idecode_sub_eax :
   idecode* (/ 2d_8 S) I S'
      <- idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o)
            S I S'.
idecode_sub_al :
   idecode* (/ 2c_8 S) I S'
      <- idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o) S
            I S'.
idecode_sub_mi :
   idecode* (/ 81_8 S) I S'
      <- idecode_mi 5_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o) S I S'.
idecode_sub_mi8 :
   idecode* (/ 80_8 S) I S'
      <- idecode_mi8 5_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o) S I S'.
idecode_sub_mib :
   idecode* (/ 83_8 S) I S'
      <- idecode_mib 5_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o) S I S'.
idecode_sub_mr :
   idecode* (/ 29_8 S) I S'
      <- idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o) S
            I S'.
idecode_sub_mr8 :
   idecode* (/ 28_8 S) I S'
      <- idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o)
            S I S'.
idecode_sub_rm :
   idecode* (/ 2b_8 S) I S'
      <- idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o) S
            I S'.
idecode_sub_rm8 :
   idecode* (/ 2a_8 S) I S'
      <- idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_sub Nsz ea o)
            S I S'.
idecode_xor_eax :
   idecode* (/ 35_8 S) I S'
      <- idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o)
            S I S'.
idecode_xor_al :
   idecode* (/ 34_8 S) I S'
      <- idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o) S
            I S'.
idecode_xor_mi :
   idecode* (/ 81_8 S) I S'
      <- idecode_mi 6_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o) S I S'.
idecode_xor_mi8 :
   idecode* (/ 80_8 S) I S'
      <- idecode_mi8 6_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o) S I S'.
idecode_xor_mib :
   idecode* (/ 83_8 S) I S'
      <- idecode_mib 6_3
            (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o) S I S'.
idecode_xor_mr :
   idecode* (/ 31_8 S) I S'
      <- idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o) S
            I S'.
idecode_xor_mr8 :
   idecode* (/ 30_8 S) I S'
      <- idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o)
            S I S'.
idecode_xor_rm :
   idecode* (/ 33_8 S) I S'
      <- idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o) S
            I S'.
idecode_xor_rm8 :
   idecode* (/ 32_8 S) I S'
      <- idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. ii_xor Nsz ea o)
            S I S'.
idecode : string N -> iinst -> nat -> string N' -> type.
idecode_ : idecode S IN M S' <- idecode* S IN S' <- sum M N' N.
sectset : type.
sectnil : sectset.
sectcons : sectset <- sectset <- binary wwb <- binary wwb.
imember : binary wwb -> binary wwb -> sectset -> type.
imember_hit : imember Astart Aend (sectcons Astart Aend SS1).
imember_cons :
   imember Astart Aend (sectcons B1 B2 SS) <- imember Astart Aend SS.
inotmember : binary wwb -> sectset -> type.
inotmember_nil : inotmember B1 sectnil.
inotmember_cons :
   inotmember A (sectcons A' B1 SS) <- binary_neq A A' <- inotmember A SS.
ireachable : binary wwb -> binary wwb -> string N1 -> type.
ireachable_hit :
   ireachable Astart Aend (/ B0 (/ B3 (/ B4 (/ B5 S))))
      <- implode_word (/ B0 (/ B3 (/ B4 (/ B5 #)))) A
      <- add Astart B2 A zero
      <- add A B1 Aend zero.
ireachable_cons : ireachable Astart Aend (/ B S) <- ireachable Astart Aend S.
string_reachable : sectset -> string N1 -> type.
string_reachable_hit :
   string_reachable (sectcons Astart Aend SS1) S <- ireachable Astart Aend S.
string_reachable_cons :
   string_reachable (sectcons B1 B2 SS) S <- string_reachable SS S.
memory_reachable : sectset -> memory -> type.
memory_reachable_hit :
   memory_reachable SS (mcons Astart N1 (section_valid hs S) H)
      <- inotmember Astart SS
      <- string_reachable SS S.
memory_reachable_cons :
   memory_reachable SS (mcons B1 N1 SECT1 H) <- memory_reachable SS H.
regs_reachable : sectset -> regs N1 -> type.
regs_reachable_hit :
   regs_reachable SS (regs_cons S R1) <- string_reachable SS S.
regs_reachable_cons : regs_reachable SS (regs_cons S1 R) <- regs_reachable SS R.
stack_reachable : sectset -> memory -> regs numregs -> type.
stack_reachable_ :
   stack_reachable SS H R
      <- rload* R esp Sesp
      <- implode_word Sesp Aesp
      <- stack_section H Astart Nsize Sall
      <- add Astart Boffset Aesp zero
      <- represents Noffset Boffset
      <- index Noffset Sall S1 S
      <- string_reachable SS S.
state_reachable : sectset -> state -> type.
state_reachable_memory :
   state_reachable SS (state_ H R1 RF1 B1 OR1) <- memory_reachable SS H.
state_reachable_regs :
   state_reachable SS (state_ H1 R RF1 B1 OR1) <- regs_reachable SS R.
state_reachable_stack :
   state_reachable SS (state_ H R RF1 B1 OR1) <- stack_reachable SS H R.
inot_pointer : binary wwb -> binary wwb -> string N1 -> type.
inot_pointer_0 : inot_pointer B1 B2 #.
inot_pointer_1 : inot_pointer B1 B2 (/ B3 #).
inot_pointer_2 : inot_pointer B1 B2 (/ B3 (/ B4 #)).
inot_pointer_3 : inot_pointer B1 B2 (/ B3 (/ B4 (/ B5 #))).
inot_pointer_below :
   inot_pointer Astart Aend (/ B0 (/ B1 (/ B2 (/ B3 S))))
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) A
      <- add A Bdiff Astart zero
      <- is_nonzero Bdiff.
inot_pointer_above :
   inot_pointer Astart Aend (/ B0 (/ B1 (/ B2 (/ B3 S))))
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) A
      <- add Aend Bdiff A zero
      <- is_nonzero Bdiff.
iunreachable : binary wwb -> binary wwb -> string N1 -> type.
iunreachable_null : iunreachable B1 B2 #.
iunreachable_cons :
   iunreachable Astart Aend (/ B S)
      <- inot_pointer Astart Aend (/ B S)
      <- iunreachable Astart Aend S.
string_unreachable : sectset -> string N1 -> type.
string_unreachable_nil : string_unreachable sectnil S1.
string_unreachable_cons :
   string_unreachable (sectcons Astart Aend SS) S
      <- iunreachable Astart Aend S
      <- string_unreachable SS S.
memory_unreachable : sectset -> memory -> type.
memory_unreachable_nil : memory_unreachable SS1 mnil.
memory_unreachable_cons :
   memory_unreachable SS (mcons B1 N1 (section_valid hs S) H)
      <- string_unreachable SS S
      <- memory_unreachable SS H.
memory_unreachable_omit :
   memory_unreachable SS (mcons Astart N1 (section_valid hs S1) H)
      <- imember Astart B1 SS
      <- memory_unreachable SS H.
memory_unreachable_cs :
   memory_unreachable SS (mcons B1 N1 (section_valid cs S1) H)
      <- memory_unreachable SS H.
memory_unreachable_ss :
   memory_unreachable SS (mcons B1 N1 (section_valid ss S1) H)
      <- memory_unreachable SS H.
memory_unreachable_reserve :
   memory_unreachable SS (mcons B1 N1 (section_reserved RSECT1) H)
      <- memory_unreachable SS H.
regs_unreachable : sectset -> regs N1 -> type.
regs_unreachable_nil : regs_unreachable SS1 regs_nil.
regs_unreachable_cons :
   regs_unreachable SS (regs_cons S R)
      <- string_unreachable SS S
      <- regs_unreachable SS R.
stack_unreachable : sectset -> memory -> regs numregs -> type.
stack_unreachable_ :
   stack_unreachable SS H R
      <- rload* R esp Sesp
      <- implode_word Sesp Aesp
      <- stack_section H Astart Nsize Sall
      <- add Astart Boffset Aesp zero
      <- represents Noffset Boffset
      <- index Noffset Sall S1 S
      <- string_unreachable SS S.
state_unreachable : sectset -> state -> type.
state_unreachable_ :
   state_unreachable SS (state_ H R RF1 B1 OR1)
      <- memory_unreachable SS H
      <- regs_unreachable SS R
      <- stack_unreachable SS H R.
read_sectset : memory -> oracle -> sectset -> oracle -> type.
read_sectset_nil : read_sectset mnil OR sectnil OR.
read_sectset_ss :
   read_sectset (mcons B1 N1 (section_valid ss S1) H) OR SS OR'
      <- read_sectset H OR SS OR'.
read_sectset_cs :
   read_sectset (mcons B1 N1 (section_valid cs S1) H) OR SS OR'
      <- read_sectset H OR SS OR'.
read_sectset_keep :
   read_sectset (mcons B1 N1 (section_valid hs S1) H) OR LS OR''
      <- consume_bit OR zero OR'
      <- read_sectset H OR' LS OR''.
read_sectset_drop :
   read_sectset (mcons Astart Nsize (section_valid hs S1) H) OR
      (sectcons Astart Aend SS) OR''
      <- consume_bit OR one' OR'
      <- represents Nsize Bsize
      <- add Astart Bsize Aend zero
      <- read_sectset H OR' SS OR''.
read_sectset_reserved :
   read_sectset (mcons B1 N1 (section_reserved RSECT1) H) OR SS OR'
      <- read_sectset H OR SS OR'.
memory_collect : sectset -> memory -> memory -> type.
memory_collect_nil : memory_collect SS1 mnil mnil.
memory_collect_keep :
   memory_collect SS (mcons Astart Nsize SECT H) (mcons Astart Nsize SECT H')
      <- inotmember Astart SS
      <- memory_collect SS H H'.
memory_collect_drop :
   memory_collect SS (mcons Astart Nsize SECT H) H'
      <- imember Astart B1 SS
      <- memory_collect SS H H'.
icollect : state -> memory -> oracle -> type.
icollect_yes :
   icollect (state_ H R FR PC OR) H' OR'
      <- read_sectset H OR SS OR'
      <- state_unreachable SS (state_ H R FR PC OR')
      <- memory_collect SS H H'.
icollect_no :
   icollect (state_ H R FR PC OR) H OR'
      <- read_sectset H OR SS OR'
      <- state_reachable SS (state_ H R FR PC OR').
igc : state -> state -> type.
igc_ :
   igc (state_ H R FR PC OR) (state_ H' R FR PC OR')
      <- icollect (state_ H R FR PC OR) H' OR'.
load : state -> eaddress N -> string N -> type.
load_reg : load ST (eaddr_reg REG) W <- rload ST REG W.
load_reglow :
   load ST (eaddr_reglow REG) W0 <- rload ST REG W <- index 1' W W0 W123.
load_reghigh :
   load ST (eaddr_reghigh REG) W1
      <- rload ST REG W
      <- index 1' W W0 W123
      <- index 1' W123 W1 W23.
load_deref_z :
   load ST (eaddr_deref Base z N1 Disp N) S
      <- rload ST Base AW
      <- implode_word AW A
      <- add A Disp A' B1
      <- mload ST A' N S.
load_deref_s :
   load ST (eaddr_deref Base Scale Index Disp N) S
      <- nat_eq Scale (s N1)
      <- rload ST Base AW
      <- implode_word AW A
      <- rload ST Index BiW
      <- implode_word BiW Bi
      <- times Bi Scale Bsi
      <- add A Bsi A' B2
      <- add A' Disp A'' B1
      <- mload ST A'' N S.
load_abs_z : load ST (eaddr_abs z N1 A N) S <- mload ST A N S.
load_abs_s :
   load ST (eaddr_abs Scale Index A N) S
      <- nat_eq Scale (s N1)
      <- rload ST Index BiW
      <- implode_word BiW Bi
      <- times Bi Scale Bsi
      <- add A Bsi A' B1
      <- mload ST A' N S.
oload : state -> oper N -> string N -> type.
oload_rm : oload ST (oper_rm E) S <- load ST E S.
oload_imm : oload ST1 (oper_imm S) S.
oload_pcrel :
   oload ST (oper_pcrel B) S
      <- geteip ST A
      <- add A B A' B1
      <- implode_word S A'.
store : state -> eaddress N -> string N -> state -> type.
store_reg : store ST (eaddr_reg REG) W ST' <- rstore ST REG W ST'.
store_reglow :
   store ST (eaddr_reglow REG) BY ST'
      <- rload ST REG W
      <- index 1' W W0 W123
      <- index 1' W' BY W123
      <- rstore ST REG W' ST'.
store_reghigh :
   store ST (eaddr_reghigh REG) BY ST'
      <- rload ST REG W
      <- index 1' W W0 W123
      <- index 1' W123 W1 W23
      <- index 1' W123' BY W23
      <- index 1' W' W0 W123'
      <- rstore ST REG W' ST'.
store_deref_z :
   store ST (eaddr_deref Base z N2 Disp N1) S ST'
      <- rload ST Base AW
      <- implode_word AW A
      <- add A Disp A' B1
      <- mstore ST A' S ST'.
store_deref_s :
   store ST (eaddr_deref Base Scale Index Disp N1) S ST'
      <- nat_eq Scale (s N2)
      <- rload ST Base AW
      <- implode_word AW A
      <- rload ST Index BiW
      <- implode_word BiW Bi
      <- times Bi Scale Bsi
      <- add A Bsi A' B2
      <- add A' Disp A'' B1
      <- mstore ST A'' S ST'.
store_abs_z : store ST (eaddr_abs z N2 A N1) S ST' <- mstore ST A S ST'.
store_abs_s :
   store ST (eaddr_abs Scale Index Disp N1) S ST'
      <- nat_eq Scale (s N2)
      <- rload ST Index BiW
      <- implode_word BiW Bi
      <- times Bi Scale Bsi
      <- add Disp Bsi A' B1
      <- mstore ST A' S ST'.
fetch : state -> iinst -> type.
fetch_ :
   fetch ST I <- geteip ST A <- getmem ST H <- mload* H A S <- idecode S I N S1.
next : state -> binary wwb -> type.
next_ :
   next ST A'
      <- geteip ST A
      <- getmem ST H
      <- mload* H A S
      <- idecode S I N S1
      <- represents N B
      <- add A B A' B1.
transition : state -> state -> type.
transition* : iinst -> state -> state -> type.
transition_runfac : runfac N1 -> state -> state -> type.
trans_add :
   transition* (ii_add Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- binop iadd W1 W2 W3 RF
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- next ST A
      <- puteip ST2 A ST'.
trans_and :
   transition* (ii_and Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- binop iand W1 W2 W3 RF
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- next ST A
      <- puteip ST2 A ST'.
trans_call :
   transition* (ii_call O) ST ST'
      <- rload ST esp W
      <- implode_word W A
      <- add A1 4_32 A B4
      <- implode_word W1 A1
      <- getmem ST H
      <- stack_section H Astart Nsz Sstack
      <- represents Nsz Bsz
      <- add Astart Bsz Aend B3
      <- add Astart B2 A1 zero
      <- add A1 B1 Aend zero
      <- rstore ST esp W1 ST1
      <- next ST NA
      <- implode_word S NA
      <- mstore ST1 A1 S ST2
      <- oload ST2 O W2
      <- implode_word W2 CA
      <- puteip ST2 CA ST'.
trans_call_stopped :
   transition* (ii_call O) ST stopped
      <- rload ST esp W
      <- implode_word W A
      <- add A1 4_32 A B1
      <- getmem ST H
      <- trap_address H A1.
trans_cmp :
   transition* (ii_cmp Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- binop isub W1 W2 W3 RF
      <- store_result_flags ST RF ST1
      <- next ST A
      <- puteip ST1 A ST'.
trans_fload :
   transition* (ii_fload Nsz E) ST ST'
      <- load ST E S1
      <- next ST A
      <- puteip ST A ST'.
trans_fnop : transition* ii_fnop ST ST' <- next ST A <- puteip ST A ST'.
trans_fstore :
   transition* (ii_fstore Nsz E) ST ST'
      <- getoracle ST OR
      <- consume_string OR Nsz Signore OR1
      <- putoracle ST OR1 ST1
      <- store ST1 E Signore ST2
      <- next ST A
      <- puteip ST2 A ST'.
trans_fstoreflags :
   transition* ii_fstoreflags ST ST'
      <- getoracle ST OR
      <- consume_bit OR C OR1
      <- consume_bit OR1 Z OR2
      <- consume_bit OR2 S OR3
      <- consume_bit OR3 O OR4
      <- putoracle ST OR4 ST1
      <- putflags ST1 (flags_ C Z S O) ST2
      <- next ST A
      <- puteip ST2 A ST'.
trans_jecxz_take :
   transition* (ii_jecxz O) ST ST'
      <- rload ST ecx BW
      <- implode_word BW B
      <- is_zero B
      <- oload ST O W
      <- implode_word W A
      <- puteip ST A ST'.
trans_jecxz_skip :
   transition* (ii_jecxz O) ST ST'
      <- rload ST ecx BW
      <- implode_word BW B
      <- is_nonzero B
      <- next ST A
      <- puteip ST A ST'.
trans_jcc_take :
   transition* (ii_jcc Icond O) ST ST'
      <- icond_sat Icond ST
      <- oload ST O W
      <- implode_word W A
      <- puteip ST A ST'.
trans_jcc_skip :
   transition* (ii_jcc Icond O) ST ST'
      <- icond_unsat Icond ST
      <- next ST A
      <- puteip ST A ST'.
trans_jmp :
   transition* (ii_jmp O) ST ST'
      <- oload ST O W
      <- implode_word W A
      <- puteip ST A ST'.
trans_mov :
   transition* (ii_mov Nsz E O) ST ST'
      <- oload ST O W
      <- store ST E W ST1
      <- next ST A
      <- puteip ST1 A ST'.
trans_or :
   transition* (ii_or Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- binop ior W1 W2 W3 RF
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- next ST A
      <- puteip ST2 A ST'.
trans_nop : transition* ii_nop ST ST' <- next ST A <- puteip ST A ST'.
trans_pop :
   transition* (ii_pop E) ST ST'
      <- rload ST esp W
      <- implode_word W A
      <- mload ST A ww S
      <- add A 4_32 A1 B4
      <- getmem ST H
      <- stack_section H Astart Nsz Sstack
      <- represents Nsz Bsz
      <- add Astart Bsz Aend B3
      <- add Astart B2 A1 zero
      <- add A1 B1 Aend zero
      <- implode_word W1 A1
      <- rstore ST esp W1 ST1
      <- store ST1 E S ST2
      <- next ST NA
      <- puteip ST2 NA ST'.
trans_push :
   transition* (ii_push O) ST ST'
      <- rload ST esp W
      <- oload ST O S
      <- implode_word W A
      <- add A1 4_32 A B4
      <- implode_word W1 A1
      <- getmem ST H
      <- stack_section H Astart Nsz Sstack
      <- represents Nsz Bsz
      <- add Astart Bsz Aend B3
      <- add Astart B2 A1 zero
      <- add A1 B1 Aend zero
      <- rstore ST esp W1 ST1
      <- mstore ST1 A1 S ST2
      <- next ST NA
      <- puteip ST2 NA ST'.
trans_push_stopped :
   transition* (ii_push O) ST stopped
      <- rload ST esp W
      <- oload ST O S
      <- implode_word W A
      <- add A1 4_32 A B1
      <- getmem ST H
      <- trap_address H A1.
trans_rcl :
   transition* (ii_rcl Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- getflags ST F
      <- getoracle ST OR1
      <- shiftop ircl W1 F W2 OR1 W3 RF OR2
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- putoracle ST2 OR2 ST3
      <- next ST A
      <- puteip ST3 A ST'.
trans_rcr :
   transition* (ii_rcr Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- getflags ST F
      <- getoracle ST OR1
      <- shiftop ircr W1 F W2 OR1 W3 RF OR2
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- putoracle ST2 OR2 ST3
      <- next ST A
      <- puteip ST3 A ST'.
trans_rol :
   transition* (ii_rol Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- getflags ST F
      <- getoracle ST OR1
      <- shiftop irol W1 F W2 OR1 W3 RF OR2
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- putoracle ST2 OR2 ST3
      <- next ST A
      <- puteip ST3 A ST'.
trans_ror :
   transition* (ii_ror Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- getflags ST F
      <- getoracle ST OR1
      <- shiftop iror W1 F W2 OR1 W3 RF OR2
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- putoracle ST2 OR2 ST3
      <- next ST A
      <- puteip ST3 A ST'.
trans_ret :
   transition* ii_ret ST ST'
      <- rload ST esp W
      <- implode_word W A
      <- mload ST A ww S
      <- add A 4_32 A1 zero
      <- getmem ST H
      <- stack_section H Astart Nsz Sstack
      <- represents Nsz Bsz
      <- add Astart Bsz Aend B3
      <- add Astart B2 A1 zero
      <- add A1 B1 Aend zero
      <- implode_word W1 A1
      <- rstore ST esp W1 ST1
      <- implode_word S RA
      <- puteip ST1 RA ST'.
trans_ret_halt :
   transition* ii_ret ST stopped
      <- rload ST esp W
      <- implode_word W A
      <- getmem ST H
      <- stack_section H Astart Nsize S1
      <- represents Nsize Bsize
      <- add Astart Bsize A zero.
trans_shl :
   transition* (ii_shl Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- getflags ST F
      <- getoracle ST OR1
      <- shiftop ishl W1 F W2 OR1 W3 RF OR2
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- putoracle ST2 OR2 ST3
      <- next ST A
      <- puteip ST3 A ST'.
trans_sar :
   transition* (ii_sar Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- getflags ST F
      <- getoracle ST OR1
      <- shiftop isar W1 F W2 OR1 W3 RF OR2
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- putoracle ST2 OR2 ST3
      <- next ST A
      <- puteip ST3 A ST'.
trans_shr :
   transition* (ii_shr Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- getflags ST F
      <- getoracle ST OR1
      <- shiftop ishr W1 F W2 OR1 W3 RF OR2
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- putoracle ST2 OR2 ST3
      <- next ST A
      <- puteip ST3 A ST'.
trans_sub :
   transition* (ii_sub Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- binop isub W1 W2 W3 RF
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- next ST A
      <- puteip ST2 A ST'.
trans_xor :
   transition* (ii_xor Nsz E O) ST ST'
      <- load ST E W1
      <- oload ST O W2
      <- binop ixor W1 W2 W3 RF
      <- store ST E W3 ST1
      <- store_result_flags ST1 RF ST2
      <- next ST A
      <- puteip ST2 A ST'.
trans_malloc :
   transition_runfac irf_malloc ST ST'
      <- igc ST ST1
      <- rload ST1 eax Wsize
      <- implode_word Wsize Bsize
      <- represents Nsize Bsize
      <- getoracle ST1 OR
      <- consume_string OR Nsize Sdk OR1
      <- putoracle ST1 OR1 ST2
      <- mextend ST2 hs Sdk ST3 Addr one'
      <- implode_word Wptr Addr
      <- rstore ST3 eax Wptr ST4
      <- transition* ii_ret ST4 ST'.
trans_malloc_stopped :
   transition_runfac irf_malloc ST stopped
      <- igc ST ST1
      <- rload ST1 eax Wsize
      <- implode_word Wsize Bsize
      <- represents Nsize Bsize
      <- getoracle ST1 OR
      <- consume_string OR Nsize Sdk OR1
      <- putoracle ST1 OR1 ST2
      <- mextend ST2 hs Sdk stopped Addr zero.
trans_mallocarr :
   transition_runfac irf_mallocarr ST ST'
      <- igc ST ST1
      <- rload ST1 eax Wlength
      <- implode_word Wlength Blength
      <- represents Nlength Blength
      <- rload ST1 ecx Wval
      <- string_exp Wval Nlength Snew
      <- mextend ST1 hs Snew ST2 Addr one'
      <- implode_word Wptr Addr
      <- rstore ST2 eax Wptr ST4
      <- transition* ii_ret ST4 ST'.
trans_mallocarr_st :
   transition_runfac irf_mallocarr ST stopped
      <- igc ST ST1
      <- rload ST1 eax Wlength
      <- implode_word Wlength Blength
      <- represents Nlength Blength
      <- rload ST1 ecx Wval
      <- string_exp Wval Nlength Snew
      <- mextend ST1 hs Snew stopped Addr zero.
transition_ : transition ST ST' <- fetch ST IN <- transition* IN ST ST'.
transition_runtime :
   transition ST ST'
      <- at_runtime_address ST IRF
      <- transition_runfac IRF ST ST'.
trans_stopped : transition stopped stopped.
astring : type.
## : astring.
| : astring <- astring <- binary bw.
astring_to_string : astring -> string N -> type.
astring_to_string_nil : astring_to_string ## #.
astring_to_string_cons :
   astring_to_string (| B AS) (/ B S) <- astring_to_string AS S.
initial_code : astring -> memory -> memory -> binary wwb -> type.
initial_code_ :
   initial_code AScode H1 H2 Acodestart
      <- astring_to_string AScode Scode
      <- represents Ncodelen Bcodelen
      <- nat_eq Ncodelen (s N1)
      <- add Acodestart Bcodelen Acodeend zero
      <- is_valid_addr H1 Acodestart Acodeend
      <- mextend* H1 Acodestart (section_valid cs Scode) H2.
initial_stack : memory -> memory -> string ww -> type.
initial_stack_ :
   initial_stack H1 H3 Wesp
      <- represents Nstack_size Bstack_size
      <- nat_eq Nstack_size (s N1)
      <- add overflow_lim Bstack_size Bstack_size_w_overflow zero
      <- add Aoverflow_page Bstack_size_w_overflow Astackend zero
      <- is_valid_addr H1 Aoverflow_page Astackend
      <- represents Noverflow_lim overflow_lim
      <- mextend* H1 Aoverflow_page (section_reserved rsection_trappage) H2
      <- add Aoverflow_page overflow_lim Astack zero
      <- mextend* H2 Astack (section_valid ss Sstack) H3
      <- add Astack Bstack_size Aesp zero
      <- implode_word Wesp Aesp.
initial_got : memory -> memory -> string ww -> type.
got_size : nat = 8'.
initial_got_ :
   initial_got H1 H4 Wgotptr
      <- represents Nmalloc_size Bmalloc_size
      <- nat_eq Nmalloc_size (s N2)
      <- add Amalloc Bmalloc_size Amallocend zero
      <- is_valid_addr H1 Amalloc Amallocend
      <- mextend* H1 Amalloc (section_reserved (rsection_runtime irf_malloc)) H2
      <- implode_word Wmalloc Amalloc
      <- represents Nmallocarr_size Bmallocarr_size
      <- nat_eq Nmallocarr_size (s N1)
      <- add Amallocarr Bmallocarr_size Amallocarrend zero
      <- is_valid_addr H2 Amallocarr Amallocarrend
      <- mextend* H2 Amallocarr
            (section_reserved (rsection_runtime irf_mallocarr)) H3
      <- implode_word Wmallocarr Amallocarr
      <- represents got_size Bgotsize
      <- add Agot Bgotsize Agotend zero
      <- is_valid_addr H3 Agot Agotend
      <- index ww Sgot Wmalloc Wmallocarr
      <- mextend* H3 Agot (section_valid cs Sgot) H4
      <- implode_word Wgotptr Agot.
initial_state : astring -> state -> type.
initial_state_ :
   initial_state AScode
      (state_ H4
          (regs_cons S1
              (regs_cons S2
                  (regs_cons S3
                      (regs_cons Wgotptr
                          (regs_cons S4
                              (regs_cons S5
                                  (regs_cons S6 (regs_cons Wesp regs_nil))))))))
          (flags_ B1 B2 B3 B4) Aeip OR)
      <- represents N1024 1024_32
      <- initial_code AScode
            (mcons 0_32 N1024 (section_reserved rsection_reserved) mnil) H2 Aeip
      <- initial_stack H2 H3 Wesp
      <- initial_got H3 H4 Wgotptr.
reaches : astring -> state -> type.
reaches_z : reaches AS ST <- initial_state AS ST.
reaches_s : reaches AS ST2 <- reaches AS ST1 <- transition ST1 ST2.
certificate : type.
check : certificate -> astring -> type.
safety :
   Pi CERT1:certificate. Pi AS:astring. Pi ST:state. Pi ST':state.
      check CERT1 AS -> reaches AS ST -> transition ST ST' -> type.
bytebits : nat = 8'.
wordsize : nat = 4'.
regcount : nat = 7'.
endian : type.
bigend : endian.
littleend : endian.
theend : endian = littleend.
wordbits : nat
   = s
        (s
            (s
                (s
                    (s
                        (s
                            (s
                                (s
                                    (s
                                        
(s
    (s
        (s
            (s
                (s
                    (s
                        (s
                            (s
                                (s
                                    (s
                                        
(s (s (s (s (s (s (s (s (s (s (s (s (s z))))))))))))))))))))))))))))))).
product_wordbits :
   product wordsize bytebits
      (s
          (s
              (s
                  (s
                      (s
                          (s
                              (s
                                  (s
                                      (s
                                          
(s
    (s
        (s
            (s
                (s
                    (s
                        (s
                            (s
                                (s
                                    (s
                                        
(s (s (s (s (s (s (s (s (s (s (s (s (s z))))))))))))))))))))))))))))))))
   = product_s
        (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
        (product_s
            (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
            (product_s
                (sum_s
                    (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
                (product_s
                    (sum_s
                        (sum_s
                            (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
                    product_z))).
product_bytebits : product 1' bytebits bytebits
   = product_s
        (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
        product_z.
2bytebits : nat = s (s (s (s (s (s (s (s bytebits))))))).
sum_2_bytes : sum bytebits bytebits (s (s (s (s (s (s (s (s bytebits))))))))
   = sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))).
3bytebits : nat
   = s (s (s (s (s (s (s (s (s (s (s (s (s (s (s (s bytebits))))))))))))))).
sum_3_bytes :
   sum 2bytebits bytebits
      (s (s (s (s (s (s (s (s (s (s (s (s (s (s (s (s bytebits))))))))))))))))
   = sum_s
        (sum_s
            (sum_s
                (sum_s
                    (sum_s
                        (sum_s
                            (sum_s
                                (sum_s
                                    (sum_s
                                        
(sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))))))))).
sum_4_bytes : sum 3bytebits bytebits wordbits
   = sum_s
        (sum_s
            (sum_s
                (sum_s
                    (sum_s
                        (sum_s
                            (sum_s
                                (sum_s
                                    (sum_s
                                        
(sum_s
    (sum_s
        (sum_s
            (sum_s
                (sum_s
                    (sum_s
                        (sum_s
                            (sum_s
                                (sum_s
                                    (sum_s
                                        (sum_s
                                            (sum_s (sum_s (sum_s (sum_s sum_z))))))))))))))))))))))).
product_2bytebits : product 2' bytebits 2bytebits
   = product_s
        (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
        (product_s
            (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
            product_z).
product_3bytebits : product 3' bytebits 3bytebits
   = product_s
        (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
        (product_s
            (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
            (product_s
                (sum_s
                    (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
                product_z)).
kind : type.
tp : type.
pred : type.
rtp : type.
prop : type.
effect : type.
reg : type.
rg : reg <- nat.
loc : type.
lc : loc <- nat.
pc : type.
pc_ : pc <- nat <- loc.
cond : type.
cond_eq : cond.
cond_neq : cond.
cond_lt : cond.
cond_lte : cond.
cond_gt : cond.
cond_gte : cond.
cond_slt : cond.
cond_slte : cond.
cond_sgt : cond.
cond_sgte : cond.
cond_sign : cond.
cond_nsign : cond.
cond_ov : cond.
cond_nov : cond.
kt : kind.
knum : kind.
kloc : kind.
karrow : kind <- kind <- kind.
kprod : kind <- kind <- kind.
kforall : kind <- (kind -> kind).
ksum : kind <- kind <- kind.
krec : kind <- (kind -> kind).
rtrue : pred <- kind.
rtd : pred.
rtn : pred <- tp.
rarrow : pred <- pred <- pred.
rprod : pred <- pred <- pred.
rforall : pred <- (kind -> pred -> pred).
rsum : pred <- pred <- pred.
rrec : pred <- (kind -> pred -> pred).
b0 : tp.
b1 : tp.
seteq : tp <- tp <- nat.
prod : tp <- tp <- tp.
exp : tp <- tp <- tp.
code : tp <- rtp <- pc.
arrow : tp <- rtp.
cbox : tp <- tp <- tp.
cmbox : tp <- tp <- tp.
sptr : tp <- tp.
forall : tp <- (tp -> tp) <- pred <- kind.
exists : tp <- (tp -> tp) <- pred <- kind.
guard : tp <- tp <- prop.
assert : tp <- tp <- prop.
rec : tp <- (tp -> tp).
meet : tp <- tp <- tp.
join : tp <- tp <- tp.
ns : tp.
void : tp <- nat.
gotptr : tp.
numlit : tp <- nat.
number : tp <- binary N1.
numadd : tp <- tp <- tp.
nummul : tp <- tp <- tp.
location : tp <- loc.
annot : tp <- kind <- pred <- tp.
lam : tp <- (tp -> tp) <- kind.
app : tp <- tp <- tp.
pair : tp <- tp <- tp.
pi1 : tp <- tp.
pi2 : tp <- tp.
klam : tp <- (kind -> pred -> tp).
kapp : tp <- pred <- kind <- tp.
in1 : tp <- kind <- tp.
in2 : tp <- kind <- tp.
case : tp <- (tp -> tp) <- (tp -> tp) <- kind <- kind <- kind <- tp.
roll : tp <- tp <- (kind -> kind).
unroll : tp <- tp.
rtp* : nat -> type.
rtnil : rtp* z.
rtcons : rtp* (s N) <- rtp* N <- tp.
rt : rtp <- rtp* regcount <- tp.
rti : nat -> pred = \n:nat. rtn (numlit n).
rtt : pred = rtrue kt.
rt1 : pred = rti 1'.
rtw : pred = rti wordsize.
wordnum : tp = numlit wordsize.
succ : tp -> tp = \t:tp. numadd (numlit 1') t.
inti : nat -> tp = \n:nat. exp b1 (numlit n).
int : tp = inti wordsize.
nsi : nat -> tp = \n:nat. exp ns (numlit n).
nsw : tp = nsi wordsize.
top' : tp = exists kt (rtrue kt) (\t:tp. t).
box : tp -> tp = \t:tp. cbox b0 t.
mbox : tp -> tp = \t:tp. cmbox b0 t.
theta : kind -> tp
   = \k:kind.
        app
           (lam (krec (\k':kind. karrow k' (karrow (karrow k k) k)))
               (\x:tp.
                   lam (karrow k k) (\f:tp. app f (app (app (unroll x) x) f))))
           (roll (\k':kind. karrow k' (karrow (karrow k k) k))
               (lam (krec (\k':kind. karrow k' (karrow (karrow k k) k)))
                   (\x:tp.
                       lam (karrow k k)
                          (\f:tp. app f (app (app (unroll x) x) f))))).
diverge : Pi K:kind. kind -> tp
   = \K:kind. \k:kind. app (theta K) (lam k (\t:tp. t)).
tp_exp : tp -> nat -> tp -> type.
tp_exp_z : tp_exp T 0' b0.
tp_exp_s : tp_exp T (s N) (prod T T') <- tp_exp T N T'.
pimpl : prop <- prop <- prop.
pand : prop <- prop <- prop.
por : prop <- prop <- prop.
pfalse : prop.
pnumeq : prop <- tp <- tp.
pnumleq : prop <- tp <- tp.
goodloc : prop <- tp.
ploclt : prop <- tp <- tp.
good : tp -> prop = \t:tp. pnumeq t t.
pnumlt : tp -> tp -> prop = \t1:tp. \t2:tp. pnumleq (succ t1) t2.
plocneq : tp -> tp -> prop = \t1:tp. \t2:tp. por (ploclt t1 t2) (ploclt t2 t1).
setlt : nat -> tp -> tp
   = \n:nat. \t:tp.
        exists knum (rtrue knum) (\t':tp. assert (pnumlt t' t) (seteq n t')).
setgt : nat -> tp -> tp
   = \n:nat. \t:tp.
        exists knum (rtrue knum) (\t':tp. assert (pnumlt t t') (seteq n t')).
setlt_1024 : tp = setlt wordsize (number 1024_32).
% pon : pred -> kind -> type.
kof : tp -> kind -> type.
rtpok : rtp -> type.
effok : effect -> type.
propok : prop -> type.
pon : pred -> kind -> type.
pon_true : pon (rtrue K) K.
pon_td : pon rtd kt.
pon_tn : pon (rtn T) kt <- kof T knum.
pon_arrow : pon (rarrow R1 R2) (karrow K1 K2) <- pon R1 K1 <- pon R2 K2.
pon_prod : pon (rprod R1 R2) (kprod K1 K2) <- pon R1 K1 <- pon R2 K2.
pon_forall :
   pon (rforall (\k:kind. \r:pred. R k r)) (kforall (\k:kind. K k))
      <- (Pi k:kind. Pi r:pred. pon r k -> pon (R k r) (K k)).
pon_sum : pon (rsum R1 R2) (ksum K1 K2) <- pon R1 K1 <- pon R2 K2.
pon_rec :
   pon (rrec (\k:kind. \r:pred. R k r)) (krec (\k:kind. K k))
      <- (Pi k:kind. Pi r:pred. pon r k -> pon (R k r) (K k)).
kof_annot : kof (annot T R K) K <- pon R K <- kof T K.
kof_lam :
   kof (lam K1 (\t:tp. T t)) (karrow K1 K2)
      <- (Pi t:tp. kof t K1 -> kof (T t) K2).
kof_app : kof (app T1 T2) K2 <- kof T1 (karrow K1 K2) <- kof T2 K1.
kof_pair : kof (pair T1 T2) (kprod K1 K2) <- kof T1 K1 <- kof T2 K2.
kof_pi1 : kof (pi1 T) K1 <- kof T (kprod K1 K2).
kof_pi2 : kof (pi2 T) K2 <- kof T (kprod K1 K2).
kof_klam :
   kof (klam (\k:kind. \r:pred. T k r)) (kforall (\k:kind. K k))
      <- (Pi k:kind. Pi r:pred. pon r k -> kof (T k r) (K k)).
kof_kapp :
   kof (kapp T K' R') (K K') <- pon R' K' <- kof T (kforall (\k:kind. K k)).
kof_in1 : kof (in1 T K2) (ksum K1 K2) <- kof T K1.
kof_in2 : kof (in2 T K1) (ksum K1 K2) <- kof T K2.
kof_case :
   kof (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) K
      <- kof T' (ksum K1 K2)
      <- (Pi t:tp. kof t K1 -> kof (T1 t) K)
      <- (Pi t:tp. kof t K2 -> kof (T2 t) K).
kof_roll :
   kof (roll (\k:kind. K k) T') (krec (\k:kind. K k))
      <- kof T' (K (krec (\k:kind. K k))).
kof_unroll :
   kof (unroll T') (K (krec (\k:kind. K k))) <- kof T' (krec (\k:kind. K k)).
kof_b0 : kof b0 kt.
kof_b1 : kof b1 kt.
kof_seteq : kof (seteq N T') kt <- kof T' knum.
kof_prod : kof (prod T1 T2) kt <- kof T1 kt <- kof T2 kt.
kof_exp : kof (exp T' BT) kt <- kof T' kt <- kof BT knum.
kof_code : kof (code PC G) kt <- rtpok G.
kof_arrow : kof (arrow G) kt <- rtpok G.
kof_cbox : kof (cbox T1 T2) kt <- kof T1 kt <- kof T2 kt.
kof_cmbox : kof (cmbox T1 T2) kt <- kof T1 kt <- kof T2 kt.
kof_sptr : kof (sptr T') kt <- kof T' kt.
kof_forall :
   kof (forall K R (\t:tp. T' t)) kt
      <- pon R K
      <- (Pi t:tp. kof t K -> kof (T' t) kt).
kof_exists :
   kof (exists K R (\t:tp. T' t)) kt
      <- pon R K
      <- (Pi t:tp. kof t K -> kof (T' t) kt).
kof_guard : kof (guard P T') kt <- propok P <- kof T' kt.
kof_assert : kof (assert P T') kt <- propok P <- kof T' kt.
kof_rec : kof (rec (\t:tp. T' t)) kt <- (Pi t:tp. kof t kt -> kof (T' t) kt).
kof_meet : kof (meet T1 T2) kt <- kof T1 kt <- kof T2 kt.
kof_join : kof (join T1 T2) kt <- kof T1 kt <- kof T2 kt.
kof_ns : kof ns kt.
kof_void : kof (void N1) kt.
kof_gotptr : kof gotptr kt.
kof_number : kof (number B) knum.
kof_numlit : kof (numlit N) knum.
kof_numadd : kof (numadd N1 N2) knum <- kof N1 knum <- kof N2 knum.
kof_nummul : kof (nummul N1 N2) knum <- kof N1 knum <- kof N2 knum.
kof_location : kof (location L) kloc.
rtpok* : rtp* N1 -> type.
rtpok_nil : rtpok* rtnil.
rtpok_cons : rtpok* (rtcons T' G) <- kof T' kt <- rtpok* G.
rtpok_ : rtpok (rt ZT G) <- kof ZT kt <- rtpok* G.
propok_impl : propok (pimpl P1 P2) <- propok P1 <- propok P2.
propok_and : propok (pand P1 P2) <- propok P1 <- propok P2.
propok_or : propok (por P1 P2) <- propok P1 <- propok P2.
propok_false : propok pfalse.
propok_numeq : propok (pnumeq T1 T2) <- kof T1 knum <- kof T2 knum.
propok_numleq : propok (pnumleq T1 T2) <- kof T1 knum <- kof T2 knum.
propok_goodloc : propok (goodloc T') <- kof T' kloc.
propok_loclt : propok (ploclt T1 T2) <- kof T1 kloc <- kof T2 kloc.
pon_ti : Pi N:nat. pon (rti N) kt = \N:nat. pon_tn kof_numlit.
kof_inti : Pi N:nat. kof (inti N) kt = \N:nat. kof_exp kof_numlit kof_b1.
kof_int : kof int kt = kof_inti _.
kof_nsw : kof nsw kt = kof_exp kof_numlit kof_ns.
kof_top : kof top' kt = kof_exists (\t:tp. \d:kof t kt. d) pon_true.
kof_box : Pi T':tp. kof T' kt -> kof (box T') kt
   = \T':tp. \d:kof T' kt. kof_cbox d kof_b0.
kof_mbox : Pi T':tp. kof T' kt -> kof (mbox T') kt
   = \T':tp. \d:kof T' kt. kof_cmbox d kof_b0.
kof_theta : Pi K1:kind. kof (theta K1) (karrow (karrow K1 K1) K1)
   = \K1:kind.
        kof_app
           (kof_roll
               (kof_lam
                   (\t:tp.
                       \x:kof t
                             (krec
                                 (\k':kind. karrow k' (karrow (karrow K1 K1) K1))).
                       kof_lam
                          (\t2:tp. \x1:kof t2 (karrow K1 K1).
                              kof_app (kof_app x1 (kof_app x (kof_unroll x))) x1))))
           (kof_lam
               (\t:tp.
                   \x:kof t
                         (krec (\k':kind. karrow k' (karrow (karrow K1 K1) K1))).
                   kof_lam
                      (\t1:tp. \x1:kof t1 (karrow K1 K1).
                          kof_app (kof_app x1 (kof_app x (kof_unroll x))) x1))).
kof_diverge : Pi K1:kind. kof (diverge _ K1) K1
   = \K1:kind.
        kof_app (kof_lam (\t:tp. \x:kof t K1. x))
           (kof_app
               (kof_roll
                   (kof_lam
                       (\t:tp.
                           \x:kof t
                                 (krec
                                     (\k':kind.
                                         karrow k' (karrow (karrow K1 K1) K1))).
                           kof_lam
                              (\t2:tp. \x1:kof t2 (karrow K1 K1).
                                  kof_app
                                     (kof_app x1 (kof_app x (kof_unroll x))) x1))))
               (kof_lam
                   (\t:tp.
                       \x:kof t
                             (krec
                                 (\k':kind. karrow k' (karrow (karrow K1 K1) K1))).
                       kof_lam
                          (\t1:tp. \x1:kof t1 (karrow K1 K1).
                              kof_app (kof_app x1 (kof_app x (kof_unroll x))) x1)))).
kof_succ : Pi T':tp. kof T' knum -> kof (succ T') knum
   = \T':tp. \d:kof T' knum. kof_numadd d kof_numlit.
propok_good : Pi T':tp. kof T' knum -> propok (good T')
   = \T':tp. \d:kof T' knum. propok_numeq d d.
propok_numlt :
   Pi T2:tp. Pi T1:tp. kof T2 knum -> kof T1 knum -> propok (pnumlt T1 T2)
   = \T2:tp. \T1:tp. \d2:kof T2 knum. \d1:kof T1 knum.
        propok_numleq d2 (kof_succ _ d1).
propok_locneq :
   Pi T2:tp. Pi T1:tp. kof T2 kloc -> kof T1 kloc -> propok (plocneq T1 T2)
   = \T2:tp. \T1:tp. \d2:kof T2 kloc. \d1:kof T1 kloc.
        propok_or (propok_loclt d1 d2) (propok_loclt d2 d1).
kof_setlt : Pi T':tp. Pi N:nat. kof T' knum -> kof (setlt N T') kt
   = \T':tp. \N:nat. \d:kof T' knum.
        kof_exists
           (\t:tp. \d':kof t knum. kof_assert (kof_seteq d') (propok_numlt _ _ d d'))
           pon_true.
kof_setgt : Pi T':tp. Pi N:nat. kof T' knum -> kof (setgt N T') kt
   = \T':tp. \N:nat. \d:kof T' knum.
        kof_exists
           (\t:tp. \d':kof t knum. kof_assert (kof_seteq d') (propok_numlt _ _ d' d))
           pon_true.
rtlookup : rtp -> reg -> tp -> type.
rtlookup* : rtp* N1 -> nat -> tp -> type.
rtlookup_z : rtlookup* (rtcons T' G1) z T'.
rtlookup_s : rtlookup* (rtcons T1 G) (s N) T' <- rtlookup* G N T'.
rtlookup_ : rtlookup (rt T1 G) (rg N) T' <- rtlookup* G N T'.
ztlookup : rtp -> tp -> type.
ztlookup_ : ztlookup (rt ZT G1) ZT.
rtupdate : rtp -> reg -> tp -> rtp -> type.
rtupdate* : rtp* N -> nat -> tp -> rtp* N -> type.
rtupdate_z : rtupdate* (rtcons T1 G) z T' (rtcons T' G).
rtupdate_s :
   rtupdate* (rtcons T G) (s N) T' (rtcons T G') <- rtupdate* G N T' G'.
rtupdate_ : rtupdate (rt ZT G) (rg N) T' (rt ZT G') <- rtupdate* G N T' G'.
ztupdate : rtp -> tp -> rtp -> type.
ztupdate_ : ztupdate (rt T1 G) ZT (rt ZT G).
cond_tp : nat -> cond -> tp -> tp -> tp -> type.
cond_tp_eq : cond_tp N cond_eq BT (seteq N BT) (join (setlt N BT) (setgt N BT)).
cond_tp_neq :
   cond_tp N cond_neq BT (join (setlt N BT) (setgt N BT)) (seteq N BT).
cond_tp_lt : cond_tp N cond_lt BT (setlt N BT) (join (seteq N BT) (setgt N BT)).
cond_tp_lte :
   cond_tp N cond_lte BT (join (setlt N BT) (seteq N BT)) (setgt N BT).
cond_tp_gt : cond_tp N cond_gt BT (setgt N BT) (join (setlt N BT) (seteq N BT)).
cond_tp_gte :
   cond_tp N cond_gte BT (join (seteq N BT) (setgt N BT)) (setlt N BT).
cond_tp_slt : cond_tp N cond_slt T1 (inti N) (inti N).
cond_tp_slte : cond_tp N cond_slte T1 (inti N) (inti N).
cond_tp_sgt : cond_tp N cond_sgt T1 (inti N) (inti N).
cond_tp_sgte : cond_tp N cond_sgte T1 (inti N) (inti N).
cond_tp_sign : cond_tp N cond_sign T1 (inti N) (inti N).
cond_tp_nsign : cond_tp N cond_nsign T1 (inti N) (inti N).
cond_tp_ov : cond_tp N cond_ov T1 (inti N) (inti N).
cond_tp_nov : cond_tp N cond_nov T1 (inti N) (inti N).
ptp : type.
'val : type.
'operand : type.
'dest : type.
'code : type.
block : type.
body : type.
program : type.
proof : type.
coercion : type.
ptpnil : ptp.
ptpcons : ptp <- ptp <- tp.
prf_auto : proof.
prf_impli : proof <- (proof -> proof).
prf_imple : proof <- proof <- proof <- prop.
prf_andi : proof <- proof <- proof.
prf_ande1 : proof <- proof <- prop.
prf_ande2 : proof <- proof <- prop.
qid : coercion.
qcompose : coercion <- coercion <- coercion.
qinv : coercion <- coercion <- tp.
qprod : coercion <- coercion <- coercion.
qcbox : coercion <- coercion <- coercion.
qcmbox : coercion <- coercion <- coercion.
qforall : coercion <- (tp -> coercion).
qexists : coercion <- (tp -> coercion).
qapp : coercion <- tp.
qpack : coercion <- (tp -> tp) <- pred <- kind <- tp.
qsatisfy : coercion <- proof.
qexp : coercion <- tp <- coercion.
qsptr : coercion <- coercion.
qjoin_elim : coercion <- coercion <- coercion.
qmeet_intro : coercion <- coercion <- coercion.
qsubrange_eqlt : coercion <- binary N1.
qsubrange_eqgt : coercion <- binary N1.
qjoin : coercion <- coercion <- coercion.
qarrow : coercion <- coercion <- tp <- reg.
qarrowsp : coercion <- coercion <- tp.
qany : coercion <- tp.
qforget : coercion.
qforgetm : coercion.
qroll : coercion <- tp.
qunroll : coercion.
qlassoc : coercion.
qrassoc : coercion.
qluniti : coercion.
qruniti : coercion.
qlunite : coercion.
qrunite : coercion.
qljoini : coercion <- tp.
qrjoini : coercion <- tp.
qimplode : coercion <- tp.
qexplode : coercion.
qforget_seteq : coercion.
qmeet_dist_join : coercion.
qraa_lt : coercion.
qraa_gt : coercion.
qrmeete : coercion.
qlmeete : coercion.
qjoin_lassoc : coercion.
qjoin_rassoc : coercion.
qjoin_commute : coercion.
qbox : coercion -> coercion = \q:coercion. qcbox qid q.
qmbox : coercion -> coercion = \q:coercion. qcmbox qid q.
qfocus : coercion.
qforget_setlt : coercion.
qforget_setgt : coercion.
qpartition : coercion <- nat.
qraa_ltgt : coercion.
qtrichotomy : coercion <- tp.
qprod_dist_join1 : coercion.
qprod_dist_join2 : coercion.
tplist : type.
tp_nil : tplist.
tp_cons : tplist <- tplist <- tp.
prod_tp_list : tplist -> tp -> type.
prod_tp_list_nil : prod_tp_list tp_nil b0.
prod_tp_list_cons :
   prod_tp_list (tp_cons T TL) (prod T T') <- prod_tp_list TL T'.
natlist : type.
nat_nil : natlist.
nat_cons : natlist <- natlist <- nat.
sumlist : natlist -> nat -> type.
sumlist_nil : sumlist nat_nil z.
sumlist_cons : sumlist (nat_cons N NL) M <- sumlist NL M1 <- sum N M1 M.
'val_list : type.
'val_nil : 'val_list.
'val_cons : 'val_list <- 'val_list <- 'val.
'nonempty_val_list : type.
'nonempty_val_one : 'nonempty_val_list <- 'val.
'nonempty_val_cons : 'nonempty_val_list <- 'nonempty_val_list <- 'val.
'lit : 'val <- binary bytebits.
'junk : 'val.
'sing : 'val <- binary N1 <- nat.
'vcoerce : 'val <- 'val <- coercion.
'lam : 'val <- (tp -> 'val) <- pred <- kind.
'array : 'val <- 'val_list.
'hom_array : 'val <- 'nonempty_val_list.
'null : 'val.
'labref : 'operand <- nat.
'im : 'operand <- 'val.
'rco : 'operand <- reg.
'mco : 'operand <- nat <- 'operand <- nat.
'imco : 'operand <- nat <- 'operand <- nat <- 'operand <- nat.
'zco : 'operand <- nat <- nat <- 'operand <- nat.
'spco : 'operand.
'proj : 'operand <- nat <- 'operand <- nat.
'rnbyte : 'operand <- nat <- reg <- coercion.
'combine : 'operand <- 'operand <- 'operand.
'ocoerce : 'operand <- 'operand <- coercion.
'rdest : 'dest <- reg.
'mdest : 'dest <- nat <- 'operand <- nat.
'imdest : 'dest <- nat <- 'operand <- nat <- 'operand <- nat.
'spdest : 'dest <- nat.
'zdest : 'dest <- nat <- nat <- 'operand <- nat.
'projdest : 'dest <- nat <- 'dest <- 'operand <- nat.
'rnbytedest : 'dest <- nat <- reg <- coercion <- coercion.
'codenil : 'code.
'fallthru : 'code <- coercion.
'i_add : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_and : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_addsptr : 'code <- 'code <- nat <- 'operand <- 'dest.
'i_bz : 'code <- 'code <- 'operand <- 'operand.
'i_call : 'code <- 'code <- 'operand.
'i_callpr : 'code <- 'code <- 'operand.
'i_cmp : 'code <- 'code <- 'operand <- 'operand <- nat.
'i_cmpjcc :
   'code
      <- 'code
      <- coercion
      <- coercion
      <- reg
      <- 'operand
      <- 'operand
      <- 'operand
      <- 'operand
      <- 'operand
      <- cond
      <- nat.
'i_cmpjcc2 : 'code <- 'code <- 'operand <- 'operand <- 'operand <- cond <- nat.
'i_concertgetargs : 'code <- 'code <- 'dest <- 'operand.
'i_concertreturn : 'code <- 'code <- 'operand <- 'operand.
'i_concertforward : 'code <- 'code <- 'operand <- 'operand.
'i_concertspawn : 'code <- 'code <- 'operand <- 'operand <- 'dest <- 'operand.
'i_halt : 'code <- 'code.
'i_jcc : 'code <- 'code <- 'operand <- cond.
'i_jmp : 'code <- 'code <- 'operand.
'i_malloc : 'code <- 'code <- 'operand <- natlist <- 'dest <- 'operand.
'i_mallocarr :
   'code <- 'code <- 'operand <- 'operand <- nat <- 'dest <- 'operand.
'i_mov : 'code <- 'code <- 'operand <- 'dest.
'i_movsx : 'code <- 'code <- 'operand <- 'dest <- nat.
'i_movzx : 'code <- 'code <- 'operand <- 'dest <- nat.
'i_nop : 'code <- 'code.
'i_not : 'code <- 'code <- 'operand <- 'dest <- nat.
'i_or : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_pop : 'code <- 'code <- 'dest <- nat.
'i_push : 'code <- 'code <- 'operand.
'i_pushrel : 'code <- 'code <- 'operand.
'i_ret : 'code <- 'code.
'i_rcl : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_rol : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_rcr : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_ror : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_shl : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_sar : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_shr : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_salloc : 'code <- 'code <- natlist.
'i_sfree : 'code <- 'code <- nat.
'i_sub : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_subjae : 'code <- 'code <- 'operand <- 'operand <- 'operand <- reg.
'i_xor : 'code <- 'code <- 'operand <- 'operand <- 'dest <- nat.
'i_claim : 'code <- (proof -> 'code) <- proof <- prop.
'i_coerce : 'code <- 'code <- coercion <- reg.
'i_coercesp : 'code <- 'code <- coercion.
'i_unpack : 'code <- (tp -> 'code) <- reg.
'i_endinit : 'code <- 'code.
'i_letpair : 'code <- (tp -> tp -> 'code) <- tp.
'i_letroll : 'code <- (tp -> 'code) <- tp.
'i_vcase1 : 'code <- (tp -> 'code) <- 'operand.
'i_vcase2 : 'code <- (tp -> 'code) <- 'operand.
runtime_string_type : tp
   = exists knum (rtrue knum)
        (\x:tp.
            box
               (prod (seteq wordsize x)
                   (prod (box (exp (prod (inti 1') b0) x)) b0))).
runtime_stringarray_type : tp
   = exists knum (rtrue knum)
        (\x:tp.
            box
               (prod (seteq wordsize x)
                   (prod (mbox (exp (prod runtime_string_type b0) x)) b0))).
block_lam : block <- (tp -> block) <- pred <- kind.
block_guard : block <- (proof -> block) <- prop.
block_code : block <- 'code.
block_val : block <- 'val.
program_nil : program.
program_cons : program <- program <- block <- tp.
replace : tp -> tp -> type.
whnf : tp -> tp -> type.
whnf_annot : whnf (annot T R1 K1) T' <- whnf T T'.
whnf_elim_app : tp -> tp -> tp -> type.
whnf_elim_app_lam :
   whnf_elim_app (lam K1 (\t:tp. T1 t)) T2 T' <- whnf (T1 T2) T'.
whnf_elim_app_ : whnf_elim_app T1 T2 (app T1 T2).
whnf_app : whnf (app T1 T2) T' <- whnf T1 T1' <- whnf_elim_app T1' T2 T'.
whnf_elim_pi1 : tp -> tp -> type.
whnf_elim_pi1_pair : whnf_elim_pi1 (pair T1 T2) T' <- whnf T1 T'.
whnf_elim_pi1_ : whnf_elim_pi1 T' (pi1 T').
whnf_pi1 : whnf (pi1 T1) T' <- whnf T1 T1' <- whnf_elim_pi1 T1' T'.
whnf_elim_pi2 : tp -> tp -> type.
whnf_elim_pi2_pair : whnf_elim_pi2 (pair T1 T2) T' <- whnf T2 T'.
whnf_elim_pi2_ : whnf_elim_pi2 T' (pi2 T').
whnf_pi2 : whnf (pi2 T1) T' <- whnf T1 T1' <- whnf_elim_pi2 T1' T'.
whnf_elim_kapp : tp -> kind -> pred -> tp -> type.
whnf_elim_kapp_klam :
   whnf_elim_kapp (klam (\k:kind. \r:pred. T1 k r)) K R T' <- whnf (T1 K R) T'.
whnf_elim_kapp_ : whnf_elim_kapp T' K R (kapp T' K R).
whnf_kapp : whnf (kapp T1 K R) T' <- whnf T1 T1' <- whnf_elim_kapp T1' K R T'.
whnf_elim_case :
   tp -> kind -> kind -> kind -> (tp -> tp) -> (tp -> tp) -> tp -> type.
whnf_elim_case_in1 :
   whnf_elim_case (in1 T0 K1) K2 K3 K4 (\t:tp. T1 t) (\t:tp. T2 t) T'
      <- whnf (T1 T0) T'.
whnf_elim_case_in2 :
   whnf_elim_case (in2 T0 K1) K2 K3 K4 (\t:tp. T1 t) (\t:tp. T2 t) T'
      <- whnf (T2 T0) T'.
whnf_elim_case_ :
   whnf_elim_case T0 K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)
      (case T0 K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)).
whnf_case :
   whnf (case T0 K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) T'
      <- whnf T0 T0'
      <- whnf_elim_case T0' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t) T'.
whnf_elim_unroll : tp -> tp -> type.
whnf_elim_unroll_roll :
   whnf_elim_unroll (roll (\k:kind. K1 k) T) T' <- whnf T T'.
whnf_elim_unroll_ : whnf_elim_unroll T' (unroll T').
whnf_unroll : whnf (unroll T1) T' <- whnf T1 T1' <- whnf_elim_unroll T1' T'.
whnf_replace : whnf T T' <- replace T T'.
whnf_nonelim : whnf T' T'.
check_equiv : tp -> tp -> type.
check_equiv_whnf : tp -> tp -> type.
check_equiv_rigid : tp -> tp -> type.
check_equiv_rtp : rtp -> rtp -> type.
check_equiv_rtp* : rtp* N -> rtp* N -> type.
check_equiv_prop : prop -> prop -> type.
check_equiv_pred : pred -> pred -> type.
check_equiv_reflex : check_equiv T' T'.
check_equiv_norm :
   check_equiv T1 T2 <- whnf T1 T1' <- whnf T2 T2' <- check_equiv_whnf T1' T2'.
check_equiv_reflex2 : check_equiv_whnf T' T'.
check_equiv_seteq :
   check_equiv_whnf (seteq N T1) (seteq N T2) <- check_equiv T1 T2.
check_equiv_prod :
   check_equiv_whnf (prod T1a T1b) (prod T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_exp :
   check_equiv_whnf (exp T1a T1b) (exp T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_arrow :
   check_equiv_whnf (arrow G1) (arrow G2) <- check_equiv_rtp G1 G2.
check_equiv_cbox :
   check_equiv_whnf (cbox T1a T1b) (cbox T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_cmbox :
   check_equiv_whnf (cmbox T1a T1b) (cmbox T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_sptr : check_equiv_whnf (sptr T1) (sptr T2) <- check_equiv T1 T2.
check_equiv_forall :
   check_equiv_whnf (forall K R1 (\t:tp. T1 t)) (forall K R2 (\t:tp. T2 t))
      <- check_equiv_pred R1 R2
      <- (Pi t:tp. check_equiv (T1 t) (T2 t)).
check_equiv_exists :
   check_equiv_whnf (exists K R1 (\t:tp. T1 t)) (exists K R2 (\t:tp. T2 t))
      <- check_equiv_pred R1 R2
      <- (Pi t:tp. check_equiv (T1 t) (T2 t)).
check_equiv_guard :
   check_equiv_whnf (guard P1 T1) (guard P2 T2)
      <- check_equiv_prop P1 P2
      <- check_equiv T1 T2.
check_equiv_assert :
   check_equiv_whnf (assert P1 T1) (assert P2 T2)
      <- check_equiv_prop P1 P2
      <- check_equiv T1 T2.
check_equiv_meet :
   check_equiv_whnf (meet T1a T1b) (meet T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_join :
   check_equiv_whnf (join T1a T1b) (join T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_lam :
   check_equiv_whnf (lam K1 (\t:tp. T1 t)) (lam K2 (\t:tp. T2 t))
      <- (Pi t:tp. check_equiv (T1 t) (T2 t)).
check_equiv_lam* :
   check_equiv_whnf (lam K1 (\t:tp. T1 t)) T2
      <- (Pi t:tp. check_equiv (T1 t) (app T2 t)).
check_equiv_*lam :
   check_equiv_whnf T1 (lam K1 (\t:tp. T2 t))
      <- (Pi t:tp. check_equiv (app T1 t) (T2 t)).
check_equiv_app :
   check_equiv_whnf (app T1a T1b) (app T2a T2b)
      <- check_equiv_rigid T1a T2a
      <- check_equiv T1b T2b.
check_equiv_pair :
   check_equiv_whnf (pair T1a T1b) (pair T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_pair* :
   check_equiv_whnf (pair T1a T1b) T2
      <- check_equiv T1a (pi1 T2)
      <- check_equiv T1b (pi2 T2).
check_equiv_*pair :
   check_equiv_whnf T1 (pair T2a T2b)
      <- check_equiv (pi1 T1) T2a
      <- check_equiv (pi2 T1) T2b.
check_equiv_pi1 : check_equiv_whnf (pi1 T1) (pi1 T2) <- check_equiv_rigid T1 T2.
check_equiv_pi2 : check_equiv_whnf (pi2 T1) (pi2 T2) <- check_equiv_rigid T1 T2.
check_equiv_klam :
   check_equiv_whnf (klam (\k:kind. \r:pred. T1 k r))
      (klam (\k:kind. \r:pred. T2 k r))
      <- (Pi k:kind. Pi r:pred. check_equiv (T1 k r) (T2 k r)).
check_equiv_klam* :
   check_equiv_whnf (klam (\k:kind. \r:pred. T1 k r)) T2
      <- (Pi k:kind. Pi r:pred. check_equiv (T1 k r) (kapp T2 k r)).
check_equiv_*klam :
   check_equiv_whnf T1 (klam (\k:kind. \r:pred. T2 k r))
      <- (Pi k:kind. Pi r:pred. check_equiv (kapp T1 k r) (T2 k r)).
check_equiv_kapp :
   check_equiv_whnf (kapp T1 K R1) (kapp T2 K R2)
      <- check_equiv_rigid T1 T2
      <- check_equiv_pred R1 R2.
check_equiv_in1 : check_equiv_whnf (in1 T1 K1) (in1 T2 K2) <- check_equiv T1 T2.
check_equiv_in2 : check_equiv_whnf (in2 T1 K1) (in2 T2 K2) <- check_equiv T1 T2.
check_equiv_case :
   check_equiv_whnf (case T1 K1 K2 K (\t:tp. T1a t) (\t:tp. T1b t))
      (case T2 K1 K2 K (\t:tp. T2a t) (\t:tp. T2b t))
      <- check_equiv_rigid T1 T2
      <- (Pi t:tp. check_equiv (T1a t) (T2a t))
      <- (Pi t:tp. check_equiv (T1b t) (T2b t)).
check_equiv_roll :
   check_equiv_whnf (roll (\k:kind. K k) T1) (roll (\k:kind. K k) T2)
      <- check_equiv T1 T2.
check_equiv_roll* :
   check_equiv_whnf (roll (\k:kind. K k) T1) T2 <- check_equiv T1 (unroll T2).
check_equiv_*roll :
   check_equiv_whnf T1 (roll (\k:kind. K k) T2) <- check_equiv (unroll T1) T2.
check_equiv_unroll :
   check_equiv_whnf (unroll T1) (unroll T2) <- check_equiv_rigid T1 T2.
check_equivr_app :
   check_equiv_rigid (app T1a T1b) (app T2a T2b)
      <- check_equiv_rigid T1a T2a
      <- check_equiv T1b T2b.
check_equivr_pi1 :
   check_equiv_rigid (pi1 T1) (pi1 T2) <- check_equiv_rigid T1 T2.
check_equivr_pi2 :
   check_equiv_rigid (pi2 T1) (pi2 T2) <- check_equiv_rigid T1 T2.
check_equivr_kapp :
   check_equiv_rigid (kapp T1 K R1) (kapp T2 K R2)
      <- check_equiv_rigid T1 T2
      <- check_equiv_pred R1 R2.
check_equivr_case :
   check_equiv_rigid (case T1 K1 K2 K (\t:tp. T1a t) (\t:tp. T1b t))
      (case T2 K1 K2 K (\t:tp. T2a t) (\t:tp. T2b t))
      <- check_equiv_rigid T1 T2
      <- (Pi t:tp. check_equiv (T1a t) (T2a t))
      <- (Pi t:tp. check_equiv (T1b t) (T2b t)).
check_equivr_unroll :
   check_equiv_rigid (unroll T1) (unroll T2) <- check_equiv_rigid T1 T2.
check_equivr_var : check_equiv_rigid T' T'.
check_equiv_rtp_nil : check_equiv_rtp* rtnil rtnil.
check_equiv_rtp_cons :
   check_equiv_rtp* (rtcons T1 G1) (rtcons T2 G2)
      <- check_equiv T1 T2
      <- check_equiv_rtp* G1 G2.
check_equiv_rtp_ :
   check_equiv_rtp (rt T1 G1) (rt T2 G2)
      <- check_equiv T1 T2
      <- check_equiv_rtp* G1 G2.
check_equiv_prop_reflex : check_equiv_prop P P.
check_equiv_prop_impl :
   check_equiv_prop (pimpl P1a P1b) (pimpl P2a P2b)
      <- check_equiv_prop P1a P2a
      <- check_equiv_prop P1b P2b.
check_equiv_prop_and :
   check_equiv_prop (pand P1a P1b) (pand P2a P2b)
      <- check_equiv_prop P1a P2a
      <- check_equiv_prop P1b P2b.
check_equiv_prop_or :
   check_equiv_prop (por P1a P1b) (por P2a P2b)
      <- check_equiv_prop P1a P2a
      <- check_equiv_prop P1b P2b.
check_equiv_prop_numeq :
   check_equiv_prop (pnumeq T1a T1b) (pnumeq T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_prop_numleq :
   check_equiv_prop (pnumleq T1a T1b) (pnumleq T2a T2b)
      <- check_equiv T1a T2a
      <- check_equiv T1b T2b.
check_equiv_pred_true : check_equiv_pred (rtrue K1) (rtrue K2).
check_equiv_pred_td : check_equiv_pred rtd rtd.
check_equiv_pred_tn : check_equiv_pred (rtn T1) (rtn T2) <- check_equiv T1 T2.
check_equiv_pred_arrow :
   check_equiv_pred (rarrow R1a R1b) (rarrow R2a R2b)
      <- check_equiv_pred R1a R2a
      <- check_equiv_pred R1b R2b.
check_equiv_pred_prod :
   check_equiv_pred (rprod R1a R1b) (rprod R2a R2b)
      <- check_equiv_pred R1a R2a
      <- check_equiv_pred R1b R2b.
check_equiv_pred_forall :
   check_equiv_pred (rforall (\k:kind. \r:pred. R1 k r))
      (rforall (\k:kind. \r:pred. R2 k r))
      <- (Pi k:kind. Pi r:pred. check_equiv_pred (R1 k r) (R2 k r)).
check_equiv_pred_sum :
   check_equiv_pred (rsum R1a R1b) (rsum R2a R2b)
      <- check_equiv_pred R1a R2a
      <- check_equiv_pred R1b R2b.
check_equiv_pred_rec :
   check_equiv_pred (rrec (\k:kind. \r:pred. R1 k r))
      (rrec (\k:kind. \r:pred. R2 k r))
      <- (Pi k:kind. Pi r:pred. check_equiv_pred (R1 k r) (R2 k r)).
hyp : proof -> prop -> type.
proves : proof -> prop -> type.
deduce : prop -> type.
proves_auto : proves prf_auto P <- deduce P.
proves_hyp : proves PR P <- hyp PR P' <- check_equiv_prop P' P.
proves_impli :
   proves (prf_impli (\pr:proof. PR pr)) (pimpl P1 P2)
      <- (Pi pr:proof. hyp pr P1 -> proves (PR pr) P2).
proves_imple :
   proves (prf_imple P' PR1 PR2) P
      <- propok P'
      <- proves PR1 (pimpl P' P)
      <- proves PR2 P'.
proves_andi :
   proves (prf_andi PR1 PR2) (pand P1 P2) <- proves PR1 P1 <- proves PR2 P2.
proves_ande1 : proves (prf_ande1 P' PR) P <- propok P' <- proves PR (pand P P').
proves_ande2 : proves (prf_ande2 P' PR) P <- propok P' <- proves PR (pand P' P).
simpnum : tp -> nat -> type.
simpnum_number : simpnum (number B) N <- infer_represents B N.
simpnum_numlit : simpnum (numlit N) N.
simpnum_numadd :
   simpnum (numadd TN1 TN2) N1+N2
      <- simpnum TN1 N1
      <- simpnum TN2 N2
      <- sum N1 N2 N1+N2.
simpnum_nummul :
   simpnum (nummul TN1 TN2) N1*N2
      <- simpnum TN1 N1
      <- simpnum TN2 N2
      <- product N1 N2 N1*N2.
deduce_hyp : deduce P <- hyp PR1 P.
deduce_impl : deduce (pimpl P1 P2) <- (Pi pr:proof. hyp pr P1 -> deduce P2).
deduce_and : deduce (pand P1 P2) <- deduce P1 <- deduce P2.
deduce_numeq_bin : deduce (pnumeq (number B) (number B)).
deduce_numeq : deduce (pnumeq N1 N2) <- simpnum N1 M <- simpnum N2 M.
check_entails : pred -> pred -> type.
check_entails_reflex : check_entails R R.
check_entails_true : check_entails R (rtrue K).
check_entails_ti_td : check_entails (rtn T1) rtd.
check_entails_tn :
   check_entails (rtn TN) (rtn TN') <- deduce (pimpl (good TN) (pnumeq TN TN')).
check_entails_arrow :
   check_entails (rarrow R1 R2) (rarrow R1' R2')
      <- check_entails R1' R1
      <- check_entails R2 R2'.
check_entails_prod :
   check_entails (rprod R1 R2) (rprod R1' R2')
      <- check_entails R1 R1'
      <- check_entails R2 R2'.
check_entails_sum :
   check_entails (rsum R1 R2) (rsum R1' R2')
      <- check_entails R1 R1'
      <- check_entails R2 R2'.
infer_app : pred -> pred -> pred -> type.
infer_app_ : infer_app (rarrow R1 R2) R1 R2.
infer_app_t : infer_app (rtrue (karrow K1 K2)) (rtrue K1) (rtrue K2).
infer_pi : pred -> pred -> pred -> type.
infer_pi_ : infer_pi (rprod R1 R2) R1 R2.
infer_pi_t : infer_pi (rtrue (kprod K1 K2)) (rtrue K1) (rtrue K2).
infer_kapp : pred -> kind -> pred -> pred -> type.
infer_kapp_ : infer_kapp (rforall (\k:kind. \r:pred. R k r)) K' R' (R K' R').
infer_kapp_t : infer_kapp (rtrue (kforall (\k:kind. K k))) K' R1 (rtrue (K K')).
infer_unroll : (kind -> kind) -> pred -> pred -> type.
infer_unroll_ :
   infer_unroll (\k:kind. K k) (rrec (\k:kind. \r:pred. R k r))
      (R (krec (\k:kind. K k)) (rrec (\k:kind. \r:pred. R k r))).
infer_unroll_t :
   infer_unroll (\k:kind. K k) (rtrue (krec (\k:kind. K k)))
      (rtrue (K (krec (\k:kind. K k)))).
infer_prod : pred -> pred -> pred -> type.
infer_prod_t_t : infer_prod rtt rtt rtt.
infer_prod_t_td : infer_prod rtt rtd rtt.
infer_prod_t_ti : infer_prod rtt (rtn T1) rtt.
infer_prod_td_t : infer_prod rtd rtt rtt.
infer_prod_td_td : infer_prod rtd rtd rtd.
infer_prod_td_ti : infer_prod rtd (rtn T1) rtd.
infer_prod_ti_t : infer_prod (rtn T1) rtt rtt.
infer_prod_ti_td : infer_prod (rtn T1) rtd rtd.
infer_prod_ti_ti : infer_prod (rtn TN1) (rtn TN2) (rtn (numadd TN1 TN2)).
infer_exp : pred -> tp -> pred -> type.
infer_exp_t : infer_exp rtt T1 rtt.
infer_exp_td : infer_exp rtd T1 rtd.
infer_exp_ti :
   infer_exp (rtn TN1) TN2 (rtn (nummul TN2 TN1)) <- deduce (good TN1).
infer_forall : pred -> pred -> type.
infer_forall_t : infer_forall rtt rtt.
infer_forall_td : infer_forall rtd rtd.
infer_forall_ti : infer_forall (rtn TN) (rtn TN).
infer_exists : pred -> pred -> type.
infer_exists_t : infer_exists rtt rtt.
infer_exists_td : infer_exists rtd rtt.
infer_exists_ti : infer_exists (rtn TN) (rtn TN).
infer_guard : pred -> prop -> pred -> type.
infer_guard_td : infer_guard rtd P rtd <- deduce P.
infer_guard_ti : infer_guard (rtn TN) P (rtn TN) <- deduce P.
infer_guard_t : infer_guard R1 P1 rtt.
infer_assert : pred -> pred -> type.
infer_assert_t : infer_assert rtt rtt.
infer_assert_td : infer_assert rtd rtd.
infer_assert_ti : infer_assert (rtn TN) (rtn TN).
infer_rec : pred -> pred -> type.
infer_rec_t : infer_rec rtt rtt.
infer_rec_td : infer_rec rtd rtd.
infer_rec_ti : infer_rec (rtn TN) (rtn TN).
infer_meet : pred -> pred -> pred -> type.
infer_meet_t_t : infer_meet rtt rtt rtt.
infer_meet_t_td : infer_meet rtt rtd rtd.
infer_meet_t_ti : infer_meet rtt (rtn T1) rtd.
infer_meet_td_t : infer_meet rtd rtt rtd.
infer_meet_td_td : infer_meet rtd rtd rtd.
infer_meet_td_ti : infer_meet rtd (rtn T1) rtd.
infer_meet_ti_t : infer_meet (rtn TN) rtt (rtn TN).
infer_meet_ti_td : infer_meet (rtn TN) rtd (rtn TN).
infer_meet_ti_ti : infer_meet (rtn TN) (rtn T1) (rtn TN).
infer_join : pred -> pred -> pred -> type.
infer_join_t_t : infer_join rtt rtt rtt.
infer_join_t_td : infer_join rtt rtd rtt.
infer_join_t_ti : infer_join rtt (rtn T1) rtt.
infer_join_td_t : infer_join rtd rtt rtt.
infer_join_td_td : infer_join rtd rtd rtt.
infer_join_td_ti : infer_join rtd (rtn T1) rtt.
infer_join_ti_t : infer_join (rtn T1) rtt rtt.
infer_join_ti_td : infer_join (rtn T1) rtd rtt.
infer_join_ti_ti_same : infer_join (rtn TN) (rtn TN) (rtn TN).
infer_join_ti_ti_diff : infer_join (rtn T1) (rtn T2) rtt.
infer_sat : tp -> pred -> kind -> type.
check_sat : tp -> pred -> kind -> type.
infer_sat_annot : infer_sat (annot T' R K) R K <- pon R K <- check_sat T' R K.
infer_sat_lam :
   infer_sat (lam K1 (\t:tp. T' t)) (rarrow (rtrue K1) R2) (karrow K1 K2)
      <- (Pi t:tp.
             kof t K1 -> infer_sat t (rtrue K1) K1 -> infer_sat (T' t) R2 K2).
infer_sat_app :
   infer_sat (app T1 T2) R2 K2
      <- infer_sat T1 R (karrow K1 K2)
      <- infer_app R R1 R2
      <- check_sat T2 R1 K1.
infer_sat_pair :
   infer_sat (pair T1 T2) (rprod R1 R2) (kprod K1 K2)
      <- infer_sat T1 R1 K1
      <- infer_sat T2 R2 K2.
infer_sat_pi1 :
   infer_sat (pi1 T') R1 K1 <- infer_sat T' R (kprod K1 K2) <- infer_pi R R1 R2.
infer_sat_pi2 :
   infer_sat (pi2 T') R2 K2 <- infer_sat T' R (kprod K1 K2) <- infer_pi R R1 R2.
infer_sat_klam :
   infer_sat (klam (\k:kind. \r:pred. T' k r))
      (rforall (\k:kind. \r:pred. R k r)) (kforall (\k:kind. K k))
      <- (Pi k:kind. Pi r:pred. pon r k -> infer_sat (T' k r) (R k r) (K k)).
infer_sat_kapp :
   infer_sat (kapp T' Karg Rarg) R' (K Karg)
      <- infer_sat T' R (kforall (\k:kind. K k))
      <- pon Rarg Karg
      <- infer_kapp R Karg Rarg R'.
infer_sat_in1 :
   infer_sat (in1 T' K2) (rsum R1 (rtrue K2)) (ksum K1 K2) <- infer_sat T' R1 K1.
infer_sat_in2 :
   infer_sat (in2 T' K1) (rsum (rtrue K1) R2) (ksum K1 K2) <- infer_sat T' R2 K2.
infer_sat_case :
   infer_sat (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) (rtrue K) K
      <- kof (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) K.
infer_sat_unroll :
   infer_sat (unroll T') R' (K (krec (\k:kind. K k)))
      <- infer_sat T' R (krec (\k:kind. K k))
      <- infer_unroll (\k:kind. K k) R R'.
infer_sat_roll :
   infer_sat (roll (\k:kind. K k) T') (rtrue (krec (\k:kind. K k)))
      (krec (\k:kind. K k))
      <- kof T' (K (krec (\k:kind. K k))).
infer_sat_b0 : infer_sat b0 (rti 0') kt.
infer_sat_b1 : infer_sat b1 rt1 kt.
infer_sat_seteq : infer_sat (seteq N T') (rti N) kt <- kof T' knum.
infer_sat_prod :
   infer_sat (prod T1 T2) R kt
      <- infer_sat T1 R1 kt
      <- infer_sat T2 R2 kt
      <- infer_prod R1 R2 R.
infer_sat_exp :
   infer_sat (exp T1 T2) R' kt
      <- infer_sat T1 R kt
      <- kof T2 knum
      <- infer_exp R T2 R'.
infer_sat_arrow : infer_sat (arrow G) rtw kt <- rtpok G.
infer_sat_cbox : infer_sat (cbox T1 T2) rtw kt <- kof T1 kt <- kof T2 kt.
infer_sat_cmbox : infer_sat (cmbox T1 T2) rtw kt <- kof T1 kt <- kof T2 kt.
infer_sat_sptr : infer_sat (sptr T') rtw kt <- kof T' kt.
infer_sat_forall :
   infer_sat (forall K R (\t:tp. T' t)) R'' kt
      <- pon R K
      <- (Pi t:tp. kof t K -> infer_sat t R K -> infer_sat (T' t) R' kt)
      <- infer_forall R' R''.
infer_sat_exists :
   infer_sat (exists K R (\t:tp. T' t)) R'' kt
      <- pon R K
      <- (Pi t:tp. kof t K -> infer_sat t R K -> infer_sat (T' t) R' kt)
      <- infer_exists R' R''.
infer_sat_guard :
   infer_sat (guard P T') R' kt
      <- propok P
      <- infer_sat T' R kt
      <- infer_guard R P R'.
infer_sat_assert :
   infer_sat (assert P T') R' kt
      <- propok P
      <- (Pi pr:proof. hyp pr P -> infer_sat T' R kt)
      <- infer_assert R R'.
infer_sat_rec :
   infer_sat (rec (\t:tp. T' t)) R' kt
      <- (Pi t:tp. kof t kt -> infer_sat (T' t) R kt)
      <- infer_rec R R'.
infer_sat_meet :
   infer_sat (meet T1 T2) R kt
      <- infer_sat T1 R1 kt
      <- infer_sat T2 R2 kt
      <- infer_meet R1 R2 R.
infer_sat_join :
   infer_sat (join T1 T2) R kt
      <- infer_sat T1 R1 kt
      <- infer_sat T2 R2 kt
      <- infer_join R1 R2 R.
infer_sat_ns : infer_sat ns rt1 kt.
infer_sat_void : infer_sat (void N) (rti N) kt.
infer_sat_gotptr : infer_sat gotptr rtw kt.
check_sat_true : check_sat T' (rtrue K) K <- kof T' K.
check_sat_lam :
   check_sat (lam K1 (\t:tp. T' t)) (rarrow R1 R2) (karrow K1 K2)
      <- (Pi t:tp. kof t K1 -> infer_sat t R1 K1 -> check_sat (T' t) R2 K2).
check_sat_pair :
   check_sat (pair T1 T2) (rprod R1 R2) (kprod K1 K2)
      <- check_sat T1 R1 K1
      <- check_sat T2 R2 K2.
check_sat_klam :
   check_sat (klam (\k:kind. \r:pred. T' k r))
      (rforall (\k:kind. \r:pred. R k r)) (kforall (\k:kind. K k))
      <- (Pi k:kind. Pi r:pred. pon r k -> check_sat (T' k r) (R k r) (K k)).
check_sat_in1 :
   check_sat (in1 T' K2) (rsum R1 R2) (ksum K1 K2) <- check_sat T' R1 K1.
check_sat_in2 :
   check_sat (in2 T' K1) (rsum R1 R2) (ksum K1 K2) <- check_sat T' R2 K2.
check_sat_roll :
   check_sat (roll (\k:kind. K k) T') (rrec (\k:kind. \r:pred. R k r))
      (krec (\k:kind. K k))
      <- check_sat T' (R (krec (\k:kind. K k)) (rrec (\k:kind. \r:pred. R k r)))
            (K (krec (\k:kind. K k))).
check_case :
   pred -> kind -> kind -> kind -> (tp -> tp) -> (tp -> tp) -> pred -> type.
check_sat_case :
   check_sat (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) R K
      <- infer_sat T' R' (ksum K1 K2)
      <- check_case R' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t) R.
check_case_ :
   check_case (rsum R1 R2) K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t) R
      <- (Pi t:tp. kof t K1 -> infer_sat t R1 K1 -> check_sat (T1 t) R K)
      <- (Pi t:tp. kof t K2 -> infer_sat t R2 K2 -> check_sat (T2 t) R K).
check_case_t :
   check_case (rtrue (ksum K1 K2)) K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t) (rtrue K)
      <- (Pi t:tp. kof t K1 -> kof (T1 t) K)
      <- (Pi t:tp. kof t K2 -> kof (T2 t) K).
check_sat_ : check_sat T' R K <- infer_sat T' R' K <- check_entails R' R.
invertibility : type.
invertible : invertibility.
noninvertible : invertibility.
invertibility_and : invertibility -> invertibility -> invertibility -> type.
invertibility_and_11 : invertibility_and invertible invertible invertible.
invertibility_and_0* : invertibility_and noninvertible INV1 noninvertible.
invertibility_and_*0 : invertibility_and INV1 noninvertible noninvertible.
infer_subtype : coercion -> tp -> tp -> invertibility -> type.
check_subtype : coercion -> tp -> tp -> invertibility -> type.
infer_subtype_id : infer_subtype qid T' T' invertible.
infer_subtype_compose :
   infer_subtype (qcompose Q23 Q12) T1 T3 INV
      <- infer_subtype Q12 T1 T2 INV12
      <- infer_subtype Q23 T2 T3 INV23
      <- invertibility_and INV12 INV23 INV.
infer_subtype_inv :
   infer_subtype (qinv T2 Q) T1 T2 invertible
      <- kof T2 kt
      <- infer_subtype Q T2 T1 invertible.
infer_subtype_prod :
   infer_subtype (qprod Q1 Q2) T' (prod T1' T2') INV
      <- whnf T' (prod T1 T2)
      <- infer_subtype Q1 T1 T1' INV1
      <- infer_subtype Q2 T2 T2' INV2
      <- invertibility_and INV1 INV2 INV.
infer_subtype_cbox :
   infer_subtype (qcbox Q1 Q2) T' (cbox T1' T2') INV
      <- whnf T' (cbox T1 T2)
      <- infer_subtype Q1 T1 T1' INV1
      <- infer_subtype Q2 T2 T2' INV2
      <- invertibility_and INV1 INV2 INV.
infer_subtype_cmbox :
   infer_subtype (qcmbox Q1 Q2) T' (cmbox T1' T2') invertible
      <- whnf T' (cmbox T1 T2)
      <- infer_subtype Q1 T1 T1' invertible
      <- infer_subtype Q2 T2 T2' invertible.
infer_subtype_forall :
   infer_subtype (qforall (\t:tp. Q t)) T' (forall K R (\t:tp. T1' t)) INV
      <- whnf T' (forall K R (\t:tp. T1 t))
      <- (Pi t:tp.
             kof t K
                -> infer_sat t R K
                -> infer_subtype (Q t) (T1 t) (T1' t) INV).
infer_subtype_exists :
   infer_subtype (qexists (\t:tp. Q t)) T' (exists K R (\t:tp. T1' t)) INV
      <- whnf T' (exists K R (\t:tp. T1 t))
      <- (Pi t:tp.
             kof t K
                -> infer_sat t R K
                -> infer_subtype (Q t) (T1 t) (T1' t) INV).
infer_subtype_arrow :
   infer_subtype (qarrow REG T1 Q) T' (arrow G') INV
      <- kof T1 kt
      <- whnf T' (arrow G)
      <- rtlookup G REG T1'
      <- check_subtype Q T1 T1' INV
      <- rtupdate G REG T1 G'.
infer_subtype_arrowsp :
   infer_subtype (qarrowsp T1 Q) T' (arrow G') INV
      <- kof T1 kt
      <- whnf T' (arrow G)
      <- ztlookup G T1'
      <- check_subtype Q T1 T1' INV
      <- ztupdate G T1 G'.
infer_subtype_app :
   infer_subtype (qapp Targ) T' (T1 Targ) noninvertible
      <- whnf T' (forall K R (\t:tp. T1 t))
      <- check_sat Targ R K.
infer_subtype_satisfy :
   infer_subtype (qsatisfy PR) T T' invertible
      <- whnf T (guard P T')
      <- proves PR P.
infer_subtype_lassoc :
   infer_subtype qlassoc T' (prod (prod T1 T2) T3) invertible
      <- whnf T' (prod T1 T23)
      <- whnf T23 (prod T2 T3).
infer_subtype_rassoc :
   infer_subtype qrassoc T' (prod T1 (prod T2 T3)) invertible
      <- whnf T' (prod T12 T3)
      <- whnf T12 (prod T1 T2).
infer_subtype_pack :
   infer_subtype (qpack Twit K R (\t:tp. Tbody t)) T'
      (exists K R (\t:tp. Tbody t)) noninvertible
      <- (Pi t:tp. kof t K -> kof (Tbody t) kt)
      <- pon R K
      <- check_sat Twit R K
      <- check_equiv T' (Tbody Twit).
equiv_or_equal : tp -> tp -> type.
eq_numeq :
   equiv_or_equal T1 T2 <- kof T1 knum <- kof T2 knum <- deduce (pnumeq T1 T2).
eq_equiv :
   equiv_or_equal T1 T2 <- kof T1 knum <- kof T2 knum <- check_equiv T1 T2.
infer_subtype_exp :
   infer_subtype (qexp Q T2') T' (exp T1' T2') INV
      <- whnf T' (exp T1 T2)
      <- infer_subtype Q T1 T1' INV
      <- equiv_or_equal T2 T2'.
infer_subtype_sptr :
   infer_subtype (qsptr Q) T' (sptr T1') INV
      <- whnf T' (sptr T1)
      <- infer_subtype Q T1 T1' INV.
infer_subtype_join_elim :
   infer_subtype (qjoin_elim Q1 Q2) T' T1' noninvertible
      <- whnf T' (join T1 T2)
      <- infer_subtype Q1 T1 T1' INV2
      <- infer_subtype Q2 T2 T2' INV1
      <- check_equiv T1' T2'.
infer_subtype_meet_intro :
   infer_subtype (qmeet_intro Q1 Q2) T' (meet T1 T2) noninvertible
      <- infer_subtype Q1 T' T1 INV2
      <- infer_subtype Q2 T' T2 INV1.
infer_subtype_subrange_eqlt :
   infer_subtype (qsubrange_eqlt B0) T' (setlt N (number B)) noninvertible
      <- whnf T' (seteq N T1)
      <- product N bytebits N*bytebits
      <- whnf T1 (number B')
      <- pad N*bytebits B0 B
      <- sub B B' Bdiff zero
      <- is_nonzero Bdiff.
infer_subtype_subrange_eqgt :
   infer_subtype (qsubrange_eqgt B0) T' (setgt N (number B)) noninvertible
      <- whnf T' (seteq N T1)
      <- product N bytebits N*bytebits
      <- whnf T1 (number B')
      <- pad N*bytebits B0 B
      <- sub B' B Bdiff zero
      <- is_nonzero Bdiff.
infer_subtype_join :
   infer_subtype (qjoin Q1 Q2) T' (join T1' T2') INV
      <- whnf T' (join T1 T2)
      <- infer_subtype Q1 T1 T1' INV1
      <- infer_subtype Q2 T2 T2' INV2
      <- invertibility_and INV1 INV2 INV.
infer_subtype_any :
   infer_subtype (qany Tany) T' Tany noninvertible
      <- kof Tany kt
      <- whnf T' (void N1).
infer_subtype_forget :
   infer_subtype qforget T' (nsi N) noninvertible
      <- infer_sat T' (rtn CN) kt
      <- simpnum CN N.
infer_subtype_forgetm :
   infer_subtype qforgetm T' (box T1) noninvertible <- whnf T' (mbox T1).
infer_subtype_roll :
   infer_subtype (qroll T1) T' T1 invertible
      <- kof T1 kt
      <- whnf T1 (rec (\t:tp. Trec t))
      <- (Pi t:tp. kof t kt -> kof (Trec t) kt)
      <- check_equiv T' (Trec (rec (\t:tp. Trec t))).
infer_subtype_unroll :
   infer_subtype qunroll T' (Trec (rec (\t:tp. Trec t))) invertible
      <- whnf T' (rec (\t:tp. Trec t))
      <- (Pi t:tp. kof t kt -> kof (Trec t) kt).
infer_subtype_luniti :
   infer_subtype qluniti T (prod b0 T') invertible <- whnf T T'.
infer_subtype_runiti :
   infer_subtype qruniti T (prod T' b0) invertible <- whnf T T'.
infer_subtype_lunite :
   infer_subtype qlunite T' T2 invertible <- whnf T' (prod T1 T2) <- whnf T1 b0.
infer_subtype_runite :
   infer_subtype qrunite T' T1 invertible <- whnf T' (prod T1 T2) <- whnf T2 b0.
infer_subtype_ljoini :
   infer_subtype (qljoini T1) T' (join T' T1) noninvertible <- kof T1 kt.
infer_subtype_rjoini :
   infer_subtype (qrjoini T1) T' (join T1 T') noninvertible <- kof T1 kt.
implode_count : tp -> tp -> nat -> type.
implode_count_b0 : implode_count T' Telt z <- whnf T' b0.
implode_count_prod :
   implode_count T' Telt (s N)
      <- whnf T' (prod T1 T2)
      <- check_equiv T1 Telt
      <- implode_count T2 Telt N.
infer_subtype_implode :
   infer_subtype (qimplode T1) T' (exp T1 (numlit N)) invertible
      <- kof T1 kt
      <- implode_count T' T1 N.
infer_subtype_explode :
   infer_subtype qexplode T T' invertible
      <- whnf T (exp T1 TN)
      <- simpnum TN N
      <- tp_exp T1 N T'.
infer_subtype_partition :
   infer_subtype (qpartition N) T'
      (prod (exp T1 (numlit N)) (exp T1 (numlit M-N))) invertible
      <- whnf T' (exp T1 TM)
      <- whnf TM (numlit M)
      <- diff M N M-N.
infer_subtype_trichotomy :
   infer_subtype (qtrichotomy TM) T'
      (join (setlt Nsz TM) (join (seteq Nsz TM) (setgt Nsz TM))) noninvertible
      <- whnf T' (exp T1 T2)
      <- whnf T1 b1
      <- whnf T2 (numlit Nsz)
      <- kof TM knum
      <- deduce (good TM).
infer_subtype_forget_seteq :
   infer_subtype qforget_seteq T' (inti N) noninvertible <- whnf T' (seteq N T1).
infer_subtype_forget_setlt :
   infer_subtype qforget_setlt T' (inti N) noninvertible <- whnf T' (setlt N T1).
infer_subtype_forget_setgt :
   infer_subtype qforget_setgt T' (inti N) noninvertible <- whnf T' (setgt N T1).
infer_subtype_meet_dist_join :
   infer_subtype qmeet_dist_join T' (join (meet T1 T2) (meet T1 T3)) invertible
      <- whnf T' (meet T1 T2&T3)
      <- whnf T2&T3 (join T2 T3).
infer_subtype_prod_dist_join1 :
   infer_subtype qprod_dist_join1 T' (join (prod T1 T2) (prod T1 T3))
      noninvertible
      <- whnf T' (prod T1 T2|T3)
      <- whnf T2|T3 (join T2 T3).
infer_subtype_prod_dist_join2 :
   infer_subtype qprod_dist_join2 T' (join (prod T2 T1) (prod T3 T1))
      noninvertible
      <- whnf T' (prod T2|T3 T1)
      <- whnf T2|T3 (join T2 T3).
infer_subtype_raa_lt :
   infer_subtype qraa_lt T' (void N) noninvertible
      <- whnf T' (meet T1 T2)
      <- whnf T1 (seteq N CN1)
      <- whnf T2 (setlt N CN2)
      <- check_equiv CN1 CN2.
infer_subtype_raa_gt :
   infer_subtype qraa_gt T' (void N) noninvertible
      <- whnf T' (meet T1 T2)
      <- whnf T1 (seteq N CN1)
      <- whnf T2 (setgt N CN2)
      <- check_equiv CN1 CN2.
infer_subtype_raa_ltgt :
   infer_subtype qraa_ltgt T' (void N) noninvertible
      <- whnf T' (meet T1 T2)
      <- whnf T1 (setlt N CN1)
      <- whnf T2 (setgt N CN2)
      <- check_equiv CN1 CN2.
infer_subtype_rmeete :
   infer_subtype qrmeete T' T2 noninvertible <- whnf T' (meet T1 T2).
infer_subtype_lmeete :
   infer_subtype qlmeete T' T1 noninvertible <- whnf T' (meet T1 T2).
infer_subtype_join_lassoc :
   infer_subtype qjoin_lassoc T' (join (join T1 T2) T3) invertible
      <- whnf T' (join T1 T23)
      <- whnf T23 (join T2 T3).
infer_subtype_join_rassoc :
   infer_subtype qjoin_rassoc T' (join T1 (join T2 T3)) invertible
      <- whnf T' (join T12 T3)
      <- whnf T12 (join T1 T2).
infer_subtype_join_commute :
   infer_subtype qjoin_commute T' (join T2 T1) invertible
      <- whnf T' (join T1 T2).
infer_subtype_focus :
   infer_subtype qfocus T' (exists knum (rtrue knum) (\x:tp. seteq N x))
      invertible
      <- whnf T' (inti N).
check_subtype_ :
   check_subtype Q T1 T2 INV <- infer_subtype Q T1 T2' INV <- check_equiv T2' T2.
infer_block_subtype : coercion -> tp -> tp -> type.
infer_bsubtype_id : infer_block_subtype qid T' T'.
infer_bsubtype_compose :
   infer_block_subtype (qcompose Q23 Q12) T1 T3
      <- infer_block_subtype Q12 T1 T2
      <- infer_block_subtype Q23 T2 T3.
infer_bsubtype_arrow :
   infer_block_subtype (qarrow REG T1 Q) (arrow G) (arrow G')
      <- kof T1 kt
      <- rtlookup G REG T1'
      <- check_subtype Q T1 T1' INV1
      <- rtupdate G REG T1 G'.
infer_bsubtype_arrowsp :
   infer_block_subtype (qarrowsp T1 Q) (arrow G) (arrow G')
      <- kof T1 kt
      <- ztlookup G T1'
      <- check_subtype Q T1 T1' INV1
      <- ztupdate G T1 G'.
infer_bsubtype_forall :
   infer_block_subtype (qforall (\t:tp. Q t)) (forall K R (\t:tp. T1 t))
      (forall K R (\t:tp. T1' t))
      <- (Pi t:tp.
             kof t K
                -> infer_sat t R K
                -> infer_block_subtype (Q t) (T1 t) (T1' t)).
infer_bsubtype_app :
   infer_block_subtype (qapp Targ) (forall K R (\t:tp. T1 t)) (T1 Targ)
      <- check_sat Targ R K.
infer_bsubtype_satisfy :
   infer_block_subtype (qsatisfy PR) (guard P T') T' <- proves PR P.
infer_of : 'val -> tp -> type.
infer_of_list : 'val_list -> tplist -> type.
infer_of_list_nil : infer_of_list 'val_nil tp_nil.
infer_of_list_cons :
   infer_of_list ('val_cons V VL) (tp_cons T' TL)
      <- infer_of V T'
      <- infer_of_list VL TL.
infer_of_nonempty : 'nonempty_val_list -> tp -> nat -> type.
infer_of_nonempty_one :
   infer_of_nonempty ('nonempty_val_one V) T' 1' <- infer_of V T'.
infer_of_nonempty_cons :
   infer_of_nonempty ('nonempty_val_cons V NVL) T' (s N)
      <- infer_of V T'
      <- infer_of_nonempty NVL T' N.
infer_of_lit : infer_of ('lit B1) b1.
infer_of_junk : infer_of 'junk ns.
infer_of_sing :
   infer_of ('sing N B) (seteq N (number B'))
      <- product N bytebits N*bytebits
      <- pad N*bytebits B B'.
infer_of_coerce :
   infer_of ('vcoerce Q V) T' <- infer_of V T <- infer_subtype Q T T' INV1.
infer_of_lam :
   infer_of ('lam K R (\t:tp. V t)) (forall K R (\t:tp. T' t))
      <- pon R K
      <- (Pi t:tp. kof t K -> infer_sat t R K -> infer_of (V t) (T' t)).
infer_of_array :
   infer_of ('array VL) T' <- infer_of_list VL TL <- prod_tp_list TL T'.
infer_of_hom_array :
   infer_of ('hom_array NVL) (exp T' (numlit N)) <- infer_of_nonempty NVL T' N.
infer_of_null : infer_of 'null b0.
infer_label : ptp -> nat -> tp -> type.
infer_label_z : infer_label (ptpcons T' U1) z T'.
infer_label_s : infer_label (ptpcons T1 U) (s N) T' <- infer_label U N T'.
difference : nat -> tp -> tp -> (tp -> tp) -> type.
difference_z : difference 0' T T' (\t:tp. t) <- check_equiv T T'.
difference_s :
   difference (s N) T T' (\t:tp. prod T1 (TF t))
      <- whnf T (prod T1 T2)
      <- difference N T2 T' (\t:tp. TF t).
split : nat -> tp -> (tp -> tp) -> tp -> type.
split_z : split 0' T' (\t:tp. t) T'.
split_s :
   split N T' (\t:tp. prod T1 (TFfront t)) Tback
      <- whnf T' (prod T1 T2)
      <- infer_sat T1 (rtn TM) kt
      <- simpnum TM M
      <- diff N M P
      <- split P T2 (\t:tp. TFfront t) Tback.
unbox : tp -> tp -> type.
unbox_box : unbox (cbox T1 T') T'.
unbox_mbox : unbox (cmbox T1 T') T'.
reg_from_operand : 'operand -> reg -> type.
reg_from_operand_r : reg_from_operand ('rco R) R.
reg_from_operand_q : reg_from_operand ('ocoerce Q O) R <- reg_from_operand O R.
infer_oof : ptp -> rtp -> 'operand -> tp -> type.
infer_oof_labref :
   infer_oof U G1 ('labref Nlabel) T' <- infer_label U Nlabel T'.
infer_oof_im : infer_oof U1 G1 ('im V) T' <- infer_of V T'.
infer_oof_rco : infer_oof U1 G ('rco REG) T' <- rtlookup G REG T'.
infer_oof_mco :
   infer_oof U G ('mco M O N) T2
      <- infer_oof U G O T
      <- whnf T T'
      <- unbox T' T123
      <- split N T123 (\t:tp. T3 t) T23
      <- whnf T23 (prod T2 T1)
      <- check_sat T2 (rti M) kt.
infer_oof_imco :
   infer_oof U G ('imco M O1 N O2 Q) T2
      <- infer_oof U G O1 T
      <- whnf T T'
      <- unbox T' Texp
      <- whnf Texp (exp T123 Tbound)
      <- infer_oof U G O2 Tindex
      <- check_equiv (setlt wordsize Tbound) Tindex
      <- split N T123 (\t:tp. T1 t) T23
      <- whnf T23 (prod T2 T3)
      <- check_sat T2 (rti M) kt
      <- diff Q N Q-N
      <- diff Q-N M P
      <- check_sat T3 (rti P) kt.
infer_oof_spco : infer_oof U1 G 'spco (sptr T') <- ztlookup G T'.
infer_oof_zco :
   infer_oof U G ('zco M O N P) T2
      <- infer_oof U G O T'
      <- whnf T' (sptr T123)
      <- ztlookup G Tsp
      <- difference P Tsp T123 (\t:tp. T4 t)
      <- split N T123 (\t:tp. T1 t) T23
      <- whnf T23 (prod T2 T3)
      <- check_sat T2 (rti M) kt
      <- check_sat T3 rtd kt.
infer_oof_proj :
   infer_oof U G ('proj M O N) T2
      <- infer_oof U G O T'
      <- split N T' (\t:tp. T3 t) T23
      <- whnf T23 (prod T2 T1)
      <- check_sat T2 (rti M) kt.
infer_oof_rnbyte :
   infer_oof U G ('rnbyte Q REG N) T2
      <- rtlookup G REG T'
      <- infer_subtype Q T' T123 INV1
      <- split N T123 (\t:tp. T3 t) T23
      <- whnf T23 (prod T2 T1)
      <- check_sat T2 (rti 1') kt.
infer_oof_combine :
   infer_oof U G ('combine O1 O2) (prod T1 T2)
      <- infer_oof U G O1 T1
      <- infer_oof U G O2 T2.
infer_oof_ocoerce :
   infer_oof U G ('ocoerce Q O) T'
      <- infer_oof U G O T1
      <- infer_subtype Q T1 T' INV1.
check_oof : ptp -> rtp -> 'operand -> tp -> type.
check_oof_ : check_oof U G O T <- infer_oof U G O T' <- check_equiv T' T.
infer_update : ptp -> rtp -> 'dest -> tp -> rtp -> type.
infer_update_rdest :
   infer_update U1 G ('rdest REG) T' G'
      <- check_sat T' rtw kt
      <- rtupdate G REG T' G'.
infer_update_mdest :
   infer_update U G ('mdest M O N) T2 G
      <- infer_oof U G O T'
      <- whnf T' (cmbox T4 T123)
      <- split N T123 (\t:tp. T3 t) T23
      <- whnf T23 (prod T2' T1)
      <- check_sat T2 (rti M) kt
      <- check_equiv T2' T2.
infer_update_imdest :
   infer_update U G ('imdest M O1 N O2 Q) T2 G
      <- infer_oof U G O1 T'
      <- whnf T' (cmbox T4 Texp)
      <- whnf Texp (exp T123 Tbound)
      <- infer_oof U G O2 Tindex
      <- check_equiv (setlt wordsize Tbound) Tindex
      <- split N T123 (\t:tp. T1 t) T23
      <- whnf T23 (prod T2' T3)
      <- check_sat T2 (rti M) kt
      <- diff Q N Q-N
      <- diff Q-N M P
      <- check_sat T3 (rti P) kt
      <- check_equiv T2' T2.
infer_update_spdest :
   infer_update U1 G ('spdest P) T' G'
      <- whnf T' (sptr T1)
      <- check_sat T1 rtd kt
      <- ztlookup G ZT
      <- difference P ZT T1 (\t:tp. T2 t)
      <- ztupdate G T1 G'.
infer_update_zdest :
   infer_update U G ('zdest M O N P) T2 G''
      <- check_sat T2 (rti M) kt
      <- infer_oof U G O T'
      <- reg_from_operand O REG
      <- whnf T' (sptr T123)
      <- ztlookup G Tsp
      <- difference P Tsp T123 (\t:tp. TFsp t)
      <- split N T123 (\t:tp. TF1 t) T23
      <- whnf T23 (prod T2' T3)
      <- check_sat T2' (rti M) kt
      <- check_sat T3 rtd kt
      <- ztupdate G (TFsp (TF1 (prod T2 T3))) G'
      <- rtupdate G' REG (sptr (TF1 (prod T2 T3))) G''.
infer_update_projdest :
   infer_update U G ('projdest M O E N) T2 G'
      <- check_sat T2 (rti M) kt
      <- infer_oof U G O T123
      <- split N T123 (\t:tp. TF1 t) T23
      <- whnf T23 (prod T2' T3)
      <- check_sat T2' (rti M) kt
      <- infer_update U G E (TF1 (prod T2 T3)) G'.
infer_update_rnbytedest :
   infer_update U G ('rnbytedest Qld Qst REG N) T2' G'
      <- check_sat T2' (rti 1') kt
      <- rtlookup G REG T'
      <- infer_subtype Qld T' T123 INV2
      <- split N T123 (\t:tp. TF1 t) T23
      <- whnf T23 (prod T2 T3)
      <- check_sat T2 (rti 1') kt
      <- infer_subtype Qst (TF1 (prod T2' T3)) T123' INV1
      <- check_sat T123' rtw kt
      <- rtupdate G REG T123' G'.
check_codeok : ptp -> tp -> rtp -> 'code -> type.
check_initok : ptp -> tp -> rtp -> reg -> tp -> 'code -> type.
fold_tp : tp -> natlist -> tp -> type.
fold_tp_nil : fold_tp Tbase nat_nil Tbase.
fold_tp_cons :
   fold_tp Tbase (nat_cons N NL) (prod (nsi N) T') <- fold_tp Tbase NL T'.
check_codeok_fallthru :
   check_codeok U Tfall G ('fallthru Q)
      <- infer_block_subtype Q Tfall (arrow G')
      <- check_equiv_rtp G G'.
check_codeok_add :
   check_codeok U Tfall G ('i_add N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (inti N)
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_addsptr :
   check_codeok U Tfall G ('i_addsptr E O N I)
      <- infer_oof U G O T
      <- whnf T (sptr T')
      <- split N T' (\t:tp. T1 t) T2
      <- infer_update U G E (sptr T2) G'
      <- check_codeok U Tfall G' I.
check_codeok_and :
   check_codeok U Tfall G ('i_and N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (inti N)
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_bz :
   check_codeok U Tfall G ('i_bz O1 O2 I)
      <- check_oof U G O1 int
      <- check_oof U G O2 (arrow G)
      <- check_codeok U Tfall G I.
check_codeok_call :
   check_codeok U Tfall G ('i_call O I)
      <- ztlookup G ZT
      <- ztupdate G (prod nsw ZT) G'
      <- infer_oof U G' O T'
      <- whnf T' (arrow Gcall)
      <- ztlookup Gcall ZTcall
      <- whnf ZTcall (prod Tretaddr ZT')
      <- check_sat Tretaddr rtw kt
      <- whnf Tretaddr (arrow Gret)
      <- check_equiv ZT ZT'
      <- ztupdate G ZTcall G''
      <- check_equiv_rtp G'' Gcall
      <- check_codeok U Tfall Gret I.
check_codeok_cmp :
   check_codeok U Tfall G ('i_cmp N O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (inti N)
      <- check_codeok U Tfall G I.
same_operands : 'operand -> 'operand -> type.
same_op_labref : same_operands ('labref N) ('labref N).
same_op_im : same_operands ('im V) ('im V).
same_op_rco : same_operands ('rco R) ('rco R).
same_op_mco :
   same_operands ('mco N1 O N2) ('mco N1 O' N2) <- same_operands O O'.
same_op_imco :
   same_operands ('imco N1 O1 N2 O2 N3) ('imco N1 O1' N2 O2' N3)
      <- same_operands O1 O1'
      <- same_operands O2 O2'.
same_op_zco :
   same_operands ('zco N1 O N2 N3) ('zco N1 O' N2 N3) <- same_operands O O'.
same_op_spco : same_operands 'spco 'spco.
same_op_proj :
   same_operands ('proj N1 O N2) ('proj N1 O' N2) <- same_operands O O'.
same_op_rnbyte : same_operands ('rnbyte Q1 R N) ('rnbyte Q2 R N).
same_op_combine :
   same_operands ('combine O1 O2) ('combine O1' O2')
      <- same_operands O1 O1'
      <- same_operands O2 O2'.
same_op_ocoercel : same_operands ('ocoerce Q O) O' <- same_operands O O'.
same_op_ocoercer : same_operands O ('ocoerce Q O') <- same_operands O O'.
check_codeok_cmpjcc :
   check_codeok U Tfall G
      ('i_cmpjcc N Cond O1 O1left O1right O2 O3 REG Qleft Qright I)
      <- lt z N
      <- infer_oof U G O1 Tcompare
      <- infer_oof U G O2 Tagainst
      <- rtlookup G REG Treg
      <- whnf Tagainst (seteq N TNagainst)
      <- whnf Treg (join Tleft Tright)
      <- check_sat (join Tleft Tright) rtw kt
      <- rtupdate G REG Tleft Gleft
      <- rtupdate G REG Tright Gright
      <- infer_oof U Gleft O1left Tcompleft
      <- infer_oof U Gright O1right Tcompright
      <- same_operands O1 O1left
      <- same_operands O1 O1right
      <- cond_tp N Cond TNagainst Tsat Tunsat
      <- infer_subtype Qleft (meet Tcompleft Tunsat) Tvoidleft INV2
      <- infer_subtype Qright (meet Tcompright Tsat) Tvoidright INV1
      <- whnf Tvoidleft (void N2)
      <- whnf Tvoidright (void N1)
      <- check_equiv Tcompare (inti N)
      <- check_oof U G O3 (arrow Gleft)
      <- check_codeok U Tfall Gright I.
check_codeok_cmpjcc2 :
   check_codeok U Tfall G ('i_cmpjcc2 wordsize Cond O1 O2 O3 I)
      <- infer_oof U G O1 Tcompare
      <- infer_oof U G O2 Tagainst
      <- reg_from_operand O1 REG
      <- check_equiv Tcompare (inti wordsize)
      <- whnf Tagainst (seteq wordsize TNagainst)
      <- cond_tp wordsize Cond TNagainst Tsat Tunsat
      <- rtupdate G REG Tsat Gtake
      <- check_oof U G O3 (arrow Gtake)
      <- rtupdate G REG Tunsat Gskip
      <- check_codeok U Tfall Gskip I.
check_codeok_concertgetargs :
   check_codeok U Tfall G ('i_concertgetargs O E I)
      <- check_oof U G O gotptr
      <- infer_update U G E runtime_stringarray_type G'
      <- check_codeok U Tfall G' I.
check_codeok_concertreturn :
   check_codeok U Tfall G ('i_concertreturn O1 O2 I)
      <- check_oof U G O1 gotptr
      <- check_oof U G O2 runtime_string_type
      <- check_codeok U Tfall G I.
check_codeok_concertforward :
   check_codeok U Tfall G ('i_concertforward O1 O2 I)
      <- check_oof U G O1 gotptr
      <- check_oof U G O2 runtime_string_type
      <- check_codeok U Tfall G I.
check_codeok_concertspawn :
   check_codeok U Tfall G ('i_concertspawn O1 E O2 O3 I)
      <- check_oof U G O1 gotptr
      <- check_oof U G O2 runtime_string_type
      <- check_oof U G O3 runtime_string_type
      <- infer_update U G E runtime_string_type G'
      <- check_codeok U Tfall G' I.
check_codeok_halt :
   check_codeok U Tfall G ('i_halt I1) <- ztlookup G T' <- check_equiv T' b0.
check_codeok_jcc :
   check_codeok U Tfall G ('i_jcc Cond O I)
      <- check_oof U G O (arrow G)
      <- check_codeok U Tfall G I.
check_codeok_jmp :
   check_codeok U Tfall G ('i_jmp O I1) <- check_oof U G O (arrow G).
check_codeok_malloc :
   check_codeok U Tfall G ('i_malloc Ogot ('rdest REG) NL Osz I)
      <- check_oof U G Ogot gotptr
      <- infer_oof U G Osz Tsz
      <- sumlist NL Sum
      <- lt z Sum
      <- infer_represents_width Sum wordbits B
      <- check_equiv Tsz (seteq wordsize (number B))
      <- fold_tp b0 NL T'
      <- rtupdate G REG nsw G'
      <- check_initok U Tfall G' REG T' I.
check_codeok_mallocarr :
   check_codeok U Tfall G ('i_mallocarr Ogot ('rdest REG) Nelemsz Osz Oinit I)
      <- check_oof U G Ogot gotptr
      <- infer_oof U G Osz Tsz
      <- rtlookup G REG Treg
      <- check_sat Treg rtw kt
      <- rtupdate G REG nsw G'
      <- infer_oof U G' Oinit Tinit
      <- whnf Tsz (seteq wordsize TNbound)
      <- lt z Nelemsz
      <- check_sat Tinit (rti Nelemsz) kt
      <- rtupdate G' REG (mbox (exp Tinit TNbound)) G''
      <- check_codeok U Tfall G'' I.
check_codeok_mov :
   check_codeok U Tfall G ('i_mov E O I)
      <- infer_oof U G O T'
      <- infer_update U G E T' G'
      <- check_codeok U Tfall G' I.
check_codeok_movsx :
   check_codeok U Tfall G ('i_movsx N E O I)
      <- lt z N
      <- check_oof U G O (inti 1')
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_movzx :
   check_codeok U Tfall G ('i_movzx N E O I)
      <- lt z N
      <- check_oof U G O (inti 1')
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_nop :
   check_codeok U Tfall G ('i_nop I) <- check_codeok U Tfall G I.
check_codeok_not :
   check_codeok U Tfall G ('i_not N E O I)
      <- lt z N
      <- check_oof U G O (inti N)
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_or :
   check_codeok U Tfall G ('i_or N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (inti N)
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_pop :
   check_codeok U Tfall G ('i_pop N E I)
      <- ztlookup G ZT
      <- whnf ZT (prod T1 T2)
      <- check_sat T1 (rti N) kt
      <- ztupdate G T2 G'
      <- infer_update U G' E T1 G''
      <- check_codeok U Tfall G'' I.
check_codeok_push :
   check_codeok U Tfall G ('i_push O I)
      <- infer_oof U G O T'
      <- check_sat T' rtd kt
      <- ztlookup G ZT
      <- ztupdate G (prod T' ZT) G'
      <- check_codeok U Tfall G' I.
check_codeok_pushrel :
   check_codeok U Tfall G ('i_pushrel O I)
      <- infer_oof U G O T'
      <- check_sat T' rtd kt
      <- ztlookup G ZT
      <- ztupdate G (prod T' ZT) G'
      <- check_codeok U Tfall G' I.
check_codeok_ret :
   check_codeok U Tfall G ('i_ret I1)
      <- ztlookup G ZT
      <- whnf ZT (prod Tretaddr ZT')
      <- check_sat ZT' rtd kt
      <- whnf Tretaddr (arrow Gret)
      <- ztupdate G ZT' G'
      <- check_equiv_rtp Gret G'.
check_codeok_rcl :
   check_codeok U Tfall G ('i_rcl N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (setlt 1' (number 20_8))
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_rol :
   check_codeok U Tfall G ('i_rol N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (setlt 1' (number 20_8))
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_rcr :
   check_codeok U Tfall G ('i_rcr N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (setlt 1' (number 20_8))
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_ror :
   check_codeok U Tfall G ('i_ror N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (setlt 1' (number 20_8))
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_shl :
   check_codeok U Tfall G ('i_shl N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (setlt 1' (number 20_8))
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_sar :
   check_codeok U Tfall G ('i_sar N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (setlt 1' (number 20_8))
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_shr :
   check_codeok U Tfall G ('i_shr N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (setlt 1' (number 20_8))
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_salloc :
   check_codeok U Tfall G ('i_salloc NL I)
      <- ztlookup G ZT
      <- fold_tp ZT NL ZT'
      <- ztupdate G ZT' G'
      <- check_codeok U Tfall G' I.
check_codeok_sfree :
   check_codeok U Tfall G ('i_sfree N I)
      <- ztlookup G ZT
      <- split N ZT (\t:tp. T1 t) ZT'
      <- ztupdate G ZT' G'
      <- check_codeok U Tfall G' I.
check_codeok_sub :
   check_codeok U Tfall G ('i_sub N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (inti N)
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_xor :
   check_codeok U Tfall G ('i_xor N E O1 O2 I)
      <- lt z N
      <- check_oof U G O1 (inti N)
      <- check_oof U G O2 (inti N)
      <- infer_update U G E (inti N) G'
      <- check_codeok U Tfall G' I.
check_codeok_claim :
   check_codeok U Tfall G ('i_claim P PR (\pr:proof. I pr))
      <- propok P
      <- proves PR P
      <- (Pi pr:proof. hyp pr P -> check_codeok U Tfall G (I pr)).
check_codeok_coerce :
   check_codeok U Tfall G ('i_coerce REG Q I)
      <- rtlookup G REG T
      <- infer_subtype Q T T' INV1
      <- check_sat T' rtw kt
      <- rtupdate G REG T' G'
      <- check_codeok U Tfall G' I.
check_codeok_coercesp :
   check_codeok U Tfall G ('i_coercesp Q I)
      <- ztlookup G ZT
      <- infer_subtype Q ZT ZT' INV1
      <- infer_sat ZT' rtd kt
      <- ztupdate G ZT' G'
      <- check_codeok U Tfall G' I.
check_codeok_unpack :
   check_codeok U Tfall G ('i_unpack REG (\t:tp. I t))
      <- rtlookup G REG T'
      <- whnf T' (exists K R (\t:tp. T1 t))
      <- (Pi t:tp. rtupdate G REG (T1 t) (G' t))
      <- (Pi t:tp.
             kof t K -> infer_sat t R K -> check_codeok U Tfall (G' t) (I t)).
check_codeok_letpair :
   check_codeok U Tfall G ('i_letpair T (\t:tp. \t1:tp. I t t1))
      <- kof T (kprod K1 K2)
      <- whnf T T'
      <- (Pi t1:tp.
             kof t1 K1
                -> infer_sat t1 (rtrue K1) K1
                -> Pi t2:tp.
                      kof t2 K2
                         -> infer_sat t2 (rtrue K2) K2
                         -> replace T' (pair t1 t2)
                         -> check_codeok U Tfall G (I t1 t2)).
check_codeok_letroll :
   check_codeok U Tfall G ('i_letroll T (\t:tp. I t))
      <- kof T (krec (\k:kind. K k))
      <- whnf T T'
      <- (Pi t:tp.
             kof t (K (krec (\k:kind. K k)))
                -> infer_sat t (rtrue (K (krec (\k:kind. K k))))
                      (K (krec (\k:kind. K k)))
                -> replace T' (roll (\k:kind. K k) t)
                -> check_codeok U Tfall G (I t)).
check_codeok_vcase1 :
   check_codeok U Tfall G ('i_vcase1 O (\t:tp. I t))
      <- infer_oof U G O T
      <- whnf T (case T' K1 K2 kt (\t:tp. T1 t) (\t:tp. Tvoid t))
      <- whnf T' T''
      <- (Pi t:tp. whnf (Tvoid t) (void N))
      <- (Pi t:tp.
             kof t K1
                -> infer_sat t (rtrue K1) K1
                -> replace T'' (in1 t K2)
                -> check_codeok U Tfall G (I t)).
check_codeok_vcase2 :
   check_codeok U Tfall G ('i_vcase2 O (\t:tp. I t))
      <- infer_oof U G O T
      <- whnf T (case T' K1 K2 kt (\t:tp. Tvoid t) (\t:tp. T1 t))
      <- whnf T' T''
      <- (Pi t:tp. whnf (Tvoid t) (void N))
      <- (Pi t:tp.
             kof t K2
                -> infer_sat t (rtrue K2) K2
                -> replace T'' (in2 t K1)
                -> check_codeok U Tfall G (I t)).
check_initok_mov :
   check_initok U Tfall G REG Tcurr ('i_mov ('mdest Nsz ('rco REG) Noffset) O I)
      <- infer_oof U G O T'
      <- check_sat T' (rti Nsz) kt
      <- split Noffset Tcurr (\t:tp. T1 t) T23
      <- split Nsz T23 (\t:tp. T2 t) T3
      <- check_initok U Tfall G REG (T1 (prod T' T3)) I.
check_initok_pop :
   check_initok U Tfall G REG Tcurr
      ('i_pop Nsz ('mdest Nsz ('rco REG) Noffset) I)
      <- ztlookup G ZT
      <- whnf ZT (prod T' ZT')
      <- check_sat T' (rti Nsz) kt
      <- ztupdate G ZT' G'
      <- split Noffset Tcurr (\t:tp. TF1 t) T23
      <- split Nsz T23 (\t:tp. T1 t) T3
      <- check_initok U Tfall G' REG (TF1 (prod T' T3)) I.
check_initok_endinit :
   check_initok U Tfall G REG Tcurr ('i_endinit I)
      <- rtupdate G REG (mbox Tcurr) G'
      <- check_codeok U Tfall G' I.
empty_rtp* : rtp* N -> type.
empty_rtp*_z : empty_rtp* rtnil.
empty_rtp*_s : empty_rtp* (rtcons nsw G) <- empty_rtp* G.
rt*_empty : rtp* regcount
   = rtcons nsw
        (rtcons nsw
            (rtcons nsw
                (rtcons nsw (rtcons nsw (rtcons nsw (rtcons nsw rtnil)))))).
rt*_init : rtp* regcount
   = rtcons nsw
        (rtcons nsw
            (rtcons nsw
                (rtcons gotptr (rtcons nsw (rtcons nsw (rtcons nsw rtnil)))))).
rtupdate*_init :
   rtupdate* rt*_empty ebx gotptr
      (rtcons nsw
          (rtcons nsw
              (rtcons nsw
                  (rtcons gotptr (rtcons nsw (rtcons nsw (rtcons nsw rtnil)))))))
   = rtupdate_s (rtupdate_s (rtupdate_s rtupdate_z)).
rt_empty : rtp = rt b0 rt*_empty.
rt_init : rtp = rt b0 rt*_init.
check_block : ptp -> tp -> block -> tp -> type.
check_block_lam :
   check_block U Tfall (block_lam K R (\t:tp. B t)) (forall K R (\t:tp. T' t))
      <- (Pi t:tp.
             kof t K -> infer_sat t R K -> check_block U Tfall (B t) (T' t)).
check_block_guard :
   check_block U Tfall (block_guard P (\pr:proof. B pr)) (guard P T')
      <- (Pi pr:proof. hyp pr P -> check_block U Tfall (B pr) T').
check_block_code :
   check_block U Tfall (block_code I) (arrow G) <- check_codeok U Tfall G I.
check_block_val :
   check_block U1 T1 (block_val V) (box T)
      <- infer_of V T'
      <- check_equiv T' T.
extract_ptp : program -> ptp -> type.
extract_ptp_nil : extract_ptp program_nil ptpnil.
extract_ptp_cons :
   extract_ptp (program_cons T' B P) (ptpcons T' U) <- extract_ptp P U.
check_prog : ptp -> program -> tp -> type.
check_prog_nil : check_prog U1 program_nil (box b0).
check_prog_cons :
   check_prog U (program_cons T' B P) T'
      <- kof T' kt
      <- check_prog U P Tfall
      <- check_block U Tfall B T'.
check_program : program -> type.
check_program_ :
   check_program P <- extract_ptp P U <- check_prog U P (arrow rt_init).
'eaddress : nat -> type.
'eaddr_reg : 'eaddress ww <- nat.
'eaddr_reglow : 'eaddress 1' <- nat.
'eaddr_reghigh : 'eaddress 1' <- nat.
'eaddr_deref : (Pi N:nat. 'eaddress N) <- binary wwb <- nat <- nat <- nat.
'oper : nat -> type.
'oper_rm : 'oper N <- 'eaddress N.
'oper_imm : 'oper N <- astring.
'oper_pcrel : 'oper ww <- binary wwb.
'iinst : type.
'ii_add : Pi Nsz:nat. 'iinst <- 'oper Nsz <- 'eaddress Nsz.
'ii_and : Pi Nsz:nat. 'iinst <- 'oper Nsz <- 'eaddress Nsz.
'ii_call : 'iinst <- 'oper ww.
'ii_cmp : Pi Nsz:nat. 'iinst <- 'oper Nsz <- 'eaddress Nsz.
'ii_jecxz : 'iinst <- 'oper ww.
'ii_jcc : 'iinst <- 'oper ww <- icond.
'ii_jmp : 'iinst <- 'oper ww.
'ii_mov : Pi Nsz:nat. 'iinst <- 'oper Nsz <- 'eaddress Nsz.
'ii_movsx : Pi Ndsz:nat. Pi Nosz:nat. 'iinst <- 'oper Nosz <- 'eaddress Ndsz.
'ii_movzx : Pi Ndsz:nat. Pi Nosz:nat. 'iinst <- 'oper Nosz <- 'eaddress Ndsz.
'ii_nop : 'iinst.
'ii_or : Pi Nsz:nat. 'iinst <- 'oper Nsz <- 'eaddress Nsz.
'ii_pop : 'iinst <- 'eaddress ww.
'ii_push : 'iinst <- 'oper ww.
'ii_ret : 'iinst.
'ii_sar : Pi Nsz:nat. 'iinst <- 'oper 1' <- 'eaddress Nsz.
'ii_shl : Pi Nsz:nat. 'iinst <- 'oper 1' <- 'eaddress Nsz.
'ii_shr : Pi Nsz:nat. 'iinst <- 'oper 1' <- 'eaddress Nsz.
'ii_sub : Pi Nsz:nat. 'iinst <- 'oper Nsz <- 'eaddress Nsz.
'ii_xor : Pi Nsz:nat. 'iinst <- 'oper Nsz <- 'eaddress Nsz.
adjust_add_oper : 'oper ww -> binary wwb -> 'oper ww -> type.
adjust_add_oper_rm : adjust_add_oper ('oper_rm E) BN ('oper_rm E).
adjust_add_oper_imm : adjust_add_oper ('oper_imm I) BN ('oper_imm I).
adjust_add_oper_pcrel :
   adjust_add_oper ('oper_pcrel BN1) BN ('oper_pcrel BN2) <- add BN1 BN BN2 
zero.
parse_reg8 : binary 3' -> 'eaddress 1' -> type.
parse_reg8_0 : parse_reg8 0_3 ('eaddr_reglow eax).
parse_reg8_1 : parse_reg8 1_3 ('eaddr_reglow ecx).
parse_reg8_2 : parse_reg8 2_3 ('eaddr_reglow edx).
parse_reg8_3 : parse_reg8 3_3 ('eaddr_reglow ebx).
parse_reg8_4 : parse_reg8 4_3 ('eaddr_reghigh eax).
parse_reg8_5 : parse_reg8 5_3 ('eaddr_reghigh ecx).
parse_reg8_6 : parse_reg8 6_3 ('eaddr_reghigh edx).
parse_reg8_7 : parse_reg8 7_3 ('eaddr_reghigh ebx).
parse_si_disp :
   nat -> nat -> binary 3' -> astring
      -> Pi Nsz:nat. 'eaddress Nsz -> binary wwb -> astring -> type.
parse_si_disp_0 :
   parse_si_disp Sc In 0_3 S Nsz ('eaddr_deref eax Sc In 0_32 Nsz) 0_32 S.
parse_si_disp_1 :
   parse_si_disp Sc In 1_3 S Nsz ('eaddr_deref ecx Sc In 0_32 Nsz) 0_32 S.
parse_si_disp_2 :
   parse_si_disp Sc In 2_3 S Nsz ('eaddr_deref edx Sc In 0_32 Nsz) 0_32 S.
parse_si_disp_3 :
   parse_si_disp Sc In 3_3 S Nsz ('eaddr_deref ebx Sc In 0_32 Nsz) 0_32 S.
parse_si_disp_4 :
   parse_si_disp Sc In 4_3 S Nsz ('eaddr_deref esp Sc In 0_32 Nsz) 0_32 S.
parse_si_disp_6 :
   parse_si_disp Sc In 6_3 S Nsz ('eaddr_deref esi Sc In 0_32 Nsz) 0_32 S.
parse_si_disp_7 :
   parse_si_disp Sc In 7_3 S Nsz ('eaddr_deref edi Sc In 0_32 Nsz) 0_32 S.
decode_mbyte :
   binary 2' -> binary 3' -> astring
      -> Pi Nsz:nat. 'eaddress Nsz -> binary wwb -> astring -> type.
decode_mbyte_00 :
   decode_mbyte 0_2 0_3 S Nsz ('eaddr_deref eax 0' eax 0_32 Nsz) 0_32 S.
decode_mbyte_01 :
   decode_mbyte 0_2 1_3 S Nsz ('eaddr_deref ecx 0' eax 0_32 Nsz) 0_32 S.
decode_mbyte_02 :
   decode_mbyte 0_2 2_3 S Nsz ('eaddr_deref edx 0' eax 0_32 Nsz) 0_32 S.
decode_mbyte_03 :
   decode_mbyte 0_2 3_3 S Nsz ('eaddr_deref ebx 0' eax 0_32 Nsz) 0_32 S.
decode_mbyte_04 :
   decode_mbyte 0_2 4_3 (| ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 B67)))))) S) Nsz Ea BN' S'
      <- decode_si B67 ($ B3 ($ B4 ($ B5 nil$))) Scale Index
      <- parse_si_disp Scale Index ($ B0 ($ B1 ($ B2 nil$))) S Nsz Ea BN S'
      <- add BN 1_32 BN' zero.
decode_mbyte_06 :
   decode_mbyte 0_2 6_3 S Nsz ('eaddr_deref esi 0' eax 0_32 Nsz) 0_32 S.
decode_mbyte_07 :
   decode_mbyte 0_2 7_3 S Nsz ('eaddr_deref edi 0' eax 0_32 Nsz) 0_32 S.
decode_mbyte_10 :
   decode_mbyte 1_2 0_3 (| B S) Nsz ('eaddr_deref eax 0' eax B' Nsz) 1_32 S
      <- asignextend B B'.
decode_mbyte_11 :
   decode_mbyte 1_2 1_3 (| B S) Nsz ('eaddr_deref ecx 0' eax B' Nsz) 1_32 S
      <- asignextend B B'.
decode_mbyte_12 :
   decode_mbyte 1_2 2_3 (| B S) Nsz ('eaddr_deref edx 0' eax B' Nsz) 1_32 S
      <- asignextend B B'.
decode_mbyte_13 :
   decode_mbyte 1_2 3_3 (| B S) Nsz ('eaddr_deref ebx 0' eax B' Nsz) 1_32 S
      <- asignextend B B'.
decode_mbyte_14 :
   decode_mbyte 1_2 4_3 (| ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 B67)))))) (| B S)) Nsz
      ('eaddr_deref Base Scale Index B' Nsz) 2_32 S
      <- decode_reg ($ B0 ($ B1 ($ B2 nil$))) Base
      <- decode_si B67 ($ B3 ($ B4 ($ B5 nil$))) Scale Index
      <- asignextend B B'.
decode_mbyte_15 :
   decode_mbyte 1_2 5_3 (| B S) Nsz ('eaddr_deref ebp 0' eax B' Nsz) 1_32 S
      <- asignextend B B'.
decode_mbyte_16 :
   decode_mbyte 1_2 6_3 (| B S) Nsz ('eaddr_deref esi 0' eax B' Nsz) 1_32 S
      <- asignextend B B'.
decode_mbyte_17 :
   decode_mbyte 1_2 7_3 (| B S) Nsz ('eaddr_deref edi 0' eax B' Nsz) 1_32 S
      <- asignextend B B'.
decode_mbyte_20 :
   decode_mbyte 2_2 0_3 (| B0 (| B1 (| B2 (| B3 S)))) Nsz
      ('eaddr_deref eax 0' eax B Nsz) 4_32 S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_mbyte_21 :
   decode_mbyte 2_2 1_3 (| B0 (| B1 (| B2 (| B3 S)))) Nsz
      ('eaddr_deref ecx 0' eax B Nsz) 4_32 S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_mbyte_22 :
   decode_mbyte 2_2 2_3 (| B0 (| B1 (| B2 (| B3 S)))) Nsz
      ('eaddr_deref edx 0' eax B Nsz) 4_32 S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_mbyte_23 :
   decode_mbyte 2_2 3_3 (| B0 (| B1 (| B2 (| B3 S)))) Nsz
      ('eaddr_deref ebx 0' eax B Nsz) 4_32 S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_mbyte_24 :
   decode_mbyte 2_2 4_3
      (| ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 B67)))))) (| By0 (| By1 (| By2 (| By3 S))))) Nsz
      ('eaddr_deref Base Scale Index B' Nsz) 5_32 S
      <- decode_reg ($ B0 ($ B1 ($ B2 nil$))) Base
      <- decode_si B67 ($ B3 ($ B4 ($ B5 nil$))) Scale Index
      <- implode_word (/ By0 (/ By1 (/ By2 (/ By3 #)))) B'.
decode_mbyte_25 :
   decode_mbyte 2_2 5_3 (| B0 (| B1 (| B2 (| B3 S)))) Nsz
      ('eaddr_deref ebp 0' eax B Nsz) 4_32 S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_mbyte_26 :
   decode_mbyte 2_2 6_3 (| B0 (| B1 (| B2 (| B3 S)))) Nsz
      ('eaddr_deref esi 0' eax B Nsz) 4_32 S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_mbyte_27 :
   decode_mbyte 2_2 7_3 (| B0 (| B1 (| B2 (| B3 S)))) Nsz
      ('eaddr_deref edi 0' eax B Nsz) 4_32 S
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B.
decode_mbyte_30 : decode_mbyte 3_2 0_3 S ww ('eaddr_reg eax) 0_32 S.
decode_mbyte_31 : decode_mbyte 3_2 1_3 S ww ('eaddr_reg ecx) 0_32 S.
decode_mbyte_32 : decode_mbyte 3_2 2_3 S ww ('eaddr_reg edx) 0_32 S.
decode_mbyte_33 : decode_mbyte 3_2 3_3 S ww ('eaddr_reg ebx) 0_32 S.
decode_mbyte_34 : decode_mbyte 3_2 4_3 S ww ('eaddr_reg esp) 0_32 S.
decode_mbyte_35 : decode_mbyte 3_2 5_3 S ww ('eaddr_reg ebp) 0_32 S.
decode_mbyte_36 : decode_mbyte 3_2 6_3 S ww ('eaddr_reg esi) 0_32 S.
decode_mbyte_37 : decode_mbyte 3_2 7_3 S ww ('eaddr_reg edi) 0_32 S.
decode_mbyte_30_8 : decode_mbyte 3_2 0_3 S 1' ('eaddr_reglow eax) 0_32 S.
decode_mbyte_31_8 : decode_mbyte 3_2 1_3 S 1' ('eaddr_reglow ecx) 0_32 S.
decode_mbyte_32_8 : decode_mbyte 3_2 2_3 S 1' ('eaddr_reglow edx) 0_32 S.
decode_mbyte_33_8 : decode_mbyte 3_2 3_3 S 1' ('eaddr_reglow ebx) 0_32 S.
decode_mbyte_34_8 : decode_mbyte 3_2 4_3 S 1' ('eaddr_reghigh eax) 0_32 S.
decode_mbyte_35_8 : decode_mbyte 3_2 5_3 S 1' ('eaddr_reghigh ecx) 0_32 S.
decode_mbyte_36_8 : decode_mbyte 3_2 6_3 S 1' ('eaddr_reghigh edx) 0_32 S.
decode_mbyte_37_8 : decode_mbyte 3_2 7_3 S 1' ('eaddr_reghigh ebx) 0_32 S.
parse_mbyte :
   binary bw -> astring -> binary 3'
      -> Pi Nsz:nat. 'eaddress Nsz -> binary wwb -> astring -> type.
parse_mbyte_ :
   parse_mbyte ($ B0 ($ B1 ($ B2 ($ B3 ($ B4 ($ B5 B67)))))) AS ($ B3 ($ B4 ($ B5 nil$))) Nsz
      EA N AS'
      <- decode_mbyte B67 ($ B0 ($ B1 ($ B2 nil$))) AS Nsz EA N AS'.
parse_eax :
   (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring -> 'iinst
      -> binary wwb -> astring -> type.
parse_eax_ :
   parse_eax (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o)
      (| B0 (| B1 (| B2 (| B3 AS))))
      (I ww ('eaddr_reg eax) ('oper_imm (| B0 (| B1 (| B2 (| B3 ##)))))) 5_32 AS.
parse_al :
   (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring -> 'iinst
      -> binary wwb -> astring -> type.
parse_al_ :
   parse_al (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o) (| B0 AS)
      (I 1' ('eaddr_reglow eax) ('oper_imm (| B0 ##))) 2_32 AS.
parse_m :
   binary 3' -> ('eaddress ww -> 'iinst) -> astring -> 'iinst -> binary wwb
      -> astring -> type.
parse_m_ :
   parse_m B (\ea:'eaddress ww. I ea) (| Bmodrm AS) (I EA) BN' AS'
      <- parse_mbyte Bmodrm AS B ww EA BN AS'
      <- add 2_32 BN BN' zero.
parse_m8 :
   binary 3' -> ('eaddress 1' -> 'iinst) -> astring -> 'iinst -> binary wwb
      -> astring -> type.
parse_m8_ :
   parse_m8 B (\ea:'eaddress 1'. I ea) (| Bmodrm AS) (I EA) BN' AS'
      <- parse_mbyte Bmodrm AS B 1' EA BN AS'
      <- add 2_32 BN BN' zero.
parse_mi :
   binary 3' -> (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring
      -> 'iinst -> binary wwb -> astring -> type.
parse_mi_ :
   parse_mi B (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o)
      (| Bmodrm AS) (I ww EA ('oper_imm (| B0 (| B1 (| B2 (| B3 ##)))))) BN' AS'
      <- parse_mbyte Bmodrm AS B ww EA BN (| B0 (| B1 (| B2 (| B3 AS'))))
      <- add 6_32 BN BN' zero.
parse_mi_oper8 :
   binary 3' -> (Pi Nsz:nat. 'eaddress Nsz -> 'oper 1' -> 'iinst) -> astring
      -> 'iinst -> binary wwb -> astring -> type.
parse_mi_oper8_ :
   parse_mi_oper8 B (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper 1'. I Nsz ea o)
      (| Bmodrm AS) (I ww EA ('oper_imm (| B0 ##))) BN' AS'
      <- parse_mbyte Bmodrm AS B ww EA BN (| B0 AS')
      <- add 3_32 BN BN' zero.
parse_mi8 :
   binary 3' -> (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring
      -> 'iinst -> binary wwb -> astring -> type.
parse_mi8_ :
   parse_mi8 B (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o)
      (| Bmodrm AS) (I 1' EA ('oper_imm (| B0 ##))) BN' AS'
      <- parse_mbyte Bmodrm AS B 1' EA BN (| B0 AS')
      <- add 3_32 BN BN' zero.
parse_mi8_oper8 :
   binary 3' -> (Pi Nsz:nat. 'eaddress Nsz -> 'oper 1' -> 'iinst) -> astring
      -> 'iinst -> binary wwb -> astring -> type.
parse_mi8_oper8_ :
   parse_mi8_oper8 B (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper 1'. I Nsz ea o)
      (| Bmodrm AS) (I 1' EA ('oper_imm (| B0 ##))) BN' AS'
      <- parse_mbyte Bmodrm AS B 1' EA BN (| B0 AS')
      <- add 3_32 BN BN' zero.
parse_mib :
   binary 3' -> (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring
      -> 'iinst -> binary wwb -> astring -> type.
parse_mib_ :
   parse_mib B (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o)
      (| Bmodrm AS) (I ww EA ('oper_imm (| B0 (| Bext (| Bext (| Bext ##)))))) BN' AS'
      <- parse_mbyte Bmodrm AS B ww EA BN (| B0 AS')
      <- add 3_32 BN BN' zero
      <- signextend_byte B0 Bext.
parse_mr :
   (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring -> 'iinst
      -> binary wwb -> astring -> type.
parse_mr_ :
   parse_mr (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o)
      (| Bmodrm AS) (I ww EA ('oper_rm ('eaddr_reg REG))) BN' AS'
      <- parse_mbyte Bmodrm AS Breg ww EA BN AS'
      <- decode_reg Breg REG
      <- add 2_32 BN BN' zero.
parse_mr8 :
   (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring -> 'iinst
      -> binary wwb -> astring -> type.
parse_mr8_ :
   parse_mr8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o)
      (| Bmodrm AS) (I 1' EA ('oper_rm EREG)) BN' AS'
      <- parse_mbyte Bmodrm AS Breg 1' EA BN AS'
      <- parse_reg8 Breg EREG
      <- add 2_32 BN BN' zero.
parse_rm :
   (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring -> 'iinst
      -> binary wwb -> astring -> type.
parse_rm_ :
   parse_rm (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o)
      (| Bmodrm AS) (I ww ('eaddr_reg REG) ('oper_rm EA)) BN' AS'
      <- parse_mbyte Bmodrm AS Breg ww EA BN AS'
      <- decode_reg Breg REG
      <- add 2_32 BN BN' zero.
parse_rm_oper8 :
   (Pi Ndsz:nat. Pi Nosz:nat. 'eaddress Ndsz -> 'oper Nosz -> 'iinst) -> 
astring
      -> 'iinst -> binary wwb -> astring -> type.
parse_rm_oper8_ :
   parse_rm_oper8
      (\Ndsz:nat. \Nosz:nat. \ea:'eaddress Ndsz. \o:'oper Nosz. I Ndsz Nosz ea o)
      (| Bmodrm AS) (I ww 1' ('eaddr_reg REG) ('oper_rm EA)) BN' AS'
      <- parse_mbyte Bmodrm AS Breg 1' EA BN AS'
      <- decode_reg Breg REG
      <- add 3_32 BN BN' zero.
parse_rm8 :
   (Pi Nsz:nat. 'eaddress Nsz -> 'oper Nsz -> 'iinst) -> astring -> 'iinst
      -> binary wwb -> astring -> type.
parse_rm8_ :
   parse_rm8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. I Nsz ea o)
      (| Bmodrm AS) (I 1' EREG ('oper_rm EA)) BN' AS'
      <- parse_mbyte Bmodrm AS Breg 1' EA BN AS'
      <- parse_reg8 Breg EREG
      <- add 2_32 BN BN' zero.
parse_nr :
   ('oper ww -> 'iinst) -> astring -> 'iinst -> binary wwb -> astring -> type.
parse_nr_ :
   parse_nr (\o:'oper ww. I o) (| B0 (| B2 (| B3 (| B4 AS)))) (I ('oper_pcrel B'))
      5_32 AS
      <- implode_word (/ B0 (/ B2 (/ B3 (/ B4 #)))) B
      <- add B 5_32 B' B1.
parse_nai :
   binary 3' -> ('oper ww -> 'iinst) -> astring -> 'iinst -> binary wwb
      -> astring -> type.
parse_nai_ :
   parse_nai B (\o:'oper ww. I o) (| Bmodrm AS) (I ('oper_rm EA)) BN' AS'
      <- parse_mbyte Bmodrm AS B ww EA BN AS'
      <- add 2_32 BN BN' zero.
parse_sh :
   ('oper ww -> 'iinst) -> astring -> 'iinst -> binary wwb -> astring -> type.
parse_sh_ :
   parse_sh (\o:'oper ww. I o) (| B AS) (I ('oper_pcrel B'')) 2_32 AS
      <- asignextend B B'
      <- add B' 2_32 B'' B1.
%parse_m :
%   binary 3' -> ('eaddress ww -> 'iinst) -> astring -> 'iinst -> binary wwb
%      -> astring -> type.
%parse_m_ :
%   parse_m B (\ea:'eaddress ww. I ea) (| Bmodrm AS) (I EA) BN' AS'
%      <- parse_mbyte Bmodrm AS B ww EA BN AS'
%      <- add 2_32 BN BN' zero.
parse_r :
   binary 5' -> ('eaddress ww -> 'iinst) -> astring -> 'iinst -> binary wwb
      -> astring -> type.
parse_r_ :
   parse_r B (\ea:'eaddress ww. I ea) (| Bc AS) (I ('eaddr_reg R)) 1_32 AS
      <- parse_53 Bc B B20
      <- decode_reg B20 R.
parse_opcode : astring -> 'iinst -> binary wwb -> astring -> type.
parse_add_eax :
   parse_opcode (| 05_8 AS) I BN AS'
      <- parse_eax (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o)
            AS I BN AS'.
parse_add_al :
   parse_opcode (| 04_8 AS) I BN AS'
      <- parse_al (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o)
            AS I BN AS'.
parse_add_mi :
   parse_opcode (| 81_8 AS) I BN AS'
      <- parse_mi 0_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o) AS I
            BN AS'.
parse_add_mi8 :
   parse_opcode (| 80_8 AS) I BN AS'
      <- parse_mi8 0_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o) AS I
            BN AS'.
parse_add_mib :
   parse_opcode (| 83_8 AS) I BN AS'
      <- parse_mib 0_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o) AS I
            BN AS'.
parse_add_mr :
   parse_opcode (| 01_8 AS) I BN AS'
      <- parse_mr (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o)
            AS I BN AS'.
parse_add_mr8 :
   parse_opcode (| 00_8 AS) I BN AS'
      <- parse_mr8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o)
            AS I BN AS'.
parse_add_rm :
   parse_opcode (| 03_8 AS) I BN AS'
      <- parse_rm (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o)
            AS I BN AS'.
parse_add_rm8 :
   parse_opcode (| 02_8 AS) I BN AS'
      <- parse_rm8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_add Nsz ea o)
            AS I BN AS'.
parse_and_eax :
   parse_opcode (| 25_8 AS) I BN AS'
      <- parse_eax (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o)
            AS I BN AS'.
parse_and_al :
   parse_opcode (| 24_8 AS) I BN AS'
      <- parse_al (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o)
            AS I BN AS'.
parse_and_mi :
   parse_opcode (| 81_8 AS) I BN AS'
      <- parse_mi 4_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o) AS I
            BN AS'.
parse_and_mi8 :
   parse_opcode (| 80_8 AS) I BN AS'
      <- parse_mi8 4_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o) AS I
            BN AS'.
parse_and_mib :
   parse_opcode (| 83_8 AS) I BN AS'
      <- parse_mib 4_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o) AS I
            BN AS'.
parse_and_mr :
   parse_opcode (| 21_8 AS) I BN AS'
      <- parse_mr (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o)
            AS I BN AS'.
parse_and_mr8 :
   parse_opcode (| 20_8 AS) I BN AS'
      <- parse_mr8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o)
            AS I BN AS'.
parse_and_rm :
   parse_opcode (| 23_8 AS) I BN AS'
      <- parse_rm (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o)
            AS I BN AS'.
parse_and_rm8 :
   parse_opcode (| 22_8 AS) I BN AS'
      <- parse_rm8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_and Nsz ea o)
            AS I BN AS'.
parse_call_nr :
   parse_opcode (| e8_8 AS) I BN AS'
      <- parse_nr (\o:'oper ww. 'ii_call o) AS I BN AS'.
parse_call_nai :
   parse_opcode (| ff_8 AS) I BN AS'
      <- parse_nai 2_3 (\o:'oper ww. 'ii_call o) AS I BN AS'.
parse_cmp_eax :
   parse_opcode (| 3d_8 AS) I BN AS'
      <- parse_eax (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o)
            AS I BN AS'.
parse_cmp_al :
   parse_opcode (| 3c_8 AS) I BN AS'
      <- parse_al (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o)
            AS I BN AS'.
parse_cmp_mi :
   parse_opcode (| 81_8 AS) I BN AS'
      <- parse_mi 7_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o) AS I
            BN AS'.
parse_cmp_mi8 :
   parse_opcode (| 80_8 AS) I BN AS'
      <- parse_mi8 7_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o) AS I
            BN AS'.
parse_cmp_mib :
   parse_opcode (| 83_8 AS) I BN AS'
      <- parse_mib 7_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o) AS I
            BN AS'.
parse_cmp_mr :
   parse_opcode (| 39_8 AS) I BN AS'
      <- parse_mr (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o)
            AS I BN AS'.
parse_cmp_mr8 :
   parse_opcode (| 38_8 AS) I BN AS'
      <- parse_mr8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o)
            AS I BN AS'.
parse_cmp_rm :
   parse_opcode (| 3b_8 AS) I BN AS'
      <- parse_rm (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o)
            AS I BN AS'.
parse_cmp_rm8 :
   parse_opcode (| 3a_8 AS) I BN AS'
      <- parse_rm8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_cmp Nsz ea o)
            AS I BN AS'.
parse_jcc :
   parse_opcode (| 0f_8 (| Bc (| B0 (| B2 (| B3 (| B4 AS))))))
      ('ii_jcc IC ('oper_pcrel B')) 6_32 AS
      <- parse_44 Bc 8_4 Bc'
      <- decode_cond Bc' IC
      <- implode_word (/ B0 (/ B2 (/ B3 (/ B4 #)))) B
      <- add B 6_32 B' B1.
parse_jcc_sh :
   parse_opcode (| Bc (| B0 AS)) ('ii_jcc IC ('oper_pcrel B)) 2_32 AS
      <- parse_44 Bc 7_4 Bc'
      <- decode_cond Bc' IC
      <- asignextend B0 B'
      <- add B' 2_32 B B1.
parse_jecxz :
   parse_opcode (| e3_8 AS) I BN AS'
      <- parse_sh (\o:'oper ww. 'ii_jecxz o) AS I BN AS'.
parse_jmp_sh :
   parse_opcode (| eb_8 AS) I BN AS'
      <- parse_sh (\o:'oper ww. 'ii_jmp o) AS I BN AS'.
parse_jmp_nr :
   parse_opcode (| e9_8 AS) I BN AS'
      <- parse_nr (\o:'oper ww. 'ii_jmp o) AS I BN AS'.
parse_jmp_nai :
   parse_opcode (| ff_8 AS) I BN AS'
      <- parse_nai 4_3 (\o:'oper ww. 'ii_jmp o) AS I BN AS'.
parse_mov_mi :
   parse_opcode (| c7_8 AS) I BN AS'
      <- parse_mi 0_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_mov Nsz ea o) AS I
            BN AS'.
parse_mov_mi8 :
   parse_opcode (| c6_8 AS) I BN AS'
      <- parse_mi8 0_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_mov Nsz ea o) AS I
            BN AS'.
parse_mov_mr :
   parse_opcode (| 89_8 AS) I BN AS'
      <- parse_mr (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_mov Nsz ea o)
            AS I BN AS'.
parse_mov_mr8 :
   parse_opcode (| 88_8 AS) I BN AS'
      <- parse_mr8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_mov Nsz ea o)
            AS I BN AS'.
parse_mov_ri :
   parse_opcode (| Bc (| B0 (| B1 (| B2 (| B3 AS)))))
      ('ii_mov ww ('eaddr_reg R) ('oper_imm (| B0 (| B1 (| B2 (| B3 ##)))))) 5_32 AS
      <- parse_53 Bc 17_5 B20
      <- decode_reg B20 R.
parse_mov_ri8 :
   parse_opcode (| Bc (| B0 AS)) ('ii_mov 1' R ('oper_imm (| B0 ##))) 2_32 AS
      <- parse_53 Bc 16_5 B20
      <- parse_reg8 B20 R.
parse_mov_rm :
   parse_opcode (| 8b_8 AS) I BN AS'
      <- parse_rm (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_mov Nsz ea o)
            AS I BN AS'.
parse_mov_rm8 :
   parse_opcode (| 8a_8 AS) I BN AS'
      <- parse_rm8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_mov Nsz ea o)
            AS I BN AS'.
parse_movsx :
   parse_opcode (| 0f_8 (| be_8 AS)) I BN AS'
      <- parse_rm_oper8
            (\Ndsz:nat. \Nosz:nat. \ea:'eaddress Ndsz. \o:'oper Nosz.
                'ii_movsx Ndsz Nosz ea o) AS I BN
            AS'.
parse_movzx :
   parse_opcode (| 0f_8 (| b6_8 AS)) I BN AS'
      <- parse_rm_oper8
            (\Ndsz:nat. \Nosz:nat. \ea:'eaddress Ndsz. \o:'oper Nosz.
                'ii_movzx Ndsz Nosz ea o) AS I BN
            AS'.
parse_nop : parse_opcode (| 90_8 AS) 'ii_nop 1_32 AS.
parse_or_eax :
   parse_opcode (| 0d_8 AS) I BN AS'
      <- parse_eax (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o)
            AS I BN AS'.
parse_or_al :
   parse_opcode (| 0c_8 AS) I BN AS'
      <- parse_al (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o)
            AS I BN AS'.
parse_or_mi :
   parse_opcode (| 81_8 AS) I BN AS'
      <- parse_mi 1_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o) AS I BN
            AS'.
parse_or_mi8 :
   parse_opcode (| 80_8 AS) I BN AS'
      <- parse_mi8 1_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o) AS I BN
            AS'.
parse_or_mib :
   parse_opcode (| 83_8 AS) I BN AS'
      <- parse_mib 1_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o) AS I BN
            AS'.
parse_or_mr :
   parse_opcode (| 09_8 AS) I BN AS'
      <- parse_mr (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o)
            AS I BN AS'.
parse_or_mr8 :
   parse_opcode (| 08_8 AS) I BN AS'
      <- parse_mr8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o)
            AS I BN AS'.
parse_or_rm :
   parse_opcode (| 0b_8 AS) I BN AS'
      <- parse_rm (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o)
            AS I BN AS'.
parse_or_rm8 :
   parse_opcode (| 0a_8 AS) I BN AS'
      <- parse_rm8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_or Nsz ea o)
            AS I BN AS'.
parse_pop_m :
   parse_opcode (| 8f_8 AS) I BN AS'
      <- parse_m 0_3 (\ea:'eaddress ww. 'ii_pop ea) AS I BN AS'.
parse_pop_r :
   parse_opcode AS I BN AS'
      <- parse_r 0b_5 (\ea:'eaddress ww. 'ii_pop ea) AS I BN AS'.
parse_push_m :
   parse_opcode (| ff_8 AS) I BN AS'
      <- parse_m 6_3 (\ea:'eaddress ww. 'ii_push ('oper_rm ea)) AS I BN AS'.
parse_push_r :
   parse_opcode AS I BN AS'
      <- parse_r 0a_5 (\ea:'eaddress ww. 'ii_push ('oper_rm ea)) AS I BN AS'.
parse_push_i :
   parse_opcode (| 68_8 (| B0 (| B1 (| B2 (| B3 AS)))))
      ('ii_push ('oper_imm (| B0 (| B1 (| B2 (| B3 ##)))))) 5_32 AS.
parse_push_ib :
   parse_opcode (| 6a_8 (| B AS))
      ('ii_push ('oper_imm (| B (| 00_8 (| 00_8 (| 00_8 ##)))))) 2_32 AS.
parse_ret : parse_opcode (| c3_8 AS) 'ii_ret 1_32 AS.
parse_shl_imm8 :
   parse_opcode (| c0_8 AS) I BN AS'
      <- parse_mi8_oper8 4_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper 1'. 'ii_shl Nsz ea o) AS I BN
            AS'.
parse_shr_imm8 :
   parse_opcode (| c0_8 AS) I BN AS'
      <- parse_mi8_oper8 5_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper 1'. 'ii_shr Nsz ea o) AS I BN
            AS'.
parse_sar_imm8 :
   parse_opcode (| c0_8 AS) I BN AS'
      <- parse_mi8_oper8 7_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper 1'. 'ii_sar Nsz ea o) AS I BN
            AS'.
parse_shl_imm :
   parse_opcode (| c1_8 AS) I BN AS'
      <- parse_mi_oper8 4_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper 1'. 'ii_shl Nsz ea o) AS I BN
            AS'.
parse_shr_imm :
   parse_opcode (| c1_8 AS) I BN AS'
      <- parse_mi_oper8 5_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper 1'. 'ii_shr Nsz ea o) AS I BN
            AS'.
parse_sar_imm :
   parse_opcode (| c1_8 AS) I BN AS'
      <- parse_mi_oper8 7_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper 1'. 'ii_sar Nsz ea o) AS I BN
            AS'.
parse_shl_one8 :
   parse_opcode (| d0_8 AS) I BN AS'
      <- parse_m8 4_3 (\ea:'eaddress 1'. 'ii_shl 1' ea ('oper_imm (| 01_8 ##))) AS
            I BN AS'.
parse_shr_one8 :
   parse_opcode (| d0_8 AS) I BN AS'
      <- parse_m8 5_3 (\ea:'eaddress 1'. 'ii_shr 1' ea ('oper_imm (| 01_8 ##))) AS
            I BN AS'.
parse_sar_one8 :
   parse_opcode (| d0_8 AS) I BN AS'
      <- parse_m8 7_3 (\ea:'eaddress 1'. 'ii_sar 1' ea ('oper_imm (| 01_8 ##))) AS
            I BN AS'.
parse_shl_one :
   parse_opcode (| d1_8 AS) I BN AS'
      <- parse_m 4_3 (\ea:'eaddress ww. 'ii_shl ww ea ('oper_imm (| 01_8 ##)))
            AS I BN AS'.
parse_shr_one :
   parse_opcode (| d1_8 AS) I BN AS'
      <- parse_m 5_3 (\ea:'eaddress ww. 'ii_shr ww ea ('oper_imm (| 01_8 ##)))
            AS I BN AS'.
parse_sar_one :
   parse_opcode (| d1_8 AS) I BN AS'
      <- parse_m 7_3 (\ea:'eaddress ww. 'ii_sar ww ea ('oper_imm (| 01_8 ##)))
            AS I BN AS'.
parse_shl_cl8 :
   parse_opcode (| d2_8 AS) I BN AS'
      <- parse_m8 4_3
            (\ea:'eaddress 1'. 'ii_shl 1' ea ('oper_rm ('eaddr_reglow ecx))) AS I
            BN AS'.
parse_shr_cl8 :
   parse_opcode (| d2_8 AS) I BN AS'
      <- parse_m8 5_3
            (\ea:'eaddress 1'. 'ii_shr 1' ea ('oper_rm ('eaddr_reglow ecx))) AS I
            BN AS'.
parse_sar_cl8 :
   parse_opcode (| d2_8 AS) I BN AS'
      <- parse_m8 7_3
            (\ea:'eaddress 1'. 'ii_sar 1' ea ('oper_rm ('eaddr_reglow ecx))) AS I
            BN AS'.
parse_shl_cl :
   parse_opcode (| d3_8 AS) I BN AS'
      <- parse_m 4_3
            (\ea:'eaddress ww. 'ii_shl ww ea ('oper_rm ('eaddr_reglow ecx))) AS
            I BN AS'.
parse_shr_cl :
   parse_opcode (| d3_8 AS) I BN AS'
      <- parse_m 5_3
            (\ea:'eaddress ww. 'ii_shr ww ea ('oper_rm ('eaddr_reglow ecx))) AS
            I BN AS'.
parse_sar_cl :
   parse_opcode (| d3_8 AS) I BN AS'
      <- parse_m 7_3
            (\ea:'eaddress ww. 'ii_sar ww ea ('oper_rm ('eaddr_reglow ecx))) AS
            I BN AS'.
parse_sub_eax :
   parse_opcode (| 2d_8 AS) I BN AS'
      <- parse_eax (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o)
            AS I BN AS'.
parse_sub_al :
   parse_opcode (| 2c_8 AS) I BN AS'
      <- parse_al (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o)
            AS I BN AS'.
parse_sub_mi :
   parse_opcode (| 81_8 AS) I BN AS'
      <- parse_mi 5_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o) AS I
            BN AS'.
parse_sub_mi8 :
   parse_opcode (| 80_8 AS) I BN AS'
      <- parse_mi8 5_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o) AS I
            BN AS'.
parse_sub_mib :
   parse_opcode (| 83_8 AS) I BN AS'
      <- parse_mib 5_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o) AS I
            BN AS'.
parse_sub_mr :
   parse_opcode (| 29_8 AS) I BN AS'
      <- parse_mr (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o)
            AS I BN AS'.
parse_sub_mr8 :
   parse_opcode (| 28_8 AS) I BN AS'
      <- parse_mr8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o)
            AS I BN AS'.
parse_sub_rm :
   parse_opcode (| 2b_8 AS) I BN AS'
      <- parse_rm (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o)
            AS I BN AS'.
parse_sub_rm8 :
   parse_opcode (| 2a_8 AS) I BN AS'
      <- parse_rm8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_sub Nsz ea o)
            AS I BN AS'.
parse_xor_eax :
   parse_opcode (| 35_8 AS) I BN AS'
      <- parse_eax (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o)
            AS I BN AS'.
parse_xor_al :
   parse_opcode (| 34_8 AS) I BN AS'
      <- parse_al (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o)
            AS I BN AS'.
parse_xor_mi :
   parse_opcode (| 81_8 AS) I BN AS'
      <- parse_mi 6_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o) AS I
            BN AS'.
parse_xor_mi8 :
   parse_opcode (| 80_8 AS) I BN AS'
      <- parse_mi8 6_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o) AS I
            BN AS'.
parse_xor_mib :
   parse_opcode (| 83_8 AS) I BN AS'
      <- parse_mib 6_3
            (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o) AS I
            BN AS'.
parse_xor_mr :
   parse_opcode (| 31_8 AS) I BN AS'
      <- parse_mr (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o)
            AS I BN AS'.
parse_xor_mr8 :
   parse_opcode (| 30_8 AS) I BN AS'
      <- parse_mr8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o)
            AS I BN AS'.
parse_xor_rm :
   parse_opcode (| 33_8 AS) I BN AS'
      <- parse_rm (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o)
            AS I BN AS'.
parse_xor_rm8 :
   parse_opcode (| 32_8 AS) I BN AS'
      <- parse_rm8 (\Nsz:nat. \ea:'eaddress Nsz. \o:'oper Nsz. 'ii_xor Nsz ea o)
            AS I BN AS'.
parse_runfac : nat -> runfac N1 -> type.
parse_malloc : parse_runfac 0' irf_malloc.
parse_mallocarr : parse_runfac 4' irf_mallocarr.
parse_mallocarrb : parse_runfac 8' irf_mallocarrb.
labelidx : type.
labelidx_nil : labelidx.
labelidx_cons : labelidx <- labelidx <- binary wwb.
parse_label : labelidx -> binary wwb -> nat -> type.
parse_label_z : parse_label (labelidx_cons BN LI1) BN 0'.
parse_label_s :
   parse_label (labelidx_cons B1 LI) BN (s N) <- parse_label LI BN N.
parse_val : astring -> 'val -> binary wwb -> astring -> type.
parse_val_list : astring -> 'val_list -> binary wwb -> astring -> type.
parse_nonempty_val_list :
   astring -> 'nonempty_val_list -> binary wwb -> astring -> type.
parse_val_list_nil : parse_val_list AS 'val_nil 0_32 AS.
parse_val_list_cons :
   parse_val_list AS ('val_cons V VL) BN3 AS2
      <- parse_val AS V BN1 AS1
      <- parse_val_list AS1 VL BN2 AS2
      <- add BN1 BN2 BN3 zero.
parse_nonempty_val_list_one :
   parse_nonempty_val_list AS ('nonempty_val_one V) BN AS'
      <- parse_val AS V BN AS'.
parse_nonempty_val_list_cons :
   parse_nonempty_val_list AS ('nonempty_val_cons V NEVL) BN3 AS2
      <- parse_val AS V BN1 AS1
      <- parse_nonempty_val_list AS1 NEVL BN2 AS2
      <- add BN1 BN2 BN3 zero.
parse_val_lit : parse_val (| B AS) ('lit B) 1_32 AS.
parse_val_junk : parse_val (| B1 AS) 'junk 1_32 AS.
parse_val_sing_1 : parse_val (| B' AS) ('sing 1' B) 1_32 AS <- pad 8' B B'.
parse_val_sing_2 :
   parse_val (| B0 (| B1 AS)) ('sing 2' B) 2_32 AS
      <- pad 16' B B'
      <- implode_word_2 (/ B0 (/ B1 #)) B'.
parse_val_sing_3 :
   parse_val (| B0 (| B1 (| B2 AS))) ('sing 3' B) 3_32 AS
      <- pad 24' B B'
      <- implode_word_3 (/ B0 (/ B1 (/ B2 #))) B'.
parse_val_sing_4 :
   parse_val (| B0 (| B1 (| B2 (| B3 AS)))) ('sing 4' B) 4_32 AS
      <- pad 32' B B'
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B'.
parse_val_vcoerce :
   parse_val AS ('vcoerce Q1 V) BN AS' <- parse_val AS V BN AS'.
parse_val_vlam :
   parse_val AS ('lam K1 R1 (\t:tp. V t)) BN AS'
      <- (Pi t:tp. parse_val AS (V t) BN AS').
parse_val_varray :
   parse_val AS ('array VL) BN AS' <- parse_val_list AS VL BN AS'.
parse_val_hom_array :
   parse_val AS ('hom_array NEVL) BN AS'
      <- parse_nonempty_val_list AS NEVL BN AS'.
parse_val_vnull : parse_val AS 'null 0_32 AS.
parse_eaddress : 'eaddress N1 -> 'operand -> type.
parse_eaddress_reg :
   parse_eaddress ('eaddr_reg IREG) ('rco (rg IREG)) <- lt IREG esp.
parse_eaddress_reglow :
   parse_eaddress ('eaddr_reglow IREG) ('rnbyte Q1 (rg IREG) 0') <- leq IREG ebx.
parse_eaddress_reghigh :
   parse_eaddress ('eaddr_reghigh IREG) ('rnbyte Q1 (rg IREG) 1') <- leq IREG 
ebx.
parse_eaddress_sp : parse_eaddress ('eaddr_reg esp) 'spco.
strip_ocoerce : 'operand -> 'operand -> type.
strip_ocoerce_ocoerce : strip_ocoerce ('ocoerce Q1 O) O.
strip_ocoerce_rco : strip_ocoerce ('rco R) ('rco R).
parse_eaddress_mco :
   parse_eaddress ('eaddr_deref IREG 0' N1 B Nsz) ('mco Nsz O N)
      <- strip_ocoerce O ('rco (rg IREG))
      <- lt z Nsz
      <- infer_represents B N
      <- lt IREG esp.
parse_eaddress_zco :
   parse_eaddress ('eaddr_deref IREG 0' N1 B Nsz) ('zco Nsz O N N2)
      <- strip_ocoerce O ('rco (rg IREG))
      <- lt z Nsz
      <- infer_represents B N
      <- lt IREG esp.
parse_eaddress_imco :
   parse_eaddress ('eaddr_deref Base Scale Index Disp Nsz)
      ('imco Nsz Obase N Oindex Scale)
      <- strip_ocoerce Obase ('rco (rg Base))
      <- strip_ocoerce Oindex ('rco (rg Index))
      <- lt z Nsz
      <- infer_represents Disp N
      <- lt Base esp
      <- lt Index esp.
parse_operand :
   labelidx -> binary wwb -> 'oper N1 -> 'operand -> type.
parse_operand_pcrel :
   parse_operand LI BNpos ('oper_pcrel BNoff) ('labref N)
      <- highbit BNoff BIToff B1
      <- add BNoff BNpos BNres BIToff
      <- parse_label LI BNres N.
parse_operand_rm : parse_operand LI1 B1 ('oper_rm EA) O <- parse_eaddress EA O.
parse_operand_imm :
   parse_operand LI1 B2 ('oper_imm AS) ('im V) <- parse_val AS V B1 ##.
parse_operand_coerce :
   parse_operand LI BN O ('ocoerce Q O1) <- parse_operand LI BN O O1.
parse_dest : 'eaddress N1 -> 'dest -> type.
parse_dest_reg : parse_dest ('eaddr_reg IREG) ('rdest (rg IREG)) <- lt IREG esp.
parse_dest_reglow :
   parse_dest ('eaddr_reglow IREG) ('rnbytedest Q1 Q2 (rg IREG) 0')
      <- leq IREG ebx.
parse_dest_reghigh :
   parse_dest ('eaddr_reghigh IREG) ('rnbytedest Q1 Q2 (rg IREG) 1')
      <- leq IREG ebx.
parse_dest_sp : parse_dest ('eaddr_reg esp) ('spdest N1).
parse_dest_mdest :
   parse_dest ('eaddr_deref IREG 0' N1 B Nsz) ('mdest Nsz ('rco (rg IREG)) N)
      <- lt z Nsz
      <- infer_represents B N
      <- lt IREG esp.
parse_dest_zdest :
   parse_dest ('eaddr_deref IREG 0' N1 B Nsz) ('zdest Nsz ('rco (rg IREG)) N N2)
      <- lt z Nsz
      <- infer_represents B N
      <- lt IREG esp.
parse_dest_imdest :
   parse_dest ('eaddr_deref Base Scale Index Disp Nsz)
      ('imdest Nsz ('rco (rg Base)) N ('rco (rg Index)) Scale)
      <- lt z Nsz
      <- infer_represents Disp N
      <- lt Base esp
      <- lt Index esp.
parse_cond : icond -> cond -> type.
parse_cond_eq : parse_cond icond_e cond_eq.
parse_cond_neq : parse_cond icond_ne cond_neq.
parse_cond_lt : parse_cond icond_b cond_lt.
parse_cond_lte : parse_cond icond_be cond_lte.
parse_cond_gt : parse_cond icond_a cond_gt.
parse_cond_gte : parse_cond icond_ae cond_gte.
parse_cond_slt : parse_cond icond_l cond_slt.
parse_cond_slte : parse_cond icond_le cond_slte.
parse_cond_sgt : parse_cond icond_g cond_sgt.
parse_cond_sgte : parse_cond icond_ge cond_sgte.
parse_cond_sign : parse_cond icond_s cond_sign.
parse_cond_nsign : parse_cond icond_ns cond_nsign.
parse_cond_ov : parse_cond icond_o cond_ov.
parse_cond_nov : parse_cond icond_no cond_nov.
parse_code_irf :
   labelidx -> binary wwb -> runfac N1 -> nat -> 'code -> 'code -> type.
parse_code_malloc :
   parse_code_irf LI1 BN irf_malloc REG
      ('i_malloc ('rco (rg REG)) ('rdest (rg eax)) NL ('rco (rg eax)) I) I.
parse_code_mallocarr :
   parse_code_irf LI1 BN irf_mallocarr REG
      ('i_mallocarr ('rco (rg REG)) ('rdest (rg eax)) 4' ('rco (rg eax))
          ('rco (rg ecx)) I) I.
parse_code_mallocarrb :
   parse_code_irf LI1 BN irf_mallocarrb REG
      ('i_mallocarr ('rco (rg REG)) ('rdest (rg eax)) 1' ('rco (rg eax))
          ('rnbyte Q1 (rg ecx) 0') I) I.
allowed_opsize : nat -> type.
allowed_opsize_4 : allowed_opsize ww.
allowed_opsize_1 : allowed_opsize 1'.
parse_code_1 : labelidx -> binary wwb -> 'iinst -> 'code -> 'code -> type.
parse_code_add :
   parse_code_1 LI BN ('ii_add Nsz EA OP) ('i_add Nsz E O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2
      <- parse_dest EA E.
parse_code_and :
   parse_code_1 LI BN ('ii_and Nsz EA OP) ('i_and Nsz E O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2
      <- parse_dest EA E.
parse_code_addsptr :
   parse_code_1 LI BN ('ii_add ww EA ('oper_imm (| B0 (| B1 (| B2 (| B3 ##))))))
      ('i_addsptr E O N I) I
      <- parse_eaddress EA O
      <- parse_dest EA E
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B
      <- infer_represents B N.
parse_code_call :
   parse_code_1 LI BN ('ii_call OP) ('i_call O1 I) I
      <- parse_operand LI BN OP O1.
parse_code_cmp :
   parse_code_1 LI BN ('ii_cmp Nsz EA OP) ('i_cmp Nsz O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2.
parse_code_halt : parse_code_1 LI BN 'ii_ret ('i_halt I) I.
parse_code_jecxz :
   parse_code_1 LI BN ('ii_jecxz O) ('i_bz ('rco (rg ecx)) O1 I) I
      <- parse_operand LI BN O O1.
parse_code_jcc :
   parse_code_1 LI BN ('ii_jcc C OP) ('i_jcc C' O I) I
      <- parse_cond C C'
      <- parse_operand LI BN OP O.
parse_code_jmp :
   parse_code_1 LI BN ('ii_jmp OP) ('i_jmp O I) I <- parse_operand LI BN OP O.
parse_code_mov :
   parse_code_1 LI BN ('ii_mov Nsz EA OP) ('i_mov E O I) I
      <- parse_operand LI BN OP O
      <- parse_dest EA E.
parse_code_movsx :
   parse_code_1 LI BN ('ii_movsx Ndsz Nosz EA OP) ('i_movsx Ndsz E O I) I
      <- allowed_opsize Ndsz
      <- allowed_opsize Nosz
      <- parse_operand LI BN OP O
      <- parse_dest EA E.
parse_code_movzx :
   parse_code_1 LI BN ('ii_movzx Ndsz Nosz EA OP) ('i_movzx Ndsz E O I) I
      <- allowed_opsize Ndsz
      <- allowed_opsize Nosz
      <- parse_operand LI BN OP O
      <- parse_dest EA E.
parse_code_or :
   parse_code_1 LI BN ('ii_or Nsz EA OP) ('i_or Nsz E O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2
      <- parse_dest EA E.
parse_code_pop :
   parse_code_1 LI BN ('ii_pop EA) ('i_pop ww E I) I <- parse_dest EA E.
parse_code_push :
   parse_code_1 LI BN ('ii_push OP) ('i_push O I) I <- parse_operand LI BN OP O.
parse_code_ret : parse_code_1 LI BN 'ii_ret ('i_ret I) I.
parse_code_sfree :
   parse_code_1 LI BN
      ('ii_add ww ('eaddr_reg esp) ('oper_imm (| B0 (| B1 (| B2 (| B3 ##))))))
      ('i_sfree N I) I
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B
      <- infer_represents B N
      <- lt z N.
parse_code_sar :
   parse_code_1 LI BN ('ii_sar Nsz EA OP) ('i_sar Nsz E O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_dest EA E
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2.
parse_code_shl :
   parse_code_1 LI BN ('ii_shl Nsz EA OP) ('i_shl Nsz E O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_dest EA E
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2.
parse_code_shr :
   parse_code_1 LI BN ('ii_shr Nsz EA OP) ('i_shr Nsz E O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_dest EA E
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2.
parse_code_sub :
   parse_code_1 LI BN ('ii_sub Nsz EA OP) ('i_sub Nsz E O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_dest EA E
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2.
parse_code_xor :
   parse_code_1 LI BN ('ii_xor Nsz EA OP) ('i_xor Nsz E O1 O2 I) I
      <- allowed_opsize Nsz
      <- parse_eaddress EA O1
      <- parse_operand LI BN OP O2
      <- parse_dest EA E.
parse_code_runtime :
   parse_code_1 LI BN ('ii_call ('oper_rm ('eaddr_deref REG 0' eax Wrunfac ww)))
      I I'
      <- infer_represents Wrunfac Nirf
      <- parse_runfac Nirf IRF
      <- lt REG esp
      <- parse_code_irf LI BN IRF REG I I'.
parse_code_2 :
   labelidx -> binary wwb -> 'iinst -> binary wwb -> 'iinst -> 'code -> 'code
      -> type.
parse_code_cmpjcc :
   parse_code_2 LI BN1 ('ii_cmp Nsz EA OP1) BNinc ('ii_jcc IC OP2)
      ('i_cmpjcc Nsz C O1 O1left O1right O2 O3 R Qleft Qright I) I
      <- allowed_opsize Nsz
      <- parse_eaddress EA O1
      <- parse_operand LI BN1 OP1 O2
      <- parse_cond IC C
      <- adjust_add_oper OP2 BNinc OP2'
      <- parse_operand LI BN1 OP2' O3.
parse_code_cmpjcc2 :
   parse_code_2 LI BN1 ('ii_cmp Nsz EA OP1) BNinc ('ii_jcc IC OP2)
      ('i_cmpjcc2 Nsz C O1 O2 O3 I) I
      <- allowed_opsize Nsz
      <- parse_eaddress EA O1
      <- parse_operand LI BN1 OP1 O2
      <- parse_cond IC C
      <- adjust_add_oper OP2 BNinc OP2'
      <- parse_operand LI BN1 OP2' O3.
parse_code_pushrel :
   parse_code_2 LI BN1 ('ii_call ('oper_pcrel BNinc)) BNinc
      ('ii_add ww ('eaddr_deref esp 0' eax 0_32 ww)
          ('oper_imm (| B0 (| B1 (| B2 (| B3 ##)))))) ('i_pushrel OP I) I
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B
      <- add B BNinc B' zero
      <- parse_operand LI BN1 ('oper_pcrel B') OP.
parse_code_salloc :
   parse_code_2 LI BN1
      ('ii_sub ww ('eaddr_reg esp) ('oper_imm (| B0 (| B2 (| B3 (| B4 ##)))))) BNinc
      ('ii_push ('oper_imm (| 0f_8 (| 0f_8 (| 0f_8 (| 0f_8 ##)))))) ('i_salloc NL I) I
      <- implode_word (/ B0 (/ B2 (/ B3 (/ B4 #)))) B
      <- add B 4_32 Bact zero
      <- sub overflow_lim Bact B1 zero
      <- infer_represents Bact N
      <- sumlist NL N
      <- lt z N.
parse_code :
   labelidx -> binary wwb -> astring -> 'code -> binary wwb -> astring -> type.
parse_code_nil : parse_code LI BN AS 'codenil BN AS.
parse_code_fallthru : parse_code LI BN AS ('fallthru Q1) BN AS.
parse_code_endinit :
   parse_code LI BN AS ('i_endinit I) BN' AS' <- parse_code LI BN AS I BN' AS'.
parse_code_unpack :
   parse_code LI BN AS ('i_unpack REG1 (\t:tp. I t)) BN' AS'
      <- (Pi t:tp. parse_code LI BN AS (I t) BN' AS').
parse_code_claim :
   parse_code LI BN AS ('i_claim P1 PR1 (\pr:proof. I pr)) BN' AS'
      <- (Pi pr:proof. parse_code LI BN AS (I pr) BN' AS').
parse_code_coerce :
   parse_code LI BN AS ('i_coerce R Q I) BN' AS'
      <- parse_code LI BN AS I BN' AS'.
parse_code_coercesp :
   parse_code LI BN AS ('i_coercesp Q I) BN' AS'
      <- parse_code LI BN AS I BN' AS'.
parse_code_letpair :
   parse_code LI BN AS ('i_letpair T1 (\t:tp. \t1:tp. I t t1)) BN' AS'
      <- (Pi t1:tp. Pi t2:tp. parse_code LI BN AS (I t1 t2) BN' AS').
parse_code_letroll :
   parse_code LI BN AS ('i_letroll T1 (\t:tp. I t)) BN' AS'
      <- (Pi t:tp. parse_code LI BN AS (I t) BN' AS').
parse_code_vcase1 :
   parse_code LI BN AS ('i_vcase1 O1 (\t:tp. I t)) BN' AS'
      <- (Pi t:tp. parse_code LI BN AS (I t) BN' AS').
parse_code_vcase2 :
   parse_code LI BN AS ('i_vcase2 O1 (\t:tp. I t)) BN' AS'
      <- (Pi t:tp. parse_code LI BN AS (I t) BN' AS').
parse_code_1_ :
   parse_code LI BN AS I BN'' AS''
      <- parse_opcode AS Iarch BNinc AS'
      <- parse_code_1 LI BN Iarch I I'
      <- add BNinc BN BN' zero
      <- parse_code LI BN' AS' I' BN'' AS''.
parse_code_2_ :
   parse_code LI BN AS I BN'' AS'''
      <- parse_opcode AS Iarch1 BNinc1 AS'
      <- parse_opcode AS' Iarch2 BNinc2 AS''
      <- add BNinc1 BN BN1 zero
      <- parse_code_2 LI BN Iarch1 BNinc1 Iarch2 I I'
      <- add BNinc2 BN1 BN' zero
      <- parse_code LI BN' AS'' I' BN'' AS'''.
parse_block :
   labelidx -> binary wwb -> astring -> block -> binary wwb -> astring -> type.
parse_block_lam :
   parse_block LI BN AS (block_lam K1 R1 (\t:tp. B t)) BN' AS'
      <- (Pi t:tp. parse_block LI BN AS (B t) BN' AS').
parse_block_code :
   parse_block LI BN AS (block_code I) BN' AS' <- parse_code LI BN AS I BN' AS'.
parse_block_val :
   parse_block LI1 BN AS (block_val V) BN' AS'
      <- parse_val AS V BNinc AS'
      <- add BNinc BN BN' zero.
parse_prog : labelidx -> binary wwb -> astring -> program -> labelidx -> type.
parse_prog_nil : parse_prog LI1 B1 AS1 program_nil labelidx_nil.
parse_prog_cons :
   parse_prog LI BN AS (program_cons T1 B P) (labelidx_cons BN LI')
      <- parse_block LI BN AS B BN' AS'
      <- parse_prog LI BN' AS' P LI'.
parse_program : astring -> program -> type.
parse_program_ : parse_program AS P <- parse_prog LI 0_32 AS P LI.
certificate_ : certificate <- program.
check_ : check (certificate_ P) AS <- parse_program AS P <- check_program P.
htp : type.
aval : type.
uval : type.
val : type.
operand : type.
dest : type.
inst : type.
instseq : type.
heap : type.
rfile : type.
machine : type.
htpnil : htp.
htpcons : htp <- htp <- tp <- loc.
seg : type.
cseg : seg.
hseg : seg.
bseg : seg.
lit : aval <- binary bytebits.
pointer : aval <- nat <- loc.
spointer : aval <- nat.
gotpointer : aval.
instruct : (Pi n:nat. aval <- string n) <- inst.
junk : aval.
codenil : instseq.
; : instseq <- instseq <- inst.
@' : uval <- nat <- aval.
null : val.
;' : val <- val <- uval.
im : operand <- val.
rco : operand <- reg.
mco : operand <- nat <- operand <- nat.
imco : operand <- nat <- operand <- nat <- operand <- nat.
spco : operand.
pcrel+ : operand <- nat.
pcrel- : operand <- nat.
combine : operand <- operand <- operand.
proj : operand <- nat <- operand <- nat.
rdest : dest <- reg.
mdest : dest <- nat <- operand <- nat.
imdest : dest <- nat <- operand <- nat <- operand <- nat.
spdest : dest.
combdest : dest <- dest <- dest <- nat.
projdest : dest <- nat <- dest <- operand <- nat.
i_add : inst <- operand <- operand <- dest <- nat.
i_addptr : inst <- operand <- operand <- dest.
i_addsptr : inst <- nat <- operand <- dest.
i_and : inst <- operand <- operand <- dest <- nat.
i_bz : inst <- operand <- operand.
i_call : inst <- operand.
i_cmp : inst <- operand <- operand <- nat.
i_cmpjcc : inst <- operand <- operand <- operand <- cond <- nat.
i_fload : inst <- operand.
i_fnop : inst.
i_fstore : inst <- dest <- nat.
i_fstflags : inst.
i_halt : inst.
i_jal : inst <- operand <- dest.
i_jbox : inst <- operand <- operand.
i_jcc : inst <- operand <- cond.
i_jmp : inst <- operand.
i_jnbox : inst <- operand <- operand.
i_malloc : inst <- operand <- dest <- operand.
i_mallocarr : inst <- operand <- operand <- nat <- dest <- operand.
i_mov : inst <- operand <- dest.
i_movsx : inst <- operand <- dest <- nat.
i_movzx : inst <- operand <- dest <- nat.
i_neg : inst <- operand <- dest <- nat.
i_nop : inst.
i_not : inst <- operand <- dest <- nat.
i_or : inst <- operand <- operand <- dest <- nat.
i_pop : inst <- dest <- nat.
i_push : inst <- operand.
i_pushrel : inst <- operand.
i_rcl : inst <- operand <- operand <- dest <- nat.
i_rcr : inst <- operand <- operand <- dest <- nat.
i_rol : inst <- operand <- operand <- dest <- nat.
i_ror : inst <- operand <- operand <- dest <- nat.
i_ret : inst.
i_salloc : inst <- nat.
i_sfree : inst <- nat.
i_shr : inst <- operand <- operand <- dest <- nat.
i_sar : inst <- operand <- operand <- dest <- nat.
i_shl : inst <- operand <- operand <- dest <- nat.
i_sub : inst <- operand <- operand <- dest <- nat.
i_subptr : inst <- operand <- operand <- dest.
i_xor : inst <- operand <- operand <- dest <- nat.
hnil : heap.
hcons : heap <- heap <- val <- loc.
flag : type.
fclear : flag.
fset : flag.
fdk : flag.
conds : type.
conds_ : conds <- bit <- bit <- bit <- bit.
rfile* : nat -> type.
rfnil : rfile* z.
rfcons : rfile* (s N) <- rfile* N <- val.
rf : rfile <- rfile* regcount <- conds <- val.
mach : machine <- pc <- rfile <- loc <- heap.
htpok : htp -> loc -> type.
equiv : tp -> tp -> type.
entails : pred -> pred -> type.
sat : tp -> pred -> kind -> type.
subtype : tp -> tp -> type.
subrtype : rtp -> rtp -> type.
subeff : effect -> effect -> type.
tr : prop -> type.
aof : htp -> aval -> tp -> type.
of : htp -> val -> tp -> type.
codeok : htp -> rtp -> instseq -> type.
initok : htp -> rtp -> reg -> tp -> instseq -> type.
oof : htp -> rtp -> operand -> tp -> type.
update : htp -> rtp -> dest -> tp -> rtp -> type.
hof : htp -> heap -> htp -> type.
rof : htp -> rfile -> rtp -> type.
machineok : machine -> type.
loc_lt : loc -> loc -> type.
loc_lt_ : loc_lt (lc M) (lc N) <- lt M N.
loc_leq : loc -> loc -> type.
loc_leq_ : loc_leq (lc M) (lc N) <- leq M N.
loc_neq : loc -> loc -> type.
loc_neq_ : loc_neq (lc M) (lc N) <- neq M N.
htpok_nil : htpok htpnil L1.
htpok_cons : htpok (htpcons L T' S) L' <- loc_lt L L' <- kof T' kt <- htpok S L.
cloc_lt : tp -> tp -> type.
cloc_lt_conc : cloc_lt (location L1) (location L2) <- loc_lt L1 L2.
cloc_lt_trans : cloc_lt TL1 TL3 <- cloc_lt TL1 TL2 <- cloc_lt TL2 TL3.
cloc_leq : tp -> tp -> type.
cloc_leq_lt : cloc_leq L L' <- cloc_lt L L'.
cloc_leq_eq : cloc_leq L L.
equivr : rtp -> rtp -> type.
equivr* : rtp* N -> rtp* N -> type.
equivp : prop -> prop -> type.
equivpr : pred -> pred -> type.
equiv_reflex : equiv T' T'.
equiv_symm : equiv T1 T2 <- equiv T2 T1 <- kof T2 K.
equiv_trans : equiv T1 T3 <- equiv T1 T2 <- equiv T2 T3.
equiv_annbeta : equiv (annot T' R K) T'.
equiv_beta : equiv (app (lam K1 (\t:tp. T1 t)) T2) (T1 T2).
equiv_eta : equiv (lam K1 (\t:tp. app T' t)) T'.
equiv_pbeta1 : equiv (pi1 (pair T1 T2)) T1.
equiv_pbeta2 : equiv (pi2 (pair T1 T2)) T2.
equiv_peta : equiv (pair (pi1 T') (pi2 T')) T'.
equiv_kbeta : equiv (kapp (klam (\k:kind. \r:pred. T' k r)) K R) (T' K R).
equiv_keta : equiv (klam (\k:kind. \r:pred. kapp T' k r)) T'.
equiv_sbeta1 :
   equiv (case (in1 T' K1) K2 K3 K4 (\t:tp. T1 t) (\t:tp. T2 t)) (T1 T').
equiv_sbeta2 :
   equiv (case (in2 T' K1) K2 K3 K4 (\t:tp. T1 t) (\t:tp. T2 t)) (T2 T').
equiv_rbeta : equiv (unroll (roll (\k:kind. K1 k) T')) T'.
equiv_reta :
   equiv (roll (\k:kind. K k) (unroll T')) T' <- kof T' (krec (\k:kind. K k)).
equiv_annot :
   equiv (annot T R K) (annot T' R' K) <- equiv T T' <- equivpr R R'.
equiv_lam :
   equiv (lam K (\t:tp. T t)) (lam K (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> equiv (T t) (T' t)).
equiv_app : equiv (app T1 T2) (app T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_pair : equiv (pair T1 T2) (pair T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_pi1 : equiv (pi1 T) (pi1 T') <- equiv T T'.
equiv_pi2 : equiv (pi2 T) (pi2 T') <- equiv T T'.
equiv_klam :
   equiv (klam (\k:kind. \r:pred. T k r)) (klam (\k:kind. \r:pred. T' k r))
      <- (Pi k:kind. Pi r:pred. pon r k -> equiv (T k r) (T' k r)).
equiv_kapp : equiv (kapp T K R) (kapp T' K R') <- equiv T T' <- equivpr R R'.
equiv_in1 : equiv (in1 T K) (in1 T' K) <- equiv T T'.
equiv_in2 : equiv (in2 T K) (in2 T' K) <- equiv T T'.
equiv_case :
   equiv (case T K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t))
      (case T' K1 K2 K (\t:tp. T1' t) (\t:tp. T2' t))
      <- equiv T T'
      <- (Pi t:tp. kof t K1 -> equiv (T1 t) (T1' t))
      <- (Pi t:tp. kof t K2 -> equiv (T2 t) (T2' t)).
equiv_roll :
   equiv (roll (\k:kind. K k) T) (roll (\k:kind. K k) T') <- equiv T T'.
equiv_unroll : equiv (unroll T) (unroll T') <- equiv T T'.
equiv_seteq : equiv (seteq N T) (seteq N T') <- equiv T T'.
equiv_prod : equiv (prod T1 T2) (prod T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_exp : equiv (exp T1 T2) (exp T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_code : equiv (code PC G) (code PC G') <- equivr G G'.
equiv_arrow : equiv (arrow G) (arrow G') <- equivr G G'.
equiv_cbox : equiv (cbox T1 T2) (cbox T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_cmbox :
   equiv (cmbox T1 T2) (cmbox T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_sptr : equiv (sptr T) (sptr T') <- equiv T T'.
equiv_forall :
   equiv (forall K R (\t:tp. T t)) (forall K R' (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> equiv (T t) (T' t))
      <- equivpr R R'.
equiv_exists :
   equiv (exists K R (\t:tp. T t)) (exists K R' (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> equiv (T t) (T' t))
      <- equivpr R R'.
equiv_guard : equiv (guard P T) (guard P' T') <- equivp P P' <- equiv T T'.
equiv_assert : equiv (assert P T) (assert P' T') <- equivp P P' <- equiv T T'.
equiv_rec :
   equiv (rec (\t:tp. T t)) (rec (\t:tp. T' t))
      <- (Pi t:tp. kof t kt -> equiv (T t) (T' t)).
equiv_meet : equiv (meet T1 T2) (meet T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_join : equiv (join T1 T2) (join T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_numadd :
   equiv (numadd T1 T2) (numadd T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equiv_nummul :
   equiv (nummul T1 T2) (nummul T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equivr_nil : equivr* rtnil rtnil.
equivr_cons :
   equivr* (rtcons T G) (rtcons T' G') <- equiv T T' <- equivr* G G'.
equivr_ : equivr (rt T G) (rt T' G') <- equiv T T' <- equivr* G G'.
equivp_reflex : equivp P P.
equivp_symm : equivp P1 P2 <- equivp P2 P1 <- propok P2.
equivp_impl :
   equivp (pimpl P1 P2) (pimpl P1' P2') <- equivp P1 P1' <- equivp P2 P2'.
equivp_and :
   equivp (pand P1 P2) (pand P1' P2') <- equivp P1 P1' <- equivp P2 P2'.
equivp_or : equivp (por P1 P2) (por P1' P2') <- equivp P1 P1' <- equivp P2 P2'.
equivp_numeq :
   equivp (pnumeq T1 T2) (pnumeq T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equivp_numleq :
   equivp (pnumleq T1 T2) (pnumleq T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equivp_loclt :
   equivp (ploclt T1 T2) (ploclt T1' T2') <- equiv T1 T1' <- equiv T2 T2'.
equivp_goodloc : equivp (goodloc T) (goodloc T') <- equiv T T'.
equivpr_reflex : equivpr R R.
equivpr_symm : equivpr R1 R2 <- equivpr R2 R1 <- pon R2 K.
equivpr_tn : equivpr (rtn T1) (rtn T2) <- equiv T1 T2.
equivpr_arrow :
   equivpr (rarrow R1 R2) (rarrow R1' R2') <- equivpr R1 R1' <- equivpr R2 R2'.
equivpr_prod :
   equivpr (rprod R1 R2) (rprod R1' R2') <- equivpr R1 R1' <- equivpr R2 R2'.
equivpr_forall :
   equivpr (rforall (\k:kind. \r:pred. R k r))
      (rforall (\k:kind. \r:pred. R' k r))
      <- (Pi k:kind. Pi r:pred. pon r k -> equivpr (R k r) (R' k r)).
equivpr_sum :
   equivpr (rsum R1 R2) (rsum R1' R2') <- equivpr R1 R1' <- equivpr R2 R2'.
equivpr_rec :
   equivpr (rrec (\k:kind. \r:pred. R k r)) (rrec (\k:kind. \r:pred. R' k r))
      <- (Pi k:kind. Pi r:pred. pon r k -> equivpr (R k r) (R' k r)).
equiv_box : Pi T:tp. Pi T':tp. equiv T T' -> equiv (box T) (box T')
   = \T:tp. \T':tp. \d:equiv T T'. equiv_cbox d equiv_reflex.
equiv_mbox : Pi T:tp. Pi T':tp. equiv T T' -> equiv (mbox T) (mbox T')
   = \T:tp. \T':tp. \d:equiv T T'. equiv_cmbox d equiv_reflex.
equiv_theta :
   Pi K:kind. Pi T:tp. equiv (app (theta K) T) (app T (app (theta K) T))
   = \K:kind. \T:tp.
        equiv_trans
           (equiv_trans
               (equiv_app
                   (equiv_app equiv_reflex (equiv_app equiv_reflex equiv_rbeta))
                   equiv_reflex)
               equiv_beta)
           (equiv_app equiv_reflex equiv_beta).
equiv_succ : Pi T:tp. Pi T':tp. equiv T T' -> equiv (succ T) (succ T')
   = \T:tp. \T':tp. \d:equiv T T'. equiv_numadd d equiv_reflex.
equivp_good : Pi T:tp. Pi T':tp. equiv T T' -> equivp (good T) (good T')
   = \T:tp. \T':tp. \d:equiv T T'. equivp_numeq d d.
equivp_numlt :
   Pi T2:tp. Pi T2':tp. Pi T1:tp. Pi T1':tp.
      equiv T2 T2' -> equiv T1 T1' -> equivp (pnumlt T1 T2) (pnumlt T1' T2')
   = \T2:tp. \T2':tp. \T1:tp. \T1':tp. \d2:equiv T2 T2'. \d1:equiv T1 T1'.
        equivp_numleq d2 (equiv_succ _ _ d1).
equivp_locneq :
   Pi T2:tp. Pi T2':tp. Pi T1:tp. Pi T1':tp.
      equiv T2 T2' -> equiv T1 T1' -> equivp (plocneq T1 T2) (plocneq T1' T2')
   = \T2:tp. \T2':tp. \T1:tp. \T1':tp. \d2:equiv T2 T2'. \d1:equiv T1 T1'.
        equivp_or (equivp_loclt d1 d2) (equivp_loclt d2 d1).
equiv_setlt :
   Pi T:tp. Pi T':tp. Pi N:nat. equiv T T' -> equiv (setlt N T) (setlt N T')
   = \T:tp. \T':tp. \N:nat. \d:equiv T T'.
        equiv_exists equivpr_reflex
           (\t:tp. \d':kof t knum.
               equiv_assert equiv_reflex (equivp_numlt _ _ _ _ d equiv_reflex)).
equiv_setgt :
   Pi T:tp. Pi T':tp. Pi N:nat. equiv T T' -> equiv (setgt N T) (setgt N T')
   = \T:tp. \T':tp. \N:nat. \d:equiv T T'.
        equiv_exists equivpr_reflex
           (\t:tp. \d':kof t knum.
               equiv_assert equiv_reflex (equivp_numlt _ _ _ _ equiv_reflex d)).
tr_impli : tr (pimpl P1 P2) <- (tr P1 -> tr P2) <- propok P1.
tr_imple : tr P2 <- tr (pimpl P1 P2) <- tr P1.
tr_andi : tr (pand P1 P2) <- tr P1 <- tr P2.
tr_ande1 : tr P1 <- tr (pand P1 P2).
tr_ande2 : tr P2 <- tr (pand P1 P2).
tr_ori1 : tr (por P1 P2) <- tr P1 <- propok P2.
tr_ori2 : tr (por P1 P2) <- tr P2 <- propok P1.
tr_ore : tr P <- tr (por P1 P2) <- (tr P1 -> tr P) <- (tr P2 -> tr P).
tr_falsee : tr P <- tr pfalse <- propok P.
tr_equiv : tr P <- tr P' <- equivp P' P <- propok P.
tr_numeq_symm : tr (pnumeq T1 T2) <- tr (pnumeq T2 T1).
tr_numeq_trans : tr (pnumeq T1 T3) <- tr (pnumeq T1 T2) <- tr (pnumeq T2 T3).
tr_numeq_lit : tr (pnumeq (numlit N) (numlit N)).
tr_numeq_bin : tr (pnumeq (number B) (number B)).
tr_numeq_rep1 : tr (pnumeq (number B) (numlit N)) <- represents N B.
tr_numeq_rep2 : tr (pnumeq (numlit N) (number B)) <- represents N B.
tr_numleq_refl : tr (pnumleq T1 T2) <- tr (pnumeq T1 T2).
tr_numleq_antisymm :
   tr (pnumeq T1 T2) <- tr (pnumleq T1 T2) <- tr (pnumleq T2 T1).
tr_numleq_trans :
   tr (pnumleq T1 T3) <- tr (pnumleq T1 T2) <- tr (pnumleq T2 T3).
tr_numleq_lit : tr (pnumleq (numlit N1) (numlit N2)) <- leq N1 N2.
tr_numleq_good1 : tr (good T1) <- tr (pnumleq T1 T2).
tr_numleq_good2 : tr (good T2) <- tr (pnumleq T1 T2).
tr_numlt_lit : tr (pnumlt (numlit N1) (numlit N2)) <- lt N1 N2.
tr_numlt_bin :
   tr (pnumlt (number B1) (number B2))
      <- add B1 Bdiff B2 zero
      <- is_nonzero Bdiff.
tr_numlt_contra : tr pfalse <- tr (pnumlt T' T').
tr_numadd_commute :
   tr (pnumeq (numadd T1 T2) (numadd T2 T1)) <- tr (good T1) <- tr (good T2).
tr_numadd_assoc :
   tr (pnumeq (numadd T1 (numadd T2 T3)) (numadd (numadd T1 T2) T3))
      <- tr (good T1)
      <- tr (good T2)
      <- tr (good T3).
tr_numadd_ident : tr (pnumeq (numadd T' (numlit 0')) T') <- tr (good T').
tr_numadd_monotone :
   tr (pnumleq (numadd T1 T2) (numadd T1' T2'))
      <- tr (pnumleq T1 T1')
      <- tr (pnumleq T2 T2').
tr_numadd_leq : tr (pnumleq T1 (numadd T1 T2)) <- tr (good T1) <- tr (good T2).
tr_numadd_lit :
   tr (pnumeq (numadd (numlit N1) (numlit N2)) (numlit N3)) <- sum N1 N2 N3.
tr_numadd_bin :
   tr (pnumeq (numadd (number B1) (number B2)) (number B3)) <- add B1 B2 B3 
zero.
tr_numadd_good1 : tr (good T1) <- tr (good (numadd T1 T2)).
tr_numadd_good2 : tr (good T2) <- tr (good (numadd T1 T2)).
tr_nummul_commute :
   tr (pnumeq (nummul T1 T2) (nummul T2 T1)) <- tr (good T1) <- tr (good T2).
tr_nummul_monotone :
   tr (pnumleq (nummul T1 T2) (nummul T1' T2'))
      <- tr (pnumleq T1 T1')
      <- tr (pnumleq T2 T2').
tr_nummul_lit :
   tr (pnumeq (nummul (numlit N1) (numlit N2)) (numlit N3)) <- product N1 N2 N3.
tr_loclt_location : tr (ploclt TL1 TL2) <- cloc_lt TL1 TL2.
tr_loclt_trans : tr (ploclt T1 T3) <- tr (ploclt T1 T2) <- tr (ploclt T2 T3).
tr_loclt_good1 : tr (goodloc T1) <- tr (ploclt T1 T2).
tr_loclt_good2 : tr (goodloc T2) <- tr (ploclt T1 T2).
tr_goodloc_location : tr (goodloc (location L)).
tr_good_lit : Pi N:nat. tr (good (numlit N)) = \N:nat. tr_numeq_lit.
tr_numeq_good1 : Pi T1:tp. Pi T2:tp. tr (pnumeq T1 T2) -> tr (good T1)
   = \T1:tp. \T2:tp. \d:tr (pnumeq T1 T2). tr_numeq_trans (tr_numeq_symm d) d.
tr_numeq_good2 : Pi T1:tp. Pi T2:tp. tr (pnumeq T1 T2) -> tr (good T2)
   = \T1:tp. \T2:tp. \d:tr (pnumeq T1 T2). tr_numeq_trans d (tr_numeq_symm d).
tr_numeq_trans_g1 :
   Pi T2:tp. Pi T3:tp. Pi T1:tp.
      tr (pnumeq T2 T3) -> tr (pimpl (good T2) (pnumeq T1 T2))
         -> tr (pnumeq T1 T3)
   = \T2:tp. \T3:tp. \T1:tp. \d2:tr (pnumeq T2 T3).
        \d1:tr (pimpl (good T2) (pnumeq T1 T2)).
        tr_numeq_trans d2 (tr_imple (tr_numeq_good1 _ _ d2) d1).
tr_numeq_trans_g2 :
   Pi T2:tp. Pi T3:tp. Pi T1:tp.
      tr (pimpl (good T2) (pnumeq T2 T3)) -> tr (pnumeq T1 T2)
         -> tr (pnumeq T1 T3)
   = \T2:tp. \T3:tp. \T1:tp. \d2:tr (pimpl (good T2) (pnumeq T2 T3)).
        \d1:tr (pnumeq T1 T2).
        tr_numeq_trans (tr_imple (tr_numeq_good2 _ _ d1) d2) d1.
tr_numleq_bin :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
      add B1 B2 B3 zero -> tr (pnumleq (number B1) (number B3))
   = \N1:nat. \B1:binary N1. \B2:binary N1. \B3:binary N1. \d:add B1 B2 B3 zero.
        tr_numleq_trans (tr_numleq_refl (tr_numadd_bin d))
           (tr_numadd_leq tr_numeq_bin tr_numeq_bin).
tr_numadd_compat :
   Pi T2:tp. Pi T2':tp. Pi T1:tp. Pi T1':tp.
      tr (pnumeq T2 T2') -> tr (pnumeq T1 T1')
         -> tr (pnumeq (numadd T1 T2) (numadd T1' T2'))
   = \T2:tp. \T2':tp. \T1:tp. \T1':tp. \d2:tr (pnumeq T2 T2').
        \d1:tr (pnumeq T1 T1').
        tr_numleq_antisymm
           (tr_numadd_monotone (tr_numleq_refl (tr_numeq_symm d2))
               (tr_numleq_refl (tr_numeq_symm d1)))
           (tr_numadd_monotone (tr_numleq_refl d2) (tr_numleq_refl d1)).
tr_numadd_leq2 :
   Pi T2:tp. Pi T1:tp.
      tr (good T2) -> tr (good T1) -> tr (pnumleq T2 (numadd T1 T2))
   = \T2:tp. \T1:tp. \d2:tr (good T2). \d1:tr (good T1).
        tr_numleq_trans (tr_numleq_refl (tr_numadd_commute d1 d2))
           (tr_numadd_leq d1 d2).
tr_good_numadd :
   Pi T2:tp. Pi T1:tp. tr (good T2) -> tr (good T1) -> tr (good (numadd T1 T2))
   = \T2:tp. \T1:tp. \x:tr (good T2). \x1:tr (good T1). tr_numadd_compat _ _ _ _ x x1.
tr_nummul_compat :
   Pi T2:tp. Pi T2':tp. Pi T1:tp. Pi T1':tp.
      tr (pnumeq T2 T2') -> tr (pnumeq T1 T1')
         -> tr (pnumeq (nummul T1 T2) (nummul T1' T2'))
   = \T2:tp. \T2':tp. \T1:tp. \T1':tp. \d2:tr (pnumeq T2 T2').
        \d1:tr (pnumeq T1 T1').
        tr_numleq_antisymm
           (tr_nummul_monotone (tr_numleq_refl (tr_numeq_symm d2))
               (tr_numleq_refl (tr_numeq_symm d1)))
           (tr_nummul_monotone (tr_numleq_refl d2) (tr_numleq_refl d1)).
tr_good_nummul :
   Pi T2:tp. Pi T1:tp. tr (good T2) -> tr (good T1) -> tr (good (nummul T1 T2))
   = \T2:tp. \T1:tp. \x:tr (good T2). \x1:tr (good T1). tr_nummul_compat _ _ _ _ x x1.
tr_succ_monotone :
   Pi T:tp. Pi T':tp. tr (pnumleq T T') -> tr (pnumleq (succ T) (succ T'))
   = \T:tp. \T':tp. \d:tr (pnumleq T T').
        tr_numadd_monotone d (tr_numleq_refl tr_numeq_lit).
tr_succ_compat :
   Pi T:tp. Pi T':tp. tr (pnumeq T T') -> tr (pnumeq (succ T) (succ T'))
   = \T:tp. \T':tp. \d:tr (pnumeq T T'). tr_numadd_compat _ _ _ _ d tr_numeq_lit.
tr_succ_leq : Pi T:tp. tr (good T) -> tr (pnumleq T (succ T))
   = \T:tp. \d:tr (good T). tr_numadd_leq2 _ _ d tr_numeq_lit.
tr_succ_lt : Pi T:tp. tr (good T) -> tr (pnumlt T (succ T))
   = \T:tp. \d:tr (good T). tr_numleq_refl (tr_succ_compat _ _ d).
tr_succ_good : Pi T':tp. tr (good (succ T')) -> tr (good T')
   = \T':tp. \d:tr (good (succ T')). tr_numadd_good2 d.
tr_numlt_good1 : Pi T1:tp. Pi T2:tp. tr (pnumlt T1 T2) -> tr (good T1)
   = \T1:tp. \T2:tp. \d:tr (pnumlt T1 T2). tr_succ_good _ (tr_numleq_good1 d).
tr_numlt_good2 : Pi T1:tp. Pi T2:tp. tr (pnumlt T1 T2) -> tr (good T2)
   = \T1:tp. \T2:tp. \d:tr (pnumlt T1 T2). tr_numleq_good2 d.
tr_numleq_lt_trans :
   Pi T2:tp. Pi T3:tp. Pi T1:tp.
      tr (pnumlt T2 T3) -> tr (pnumleq T1 T2) -> tr (pnumlt T1 T3)
   = \T2:tp. \T3:tp. \T1:tp. \d2:tr (pnumlt T2 T3). \d1:tr (pnumleq T1 T2).
        tr_numleq_trans d2 (tr_succ_monotone _ _ d1).
tr_numlt_leq_trans :
   Pi T2:tp. Pi T3:tp. Pi T1:tp.
      tr (pnumleq T2 T3) -> tr (pnumlt T1 T2) -> tr (pnumlt T1 T3)
   = \T2:tp. \T3:tp. \T1:tp. \d2:tr (pnumleq T2 T3). \d1:tr (pnumlt T1 T2).
        tr_numleq_trans d2 d1.
tr_numlt_eq_trans :
   Pi T2:tp. Pi T3:tp. Pi T1:tp.
      tr (pnumeq T2 T3) -> tr (pnumlt T1 T2) -> tr (pnumlt T1 T3)
   = \T2:tp. \T3:tp. \T1:tp. \d2:tr (pnumeq T2 T3). \d1:tr (pnumlt T1 T2).
        tr_numlt_leq_trans _ _ _ (tr_numleq_refl d2) d1.
tr_numeq_lt_trans :
   Pi T2:tp. Pi T3:tp. Pi T1:tp.
      tr (pnumlt T2 T3) -> tr (pnumeq T1 T2) -> tr (pnumlt T1 T3)
   = \T2:tp. \T3:tp. \T1:tp. \d2:tr (pnumlt T2 T3). \d1:tr (pnumeq T1 T2).
        tr_numleq_lt_trans _ _ _ d2 (tr_numleq_refl d1).
tr_numlt_imp_leq : Pi T1:tp. Pi T2:tp. tr (pnumlt T1 T2) -> tr (pnumleq T1 T2)
   = \T1:tp. \T2:tp. \d:tr (pnumlt T1 T2).
        tr_numleq_trans d (tr_succ_leq _ (tr_numlt_good1 _ _ d)).
tr_numlt_trans :
   Pi T2:tp. Pi T3:tp. Pi T1:tp.
      tr (pnumlt T2 T3) -> tr (pnumlt T1 T2) -> tr (pnumlt T1 T3)
   = \T2:tp. \T3:tp. \T1:tp. \d2:tr (pnumlt T2 T3). \d1:tr (pnumlt T1 T2).
        tr_numlt_leq_trans _ _ _ (tr_numlt_imp_leq _ _ d2) d1.
tr_locneq_symm :
   Pi T2:tp. Pi T1:tp.
      kof T2 kloc -> kof T1 kloc -> tr (plocneq T2 T1) -> tr (plocneq T1 T2)
   = \T2:tp. \T1:tp. \d2:kof T2 kloc. \d1:kof T1 kloc. \dtr:tr (plocneq T2 T1).
        tr_ore (\d:tr (ploclt T1 T2). tr_ori1 (propok_loclt d1 d2) d)
           (\d:tr (ploclt T2 T1). tr_ori2 (propok_loclt d2 d1) d) dtr.
entails_reflex : entails R R.
entails_trans : entails R1 R3 <- entails R1 R2 <- entails R2 R3.
entails_equiv : entails R1 R2 <- equivpr R1 R2 <- pon R1 K <- pon R2 K.
entails_true : entails R (rtrue K) <- pon R K.
entails_tn_td : entails (rtn T') rtd <- kof T' knum.
entails_tng : entails (rtn T1) (rtn T2) <- tr (pimpl (good T1) (pnumeq T1 T2)).
entails_tn : entails (rtn T1) (rtn T2) <- tr (pnumeq T1 T2).
entails_arrow :
   entails (rarrow R1 R2) (rarrow R1' R2') <- entails R1' R1 <- entails R2 R2'.
entails_prod :
   entails (rprod R1 R2) (rprod R1' R2') <- entails R1 R1' <- entails R2 R2'.
entails_forall :
   entails (rforall (\k:kind. \r:pred. R1 k r))
      (rforall (\k:kind. \r:pred. R2 k r))
      <- (Pi k:kind. Pi r:pred. pon r k -> entails (R1 k r) (R2 k r)).
entails_sum :
   entails (rsum R1 R2) (rsum R1' R2') <- entails R1 R1' <- entails R2 R2'.
sat_true : sat T' (rtrue K) K <- kof T' K.
sat_annot : sat (annot T' R K) R K <- sat T' R K.
sat_lam :
   sat (lam K1 (\t:tp. T' t)) (rarrow R1 R2) (karrow K1 K2)
      <- pon R1 K1
      <- (Pi t:tp. kof t K1 -> sat t R1 K1 -> sat (T' t) R2 K2).
sat_app :
   sat (app T1 T2) R2 K2 <- sat T1 (rarrow R1 R2) (karrow K1 K2) <- sat T2 R1 K1.
sat_pair :
   sat (pair T1 T2) (rprod R1 R2) (kprod K1 K2) <- sat T1 R1 K1 <- sat T2 R2 K2.
sat_pi1 : sat (pi1 T') R1 K1 <- sat T' (rprod R1 R2) (kprod K1 K2).
sat_pi2 : sat (pi2 T') R2 K2 <- sat T' (rprod R1 R2) (kprod K1 K2).
sat_klam :
   sat (klam (\k:kind. \r:pred. T' k r)) (rforall (\k:kind. \r:pred. R k r))
      (kforall (\k:kind. K k))
      <- (Pi k:kind. Pi r:pred. pon r k -> sat (T' k r) (R k r) (K k)).
sat_kapp :
   sat (kapp T' K' R') (R K' R') (K K')
      <- sat T' (rforall (\k:kind. \r:pred. R k r)) (kforall (\k:kind. K k))
      <- pon R' K'.
sat_in1 :
   sat (in1 T' K2) (rsum R1 R2) (ksum K1 K2) <- sat T' R1 K1 <- pon R2 K2.
sat_in2 :
   sat (in2 T' K1) (rsum R1 R2) (ksum K1 K2) <- sat T' R2 K2 <- pon R1 K1.
sat_case :
   sat (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) R K
      <- sat T' (rsum R1 R2) (ksum K1 K2)
      <- (Pi t:tp. kof t K1 -> sat t R1 K1 -> sat (T1 t) R K)
      <- (Pi t:tp. kof t K2 -> sat t R2 K2 -> sat (T2 t) R K).
sat_roll :
   sat (roll (\k:kind. K k) T') (rrec (\k:kind. \r:pred. R k r))
      (krec (\k:kind. K k))
      <- (Pi k:kind. Pi r:pred. pon r k -> pon (R k r) (K k))
      <- sat T' (R (krec (\k:kind. K k)) (rrec (\k:kind. \r:pred. R k r)))
            (K (krec (\k:kind. K k))).
sat_unroll :
   sat (unroll T') (R (krec (\k:kind. K k)) (rrec (\k:kind. \r:pred. R k r)))
      (K (krec (\k:kind. K k)))
      <- sat T' (rrec (\k:kind. \r:pred. R k r)) (krec (\k:kind. K k)).
sat_b0i : sat b0 (rti 0') kt.
sat_b1i : sat b1 rt1 kt.
sat_seteqi : sat (seteq N T') (rti N) kt <- kof T' knum.
sat_prodd : sat (prod T1 T2) rtd kt <- sat T1 rtd kt <- sat T2 rtd kt.
sat_prodn :
   sat (prod T1 T2) (rtn (numadd TN1 TN2)) kt
      <- sat T1 (rtn TN1) kt
      <- sat T2 (rtn TN2) kt.
sat_expd : sat (exp T' TN) rtd kt <- sat T' rtd kt <- kof TN knum.
sat_expn :
   sat (exp T' TN) (rtn (nummul TN TN')) kt
      <- sat T' (rtn TN') kt
      <- kof TN knum
      <- tr (good TN').
sat_expiz :
   sat (exp T' TN) (rti 0') kt
      <- kof T' kt
      <- kof TN knum
      <- tr (pnumeq TN (numlit 0')).
sat_arrowi : sat (arrow G) rtw kt <- rtpok G.
sat_cboxi : sat (cbox T1 T2) rtw kt <- kof T1 kt <- kof T2 kt.
sat_cmboxi : sat (cmbox T1 T2) rtw kt <- kof T1 kt <- kof T2 kt.
sat_sptri : sat (sptr T') rtw kt <- kof T' kt.
sat_foralld :
   sat (forall K R (\t:tp. T t)) rtd kt
      <- (Pi t:tp. kof t K -> kof (T t) kt)
      <- sat T' R K
      <- sat (T T') rtd kt.
sat_foralli :
   sat (forall K R (\t:tp. T t)) (rtn TN) kt
      <- (Pi t:tp. kof t K -> kof (T t) kt)
      <- sat T' R K
      <- sat (T T') (rtn TN) kt.
sat_existsi :
   sat (exists K R (\t:tp. T' t)) (rtn TN) kt
      <- pon R K
      <- (Pi t:tp. kof t K -> sat t R K -> sat (T' t) (rtn TN) kt).
sat_guardd : sat (guard P T') rtd kt <- propok P <- tr P <- sat T' rtd kt.
sat_guardi :
   sat (guard P T') (rtn TN) kt <- propok P <- tr P <- sat T' (rtn TN) kt.
sat_assertd : sat (assert P T') rtd kt <- propok P <- (tr P -> sat T' rtd kt).
sat_asserti :
   sat (assert P T') (rtn TN) kt <- propok P <- (tr P -> sat T' (rtn TN) kt).
sat_recd :
   sat (rec (\t:tp. T' t)) rtd kt <- (Pi t:tp. kof t kt -> sat (T' t) rtd kt).
sat_reci :
   sat (rec (\t:tp. T' t)) (rtn TN) kt
      <- (Pi t:tp. kof t kt -> sat (T' t) (rtn TN) kt).
sat_meetd1 : sat (meet T1 T2) rtd kt <- sat T1 rtd kt <- kof T2 kt.
sat_meetd2 : sat (meet T1 T2) rtd kt <- kof T1 kt <- sat T2 rtd kt.
sat_meeti1 : sat (meet T1 T2) (rtn TN) kt <- sat T1 (rtn TN) kt <- kof T2 kt.
sat_meeti2 : sat (meet T1 T2) (rtn TN) kt <- kof T1 kt <- sat T2 (rtn TN) kt.
sat_joini :
   sat (join T1 T2) (rtn TN) kt <- sat T1 (rtn TN) kt <- sat T2 (rtn TN) kt.
sat_nsi : sat ns rt1 kt.
sat_voidi : sat (void N) (rti N) kt.
sat_gotptri : sat gotptr rtw kt.
entailment : sat T' R K <- sat T' R' K <- entails R' R.
entails_ti_td : Pi N1:nat. entails (rti N1) rtd
   = \N1:nat. entails_tn_td kof_numlit.
incln : Pi T:tp. Pi T':tp. kof T' knum -> sat T (rtn T') kt -> sat T rtd kt
   = \T:tp. \T':tp. \d2:kof T' knum. \d1:sat T (rtn T') kt.
        entailment (entails_tn_td d2) d1.
incl : Pi T':tp. Pi N1:nat. sat T' (rti N1) kt -> sat T' rtd kt
   = \T':tp. \N1:nat. \d:sat T' (rti N1) kt. incln _ _ kof_numlit d.
incleq :
   Pi TN:tp. Pi TN':tp. Pi T':tp.
      tr (pnumeq TN TN') -> sat T' (rtn TN) kt -> sat T' (rtn TN') kt
   = \TN:tp. \TN':tp. \T':tp. \d2:tr (pnumeq TN TN'). \d1:sat T' (rtn TN) kt.
        entailment (entails_tn d2) d1.
incleqg :
   Pi TN:tp. Pi TN':tp. Pi T':tp.
      tr (pimpl (good TN) (pnumeq TN TN')) -> sat T' (rtn TN) kt
         -> sat T' (rtn TN') kt
   = \TN:tp. \TN':tp. \T':tp. \d2:tr (pimpl (good TN) (pnumeq TN TN')).
        \d1:sat T' (rtn TN) kt. entailment (entails_tng d2) d1.
sat_prodi :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi T2:tp. Pi T1:tp.
      sum N1 N2 N -> sat T2 (rti N2) kt -> sat T1 (rti N1) kt
         -> sat (prod T1 T2) (rti N) kt
   = \N1:nat. \N2:nat. \N:nat. \T2:tp. \T1:tp. \d3:sum N1 N2 N.
        \d2:sat T2 (rti N2) kt. \d1:sat T1 (rti N1) kt.
        incleq _ _ _ (tr_numadd_lit d3) (sat_prodn d2 d1).
sat_expi :
   Pi N:nat. Pi M:nat. Pi P:nat. Pi TN:tp. Pi T':tp.
      product N M P -> tr (pnumeq TN (numlit N)) -> kof TN knum
         -> sat T' (rti M) kt -> sat (exp T' TN) (rti P) kt
   = \N:nat. \M:nat. \P:nat. \TN:tp. \T':tp. \d4:product N M P.
        \d3:tr (pnumeq TN (numlit N)). \d2:kof TN knum. \d1:sat T' (rti M) kt.
        entailment
           (entails_tn
               (tr_numeq_trans (tr_nummul_lit d4)
                   (tr_nummul_compat _ _ _ _ tr_numeq_lit d3)))
           (sat_expn (tr_good_lit _) d2 d1).
sat_b0d : sat b0 rtd kt = incl _ _ sat_b0i.
sat_b1d : sat b1 rtd kt = incl _ _ sat_b1i.
sat_nsd : sat ns rtd kt = incl _ _ sat_nsi.
sat_voidd : Pi N:nat. sat (void N) rtd kt = \N:nat. incl _ _ sat_voidi.
sat_gotptrd : sat gotptr rtd kt = incl _ _ sat_gotptri.
sat_intd : sat int rtd kt = sat_expd kof_numlit sat_b1d.
sat_nswd : sat nsw rtd kt = sat_expd kof_numlit sat_nsd.
product_wordsize_1 : product wordsize 1' wordsize
   = product_s (sum_s sum_z)
        (product_s (sum_s sum_z)
            (product_s (sum_s sum_z) (product_s (sum_s sum_z) product_z))).
sat_inti : sat int rtw kt
   = sat_expi _ _ _ _ _ product_wordsize_1 tr_numeq_lit kof_numlit sat_b1i.
sat_nswi : sat nsw rtw kt
   = sat_expi _ _ _ _ _ product_wordsize_1 tr_numeq_lit kof_numlit sat_nsi.
sat_boxi : Pi T':tp. kof T' kt -> sat (box T') rtw kt
   = \T':tp. \d:kof T' kt. sat_cboxi d kof_b0.
sat_mboxi : Pi T':tp. kof T' kt -> sat (mbox T') rtw kt
   = \T':tp. \d:kof T' kt. sat_cmboxi d kof_b0.
sat_theta :
   Pi R:pred. Pi K:kind.
      pon R K -> sat (theta K) (rarrow (rarrow R R) R) (karrow (karrow K K) K)
   = \R:pred. \K:kind. \dpon:pon R K.
        sat_app
           (sat_roll
               (sat_lam
                   (\t:tp.
                       \x:kof t
                             (krec (\k:kind. karrow k (karrow (karrow K K) K))).
                       \d:sat t
                             (rrec
                                 (\k:kind. \r:pred.
                                     rarrow r (rarrow (rarrow R R) R)))
                             (krec (\k:kind. karrow k (karrow (karrow K K) K))).
                       sat_lam
                          (\t2:tp. \x1:kof t2 (karrow K K).
                              \d1:sat t2 (rarrow R R) (karrow K K).
                              sat_app (sat_app d1 (sat_app d (sat_unroll d))) d1)
                          (pon_arrow dpon dpon))
                   (pon_rec
                       (\k:kind. \r:pred. \dpon':pon r k.
                           pon_arrow (pon_arrow dpon (pon_arrow dpon dpon))
                              dpon')))
               (\k:kind. \r:pred. \dpon':pon r k.
                   pon_arrow (pon_arrow dpon (pon_arrow dpon dpon)) dpon'))
           (sat_lam
               (\t:tp.
                   \x:kof t (krec (\k:kind. karrow k (karrow (karrow K K) K))).
                   \d:sat t
                         (rrec
                             (\k:kind. \r:pred. rarrow r (rarrow (rarrow R R) R)))
                         (krec (\k:kind. karrow k (karrow (karrow K K) K))).
                   sat_lam
                      (\t1:tp. \x1:kof t1 (karrow K K).
                          \d1:sat t1 (rarrow R R) (karrow K K).
                          sat_app (sat_app d1 (sat_app d (sat_unroll d))) d1)
                      (pon_arrow dpon dpon))
               (pon_rec
                   (\k:kind. \r:pred. \dpon':pon r k.
                       pon_arrow (pon_arrow dpon (pon_arrow dpon dpon)) dpon'))).
sat_diverge : Pi R:pred. Pi K:kind. pon R K -> sat (diverge _ K) R K
   = \R:pred. \K:kind. \dpon:pon R K.
        sat_app (sat_lam (\t:tp. \d1:kof t K. \d2:sat t R K. d2) dpon)
           (sat_theta _ _ dpon).
sat_setlti : Pi T':tp. Pi N:nat. kof T' knum -> sat (setlt N T') (rti N) kt
   = \T':tp. \N:nat. \d1:kof T' knum.
        sat_existsi
           (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
               sat_asserti (\x1:tr (pnumlt t T'). sat_seteqi d)
                  (propok_numlt _ _ d1 d)) pon_true.
sat_setgti : Pi T':tp. Pi N:nat. kof T' knum -> sat (setgt N T') (rti N) kt
   = \T':tp. \N:nat. \d1:kof T' knum.
        sat_existsi
           (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
               sat_asserti (\x1:tr (pnumlt T' t). sat_seteqi d)
                  (propok_numlt _ _ d d1)) pon_true.
asize : aval -> nat -> type.
asize_lit : asize (lit B1) 1'.
asize_pointer : asize (pointer L1 N1) wordsize.
asize_spointer : asize (spointer N1) wordsize.
asize_gotpointer : asize gotpointer wordsize.
asize_junk : asize junk 1'.
asize_instruct : asize (instruct IN N S1) N.
size : val -> nat -> type.
size_null : size null 0'.
size_cons : size (;' U1 V) (s N) <- size V N.
append : val -> val -> val -> type.
append_null : append null V V.
append_cons : append (;' U V1) V2 (;' U V3) <- append V1 V2 V3.
separate : nat -> val -> val -> val -> type.
separate_z : separate z V null V.
separate_s : separate (s N) (;' U V) (;' U V1) V2 <- separate N V V1 V2.
atomval : val -> aval -> nat -> type.
atomval_sing : atomval (;' (@' A N) null) A N <- asize A (s N).
atomval_cons : atomval (;' (@' A N) (;' U V)) A N <- atomval (;' U V) A (s N).
regok : reg -> type.
regok_ : regok (rg N) <- lt N regcount.
regne : reg -> reg -> type.
regne_ : regne (rg M) (rg N) <- neq M N.
segof : loc -> seg -> type.
segof_hseg : segof (lc (s (s N1))) hseg.
segof_cseg : segof (lc 1') cseg.
segof_bseg : segof (lc 0') bseg.
rlookup : rfile -> reg -> val -> type.
rlookup* : rfile* N1 -> nat -> val -> type.
rlookup_z : rlookup* (rfcons V R1) z V.
rlookup_s : rlookup* (rfcons V1 R) (s N) V <- rlookup* R N V.
rlookup_ : rlookup (rf V1 CC1 R) (rg N) V <- rlookup* R N V.
zlookup : rfile -> val -> type.
zlookup_ : zlookup (rf Z CC1 R1) Z.
htlookup : htp -> loc -> tp -> type.
htlookup_hit : htlookup (htpcons L T' S1) L T'.
htlookup_miss :
   htlookup (htpcons L' T1 S) L T' <- loc_lt L L' <- htlookup S L T'.
htupdate : htp -> loc -> tp -> htp -> type.
htupdate_hit : htupdate (htpcons L T1 S) L T' (htpcons L T' S).
htupdate_miss :
   htupdate (htpcons L' T' S) L T (htpcons L' T' S')
      <- loc_lt L L'
      <- htupdate S L T S'.
htdelete : htp -> loc -> htp -> type.
htdelete_hit : htdelete (htpcons L T1 S) L S.
htdelete_miss :
   htdelete (htpcons L' T' S) L (htpcons L' T' S')
      <- loc_lt L L'
      <- htdelete S L S'.
hlookup : heap -> loc -> val -> type.
hlookup_hit : hlookup (hcons L V H1) L V.
hlookup_miss : hlookup (hcons L' V1 H) L V <- loc_lt L L' <- hlookup H L V.
delocalize : pc -> operand -> operand -> type.
delocalize_im : delocalize PC1 (im V) (im V).
delocalize_rco : delocalize PC1 (rco REG) (rco REG).
delocalize_mco : delocalize PC (mco M O N) (mco M O' N) <- delocalize PC O O'.
delocalize_imco :
   delocalize PC (imco M O1 N O2 Q) (imco M O1' N O2' Q)
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_spco : delocalize PC1 spco spco.
delocalize_pcrel+ :
   delocalize (pc_ L N) (pcrel+ M) (im V)
      <- sum M N N'
      <- atomval V (pointer L N') 0'.
delocalize_pcrel- :
   delocalize (pc_ L N) (pcrel- M) (im V)
      <- sum M N' N
      <- atomval V (pointer L N') 0'.
delocalize_combine :
   delocalize PC (combine O1 O2) (combine O1' O2')
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_proj :
   delocalize PC (proj M O N) (proj M O' N) <- delocalize PC O O'.
delocalize_dest : pc -> dest -> dest -> type.
delocalize_rdest : delocalize_dest PC1 (rdest REG) (rdest REG).
delocalize_mdest :
   delocalize_dest PC (mdest M O N) (mdest M O' N) <- delocalize PC O O'.
delocalize_imdest :
   delocalize_dest PC (imdest M O1 N O2 Q) (imdest M O1' N O2' Q)
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_spdest : delocalize_dest PC1 spdest spdest.
delocalize_combdest :
   delocalize_dest PC (combdest N E1 E2) (combdest N E1' E2')
      <- delocalize_dest PC E1 E1'
      <- delocalize_dest PC E2 E2'.
delocalize_projdest :
   delocalize_dest PC (projdest M O E N) (projdest M O' E' N)
      <- delocalize PC O O'
      <- delocalize_dest PC E E'.
delocalize_inst : pc -> inst -> inst -> type.
delocalize_add :
   delocalize_inst PC (i_add N E O1 O2) (i_add N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_addptr :
   delocalize_inst PC (i_addptr E O1 O2) (i_addptr E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_addsptr :
   delocalize_inst PC (i_addsptr E O N) (i_addsptr E' O' N)
      <- delocalize PC O O'
      <- delocalize_dest PC E E'.
delocalize_and :
   delocalize_inst PC (i_and N E O1 O2) (i_and N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_bz :
   delocalize_inst PC (i_bz O1 O2) (i_bz O1' O2')
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_call :
   delocalize_inst PC (i_call O) (i_call O') <- delocalize PC O O'.
delocalize_cmp :
   delocalize_inst PC (i_cmp N O1 O2) (i_cmp N O1' O2')
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_cmpjcc :
   delocalize_inst PC (i_cmpjcc N Cond O1 O2 O3) (i_cmpjcc N Cond O1' O2' O3')
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'
      <- delocalize PC O3 O3'.
delocalize_fload :
   delocalize_inst PC (i_fload O) (i_fload O') <- delocalize PC O O'.
delocalize_fnop : delocalize_inst PC i_fnop i_fnop.
delocalize_fstore :
   delocalize_inst PC (i_fstore N E) (i_fstore N E') <- delocalize_dest PC E E'.
delocalize_fstflags : delocalize_inst PC i_fstflags i_fstflags.
delocalize_halt : delocalize_inst PC i_halt i_halt.
delocalize_jal :
   delocalize_inst PC (i_jal E O) (i_jal E' O')
      <- delocalize_dest PC E E'
      <- delocalize PC O O'.
delocalize_jbox :
   delocalize_inst PC (i_jbox O1 O2) (i_jbox O1' O2')
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_jcc :
   delocalize_inst PC (i_jcc Cond O) (i_jcc Cond O') <- delocalize PC O O'.
delocalize_jmp : delocalize_inst PC (i_jmp O) (i_jmp O') <- delocalize PC O O'.
delocalize_jnbox :
   delocalize_inst PC (i_jnbox O1 O2) (i_jnbox O1' O2')
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_malloc :
   delocalize_inst PC (i_malloc O1 E O2) (i_malloc O1' E' O2')
      <- delocalize PC O1 O1'
      <- delocalize_dest PC E E'
      <- delocalize PC O2 O2'.
delocalize_mallocarr :
   delocalize_inst PC (i_mallocarr O1 E N O2 O3) (i_mallocarr O1' E' N O2' O3')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'
      <- delocalize PC O3 O3'.
delocalize_mov :
   delocalize_inst PC (i_mov E O) (i_mov E' O')
      <- delocalize_dest PC E E'
      <- delocalize PC O O'.
delocalize_movsx :
   delocalize_inst PC (i_movsx N E O) (i_movsx N E' O')
      <- delocalize_dest PC E E'
      <- delocalize PC O O'.
delocalize_movzx :
   delocalize_inst PC (i_movzx N E O) (i_movzx N E' O')
      <- delocalize_dest PC E E'
      <- delocalize PC O O'.
delocalize_nop : delocalize_inst PC i_nop i_nop.
delocalize_or :
   delocalize_inst PC (i_or N E O1 O2) (i_or N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_pop :
   delocalize_inst PC (i_pop N E) (i_pop N E') <- delocalize_dest PC E E'.
delocalize_push :
   delocalize_inst PC (i_push O) (i_push O') <- delocalize PC O O'.
delocalize_pushrel :
   delocalize_inst PC (i_pushrel O) (i_pushrel O') <- delocalize PC O O'.
delocalize_ret : delocalize_inst PC i_ret i_ret.
delocalize_rcl :
   delocalize_inst PC (i_rcl N E O1 O2) (i_rcl N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_rcr :
   delocalize_inst PC (i_rcr N E O1 O2) (i_rcr N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_rol :
   delocalize_inst PC (i_rol N E O1 O2) (i_rol N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_ror :
   delocalize_inst PC (i_ror N E O1 O2) (i_ror N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_salloc : delocalize_inst PC (i_salloc N) (i_salloc N).
delocalize_sfree : delocalize_inst PC (i_sfree N) (i_sfree N).
delocalize_shl :
   delocalize_inst PC (i_shl N E O1 O2) (i_shl N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_shr :
   delocalize_inst PC (i_shr N E O1 O2) (i_shr N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_sar :
   delocalize_inst PC (i_sar N E O1 O2) (i_sar N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_sub :
   delocalize_inst PC (i_sub N E O1 O2) (i_sub N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_subptr :
   delocalize_inst PC (i_subptr E O1 O2) (i_subptr E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
delocalize_xor :
   delocalize_inst PC (i_xor N E O1 O2) (i_xor N E' O1' O2')
      <- delocalize_dest PC E E'
      <- delocalize PC O1 O1'
      <- delocalize PC O2 O2'.
codeval : pc -> val -> instseq -> type.
codeval_nil : codeval PC1 V1 codenil.
codeval_cons :
   codeval (pc_ L N) V (; IN' I)
      <- append V1 V2 V
      <- atomval V1 (instruct IN M S1) 0'
      <- delocalize_inst (pc_ L N) IN IN'
      <- sum M N N'
      <- codeval (pc_ L N') V2 I.
clookup : heap -> pc -> instseq -> type.
clookup_ :
   clookup H (pc_ L N) I
      <- segof L cseg
      <- hlookup H L V
      <- separate N V V1 V'
      <- codeval (pc_ L N) V' I.
binary_int : endian -> val -> binary N1 -> type.
binary_int_null : binary_int End1 null nil$.
binary_int_cons_big :
   binary_int bigend (;' (@' (lit Bbyte) 0') V) B'
      <- binary_int bigend V B
      <- binary_append Bbyte B B'.
binary_int_cons_lit :
   binary_int littleend (;' (@' (lit Bbyte) 0') V) B'
      <- binary_int littleend V B
      <- binary_append B Bbyte B'.
strip : htp -> htp -> type.
strip_nil : strip htpnil htpnil.
strip_hseg : strip (htpcons L T' S) S' <- segof L hseg <- strip S S'.
strip_cseg :
   strip (htpcons L T' S) (htpcons L T' S') <- segof L cseg <- strip S S'.
strip_bseg : strip (htpcons L T' S) S' <- segof L bseg <- strip S S'.
reflex : subtype T' T'.
reflexeq : subtype T1 T2 <- equiv T1 T2 <- kof T1 kt <- kof T2 kt.
trans : subtype T1 T3 <- subtype T1 T2 <- subtype T2 T3.
seteq_sub : subtype (seteq N T) (seteq N T') <- tr (pnumeq T T').
prod_sub :
   subtype (prod T1 T2) (prod T1' T2') <- subtype T1 T1' <- subtype T2 T2'.
exp_sub :
   subtype (exp T TN) (exp T' TN') <- subtype T T' <- tr (pnumeq TN TN').
code_sub : subtype (code PC G) (code PC G') <- subrtype G' G.
arrow_sub : subtype (arrow G) (arrow G') <- subrtype G' G.
cbox_sub :
   subtype (cbox T1 T2) (cbox T1' T2') <- subtype T1 T1' <- subtype T2 T2'.
cmbox_sub :
   subtype (cmbox T1 T2) (cmbox T1' T2')
      <- subtype T1 T1'
      <- subtype T1' T1
      <- subtype T2 T2'
      <- subtype T2' T2.
sptr_sub : subtype (sptr T) (sptr T') <- subtype T T'.
forall_sub :
   subtype (forall K R (\t:tp. T t)) (forall K R (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> sat t R K -> subtype (T t) (T' t)).
exists_sub :
   subtype (exists K R (\t:tp. T t)) (exists K R (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> sat t R K -> subtype (T t) (T' t)).
guard_sub : subtype (guard P T) (guard P T') <- (tr P -> subtype T T').
assert_sub : subtype (assert P T) (assert P T') <- (tr P -> subtype T T').
join_sub :
   subtype (join T1 T2) (join T1' T2') <- subtype T1 T1' <- subtype T2 T2'.
forall_elim :
   subtype (forall K R (\t:tp. T t)) (T T')
      <- (Pi t:tp. kof t K -> kof (T t) kt)
      <- sat T' R K.
exists_intro :
   subtype (T T') (exists K R (\t:tp. T t))
      <- (Pi t:tp. kof t K -> kof (T t) kt)
      <- sat T' R K.
gen : subtype T' (forall K R (\t:tp. T')) <- pon R K.
cogen : subtype (exists K R (\t:tp. T')) T' <- pon R K.
guard_elim : subtype (guard P T') T' <- tr P.
gen_guard : subtype T' (guard P T') <- propok P.
assert_intro : subtype T' (assert P T') <- tr P.
cogen_assert : subtype (assert P T') T' <- propok P.
rec_intro :
   subtype (T' (rec (\t:tp. T' t))) (rec (\t:tp. T' t))
      <- (Pi t:tp. kof t kt -> kof (T' t) kt).
rec_elim :
   subtype (rec (\t:tp. T' t)) (T' (rec (\t:tp. T' t)))
      <- (Pi t:tp. kof t kt -> kof (T' t) kt).
nsexp_sub : subtype T' (exp ns TN) <- sat T' (rtn TN) kt.
void_sub : subtype (void N1) T' <- kof T' kt.
raa : subtype T1 T2 <- tr pfalse <- kof T1 kt <- kof T2 kt.
meet_intro : subtype T' (meet T1 T2) <- subtype T' T1 <- subtype T' T2.
meet_elim1 : subtype (meet T1 T2) T1 <- kof T2 kt.
meet_elim2 : subtype (meet T1 T2) T2 <- kof T1 kt.
join_intro1 : subtype T1 (join T1 T2) <- kof T2 kt.
join_intro2 : subtype T2 (join T1 T2) <- kof T1 kt.
join_elim : subtype (join T1 T2) T' <- subtype T1 T' <- subtype T2 T'.
meet_dist_join :
   subtype (meet T' (join T1 T2)) (join (meet T' T1) (meet T' T2)).
meet_dist_prod :
   subtype (meet (prod T1 T2) (prod T1' T2')) (prod (meet T1 T1') (meet T2 T2'))
      <- sat T1 (rtn TN) kt
      <- sat T1' (rtn TN) kt.
meet_dist_prod' :
   subtype (meet (prod T1 T2) (prod T1' T2')) (prod (meet T1 T1') (meet T2 T2'))
      <- sat T2 (rtn TN) kt
      <- sat T2' (rtn TN) kt.
prod_dist_join1 :
   subtype (prod T' (join T1 T2)) (join (prod T' T1) (prod T' T2)).
prod_dist_join2 :
   subtype (prod (join T1 T2) T') (join (prod T1 T') (prod T2 T')).
prod_dist_void1 : subtype (prod (void N1) T') (void N2) <- kof T' kt.
prod_dist_void2 : subtype (prod T' (void N1)) (void N2) <- kof T' kt.
meet_dist_cbox :
   subtype (meet (cbox T1a T1b) (cbox T2a T2b))
      (cbox (meet T1a T2a) (meet T1b T2b))
      <- sat T1a (rtn TNa) kt
      <- sat T2a (rtn TNa) kt
      <- sat T1b (rtn TNb) kt
      <- sat T2b (rtn TNb) kt.
meet_dist_cmbox :
   subtype (meet (cmbox T1a T1b) (cmbox T2a T2b))
      (cmbox (meet T1a T2a) (meet T1b T2b))
      <- sat T1a (rtn TNa) kt
      <- sat T2a (rtn TNa) kt
      <- sat T1b (rtn TNb) kt
      <- sat T2b (rtn TNb) kt.
assert_dist_meet1 : subtype (meet (assert P T1) T2) (assert P (meet T1 T2)).
assert_dist_meet2 : subtype (meet T1 (assert P T2)) (assert P (meet T1 T2)).
exists_dist_meet1 :
   subtype (meet (exists K R (\t:tp. T1 t)) T2)
      (exists K R (\t:tp. meet (T1 t) T2)).
exists_dist_meet2 :
   subtype (meet T1 (exists K R (\t:tp. T2 t)))
      (exists K R (\t:tp. meet T1 (T2 t))).
cforgetm : subtype (cmbox T1 T2) (cbox T1 T2).
rtruncate : subtype (cbox T' (prod T1 T2)) (cbox T' T1) <- kof T2 kt.
rtruncatem : subtype (cmbox T' (prod T1 T2)) (cmbox T' T1) <- kof T2 kt.
ltruncate : subtype (cbox (prod T1 T2) T') (cbox T2 T') <- kof T1 kt.
ltruncatem : subtype (cmbox (prod T1 T2) T') (cmbox T2 T') <- kof T1 kt.
int_cptr_contra :
   subtype (meet setlt_1024 (cbox T1 T2)) (void N1) <- kof T1 kt <- kof T2 kt.
lassoc : subtype (prod T1 (prod T2 T3)) (prod (prod T1 T2) T3).
rassoc : subtype (prod (prod T1 T2) T3) (prod T1 (prod T2 T3)).
luniti : subtype T' (prod b0 T').
lunite : subtype (prod b0 T') T'.
runiti : subtype T' (prod T' b0).
runite : subtype (prod T' b0) T'.
codeappend : subtype (prod (code PC G) T') (code PC G) <- kof T' kt.
explode :
   subtype (exp T TN) T'
      <- tr (pnumeq TN (numlit N))
      <- tp_exp T N T'
      <- kof T kt.
implode :
   subtype T' (exp T TN)
      <- tr (pnumeq TN (numlit N))
      <- tp_exp T N T'
      <- kof T kt.
partition :
   subtype (exp T' TN) (prod (exp T' TN1) (exp T' TN2))
      <- tr (pnumeq TN (numadd TN1 TN2)).
conjoin :
   subtype (prod (exp T' TN1) (exp T' TN2)) (exp T' TN)
      <- tr (pnumeq TN (numadd TN1 TN2)).
seteq_forget : subtype (seteq N TN) (inti N) <- kof TN knum.
seteq_goodnum : subtype (seteq N TN) (assert (good TN) (seteq N TN)).
exp_goodnum : subtype (exp T' TN) (assert (good TN) (exp T' TN)).
sat_goodnum : subtype T' (assert (good TN) T') <- sat T' (rtn TN) kt.
seteq_meet :
   subtype (meet (seteq N TN1) (seteq N TN2))
      (assert (pnumeq TN1 TN2) (seteq N TN1)).
trichotomy :
   subtype (inti N) (join (setlt N TN) (join (seteq N TN) (setgt N TN)))
      <- tr (good TN).
focus : subtype (inti N) (exists knum (rtrue knum) (\t:tp. seteq N t)).
subrtype_reflex : subrtype G G.
subrtype_trans : subrtype G1 G3 <- subrtype G1 G2 <- subrtype G2 G3.
subrtype_reg :
   subrtype G1 G2
      <- rtlookup G1 REG T1
      <- rtupdate G1 REG T2 G2
      <- subtype T1 T2.
subrtype_sp :
   subrtype G1 G2 <- ztlookup G1 ZT1 <- ztupdate G1 ZT2 G2 <- subtype ZT1 ZT2.
subrtype* : rtp* N -> rtp* N -> type.
subrtype_nil : subrtype* rtnil rtnil.
subrtype_cons :
   subrtype* (rtcons T1 G1) (rtcons T2 G2) <- subtype T1 T2 <- subrtype* G1 G2.
subrtype_all :
   subrtype (rt ZT1 G1) (rt ZT2 G2) <- subtype ZT1 ZT2 <- subrtype* G1 G2.
forall_weaken :
   Pi R':pred. Pi K:kind. Pi R:pred. Pi T':tp -> tp.
      pon R' K -> entails R' R -> (Pi t:tp. kof t K -> kof (T' t) kt)
         -> subtype (forall K R (\t:tp. T' t)) (forall K R' (\t:tp. T' t))
   = \R':pred. \K:kind. \R:pred. \T':tp -> tp. \d3:pon R' K. \d2:entails R' R.
        \d1:Pi t:tp. kof t K -> kof (T' t) kt.
        trans
           (forall_sub
               (\t:tp. \d:kof t K. \d':sat t R' K.
                   forall_elim (entailment d2 d') (\t1:tp. \x:kof t1 K. d1 t1 x)))
           (gen d3).
exists_weaken :
   Pi R:pred. Pi K:kind. Pi R':pred. Pi T':tp -> tp.
      pon R K -> entails R R' -> (Pi t:tp. kof t K -> kof (T' t) kt)
         -> subtype (exists K R (\t:tp. T' t)) (exists K R' (\t:tp. T' t))
   = \R:pred. \K:kind. \R':pred. \T':tp -> tp. \d3:pon R K. \d2:entails R R'.
        \d1:Pi t:tp. kof t K -> kof (T' t) kt.
        trans (cogen d3)
           (exists_sub
               (\t:tp. \d:kof t K. \d':sat t R K.
                   exists_intro (entailment d2 d')
                      (\t1:tp. \x:kof t1 K. d1 t1 x))).
guard_weaken :
   Pi P':prop. Pi P:prop. Pi T':tp.
      propok P' -> tr (pimpl P' P) -> subtype (guard P T') (guard P' T')
   = \P':prop. \P:prop. \T':tp. \d2:propok P'. \d1:tr (pimpl P' P).
        trans (guard_sub (\d:tr P'. guard_elim (tr_imple d d1))) (gen_guard d2).
assert_weaken :
   Pi P:prop. Pi P':prop. Pi T':tp.
      propok P -> tr (pimpl P P') -> subtype (assert P T') (assert P' T')
   = \P:prop. \P':prop. \T':tp. \d2:propok P. \d1:tr (pimpl P P').
        trans (cogen_assert d2)
           (assert_sub (\d:tr P. assert_intro (tr_imple d d1))).
exists_elim :
   Pi R:pred. Pi K:kind. Pi T:tp -> tp. Pi T':tp.
      pon R K -> (Pi t:tp. kof t K -> sat t R K -> subtype (T t) T')
         -> subtype (exists K R (\t:tp. T t)) T'
   = \R:pred. \K:kind. \T:tp -> tp. \T':tp. \d2:pon R K.
        \d1:Pi t:tp. kof t K -> sat t R K -> subtype (T t) T'.
        trans (cogen d2)
           (exists_sub (\t:tp. \x:kof t K. \x1:sat t R K. d1 t x x1)).
assert_elim :
   Pi P:prop. Pi T:tp. Pi T':tp.
      propok P -> (tr P -> subtype T T') -> subtype (assert P T) T'
   = \P:prop. \T:tp. \T':tp. \d2:propok P. \d1:tr P -> subtype T T'.
        trans (cogen_assert d2) (assert_sub (\x:tr P. d1 x)).
setlt_goodnum :
   Pi TN:tp. Pi N:nat.
      kof TN knum -> subtype (setlt N TN) (assert (good TN) (setlt N TN))
   = \TN:tp. \N:nat. \d_kofTN:kof TN knum.
        trans
           (exists_elim _ _ _ _ pon_true
               (\t:tp. \d_kof:kof t knum. \d_sat:sat t (rtrue knum) knum.
                   assert_sub
                      (\x:tr (good TN).
                          exists_intro (sat_true d_kof)
                             (\t':tp. \d_kof':kof t' knum.
                                 kof_assert (kof_seteq d_kof')
                                    (propok_numlt _ _ d_kofTN d_kof')))))
           (exists_sub
               (\t:tp. \d_kof:kof t knum. \d_sat:sat t (rtrue knum) knum.
                   assert_elim _ _ _ (propok_numlt _ _ d_kofTN d_kof)
                      (\d_tr:tr (pnumlt t TN).
                          trans (assert_intro (tr_numlt_good2 _ _ d_tr))
                             (assert_intro d_tr)))).
setlt_sub :
   Pi T:tp. Pi T':tp. Pi N:nat.
      kof T knum -> tr (pnumeq T T') -> subtype (setlt N T) (setlt N T')
   = \T:tp. \T':tp. \N:nat. \d2:kof T knum. \d1:tr (pnumeq T T').
        exists_sub
           (\t:tp. \d':kof t knum. \x:sat t (rtrue knum) knum.
               assert_weaken _ _ _ (propok_numlt _ _ d2 d')
                  (tr_impli (propok_numlt _ _ d2 d')
                      (\d''. tr_numlt_eq_trans _ _ _ d1 d''))).
setgt_sub :
   Pi T:tp. Pi T':tp. Pi N:nat.
      kof T knum -> tr (pnumeq T T') -> subtype (setgt N T) (setgt N T')
   = \T:tp. \T':tp. \N:nat. \d2:kof T knum. \d1:tr (pnumeq T T').
        exists_sub
           (\t:tp. \d':kof t knum. \x:sat t (rtrue knum) knum.
               assert_weaken _ _ _ (propok_numlt _ _ d' d2)
                  (tr_impli (propok_numlt _ _ d' d2)
                      (\d''.
                          tr_numeq_lt_trans _ _ _ d'' (tr_numeq_symm d1)))).
setlt_forget : Pi TN:tp. Pi N:nat. kof TN knum -> subtype (setlt N TN) (inti N)
   = \TN:tp. \N:nat. \d1:kof TN knum.
        trans (cogen pon_true)
           (exists_sub
               (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
                   trans (seteq_forget d) (cogen_assert (propok_numlt _ _ d1 d)))).
setgt_forget : Pi TN:tp. Pi N:nat. kof TN knum -> subtype (setgt N TN) (inti N)
   = \TN:tp. \N:nat. \d1:kof TN knum.
        trans (cogen pon_true)
           (exists_sub
               (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
                   trans (seteq_forget d) (cogen_assert (propok_numlt _ _ d d1)))).
raa_lt :
   Pi TN:tp. Pi N:nat. Pi N1:nat.
      kof TN knum -> subtype (meet (seteq N TN) (setlt N TN)) (void N1)
   = \TN:tp. \N:nat. \N1:nat. \dkof:kof TN knum.
        trans
           (trans
               (trans (cogen pon_true)
                   (exists_sub
                       (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
                           trans (cogen_assert (propok_numeq d dkof))
                              (cogen_assert (propok_numlt _ _ dkof d)))))
               (exists_sub
                   (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
                       trans
                          (assert_sub
                              (\d1:tr (pnumlt t TN).
                                  trans
                                     (assert_sub
                                         (\d2:tr (pnumeq TN t).
                                             raa kof_void (kof_seteq dkof)
                                                (tr_numlt_contra
                                                    (tr_numeq_lt_trans _ _ _ d1 d2))))
                                     seteq_meet))
                          assert_dist_meet2)))
           exists_dist_meet2.
raa_gt :
   Pi TN:tp. Pi N:nat. Pi N1:nat.
      kof TN knum -> subtype (meet (seteq N TN) (setgt N TN)) (void N1)
   = \TN:tp. \N:nat. \N1:nat. \dkof:kof TN knum.
        trans
           (trans
               (trans (cogen pon_true)
                   (exists_sub
                       (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
                           trans (cogen_assert (propok_numeq d dkof))
                              (cogen_assert (propok_numlt _ _ d dkof)))))
               (exists_sub
                   (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
                       trans
                          (assert_sub
                              (\d1:tr (pnumlt TN t).
                                  trans
                                     (assert_sub
                                         (\d2:tr (pnumeq TN t).
                                             raa kof_void (kof_seteq dkof)
                                                (tr_numlt_contra
                                                    (tr_numlt_eq_trans _ _ _
                                                        (tr_numeq_symm d2) d1))))
                                     seteq_meet))
                          assert_dist_meet2)))
           exists_dist_meet2.
raa_ltgt :
   Pi TN:tp. Pi N:nat. Pi N1:nat.
      kof TN knum -> subtype (meet (setlt N TN) (setgt N TN)) (void N1)
   = \TN:tp. \N:nat. \N1:nat. \dkof:kof TN knum.
        trans
           (trans
               (trans (cogen pon_true)
                   (trans (cogen pon_true)
                       (exists_sub
                           (\t1:tp. \d1:kof t1 knum.
                               \x:sat t1 (rtrue knum) knum.
                               exists_sub
                                  (\t2:tp. \d2:kof t2 knum.
                                      \x1:sat t2 (rtrue knum) knum.
                                      trans
                                         (trans
                                             (cogen_assert (propok_numeq d2 d1))
                                             (cogen_assert
                                                 (propok_numlt _ _ d2 dkof)))
                                         (cogen_assert (propok_numlt _ _ dkof d1)))))))
               (exists_sub
                   (\t1:tp. \d1:kof t1 knum. \x:sat t1 (rtrue knum) knum.
                       trans
                          (exists_sub
                              (\t2:tp. \d2:kof t2 knum.
                                  \x1:sat t2 (rtrue knum) knum.
                                  trans
                                     (assert_sub
                                         
(\d3:tr (pnumlt t1 TN).
    trans
       (assert_sub
           (\d4:tr (pnumlt TN t2).
               trans
                  (assert_sub
                      (\d5:tr (pnumeq t1 t2).
                          raa kof_void (kof_seteq d1)
                             (tr_numlt_contra
                                 (tr_numlt_trans _ _ _
                                     (tr_numeq_lt_trans _ _ _ d3 (tr_numeq_symm d5))
                                     d4))))
                  seteq_meet))
       assert_dist_meet2))
                                     assert_dist_meet1))
                          exists_dist_meet2)))
           exists_dist_meet1.
subrange_lt :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1. Pi N:nat.
      add B1 B2 B3 zero -> subtype (setlt N (number B1)) (setlt N (number B3))
   = \N1:nat. \B1:binary N1. \B2:binary N1. \B3:binary N1. \N:nat.
        \dadd:add B1 B2 B3 zero.
        exists_sub
           (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
               assert_weaken _ _ _ (propok_numlt _ _ kof_number d)
                  (tr_impli (propok_numlt _ _ kof_number d)
                      (\d':tr (pnumlt t (number B1)).
                          tr_numlt_leq_trans _ _ _ (tr_numleq_bin _ _ _ _ dadd) d'))).
subrange_gt :
   Pi N1:nat. Pi B2:binary N1. Pi B1:binary N1. Pi B3:binary N1. Pi N:nat.
      add B2 B1 B3 zero -> subtype (setgt N (number B3)) (setgt N (number B2))
   = \N1:nat. \B2:binary N1. \B1:binary N1. \B3:binary N1. \N:nat.
        \dadd:add B2 B1 B3 zero.
        exists_sub
           (\t:tp. \d:kof t knum. \x:sat t (rtrue knum) knum.
               assert_weaken _ _ _ (propok_numlt _ _ d kof_number)
                  (tr_impli (propok_numlt _ _ d kof_number)
                      (\d':tr (pnumlt (number B3) t).
                          tr_numleq_lt_trans _ _ _ d' (tr_numleq_bin _ _ _ _ dadd)))).
subrange_eqlt :
   Pi N1:nat. Pi Bdiff:binary N1. Pi B1:binary N1. Pi B2:binary N1. Pi N:nat.
      is_nonzero Bdiff -> add B1 Bdiff B2 zero
         -> subtype (seteq N (number B1)) (setlt N (number B2))
   = \N1:nat. \Bdiff:binary N1. \B1:binary N1. \B2:binary N1. \N:nat.
        \dinz:is_nonzero Bdiff. \dadd:add B1 Bdiff B2 zero.
        trans
           (exists_intro (sat_true kof_number)
               (\t:tp. \d:kof t knum.
                   kof_assert (kof_seteq d) (propok_numlt _ _ kof_number d)))
           (assert_intro (tr_numlt_bin dinz dadd)).
subrange_eqgt :
   Pi N1:nat. Pi Bdiff:binary N1. Pi B2:binary N1. Pi B1:binary N1. Pi N:nat.
      is_nonzero Bdiff -> add B2 Bdiff B1 zero
         -> subtype (seteq N (number B1)) (setgt N (number B2))
   = \N1:nat. \Bdiff:binary N1. \B2:binary N1. \B1:binary N1. \N:nat.
        \dinz:is_nonzero Bdiff. \dadd:add B2 Bdiff B1 zero.
        trans
           (exists_intro (sat_true kof_number)
               (\t:tp. \d:kof t knum.
                   kof_assert (kof_seteq d) (propok_numlt _ _ d kof_number)))
           (assert_intro (tr_numlt_bin dinz dadd)).
box_sub : Pi T:tp. Pi T':tp. subtype T T' -> subtype (box T) (box T')
   = \T:tp. \T':tp. \d:subtype T T'. cbox_sub d reflex.
mbox_sub :
   Pi T:tp. Pi T':tp.
      subtype T' T -> subtype T T' -> subtype (mbox T) (mbox T')
   = \T:tp. \T':tp. \d2:subtype T' T. \d1:subtype T T'.
        cmbox_sub d2 d1 reflex reflex.
meet_dist_box :
   Pi T2:tp. Pi TN:tp. Pi T1:tp.
      sat T2 (rtn TN) kt -> sat T1 (rtn TN) kt
         -> subtype (meet (box T1) (box T2)) (box (meet T1 T2))
   = \T2:tp. \TN:tp. \T1:tp. \d2:sat T2 (rtn TN) kt. \d1:sat T1 (rtn TN) kt.
        trans (cbox_sub reflex (meet_elim1 kof_b0))
           (meet_dist_cbox d2 d1 sat_b0i sat_b0i).
meet_dist_mbox :
   Pi T2:tp. Pi TN:tp. Pi T1:tp.
      sat T2 (rtn TN) kt -> sat T1 (rtn TN) kt
         -> subtype (meet (mbox T1) (mbox T2)) (mbox (meet T1 T2))
   = \T2:tp. \TN:tp. \T1:tp. \d2:sat T2 (rtn TN) kt. \d1:sat T1 (rtn TN) kt.
        trans
           (cmbox_sub reflex reflex (meet_intro reflex reflex)
               (meet_elim1 kof_b0))
           (meet_dist_cmbox d2 d1 sat_b0i sat_b0i).
forgetc : Pi T1:tp. Pi T2:tp. kof T1 kt -> subtype (cbox T1 T2) (box T2)
   = \T1:tp. \T2:tp. \d:kof T1 kt. trans (ltruncate d) (cbox_sub reflex runiti).
mforgetc : Pi T1:tp. Pi T2:tp. kof T1 kt -> subtype (cmbox T1 T2) (mbox T2)
   = \T1:tp. \T2:tp. \d:kof T1 kt.
        trans (ltruncatem d) (cmbox_sub reflex reflex runite runiti).
forgetm : Pi T':tp. subtype (mbox T') (box T') = \T':tp. cforgetm.
truncate : Pi T2:tp. Pi T1:tp. kof T2 kt -> subtype (box (prod T1 T2)) (box T1)
   = \T2:tp. \T1:tp. \x:kof T2 kt. rtruncate x.
truncatem :
   Pi T2:tp. Pi T1:tp. kof T2 kt -> subtype (mbox (prod T1 T2)) (mbox T1)
   = \T2:tp. \T1:tp. \x:kof T2 kt. rtruncatem x.
int_ptr_contra :
   Pi T':tp. Pi N1:nat.
      kof T' kt -> subtype (meet setlt_1024 (box T')) (void N1)
   = \T':tp. \N1:nat. \d:kof T' kt. int_cptr_contra d kof_b0.
explode1 : Pi T':tp. kof T' kt -> subtype (exp T' (numlit 1')) T'
   = \T':tp. \d:kof T' kt.
        trans runite (explode d (tp_exp_s tp_exp_z) tr_numeq_lit).
implode1 : Pi T':tp. kof T' kt -> subtype T' (exp T' (numlit 1'))
   = \T':tp. \d:kof T' kt.
        trans (implode d (tp_exp_s tp_exp_z) tr_numeq_lit) runiti.
ns_sub :
   Pi N:nat. Pi T2:tp. Pi T1:tp.
      tp_exp ns N T2 -> sat T1 (rti N) kt -> subtype T1 T2
   = \N:nat. \T2:tp. \T1:tp. \d2:tp_exp ns N T2. \d1:sat T1 (rti N) kt.
        trans (explode kof_ns d2 tr_numeq_lit) (nsexp_sub d1).
exp_sub_se :
   Pi TN:tp. Pi T:tp. Pi T':tp.
      kof TN knum -> subtype T T' -> subtype (exp T TN) (exp T' TN)
   = \TN:tp. \T:tp. \T':tp. \d2:kof TN knum. \d1:subtype T T'.
        trans (cogen_assert (propok_numeq d2 d2))
           (trans (assert_sub (\d':tr (pnumeq TN TN). exp_sub d' d1))
               exp_goodnum).
boxsub : tp -> nat -> tp -> tp -> type.
boxsub_base :
   boxsub T' N T1 T2
      <- subtype T' (prod T1 T2)
      <- sat T1 (rti N) kt
      <- kof T2 kt.
boxsub_transl : boxsub T' N T1 T2 <- boxsub T N T1 T2 <- subtype T' T.
boxsub_transr :
   boxsub T' N T1' T2' <- boxsub T' N T1 T2 <- subtype T1 T1' <- subtype T2 T2'.
boxsub_shleft :
   boxsub T' N' T1a (prod T1b T2)
      <- boxsub T' N (prod T1a T1b) T2
      <- sat T1b (rti M) kt
      <- sum M N' N.
boxsub_shright :
   boxsub T' N' (prod T1 T2a) T2b
      <- boxsub T' N T1 (prod T2a T2b)
      <- sat T2a (rti M) kt
      <- sum M N N'.
boxsub_meet :
   boxsub T' N (meet T1 T1') (meet T2 T2')
      <- boxsub T' N T1 T2
      <- boxsub T' N T1' T2'.
aof_lit : aof S1 (lit B1) b1.
aof_chpointer :
   aof S (pointer L N) (cmbox T2 T3)
      <- htlookup S L T'
      <- segof L hseg
      <- boxsub T' N (prod T1 T2) (prod T3 T4)
      <- subtype (prod (prod T1 T2) (prod T3 T4)) T'.
aof_cpointer :
   aof S (pointer L N) (cbox T2 T3)
      <- htlookup S L T'
      <- boxsub T' N (prod T1 T2) (prod T3 T4).
aof_function :
   aof S (pointer L N) (arrow G)
      <- htlookup S L T
      <- segof L cseg
      <- sat T' (rti N) kt
      <- rtpok G
      <- subtype T (prod T' (code (pc_ L N) G)).
aof_gotpointer : aof S gotpointer gotptr.
of_atom : of S V T' <- atomval V A 0' <- aof S A T'.
of_spointer :
   of S V (sptr T') <- atomval V (spointer N) 0' <- of S' V' T' <- size V' N.
of_code : of S V (code PC G) <- codeval PC V I <- rtpok G <- codeok S G I.
of_seteq :
   of S V (seteq N (number B))
      <- product N bytebits N*bytebits
      <- binary_int theend V B.
of_append : of S V (prod T1 T2) <- append V1 V2 V <- of S V1 T1 <- of S V2 T2.
of_ns : of S (;' U1 null) ns.
of_null : of S null b0.
forall_intro :
   of S V (forall K R (\t:tp. T' t))
      <- pon R K
      <- (Pi t:tp. kof t K -> sat t R K -> of S V (T' t)).
guard_intro : of S V (guard P T') <- propok P <- (tr P -> of S V T').
meet_intro_val : of S V (meet T1 T2) <- of S V T1 <- of S V T2.
subsume : of S V T2 <- of S V T1 <- subtype T1 T2.
of_big_ns : of S V T' <- size V N <- tp_exp ns N T'.
of_top : of S V top'.
of_size_contra :
   of S V T
      <- size V' N1
      <- of S' V' T'
      <- boxsub T' N2 T1 T2
      <- lt N1 N2
      <- kof T kt.
aof_hpointer :
   Pi T1:tp. Pi T2:tp. Pi T3:tp. Pi T':tp. Pi N:nat. Pi L:loc. Pi S:htp.
      subtype (prod T1 (prod T2 T3)) T' -> subtype T' (prod T1 (prod T2 T3))
         -> kof T3 kt -> kof T2 kt -> sat T1 (rti N) kt -> segof L hseg
         -> htlookup S L T' -> aof S (pointer L N) (mbox T2)
   = \T1:tp. \T2:tp. \T3:tp. \T':tp. \N:nat. \L:loc. \S:htp.
        \d7:subtype (prod T1 (prod T2 T3)) T'.
        \d6:subtype T' (prod T1 (prod T2 T3)). \d5:kof T3 kt. \d4:kof T2 kt.
        \d3:sat T1 (rti N) kt. \d2:segof L hseg. \d1:htlookup S L T'.
        aof_chpointer (trans d7 (prod_sub reflex runite))
           (boxsub_base (kof_prod d5 d4)
               (entailment (entails_tn (tr_numadd_ident (tr_good_lit _)))
                   (sat_prodn sat_b0i d3))
               (trans (prod_sub reflex runiti) d6)) d2 d1.
aof_pointer :
   Pi T':tp. Pi T1:tp. Pi T2:tp. Pi T3:tp. Pi N:nat. Pi S:htp. Pi L:loc.
      subtype T' (prod T1 (prod T2 T3)) -> kof T3 kt -> kof T2 kt
         -> sat T1 (rti N) kt -> htlookup S L T' -> aof S (pointer L N) (box T2)
   = \T':tp. \T1:tp. \T2:tp. \T3:tp. \N:nat. \S:htp. \L:loc.
        \d5:subtype T' (prod T1 (prod T2 T3)). \d4:kof T3 kt. \d3:kof T2 kt.
        \d2:sat T1 (rti N) kt. \d1:htlookup S L T'.
        aof_cpointer
           (boxsub_base (kof_prod d4 d3)
               (entailment (entails_tn (tr_numadd_ident (tr_good_lit _)))
                   (sat_prodn sat_b0i d2))
               (trans (prod_sub reflex runiti) d5)) d1.
of_setlt :
   Pi N*bytebits:nat. Pi Bdiff:binary N*bytebits. Pi B':binary N*bytebits.
      Pi B:binary N*bytebits. Pi V:val. Pi N:nat. Pi S:htp.
      is_nonzero Bdiff -> add B' Bdiff B zero -> binary_int theend V B'
         -> product N bytebits N*bytebits -> of S V (setlt N (number B))
   = \N*bytebits:nat. \Bdiff:binary N*bytebits. \B':binary N*bytebits.
        \B:binary N*bytebits. \V:val. \N:nat. \S:htp. \d3:is_nonzero Bdiff.
        \d2:add B' Bdiff B zero. \d1:binary_int theend V B'.
        \d0:product N bytebits N*bytebits.
        subsume
           (trans
               (exists_intro (sat_true kof_number)
                   (\t:tp. \d:kof t knum.
                       kof_assert (kof_seteq d) (propok_numlt _ _ kof_number d)))
               (assert_intro (tr_numlt_bin d3 d2)))
           (of_seteq d1 d0).
of_setgt :
   Pi N*bytebits:nat. Pi Bdiff:binary N*bytebits. Pi B:binary N*bytebits.
      Pi B':binary N*bytebits. Pi V:val. Pi N:nat. Pi S:htp.
      is_nonzero Bdiff -> add B Bdiff B' zero -> binary_int theend V B'
         -> product N bytebits N*bytebits -> of S V (setgt N (number B))
   = \N*bytebits:nat. \Bdiff:binary N*bytebits. \B:binary N*bytebits.
        \B':binary N*bytebits. \V:val. \N:nat. \S:htp. \d3:is_nonzero Bdiff.
        \d2:add B Bdiff B' zero. \d1:binary_int theend V B'.
        \d0:product N bytebits N*bytebits.
        subsume
           (trans
               (exists_intro (sat_true kof_number)
                   (\t:tp. \d:kof t knum.
                       kof_assert (kof_seteq d) (propok_numlt _ _ d kof_number)))
               (assert_intro (tr_numlt_bin d3 d2)))
           (of_seteq d1 d0).
oof_im : oof S G1 (im V) T' <- strip S S' <- of S' V T'.
oof_rco : oof S1 G (rco REG) T' <- rtlookup G REG T'.
oof_mco :
   oof S G (mco M O N) T2
      <- oof S G O (cbox T3 (prod T1 (prod T2 T4)))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt.
oof_imco :
   oof S G (imco M O1 N O2 Q) T2
      <- oof S G O1 (cbox T3 (prod T1 (prod T2 T4)))
      <- oof S G O2 (seteq wordsize TN)
      <- sat T1 (rtn (numadd (numlit N) (nummul (numlit Q) TN))) kt
      <- sat T2 (rti M) kt.
oof_imco_array :
   oof S G (imco M O1 N O2 Q) T2
      <- oof S G O1 (cbox T4 (exp (prod T1 (prod T2 T3)) Tbound))
      <- oof S G O2 (setlt wordsize Tbound)
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt
      <- sat (prod T1 (prod T2 T3)) (rti Q) kt.
oof_zco :
   oof S G (mco M O N) T2
      <- oof S G O (sptr (prod T1 (prod T2 T3)))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt
      <- sat T3 rtd kt
      <- ztlookup G ZT
      <- subtype ZT (prod ZT' (prod T1 (prod T2 T3))).
oof_spco : oof S G spco (sptr ZT) <- ztlookup G ZT.
oof_combine :
   oof S G (combine O1 O2) (prod T1 T2) <- oof S G O1 T1 <- oof S G O2 T2.
oof_proj :
   oof S G (proj M O N) T2
      <- oof S G O (prod T1 (prod T2 T3))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt.
oof_subsume : oof S G O T2 <- oof S G O T1 <- subtype T1 T2.
oof_rsubsume : oof S G1 O T' <- oof S G2 O T' <- subrtype G1 G2.
update_rdest :
   update S G (rdest REG) T' G' <- sat T' rtw kt <- rtupdate G REG T' G'.
update_mdest :
   update S G (mdest M O N) T2 G
      <- oof S G O (cmbox T3 (prod T1 (prod T2 T4)))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt.
update_imdest :
   update S G (imdest M O1 N O2 Q) T2 G
      <- oof S G O1 (cmbox T3 (prod T1 (prod T2 T4)))
      <- oof S G O2 (seteq wordsize TN)
      <- sat T1 (rtn (numadd (numlit N) (nummul (numlit Q) TN))) kt
      <- sat T2 (rti M) kt.
update_imdest_array :
   update S G (imdest M O1 N O2 Q) T2 G
      <- oof S G O1 (cmbox T4 (exp (prod T1 (prod T2 T3)) Tbound))
      <- oof S G O2 (setlt wordsize Tbound)
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt
      <- sat (prod T1 (prod T2 T3)) (rti Q) kt.
update_zdest :
   update S G (mdest M (rco REG) N) T2' G''
      <- sat T2' (rti M) kt
      <- oof S G (rco REG) (sptr (prod T1 (prod T2 T3)))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt
      <- sat T3 rtd kt
      <- ztlookup G ZT
      <- subtype ZT (prod ZT' (prod T1 (prod T2 T3)))
      <- ztupdate G (prod ZT' (prod T1 (prod T2' T3))) G'
      <- rtupdate G' REG (sptr (prod T1 (prod T2' T3))) G''.
update_zdest2 :
   update S G (mdest M O N) T2' G'
      <- sat T2' (rti M) kt
      <- oof S G O (sptr (prod T1 (prod T2 T3)))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt
      <- sat T3 rtd kt
      <- ztlookup G ZT
      <- subtype ZT (prod ZT' (prod T1 (prod T2 T3)))
      <- ztupdate G (prod ZT' (prod T1 (prod T2' T3))) G'.
update_spdest :
   update S G spdest T' G'
      <- subtype T' (sptr ZT2)
      <- sat ZT2 rtd kt
      <- ztlookup G ZT
      <- subtype ZT (prod ZT1 ZT2)
      <- ztupdate G ZT2 G'.
update_combdest :
   update S G (combdest N E1 E2) (prod T1 T2) G''
      <- sat T1 (rti N) kt
      <- update S G E1 T1 G'
      <- update S G' E2 T2 G''.
update_projdest :
   update S G (projdest M O E N) T2' G'
      <- oof S G O (prod T1 (prod T2 T3))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt
      <- sat T2' (rti M) kt
      <- update S G E (prod T1 (prod T2' T3)) G'.
update_subsume : update S G E T1 G' <- update S G E T2 G' <- subtype T1 T2.
update_rsubsume : update S G E T' G1 <- update S G E T' G2 <- subrtype G2 G1.
oof_imco' :
   Pi TN:tp. Pi T3:tp. Pi M:nat. Pi T2:tp. Pi T4:tp. Pi Q:nat. Pi N1:nat.
      Pi N2:nat. Pi N:nat. Pi T1:tp. Pi TNmax:tp. Pi TN':tp. Pi S:htp. Pi G:rtp.
      Pi O2:operand. Pi O1:operand. Pi T5:tp. Pi T6:tp.
      tr (good TN) -> kof TN knum -> sat T3 (rti M) kt
         -> sat (prod T2 (prod T3 T4)) (rti Q) kt
         -> kof (prod T2 (prod T3 T4)) kt -> sum N1 N2 N -> sat T2 (rti N2) kt
         -> sat T1 (rti N1) kt -> tr (pnumeq TNmax (numadd TN (succ TN')))
         -> oof S G O2 (seteq wordsize TN)
         -> oof S G O1
               (cbox T5 (prod T1 (prod (exp (prod T2 (prod T3 T4)) TNmax) T6)))
         -> oof S G (imco M O1 N O2 Q) T3
   = \TN:tp. \T3:tp. \M:nat. \T2:tp. \T4:tp. \Q:nat. \N1:nat. \N2:nat. \N:nat.
        \T1:tp. \TNmax:tp. \TN':tp. \S:htp. \G:rtp. \O2:operand. \O1:operand.
        \T5:tp. \T6:tp. \dtr_good:tr (good TN). \dkofn:kof TN knum.
        \dsat3:sat T3 (rti M) kt.
        \dsat234:sat (prod T2 (prod T3 T4)) (rti Q) kt.
        \dkof234:kof (prod T2 (prod T3 T4)) kt. \dsum:sum N1 N2 N.
        \dsat2:sat T2 (rti N2) kt. \dsat1:sat T1 (rti N1) kt.
        \dtr_eq:tr (pnumeq TNmax (numadd TN (succ TN'))).
        \doof2:oof S G O2 (seteq wordsize TN).
        \doof1:oof S G O1
                  (cbox T5
                      (prod T1 (prod (exp (prod T2 (prod T3 T4)) TNmax) T6))).
        oof_imco dsat3
           (entailment
               (entails_tn
                   (tr_numeq_trans
                       (tr_numeq_trans
                           (tr_numadd_compat _ _ _ _
                               (tr_nummul_commute (tr_good_lit _) dtr_good)
                               (tr_numadd_lit dsum))
                           (tr_numadd_assoc
                               (tr_good_nummul _ _ (tr_good_lit _) dtr_good) 
(tr_good_lit _)
                               (tr_good_lit _)))
                       (tr_numadd_compat _ _ _ _
                           (tr_numadd_commute (tr_good_lit _)
                               (tr_good_nummul _ _ (tr_good_lit _) dtr_good))
                           tr_numeq_lit)))
               (sat_prodn (sat_prodn dsat2 (sat_expn (tr_good_lit _) dkofn dsat234))
                   dsat1))
           doof2
           (oof_subsume
               (cbox_sub
                   (trans
                       (trans
                           (trans
                               (trans
                                   (prod_sub
                                       (trans rassoc (prod_sub reflex rassoc))
                                       reflex)
                                   lassoc)
                               (prod_sub rassoc reflex))
                           (prod_sub
                               (prod_sub reflex
                                   (trans lassoc (prod_sub rassoc reflex)))
                               reflex))
                       (prod_sub
                           (prod_sub reflex
                               (trans
                                   (prod_sub
                                       (trans
                                           (prod_sub reflex (explode1 _ dkof234))
                                           (partition
                                               (tr_numadd_good2
                                                   (tr_numeq_good2 _ _ dtr_eq))))
                                       reflex)
                                   (partition dtr_eq)))
                           reflex))
                   reflex)
               doof1).
oof_imdest' :
   Pi TN:tp. Pi T3:tp. Pi M:nat. Pi T2:tp. Pi T4:tp. Pi Q:nat. Pi N1:nat.
      Pi N2:nat. Pi N:nat. Pi T1:tp. Pi TNmax:tp. Pi TN':tp. Pi S:htp. Pi G:rtp.
      Pi O2:operand. Pi O1:operand. Pi T5:tp. Pi T6:tp.
      tr (good TN) -> kof TN knum -> sat T3 (rti M) kt
         -> sat (prod T2 (prod T3 T4)) (rti Q) kt
         -> kof (prod T2 (prod T3 T4)) kt -> sum N1 N2 N -> sat T2 (rti N2) kt
         -> sat T1 (rti N1) kt -> tr (pnumeq TNmax (numadd TN (succ TN')))
         -> oof S G O2 (seteq wordsize TN)
         -> oof S G O1
               (cmbox T5 (prod T1 (prod (exp (prod T2 (prod T3 T4)) TNmax) T6)))
         -> update S G (imdest M O1 N O2 Q) T3 G
   = \TN:tp. \T3:tp. \M:nat. \T2:tp. \T4:tp. \Q:nat. \N1:nat. \N2:nat. \N:nat.
        \T1:tp. \TNmax:tp. \TN':tp. \S:htp. \G:rtp. \O2:operand. \O1:operand.
        \T5:tp. \T6:tp. \dtr_good:tr (good TN). \dkofn:kof TN knum.
        \dsat3:sat T3 (rti M) kt.
        \dsat234:sat (prod T2 (prod T3 T4)) (rti Q) kt.
        \dkof234:kof (prod T2 (prod T3 T4)) kt. \dsum:sum N1 N2 N.
        \dsat2:sat T2 (rti N2) kt. \dsat1:sat T1 (rti N1) kt.
        \dtr_eq:tr (pnumeq TNmax (numadd TN (succ TN'))).
        \doof2:oof S G O2 (seteq wordsize TN).
        \doof1:oof S G O1
                  (cmbox T5
                      (prod T1 (prod (exp (prod T2 (prod T3 T4)) TNmax) T6))).
        update_imdest dsat3
           (entailment
               (entails_tn
                   (tr_numeq_trans
                       (tr_numeq_trans
                           (tr_numadd_compat _ _ _ _
                               (tr_nummul_commute (tr_good_lit _) dtr_good)
                               (tr_numadd_lit dsum))
                           (tr_numadd_assoc
                               (tr_good_nummul _ _ (tr_good_lit _) dtr_good) 
(tr_good_lit _)
                               (tr_good_lit _)))
                       (tr_numadd_compat _ _ _ _
                           (tr_numadd_commute (tr_good_lit _)
                               (tr_good_nummul _ _ (tr_good_lit _) dtr_good))
                           tr_numeq_lit)))
               (sat_prodn (sat_prodn dsat2 (sat_expn (tr_good_lit _) dkofn dsat234))
                   dsat1))
           doof2
           (oof_subsume
               (cmbox_sub
                   (trans
                       (prod_sub
                           (prod_sub reflex
                               (trans (conjoin dtr_eq)
                                   (prod_sub
                                       (trans
                                           (conjoin
                                               (tr_numadd_good2
                                                   (tr_numeq_good2 _ _ dtr_eq)))
                                           (prod_sub reflex (implode1 _ dkof234)))
                                       reflex)))
                           reflex)
                       (trans
                           (prod_sub
                               (prod_sub reflex
                                   (trans (prod_sub lassoc reflex) rassoc))
                               reflex)
                           (trans (prod_sub lassoc reflex)
                               (trans rassoc
                                   (prod_sub
                                       (trans (prod_sub reflex lassoc) lassoc)
                                       reflex)))))
                   (trans
                       (trans
                           (trans
                               (trans
                                   (prod_sub
                                       (trans rassoc (prod_sub reflex rassoc))
                                       reflex)
                                   lassoc)
                               (prod_sub rassoc reflex))
                           (prod_sub
                               (prod_sub reflex
                                   (trans lassoc (prod_sub rassoc reflex)))
                               reflex))
                       (prod_sub
                           (prod_sub reflex
                               (trans
                                   (prod_sub
                                       (trans
                                           (prod_sub reflex (explode1 _ dkof234))
                                           (partition
                                               (tr_numadd_good2
                                                   (tr_numeq_good2 _ _ dtr_eq))))
                                       reflex)
                                   (partition dtr_eq)))
                           reflex))
                   reflex reflex)
               doof1).
ok_add :
   codeok S G (; (i_add N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (inti N)
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_addptr :
   codeok S G (; (i_addptr E O1 O2) I)
      <- oof S G O1 (cbox T1 (prod T2 T3))
      <- oof S G O2 (seteq wordsize TN)
      <- sat T2 (rtn TN) kt
      <- update S G E (cbox (prod T1 T2) T3) G'
      <- codeok S G' I.
ok_addmptr :
   codeok S G (; (i_addptr E O1 O2) I)
      <- oof S G O1 (cmbox T1 (prod T2 T3))
      <- oof S G O2 (seteq wordsize TN)
      <- sat T2 (rtn TN) kt
      <- update S G E (cmbox (prod T1 T2) T3) G'
      <- codeok S G' I.
ok_addsptr :
   codeok S G (; (i_addsptr E O N) I)
      <- oof S G O (sptr (prod ZT1 ZT2))
      <- sat ZT1 (rti N) kt
      <- update S G E (sptr ZT2) G'
      <- codeok S G' I.
ok_and :
   codeok S G (; (i_and N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (inti N)
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_bz :
   codeok S G (; (i_bz O1 O2) I)
      <- oof S G O1 int
      <- oof S G O2 (arrow G)
      <- codeok S G I.
ok_call :
   codeok S G (; (i_call O) I)
      <- codeok S Gret I
      <- rtpok Gret
      <- ztlookup G ZT
      <- ztupdate G (prod (arrow Gret) ZT) G'
      <- oof S G' O (arrow G').
ok_cmp :
   codeok S G (; (i_cmp N O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (inti N)
      <- codeok S G I.
ok_cmpjcc :
   codeok S G (; (i_cmpjcc N Cond O1 O2 O3) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (seteq N BT)
      <- oof S G (rco REG) (join T1 T2)
      <- sat (join T1 T2) rtw kt
      <- rtupdate G REG T1 G1
      <- rtupdate G REG T2 G2
      <- oof S G1 O1 T1'
      <- oof S G2 O1 T2'
      <- cond_tp N Cond BT Tsat Tunsat
      <- subtype (meet T1' Tunsat) (void N2)
      <- subtype (meet T2' Tsat) (void N1)
      <- oof S G O3 (arrow G1)
      <- codeok S G2 I.
ok_cmpjcc2 :
   codeok S G (; (i_cmpjcc N Cond (rco REG) O1 O2) I)
      <- nat_eq N wordsize
      <- oof S G (rco REG) (inti N)
      <- oof S G O1 (seteq N BT)
      <- cond_tp N Cond BT Tsat Tunsat
      <- rtupdate G REG Tsat G1
      <- rtupdate G REG Tunsat G2
      <- oof S G O2 (arrow G1)
      <- codeok S G2 I.
ok_fload : codeok S G (; (i_fload O) I) <- oof S G O T' <- codeok S G I.
ok_fnop : codeok S G (; i_fnop I) <- codeok S G I.
ok_fstore :
   codeok S G (; (i_fstore N E) I)
      <- tp_exp ns N T'
      <- update S G E T' G'
      <- codeok S G' I.
ok_fstflags : codeok S G (; i_fstflags I) <- codeok S G I.
ok_halt : codeok S G (; i_halt I1) <- ztlookup G T' <- subtype T' b0.
ok_jal :
   codeok S G (; (i_jal E O) I)
      <- codeok S Gret I
      <- rtpok Gret
      <- update S G E (arrow Gret) G'
      <- oof S G' O (arrow G').
ok_jbox :
   codeok S G (; (i_jbox (rco REG) O) I)
      <- oof S G (rco REG) (join T1 T2)
      <- subtype T1 setlt_1024
      <- subtype T2 (cbox T3 T4)
      <- rtupdate G REG T1 G1
      <- rtupdate G REG T2 G2
      <- oof S G O (arrow G2)
      <- codeok S G1 I.
ok_jcc : codeok S G (; (i_jcc Cond O) I) <- oof S G O (arrow G) <- codeok S G I.
ok_jmp : codeok S G (; (i_jmp O) I1) <- oof S G O (arrow G).
ok_jnbox :
   codeok S G (; (i_jnbox (rco REG) O) I)
      <- oof S G (rco REG) (join T1 T2)
      <- subtype T1 setlt_1024
      <- subtype T2 (cbox T3 T4)
      <- rtupdate G REG T1 G1
      <- rtupdate G REG T2 G2
      <- oof S G O (arrow G1)
      <- codeok S G2 I.
ok_malloc :
   codeok S G (; (i_malloc Ogot (rdest REG) O) I)
      <- oof S G Ogot gotptr
      <- oof S G O (seteq wordsize (number B))
      <- represents N B
      <- lt z N
      <- tp_exp ns N T'
      <- rtupdate G REG nsw G'
      <- initok S G' REG T' I.
ok_mallocarr :
   codeok S G (; (i_mallocarr Ogot (rdest REG) Q O1 O2) I)
      <- oof S G Ogot gotptr
      <- oof S G O1 (seteq wordsize BT)
      <- oof S G O2 T'
      <- sat T' (rti Q) kt
      <- lt z Q
      <- rtupdate G REG (mbox (exp T' BT)) G'
      <- codeok S G' I.
ok_mov :
   codeok S G (; (i_mov E O) I)
      <- oof S G O T'
      <- update S G E T' G'
      <- codeok S G' I.
ok_movsx :
   codeok S G (; (i_movsx N E O) I)
      <- leq 1' N
      <- oof S G O (inti 1')
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_movzx :
   codeok S G (; (i_movzx N E O) I)
      <- leq 1' N
      <- oof S G O (inti 1')
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_or :
   codeok S G (; (i_or N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (inti N)
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_nop : codeok S G (; i_nop I) <- codeok S G I.
ok_pop :
   codeok S G (; (i_pop N E) I)
      <- ztlookup G ZT
      <- subtype ZT (prod T' ZT')
      <- sat T' (rti N) kt
      <- ztupdate G ZT' G'
      <- update S G' E T' G''
      <- codeok S G'' I.
ok_push :
   codeok S G (; (i_push O) I)
      <- oof S G O T'
      <- sat T' rtd kt
      <- ztlookup G ZT
      <- ztupdate G (prod T' ZT) G'
      <- codeok S G' I.
ok_pushrel :
   codeok S G (; (i_pushrel O) I)
      <- oof S G O T'
      <- sat T' rtd kt
      <- ztlookup G ZT
      <- ztupdate G (prod T' ZT) G'
      <- codeok S G' I.
ok_ret :
   codeok S G (; i_ret I1)
      <- ztlookup G ZT
      <- ztupdate G ZT' G'
      <- subtype ZT (prod (arrow G') ZT')
      <- sat ZT' rtd kt.
ok_rcl :
   codeok S G (; (i_rcl N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (setlt 1' (numlit 32'))
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_rcr :
   codeok S G (; (i_rcr N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (setlt 1' (numlit 32'))
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_rol :
   codeok S G (; (i_rol N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (setlt 1' (numlit 32'))
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_ror :
   codeok S G (; (i_ror N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (setlt 1' (numlit 32'))
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_salloc :
   codeok S G (; (i_salloc N) I)
      <- ztlookup G ZT
      <- tp_exp ns N T'
      <- ztupdate G (prod T' ZT) G'
      <- codeok S G' I.
ok_sfree :
   codeok S G (; (i_sfree N) I)
      <- ztlookup G ZT
      <- subtype ZT (prod ZT1 ZT2)
      <- sat ZT1 (rti N) kt
      <- ztupdate G ZT2 G'
      <- codeok S G' I.
ok_shr :
   codeok S G (; (i_shr N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (setlt 1' (numlit 32'))
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_sar :
   codeok S G (; (i_sar N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (setlt 1' (numlit 32'))
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_shl :
   codeok S G (; (i_shl N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (setlt 1' (numlit 32'))
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_sub :
   codeok S G (; (i_sub N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (inti N)
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_subptr :
   codeok S G (; (i_subptr E O1 O2) I)
      <- oof S G O1 (cbox (prod T1 T2) T3)
      <- oof S G O2 (seteq wordsize TN)
      <- sat T2 (rtn TN) kt
      <- update S G E (cbox T1 (prod T2 T3)) G'
      <- codeok S G' I.
ok_submptr :
   codeok S G (; (i_subptr E O1 O2) I)
      <- oof S G O1 (cmbox (prod T1 T2) T3)
      <- oof S G O2 (seteq wordsize TN)
      <- sat T2 (rtn TN) kt
      <- update S G E (cmbox T1 (prod T2 T3)) G'
      <- codeok S G' I.
ok_xor :
   codeok S G (; (i_xor N E O1 O2) I)
      <- leq 1' N
      <- oof S G O1 (inti N)
      <- oof S G O2 (inti N)
      <- update S G E (inti N) G'
      <- codeok S G' I.
ok_init_mov :
   initok S G REG T' (; (i_mov (mdest M (rco REG) N) O) I)
      <- subtype T' (prod T1 (prod T2 T3))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt
      <- oof S G O T2'
      <- sat T2' (rti M) kt
      <- initok S G REG (prod T1 (prod T2' T3)) I.
ok_init_pop :
   initok S G REG T' (; (i_pop M (mdest M (rco REG) N)) I)
      <- subtype T' (prod T1 (prod T2 T3))
      <- sat T1 (rti N) kt
      <- sat T2 (rti M) kt
      <- ztlookup G ZT
      <- subtype ZT (prod T2' ZT')
      <- sat T2' (rti M) kt
      <- ztupdate G ZT' G'
      <- initok S G' REG (prod T1 (prod T2' T3)) I.
ok_init_coerce : initok S G REG T1 I <- subtype T1 T2 <- initok S G REG T2 I.
ok_init_done :
   initok S G REG T' I <- rtupdate G REG (mbox T') G' <- codeok S G' I.
ok_coerce : codeok S G2 I <- codeok S G1 I <- subrtype G2 G1.
ok_unpack :
   codeok S G I
      <- rtlookup G REG (exists K R (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> sat t R K -> rtupdate G REG (T' t) (G' t))
      <- (Pi t:tp. kof t K -> sat t R K -> codeok S (G' t) I).
ok_assert : codeok S G I <- oof S G O (assert P T') <- (tr P -> codeok S G I).
ok_vcase1 :
   codeok S G I
      <- oof S G O (case T' K1 K2 kt (\t:tp. T1 t) (\t:tp. void N))
      <- (Pi t:tp. kof t K1 -> equiv T' (in1 t K2) -> codeok S G I).
ok_vcase2 :
   codeok S G I
      <- oof S G O (case T' K1 K2 kt (\t:tp. void N) (\t:tp. T1 t))
      <- (Pi t:tp. kof t K2 -> equiv T' (in2 t K1) -> codeok S G I).
ok_vacuous : codeok S G (; IN I) <- oof S G O (void N1).
ok_letpair :
   codeok S G I
      <- kof T' (kprod K1 K2)
      <- (Pi t1:tp.
             kof t1 K1
                -> Pi t2:tp. kof t2 K2 -> equiv T' (pair t1 t2) -> codeok S G I).
ok_letroll :
   codeok S G I
      <- kof T' (krec (\k:kind. K k))
      <- (Pi t:tp.
             kof t (K (krec (\k:kind. K k)))
                -> equiv T' (roll (\k:kind. K k) t)
                -> codeok S G I).
sic : loc -> htp -> htp -> type.
sic_hseg : sic L S S <- segof L hseg.
sic_cseg : sic L S S' <- segof L cseg <- strip S S'.
hof_nil : hof S1 hnil htpnil.
hof_cons :
   hof S1 (hcons L V H) (htpcons L T' S2)
      <- sic L S1 S1'
      <- of S1' V T'
      <- hof S1 H S2.
rof* : htp -> rfile* N -> rtp* N -> type.
rof_nil : rof* S1 rfnil rtnil.
rof_cons :
   rof* S (rfcons V R) (rtcons T' G)
      <- size V wordsize
      <- of S V T'
      <- rof* S R G.
rof_ : rof S (rf Z CC1 R) (rt ZT G) <- of S Z ZT <- rof* S R G.
machineok_std :
   machineok (mach H L R PC)
      <- hof S H S
      <- rof S R G
      <- clookup H PC I
      <- codeok S G I
      <- htpok S L.
machineok_init :
   machineok (mach (hcons L V H) Lalloc R PC)
      <- hof S (hcons L V H) (htpcons L T' S)
      <- segof L hseg
      <- rof S R G
      <- rlookup R REG Vptr
      <- atomval Vptr (pointer L 0') 0'
      <- clookup (hcons L V H) PC I
      <- initok S G REG T' I
      <- htpok (htpcons L T' S) Lalloc.
val_exp : val -> nat -> val -> type.
val_exp_z : val_exp V 0' null.
val_exp_s : val_exp V (s N) V'' <- val_exp V N V' <- append V V' V''.
rupdate : rfile -> reg -> val -> rfile -> type.
rupdate* : rfile* N -> nat -> val -> rfile* N -> type.
rupdate_z : rupdate* (rfcons V1 R) z V (rfcons V R).
rupdate_s : rupdate* (rfcons V R) (s N) V' (rfcons V R') <- rupdate* R N V' R'.
rupdate_ : rupdate (rf Z CC R) (rg N) V (rf Z CC R') <- rupdate* R N V R'.
zupdate : rfile -> val -> rfile -> type.
zupdate_ : zupdate (rf V1 CC R) Z (rf Z CC R).
hupdate : heap -> loc -> val -> heap -> type.
hupdate_hit : hupdate (hcons L V1 H) L V' (hcons L V' H) <- segof L hseg.
hupdate_miss :
   hupdate (hcons L' V H) L V' (hcons L' V H')
      <- loc_lt L L'
      <- hupdate H L V' H'.
newloc : heap -> loc -> type.
newloc_nil : newloc hnil L <- segof L hseg.
newloc_cons : newloc (hcons L V1 H1) L' <- loc_lt L L' <- segof L' hseg.
nextloc : heap -> loc -> loc -> type.
nextloc_ : nextloc H (lc N) (lc (s N)) <- newloc H (lc N).
hextend : heap -> loc -> val -> heap -> type.
hextend_ : hextend H L V (hcons L V H).
resolve : heap -> rfile -> pc -> operand -> val -> type.
resolve_im : resolve H1 R PC1 (im V) V.
resolve_rco : resolve H1 R PC1 (rco REG) V <- rlookup R REG V.
resolve_mco :
   resolve H R PC (mco M O N) V2
      <- resolve H R PC O V
      <- atomval V (pointer L P) 0'
      <- hlookup H L V123
      <- sum P N PN
      <- separate PN V123 V3 V23
      <- separate M V23 V2 V1.
resolve_imco :
   resolve H R PC (imco M O1 N O2 Q) V2
      <- resolve H R PC O1 Vaddr
      <- atomval Vaddr (pointer L P) 0'
      <- hlookup H L V
      <- sum N P N'
      <- resolve H R PC O2 Vindex
      <- binary_int theend Vindex Bindex
      <- represents Nindex Bindex
      <- product Q Nindex Nindex'
      <- sum N' Nindex' N''
      <- separate N'' V V4 V1
      <- separate M V1 V2 V3.
resolve_zco :
   resolve H R PC (mco M O N) V2
      <- resolve H R PC O V
      <- atomval V (spointer N2) 0'
      <- zlookup R Z
      <- size Z N3
      <- sum N1 N2 N3
      <- separate N1 Z V4 V123
      <- separate N V123 V3 V23
      <- separate M V23 V2 V1.
resolve_spco :
   resolve H R PC1 spco V <- zlookup R Z <- size Z N <- atomval V (spointer N) 
0'.
resolve_pcrel+ :
   resolve H R (pc_ L N) (pcrel+ M) V
      <- sum M N N'
      <- atomval V (pointer L N') 0'.
resolve_pcrel- :
   resolve H R (pc_ L N) (pcrel- M) V
      <- sum M N' N
      <- atomval V (pointer L N') 0'.
resolve_combine :
   resolve H R PC (combine O1 O2) V
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- append V1 V2 V.
resolve_proj :
   resolve H R PC (proj M O N) V2
      <- resolve H R PC O V123
      <- separate N V123 V3 V23
      <- separate M V23 V2 V1.
propagate : heap -> rfile -> pc -> dest -> val -> heap -> rfile -> type.
propagate_rdest :
   propagate H R PC1 (rdest REG) V H R' <- size V wordsize <- rupdate R REG V R'.
propagate_mdest :
   propagate H R PC (mdest M O N) V H' R
      <- resolve H R PC O Vptr
      <- atomval Vptr (pointer L P) 0'
      <- hlookup H L V123
      <- sum P N PN
      <- separate PN V123 V1 V23
      <- separate M V23 V2 V3
      <- size V M
      <- append V V3 V23'
      <- append V1 V23' V123'
      <- hupdate H L V123' H'.
propagate_imdest :
   propagate H R PC (imdest M O1 N O2 Q) V H' R
      <- resolve H R PC O1 Vaddr
      <- atomval Vaddr (pointer L P) 0'
      <- hlookup H L V123
      <- resolve H R PC O2 Vindex
      <- binary_int theend Vindex Bindex
      <- represents Nindex Bindex
      <- product Q Nindex Nindex'
      <- sum N P N'
      <- sum N' Nindex' N''
      <- separate N'' V123 V1 V23
      <- separate M V23 V2 V3
      <- size V M
      <- append V V3 V23'
      <- append V1 V23' V123'
      <- hupdate H L V123' H'.
propagate_zdest :
   propagate H R PC (mdest M O N) V H R'
      <- resolve H R PC O Vptr
      <- atomval Vptr (spointer N2) 0'
      <- zlookup R Z
      <- size Z N3
      <- sum N1 N2 N3
      <- separate N1 Z Z1 V123
      <- separate N V123 V1 V23
      <- separate M V23 V2 V3
      <- size V M
      <- append V V3 V23'
      <- append V1 V23' V123'
      <- append Z1 V123' Z'
      <- zupdate R Z' R'.
propagate_spdest :
   propagate H R PC1 spdest V H R'
      <- atomval V (spointer N2) 0'
      <- zlookup R Z
      <- size Z N3
      <- sum N1 N2 N3
      <- separate N1 Z V1 Z'
      <- zupdate R Z' R'.
propagate_combdest :
   propagate H R PC (combdest N E1 E2) V H'' R''
      <- separate N V V1 V2
      <- propagate H R PC E1 V1 H' R'
      <- propagate H' R' PC E2 V2 H'' R''.
propagate_projdest :
   propagate H R PC (projdest M O E N) V H' R'
      <- resolve H R PC O V123
      <- separate N V123 V1 V23
      <- separate M V23 V2 V3
      <- append V V3 V23'
      <- append V1 V23' V123'
      <- propagate H R PC E V123' H' R'.
cclookup : rfile -> conds -> type.
cclookup_ : cclookup (rf V1 CC R1) CC.
cclookup_carry : rfile -> bit -> type.
cclookup_carry_ : cclookup_carry R F <- cclookup R (conds_ F B1 B2 B3).
cclookup_zero : rfile -> bit -> type.
cclookup_zero_ : cclookup_zero R F <- cclookup R (conds_ B1 F B2 B3).
cclookup_sign : rfile -> bit -> type.
cclookup_sign_ : cclookup_sign R F <- cclookup R (conds_ B1 B2 F B3).
cclookup_overflow : rfile -> bit -> type.
cclookup_overflow_ : cclookup_overflow R F <- cclookup R (conds_ B1 B2 B3 F).
ccupdate : rfile -> conds -> rfile -> type.
ccupdate_ : ccupdate (rf Z CC1 R) CC (rf Z CC R).
bit_to_flag : bit -> flag -> type.
bit_to_flag_zero : bit_to_flag zero fclear.
bit_to_flag_one : bit_to_flag one' fset.
determine_zero : binary N1 -> bit -> type.
determine_zero_yes : determine_zero B one' <- is_zero B.
determine_zero_no : determine_zero B zero <- is_nonzero B.
determine_sign : binary (s N1) -> bit -> type.
determine_sign_1 : determine_sign ($ BIT nil$) BIT.
determine_sign_n : determine_sign ($ B1 B) BIT <- determine_sign B BIT.
determine_conds : binary (s N1) -> bit -> bit -> conds -> type.
determine_conds_ :
   determine_conds B Fcarry Foverflow (conds_ Fcarry Fzero Fsign Foverflow)
      <- determine_zero B Fzero
      <- determine_sign B Fsign.
cond_sat : cond -> rfile -> type.
cond_sat_eq : cond_sat cond_eq R <- cclookup_zero R one'.
cond_sat_neq : cond_sat cond_neq R <- cclookup_zero R zero.
cond_sat_lt : cond_sat cond_lt R <- cclookup_carry R one'.
cond_sat_lte_lt : cond_sat cond_lte R <- cclookup_carry R one'.
cond_sat_lte_e : cond_sat cond_lte R <- cclookup_zero R one'.
cond_sat_gt :
   cond_sat cond_gt R <- cclookup_carry R zero <- cclookup_zero R zero.
cond_sat_gte : cond_sat cond_gte R <- cclookup_carry R zero.
cond_sat_slt_nov :
   cond_sat cond_slt R <- cclookup_sign R one' <- cclookup_overflow R zero.
cond_sat_slt_ov :
   cond_sat cond_slt R <- cclookup_sign R zero <- cclookup_overflow R one'.
cond_sat_slte_nov :
   cond_sat cond_slte R <- cclookup_sign R one' <- cclookup_overflow R zero.
cond_sat_slte_ov :
   cond_sat cond_slte R <- cclookup_sign R zero <- cclookup_overflow R one'.
cond_sat_slte_e : cond_sat cond_slte R <- cclookup_zero R one'.
cond_sat_sgt_nov :
   cond_sat cond_sgt R
      <- cclookup_zero R zero
      <- cclookup_sign R zero
      <- cclookup_overflow R zero.
cond_sat_sgt_ov :
   cond_sat cond_sgt R
      <- cclookup_zero R zero
      <- cclookup_sign R one'
      <- cclookup_overflow R one'.
cond_sat_sgte_nov :
   cond_sat cond_sgte R <- cclookup_sign R zero <- cclookup_overflow R zero.
cond_sat_sgte_ov :
   cond_sat cond_sgte R <- cclookup_sign R one' <- cclookup_overflow R one'.
cond_sat_sign : cond_sat cond_sign R <- cclookup_sign R one'.
cond_sat_nsign : cond_sat cond_nsign R <- cclookup_sign R zero.
cond_sat_ov : cond_sat cond_ov R <- cclookup_overflow R one'.
cond_sat_nov : cond_sat cond_nov R <- cclookup_overflow R zero.
cond_negate : cond -> cond -> type.
cond_negate_eq : cond_negate cond_eq cond_neq.
cond_negate_neq : cond_negate cond_neq cond_eq.
cond_negate_lt : cond_negate cond_lt cond_gte.
cond_negate_lte : cond_negate cond_lte cond_gt.
cond_negate_gt : cond_negate cond_gt cond_lte.
cond_negate_gte : cond_negate cond_gte cond_lt.
cond_negate_slt : cond_negate cond_slt cond_sgte.
cond_negate_slte : cond_negate cond_slte cond_sgt.
cond_negate_sgt : cond_negate cond_sgt cond_slte.
cond_negate_sgte : cond_negate cond_sgte cond_slt.
cond_negate_sign : cond_negate cond_sign cond_nsign.
cond_negate_nsign : cond_negate cond_nsign cond_sign.
cond_negate_ov : cond_negate cond_ov cond_nov.
cond_negate_nov : cond_negate cond_nov cond_ov.
cond_unsat : cond -> rfile -> type.
cond_unsat_ : cond_unsat Cond R <- cond_negate Cond Cond' <- cond_sat Cond' R.
goodheap : heap -> type.
goodheap* : heap -> loc -> type.
goodheap_nil : goodheap* hnil L1.
goodheap_cons : goodheap* (hcons L V1 H) L' <- loc_lt L L' <- goodheap* H L.
goodheap_ : goodheap H <- goodheap* H L1.
% loc_neq : loc -> loc -> type.
% loc_neq_ : loc_neq (lc M) (lc N) <- neq M N.
locset : type.
locnil : locset.
loccons : locset <- locset <- nat <- loc.
member : loc -> nat -> locset -> type.
member_hit : member L N (loccons L N LS1).
member_cons : member L N (loccons L1 N1 LS) <- member L N LS.
notmember : loc -> locset -> type.
notmember_nil : notmember L1 locnil.
notmember_cons :
   notmember L (loccons L' N1 LS) <- loc_neq L L' <- notmember L LS.
locset_wf : locset -> heap -> type.
locset_wf_nil : locset_wf locnil H1.
locset_wf_cons :
   locset_wf (loccons L N LS) H
      <- segof L hseg
      <- hlookup H L V
      <- size V N
      <- locset_wf LS H.
not_pointer : loc -> nat -> val -> nat -> type.
not_pointer_null : not_pointer L1 N1 null N2.
not_pointer_pos : not_pointer L1 N1 (;' (@' A1 M) V1) M' <- neq M M'.
not_pointer_lit : not_pointer L1 N1 (;' (@' (lit B1) N2) V1) N3.
not_pointer_instruct : not_pointer L1 N1 (;' (@' (instruct IN1 N2 S1) N3) V1) N4.
not_pointer_spointer : not_pointer L1 N1 (;' (@' (spointer N2) N3) V1) N4.
not_pointer_gotpointer : not_pointer L1 N1 (;' (@' gotpointer N2) V1) N3.
not_pointer_junk : not_pointer L1 N1 (;' (@' junk N2) V1) N3.
not_pointer_offset :
   not_pointer L1 N (;' (@' (pointer L2 N') N1) V1) N2 <- neq N N'.
not_pointer_nomatch :
   not_pointer L N1 (;' (@' (pointer L' N2) N3) V1) N4 <- loc_neq L L'.
not_pointer_cons :
   not_pointer L N (;' U1 V) M <- not_pointer L N V (s M) <- lt (s M) wordsize.
not_bpointer : loc -> nat -> val -> type.
not_bpointer_null : not_bpointer L1 N1 null.
not_bpointer_pos : not_bpointer L1 N1 (;' (@' A1 (s N2)) V1).
not_bpointer_lit : not_bpointer L1 N1 (;' (@' (lit B1) N2) V1).
not_bpointer_instruct : not_bpointer L1 N1 (;' (@' (instruct IN1 N2 S1) N3) V1).
not_bpointer_spointer : not_bpointer L1 N1 (;' (@' (spointer N2) N3) V1).
not_bpointer_gotpointer : not_bpointer L1 N1 (;' (@' gotpointer N2) V1).
not_bpointer_junk : not_bpointer L1 N1 (;' (@' junk N2) V1).
not_bpointer_oob :
   not_bpointer L1 Nsize (;' (@' (pointer L2 N) N1) V1) <- lt Nsize N.
not_bpointer_nomatch :
   not_bpointer L N1 (;' (@' (pointer L' N2) N3) V1) <- loc_neq L L'.
not_bpointer_pointer :
   not_bpointer L N1 (;' (@' (pointer L1 N) N2) V) <- not_pointer L N V 1'.
unreachable : loc -> nat -> val -> type.
unreachable_null : unreachable L1 N1 null.
unreachable_cons :
   unreachable L N (;' U V) <- not_bpointer L N (;' U V) <- unreachable L N V.
val_unreachable : locset -> val -> type.
val_unreachable_nil : val_unreachable locnil V1.
val_unreachable_cons :
   val_unreachable (loccons L Nsize LS) V
      <- unreachable L Nsize V
      <- val_unreachable LS V.
heap_unreachable : locset -> heap -> type.
heap_unreachable_nil : heap_unreachable LS hnil.
heap_unreachable_cons :
   heap_unreachable LS (hcons L V H)
      <- val_unreachable LS V
      <- heap_unreachable LS H.
heap_unreachable_omit :
   heap_unreachable LS (hcons L V H) <- member L N1 LS <- heap_unreachable LS H.
heap_unreachable_cseg :
   heap_unreachable LS (hcons L V H) <- segof L cseg <- heap_unreachable LS H.
heap_unreachable_bseg :
   heap_unreachable LS (hcons L V H) <- segof L bseg <- heap_unreachable LS H.
rfile_unreachable : locset -> rfile -> type.
rfile_unreachable* : locset -> rfile* N1 -> type.
rfile_unreachable_nil : rfile_unreachable* LS1 rfnil.
rfile_unreachable_cons :
   rfile_unreachable* LS (rfcons V R)
      <- val_unreachable LS V
      <- rfile_unreachable* LS R.
rfile_unreachable_ :
   rfile_unreachable LS (rf Z CC1 R)
      <- val_unreachable LS Z
      <- rfile_unreachable* LS R.
heap_collect : locset -> heap -> heap -> type.
heap_collect_nil : heap_collect LS1 hnil hnil.
heap_collect_keep :
   heap_collect LS (hcons L V H) (hcons L V H')
      <- notmember L LS
      <- heap_collect LS H H'.
heap_collect_drop :
   heap_collect LS (hcons L V H) H' <- member L N1 LS <- heap_collect LS H H'.
collect : machine -> machine -> type.
collect_ :
   collect (mach H L R PC) (mach H' L R PC)
      <- locset_wf LS H
      <- heap_unreachable LS H
      <- rfile_unreachable LS R
      <- heap_collect LS H H'.
htp_collect : locset -> htp -> htp -> type.
htp_collect_nil : htp_collect LS1 htpnil htpnil.
htp_collect_keep :
   htp_collect LS (htpcons L V H) (htpcons L V H')
      <- notmember L LS
      <- htp_collect LS H H'.
htp_collect_drop :
   htp_collect LS (htpcons L V H) H' <- member L N1 LS <- htp_collect LS H H'.
decode : heap -> pc -> inst -> type.
decode_ :
   decode H (pc_ L N) IN
      <- hlookup H L V
      <- separate N V V3 V'
      <- append V1 V2 V'
      <- atomval V1 (instruct IN N1 S1) 0'.
advance : heap -> pc -> pc -> type.
advance_ :
   advance H (pc_ L N) (pc_ L N')
      <- hlookup H L V
      <- separate N V V3 V'
      <- append V1 V2 V'
      <- atomval V1 (instruct IN1 M S1) 0'
      <- sum M N N'.
jump : heap -> rfile -> pc -> operand -> pc -> type.
jump_ :
   jump H R PC O (pc_ L N) <- resolve H R PC O V <- atomval V (pointer L N) z.
stepsto : machine -> machine -> type.
perform : machine -> inst -> machine -> type.
stepsto_ :
   stepsto (mach H L R PC) (mach H' L' R' PC')
      <- decode H PC IN
      <- perform (mach H L R PC) IN (mach H' L' R' PC').
step_add :
   perform (mach H L R PC) (i_add N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B1
      <- binary_int theend V2 B2
      <- add_wo B1 B2 B3 CARRY OVERFLOW
      <- determine_conds B3 CARRY OVERFLOW CC
      <- binary_int theend V3 B3
      <- propagate H R PC E V3 H' R'
      <- ccupdate R' CC R''
      <- advance H PC PC'.
step_addptr :
   perform (mach H L R PC) (i_addptr E O1 O2) (mach H' L R'' PC')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- atomval V1 (pointer L' P) 0'
      <- binary_int theend V2 B
      <- represents N B
      <- sum N P P'
      <- atomval V3 (pointer L' P') 0'
      <- propagate H R PC E V3 H' R'
      <- ccupdate R' (conds_ B1 B2 B3 B4) R''
      <- advance H PC PC'.
step_addsptr :
   perform (mach H L R PC) (i_addsptr E O N) (mach H' L R'' PC')
      <- resolve H R PC O V
      <- atomval V (spointer N2) 0'
      <- sum N N1 N2
      <- atomval V' (spointer N1) 0'
      <- propagate H R PC E V' H' R'
      <- ccupdate R' (conds_ B1 B2 B3 B4) R''
      <- advance H PC PC'.
step_and :
   perform (mach H L R PC) (i_and N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B1
      <- binary_int theend V2 B2
      <- and B1 B2 B3
      <- determine_conds B3 zero zero CC
      <- binary_int theend V3 B3
      <- propagate H R PC E V3 H' R'
      <- ccupdate R' CC R''
      <- advance H PC PC'.
step_bz_take :
   perform (mach H L R PC) (i_bz O1 O2) (mach H L R PC')
      <- resolve H R PC O1 Vtest
      <- binary_int theend Vtest B
      <- is_zero B
      <- jump H R PC O2 PC'.
step_bz_skip :
   perform (mach H L R PC) (i_bz O1 O2) (mach H L R PC')
      <- resolve H R PC O1 Vtest
      <- binary_int theend Vtest B
      <- is_nonzero B
      <- advance H PC PC'.
step_call :
   perform (mach H Lalloc R PC) (i_call O) (mach H Lalloc R' PC')
      <- advance H PC (pc_ L N)
      <- zlookup R Z
      <- atomval V (pointer L N) 0'
      <- append V Z Z'
      <- zupdate R Z' R'
      <- jump H R' PC O PC'.
step_cmp :
   perform (mach H L R PC) (i_cmp N O1 O2) (mach H L R' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B1
      <- binary_int theend V2 B2
      <- add_wo B2 B3 B1 CARRY OVERFLOW
      <- determine_conds B3 CARRY OVERFLOW CC
      <- ccupdate R CC R'
      <- advance H PC PC'.
step_cmpjcc_take :
   perform (mach H L R PC) (i_cmpjcc N Cond O1 O2 O3) (mach H L R' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B1
      <- binary_int theend V2 B2
      <- add_wo B2 B3 B1 CARRY OVERFLOW
      <- determine_conds B3 CARRY OVERFLOW CC
      <- ccupdate R CC R'
      <- cond_sat Cond R'
      <- jump H R' PC O3 PC'.
step_cmpjcc_skip :
   perform (mach H L R PC) (i_cmpjcc N Cond O1 O2 O3) (mach H L R' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B1
      <- binary_int theend V2 B2
      <- add_wo B2 B3 B1 CARRY OVERFLOW
      <- determine_conds B3 CARRY OVERFLOW CC
      <- ccupdate R CC R'
      <- cond_unsat Cond R'
      <- advance H PC PC'.
step_fload :
   perform (mach H L R PC) (i_fload O) (mach H L R PC')
      <- resolve H R PC O V
      <- advance H PC PC'.
step_fnop : perform (mach H L R PC) i_fnop (mach H L R PC') <- advance H PC PC'.
step_fstore :
   perform (mach H L R PC) (i_fstore N E) (mach H' L R' PC')
      <- val_exp (;' (@' junk 0') null) N V'
      <- propagate H R PC E V' H' R'
      <- advance H PC PC'.
step_fstflags :
   perform (mach H L R PC) i_fstflags (mach H L R' PC')
      <- ccupdate R (conds_ B1 B2 B3 B4) R'
      <- advance H PC PC'.
step_halt : perform (mach H L R PC) i_halt (mach H L R PC) <- zlookup R null.
step_jal :
   perform (mach H Lalloc R PC) (i_jal E O) (mach H' Lalloc R' PC')
      <- advance H PC (pc_ L N)
      <- atomval V (pointer L N) 0'
      <- propagate H R PC E V H' R'
      <- jump H' R' PC O PC'.
step_jbox_take :
   perform (mach H L R PC) (i_jbox O1 O2) (mach H L R PC')
      <- resolve H R PC O1 V
      <- atomval V (pointer L1 N1) 0'
      <- jump H R PC O2 PC'.
step_jbox_skip :
   perform (mach H L R PC) (i_jbox O1 O2) (mach H L R PC')
      <- resolve H R PC O1 V
      <- binary_int theend V B
      <- add B Bdiff 1024_32 zero
      <- is_nonzero Bdiff
      <- advance H PC PC'.
step_jcc_take :
   perform (mach H L R PC) (i_jcc Cond O) (mach H L R PC')
      <- cond_sat Cond R
      <- jump H R PC O PC'.
step_jcc_skip :
   perform (mach H L R PC) (i_jcc Cond O) (mach H L R PC')
      <- cond_unsat Cond R
      <- advance H PC PC'.
step_jmp :
   perform (mach H L R PC) (i_jmp O) (mach H L R PC') <- jump H R PC O PC'.
step_jnbox_take :
   perform (mach H L R PC) (i_jnbox O1 O2) (mach H L R PC')
      <- resolve H R PC O1 V
      <- binary_int theend V B
      <- add B Bdiff 1024_32 zero
      <- is_nonzero Bdiff
      <- jump H R PC O2 PC'.
step_jnbox_skip :
   perform (mach H L R PC) (i_jnbox O1 O2) (mach H L R PC')
      <- resolve H R PC O1 V
      <- atomval V (pointer L1 N1) 0'
      <- advance H PC PC'.
step_malloc :
   perform (mach H L R PC) (i_malloc Ogot E O) (mach H'' L' R' PC')
      <- resolve H R PC Ogot Vgot
      <- atomval Vgot gotpointer 0'
      <- goodheap H
      <- collect (mach H L R PC) (mach H1 L R PC)
      <- resolve H1 R PC O Vn
      <- binary_int theend Vn Bn
      <- represents N Bn
      <- lt z N
      <- nextloc H L L'
      <- val_exp (;' (@' junk 0') null) N V
      <- hextend H1 L V H'
      <- atomval V' (pointer L 0') 0'
      <- propagate H' R PC E V' H'' R'
      <- advance H PC PC'.
step_mallocarr :
   perform (mach H L R PC) (i_mallocarr Ogot E Q O1 O2) (mach H'' L' R' PC')
      <- resolve H R PC Ogot Vgot
      <- atomval Vgot gotpointer 0'
      <- goodheap H
      <- collect (mach H L R PC) (mach H1 L R PC)
      <- resolve H1 R PC O1 Vlength
      <- binary_int theend Vlength Blength
      <- represents Nlength Blength
      <- product Q Nlength N
      <- lt z N
      <- resolve H1 R PC O2 Velem
      <- size Velem Q
      <- val_exp Velem Nlength Varray
      <- nextloc H L L'
      <- hextend H1 L Varray H'
      <- atomval V' (pointer L 0') 0'
      <- propagate H' R PC E V' H'' R'
      <- advance H PC PC'.
step_mov :
   perform (mach H L R PC) (i_mov E O) (mach H' L R' PC')
      <- resolve H R PC O V
      <- propagate H R PC E V H' R'
      <- advance H PC PC'.
step_nop : perform (mach H L R PC) i_nop (mach H L R PC') <- advance H PC PC'.
step_or :
   perform (mach H L R PC) (i_or N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B1
      <- binary_int theend V2 B2
      <- or B1 B2 B3
      <- determine_conds B3 zero zero CC
      <- binary_int theend V3 B3
      <- propagate H R PC E V3 H' R'
      <- ccupdate R' CC R''
      <- advance H PC PC'.
step_pop :
   perform (mach H L R PC) (i_pop N E) (mach H' L R'' PC')
      <- zlookup R Z
      <- separate N Z V Z'
      <- zupdate R Z' R'
      <- propagate H R' PC E V H' R''
      <- advance H PC PC'.
step_push :
   perform (mach H L R PC) (i_push O) (mach H L R' PC')
      <- resolve H R PC O V
      <- zlookup R Z
      <- append V Z Z'
      <- zupdate R Z' R'
      <- advance H PC PC'.
step_pushrel :
   perform (mach H L R PC) (i_pushrel O) (mach H L R'' PC')
      <- resolve H R PC O V
      <- zlookup R Z
      <- append V Z Z'
      <- zupdate R Z' R'
      <- ccupdate R' (conds_ B1 B2 B3 B4) R''
      <- advance H PC PC'.
step_ret :
   perform (mach H Lalloc R PC) i_ret (mach H Lalloc R' (pc_ L N))
      <- zlookup R Z
      <- separate wordsize Z V Z'
      <- zupdate R Z' R'
      <- atomval V (pointer L N) 0'.
step_rcl :
   perform (mach H L R PC) (i_rcl N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B3
      <- binary_int theend V2 B5
      <- represents Nrot B5
      <- lt Nrot 32'
      <- cclookup R (conds_ Fc Fz Fs Fo)
      <- rotate_left Nrot ($ Fc B3) ($ B4 Bnew)
      <- binary_int theend Vnew Bnew
      <- propagate H R PC E Vnew H' R'
      <- ccupdate R' (conds_ B1 Fz Fs B2) R''
      <- advance H PC PC'.
step_rcr :
   perform (mach H L R PC) (i_rcr N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B3
      <- binary_int theend V2 B5
      <- represents Nrot B5
      <- lt Nrot 32'
      <- cclookup R (conds_ Fc Fz Fs Fo)
      <- rotate_right Nrot ($ Fc B3) ($ B4 Bnew)
      <- binary_int theend Vnew Bnew
      <- propagate H R PC E Vnew H' R'
      <- ccupdate R' (conds_ B1 Fz Fs B2) R''
      <- advance H PC PC'.
step_rol :
   perform (mach H L R PC) (i_rol N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B3
      <- binary_int theend V2 B4
      <- represents Nrot B4
      <- lt Nrot 32'
      <- cclookup R (conds_ Fc Fz Fs Fo)
      <- rotate_left Nrot B3 B1'
      <- binary_int theend V1' B1'
      <- propagate H R PC E V1' H' R'
      <- ccupdate R' (conds_ B1 Fz Fs B2) R''
      <- advance H PC PC'.
step_ror :
   perform (mach H L R PC) (i_ror N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B3
      <- binary_int theend V2 B4
      <- represents Nrot B4
      <- lt Nrot 32'
      <- cclookup R (conds_ Fc Fz Fs Fo)
      <- rotate_right Nrot B3 B1'
      <- binary_int theend V1' B1'
      <- propagate H R PC E V1' H' R'
      <- ccupdate R' (conds_ B1 Fz Fs B2) R''
      <- advance H PC PC'.
step_salloc :
   perform (mach H L R PC) (i_salloc N) (mach H L R' PC')
      <- zlookup R Z
      <- val_exp (;' (@' junk 0') null) N V
      <- append V Z Z'
      <- zupdate R Z' R''
      <- ccupdate R'' (conds_ B1 B2 B3 B4) R'
      <- advance H PC PC'.
step_sfree :
   perform (mach H L R PC) (i_sfree N) (mach H L R' PC')
      <- zlookup R Z
      <- separate N Z V1 Z'
      <- zupdate R Z' R''
      <- ccupdate R'' (conds_ B1 B2 B3 B4) R'
      <- advance H PC PC'.
step_shl :
   perform (mach H L R PC) (i_shl N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B3
      <- binary_int theend V2 B5
      <- represents Nrot B5
      <- lt Nrot 32'
      <- cclookup R (conds_ Fc Fz Fs Fo)
      <- shift_left Nrot B3 B1' B4
      <- binary_int theend V1' B1'
      <- propagate H R PC E V1' H' R'
      <- ccupdate R' (conds_ B1 Fz Fs B2) R''
      <- advance H PC PC'.
step_sar :
   perform (mach H L R PC) (i_sar N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B3
      <- binary_int theend V2 B5
      <- represents Nrot B5
      <- lt Nrot 32'
      <- cclookup R (conds_ Fc Fz Fs Fo)
      <- shift_arith_right Nrot B3 B1' B4
      <- binary_int theend V1' B1'
      <- propagate H R PC E V1' H' R'
      <- ccupdate R' (conds_ B1 Fz Fs B2) R''
      <- advance H PC PC'.
step_shr :
   perform (mach H L R PC) (i_shr N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B3
      <- binary_int theend V2 B5
      <- represents Nrot B5
      <- lt Nrot 32'
      <- cclookup R (conds_ Fc Fz Fs Fo)
      <- shift_right Nrot B3 B1' B4
      <- binary_int theend V1' B1'
      <- propagate H R PC E V1' H' R'
      <- ccupdate R' (conds_ B1 Fz Fs B2) R''
      <- advance H PC PC'.
step_sub :
   perform (mach H L R PC) (i_sub N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B1
      <- binary_int theend V2 B2
      <- add_wo B2 B3 B1 CARRY OVERFLOW
      <- determine_conds B3 CARRY OVERFLOW CC
      <- binary_int theend V3 B3
      <- propagate H R PC E V3 H' R'
      <- ccupdate R' CC R''
      <- advance H PC PC'.
step_subptr :
   perform (mach H L R PC) (i_subptr E O1 O2) (mach H' L R'' PC')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- atomval V1 (pointer L' P) 0'
      <- binary_int theend V2 B
      <- represents N B
      <- sum N P' P
      <- atomval V3 (pointer L' P') 0'
      <- propagate H R PC E V3 H' R'
      <- ccupdate R' (conds_ B1 B2 B3 B4) R''
      <- advance H PC PC'.
step_xor :
   perform (mach H L R PC) (i_xor N E O1 O2) (mach H' L R'' PC')
      <- product N bytebits (s N')
      <- resolve H R PC O1 V1
      <- resolve H R PC O2 V2
      <- binary_int theend V1 B1
      <- binary_int theend V2 B2
      <- xor B1 B2 B3
      <- determine_conds B3 zero zero CC
      <- binary_int theend V3 B3
      <- propagate H R PC E V3 H' R'
      <- ccupdate R' CC R''
      <- advance H PC PC'.
kind_eq : kind -> kind -> type.
kind_eq_ : kind_eq K K.
kof_fun : kof T K1 -> kof T K2 -> kind_eq K1 K2 -> type.
sat_reg : sat T R K -> kof T K -> pon R K -> type.
canonloc : tp -> type.
canonloc_ : canonloc (location L).
canonloc_kof : canonloc TL -> kof TL kloc -> type.
cloc_lt_reg :
   cloc_lt TL1 TL2 -> canonloc TL1 -> canonloc TL2 -> type.
tr_reg : tr P -> propok P -> type.
timestamp : tp -> nat -> type.
timestamp_fun : timestamp TL N1 -> timestamp TL N2 -> nat_eq N1 N2 -> type.
can_timestamp : canonloc TL -> timestamp TL N -> type.
timestamp_canon : timestamp TL N1 -> canonloc TL -> type.
timestamp_mono :
   Pi TL1:tp. Pi TL2:tp. Pi N1:nat. Pi N2:nat.
      cloc_lt TL1 TL2 -> timestamp TL1 N1 -> timestamp TL2 N2 -> lt N1 N2
         -> type.
sound_hyp : Pi PR1:proof. Pi P:prop. hyp PR1 P -> tr P -> type.
sound_infer_sat :
   Pi T:tp. Pi R:pred. Pi K:kind. infer_sat T R K -> sat T R K -> type.
sound_replace :
   Pi T1:tp. Pi T2:tp. Pi K:kind.
      replace T1 T2 -> equiv T1 T2 -> kof T1 K -> kof T2 K -> type.
false : type.
nat_eq_symm : nat_eq N1 N2 -> nat_eq N2 N1 -> type.
nat_eq_symm_ : nat_eq_symm nat_eq_ nat_eq_.
nat_eq_trans :
      nat_eq N1 N2 -> nat_eq N2 N3 -> nat_eq N1 N3 -> type.
nat_eq_trans_ : nat_eq_trans nat_eq_ nat_eq_ nat_eq_.
nat_eq_inc : nat_eq N1 N2 -> nat_eq (s N1) (s N2) -> type.
nat_eq_inc_ : nat_eq_inc nat_eq_ nat_eq_.
nat_eq_cons :
   Pi F:nat -> nat.  nat_eq N N' -> nat_eq (F N) (F N') -> type.
nat_eq_cons_ : nat_eq_cons (\n:nat. F n) nat_eq_ nat_eq_.
nat_eq_dec : nat_eq N1 N2 -> nat_eq (s N1) (s N2) -> type.
nat_eq_dec_ : nat_eq_dec nat_eq_ nat_eq_.
expon_resp :
      nat_eq N1 N1' -> nat_eq N2 N2' -> nat_eq N3 N3' -> expon N1 N2 N3
         -> expon N1' N2' N3' -> type.
- : expon_resp nat_eq_ nat_eq_ nat_eq_ D D.
leq_resp :
      nat_eq N1 N1' -> nat_eq N2 N2' -> leq N1 N2 -> leq N1' N2' -> type.
leq_resp_ : leq_resp nat_eq_ nat_eq_ D D.
lt_resp :
      nat_eq N1 N1' -> nat_eq N2 N2' -> lt N1 N2 -> lt N1' N2' -> type.
lt_resp_ : lt_resp nat_eq_ nat_eq_ D D.
neq_resp :
      nat_eq N1 N1' -> nat_eq N2 N2' -> neq N1 N2 -> neq N1' N2' -> type.
neq_resp_ : neq_resp nat_eq_ nat_eq_ D D.
prod_resp :
      nat_eq N1 N1' -> nat_eq N2 N2' -> nat_eq N3 N3' -> product N1 N2 N3
         -> product N1' N2' N3' -> type.
prod_resp_ : prod_resp nat_eq_ nat_eq_ nat_eq_ D D.
sum_resp :
      nat_eq N1 N1' -> nat_eq N2 N2' -> nat_eq N3 N3' -> sum N1 N2 N3
         -> sum N1' N2' N3' -> type.
sum_resp_ : sum_resp nat_eq_ nat_eq_ nat_eq_ D D.
max_resp :
      nat_eq N1 N1' -> nat_eq N2 N2' -> nat_eq N3 N3' -> max N1 N2 N3
         -> max N1' N2' N3' -> type.
max_resp_ : max_resp nat_eq_ nat_eq_ nat_eq_ D D.
quotrem_resp :
      nat_eq N1 N1' -> nat_eq N2 N2' -> nat_eq Q Q' -> nat_eq R R'
         -> quotrem N1 N2 Q R -> quotrem N1' N2' Q' R' -> type.
- : quotrem_resp nat_eq_ nat_eq_ nat_eq_ nat_eq_ D D.
false_implies_nat_eq : false -> Pi N1:nat. Pi N2:nat. nat_eq N1 N2 -> type.
false_implies_neq : false -> Pi N1:nat. Pi N2:nat. neq N1 N2 -> type.
sum_ident : Pi n:nat. sum n z n -> type.
sum_ident_z : sum_ident z sum_z.
sum_ident_s : sum_ident (s N) (sum_s D) <- sum_ident N D.
sum_inc :
   sum N1 N2 N3 -> sum N1 (s N2) (s N3) -> type.
sum_inc_z : sum_inc sum_z sum_z.
sum_inc_s : sum_inc (sum_s D) (sum_s D') <- sum_inc D D'.
sum_dec :
   sum N1 N2 N3 -> sum N1 (s N2) (s N3) -> type.
sum_dec_z : sum_dec sum_z sum_z.
sum_dec_s : sum_dec (sum_s D) (sum_s D') <- sum_dec D D'.
sum_shift :
   sum (s N1) N2 N3 -> sum N1 (s N2) N3 -> type.
sum_shift_z : sum_shift (sum_s sum_z) sum_z.
sum_shift_s : sum_shift (sum_s D) (sum_s D') <- sum_shift D D'.
sum_shift' :
   sum (s N1) N2 N3 -> sum N1 (s N2) N3 -> type.
sum_shift'_z : sum_shift' (sum_s sum_z) sum_z.
sum_shift'_s : sum_shift' (sum_s D) (sum_s D') <- sum_shift' D D'.
sum_commute :
   sum N1 N2 N3 -> sum N2 N1 N3 -> type.
sum_commute_z : sum_commute sum_z D <- sum_ident N D.
sum_commute_s : sum_commute (sum_s D) D'' <- sum_commute D D' <- sum_inc D' D''.
sum_assoc :
      sum N1 N2 N12 -> sum N12 N3 N -> sum N2 N3 N23 -> sum N1 N23 N -> type.
sum_assoc_z : sum_assoc sum_z D D sum_z.
sum_assoc_s :
   sum_assoc (sum_s D12) (sum_s D12_3) D23 (sum_s D1_23)
      <- sum_assoc D12 D12_3 D23 D1_23.
sum_assoc' :
      sum N1 N2 N12 -> sum N12 N3 N -> sum N2 N3 N23 -> sum N1 N23 N -> type.
sum_assoc'_z : sum_assoc' sum_z D D sum_z.
sum_assoc'_s :
   sum_assoc' (sum_s D12) (sum_s D12_3) D23 (sum_s D1_23)
      <- sum_assoc' D12 D12_3 D23 D1_23.
can_sum : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum N1 N2 N3 -> type.
can_sum_z : can_sum z N N sum_z.
can_sum_s : can_sum (s N1) N2 (s N3) (sum_s D) <- can_sum N1 N2 N3 D.
sum_fun2 :
      sum N1 N2 N3 -> sum N1 N2' N3 -> nat_eq N2 N2' -> type.
sum_fun2_z : sum_fun2 sum_z sum_z nat_eq_.
sum_fun2_s : sum_fun2 (sum_s D1) (sum_s D2) D3 <- sum_fun2 D1 D2 D3.
sum_fun1 :
      sum N1 N2 N3 -> sum N1' N2 N3 -> nat_eq N1 N1' -> type.
sum_fun1_ :
   sum_fun1 D1 D2 D
      <- sum_commute D1 D1'
      <- sum_commute D2 D2'
      <- sum_fun2 D1' D2' D.
sum_fun3 :
      sum N1 N2 N3 -> sum N1 N2 N3' -> nat_eq N3 N3' -> type.
sum_fun3_z : sum_fun3 sum_z sum_z nat_eq_.
sum_fun3_s :
   sum_fun3 (sum_s D1) (sum_s D2) D' <- sum_fun3 D1 D2 D <- nat_eq_inc D D'.
sum_nonzero :
      sum (s N1) N2 N3 -> nat_eq N3 (s N3') -> type.
sum_nonzero_ : sum_nonzero (sum_s X1) nat_eq_.
sum_equal : sum N M N -> nat_eq M 0' -> type.
sum_equal_z : sum_equal sum_z nat_eq_.
sum_equal_s : sum_equal (sum_s D) Deq <- sum_equal D Deq.
prod_zero : Pi N:nat. product N z z -> type.
prod_zero_z : prod_zero z product_z.
prod_zero_s : prod_zero (s N) (product_s sum_z Dprod) <- prod_zero N Dprod.
prod_inc :
      product N1 N2 N3 -> sum N1 N3 N4 -> product N1 (s N2) N4 -> type.
prod_inc_z : prod_inc product_z sum_z product_z.
prod_inc_s :
   prod_inc (product_s Dsum1 Dprod) Dsum2 (product_s Dsum Dprod')
      <- can_sum N1 N3' N5 Dsum3
      <- prod_inc Dprod Dsum3 Dprod'
      <- sum_assoc' Dsum5 Dsum6 Dsum1 Dsum2
      <- sum_shift Dsum5 Dsum7
      <- sum_commute Dsum7 Dsum8
      <- sum_assoc Dsum8 Dsum6 Dsum9 Dsum10
      <- sum_fun3 Dsum9 Dsum3 Deq
      <- sum_resp nat_eq_ Deq nat_eq_ Dsum10 Dsum.
prod_commute :
   product N1 N2 N3 -> product N2 N1 N3 -> type.
prod_commute_z : prod_commute product_z D <- prod_zero N1 D.
prod_commute_s :
   prod_commute (product_s Dsum Dprod) Dprod''
      <- prod_commute Dprod Dprod'
      <- prod_inc Dprod' Dsum Dprod''.
prod_ident : Pi N:nat. product N 1' N -> type.
prod_ident_ :
   prod_ident N D
      <- sum_ident N Dsum
      <- prod_commute (product_s Dsum product_z) D.
can_product : Pi N1:nat. Pi N2:nat. Pi N3:nat. product N1 N2 N3 -> type.
can_product_z : can_product z N1 z product_z.
can_product_s :
   can_product (s N1) N2 N3 (product_s Dsum Dprod)
      <- can_product N1 N2 N3' Dprod
      <- can_sum N2 N3' N3 Dsum.
sum_prod_distribute :
      sum N1 N2 N12 -> product N12 N N12' -> product N1 N N1'
         -> product N2 N N2' -> sum N1' N2' N12' -> type.
- : sum_prod_distribute sum_z Dprod product_z Dprod sum_z.
- :
   sum_prod_distribute (sum_s Dsum) (product_s Dsum' Dprod)
      (product_s Dsum1 Dprod1) Dprod2 Dsum12'
      <- sum_prod_distribute Dsum Dprod Dprod1 Dprod2 Dsum12
      <- sum_assoc' Dsum1 Dsum12' Dsum12 Dsum'.
prod_result_zero :
   product N1 (s N2) 0' -> nat_eq N1 0' -> type.
prod_result_zero_z : prod_result_zero product_z nat_eq_.
prod_result_nonzero :
      product N1 N2 (s N3) -> nat_eq N1 (s N1') -> type.
prod_result_nonzero_ : prod_result_nonzero (product_s Dsum Dprod) nat_eq_.
nonzero_prod_nonzero :
      product N1 N2 N3 -> nat_eq N1 (s N1') -> nat_eq N2 (s N2')
         -> nat_eq N3 (s N3') -> type.
- : nonzero_prod_nonzero (product_s (sum_s X1) X2) nat_eq_ nat_eq_ nat_eq_.
nonzero_prod_nonzero' :
      product N1 N2 N3 -> lt z N1 -> lt z N2 -> lt z N3 -> type.
- : nonzero_prod_nonzero' (product_s (sum_s X1) X2) lt_z lt_z lt_z.
prod_fun3 :
      product N1 N2 N3 -> product N1 N2 N4 -> nat_eq N3 N4 -> type.
- : prod_fun3 product_z product_z nat_eq_.
- :
   prod_fun3 (product_s Dsum1 Dprod1) (product_s Dsum2 Dprod2) Dneq2
      <- prod_fun3 Dprod1 Dprod2 Dneq1
      <- sum_resp nat_eq_ Dneq1 nat_eq_ Dsum1 Dsum3
      <- sum_fun3 Dsum3 Dsum2 Dneq2.
sum_prod_distribute' :
      sum N1 N2 N12 -> product N12 N N12' -> product N1 N N1'
         -> product N2 N N2' -> sum N1' N2' N12' -> type.
- :
   sum_prod_distribute' D1 D2' D3 D4 D5
      <- can_sum N4 N3 N12 D1
      <- can_product N12 N N12'' D2
      <- sum_prod_distribute D1 D2 D3' D4' D5'
      <- prod_fun3 D3' D3 Deq3
      <- prod_fun3 D4' D4 Deq4
      <- sum_resp Deq3 Deq4 nat_eq_ D5' D5''
      <- sum_fun3 D5'' D5 Deq
      <- prod_resp nat_eq_ nat_eq_ Deq D2 D2'.
sum_prod_distribute'' :
      sum N1 N2 N12 -> product N12 N N12' -> product N1 N N1'
         -> product N2 N N2' -> sum N1' N2' N12' -> type.
- :
   sum_prod_distribute'' D1 D2 D3 D4 D5
      <- sum_prod_distribute' D1' D2' D3 D4 D5
      <- sum_fun3 D1' D1 Deq
      <- prod_resp Deq nat_eq_ nat_eq_ D2' D2.
prod_assoc :
      product N1 N2 N12 -> product N12 N3 N -> product N2 N3 N23
         -> product N1 N23 N -> type.
- :
   prod_assoc product_z product_z Dprod product_z <- can_product N1 N2 N3 Dprod.
- :
   prod_assoc (product_s Dsum_y_xy Dprod_xy) Dprod_sxy_z Dprod_yz
      (product_s Dsum_yz_xyz Dprod_x_yz)
      <- sum_prod_distribute Dsum_y_xy Dprod_sxy_z Dprod_yz Dprod_xy_z
            Dsum_yz_xyz
      <- prod_assoc Dprod_xy Dprod_xy_z Dprod_yz' Dprod_x_yz'
      <- prod_fun3 Dprod_yz' Dprod_yz Deq
      <- prod_resp nat_eq_ Deq nat_eq_ Dprod_x_yz' Dprod_x_yz.
can_expon : Pi N1:nat. Pi N2:nat. Pi N3:nat. expon N1 N2 N3 -> type.
- : can_expon N z 1' expon_z.
- :
   can_expon N1 (s N2) N3 (expon_s Dprod Dexp)
      <- can_expon N1 N2 N3' Dexp
      <- can_product N1 N3' N3 Dprod.
expon_ident2 : Pi N:nat. expon N 1' N -> type.
- : expon_ident2 N1 (expon_s Dprod expon_z) <- prod_ident N1 Dprod.
max_commute :
   max N1 N2 N3 -> max N2 N1 N3 -> type.
- : max_commute max_z1 max_z2.
- : max_commute max_z2 max_z1.
- : max_commute (max_s D) (max_s D') <- max_commute D D'.
max_assoc :
      max N1 N2 N12 -> max N12 N3 N -> max N2 N3 N23 -> max N1 N23 N -> type.
- : max_assoc max_z1 D D max_z1.
- : max_assoc max_z2 D max_z1 D.
- : max_assoc D max_z2 max_z2 D.
- :
   max_assoc (max_s D12) (max_s D12_3) (max_s D23) (max_s D1_23)
      <- max_assoc D12 D12_3 D23 D1_23.
max_assoc' :
      max N1 N2 N12 -> max N12 N3 N -> max N2 N3 N23 -> max N1 N23 N -> type.
- : max_assoc' max_z1 D D max_z1.
- : max_assoc' max_z2 D max_z1 D.
- : max_assoc' D max_z2 max_z2 D.
- :
   max_assoc' (max_s D12) (max_s D12_3) (max_s D23) (max_s D1_23)
      <- max_assoc' D12 D12_3 D23 D1_23.
can_max : Pi N1:nat. Pi N2:nat. Pi N3:nat. max N1 N2 N3 -> type.
- : can_max z N1 N1 max_z1.
- : can_max N1 z N1 max_z2.
- : can_max (s N1) (s N2) (s N3) (max_s D) <- can_max N1 N2 N3 D.
max_fun :
      max N1 N2 N3 -> max N1 N2 N3' -> nat_eq N3 N3' -> type.
- : max_fun max_z1 max_z1 nat_eq_.
- : max_fun max_z2 max_z2 nat_eq_.
- : max_fun max_z1 max_z2 nat_eq_.
- : max_fun max_z2 max_z1 nat_eq_.
- : max_fun (max_s D1) (max_s D2) D' <- max_fun D1 D2 D <- nat_eq_inc D D'.
max_sum_distribute :
      max N1 N2 N3 -> sum N N3 N3' -> sum N N1 N1' -> sum N N2 N2'
         -> max N1' N2' N3' -> type.
- : max_sum_distribute D sum_z sum_z sum_z D.
- :
   max_sum_distribute D (sum_s D3) (sum_s D1) (sum_s D2) (max_s D')
      <- max_sum_distribute D D3 D1 D2 D'.
max_idem : Pi N:nat. max N N N -> type.
- : max_idem z max_z1.
- : max_idem (s N) (max_s D) <- max_idem N D.
sum_implies_leq :
   sum N1 N2 N3 -> leq N1 N3 -> type.
sum_implies_leq_z : sum_implies_leq sum_z leq_z.
sum_implies_leq_s :
   sum_implies_leq (sum_s D) (leq_s D') <- sum_implies_leq D D'.
sum_implies_leq' :
   sum N1 N2 N3 -> leq N2 N3 -> type.
sum_implies_leq'_ :
   sum_implies_leq' Dsum Dleq
      <- sum_commute Dsum Dsum'
      <- sum_implies_leq Dsum' Dleq.
leq_implies_sum :
   sum N1 N2 N3 -> leq N1 N3 -> type.
leq_implies_sum_z : leq_implies_sum sum_z leq_z.
leq_implies_sum_s :
   leq_implies_sum (sum_s D) (leq_s D') <- leq_implies_sum D D'.
sum_implies_lt :
   sum N1 (s N2) N3 -> lt N1 N3 -> type.
sum_implies_lt_z : sum_implies_lt sum_z lt_z.
sum_implies_lt_s : sum_implies_lt (sum_s D) (lt_s D') <- sum_implies_lt D D'.
lt_implies_sum :
   lt N1 N3 -> sum N1 (s N2) N3 -> type.
- : lt_implies_sum lt_z sum_z.
- : lt_implies_sum (lt_s D) (sum_s D') <- lt_implies_sum D D'.
leq_reflex : Pi N:nat. leq N N -> type.
leq_reflex_ : leq_reflex N D' <- sum_ident N D <- sum_implies_leq D D'.
leq_reflex' : nat_eq N1 N2 -> leq N1 N2 -> type.
- : leq_reflex' nat_eq_ D <- leq_reflex N1 D.
max_implies_leq :
   max N1 N2 N3 -> leq N1 N3 -> type.
- : max_implies_leq max_z1 leq_z.
- : max_implies_leq max_z2 D <- leq_reflex N1 D.
- : max_implies_leq (max_s D) (leq_s D') <- max_implies_leq D D'.
max_implies_leq' :
   max N1 N2 N3 -> leq N2 N3 -> type.
- :
   max_implies_leq' Dmax Dleq
      <- max_commute Dmax Dmax'
      <- max_implies_leq Dmax' Dleq.
leq_zero : leq N 0' -> nat_eq N 0' -> type.
leq_zero_z : leq_zero leq_z nat_eq_.
leq_antisymm :
   leq N1 N2 -> leq N2 N1 -> nat_eq N1 N2 -> type.
leq_antisymm_z : leq_antisymm leq_z D Deq <- leq_zero D Deq.
leq_antisymm_s :
   leq_antisymm (leq_s D1) (leq_s D2) Deq'
      <- leq_antisymm D1 D2 Deq
      <- nat_eq_inc Deq Deq'.
lt_implies_leq : lt N1 N2 -> leq N1 N2 -> type.
lt_implies_leq_z : lt_implies_leq lt_z leq_z.
lt_implies_leq_s : lt_implies_leq (lt_s D) (leq_s D') <- lt_implies_leq D D'.
lt_succ_implies_leq : lt N1 (s N2) -> leq N1 N2 -> type.
lt_succ_implies_leq_z : lt_succ_implies_leq lt_z leq_z.
lt_succ_implies_leq_s :
   lt_succ_implies_leq (lt_s D) (leq_s D') <- lt_succ_implies_leq D D'.
lt_implies_succ_leq : lt N1 N2 -> leq (s N1) N2 -> type.
- : lt_implies_succ_leq lt_z (leq_s leq_z).
- : lt_implies_succ_leq (lt_s Dlt) (leq_s Dleq) <- lt_implies_succ_leq Dlt Dleq.
leq_succ_implies_lt : leq (s N1) N2 -> lt N1 N2 -> type.
leq_succ_implies_lt_z : leq_succ_implies_lt (leq_s leq_z) lt_z.
leq_succ_implies_lt_s :
   leq_succ_implies_lt (leq_s D) (lt_s D') <- leq_succ_implies_lt D D'.
leq_trans :
   leq N1 N2 -> leq N2 N3 -> leq N1 N3 -> type.
leq_trans_z : leq_trans leq_z X1 leq_z.
leq_trans_s : leq_trans (leq_s D1) (leq_s D2) (leq_s D3) <- leq_trans D1 D2 D3.
leq_lt_trans :
   leq N1 N2 -> lt N2 N3 -> lt N1 N3 -> type.
leq_lt_trans_z : leq_lt_trans leq_z lt_z lt_z.
leq_lt_trans_zs : leq_lt_trans leq_z (lt_s X1) lt_z.
leq_lt_trans_s :
   leq_lt_trans (leq_s D1) (lt_s D2) (lt_s D3) <- leq_lt_trans D1 D2 D3.
lt_leq_trans :
   lt N1 N2 -> leq N2 N3 -> lt N1 N3 -> type.
lt_leq_trans_z : lt_leq_trans lt_z (leq_s X1) lt_z.
lt_leq_trans_s :
   lt_leq_trans (lt_s D1) (leq_s D2) (lt_s D3) <- lt_leq_trans D1 D2 D3.
lt_trans :
   lt N1 N2 -> lt N2 N3 -> lt N1 N3 -> type.
lt_trans_z : lt_trans lt_z (lt_s X1) lt_z.
lt_trans_s : lt_trans (lt_s D1) (lt_s D2) (lt_s D3) <- lt_trans D1 D2 D3.
sum_monotone1 :
      leq N1 N1' -> sum N1 N2 N3 -> sum N1' N2 N3' -> leq N3 N3' -> type.
- :
   sum_monotone1 Dleq Dsum1 Dsum3 Dleq'
      <- leq_implies_sum Dsum2 Dleq
      <- sum_assoc Dsum2 Dsum3 Dsum4 Dsum5
      <- sum_commute Dsum5 Dsum6
      <- sum_assoc Dsum4 Dsum6 Dsum7 Dsum8
      <- sum_commute Dsum7 Dsum7'
      <- sum_fun3 Dsum7' Dsum1 Deq
      <- sum_resp nat_eq_ Deq nat_eq_ Dsum8 Dsum
      <- sum_commute Dsum Dsum'
      <- sum_implies_leq Dsum' Dleq'.
sum_monotone1' :
      leq N1 N1' -> sum N1 N2 N3 -> sum N1' N2 N3' -> leq N3 N3' -> type.
- :
   sum_monotone1' Dleq Dsum Dsum' Dleq'
      <- can_sum N1 N3 N4 Dsum
      <- sum_monotone1 Dleq Dsum Dsum' Dleq'.
sum_monotone2 :
      leq N2 N2' -> sum N1 N2 N3 -> sum N1 N2' N3' -> leq N3 N3' -> type.
- :
   sum_monotone2 Dleq Dsum1 Dsum2 Dleq'
      <- sum_commute Dsum1 Dsum1'
      <- sum_commute Dsum2 Dsum2'
      <- sum_monotone1 Dleq Dsum1' Dsum2' Dleq'.
sum_monotone2' :
      leq N2 N2' -> sum N1 N2 N3 -> sum N1 N2' N3' -> leq N3 N3' -> type.
- :
   sum_monotone2' Dleq Dsum Dsum' Dleq'
      <- can_sum N3 N1 N4 Dsum
      <- sum_monotone2 Dleq Dsum Dsum' Dleq'.
sum_monotone :
      leq N1 N1' -> leq N2 N2' -> sum N1 N2 N3 -> sum N1' N2' N3' -> leq N3 N3'
         -> type.
- :
   sum_monotone Dleq1 Dleq2 Dsum Dsum' Dleq''
      <- can_sum N6 N4 N2 Dsum''
      <- sum_monotone1 Dleq1 Dsum Dsum'' Dleq
      <- sum_monotone2 Dleq2 Dsum'' Dsum' Dleq'
      <- leq_trans Dleq Dleq' Dleq''.
sum_monotone' :
      leq N1 N1' -> leq N2 N2' -> sum N1 N2 N3 -> sum N1' N2' N3' -> leq N3 N3'
         -> type.
- :
   sum_monotone' Dleq1 Dleq2 Dsum' Dsum Dleq3
      <- can_sum N1 N3 N5 Dsum'
      <- sum_monotone Dleq1 Dleq2 Dsum' Dsum Dleq3.
prod_monotone1 :
      leq N1 N1' -> product N1 N2 N3 -> product N1' N2 N3' -> leq N3 N3' -> type.
- :
   prod_monotone1 Dleq Dprod Dprod' Dleq'
      <- leq_implies_sum Dsum Dleq
      <- sum_prod_distribute Dsum Dprod' Dprod1 Dprod2 Dsum'
      <- prod_fun3 Dprod1 Dprod Deq
      <- sum_resp Deq nat_eq_ nat_eq_ Dsum' Dsum''
      <- sum_implies_leq Dsum'' Dleq'.
prod_monotone1' :
      leq N1 N1' -> product N1 N2 N3 -> product N1' N2 N3' -> leq N3 N3' -> type.
- :
   prod_monotone1' Dleq Dprod Dprod' Dleq'
      <- can_product N1 N3 N4 Dprod
      <- prod_monotone1 Dleq Dprod Dprod' Dleq'.
prod_monotone2 :
      leq N2 N2' -> product N1 N2 N3 -> product N1 N2' N3' -> leq N3 N3' -> type.
- :
   prod_monotone2 Dleq Dprod1 Dprod2 Dleq'
      <- prod_commute Dprod1 Dprod1'
      <- prod_commute Dprod2 Dprod2'
      <- prod_monotone1 Dleq Dprod1' Dprod2' Dleq'.
prod_monotone2' :
      leq N2 N2' -> product N1 N2 N3 -> product N1 N2' N3' -> leq N3 N3' -> type.
- :
   prod_monotone2' Dleq Dprod Dprod' Dleq'
      <- can_product N3 N1 N4 Dprod
      <- prod_monotone2 Dleq Dprod Dprod' Dleq'.
prod_monotone :
      leq N1 N1' -> leq N2 N2' -> product N1 N2 N3 -> product N1' N2' N3'
         -> leq N3 N3' -> type.
- :
   prod_monotone Dleq1 Dleq2 Dprod Dprod' Dleq''
      <- can_product N6 N4 N2 Dprod''
      <- prod_monotone1 Dleq1 Dprod Dprod'' Dleq
      <- prod_monotone2 Dleq2 Dprod'' Dprod' Dleq'
      <- leq_trans Dleq Dleq' Dleq''.
prod_monotone' :
      leq N1 N1' -> leq N2 N2' -> product N1 N2 N3 -> product N1' N2' N3'
         -> leq N3 N3' -> type.
- :
   prod_monotone' Dleq1 Dleq2 Dprod' Dprod Dleq3
      <- can_product N1 N3 N5 Dprod'
      <- prod_monotone Dleq1 Dleq2 Dprod' Dprod Dleq3.
max_monotone1 :
      leq N1 N1' -> max N1 N2 N3 -> max N1' N2 N3' -> leq N3 N3' -> type.
- : max_monotone1 leq_z max_z1 Dmax Dleq <- max_implies_leq' Dmax Dleq.
- : max_monotone1 leq_z max_z2 X1 leq_z.
- : max_monotone1 (leq_s Dleq) max_z2 max_z2 (leq_s Dleq).
- :
   max_monotone1 (leq_s Dleq) (max_s Dmax) (max_s Dmax') (leq_s Dleq')
      <- max_monotone1 Dleq Dmax Dmax' Dleq'.
max_monotone2 :
      leq N2 N2' -> max N1 N2 N3 -> max N1 N2' N3' -> leq N3 N3' -> type.
- :
   max_monotone2 Dleq Dmax1 Dmax2 Dleq'
      <- max_commute Dmax1 Dmax1'
      <- max_commute Dmax2 Dmax2'
      <- max_monotone1 Dleq Dmax1' Dmax2' Dleq'.
max_monotone2' :
      leq N2 N2' -> max N1 N2 N3 -> max N1 N2' N3' -> leq N3 N3' -> type.
- :
   max_monotone2' Dleq Dmax1 Dmax2 Dleq'
      <- can_max N3 N1 N4 Dmax1
      <- max_monotone2 Dleq Dmax1 Dmax2 Dleq'.
max_monotone :
      leq N1 N1' -> leq N2 N2' -> max N1 N2 N3 -> max N1' N2' N3' -> leq N3 N3'
         -> type.
- :
   max_monotone Dleq1 Dleq2 Dmax Dmax' Dleq''
      <- can_max N6 N4 N2 Dmax''
      <- max_monotone1 Dleq1 Dmax Dmax'' Dleq
      <- max_monotone2 Dleq2 Dmax'' Dmax' Dleq'
      <- leq_trans Dleq Dleq' Dleq''.
max_monotone' :
      leq N1 N1' -> leq N2 N2' -> max N1 N2 N3 -> max N1' N2' N3' -> leq N3 N3'
         -> type.
- :
   max_monotone' Dleq1 Dleq2 Dmax' Dmax Dleq3
      <- can_max N1 N3 N5 Dmax'
      <- max_monotone Dleq1 Dleq2 Dmax' Dmax Dleq3.
max_leq :
      leq N1 N -> leq N2 N -> max N1 N2 N3 -> leq N3 N -> type.
- :
   max_leq Dleq1 Dleq2 Dmax Dleq
      <- max_idem N2 Dmax'
      <- max_monotone Dleq1 Dleq2 Dmax Dmax' Dleq.
lt_succ : Pi N:nat. lt N (s N) -> type.
lt_succ_z : lt_succ z lt_z.
lt_succ_s : lt_succ (s N) (lt_s D) <- lt_succ N D.
leq_implies_lt_succ : leq N1 N2 -> lt N1 (s N2) -> type.
- : leq_implies_lt_succ Dleq D <- lt_succ N2 Dlt <- leq_lt_trans Dleq Dlt D.
leq_succ : Pi N:nat. leq N (s N) -> type.
leq_succ_ : leq_succ N Dleq <- lt_succ N Dlt <- lt_implies_leq Dlt Dleq.
leq_succ' : leq N1 N2 -> leq N1 (s N2) -> type.
- : leq_succ' D1 D <- leq_succ N2 D2 <- leq_trans D1 D2 D.
max_leq_sum :
      max N1 N2 N3 -> sum N1 N2 N3' -> leq N3 N3' -> type.
- : max_leq_sum max_z1 sum_z D <- leq_reflex N1 D.
- : max_leq_sum max_z2 Dsum Dleq <- sum_implies_leq Dsum Dleq.
- :
   max_leq_sum (max_s Dmax) (sum_s Dsum) Dleq'''
      <- can_sum N4 N5 N3 Dsum'
      <- max_leq_sum Dmax Dsum' Dleq
      <- sum_commute Dsum' Dsum''
      <- sum_commute (sum_s Dsum'') Dsum'''
      <- sum_fun3 Dsum''' Dsum Deq
      <- leq_reflex' Deq Dleq'
      <- leq_trans (leq_s Dleq) Dleq' Dleq''
      <- leq_succ' Dleq'' Dleq'''.
leq_neq_implies_lt : leq M N -> neq M N -> lt M N -> type.
leq_neq_implies_lt_zs : leq_neq_implies_lt leq_z neq_zs lt_z.
leq_neq_implies_lt_ss :
   leq_neq_implies_lt (leq_s Dleq) (neq_s Dneq) (lt_s Dlt)
      <- leq_neq_implies_lt Dleq Dneq Dlt.
lt_contradict : lt N N -> false -> type.
lt_contradict_s : lt_contradict (lt_s D) F <- lt_contradict D F.
neq_contradict : neq N N -> false -> type.
neq_contradict_s : neq_contradict (neq_s D) D' <- neq_contradict D D'.
lt_leq_contradict : lt M N -> leq N M -> false -> type.
lt_leq_contradict_z :
   lt_leq_contradict (lt_s D1) (leq_s D2) D <- lt_leq_contradict D1 D2 D.
sum_leq :
      sum N1 N2 N3 -> sum N1' N2' N3' -> leq N1 N1' -> leq N2 N2' -> leq N3 N3'
         -> type.
sum_leq_ :
   sum_leq Dsum Dsum' Dleq1 Dleq2 Dleq3
      <- leq_implies_sum Dsum1 Dleq1
      <- leq_implies_sum Dsum2 Dleq2
      <- sum_assoc Dsum1 Dsum' Dsum4 Dsum5
      <- sum_commute Dsum4 Dsum6
      <- sum_assoc Dsum2 Dsum6 Dsum7 Dsum8
      <- sum_assoc' Dsum9 Dsum10 Dsum8 Dsum5
      <- sum_fun3 Dsum9 Dsum Deq
      <- sum_resp Deq nat_eq_ nat_eq_ Dsum10 Dsum3
      <- sum_implies_leq Dsum3 Dleq3.
sum_leq2 :
      sum N1 N2 N3 -> sum N1 N2' N3' -> leq N2 N2' -> leq N3 N3' -> type.
- : sum_leq2 sum_z sum_z Dleq Dleq.
- :
   sum_leq2 (sum_s Dsum) (sum_s Dsum') Dleq' (leq_s Dleq)
      <- sum_leq2 Dsum Dsum' Dleq' Dleq.
prod_leq| : false -> Pi N:nat. Pi N1:nat. leq N N1 -> type.
prod_leq :
      product N1 N2 N3 -> product N1' N2 N3' -> leq N1 N1' -> leq N3 N3' -> type.
prod_leq_zz : prod_leq product_z product_z D1 leq_z.
prod_leq_zs : prod_leq product_z (product_s Dsum Dprod) D1 leq_z.
prod_leq_sz :
   prod_leq (product_s Dsum Dprod) product_z D1 Dleq
      <- lt_leq_contradict lt_z D1 Dfalse
      <- prod_leq| Dfalse N1 z Dleq.
prod_leq_ss :
   prod_leq (product_s Dsum Dprod) (product_s Dsum1 Dprod1) (leq_s Dleq) Dleq3
      <- prod_leq Dprod Dprod1 Dleq Dleq1
      <- leq_reflex N1 Dleq2
      <- sum_leq Dsum Dsum1 Dleq2 Dleq1 Dleq3.
lt_implies_neq : lt M N -> neq M N -> type.
lt_implies_neq_z : lt_implies_neq lt_z neq_zs.
lt_implies_neq_s :
   lt_implies_neq (lt_s Dlt) (neq_s Dneq) <- lt_implies_neq Dlt Dneq.
sum_lt : sum M (s N1) N -> lt M N -> type.
sum_lt_z : sum_lt sum_z lt_z.
sum_lt_s : sum_lt (sum_s Dsum) (lt_s Dlt) <- sum_lt Dsum Dlt.
lt_sum : sum M (s N1) N -> lt M N -> type.
lt_sum_z : lt_sum sum_z lt_z.
lt_sum_s : lt_sum (sum_s Dsum) (lt_s Dlt) <- lt_sum Dsum Dlt.
neq_symm : neq M N -> neq N M -> type.
neq_symm_zs : neq_symm neq_zs neq_sz.
neq_symm_sz : neq_symm neq_sz neq_zs.
neq_symm_s : neq_symm (neq_s Dneq) (neq_s Dneq') <- neq_symm Dneq Dneq'.
leq_gt : nat -> nat -> type.
leq_gt_leq : leq_gt M N <- leq M N.
leq_gt_gt : leq_gt M N <- lt N M.
dichotomy : Pi M:nat. Pi N:nat. leq_gt M N -> type.
dichotomy_z : dichotomy z N1 (leq_gt_leq leq_z).
dichotomy_sz : dichotomy (s N1) z (leq_gt_gt lt_z).
dichotomy_ss| : leq_gt M N -> leq_gt (s M) (s N) -> type.
dichotomy_ss|_leq : dichotomy_ss| (leq_gt_leq D) (leq_gt_leq (leq_s D)).
dichotomy_ss|_gt : dichotomy_ss| (leq_gt_gt D) (leq_gt_gt (lt_s D)).
dichotomy_ss :
   dichotomy (s M) (s N) Dlg' <- dichotomy M N Dlg <- dichotomy_ss| Dlg Dlg'.
maybe_eq : nat -> nat -> type.
maybe_eq_yes : maybe_eq M N <- nat_eq M N.
maybe_eq_no : maybe_eq M N <- neq M N.
compare_for_nat_eq : Pi M:nat. Pi N:nat. maybe_eq M N -> type.
compare_for_nat_eq_zz : compare_for_nat_eq z z (maybe_eq_yes nat_eq_).
compare_for_nat_eq_zs : compare_for_nat_eq z (s N1) (maybe_eq_no neq_zs).
compare_for_nat_eq_sz : compare_for_nat_eq (s N1) z (maybe_eq_no neq_sz).
compare_for_nat_eq_ss| :
   maybe_eq M N -> maybe_eq (s M) (s N) -> type.
compare_for_nat_eq_ss|_yes :
   compare_for_nat_eq_ss| (maybe_eq_yes nat_eq_) (maybe_eq_yes nat_eq_).
compare_for_nat_eq_ss|_no :
   compare_for_nat_eq_ss| (maybe_eq_no Dneq) (maybe_eq_no (neq_s Dneq)).
compare_for_nat_eq_ss :
   compare_for_nat_eq (s M) (s N) D'
      <- compare_for_nat_eq M N D
      <- compare_for_nat_eq_ss| D D'.
diff_implies_sum :
   diff N M P -> sum M P N -> type.
- : diff_implies_sum diff_z sum_z.
- :
   diff_implies_sum (diff_s Ddiff) (sum_s Dsum) <- diff_implies_sum Ddiff Dsum.
expon_fun3 :
      expon N1 N2 N3 -> expon N1 N2 N4 -> nat_eq N3 N4 -> type.
- : expon_fun3 expon_z expon_z nat_eq_.
- :
   expon_fun3 (expon_s Dprod1 Dexp1) (expon_s Dprod2 Dexp2) Dneq2
      <- expon_fun3 Dexp1 Dexp2 Dneq1
      <- prod_resp nat_eq_ Dneq1 nat_eq_ Dprod1 Dprod3
      <- prod_fun3 Dprod3 Dprod2 Dneq2.
sound_s2toN :
   Pi N1:nat.
      s2toN N (\n:nat. F n) -> expon 2' N N2 -> sum N1 N2 N3 -> nat_eq (F N1) N3
         -> type.
- :
   sound_s2toN N1 s2to0 expon_z Dsum nat_eq_ <- sum_commute (sum_s sum_z) Dsum.
- :
   sound_s2toN N1 (s2tos (D : s2toN _ F))
      (expon_s (product_s Dsum3 (product_s Dsum2 product_z)) Dexp) Dsum7 Dneq3
      <- sound_s2toN N1 D Dexp Dsum Dneq
      <- sound_s2toN N D Dexp1 Dsum1 Dneq1
      <- nat_eq_cons (\n:nat. F n) Dneq Dneq2
      <- nat_eq_trans Dneq2 Dneq1 Dneq3
      <- sum_commute sum_z Dsum2
      <- can_sum N5 N5 N3 Dsum3
      <- expon_fun3 Dexp1 Dexp Dneq4
      <- sum_resp nat_eq_ Dneq4 nat_eq_ Dsum1 Dsum4
      <- sum_assoc Dsum Dsum4 Dsum5 Dsum6
      <- sum_fun3 Dsum5 Dsum3 Dneq5
      <- sum_resp nat_eq_ Dneq5 nat_eq_ Dsum6 Dsum7.
rem_is_lt :
      quotrem N1 N2 Q R -> nat_eq N2 (s N3) -> lt R N2 -> type.
- : rem_is_lt quotrem_z nat_eq_ lt_z.
- : rem_is_lt (quotrem_sr Dlt D) X1 Dlt.
- : rem_is_lt (quotrem_sq D) nat_eq_ lt_z.
can_quotrem* :
      quotrem N1 N2 Q R -> nat_eq N2 (s N3) -> leq_gt N2 (s R)
         -> quotrem (s N1) N2 Q' R' -> type.
- :
   can_quotrem* Dqr nat_eq_ (leq_gt_leq Dleq) (quotrem_sq Dqr1)
      <- rem_is_lt Dqr nat_eq_ Dlt
      <- lt_implies_succ_leq Dlt Dleq1
      <- leq_antisymm Dleq1 Dleq Deq
      <- nat_eq_dec Deq1 Deq
      <- quotrem_resp nat_eq_ nat_eq_ nat_eq_ Deq1 Dqr Dqr1.
- : can_quotrem* Dqr Dnateq (leq_gt_gt Dlt) (quotrem_sr Dlt Dqr).
can_quotrem :
   Pi N1:nat. Pi N2:nat.
      nat_eq N2 (s N2') -> Pi Q:nat. Pi R:nat. quotrem N1 N2 Q R -> type.
- : can_quotrem z N2 X1 z z quotrem_z.
- :
   can_quotrem (s N1) N2 Dnateq N4 N5 Dqr1
      <- can_quotrem N1 N2 Dnateq Q R Dqr
      <- dichotomy N2 (s R) Dleqgt
      <- can_quotrem* Dqr Dnateq Dleqgt Dqr1.
quotrem_fun :
      quotrem N1 N2 Q R -> quotrem N1 N2 Q' R' -> nat_eq Q Q' -> nat_eq R R'
         -> type.
- : quotrem_fun quotrem_z quotrem_z nat_eq_ nat_eq_.
- :
   quotrem_fun (quotrem_sr Dlt1 Dqr1) (quotrem_sr Dlt2 Dqr2) Dnateq1 Dnateq3
      <- quotrem_fun Dqr1 Dqr2 Dnateq1 Dnateq2
      <- nat_eq_inc Dnateq2 Dnateq3.
- :
   quotrem_fun (quotrem_sq Dqr1) (quotrem_sq Dqr2) Dnateq2 nat_eq_
      <- quotrem_fun Dqr1 Dqr2 Dnateq1 X1
      <- nat_eq_inc Dnateq1 Dnateq2.
- :
   quotrem_fun (quotrem_sq Dqr1) (quotrem_sr Dlt1 Dqr2) Dnateq3 Dnateq4
      <- quotrem_fun Dqr1 Dqr2 X1 Dnateq1
      <- nat_eq_inc Dnateq1 Dnateq2
      <- lt_resp nat_eq_ Dnateq2 Dlt1 Dlt2
      <- lt_contradict Dlt2 Dfalse
      <- false_implies_nat_eq Dfalse (s N2) N3 Dnateq3
      <- false_implies_nat_eq Dfalse z (s N1) Dnateq4.
- :
   quotrem_fun (quotrem_sr Dlt1 Dqr2) (quotrem_sq Dqr1) Dnateq3 Dnateq4
      <- quotrem_fun Dqr2 Dqr1 X1 Dnateq1
      <- nat_eq_symm Dnateq1 Dnateq1'
      <- nat_eq_inc Dnateq1' Dnateq2
      <- lt_resp nat_eq_ Dnateq2 Dlt1 Dlt2
      <- lt_contradict Dlt2 Dfalse
      <- false_implies_nat_eq Dfalse N2 (s N3) Dnateq3
      <- false_implies_nat_eq Dfalse (s N1) z Dnateq4.
quotrem_add_upto_divisor :
      lt N1 DIV -> quotrem N2 DIV Q z -> sum N1 N2 N3 -> quotrem N3 DIV Q N1
         -> type.
- : quotrem_add_upto_divisor Dlt Dqr sum_z Dqr.
- :
   quotrem_add_upto_divisor (lt_s Dlt) Dqr (sum_s Dsum)
      (quotrem_sr (lt_s Dlt) Dqr1)
      <- lt_succ N2 Dlt1
      <- lt_trans Dlt Dlt1 Dlt2
      <- quotrem_add_upto_divisor Dlt2 Dqr Dsum Dqr1.
quotrem_sumprod :
      product Q N2 PProd -> sum R PProd N1 -> lt R N2 -> quotrem N1 N2 Q R
         -> type.
- : quotrem_sumprod product_z sum_z X1 quotrem_z.
- :
   quotrem_sumprod product_z (sum_s Dsum1) Dlt Dqr1
      <- sum_commute Dsum1 Dsum2
      <- sum_fun3 sum_z Dsum2 Dneq1
      <- nat_eq_inc Dneq1 Dneq2
      <- lt_resp Dneq2 nat_eq_ Dlt Dlt1
      <- sum_commute sum_z Dsum3
      <- quotrem_add_upto_divisor Dlt1 quotrem_z Dsum3 Dqr
      <- nat_eq_symm Dneq2 Dneq3
      <- quotrem_resp nat_eq_ nat_eq_ nat_eq_ Dneq3 Dqr Dqr1.
- :
   quotrem_sumprod (product_s (sum_s Dsum1) Dprod) Dsum2 Dlt1 Dqr1
      <- lt_succ N2 Dlt2
      <- quotrem_sumprod Dprod Dsum1 Dlt2 Dqr
      <- quotrem_add_upto_divisor Dlt1 (quotrem_sq Dqr) Dsum2 Dqr1.
sumprod_quotrem :
      quotrem N1 N2 Q R -> product Q N2 PProd -> sum R PProd N1 -> type.
- : sumprod_quotrem quotrem_z product_z sum_z.
- :
   sumprod_quotrem (quotrem_sr Dlt Dqr) Dprod (sum_s Dsum1)
      <- sumprod_quotrem Dqr Dprod Dsum1.
- :
   sumprod_quotrem (quotrem_sq Dqr) (product_s (sum_s Dsum) Dprod) sum_z
      <- sumprod_quotrem Dqr Dprod Dsum.
rem_sum :
      nat_eq N (s N1) -> sum N2 N3 N4 -> quotrem N2 N N5 N1'
         -> quotrem N3 N N6 N2' -> sum N1' N2' N3' -> quotrem N3' N N7 N3''
         -> quotrem N4 N N8 N3'' -> type.
- :
   rem_sum Dnateq Dsum Dqr1 Dqr2 Dsum3 Dqr3 Dqr4
      <- sumprod_quotrem Dqr1 Dprod1 Dsum1
      <- sumprod_quotrem Dqr2 Dprod2 Dsum2
      <- can_sum N1r N2r N4 Dsum3
      <- can_quotrem N4 N Dnateq N4q N3r Dqr3
      <- rem_is_lt Dqr3 Dnateq Dlt
      <- sumprod_quotrem Dqr3 Dprod3 Dsum4
      <- sum_commute Dsum Dsum5
      <- sum_assoc Dsum2 Dsum5 Dsum6 Dsum7
      <- sum_commute Dsum6 Dsum8
      <- sum_assoc Dsum1 Dsum8 Dsum9 Dsum10
      <- sum_prod_distribute' Dsum11 Dprod4 Dprod1 Dprod2 Dsum9
      <- sum_commute Dsum10 Dsum12
      <- sum_commute Dsum7 Dsum13
      <- sum_assoc Dsum12 Dsum13 Dsum14 Dsum15
      <- sum_fun3 Dsum14 Dsum3 Dnateq1
      <- sum_resp nat_eq_ Dnateq1 nat_eq_ Dsum15 Dsum16
      <- sum_commute Dsum16 Dsum17
      <- sum_assoc Dsum4 Dsum17 Dsum18 Dsum19
      <- sum_prod_distribute' Dsum20 Dprod5 Dprod3 Dprod4 Dsum18
      <- quotrem_sumprod Dprod5 Dsum19 Dlt Dqr4.
employ_nat : Pi N1:nat. nat -> nat_eq N1 z -> type.
- : employ_nat z z nat_eq_.
- : employ_nat z (s N) nat_eq_ <- employ_nat z N nat_eq_.
employ_sum : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum N1 N2 N3 -> type.
employ_sum_z : employ_sum z N N sum_z.
employ_sum_s : employ_sum (s N1) N2 (s N3) (sum_s D) <- employ_sum N1 N2 N3 D.
employ_sum' : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum N1 N2 N3 -> type.
- :
   employ_sum' N1 N2 N3 Dsum
      <- sum_commute Dsum Dsum'
      <- employ_sum N2 N1 N3 Dsum'.
employ_sum1 : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum (s N1) N2 N3 -> type.
employ_sum1_z : employ_sum1 z N (s N) (sum_s sum_z).
employ_sum1_s : employ_sum1 (s N1) N2 (s N3) (sum_s D) <- employ_sum1 N1 N2 N3 D.
employ_leq : Pi N1:nat. Pi N2:nat. leq N1 N2 -> type.
- :
   employ_leq N2 N3 Dleq
      <- leq_implies_sum Dsum Dleq
      <- sum_commute Dsum Dsum'
      <- employ_sum N1 N2 N3 Dsum'.
employ_max : Pi N1:nat. Pi N2:nat. Pi N3:nat. max N1 N2 N3 -> type.
- :
   employ_max N1 N2 N3 Dmax
      <- max_commute Dmax Dmax'
      <- max_implies_leq Dmax' Dleq
      <- employ_leq N2 N3 Dleq.
employ_max' : Pi N1:nat. Pi N2:nat. Pi N3:nat. max N1 N2 N3 -> type.
- :
   employ_max' N1 N2 N3 Dmax
      <- max_implies_leq Dmax Dleq
      <- employ_leq N1 N3 Dleq.
bit_eq : bit -> bit -> type.
bit_eq_ : bit_eq BIT BIT.
binary_eq : binary N -> binary N' -> type.
binary_eq_ : binary_eq B B.
bit_eq_symm : bit_eq BIT1 BIT2 -> bit_eq BIT2 BIT1 -> type.
bit_eq_symm_ : bit_eq_symm bit_eq_ bit_eq_.
binary_eq_symm :
      binary_eq B1 B2 -> binary_eq B2 B1 -> type.
binary_eq_symm_ : binary_eq_symm binary_eq_ binary_eq_.
binary_eq_cons :
      bit_eq BIT1 BIT2 -> binary_eq B1 B2 -> binary_eq ($ BIT1 B1) ($ BIT2 B2)
         -> type.
binary_eq_cons_ : binary_eq_cons bit_eq_ binary_eq_ binary_eq_.
binary_eq_cons' :
      bit_eq BIT1 BIT2 -> binary_eq B1 B2 -> binary_eq ($ BIT1 B1) ($ BIT2 B2)
         -> type.
binary_eq_cons'_ : binary_eq_cons' bit_eq_ binary_eq_ binary_eq_.
add_resp :
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3'
         -> bit_eq BIT BIT' -> add B1 B2 B3 BIT -> add B1' B2' B3' BIT' -> type.
add_resp_ : add_resp binary_eq_ binary_eq_ binary_eq_ bit_eq_ D D.
addbit_resp :
      bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> bit_eq BIT3 BIT3'
         -> bit_eq BIT4 BIT4' -> bit_eq BIT5 BIT5'
         -> addbit BIT1 BIT2 BIT3 BIT4 BIT5
         -> addbit BIT1' BIT2' BIT3' BIT4' BIT5' -> type.
- : addbit_resp bit_eq_ bit_eq_ bit_eq_ bit_eq_ bit_eq_ D D.
addc_resp :
      bit_eq BITI BITI' -> binary_eq B1 B1' -> binary_eq B2 B2'
         -> binary_eq B3 B3' -> bit_eq BITO BITO' -> addc BITI B1 B2 B3 BITO
         -> addc BITI' B1' B2' B3' BITO' -> type.
- : addc_resp bit_eq_ binary_eq_ binary_eq_ binary_eq_ bit_eq_ D D.
add_wo_resp :
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3'
         -> bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> add_wo B1 B2 B3 BIT1 BIT2
         -> add_wo B1' B2' B3' BIT1' BIT2' -> type.
- : add_wo_resp binary_eq_ binary_eq_ binary_eq_ bit_eq_ bit_eq_ D D.
and_resp :
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3' -> and B1 B2 B3
         -> and B1' B2' B3' -> type.
and_resp_ : and_resp binary_eq_ binary_eq_ binary_eq_ D D.
binary_resp :
      nat_eq N1 N2
         -> Pi B1:binary N1. Pi B2:binary N2. binary_eq B1 B2 -> type.
binary_resp_ : binary_resp nat_eq_ B B binary_eq_.
binary_append_resp :
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3'
         -> binary_append B1 B2 B3 -> binary_append B1' B2' B3' -> type.
binary_append_resp_ : binary_append_resp binary_eq_ binary_eq_ binary_eq_ D D.
binary_neq_resp :
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_neq B1 B2
         -> binary_neq B1' B2' -> type.
binary_neq_resp_ : binary_neq_resp binary_eq_ binary_eq_ D D.
highbit_resp :
      binary_eq B1 B1' -> bit_eq BIT BIT' -> binary_eq B2 B2'
         -> highbit B1 BIT B2 -> highbit B1' BIT' B2' -> type.
- : highbit_resp binary_eq_ bit_eq_ binary_eq_ D D.
lowbit_resp :
      binary_eq B1 B1' -> bit_eq BIT BIT' -> binary_eq B2 B2'
         -> lowbit B1 BIT B2 -> lowbit B1' BIT' B2' -> type.
- : lowbit_resp binary_eq_ bit_eq_ binary_eq_ D D.
is_zero_resp :
      binary_eq B B' -> is_zero B -> is_zero B' -> type.
is_zero_resp_ : is_zero_resp binary_eq_ D D.
neg_resp :
      binary_eq B1 B1' -> binary_eq B2 B2' -> bit_eq BIT BIT' -> neg B1 B2 BIT
         -> neg B1' B2' BIT' -> type.
neg_resp_ : neg_resp binary_eq_ binary_eq_ bit_eq_ D D.
negc_resp :
      bit_eq BITI BITI' -> binary_eq B1 B1' -> binary_eq B2 B2'
         -> bit_eq BITO BITO' -> negc BITI B1 B2 BITO
         -> negc BITI' B1' B2' BITO' -> type.
- : negc_resp bit_eq_ binary_eq_ binary_eq_ bit_eq_ D D.
or_resp :
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3' -> or B1 B2 B3
         -> or B1' B2' B3' -> type.
or_resp_ : or_resp binary_eq_ binary_eq_ binary_eq_ D D.
represents_resp :
      nat_eq N N' -> binary_eq B B' -> represents N B -> represents N' B'
         -> type.
represents_resp_ : represents_resp nat_eq_ binary_eq_ D D.
times_resp :
      binary_eq B1 B1' -> nat_eq N N' -> binary_eq B2 B2' -> times B1 N B2
         -> times B1' N' B2' -> type.
times_resp_ : times_resp binary_eq_ nat_eq_ binary_eq_ D D.
xor_resp :
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3' -> xor B1 B2 B3
         -> xor B1' B2' B3' -> type.
xor_resp_ : xor_resp binary_eq_ binary_eq_ binary_eq_ D D.
xor_bit_resp :
      bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> bit_eq BIT3 BIT3'
         -> xor_bit BIT1 BIT2 BIT3 -> xor_bit BIT1' BIT2' BIT3' -> type.
- : xor_bit_resp bit_eq_ bit_eq_ bit_eq_ D D.
binary_eq_trans :
      binary_eq B1 B2 -> binary_eq B2 B3 -> binary_eq B1 B3 -> type.
- : binary_eq_trans binary_eq_ binary_eq_ binary_eq_.
binary_eq_implies_length_eq :
   Pi B1:binary N1. Pi B2:binary N2.
      binary_eq B1 B2 -> nat_eq N1 N2 -> type.
- : binary_eq_implies_length_eq B1 B1 binary_eq_ nat_eq_.
false_implies_is_zero : false -> is_zero B -> type.
false_implies_binary_eq :
   false -> Pi N:nat. Pi B1:binary N. Pi B2:binary N. binary_eq B1 B2 -> type.
false_implies_bit_eq :
   false -> Pi BIT1:bit. Pi BIT2:bit. bit_eq BIT1 BIT2 -> type.
can_addbit :
   Pi BT1:bit. Pi BT2:bit. Pi BT3:bit. Pi BT4:bit. Pi BT5:bit.
      addbit BT1 BT2 BT3 BT4 BT5 -> type.
can_addbit_000 : can_addbit zero zero zero zero zero addbit_000.
can_addbit_001 : can_addbit zero zero one' one' zero addbit_001.
can_addbit_010 : can_addbit zero one' zero one' zero addbit_010.
can_addbit_100 : can_addbit one' zero zero one' zero addbit_100.
can_addbit_011 : can_addbit zero one' one' zero one' addbit_011.
can_addbit_101 : can_addbit one' zero one' zero one' addbit_101.
can_addbit_110 : can_addbit one' one' zero zero one' addbit_110.
can_addbit_111 : can_addbit one' one' one' one' one' addbit_111.
can_addbit' :
   Pi BT1:bit. Pi BT2:bit. Pi BT3:bit. Pi BT4:bit. Pi BT5:bit.
      addbit BT1 BT2 BT3 BT4 BT5 -> type.
can_addbit'_000 : can_addbit' zero zero zero zero zero addbit_000.
can_addbit'_001 : can_addbit' zero zero one' one' zero addbit_001.
can_addbit'_010 : can_addbit' zero one' zero one' zero addbit_010.
can_addbit'_100 : can_addbit' one' zero zero one' zero addbit_100.
can_addbit'_011 : can_addbit' zero one' one' zero one' addbit_011.
can_addbit'_101 : can_addbit' one' zero one' zero one' addbit_101.
can_addbit'_110 : can_addbit' one' one' zero zero one' addbit_110.
can_addbit'_111 : can_addbit' one' one' one' one' one' addbit_111.
can_flipbit : Pi BIT:bit. Pi BIT':bit. flipbit BIT BIT' -> type.
can_flipbit_zero : can_flipbit zero one' flipbit_zero.
can_flipbit_one : can_flipbit one' zero flipbit_one.
can_addc :
   Pi BIT:bit. Pi B1:binary N. Pi B2:binary N. Pi B3:binary N.
      Pi BIT':bit. addc BIT B1 B2 B3 BIT' -> type.
-nil : can_addc BIT nil$ nil$ nil$ BIT addc_nil.
-cons :
   can_addc CARRY_IN ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3) CARRY (addc_cons D' D)
      <- can_addbit BIT1 BIT2 CARRY_IN BIT3 CARRY_OUT D
      <- can_addc CARRY_OUT B1 B2 B3 CARRY D'.
can_add :
   Pi B1:binary N. Pi B2:binary N. Pi B3:binary N. Pi BIT:bit.
      add B1 B2 B3 BIT -> type.
- : can_add B1 B2 B3 BIT (add_ D) <- can_addc zero B1 B2 B3 BIT D.
can_addc' :
   Pi BIT:bit. Pi B1:binary N. Pi B2:binary N. Pi B3:binary N.
      Pi BIT':bit. addc BIT B1 B2 B3 BIT' -> type.
-nil : can_addc' BIT nil$ nil$ nil$ BIT addc_nil.
-cons :
   can_addc' CARRY_IN ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3) CARRY (addc_cons D' D)
      <- can_addbit' BIT1 BIT2 CARRY_IN BIT3 CARRY_OUT D
      <- can_addc' CARRY_OUT B1 B2 B3 CARRY D'.
can_add' :
   Pi B1:binary N. Pi B2:binary N. Pi B3:binary N. Pi BIT:bit.
      add B1 B2 B3 BIT -> type.
- : can_add' B1 B2 B3 BIT (add_ D) <- can_addc' zero B1 B2 B3 BIT D.
can_negc :
   Pi BIT:bit. Pi B1:binary N. Pi B2:binary N. Pi BIT':bit.
      negc BIT B1 B2 BIT' -> type.
-nil : can_negc BIT nil$ nil$ BIT negc_nil.
-cons :
   can_negc CARRY_IN ($ BIT B) ($ BIT'' B') CARRY (negc_cons D3 D2 D1)
      <- can_flipbit BIT BIT' D1
      <- can_addbit zero BIT' CARRY_IN BIT'' CARRY_OUT D2
      <- can_negc CARRY_OUT B B' CARRY D3.
can_neg :
   Pi B1:binary N. Pi B2:binary N. Pi BIT:bit. neg B1 B2 BIT -> type.
- : can_neg B1 B2 BIT (neg_ D) <- can_negc one' B1 B2 BIT D.
can_negc_nocarryin :
   Pi B1:binary N. Pi B2:binary N. negc zero B1 B2 zero -> type.
-nil : can_negc_nocarryin nil$ nil$ negc_nil.
-zero :
   can_negc_nocarryin ($ zero B) ($ one' B')
      (negc_cons D addbit_010 flipbit_zero)
      <- can_negc_nocarryin B B' D.
-one :
   can_negc_nocarryin ($ one' B) ($ zero B')
      (negc_cons D addbit_000 flipbit_one)
      <- can_negc_nocarryin B B' D.
can_negc_nonzero :
   Pi B1:binary N. Pi B2:binary N.
      is_nonzero B1 -> negc one' B1 B2 zero -> type.
-zero :
   can_negc_nonzero ($ zero B) ($ zero B') (is_nonzero_zero D)
      (negc_cons D' addbit_011 flipbit_zero)
      <- can_negc_nonzero B B' D D'.
-one :
   can_negc_nonzero ($ one' B) ($ one' B') is_nonzero_one
      (negc_cons D addbit_001 flipbit_one)
      <- can_negc_nocarryin B B' D.
can_neg_nonzero :
   Pi B1:binary N. Pi B2:binary N.
      is_nonzero B1 -> neg B1 B2 zero -> type.
- : can_neg_nonzero B1 B2 D (neg_ D') <- can_negc_nonzero B1 B2 D D'.
can_zero : Pi N:nat. Pi B:binary N. is_zero B -> type.
can_zero_nil : can_zero z nil$ is_zero_nil.
can_zero_cons : can_zero (s N) ($ zero B) (is_zero_cons D) <- can_zero N B D.
can_one : Pi N:nat. Pi B:binary (s N). is_one B -> type.
- : can_one N ($ one' B) (is_one_ D) <- can_zero N B D.
can_negone : Pi N:nat. Pi B:binary (s N). is_negone B -> type.
can_negone_sing : can_negone z ($ one' nil$) is_negone_sing.
can_negone_cons :
   can_negone (s N) ($ one' B) (is_negone_cons D) <- can_negone N B D.
can_highbit :
   Pi B:binary (s N). Pi BIT:bit. Pi B':binary N.
      highbit B BIT B' -> type.
-ing : can_highbit ($ BIT nil$) BIT nil$ highbit_sing.
-cons :
   can_highbit ($ BIT B) HIGHBIT ($ BIT B') (highbit_cons Dhb)
      <- can_highbit B HIGHBIT B' Dhb.
can_highbit' :
   Pi BIT:bit. Pi B:binary N1.
      highbit B' BIT B -> type.
-ing : can_highbit' BIT nil$ highbit_sing.
-cons :
   can_highbit' BIT ($ BIT1 B) (highbit_cons Dhb) <- can_highbit' BIT B Dhb.
can_lowbit :
   Pi B:binary (s N). Pi BIT:bit. Pi B':binary N.
      lowbit B BIT B' -> type.
- : can_lowbit ($ BIT B) BIT B lowbit_.
maybe_zero : binary N1 -> type.
maybe_zero_yes : maybe_zero B <- is_zero B.
maybe_zero_no : maybe_zero B <- is_nonzero B.
compare_for_zero : Pi B:binary N1. maybe_zero B -> type.
compare_for_zero* :
   maybe_zero B -> maybe_zero ($ zero B) -> type.
compare_for_zero*_yes :
   compare_for_zero* (maybe_zero_yes D) (maybe_zero_yes (is_zero_cons D)).
compare_for_zero*_no :
   compare_for_zero* (maybe_zero_no D) (maybe_zero_no (is_nonzero_zero D)).
compare_for_zero_nil : compare_for_zero nil$ (maybe_zero_yes is_zero_nil).
compare_for_zero_zero :
   compare_for_zero ($ zero B) D'
      <- compare_for_zero B D
      <- compare_for_zero* D D'.
compare_for_zero_one :
   compare_for_zero ($ one' B1) (maybe_zero_no is_nonzero_one).
subbit_implies_addbit :
      subbit BIT1 BIT2 BORROWIN BIT3 BORROWOUT
         -> addbit BIT3 BIT2 BORROWIN BIT1 BORROWOUT -> type.
-000 : subbit_implies_addbit subbit_000 addbit_000.
-001 : subbit_implies_addbit subbit_001 addbit_101.
-010 : subbit_implies_addbit subbit_010 addbit_110.
-011 : subbit_implies_addbit subbit_011 addbit_011.
-100 : subbit_implies_addbit subbit_100 addbit_100.
-101 : subbit_implies_addbit subbit_101 addbit_001.
-110 : subbit_implies_addbit subbit_110 addbit_010.
-111 : subbit_implies_addbit subbit_111 addbit_111.
addbit_commute :
      addbit B1 B2 B3 B4 B5 -> addbit B2 B1 B3 B4 B5 -> type.
addbit_commute_000 : addbit_commute addbit_000 addbit_000.
addbit_commute_001 : addbit_commute addbit_001 addbit_001.
addbit_commute_010 : addbit_commute addbit_010 addbit_100.
addbit_commute_011 : addbit_commute addbit_011 addbit_101.
addbit_commute_100 : addbit_commute addbit_100 addbit_010.
addbit_commute_101 : addbit_commute addbit_101 addbit_011.
addbit_commute_110 : addbit_commute addbit_110 addbit_110.
addbit_commute_111 : addbit_commute addbit_111 addbit_111.
addbit_invert :
      addbit B1 B2 B3 B4 B5 -> flipbit B1 B1' -> flipbit B3 B3'
         -> flipbit B5 B5' -> addbit B1' B4 B3' B2 B5' -> type.
addbit_invert_000 :
   addbit_invert addbit_000 flipbit_zero flipbit_zero flipbit_zero addbit_101.
addbit_invert_001 :
   addbit_invert addbit_001 flipbit_zero flipbit_one flipbit_zero addbit_110.
addbit_invert_010 :
   addbit_invert addbit_010 flipbit_zero flipbit_zero flipbit_zero addbit_111.
addbit_invert_011 :
   addbit_invert addbit_011 flipbit_zero flipbit_one flipbit_one addbit_100.
addbit_invert_100 :
   addbit_invert addbit_100 flipbit_one flipbit_zero flipbit_zero addbit_011.
addbit_invert_101 :
   addbit_invert addbit_101 flipbit_one flipbit_one flipbit_one addbit_000.
addbit_invert_110 :
   addbit_invert addbit_110 flipbit_one flipbit_zero flipbit_one addbit_001.
addbit_invert_111 :
   addbit_invert addbit_111 flipbit_one flipbit_one flipbit_one addbit_010.
addbit_invert' :
      addbit B1 B2 B3 B4 B5 -> flipbit B2 B2' -> flipbit B4 B4'
         -> addbit B1 B4' B3 B2' B5 -> type.
addbit_invert'_000 :
   addbit_invert' addbit_000 flipbit_zero flipbit_zero addbit_010.
addbit_invert'_001 :
   addbit_invert' addbit_001 flipbit_zero flipbit_one addbit_001.
addbit_invert'_010 :
   addbit_invert' addbit_010 flipbit_one flipbit_one addbit_000.
addbit_invert'_011 :
   addbit_invert' addbit_011 flipbit_one flipbit_zero addbit_011.
addbit_invert'_100 :
   addbit_invert' addbit_100 flipbit_zero flipbit_one addbit_100.
addbit_invert'_101 :
   addbit_invert' addbit_101 flipbit_zero flipbit_zero addbit_111.
addbit_invert'_110 :
   addbit_invert' addbit_110 flipbit_one flipbit_zero addbit_110.
addbit_invert'_111 :
   addbit_invert' addbit_111 flipbit_one flipbit_one addbit_101.
flipbit_reverse :
   flipbit BIT BIT' -> flipbit BIT' BIT -> type.
flipbit_reverse_zero : flipbit_reverse flipbit_zero flipbit_one.
flipbit_reverse_one : flipbit_reverse flipbit_one flipbit_zero.
addbit_zero : Pi BIT:bit. addbit zero zero BIT BIT zero -> type.
addbit_zero_zero : addbit_zero zero addbit_000.
addbit_zero_one : addbit_zero one' addbit_001.
bit_eq_contradict : bit_eq one' zero -> false -> type.
addbit_fun1 :
      addbit B1 B2 B3 B4 B5 -> addbit B1' B2 B3 B4 B5' -> bit_eq B1 B1'
         -> bit_eq B5 B5' -> type.
addbit_fun1_000 : addbit_fun1 addbit_000 addbit_000 bit_eq_ bit_eq_.
addbit_fun1_001 : addbit_fun1 addbit_001 addbit_001 bit_eq_ bit_eq_.
addbit_fun1_010 : addbit_fun1 addbit_010 addbit_010 bit_eq_ bit_eq_.
addbit_fun1_011 : addbit_fun1 addbit_011 addbit_011 bit_eq_ bit_eq_.
addbit_fun1_100 : addbit_fun1 addbit_100 addbit_100 bit_eq_ bit_eq_.
addbit_fun1_101 : addbit_fun1 addbit_101 addbit_101 bit_eq_ bit_eq_.
addbit_fun1_110 : addbit_fun1 addbit_110 addbit_110 bit_eq_ bit_eq_.
addbit_fun1_111 : addbit_fun1 addbit_111 addbit_111 bit_eq_ bit_eq_.
addbit_fun3 :
      addbit B1 B2 B3 B4 B5 -> addbit B1 B2 B3 B4' B5' -> bit_eq B4 B4'
         -> bit_eq B5 B5' -> type.
addbit_fun3_000 : addbit_fun3 addbit_000 addbit_000 bit_eq_ bit_eq_.
addbit_fun3_001 : addbit_fun3 addbit_001 addbit_001 bit_eq_ bit_eq_.
addbit_fun3_010 : addbit_fun3 addbit_010 addbit_010 bit_eq_ bit_eq_.
addbit_fun3_011 : addbit_fun3 addbit_011 addbit_011 bit_eq_ bit_eq_.
addbit_fun3_100 : addbit_fun3 addbit_100 addbit_100 bit_eq_ bit_eq_.
addbit_fun3_101 : addbit_fun3 addbit_101 addbit_101 bit_eq_ bit_eq_.
addbit_fun3_110 : addbit_fun3 addbit_110 addbit_110 bit_eq_ bit_eq_.
addbit_fun3_111 : addbit_fun3 addbit_111 addbit_111 bit_eq_ bit_eq_.
addc_fun1 :
      addc BITI B1 B2 B3 BITO -> addc BITI B1' B2 B3 BITO' -> bit_eq BITO BITO'
         -> binary_eq B1 B1' -> type.
-nil : addc_fun1 addc_nil addc_nil bit_eq_ binary_eq_.
-cons :
   addc_fun1 (addc_cons D2 D1) (addc_cons D2' D1') Deq3 Deq
      <- addbit_fun1 D1 D1' Deq1 Deq2
      <- addc_resp Deq2 binary_eq_ binary_eq_ binary_eq_ bit_eq_ D2 D2''
      <- addc_fun1 D2'' D2' Deq3 Deq4
      <- binary_eq_cons Deq1 Deq4 Deq.
add_fun1 :
      add B1 B2 B3 BIT -> add B1' B2 B3 BIT' -> bit_eq BIT BIT'
         -> binary_eq B1 B1' -> type.
- : add_fun1 (add_ D) (add_ D') Deqbit Deq <- addc_fun1 D D' Deqbit Deq.
addc_fun3 :
      addc BITI B1 B2 B3 BITO -> addc BITI B1 B2 B3' BITO' -> bit_eq BITO BITO'
         -> binary_eq B3 B3' -> type.
-nil : addc_fun3 addc_nil addc_nil bit_eq_ binary_eq_.
-cons :
   addc_fun3 (addc_cons D2 D1) (addc_cons D2' D1') Deq3 Deq
      <- addbit_fun3 D1 D1' Deq1 Deq2
      <- addc_resp Deq2 binary_eq_ binary_eq_ binary_eq_ bit_eq_ D2 D2''
      <- addc_fun3 D2'' D2' Deq3 Deq4
      <- binary_eq_cons Deq1 Deq4 Deq.
add_fun3 :
      add B1 B2 B3 BIT -> add B1 B2 B3' BIT' -> bit_eq BIT BIT'
         -> binary_eq B3 B3' -> type.
- : add_fun3 (add_ D) (add_ D') Deqbit Deq <- addc_fun3 D D' Deqbit Deq.
is_zero_fun :
      is_zero B -> is_zero B' -> binary_eq B B' -> type.
is_zero_fun_z : is_zero_fun is_zero_nil is_zero_nil binary_eq_.
is_zero_fun_s :
   is_zero_fun (is_zero_cons D1) (is_zero_cons D2) D'
      <- is_zero_fun D1 D2 D
      <- binary_eq_cons bit_eq_ D D'.
binary_append_fun :
      binary_append B1 B2 B3 -> binary_append B1 B2 B3' -> binary_eq B3 B3'
         -> type.
binary_append_fun_nil :
   binary_append_fun binary_append_nil binary_append_nil binary_eq_.
binary_append_fun_cons :
   binary_append_fun (binary_append_cons D1) (binary_append_cons D2) D'
      <- binary_append_fun D1 D2 D
      <- binary_eq_cons bit_eq_ D D'.
binary_append'_fun :
      binary_append B1 B2 B3 -> binary_append B1' B2' B3 -> binary_eq B1 B1'
         -> binary_eq B2 B2' -> nat_eq N N' -> type.
-nil :
   binary_append'_fun binary_append_nil binary_append_nil binary_eq_ binary_eq_
      nat_eq_.
-cons :
   binary_append'_fun (binary_append_cons D1) (binary_append_cons D2) Dbeq1
      Dbeq2 Dneq
      <- binary_append'_fun D1 D2 Dbeq1 Dbeq2' Dneq
      <- binary_eq_cons bit_eq_ Dbeq2' Dbeq2.
is_one_fun :
      is_one B -> is_one B' -> binary_eq B B' -> type.
- :
   is_one_fun (is_one_ D) (is_one_ D') Deq'
      <- is_zero_fun D D' Deq
      <- binary_eq_cons bit_eq_ Deq Deq'.
is_negone_fun :
      is_negone B1 -> is_negone B2 -> binary_eq B1 B2 -> type.
is_negone_fun_sing : is_negone_fun is_negone_sing is_negone_sing binary_eq_.
is_negone_fun_cons :
   is_negone_fun (is_negone_cons D1) (is_negone_cons D2) D'
      <- is_negone_fun D1 D2 D
      <- binary_eq_cons bit_eq_ D D'.
represents_fun2 :
      represents N B -> represents N B' -> binary_eq B B' -> type.
represents_fun2_z :
   represents_fun2 (represents_z D1) (represents_z D2) D <- is_zero_fun D1 D2 D.
represents_fun2_s :
   represents_fun2 (represents_s Dadd1 Dio1 Drep1)
      (represents_s Dadd2 Dio2 Drep2) D
      <- represents_fun2 Drep1 Drep2 Deq1
      <- is_one_fun Dio1 Dio2 Deq2
      <- add_resp Deq1 Deq2 binary_eq_ bit_eq_ Dadd1 Dadd1'
      <- add_fun3 Dadd1' Dadd2 X1 D.
flipbit_fun :
      flipbit BIT BIT1 -> flipbit BIT BIT2 -> bit_eq BIT1 BIT2 -> type.
- : flipbit_fun flipbit_zero flipbit_zero bit_eq_.
-o' : flipbit_fun flipbit_one flipbit_one bit_eq_.
negc_fun :
      negc BITI B B1 BIT1 -> negc BITI B B2 BIT2 -> binary_eq B1 B2
         -> bit_eq BIT1 BIT2 -> type.
-nil : negc_fun negc_nil negc_nil binary_eq_ bit_eq_.
-cons :
   negc_fun (negc_cons D3 D2 D1) (negc_cons D3' D2' D1') Deq Deq5
      <- flipbit_fun D1 D1' Deq1
      <- addbit_resp bit_eq_ Deq1 bit_eq_ bit_eq_ bit_eq_ D2 D2''
      <- addbit_fun3 D2'' D2' Deq2 Deq3
      <- negc_resp Deq3 binary_eq_ binary_eq_ bit_eq_ D3 D3''
      <- negc_fun D3'' D3' Deq4 Deq5
      <- binary_eq_cons Deq2 Deq4 Deq.
neg_fun :
      neg B B1 BIT1 -> neg B B2 BIT2 -> binary_eq B1 B2 -> bit_eq BIT1 BIT2
         -> type.
- : neg_fun (neg_ D1) (neg_ D2) Deq Deqbit <- negc_fun D1 D2 Deq Deqbit.
times_fun3 :
      times B1 N B2 -> times B1 N B3 -> binary_eq B2 B3 -> type.
- :
   times_fun3 (times_z Diz1) (times_z Diz2) Dbeq <- is_zero_fun Diz1 Diz2 Dbeq.
- :
   times_fun3 (times_s Dadd1 Daddt1) (times_s Dadd2 Daddt2) Dbeq2
      <- times_fun3 Daddt1 Daddt2 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd1 Dadd1'
      <- add_fun3 Dadd1' Dadd2 X1 Dbeq2.
highbit_fun :
      highbit B BIT1 B1 -> highbit B BIT2 B2 -> bit_eq BIT1 BIT2
         -> binary_eq B1 B2 -> type.
-ing : highbit_fun highbit_sing highbit_sing bit_eq_ binary_eq_.
-cons :
   highbit_fun (highbit_cons Dhb1) (highbit_cons Dhb2) Deqbit Deq'
      <- highbit_fun Dhb1 Dhb2 Deqbit Deq
      <- binary_eq_cons bit_eq_ Deq Deq'.
highbit_fun1 :
      highbit B1 BIT B -> highbit B2 BIT B -> binary_eq B1 B2 -> type.
-ing : highbit_fun1 highbit_sing highbit_sing binary_eq_.
-cons :
   highbit_fun1 (highbit_cons Dhb1) (highbit_cons Dhb2) Deq'
      <- highbit_fun1 Dhb1 Dhb2 Deq
      <- binary_eq_cons bit_eq_ Deq Deq'.
lowbit_fun :
      lowbit B BIT1 B1 -> lowbit B BIT2 B2 -> bit_eq BIT1 BIT2
         -> binary_eq B1 B2 -> type.
- : lowbit_fun lowbit_ lowbit_ bit_eq_ binary_eq_.
lowbit_fun1 :
      lowbit B1 BIT B -> lowbit B2 BIT B -> binary_eq B1 B2 -> type.
- : lowbit_fun1 lowbit_ lowbit_ binary_eq_.
subc_implies_addc :
      subc BITI B1 B2 B3 BITO -> addc BITI B3 B2 B1 BITO -> type.
-nil : subc_implies_addc subc_nil addc_nil.
-cons :
   subc_implies_addc (subc_cons D2 D1) (addc_cons D2' D1')
      <- subbit_implies_addbit D1 D1'
      <- subc_implies_addc D2 D2'.
sub_implies_add :
      sub B1 B2 B3 BIT -> add B3 B2 B1 BIT -> type.
- : sub_implies_add (sub_ D) (add_ D') <- subc_implies_addc D D'.
addc_commute :
      addc CIN B1 B2 B3 COUT -> addc CIN B2 B1 B3 COUT -> type.
-nil : addc_commute addc_nil addc_nil.
-cons :
   addc_commute (addc_cons D2 D1) (addc_cons D2' D1')
      <- addbit_commute D1 D1'
      <- addc_commute D2 D2'.
add_commute :
      add B1 B2 B3 CARRY -> add B2 B1 B3 CARRY -> type.
- : add_commute (add_ D) (add_ D') <- addc_commute D D'.
addc_ident :
   Pi B:binary N.
      is_zero Bzero -> addc zero Bzero B B zero -> type.
-nil : addc_ident nil$ is_zero_nil addc_nil.
-cons0 :
   addc_ident ($ zero B) (is_zero_cons Diz) (addc_cons Daddc addbit_000)
      <- addc_ident B Diz Daddc.
-cons1 :
   addc_ident ($ one' B) (is_zero_cons Diz) (addc_cons Daddc addbit_010)
      <- addc_ident B Diz Daddc.
addc_ident' :
   Pi B:binary N.
      is_zero Bzero -> addc zero B Bzero B zero -> type.
- : addc_ident' B Diz Dadd' <- addc_ident B Diz Dadd <- addc_commute Dadd Dadd'.
add_ident :
   Pi B:binary N.
      is_zero Bzero -> add Bzero B B zero -> type.
- : add_ident B Diz (add_ D) <- addc_ident B Diz D.
add_ident' :
   Pi B:binary N.
      is_zero Bzero -> add B Bzero B zero -> type.
- : add_ident' B2 Diz Dadd' <- add_ident B2 Diz Dadd <- add_commute Dadd Dadd'.
addc_carry_nonzero :
      addc zero B1 B2 B3 one' -> is_nonzero B1 -> is_nonzero B2 -> type.
-11 :
   addc_carry_nonzero (addc_cons X1 addbit_110) is_nonzero_one is_nonzero_one.
-01 :
   addc_carry_nonzero (addc_cons D addbit_010) (is_nonzero_zero D1)
      is_nonzero_one
      <- addc_carry_nonzero D D1 X1.
-10 :
   addc_carry_nonzero (addc_cons D addbit_100) is_nonzero_one
      (is_nonzero_zero D2)
      <- addc_carry_nonzero D X1 D2.
-00 :
   addc_carry_nonzero (addc_cons D addbit_000) (is_nonzero_zero D1)
      (is_nonzero_zero D2)
      <- addc_carry_nonzero D D1 D2.
add_carry_nonzero :
      add B1 B2 B3 one' -> is_nonzero B1 -> is_nonzero B2 -> type.
- : add_carry_nonzero (add_ D) D1 D2 <- addc_carry_nonzero D D1 D2.
negc_carry_zero :
      negc BIT B B' one' -> is_zero B -> binary_eq B B' -> bit_eq BIT one'
         -> type.
-nil : negc_carry_zero negc_nil is_zero_nil binary_eq_ bit_eq_.
-0-1 :
   negc_carry_zero (negc_cons Dneg addbit_011 flipbit_zero) (is_zero_cons Diz)
      Deq' bit_eq_
      <- negc_carry_zero Dneg Diz Deq Deqbit
      <- binary_eq_cons bit_eq_ Deq Deq'.
negc_carry_zero| :
      bit_eq zero one'
         -> Pi B:binary N. Pi B':binary N. Pi BIT:bit.
                is_zero B -> binary_eq B B' -> bit_eq BIT one' -> type.
-1-1 :
   negc_carry_zero (negc_cons Dneg addbit_001 flipbit_one) D1 D2 D3
      <- negc_carry_zero Dneg X1 X2 Deq
      <- negc_carry_zero| Deq ($ one' B1) ($ one' B2) one' D1 D2 D3.
-0-0 :
   negc_carry_zero (negc_cons Dneg addbit_010 flipbit_zero) D1 D2 D3
      <- negc_carry_zero Dneg X1 X2 Deq
      <- negc_carry_zero| Deq ($ zero B1) ($ one' B2) zero D1 D2 D3.
-1-1 :
   negc_carry_zero (negc_cons Dneg addbit_000 flipbit_one) D1 D2 D3
      <- negc_carry_zero Dneg X1 X2 Deq
      <- negc_carry_zero| Deq ($ one' B1) ($ zero B2) zero D1 D2 D3.
neg_carry_zero :
      neg B B' one' -> is_zero B -> binary_eq B B' -> type.
- : neg_carry_zero (neg_ D) Diz Deq <- negc_carry_zero D Diz Deq X1.
negc_nocarry_nonzero :
      negc one' B B' zero -> is_nonzero B -> is_nonzero B' -> type.
-0 :
   negc_nocarry_nonzero (negc_cons Dneg addbit_011 flipbit_zero)
      (is_nonzero_zero Dnz1) (is_nonzero_zero Dnz2)
      <- negc_nocarry_nonzero Dneg Dnz1 Dnz2.
-1 :
   negc_nocarry_nonzero (negc_cons X1 addbit_001 flipbit_one) is_nonzero_one
      is_nonzero_one.
neg_nocarry_nonzero :
      neg B B' zero -> is_nonzero B -> is_nonzero B' -> type.
- : neg_nocarry_nonzero (neg_ D) D1 D2 <- negc_nocarry_nonzero D D1 D2.
negc_zero : is_zero B -> negc one' B B one' -> type.
-nil : negc_zero is_zero_nil negc_nil.
-cons :
   negc_zero (is_zero_cons Diz) (negc_cons Dneg addbit_011 flipbit_zero)
      <- negc_zero Diz Dneg.
neg_zero : is_zero B -> neg B B one' -> type.
- : neg_zero Diz (neg_ D) <- negc_zero Diz D.
negc_zero_nocarryin :
      is_zero B -> is_negone B' -> negc zero B B' zero -> type.
-ing :
   negc_zero_nocarryin (is_zero_cons is_zero_nil) is_negone_sing
      (negc_cons negc_nil addbit_010 flipbit_zero).
-cons :
   negc_zero_nocarryin (is_zero_cons Diz) (is_negone_cons Dino)
      (negc_cons Dneg addbit_010 flipbit_zero)
      <- negc_zero_nocarryin Diz Dino Dneg.
addc_invert01 :
      addc zero B1 B2 B3 CARRY -> negc one' B1 B1' zero -> flipbit CARRY CARRY'
         -> addc zero B1' B3 B2 CARRY' -> type.
addc_invert00 :
      addc zero B1 B2 B3 CARRY -> negc zero B1 B1' zero -> flipbit CARRY CARRY'
         -> addc one' B1' B3 B2 CARRY' -> type.
addc_invert10 :
      addc one' B1 B2 B3 CARRY -> negc zero B1 B1' zero -> flipbit CARRY CARRY'
         -> addc zero B1' B3 B2 CARRY' -> type.
-00 :
   addc_invert01 (addc_cons Dadd addbit_000)
      (negc_cons Dneg addbit_011 flipbit_zero) Dflipbit
      (addc_cons Dadd' addbit_000)
      <- addc_invert01 Dadd Dneg Dflipbit Dadd'.
-01 :
   addc_invert01 (addc_cons Dadd addbit_010)
      (negc_cons Dneg addbit_011 flipbit_zero) Dflipbit
      (addc_cons Dadd' addbit_010)
      <- addc_invert01 Dadd Dneg Dflipbit Dadd'.
-10 :
   addc_invert01 (addc_cons Dadd addbit_100)
      (negc_cons Dneg addbit_001 flipbit_one) Dflipbit
      (addc_cons Dadd' addbit_110)
      <- addc_invert00 Dadd Dneg Dflipbit Dadd'.
-11 :
   addc_invert01 (addc_cons Dadd addbit_110)
      (negc_cons Dneg addbit_001 flipbit_one) Dflipbit
      (addc_cons Dadd' addbit_100)
      <- addc_invert10 Dadd Dneg Dflipbit Dadd'.
-nil : addc_invert00 addc_nil negc_nil flipbit_zero addc_nil.
-00 :
   addc_invert00 (addc_cons Dadd addbit_000)
      (negc_cons Dneg addbit_010 flipbit_zero) Dflipbit
      (addc_cons Dadd' addbit_101)
      <- addc_invert00 Dadd Dneg Dflipbit Dadd'.
-01 :
   addc_invert00 (addc_cons Dadd addbit_010)
      (negc_cons Dneg addbit_010 flipbit_zero) Dflipbit
      (addc_cons Dadd' addbit_111)
      <- addc_invert00 Dadd Dneg Dflipbit Dadd'.
-10 :
   addc_invert00 (addc_cons Dadd addbit_100)
      (negc_cons Dneg addbit_000 flipbit_one) Dflipbit
      (addc_cons Dadd' addbit_011)
      <- addc_invert00 Dadd Dneg Dflipbit Dadd'.
-11 :
   addc_invert00 (addc_cons Dadd addbit_110)
      (negc_cons Dneg addbit_000 flipbit_one) Dflipbit
      (addc_cons Dadd' addbit_001)
      <- addc_invert10 Dadd Dneg Dflipbit Dadd'.
-nil : addc_invert10 addc_nil negc_nil flipbit_one addc_nil.
-00 :
   addc_invert10 (addc_cons Dadd addbit_001)
      (negc_cons Dneg addbit_010 flipbit_zero) Dflipbit
      (addc_cons Dadd' addbit_110)
      <- addc_invert00 Dadd Dneg Dflipbit Dadd'.
-01 :
   addc_invert10 (addc_cons Dadd addbit_011)
      (negc_cons Dneg addbit_010 flipbit_zero) Dflipbit
      (addc_cons Dadd' addbit_100)
      <- addc_invert10 Dadd Dneg Dflipbit Dadd'.
-10 :
   addc_invert10 (addc_cons Dadd addbit_101)
      (negc_cons Dneg addbit_000 flipbit_one) Dflipbit
      (addc_cons Dadd' addbit_000)
      <- addc_invert10 Dadd Dneg Dflipbit Dadd'.
-11 :
   addc_invert10 (addc_cons Dadd addbit_111)
      (negc_cons Dneg addbit_000 flipbit_one) Dflipbit
      (addc_cons Dadd' addbit_010)
      <- addc_invert10 Dadd Dneg Dflipbit Dadd'.
add_invert :
      add B1 B2 B3 CARRY -> neg B1 B1' zero -> flipbit CARRY CARRY'
         -> add B1' B3 B2 CARRY' -> type.
- :
   add_invert (add_ Dadd) (neg_ Dneg) Dflipbit (add_ Dadd')
      <- addc_invert01 Dadd Dneg Dflipbit Dadd'.
add_carry_invert :
      add B1 B2 B3 one' -> neg B1 B1' zero -> add B1' B3 B2 zero -> type.
- :
   add_carry_invert Dadd Dneg Dadd'
      <- add_carry_nonzero Dadd Dinz X1
      <- can_neg_nonzero B1 B1' Dinz Dneg
      <- add_invert Dadd Dneg flipbit_one Dadd'.
negc_reverse :
      negc BITI B1 B2 BITO -> negc BITI B2 B1 BITO -> type.
-nil : negc_reverse negc_nil negc_nil.
-cons :
   negc_reverse (negc_cons Dneg Daddbit Dflipbit)
      (negc_cons Dneg' Daddbit' Dflipbit'')
      <- flipbit_reverse Dflipbit Dflipbit'
      <- can_flipbit B7 B9 Dflipbit''
      <- addbit_invert' Daddbit Dflipbit' Dflipbit'' Daddbit'
      <- negc_reverse Dneg Dneg'.
neg_reverse :
      neg B1 B2 BIT -> neg B2 B1 BIT -> type.
- : neg_reverse (neg_ D) (neg_ D') <- negc_reverse D D'.
addc_zero_sum_carryin :
      addc one' B1 B2 B3 zero -> is_zero B3 -> false -> type.
-01 :
   addc_zero_sum_carryin (addc_cons Dadd addbit_011) (is_zero_cons Diz) Dfalse
      <- addc_zero_sum_carryin Dadd Diz Dfalse.
-10 :
   addc_zero_sum_carryin (addc_cons Dadd addbit_101) (is_zero_cons Diz) Dfalse
      <- addc_zero_sum_carryin Dadd Diz Dfalse.
addc_zero_sum :
      addc zero B1 B2 B3 zero -> is_zero B1 -> is_zero B2 -> is_zero B3 -> type.
-nil : addc_zero_sum addc_nil is_zero_nil is_zero_nil X1.
-00 :
   addc_zero_sum (addc_cons Dadd addbit_000) (is_zero_cons D1) (is_zero_cons D2)
      (is_zero_cons D3)
      <- addc_zero_sum Dadd D1 D2 D3.
-11 :
   addc_zero_sum (addc_cons Dadd addbit_110) D1 D2 (is_zero_cons D3)
      <- addc_zero_sum_carryin Dadd D3 Dfalse
      <- false_implies_is_zero Dfalse D1
      <- false_implies_is_zero Dfalse D2.
add_zero_sum :
      add B1 B2 B3 zero -> is_zero B1 -> is_zero B2 -> is_zero B3 -> type.
- : add_zero_sum (add_ D) D1 D2 D3 <- addc_zero_sum D D1 D2 D3.
addc_negone_carry' :
      is_negone B1 -> addc one' B1 B2 B3 one' -> type.
-ing0 : addc_negone_carry' is_negone_sing (addc_cons addc_nil addbit_101).
-ing1 : addc_negone_carry' is_negone_sing (addc_cons addc_nil addbit_111).
-cons0 :
   addc_negone_carry' (is_negone_cons D) (addc_cons D' addbit_101)
      <- addc_negone_carry' D D'.
-cons1 :
   addc_negone_carry' (is_negone_cons D) (addc_cons D' addbit_111)
      <- addc_negone_carry' D D'.
addc_negone_carry :
      is_negone B1 -> is_nonzero B2 -> addc zero B1 B2 B3 one' -> type.
-ing :
   addc_negone_carry is_negone_sing is_nonzero_one
      (addc_cons addc_nil addbit_110).
-cons0 :
   addc_negone_carry (is_negone_cons Dino) (is_nonzero_zero Dinz)
      (addc_cons Dadd addbit_100)
      <- addc_negone_carry Dino Dinz Dadd.
-cons1 :
   addc_negone_carry (is_negone_cons Dino) is_nonzero_one
      (addc_cons Dadd addbit_110)
      <- addc_negone_carry' Dino Dadd.
add_negone_carry :
      is_negone B1 -> is_nonzero B2 -> add B1 B2 B3 one' -> type.
- : add_negone_carry Dino Dinz (add_ Dadd) <- addc_negone_carry Dino Dinz Dadd.
one_is_nonzero : is_one B -> is_nonzero B -> type.
- : one_is_nonzero (is_one_ X1) is_nonzero_one.
zero_nonzero_contradict :
      binary_eq B B' -> is_zero B -> is_nonzero B' -> false -> type.
- :
   zero_nonzero_contradict binary_eq_ (is_zero_cons D1) (is_nonzero_zero D2) D
      <- zero_nonzero_contradict binary_eq_ D1 D2 D.
add_nonzero_sum :
      add B1 B2 B3 zero -> is_nonzero B1 -> is_nonzero B3 -> type.
add_nonzero_sum_| :
      maybe_zero B3 -> add B1 B2 B3 zero -> is_nonzero B1 -> is_nonzero B3
         -> type.
add_nonzero_sum_|_zero| :
   Pi B. false -> is_nonzero B -> type.
add_nonzero_sum_ :
   add_nonzero_sum Dadd Din D
      <- compare_for_zero B3 Dmz
      <- add_nonzero_sum_| Dmz Dadd Din D.
add_nonzero_sum_|_non : add_nonzero_sum_| (maybe_zero_no Din) X1 X2 Din.
add_nonzero_sum_|_zero :
   add_nonzero_sum_| (maybe_zero_yes Diz3) Dadd Din1 Din3
      <- add_zero_sum Dadd Diz1 X1 Diz3
      <- zero_nonzero_contradict binary_eq_ Diz1 Din1 Dfalse
      <- add_nonzero_sum_|_zero| B1 Dfalse Din3.
negate_one :
      is_one B1 -> is_negone B2 -> neg B1 B2 zero -> type.
- :
   negate_one (is_one_ is_zero_nil) is_negone_sing
      (neg_ (negc_cons negc_nil addbit_001 flipbit_one)).
- :
   negate_one (is_one_ Diz) (is_negone_cons Dino)
      (neg_ (negc_cons Dneg addbit_001 flipbit_one))
      <- negc_zero_nocarryin Diz Dino Dneg.
nonzero_is_succ :
      is_nonzero B -> is_one Bone -> add Bone B' B zero -> type.
- :
   nonzero_is_succ Dinz Dio Dadd'
      <- can_negone N1 Bnegone Dino
      <- negate_one Dio Dino Dneg
      <- neg_reverse Dneg Dneg'
      <- add_negone_carry Dino Dinz Dadd
      <- add_invert Dadd Dneg' flipbit_one Dadd'.
add_one_negone :
      is_one B1 -> is_negone B-1 -> is_zero B0 -> add B1 B-1 B0 one' -> type.
- :
   add_one_negone Dio Dino Diz Dadd''
      <- add_ident' B1 Diz Dadd
      <- negate_one Dio Dino Dneg
      <- add_invert Dadd Dneg flipbit_zero Dadd'
      <- add_commute Dadd' Dadd''.
maybe_binary_eq : binary N -> binary N -> type.
maybe_binary_eq_yes : maybe_binary_eq B1 B2 <- binary_eq B1 B2.
maybe_binary_eq_no : maybe_binary_eq B1 B2 <- binary_neq B1 B2.
compare_for_binary_eq :
   Pi B1:binary N. Pi B2:binary N. maybe_binary_eq B1 B2 -> type.
compare_for_binary_eq| :
      add B1 Bdiff B2 CARRY -> maybe_zero Bdiff -> maybe_binary_eq B1 B2 -> type.
compare_for_binary_eq|_eq :
   compare_for_binary_eq| Dadd (maybe_zero_yes Diz) (maybe_binary_eq_yes Deq)
      <- add_ident B3 Diz Dadd'
      <- add_commute Dadd' Dadd''
      <- add_fun1 Dadd Dadd'' X1 Deq.
compare_for_binary_eq|_neq :
   compare_for_binary_eq| Dadd (maybe_zero_no Dinz)
      (maybe_binary_eq_no (binary_neq_ Dinz Dadd'))
      <- add_commute Dadd Dadd'.
compare_for_binary_eq_ :
   compare_for_binary_eq B1 B2 Dmeq
      <- can_add' B1 Bdiff B2 CARRY Dadd
      <- compare_for_zero Bdiff Dmz
      <- compare_for_binary_eq| Dadd Dmz Dmeq.
bitsmatch : bit -> bit -> bit -> bit -> type.
bitsmatch_0000 : bitsmatch zero zero zero zero.
bitsmatch_0101 : bitsmatch zero one' zero one'.
bitsmatch_0110 : bitsmatch zero one' one' zero.
bitsmatch_1010 : bitsmatch one' zero one' zero.
bitsmatch_1001 : bitsmatch one' zero zero one'.
bitsmatch_1111 : bitsmatch one' one' one' one'.
aac :
      addbit B1 B2 CIN12 B12 COUT12 -> addbit B12 B3 CIN12_3 B123 COUT12_3
         -> bitsmatch CIN12 CIN12_3 CIN23 CIN1_23
         -> addbit B2 B3 CIN23 B23 COUT23 -> addbit B1 B23 CIN1_23 B123 COUT1_23
         -> bitsmatch COUT12 COUT12_3 COUT23 COUT1_23 -> type.
aac_0000000 :
   aac addbit_000 addbit_000 bitsmatch_0000 addbit_000 addbit_000 
bitsmatch_0000.
aac_0000101 :
   aac addbit_000 addbit_001 bitsmatch_0101 addbit_000 addbit_001 
bitsmatch_0000.
aac_0000110 :
   aac addbit_000 addbit_001 bitsmatch_0110 addbit_001 addbit_010 
bitsmatch_0000.
aac_0001000 :
   aac addbit_000 addbit_010 bitsmatch_0000 addbit_010 addbit_010 
bitsmatch_0000.
aac_0001101 :
   aac addbit_000 addbit_011 bitsmatch_0101 addbit_010 addbit_011 
bitsmatch_0101.
aac_0001110 :
   aac addbit_000 addbit_011 bitsmatch_0110 addbit_011 addbit_000 
bitsmatch_0110.
aac_0010001 :
   aac addbit_001 addbit_100 bitsmatch_1001 addbit_000 addbit_001 
bitsmatch_0000.
aac_0010010 :
   aac addbit_001 addbit_100 bitsmatch_1010 addbit_001 addbit_010 
bitsmatch_0000.
aac_0010111 :
   aac addbit_001 addbit_101 bitsmatch_1111 addbit_001 addbit_011 
bitsmatch_0101.
aac_0011001 :
   aac addbit_001 addbit_110 bitsmatch_1001 addbit_010 addbit_011 
bitsmatch_0101.
aac_0011010 :
   aac addbit_001 addbit_110 bitsmatch_1010 addbit_011 addbit_000 
bitsmatch_0110.
aac_0011111 :
   aac addbit_001 addbit_111 bitsmatch_1111 addbit_011 addbit_001 
bitsmatch_0110.
aac_0100000 :
   aac addbit_010 addbit_100 bitsmatch_0000 addbit_100 addbit_010 
bitsmatch_0000.
aac_0100101 :
   aac addbit_010 addbit_101 bitsmatch_0101 addbit_100 addbit_011 
bitsmatch_0101.
aac_0100110 :
   aac addbit_010 addbit_101 bitsmatch_0110 addbit_101 addbit_000 
bitsmatch_0110.
aac_0101000 :
   aac addbit_010 addbit_110 bitsmatch_0000 addbit_110 addbit_000 
bitsmatch_0110.
aac_0101101 :
   aac addbit_010 addbit_111 bitsmatch_0101 addbit_110 addbit_001 
bitsmatch_0110.
aac_0101110 :
   aac addbit_010 addbit_111 bitsmatch_0110 addbit_111 addbit_010 
bitsmatch_0110.
aac_0110001 :
   aac addbit_011 addbit_000 bitsmatch_1001 addbit_100 addbit_011 
bitsmatch_1001.
aac_0110010 :
   aac addbit_011 addbit_000 bitsmatch_1010 addbit_101 addbit_000 
bitsmatch_1010.
aac_0110111 :
   aac addbit_011 addbit_001 bitsmatch_1111 addbit_101 addbit_001 
bitsmatch_1010.
aac_0111001 :
   aac addbit_011 addbit_010 bitsmatch_1001 addbit_110 addbit_001 
bitsmatch_1010.
aac_0111010 :
   aac addbit_011 addbit_010 bitsmatch_1010 addbit_111 addbit_010 
bitsmatch_1010.
aac_0111111 :
   aac addbit_011 addbit_011 bitsmatch_1111 addbit_111 addbit_011 
bitsmatch_1111.
aac_1000000 :
   aac addbit_100 addbit_100 bitsmatch_0000 addbit_000 addbit_100 
bitsmatch_0000.
aac_1000101 :
   aac addbit_100 addbit_101 bitsmatch_0101 addbit_000 addbit_101 
bitsmatch_0101.
aac_1000110 :
   aac addbit_100 addbit_101 bitsmatch_0110 addbit_001 addbit_110 
bitsmatch_0101.
aac_1001000 :
   aac addbit_100 addbit_110 bitsmatch_0000 addbit_010 addbit_110 
bitsmatch_0101.
aac_1001101 :
   aac addbit_100 addbit_111 bitsmatch_0101 addbit_010 addbit_111 
bitsmatch_0101.
aac_1001110 :
   aac addbit_100 addbit_111 bitsmatch_0110 addbit_011 addbit_100 
bitsmatch_0110.
aac_1010001 :
   aac addbit_101 addbit_000 bitsmatch_1001 addbit_000 addbit_101 
bitsmatch_1001.
aac_1010010 :
   aac addbit_101 addbit_000 bitsmatch_1010 addbit_001 addbit_110 
bitsmatch_1001.
aac_1010111 :
   aac addbit_101 addbit_001 bitsmatch_1111 addbit_001 addbit_111 
bitsmatch_1001.
aac_1011001 :
   aac addbit_101 addbit_010 bitsmatch_1001 addbit_010 addbit_111 
bitsmatch_1001.
aac_1011010 :
   aac addbit_101 addbit_010 bitsmatch_1010 addbit_011 addbit_100 
bitsmatch_1010.
aac_1011111 :
   aac addbit_101 addbit_011 bitsmatch_1111 addbit_011 addbit_101 
bitsmatch_1111.
aac_1100000 :
   aac addbit_110 addbit_000 bitsmatch_0000 addbit_100 addbit_110 
bitsmatch_1001.
aac_1100101 :
   aac addbit_110 addbit_001 bitsmatch_0101 addbit_100 addbit_111 
bitsmatch_1001.
aac_1100110 :
   aac addbit_110 addbit_001 bitsmatch_0110 addbit_101 addbit_100 
bitsmatch_1010.
aac_1101000 :
   aac addbit_110 addbit_010 bitsmatch_0000 addbit_110 addbit_100 
bitsmatch_1010.
aac_1101101 :
   aac addbit_110 addbit_011 bitsmatch_0101 addbit_110 addbit_101 
bitsmatch_1111.
aac_1101110 :
   aac addbit_110 addbit_011 bitsmatch_0110 addbit_111 addbit_110 
bitsmatch_1111.
aac_1110001 :
   aac addbit_111 addbit_100 bitsmatch_1001 addbit_100 addbit_111 
bitsmatch_1001.
aac_1110010 :
   aac addbit_111 addbit_100 bitsmatch_1010 addbit_101 addbit_100 
bitsmatch_1010.
aac_1110111 :
   aac addbit_111 addbit_101 bitsmatch_1111 addbit_101 addbit_101 
bitsmatch_1111.
aac_1111001 :
   aac addbit_111 addbit_110 bitsmatch_1001 addbit_110 addbit_101 
bitsmatch_1111.
aac_1111010 :
   aac addbit_111 addbit_110 bitsmatch_1010 addbit_111 addbit_110 
bitsmatch_1111.
aac_1111111 :
   aac addbit_111 addbit_111 bitsmatch_1111 addbit_111 addbit_111 
bitsmatch_1111.
addc_assoc :
      addc BITI12 B1 B2 B12 BITO12 -> addc BITI12_3 B12 B3 B123 BITO12_3
         -> bitsmatch BITI12 BITI12_3 BITI23 BITI1_23
         -> addc BITI23 B2 B3 B23 BITO23 -> addc BITI1_23 B1 B23 B123 BITO1_23
         -> bitsmatch BITO12 BITO12_3 BITO23 BITO1_23 -> type.
-nil : addc_assoc addc_nil addc_nil D addc_nil addc_nil D.
-cons :
   addc_assoc (addc_cons Dadd12 Daddbit12) (addc_cons Dadd12_3 Daddbit12_3)
      Dmatch (addc_cons Dadd23 Daddbit23) (addc_cons Dadd1_23 Daddbit1_23)
      Dmatch''
      <- aac Daddbit12 Daddbit12_3 Dmatch Daddbit23 Daddbit1_23 Dmatch'
      <- addc_assoc Dadd12 Dadd12_3 Dmatch' Dadd23 Dadd1_23 Dmatch''.
add_assoc :
      add B1 B2 B12 zero -> add B12 B3 B123 zero -> add B2 B3 B23 zero
         -> add B1 B23 B123 zero -> type.
- :
   add_assoc (add_ Dadd12) (add_ Dadd12_3) (add_ Dadd23) (add_ Dadd1_23)
      <- addc_assoc Dadd12 Dadd12_3 bitsmatch_0000 Dadd23 Dadd1_23
            bitsmatch_0000.
add_assoc* :
      add B1 B2 B12 BIT12 -> add B12 B3 B123 BIT12_3 -> add B2 B3 B23 BIT23
         -> add B1 B23 B123 BIT1_23 -> bitsmatch BIT12 BIT12_3 BIT23 BIT1_23
         -> type.
- :
   add_assoc* (add_ D12) (add_ D12_3) (add_ D23) (add_ D1_23) Dmatch
      <- addc_assoc D12 D12_3 bitsmatch_0000 D23 D1_23 Dmatch.
addc_equal_zero_carry1_contra :
      addc zero B1 B2 B2 one' -> false -> type.
- :
   addc_equal_zero_carry1_contra (addc_cons Dadd addbit_000) Dfalse
      <- addc_equal_zero_carry1_contra Dadd Dfalse.
- :
   addc_equal_zero_carry1_contra (addc_cons Dadd addbit_010) Dfalse
      <- addc_equal_zero_carry1_contra Dadd Dfalse.
add_equal_zero_carry1_contra :
      add B1 B2 B2 one' -> false -> type.
- :
   add_equal_zero_carry1_contra (add_ Dadd) Dfalse
      <- addc_equal_zero_carry1_contra Dadd Dfalse.
add_equal_zero| : false -> Pi N:nat. Pi B:binary N. is_zero B -> type.
addc_equal_zero :
      addc zero B B1 B1 B2 -> is_zero B -> type.
-nil : addc_equal_zero addc_nil is_zero_nil.
-cons :
   addc_equal_zero (addc_cons Dadd X1) (is_zero_cons Diz)
      <- addc_equal_zero Dadd Diz.
add_equal_zero :
      add B B1 B1 B2 -> is_zero B -> type.
- : add_equal_zero (add_ Dadd) Diz <- addc_equal_zero Dadd Diz.
bitsmatch_resp :
      bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> bit_eq BIT3 BIT3'
         -> bit_eq BIT4 BIT4' -> bitsmatch BIT1 BIT2 BIT3 BIT4
         -> bitsmatch BIT1' BIT2' BIT3' BIT4' -> type.
- : bitsmatch_resp bit_eq_ bit_eq_ bit_eq_ bit_eq_ D D.
bitsmatch_reg :
      bitsmatch BIT1 BIT2 BIT3 BIT4 -> bit_eq BIT1 BIT3 -> bit_eq BIT2 BIT4
         -> type.
-0000 : bitsmatch_reg bitsmatch_0000 bit_eq_ bit_eq_.
-0101 : bitsmatch_reg bitsmatch_0101 bit_eq_ bit_eq_.
-1010 : bitsmatch_reg bitsmatch_1010 bit_eq_ bit_eq_.
-1111 : bitsmatch_reg bitsmatch_1111 bit_eq_ bit_eq_.
bitsmatch_reg1 :
      bitsmatch BIT1 BIT2 BIT3 BIT4 -> bit_eq BIT1 BIT4 -> bit_eq BIT2 BIT3
         -> type.
-0000 : bitsmatch_reg1 bitsmatch_0000 bit_eq_ bit_eq_.
-0101 : bitsmatch_reg1 bitsmatch_0110 bit_eq_ bit_eq_.
-1010 : bitsmatch_reg1 bitsmatch_1001 bit_eq_ bit_eq_.
-1111 : bitsmatch_reg1 bitsmatch_1111 bit_eq_ bit_eq_.
binary_append_length' :
      binary_append B1 B2 B3 -> sum N2 N1 N3 -> type.
-nil : binary_append_length' binary_append_nil sum_z.
-cons :
   binary_append_length' (binary_append_cons Dapp) (sum_s Dsum)
      <- binary_append_length' Dapp Dsum.
binary_append_length :
      binary_append B1 B2 B3 -> sum N1 N2 N3 -> type.
- :
   binary_append_length D Dsum'
      <- binary_append_length' D Dsum
      <- sum_commute Dsum Dsum'.
can_binary_append* :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi B1:binary N1. Pi B2:binary N2.
      Pi B3:binary N3. sum N2 N1 N3 -> binary_append B1 B2 B3 -> type.
-nil : can_binary_append* B nil$ B sum_z binary_append_nil.
-cons :
   can_binary_append* B1 ($ BIT B2) ($ BIT B3) (sum_s Dsum)
      (binary_append_cons D)
      <- can_binary_append* B1 B2 B3 Dsum D.
can_binary_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi B1:binary N1. Pi B2:binary N2.
      Pi B3:binary N3. sum N1 N2 N3 -> binary_append B1 B2 B3 -> type.
- :
   can_binary_append B1 B2 B3 Dsum Dba
      <- sum_commute Dsum Dsum'
      <- can_binary_append* B1 B2 B3 Dsum' Dba.
can_binary_append'* :
   Pi N1:nat. Pi N3:nat. Pi N2:nat. Pi B1:binary N1. Pi B2:binary N2.
      Pi B3:binary N3. sum N2 N1 N3 -> binary_append B1 B2 B3 -> type.
-nil : can_binary_append'* z B nil$ B X1 binary_append_nil.
-cons :
   can_binary_append'* (s N) B1 ($ BIT B2) ($ BIT B3) (sum_s D)
      (binary_append_cons D')
      <- can_binary_append'* N B1 B2 B3 D D'.
can_binary_append' :
   Pi N2:nat. Pi N3:nat. Pi N1:nat. Pi B1:binary N1. Pi B2:binary N2.
      Pi B3:binary N3. sum N1 N2 N3 -> binary_append B1 B2 B3 -> type.
- :
   can_binary_append' N1 B1 B2 B3 Dsum Dba
      <- sum_commute Dsum Dsum'
      <- can_binary_append'* N3 B1 B2 B3 Dsum' Dba.
binary_append_assoc :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi B1:binary N1. Pi B2:binary N2.
      Pi B12:binary N3. Pi N4:nat. Pi N5:nat. Pi B3:binary N4. Pi B:binary N5.
      Pi N6:nat. Pi B23:binary N6.
      binary_append B1 B2 B12 -> binary_append B12 B3 B
         -> binary_append B2 B3 B23 -> binary_append B1 B23 B -> type.
-nil : binary_append_assoc D binary_append_nil binary_append_nil D.
-cons :
   binary_append_assoc D12 (binary_append_cons D12_3) (binary_append_cons D23)
      (binary_append_cons D1_23)
      <- binary_append_assoc D12 D12_3 D23 D1_23.
binary_append_assoc' :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi B1:binary N1. Pi B2:binary N2.
      Pi B12:binary N3. Pi N4:nat. Pi N5:nat. Pi B3:binary N4. Pi B:binary N5.
      Pi N6:nat. Pi B23:binary N6.
      binary_append B1 B2 B12 -> binary_append B12 B3 B
         -> binary_append B2 B3 B23 -> binary_append B1 B23 B -> type.
-nil : binary_append_assoc' D binary_append_nil binary_append_nil D.
-cons :
   binary_append_assoc' D12 (binary_append_cons D12_3) (binary_append_cons D23)
      (binary_append_cons D1_23)
      <- binary_append_assoc' D12 D12_3 D23 D1_23.
binary_append_ident : Pi N1:nat. Pi B:binary N1. binary_append B nil$ B -> type.
- : binary_append_ident B1 binary_append_nil.
binary_append_ident' :
   Pi N1:nat. Pi B:binary N1. binary_append nil$ B B -> type.
- : binary_append_ident' nil$ binary_append_nil.
- :
   binary_append_ident' ($ B1 B) (binary_append_cons D)
      <- binary_append_ident' B D.
binary_append_ident'' :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi B2:binary N2.
      binary_append nil$ B1 B2 -> binary_eq B2 B1 -> type.
- :
   binary_append_ident'' Dba Deq
      <- binary_append_ident' B1 Dba'
      <- binary_append_fun Dba Dba' Deq.
binary_append_ident''' :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi B2:binary N2.
      binary_append nil$ B1 B2 -> binary_eq B1 B2 -> type.
- :
   binary_append_ident''' Dba Deq
      <- binary_append_ident' B1 Dba'
      <- binary_append_fun Dba' Dba Deq.
addc_append :
   Pi N1:nat. Pi CARRY:bit. Pi B1h:binary N1. Pi B2h:binary N1.
      Pi B3h:binary N1. Pi COUT:bit. Pi N2:nat. Pi CIN:bit. Pi B1l:binary N2.
      Pi B2l:binary N2. Pi B3l:binary N2. Pi N3:nat. Pi B1:binary N3.
      Pi B2:binary N3. Pi B3:binary N3.
      addc CARRY B1h B2h B3h COUT -> addc CIN B1l B2l B3l CARRY
         -> binary_append B1h B1l B1 -> binary_append B2h B2l B2
         -> binary_append B3h B3l B3 -> addc CIN B1 B2 B3 COUT -> type.
-nil :
   addc_append D addc_nil binary_append_nil binary_append_nil binary_append_nil
      D.
-cons :
   addc_append Dhi (addc_cons Dlo Daddbit) (binary_append_cons Dba1)
      (binary_append_cons Dba2) (binary_append_cons Dba3) (addc_cons D Daddbit)
      <- addc_append Dhi Dlo Dba1 Dba2 Dba3 D.
addc_append' :
   Pi N1:nat. Pi CARRY:bit. Pi B1h:binary N1. Pi B2h:binary N1.
      Pi B3h:binary N1. Pi COUT:bit. Pi N2:nat. Pi CIN:bit. Pi B1l:binary N2.
      Pi B2l:binary N2. Pi B3l:binary N2. Pi N3:nat. Pi B1:binary N3.
      Pi B2:binary N3. Pi B3:binary N3.
      addc CARRY B1h B2h B3h COUT -> addc CIN B1l B2l B3l CARRY
         -> binary_append B1h B1l B1 -> binary_append B2h B2l B2
         -> binary_append B3h B3l B3 -> addc CIN B1 B2 B3 COUT -> type.
-nil :
   addc_append' D addc_nil binary_append_nil binary_append_nil 
binary_append_nil
      D.
-cons :
   addc_append' Dhi (addc_cons Dlo Daddbit) (binary_append_cons Dba1)
      (binary_append_cons Dba2) (binary_append_cons Dba3) (addc_cons D Daddbit)
      <- addc_append' Dhi Dlo Dba1 Dba2 Dba3 D.
add_append :
   Pi N1:nat. Pi B1h:binary N1. Pi B2h:binary N1. Pi B3h:binary N1.
      Pi CARRY:bit. Pi N2:nat. Pi B1l:binary N2. Pi B2l:binary N2.
      Pi B3l:binary N2. Pi N3:nat. Pi B1:binary N3. Pi B2:binary N3.
      Pi B3:binary N3.
      add B1h B2h B3h CARRY -> add B1l B2l B3l zero -> binary_append B1h B1l B1
         -> binary_append B2h B2l B2 -> binary_append B3h B3l B3
         -> add B1 B2 B3 CARRY -> type.
- :
   add_append (add_ Dhi) (add_ Dlo) Dba1 Dba2 Dba3 (add_ D)
      <- addc_append Dhi Dlo Dba1 Dba2 Dba3 D.
append_zero :
   Pi N1:nat. Pi B1:binary N1. Pi N2:nat. Pi B2:binary N2. Pi N3:nat.
      Pi B3:binary N3.
      is_zero B1 -> is_zero B2 -> binary_append B1 B2 B3 -> is_zero B3 -> type.
-nil : append_zero D is_zero_nil binary_append_nil D.
-cons :
   append_zero Diz1 (is_zero_cons Diz2) (binary_append_cons Dapp)
      (is_zero_cons Diz3)
      <- append_zero Diz1 Diz2 Dapp Diz3.
append_one :
   Pi N1:nat. Pi B1:binary N1. Pi N2:nat. Pi B2:binary N2. Pi N3:nat.
      Pi B3:binary N3.
      is_zero B1 -> is_one B2 -> binary_append B1 B2 B3 -> is_one B3 -> type.
- :
   append_one Diz1 (is_one_ Diz2) (binary_append_cons Dba) (is_one_ Diz3)
      <- append_zero Diz1 Diz2 Dba Diz3.
highbit_is_binary_append :
   Pi N1:nat. Pi B:binary (s N1). Pi BIT:bit. Pi Blo:binary N1.
      highbit B BIT Blo -> binary_append ($ BIT nil$) Blo B -> type.
-ing : highbit_is_binary_append highbit_sing binary_append_nil.
-cons :
   highbit_is_binary_append (highbit_cons Dhb) (binary_append_cons Dba)
      <- highbit_is_binary_append Dhb Dba.
binary_append_is_highbit :
   Pi N1:nat. Pi BIT:bit. Pi Blo:binary N1. Pi B:binary (s N1).
      binary_append ($ BIT nil$) Blo B -> highbit B BIT Blo -> type.
-ing : binary_append_is_highbit binary_append_nil highbit_sing.
-cons :
   binary_append_is_highbit (binary_append_cons Dba) (highbit_cons Dhb)
      <- binary_append_is_highbit Dba Dhb.
represents_fun1 :
   Pi N1:nat. Pi N:nat. Pi B:binary N1. Pi N':nat.
      represents N B -> represents N' B -> nat_eq N N' -> type.
represents_fun1| : false -> Pi N:nat. Pi N':nat. nat_eq N N' -> type.
represents_fun1_zz :
   represents_fun1 (represents_z X1) (represents_z X2) nat_eq_.
represents_fun1_ss :
   represents_fun1 (represents_s Dadd1 Dio1 Drep1)
      (represents_s Dadd2 Dio2 Drep2) D'
      <- is_one_fun Dio2 Dio1 Deqone
      <- add_resp binary_eq_ Deqone binary_eq_ bit_eq_ Dadd2 Dadd2'
      <- add_fun1 Dadd2' Dadd1 X1 Deq
      <- represents_resp nat_eq_ Deq Drep2 Drep2'
      <- represents_fun1 Drep1 Drep2' D
      <- nat_eq_inc D D'.
represents_fun1_zs :
   represents_fun1 (represents_z Diz) (represents_s Dadd Dio X2) D
      <- add_zero_sum Dadd X1 Diz' Diz
      <- one_is_nonzero Dio Dinz
      <- zero_nonzero_contradict binary_eq_ Diz' Dinz Dfalse
      <- represents_fun1| Dfalse z (s N1) D.
represents_fun1_sz :
   represents_fun1 (represents_s Dadd Dio X2) (represents_z Diz) D
      <- add_zero_sum Dadd X1 Diz' Diz
      <- one_is_nonzero Dio Dinz
      <- zero_nonzero_contradict binary_eq_ Diz' Dinz Dfalse
      <- represents_fun1| Dfalse (s N1) z D.
can_represents* :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N:nat. Pi B1:binary N. Pi B:binary N.
      sum N1 N2 N3 -> represents N3 B1 -> represents N2 B -> type.
can_represents_z : can_represents* sum_z D D.
can_represents_s :
   can_represents* (sum_s Dsum) (represents_s X1 X2 Drep) Drep'
      <- can_represents* Dsum Drep Drep'.
can_represents :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi B1:binary N. Pi B:binary N.
      leq N1 N2 -> represents N2 B1 -> represents N1 B -> type.
can_represents_ :
   can_represents Dleq Drep Drep'
      <- leq_implies_sum Dsum Dleq
      <- sum_commute Dsum Dsum'
      <- can_represents* Dsum' Drep Drep'.
sum_add_corr :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
sum_add_corr_z :
   sum_add_corr (represents_z Diz) Drep2 Drep3 sum_z Dadd'
      <- add_ident B2 Diz Dadd
      <- represents_fun2 Drep2 Drep3 Deq
      <- add_resp binary_eq_ binary_eq_ Deq bit_eq_ Dadd Dadd'.
sum_add_corr_s :
   sum_add_corr (represents_s Dadd1 Dio1 Drep1) Drep2
      (represents_s Dadd3 Dio3 Drep3) (sum_s Dsum) Daddfull''
      <- sum_add_corr Drep1 Drep2 Drep3 Dsum Dadd
      <- is_one_fun Dio3 Dio1 Deqone
      <- add_resp binary_eq_ Deqone binary_eq_ bit_eq_ Dadd3 Dadd3'
      <- add_commute Dadd Dadd'
      <- add_assoc Dadd' Dadd3' Dadd1' Daddfull
      <- add_fun3 Dadd1' Dadd1 X1 Deq
      <- add_resp binary_eq_ Deq binary_eq_ bit_eq_ Daddfull Daddfull'
      <- add_commute Daddfull' Daddfull''.
sum_add_corr3 :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
sum_add_corr3_z :
   sum_add_corr3 (represents_z Diz) Drep Drep' sum_z Dadd
      <- add_ident B1 Diz Dadd'
      <- add_fun3 Dadd' Dadd X1 Deq
      <- represents_resp nat_eq_ Deq Drep Drep'.
sum_add_corr3_s :
   sum_add_corr3 (represents_s Dadd1 Dio Drep1) Drep2 Drep3 Dsum''' Dadd
      <- add_assoc Dadd1 Dadd Dadd2 Dadd'
      <- add_commute Dadd2 Dadd2'
      <- sum_add_corr3 Drep1 (represents_s Dadd2' Dio Drep2) Drep3 Dsum Dadd'
      <- sum_commute Dsum Dsum'
      <- sum_shift Dsum' Dsum''
      <- sum_commute Dsum'' Dsum'''.
sum_add_corr3_succ :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents (s N2) B1 -> represents N3 B2 -> represents (s N4) B3
         -> sum (s N2) N3 (s N4) -> add B1 B2 B3 zero -> type.
- :
   sum_add_corr3_succ Drep1 Drep2 Drep3' Dsum' Dadd
      <- sum_add_corr3 Drep1 Drep2 Drep3 Dsum Dadd
      <- sum_nonzero Dsum Deq
      <- sum_resp nat_eq_ nat_eq_ Deq Dsum Dsum'
      <- represents_resp Deq binary_eq_ Drep3 Drep3'.
sum_add_corr4 :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
sum_add_corr4* :
   Pi N1:nat. Pi B1:binary N1. Pi N2:nat. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      maybe_zero B1 -> represents N2 B1 -> represents N3 B2
         -> represents (s N4) B3 -> sum N2 N3 (s N4) -> add B1 B2 B3 zero
         -> type.
sum_add_corr4*_zero :
   sum_add_corr4* (maybe_zero_yes Diz) (represents_z Diz) Drep' Drep sum_z Dadd
      <- add_ident B2 Diz Dadd'
      <- add_fun3 Dadd Dadd' X1 Deq
      <- represents_resp nat_eq_ Deq Drep Drep'.
sum_add_corr4*_nonzero :
   sum_add_corr4* (maybe_zero_no Dinz) (represents_s Dadd1' Dio Drep1) Drep2
      (represents_s Dadd' Dio Drep3) (sum_s Dsum) Dadd
      <- nonzero_is_succ Dinz Dio Dadd1
      <- add_assoc Dadd1 Dadd Dadd2 Dadd3
      <- add_commute Dadd3 Dadd3'
      <- add_fun1 Dadd3' Dadd' X1 Deq
      <- add_resp binary_eq_ binary_eq_ Deq bit_eq_ Dadd2 Dadd2'
      <- sum_add_corr4 Drep1 Drep2 Drep3 Dsum Dadd2'
      <- add_commute Dadd1 Dadd1'.
sum_add_corr4_zero :
   sum_add_corr4 (represents_z Diz1) (represents_z Diz2) (represents_z Diz3)
      sum_z Dadd
      <- add_zero_sum Dadd Diz1 Diz2 Diz3.
sum_add_corr4_nonzero :
   sum_add_corr4 Drep1 Drep2 Drep3 Dsum Dadd
      <- compare_for_zero B1 Dmz
      <- sum_add_corr4* Dmz Drep1 Drep2 Drep3 Dsum Dadd.
sum_add_corr5 :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
sum_add_corr5_ :
   sum_add_corr5 Drep1 Drep2 Drep3' Dsum Dadd
      <- sum_add_corr3 Drep1 Drep2 Drep3 Dsum' Dadd
      <- sum_fun3 Dsum' Dsum Deq
      <- represents_resp Deq binary_eq_ Drep3 Drep3'.
sum_add_corr6 :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
sum_add_corr6_ :
   sum_add_corr6 Drep1 Drep2' Drep3 Dsum Dadd
      <- sum_add_corr4 Drep1' Drep2 Drep3 Dsum' Dadd
      <- represents_fun1 Drep1' Drep1 Deq1
      <- sum_resp Deq1 nat_eq_ nat_eq_ Dsum' Dsum''
      <- sum_fun2 Dsum'' Dsum Deq2
      <- represents_resp Deq2 binary_eq_ Drep2 Drep2'.
sum_add_corr7 :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
sum_add_corr7_ :
   sum_add_corr7 Drep1 Drep2 Drep3 Dsum' Dadd
      <- sum_add_corr4 Drep1' Drep2 Drep3 Dsum Dadd
      <- represents_fun1 Drep1' Drep1 Deq1
      <- sum_resp Deq1 nat_eq_ nat_eq_ Dsum Dsum'.
sum_add_corr8 :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
- :
   sum_add_corr8 Drep1 Drep2 Drep3 Dsum' Dadd
      <- sum_add_corr4 Drep1 Drep2' Drep3 Dsum Dadd
      <- represents_fun1 Drep2' Drep2 Deq2
      <- sum_resp nat_eq_ Deq2 nat_eq_ Dsum Dsum'.
sum_add_corr10 :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
- :
   sum_add_corr10 Drep1 Drep2 Drep3 Dsum Dadd
      <- sum_implies_leq' Dsum Dleq
      <- can_represents Dleq Drep3 Drep2
      <- sum_add_corr Drep1 Drep2 Drep3 Dsum Dadd.
represents_double :
   Pi N1:nat. Pi N:nat. Pi B:binary N1. Pi N':nat.
      represents N B -> product N 2' N' -> represents N' ($ zero B) -> type.
- :
   represents_double (represents_z Diz) product_z
      (represents_z (is_zero_cons Diz)).
represents_double| :
   Pi B1:bit. Pi B2:bit. Pi B3:bit.
      addbit B1 one' zero B2 B3 -> addbit B1 zero one' B2 B3 -> type.
- : represents_double| addbit_110 addbit_101.
- : represents_double| addbit_010 addbit_001.
- :
   represents_double
      (represents_s (add_ (addc_cons Dadd Daddbit)) (is_one_ Diz) Drep)
      (product_s (sum_s (sum_s sum_z)) Dprod)
      (represents_s (add_ (addc_cons (addc_cons Dadd Daddbit') addbit_110))
          (is_one_ (is_zero_cons Diz))
          (represents_s (add_ (addc_cons Daddzero' addbit_010))
              (is_one_ (is_zero_cons Diz)) Drep'))
      <- represents_double Drep Dprod Drep'
      <- addc_ident ($ B1 B5) (is_zero_cons Diz) Daddzero
      <- addc_commute Daddzero Daddzero'
      <- represents_double| Daddbit Daddbit'.
represents_double_succ :
   Pi N1:nat. Pi N:nat. Pi B:binary N1. Pi N':nat.
      represents N B -> product N 2' N' -> represents (s N') ($ one' B) -> type.
- :
   represents_double_succ Drep Dprod
      (represents_s (add_ (addc_cons Dadd addbit_010)) (is_one_ Diz) Drep')
      <- represents_double Drep Dprod Drep'
      <- can_zero N1 B1 Diz
      <- addc_ident' B2 Diz Dadd.
represents_exp :
   Pi N1:nat. Pi N:nat. Pi B1:binary N1. Pi Nsz:nat. Pi B2:binary Nsz.
      Pi Nexp:nat. Pi N':nat. Pi N2:nat. Pi B:binary N2.
      represents N B1 -> is_zero B2 -> expon 2' Nsz Nexp -> product Nexp N N'
         -> binary_append B1 B2 B -> represents N' B -> type.
- :
   represents_exp Drep is_zero_nil expon_z (product_s Dsum product_z)
      binary_append_nil Drep'
      <- sum_ident N1 Dsum'
      <- sum_fun3 Dsum' Dsum Deq
      <- represents_resp Deq binary_eq_ Drep Drep'.
- :
   represents_exp Drep (is_zero_cons Diz) (expon_s Dprod_double Dexp) Dprod
      (binary_append_cons Dba) Drep''
      <- prod_assoc Dprod_double Dprod Dprod' Dprod_double'
      <- represents_exp Drep Diz Dexp Dprod' Dba Drep'
      <- prod_commute Dprod_double' Dprod_double''
      <- represents_double Drep' Dprod_double'' Drep''.
represents_nonzero :
   Pi N1:nat. Pi B:binary N1. Pi N:nat. Pi N':nat.
      is_nonzero B -> represents N B -> nat_eq N (s N') -> type.
represents_nonzero_z :
   represents_nonzero Dinz (represents_z Diz) D
      <- zero_nonzero_contradict binary_eq_ Diz Dinz Dimpossible
      <- false_implies_nat_eq Dimpossible z 1' D.
represents_nonzero_s : represents_nonzero X1 (represents_s X2 X3 X4) nat_eq_.
represents_succ :
   Pi N1:nat. Pi N:nat. Pi B:binary N1.
      represents (s N) B -> is_nonzero B -> type.
- :
   represents_succ (represents_s Dadd Disone Drep) Dinz2
      <- one_is_nonzero Disone Dinz1
      <- add_commute Dadd Dadd'
      <- add_nonzero_sum Dadd' Dinz1 Dinz2.
can_represents1 : Pi N1:nat. Pi B:binary N1. Pi N:nat. represents N B -> type.
-nil : can_represents1 nil$ z (represents_z Diz) <- can_zero z nil$ Diz.
-0 :
   can_represents1 ($ zero B) N' Drep'
      <- can_represents1 B N Drep
      <- can_product N 2' N' Dprod
      <- represents_double Drep Dprod Drep'.
-1 :
   can_represents1 ($ one' B) (s N')
      (represents_s (add_ (addc_cons Dadd' addbit_010)) (is_one_ Diz) Drep')
      <- can_represents1 B N Drep
      <- can_product N 2' N' Dprod
      <- represents_double Drep Dprod Drep'
      <- can_zero N1 B1 Diz
      <- addc_ident B Diz Dadd
      <- addc_commute Dadd Dadd'.
represents_append_zero :
   Pi N1:nat. Pi B1:binary N1. Pi N2:nat. Pi N:nat. Pi B2:binary N2. Pi N3:nat.
      Pi B3:binary N3.
      is_zero B1 -> represents N B2 -> binary_append B1 B2 B3 -> represents N B3
         -> type.
- :
   represents_append_zero Diz1 (represents_z Diz2) Dapp (represents_z Diz3)
      <- append_zero Diz1 Diz2 Dapp Diz3.
- :
   represents_append_zero Diz1 (represents_s Dadd Dio2 Drep) Dapp
      (represents_s Dadd' Dio Drep')
      <- binary_append_length Dapp Dsum
      <- can_binary_append B1 B2 B5 Dsum Dapp'
      <- represents_append_zero Diz1 Drep Dapp' Drep'
      <- can_binary_append B1 B3 B6 Dsum Dapp''
      <- append_one Diz1 Dio2 Dapp'' Dio
      <- add_ident B1 Diz1 Daddh
      <- add_append Daddh Dadd Dapp' Dapp'' Dapp Dadd'.
represents_append :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi Nsz:nat. Pi N3:nat.
      Pi B2:binary Nsz. Pi N4:nat. Pi B:binary N4. Pi Nexp:nat. Pi N1':nat.
      Pi N:nat.
      represents N2 B1 -> represents N3 B2 -> binary_append B1 B2 B
         -> expon 2' Nsz Nexp -> product Nexp N2 N1' -> sum N3 N1' N
         -> represents N B -> type.
- :
   represents_append Drep (represents_z Diz) Dba Dexp Dprod Dsum Drep''
      <- represents_exp Drep Diz Dexp Dprod Dba Drep'
      <- sum_fun3 sum_z Dsum Deq
      <- represents_resp Deq binary_eq_ Drep' Drep''.
- :
   represents_append Drep1 (represents_s Dadd_lo (is_one_ Diz_lo) Drep2) Dba
      Dexp Dprod (sum_s Dsum) (represents_s Dadd' (is_one_ Diz) Drep)
      <- binary_append_length Dba Dsumlen
      <- can_binary_append B1 B2 B4 Dsumlen Dba'
      <- represents_append Drep1 Drep2 Dba' Dexp Dprod Dsum Drep
      <- sum_dec Dsumlen' Dsumlen
      <- can_zero N1 B0hi Diz_hi
      <- can_binary_append B0hi B0lo B0 Dsumlen' Dba''
      <- append_zero Diz_hi Diz_lo Dba'' Diz
      <- add_ident' B1 Diz_hi Dadd_hi
      <- add_append Dadd_hi Dadd_lo Dba' (binary_append_cons Dba'') Dba Dadd'.
sum_add_corr9 :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1. Pi N4:nat.
      Pi B3:binary N1.
      represents N2 B1 -> represents N3 B2 -> represents N4 B3 -> sum N2 N3 N4
         -> add B1 B2 B3 zero -> type.
- :
   sum_add_corr9 Drep1 Drep2 Drep3 Dsum Dadd
      <- sum_implies_leq Dsum Dleq
      <- can_represents Dleq Drep3 Drep1
      <- sum_commute Dsum Dsum1
      <- sum_implies_leq Dsum1 Dleq1
      <- can_represents Dleq1 Drep3 Drep2
      <- sum_add_corr Drep1 Drep2 Drep3 Dsum Dadd.
sum_add_corr_carry :
   Pi M:nat. Pi N1:nat. Pi B1:binary M. Pi N2:nat. Pi B2:binary M. Pi N3:nat.
      Pi B3:binary M. Pi N:nat. Pi B4:binary M.
      represents N1 B1 -> represents N2 B2 -> sum N1 N2 N3 -> add B1 B2 B3 one'
         -> represents N B4 -> lt N N3 -> type.
sum_add_corr_carry| :
   Pi M:nat. Pi N1:nat. Pi B1:binary M. Pi N2:nat. Pi B2:binary M. Pi N3:nat.
      Pi B3:binary M. Pi N:nat. Pi B4:binary M.
      represents N1 B1 -> represents N2 B2 -> sum N1 N2 N3 -> add B1 B2 B3 one'
         -> represents N B4 -> leq_gt N3 N -> lt N N3 -> type.
sum_add_corr_carry|_gt :
   sum_add_corr_carry| Drep1 Drep2 Dsum Dadd Drep (leq_gt_gt Dlt) Dlt.
sum_add_corr_carry|_leq| :
   bit_eq one' zero -> Pi M:nat. Pi N:nat. lt M N -> type.
sum_add_corr_carry|_leq :
   sum_add_corr_carry| Drep1 Drep2 Dsum Dadd Drep (leq_gt_leq Dleq) Dlt
      <- can_represents Dleq Drep Drep3
      <- sum_add_corr Drep1 Drep2 Drep3 Dsum Dadd'
      <- add_fun3 Dadd Dadd' Deq X1
      <- sum_add_corr_carry|_leq| Deq N N3 Dlt.
sum_add_corr_carry_ :
   sum_add_corr_carry Drep1 Drep2 Dsum Dadd Drep Dlt
      <- dichotomy N4 N Dlg
      <- sum_add_corr_carry| Drep1 Drep2 Dsum Dadd Drep Dlg Dlt.
represents_one : Pi N1:nat. Pi B:binary N1. is_one B -> represents 1' B -> type.
represents_one_ :
   represents_one Dio (represents_s Dadd Dio (represents_z Diz))
      <- can_zero N1 B1 Diz
      <- add_ident B2 Diz Dadd.
represents_append_one :
   Pi N1:nat. Pi B1:binary N1. Pi Nsz:nat. Pi N:nat. Pi B:binary Nsz. Pi N2:nat.
      Pi B':binary N2. Pi Nexp:nat. Pi N':nat.
      is_one B1 -> represents N B -> binary_append B1 B B' -> expon 2' Nsz Nexp
         -> sum N Nexp N' -> represents N' B' -> type.
- :
   represents_append_one Dio Drep Dba Dexp Dsum Drep'
      <- represents_one Dio Drep1
      <- prod_ident N5 Dprod
      <- represents_append Drep1 Drep Dba Dexp Dprod Dsum Drep'.
represents_negone :
   Pi Nsz:nat. Pi B:binary Nsz. Pi N:nat.
      is_negone B -> represents N B -> expon 2' Nsz (s N) -> type.
-ing :
   represents_negone is_negone_sing Drep Dexp'
      <- represents_one (is_one_ is_zero_nil) Drep'
      <- represents_fun1 Drep' Drep Deq
      <- nat_eq_inc Deq Deq'
      <- expon_ident2 (s 1') Dexp
      <- expon_resp nat_eq_ nat_eq_ Deq' Dexp Dexp'.
-cons :
   represents_negone (is_negone_cons Dino) Drep (expon_s Dprod_final Dexp)
      <- can_represents1 B N Drep_hi
      <- represents_negone Dino Drep_hi Dexp
      <- can_product N 2' N' Dprod
      <- represents_double_succ Drep_hi Dprod Drep'
      <- represents_fun1 Drep' Drep Deq
      <- nat_eq_inc Deq Deq'
      <- sum_prod_distribute'' (sum_s sum_z) Dprod'
            (product_s (sum_s (sum_s sum_z)) product_z) Dprod
            (sum_s (sum_s sum_z))
      <- prod_commute Dprod' Dprod''
      <- prod_resp nat_eq_ nat_eq_ Deq' Dprod'' Dprod_final.
represents_max :
   Pi M:nat. Pi N1:nat. Pi B1:binary (s M). Pi N2:nat. Pi B:binary (s M).
      represents N1 B1 -> represents N2 B -> is_negone B -> leq N1 N2 -> type.
represents_max_ :
   represents_max Drep1 Drep2 Dino Dleq
      <- can_one M Bone Dio
      <- one_is_nonzero Dio Dinz
      <- add_negone_carry Dino Dinz Dadd
      <- represents_one Dio Drepone
      <- sum_commute (sum_s sum_z) Dsum
      <- sum_add_corr_carry Drep2 Drepone Dsum Dadd Drep1 Dlt
      <- lt_succ_implies_leq Dlt Dleq.
binary_neq_contradict :
   Pi N1:nat. Pi B:binary N1. binary_neq B B -> false -> type.
binary_neq_contradict_ :
   binary_neq_contradict (binary_neq_ Disnz Dadd) Dfalse
      <- add_equal_zero Dadd Disz
      <- zero_nonzero_contradict binary_eq_ Disz Disnz Dfalse.
represents_neq :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi N2:nat. Pi N3:nat.
      binary_neq B1 B2 -> represents N2 B1 -> represents N3 B2 -> neq N2 N3
         -> type.
represents_neq| :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi N2:nat. Pi N3:nat.
      binary_neq B1 B2 -> represents N2 B1 -> represents N3 B2 -> maybe_eq N2 N3
         -> neq N2 N3 -> type.
represents_neq|_neq : represents_neq| X1 X2 X3 (maybe_eq_no D) D.
represents_neq|_eq :
   represents_neq| Dneq Drep Drep' (maybe_eq_yes nat_eq_) Dneq''
      <- represents_fun2 Drep Drep' Deq
      <- binary_neq_resp Deq binary_eq_ Dneq Dneq'
      <- binary_neq_contradict Dneq' Dfalse
      <- false_implies_neq Dfalse N1 N1 Dneq''.
represents_neq_ :
   represents_neq Dneq Drep Drep' Dneq'
      <- compare_for_nat_eq N2 N3 Dmaybe
      <- represents_neq| Dneq Drep Drep' Dmaybe Dneq'.
max_sum_one_contradict :
   Pi N1:nat. Pi Bmax:binary N1. Pi Bone:binary N1. Pi B:binary N1.
      is_negone Bmax -> is_one Bone -> add Bmax Bone B zero -> false -> type.
- :
   max_sum_one_contradict Dino Dio Dadd Dfalse
      <- can_zero N1 B3 Diz
      <- add_one_negone Dio Dino Diz Dadd'
      <- add_commute Dadd' Dadd''
      <- add_fun3 Dadd'' Dadd Deq X1
      <- bit_eq_contradict Deq Dfalse.
max_sum_contradict :
   Pi M:nat. Pi Bmax:binary M. Pi Nmax:nat. Pi N:nat. Pi B:binary M. Pi N1:nat.
      is_negone Bmax -> represents Nmax Bmax -> represents N B
         -> sum (s N1) Nmax N -> false -> type.
max_sum_contradict_z :
   max_sum_contradict Dino Drep1 (represents_s Dadd Dio Drep2) (sum_s sum_z)
      Dfalse
      <- represents_fun2 Drep2 Drep1 Dbeq
      <- add_resp Dbeq binary_eq_ binary_eq_ bit_eq_ Dadd Dadd1
      <- max_sum_one_contradict Dino Dio Dadd1 Dfalse.
max_sum_contradict_s :
   max_sum_contradict Dino Drep1 (represents_s Dadd1 Dio1 Drep2) (sum_s Dsum)
      Dfalse
      <- max_sum_contradict Dino Drep1 Drep2 Dsum Dfalse.
binary_neq_symm :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1.
      binary_neq B1 B2 -> binary_neq B2 B1 -> type.
binary_neq_symm_ :
   binary_neq_symm (binary_neq_ Disnz Dadd) (binary_neq_ Disnz' Dadd')
      <- can_neg_nonzero B1 B2 Disnz Dneg
      <- can_flipbit B5 B6 Dfl
      <- add_invert Dadd Dneg Dfl Dadd'
      <- neg_nocarry_nonzero Dneg X1 Disnz'.
add_overflow_result :
   Pi M:nat. Pi N1:nat. Pi B1:binary M. Pi N2:nat. Pi B2:binary M.
      Pi B3:binary M. Pi B4:bit. Pi B:binary M. Pi N:nat. Pi N3:nat.
      represents N1 B1 -> represents N2 B2 -> add B1 B2 B3 B4 -> is_negone B
         -> represents N B -> sum N1 N2 N3 -> lt N N3 -> add B1 B2 B3 one'
         -> type.
add_overflow_result| :
   Pi N1:nat.
      false
         -> Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
                add B1 B2 B3 one' -> type.
add_overflow_result_ :
   add_overflow_result Drep1 Drep2 Dadd Dino Drep3 Dsum Dlt Dadd.
add_overflow_result_| :
   add_overflow_result Drep1 Drep2 Dadd Dino Drep3 Dsum Dlt Dadd1
      <- sum_add_corr3 Drep1 Drep2 Drep4 Dsum1 Dadd
      <- sum_fun3 Dsum1 Dsum Dneq
      <- represents_resp Dneq binary_eq_ Drep4 Drep5
      <- lt_sum Dsum2 Dlt
      <- sum_commute Dsum2 Dsum3
      <- max_sum_contradict Dino Drep3 Drep5 Dsum3 Dfalse
      <- add_overflow_result| Dfalse B1 B2 B3 Dadd1.
add_greater :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B12:binary N1.
      Pi B23:binary N1. Pi B3:binary N1. Pi B13:binary N1.
      add B1 B2 B12 one' -> add B2 B23 B3 zero -> add B1 B3 B13 one' -> type.
add_greater_ :
   add_greater Dadd1 Dadd2 Dadd4
      <- can_represents1 B1 N2 Drep1
      <- can_represents1 B5 N5 Drep2
      <- can_represents1 B4 N4 Drep4
      <- can_sum N2 N5 N3 Dsum1
      <- sum_add_corr4 Drep2' Drep5 Drep4 Dsum2 Dadd2
      <- represents_fun1 Drep2' Drep2 Dneq
      <- sum_resp Dneq nat_eq_ nat_eq_ Dsum2 Dsum3
      <- can_sum N2 N4 N6 Dsum4
      <- can_negone N1 Bmax Dino
      <- can_represents1 Bmax Nmax Drep6
      <- sum_add_corr_carry Drep1 Drep2 Dsum1 Dadd1 Drep6 Dlt
      <- sum_implies_leq Dsum3 Dleq1
      <- leq_reflex N2 Dleq2
      <- sum_leq Dsum1 Dsum4 Dleq2 Dleq1 Dleq3
      <- lt_leq_trans Dlt Dleq3 Dlt1
      <- can_add B1 B4 B2 B3 Dadd3
      <- add_overflow_result Drep1 Drep4 Dadd3 Dino Drep6 Dsum4 Dlt1 Dadd4.
add_carry_less* :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1. Pi N2:nat.
      Pi N3:nat.
      add B1 B2 B3 one' -> represents N2 B1 -> represents N3 B3 -> leq_gt N2 N3
         -> lt N3 N2 -> type.
add_carry_less| : false -> Pi N1:nat. Pi N2:nat. lt N1 N2 -> type.
add_carry_less*_lt : add_carry_less* Dadd Drep1 Drep3 (leq_gt_gt Dlt) Dlt.
add_carry_less*_leq :
   add_carry_less* Dadd Drep1 Drep3 (leq_gt_leq Dleq) Dlt
      <- leq_implies_sum Dsum Dleq
      <- sum_commute Dsum Dsum1
      <- sum_implies_leq Dsum1 Dleq1
      <- can_represents Dleq1 Drep3 Drep2
      <- sum_add_corr Drep1 Drep2 Drep3 Dsum Dadd1
      <- add_commute Dadd1 Dadd2
      <- add_commute Dadd Dadd3
      <- add_fun1 Dadd3 Dadd2 Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- add_carry_less| Dfalse N1 N2 Dlt.
add_carry_less :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1. Pi N2:nat.
      Pi N3:nat.
      add B1 B2 B3 one' -> represents N2 B1 -> represents N3 B3 -> lt N3 N2
         -> type.
add_carry_less_ :
   add_carry_less Dadd Drep1 Drep3 Dlt
      <- dichotomy N2 N3 Dleqgt
      <- add_carry_less* Dadd Drep1 Drep3 Dleqgt Dlt.
can_nonzero_add* :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
      Pi B4:binary N1. Pi B5:binary N1. Pi B6:binary N1. Pi B7:binary N1.
      Pi B8:binary N1. Pi B9:bit.
      add B1 B2 B3 zero -> add B4 B5 B6 one' -> add B5 B7 B2 zero
         -> add B1 B8 B4 B9 -> maybe_zero B8 -> add B1 B8 B4 zero
         -> is_nonzero B8 -> type.
can_nonzero_add| :
   Pi N1:nat.
      false
         -> Pi B1:binary N1. Pi B8:binary N1. Pi B4:binary N1.
                add B1 B8 B4 zero -> is_nonzero B8 -> type.
can_nonzero_add*_ :
   can_nonzero_add* Dadd1 Dadd2 Dadd3 Dadd4 (maybe_zero_no Dinz) Dadd4 Dinz.
can_nonzero_add*_zero :
   can_nonzero_add* Dadd1 Dadd2 Dadd3 Dadd4 (maybe_zero_yes Diz) Dadd9 Dinz
      <- add_ident B1 Diz Dadd5
      <- add_commute Dadd5 Dadd6
      <- add_fun3 Dadd6 Dadd4 Dbiteq Dbeq
      <- add_resp Dbeq binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd7
      <- can_represents1 B7 N3 Drep2
      <- sum_add_corr4 Drep5 Drep7 Drep2 Dsum1 Dadd3
      <- sum_implies_leq Dsum1 Dleq1
      <- can_represents1 B4 N4 Drep4
      <- leq_reflex N4 Dleq2
      <- can_sum N4 N5 N Dsum2
      <- sum_add_corr3 Drep4 Drep2 Drep3 Dsum3 Dadd7
      <- sum_leq Dsum2 Dsum3 Dleq2 Dleq1 Dleq3
      <- can_represents Dleq3 Drep3 DrepN
      <- sum_add_corr Drep4 Drep5 DrepN Dsum2 Dadd8
      <- add_fun3 Dadd2 Dadd8 Dbiteq1 Dbeq1
      <- bit_eq_contradict Dbiteq1 Dfalse
      <- can_nonzero_add| Dfalse B1 B8 B4 Dadd9 Dinz.
can_nonzero_add*_carry :
   can_nonzero_add* Dadd1 Dadd2 Dadd3 Dadd4 Dmb Dadd Dinz
      <- can_represents1 B1 N2 Drep1
      <- can_represents1 B4 N4 Drep4
      <- add_carry_less Dadd4 Drep1 Drep4 Dlt
      <- lt_implies_leq Dlt Dleq
      <- can_represents1 B9 N6 Drep2
      <- sum_add_corr3 Drep1 Drep2 Drep3 Dsum1 Dadd1
      <- sum_add_corr4 Drep5 Drep7 Drep2 Dsum2 Dadd3
      <- sum_implies_leq Dsum2 Dleq1
      <- can_sum N4 N5 N9 Dsum3
      <- sum_leq Dsum3 Dsum1 Dleq Dleq1 Dleq2
      <- can_represents Dleq2 Drep3 Drep9
      <- sum_add_corr_carry Drep4 Drep5 Dsum3 Dadd2 Drep9 Dlt1
      <- lt_contradict Dlt1 Dfalse
      <- can_nonzero_add| Dfalse B1 B8 B4 Dadd Dinz.
can_nonzero_add :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
      Pi B4:binary N1. Pi B5:binary N1. Pi B6:binary N1. Pi B7:binary N1.
      Pi B8:binary N1.
      add B1 B2 B3 zero -> add B4 B5 B6 one' -> add B5 B7 B2 zero
         -> add B1 B8 B4 zero -> is_nonzero B8 -> type.
can_nonzero_add_ :
   can_nonzero_add Dadd1 Dadd2 Dadd3 Dadd Dinz
      <- can_add' B1 B8 B4 B9 Dadd4
      <- compare_for_zero B8 Dmbz
      <- can_nonzero_add* Dadd1 Dadd2 Dadd3 Dadd4 Dmbz Dadd Dinz.
negone_add :
   Pi N1:nat. Pi Bmax:binary N1. Pi B1:binary N1. Pi B2:binary N1. Pi N2:nat.
      is_negone Bmax -> add Bmax B1 B2 one' -> represents N2 B2
         -> represents (s N2) B1 -> type.
negone_add_ :
   negone_add Dino Dadd Drep1 Drep2
      <- can_one N3 B2 Dio
      <- negate_one Dio Dino Dneg
      <- neg_reverse Dneg Dneg1
      <- represents_one Dio Drepo
      <- add_invert Dadd Dneg1 flipbit_one Dadd1
      <- sum_add_corr3 Drepo Drep1 Drep2' Dsum Dadd1
      <- sum_fun3 Dsum (sum_s sum_z) Dneq
      <- represents_resp Dneq binary_eq_ Drep2' Drep2.
sum_add_corr_carry_rep :
   Pi M:nat. Pi N1:nat. Pi B1:binary M. Pi N2:nat. Pi B2:binary M. Pi N3:nat.
      Pi B3:binary M. Pi B:binary M. Pi N:nat. Pi N3':nat.
      represents N1 B1 -> represents N2 B2 -> sum N1 N2 N3 -> add B1 B2 B3 one'
         -> is_negone B -> represents N B -> represents N3' B3
         -> sum N (s N3') N3 -> type.
- :
   sum_add_corr_carry_rep Drep1 Drep2 Dsum (add_ Dadd) Dino Drep-1 Drep3
      Dsum''''
      <- can_binary_append ($ zero nil$) B1 B1' (sum_s sum_z) Dba1
      <- can_binary_append ($ zero nil$) B2 B2' (sum_s sum_z) Dba2
      <- can_binary_append ($ one' nil$) B3 B3' (sum_s sum_z) Dba3
      <- addc_append (addc_cons addc_nil addbit_001) Dadd Dba1 Dba2 Dba3 Dadd'
      <- represents_append_zero (is_zero_cons is_zero_nil) Drep1 Dba1 Drep1'
      <- represents_append_zero (is_zero_cons is_zero_nil) Drep2 Dba2 Drep2'
      <- can_represents1 B3 N3lo Drep3
      <- represents_negone Dino Drep-1 Dexp
      <- sum_add_corr5 Drep1' Drep2' Drep3' Dsum (add_ Dadd')
      <- can_sum N3lo (s N-1) N3' Dsum'
      <- represents_append_one (is_one_ is_zero_nil) Drep3 Dba3 Dexp Dsum'
            Drep3''
      <- represents_fun1 Drep3'' Drep3' Deq
      <- sum_commute Dsum' Dsum''
      <- sum_shift Dsum'' Dsum'''
      <- sum_resp nat_eq_ nat_eq_ Deq Dsum''' Dsum''''.
sum_add_corr_rem* :
   Pi N:nat. Pi N1:nat. Pi B1:binary N. Pi N2:nat. Pi B2:binary N. Pi N3:nat.
      Pi Bmax:binary N. Pi Nmax:nat. Pi N4:nat. Pi N3':nat. Pi B3:binary N.
      Pi BIT:bit.
      represents N1 B1 -> represents N2 B2 -> sum N1 N2 N3 -> is_negone Bmax
         -> represents Nmax Bmax -> quotrem N3 (s Nmax) N4 N3'
         -> add B1 B2 B3 BIT -> represents N3' B3 -> type.
- :
   sum_add_corr_rem* Drep1 Drep2 Dsum1 Dino Drepmax Dqr Dadd1 Drep5
      <- sum_add_corr3 Drep1 Drep2 Drep3 Dsum2 Dadd1
      <- sum_fun3 Dsum2 Dsum1 Dnateq1
      <- represents_resp Dnateq1 binary_eq_ Drep3 Drep4
      <- represents_max Drep4 Drepmax Dino Dleq
      <- lt_succ Nmax Dlt
      <- leq_lt_trans Dleq Dlt Dlt1
      <- sum_ident N3 Dsum3
      <- quotrem_add_upto_divisor Dlt1 quotrem_z Dsum3 Dqr1
      <- quotrem_fun Dqr1 Dqr X1 Dnateq2
      <- represents_resp Dnateq2 binary_eq_ Drep4 Drep5.
- :
   sum_add_corr_rem* Drep1 Drep2 Dsum1 Dino Drepmax Dqr Dadd1 Drep4
      <- sum_add_corr_carry_rep Drep1 Drep2 Dsum1 Dadd1 Dino Drepmax Drep3 Dsum2
      <- sum_shift' Dsum3 Dsum2
      <- sum_commute Dsum3 Dsum4
      <- represents_max Drep3 Drepmax Dino Dleq
      <- lt_succ Nmax Dlt
      <- leq_lt_trans Dleq Dlt Dlt1
      <- sum_ident (s Nmax) Dsum5
      <- quotrem_sumprod (product_s Dsum5 product_z) Dsum4 Dlt1 Dqr1
      <- quotrem_fun Dqr1 Dqr X1 Dnateq1
      <- represents_resp Dnateq1 binary_eq_ Drep3 Drep4.
sum_add_corr_rem :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N:nat. Pi Bmax:binary N. Pi Nmax:nat.
      Pi N4:nat. Pi N1':nat. Pi N5:nat. Pi N2':nat. Pi N6:nat. Pi N3':nat.
      Pi B1:binary N. Pi B2:binary N. Pi B3:binary N. Pi BIT:bit.
      sum N1 N2 N3 -> is_negone Bmax -> represents Nmax Bmax
         -> quotrem N1 (s Nmax) N4 N1' -> quotrem N2 (s Nmax) N5 N2'
         -> quotrem N3 (s Nmax) N6 N3' -> represents N1' B1 -> represents N2' B2
         -> represents N3' B3 -> add B1 B2 B3 BIT -> type.
- :
   sum_add_corr_rem Dsum1 Dino DrepMax Dqr1 Dqr2 Dqr3 Drep1 Drep2 Drep3 Dadd1
      <- rem_sum nat_eq_ Dsum1 Dqr1 Dqr2 Dsum2 Dqr4 Dqr5
      <- quotrem_fun Dqr5 Dqr3 Dnateq1 Dnateq2
      <- quotrem_resp nat_eq_ nat_eq_ nat_eq_ Dnateq2 Dqr4 Dqr4'
      <- can_add B1 B2 B3' BIT Dadd
      <- sum_add_corr_rem* Drep1 Drep2 Dsum2 Dino DrepMax Dqr4' Dadd Drep4
      <- represents_fun2 Drep4 Drep3 Dbeq
      <- add_resp binary_eq_ binary_eq_ Dbeq bit_eq_ Dadd Dadd1.
add_compose_maybe_carry :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1. Pi C1:bit.
      Pi B4:binary N1. Pi B5:binary N1. Pi C2:bit. Pi B6:binary N1. Pi C3:bit.
      add B1 B2 B3 C1 -> add B3 B4 B5 C2 -> add B2 B4 B6 zero -> add B1 B6 B5 C3
         -> type.
add_compose_maybe_carry_00 :
   add_compose_maybe_carry Dadd1 Dadd2 Dadd3 Dadd4
      <- add_assoc Dadd1 Dadd2 Dadd5 Dadd6
      <- add_fun3 Dadd5 Dadd3 X1 Dbeq
      <- add_resp binary_eq_ Dbeq binary_eq_ bit_eq_ Dadd6 Dadd4.
add_compose_maybe_carry_1* :
   add_compose_maybe_carry Dadd1 Dadd2 Dadd3 Dadd4
      <- add_carry_nonzero Dadd1 Dinz1 X2
      <- can_neg_nonzero B2 B1 Dinz1 Dneg
      <- add_invert Dadd1 Dneg flipbit_one Dadd5
      <- add_assoc Dadd5 Dadd3 Dadd6 Dadd7
      <- add_fun3 Dadd6 Dadd2 X1 Dbeq
      <- add_resp binary_eq_ Dbeq binary_eq_ bit_eq_ Dadd7 Dadd8
      <- neg_reverse Dneg Dneg1
      <- add_invert Dadd8 Dneg1 flipbit_zero Dadd4.
add_compose_maybe_carry| :
   Pi N1:nat. Pi C:bit.
      false
         -> Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
                add B1 B2 B3 C -> type.
add_compose_maybe_carry* :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
      Pi B4:binary N1. Pi B5:binary N1. Pi B6:binary N1. Pi B7:binary N1.
      Pi B8:bit. Pi C:bit.
      add B1 B2 B3 zero -> add B3 B4 B5 one' -> add B2 B4 B6 zero
         -> add B1 B6 B7 B8 -> add B1 B6 B5 C -> type.
add_compose_maybe_carry*_ :
   add_compose_maybe_carry* Dadd1 Dadd2 Dadd3 Dadd4 Dadd5
      <- can_represents1 B3 N5 Drep3
      <- sum_add_corr4 Drep1 Drep2 Drep3 Dsum1 Dadd1
      <- can_represents1 B4 N7 Drep4
      <- can_sum N5 N7 N5p Dsum2p
      <- sum_add_corr3 Drep2 Drep4 Drep6 Dsum3 Dadd3
      <- sum_assoc Dsum1 Dsum2p Dsum3' Dsum4p'
      <- sum_fun3 Dsum3' Dsum3 Dneq
      <- sum_resp nat_eq_ Dneq nat_eq_ Dsum4p' Dsum4p
      <- can_negone N1 Bmax Dino
      <- can_represents1 Bmax Nmax Drepm
      <- sum_add_corr_carry_rep Drep3 Drep4 Dsum2p Dadd2 Dino Drepm Drep5 Dsum2
      <- sum_add_corr_carry_rep Drep1 Drep6 Dsum4p Dadd4 Dino Drepm Drep5' Dsum4
      <- sum_fun2 Dsum4 Dsum2 Dneq1
      <- nat_eq_dec Dneq2 Dneq1
      <- represents_resp Dneq2 binary_eq_ Drep5' Drep5''
      <- represents_fun2 Drep5'' Drep5 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd4 Dadd5.
add_compose_maybe_carry*_0 :
   add_compose_maybe_carry* Dadd1 Dadd2 Dadd3 Dadd4 Dadd5
      <- can_represents1 B3 N5 Drep3
      <- sum_add_corr4 Drep1 Drep2 Drep3 Dsum1 Dadd1
      <- can_represents1 B4 N7 Drep4
      <- can_sum N5 N7 N5p Dsum2p
      <- sum_add_corr3 Drep2 Drep4 Drep6 Dsum3 Dadd3
      <- sum_assoc Dsum1 Dsum2p Dsum3' Dsum4p'
      <- sum_fun3 Dsum3' Dsum3 Dneq
      <- sum_resp nat_eq_ Dneq nat_eq_ Dsum4p' Dsum4p
      <- can_negone N1 Bmax Dino
      <- can_represents1 Bmax Nmax Drepm
      <- sum_add_corr_carry_rep Drep3 Drep4 Dsum2p Dadd2 Dino Drepm Drep5 Dsum2
      <- sum_add_corr3 Drep1 Drep6 Drep5' Dsum4 Dadd4
      <- sum_fun3 Dsum4 Dsum4p Dneq1
      <- represents_resp Dneq1 binary_eq_ Drep5' Drep51
      <- represents_max Drep51 Drepm Dino Dleq
      <- sum_lt Dsum2 Dlt
      <- lt_leq_contradict Dlt Dleq Dfalse
      <- add_compose_maybe_carry| Dfalse B2 B6 B5 Dadd5.
add_compose_maybe_carry_01 :
   add_compose_maybe_carry Dadd1 Dadd2 Dadd3 Dadd4
      <- can_add B1 B6 B7 B8 Dadd5
      <- add_compose_maybe_carry* Dadd1 Dadd2 Dadd3 Dadd5 Dadd4.
max_and_nodiff :
   Pi N1:nat. Pi Bmax:binary N1.
      is_negone Bmax -> Pi B:binary N1. and B Bmax B -> type.
- : max_and_nodiff is_negone_sing ($ one' nil$) (and_cons and_nil and_bit_11).
- : max_and_nodiff is_negone_sing ($ zero nil$) (and_cons and_nil and_bit_01).
- :
   max_and_nodiff (is_negone_cons Dino) ($ one' B) (and_cons Dand and_bit_11)
      <- max_and_nodiff Dino B Dand.
- :
   max_and_nodiff (is_negone_cons Dino) ($ zero B) (and_cons Dand and_bit_01)
      <- max_and_nodiff Dino B Dand.
sound_infer_represents :
   Pi N1:nat. Pi B:binary N1. Pi N:nat.
      infer_represents B N -> represents N B -> type.
-nil : sound_infer_represents infer_represents_z (represents_z is_zero_nil).
-cons0 :
   sound_infer_represents (infer_represents_s0 Dsum Dinf) Drep'
      <- sound_infer_represents Dinf Drep
      <- sum_ident N2 Dsum'
      <- prod_commute (product_s Dsum (product_s Dsum' product_z)) Dprod
      <- represents_double Drep Dprod Drep'.
-cons1 :
   sound_infer_represents (infer_represents_s1 Dsum Dinf) Drep'
      <- sound_infer_represents Dinf Drep
      <- sum_ident N2 Dsum'
      <- prod_commute (product_s Dsum (product_s Dsum' product_z)) Dprod
      <- represents_double_succ Drep Dprod Drep'.
represents_unrepresentable_contradict :
   Pi Nbits:nat. Pi N:nat. Pi B:binary Nbits.
      represents N B -> unrepresentable N Nbits -> false -> type.
- :
   represents_unrepresentable_contradict Drep1
      (unrepresentable_ Dlt DrepMax Disno) Dfalse
      <- represents_max Drep1 DrepMax Disno Dleq
      <- lt_leq_contradict Dlt Dleq Dfalse.
maybe_representable : nat -> nat -> type.
maybe_representable_yes : maybe_representable N Nbits <- represents N B.
maybe_representable_no : maybe_representable N Nbits <- unrepresentable N Nbits.
decide_representable* :
   Pi Nbits:nat. Pi Bmax:binary Nbits. Pi Nmax:nat. Pi N:nat.
      is_negone Bmax -> represents Nmax Bmax -> leq_gt N Nmax
         -> maybe_representable N Nbits -> type.
- :
   decide_representable* Dino Drepmax (leq_gt_leq Dleq)
      (maybe_representable_yes Drep)
      <- can_represents Dleq Drepmax Drep.
- :
   decide_representable* Dino Drepmax (leq_gt_gt Dlt)
      (maybe_representable_no (unrepresentable_ Dlt Drepmax Dino)).
decide_representable :
   Pi N:nat. Pi Nbits:nat. maybe_representable N (s Nbits) -> type.
- :
   decide_representable N Nbits Dmaybe
      <- can_negone Nbits Bmax Disno
      <- can_represents1 Bmax Nmax Drepmax
      <- dichotomy N Nmax Dleqgt
      <- decide_representable* Disno Drepmax Dleqgt Dmaybe.
represents_zero :
   Pi N1:nat. Pi B:binary N1. represents z B -> is_zero B -> type.
- : represents_zero (represents_z Diz) Diz.
can_times :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1.
      Pi Ntimes:nat.
      represents N2 B1 -> represents N3 B2 -> product Ntimes N2 N3
         -> times B1 Ntimes B2 -> type.
- : can_times Drep1 Drep2 product_z (times_z Diz) <- represents_zero Drep2 Diz.
- :
   can_times Drep1 Drep2 (product_s Dsum Dprod) (times_s Dadd Daddt)
      <- sum_commute Dsum Dsum1
      <- sum_implies_leq Dsum1 Dleq1
      <- can_represents Dleq1 Drep2 Drep3
      <- sum_add_corr Drep1 Drep3 Drep2 Dsum Dadd
      <- can_times Drep1 Drep3 Dprod Daddt.
times_rep_result :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi N3:nat. Pi B2:binary N1.
      Pi Ntimes:nat.
      represents N2 B1 -> represents N3 B2 -> product Ntimes N2 N3
         -> times B1 Ntimes B2 -> type.
- : times_rep_result Drep1 (represents_z Drep2) product_z (times_z Drep2).
- :
   times_rep_result Drep1 Drep4 (product_s Dsum1 Dprod1) (times_s Dadd1 Dtimes1)
      <- times_rep_result Drep1 Drep2 Dprod1 Dtimes1
      <- sum_add_corr3 Drep1 Drep2 Drep3 Dsum2 Dadd1
      <- sum_fun3 Dsum2 Dsum1 Dnateq1
      <- represents_resp Dnateq1 binary_eq_ Drep3 Drep4.
can_and_bit :
   Pi BIT1:bit. Pi BIT2:bit. Pi BIT3:bit. and_bit BIT1 BIT2 BIT3 -> type.
-00 : can_and_bit zero zero zero and_bit_00.
-01 : can_and_bit zero one' zero and_bit_01.
-10 : can_and_bit one' zero zero and_bit_10.
-11 : can_and_bit one' one' one' and_bit_11.
and_bit_fun :
   Pi BIT1:bit. Pi BIT2:bit. Pi BIT3:bit. Pi BIT3':bit.
      and_bit BIT1 BIT2 BIT3 -> and_bit BIT1 BIT2 BIT3' -> bit_eq BIT3 BIT3'
         -> type.
- : and_bit_fun and_bit_00 and_bit_00 bit_eq_.
- : and_bit_fun and_bit_01 and_bit_01 bit_eq_.
- : and_bit_fun and_bit_10 and_bit_10 bit_eq_.
- : and_bit_fun and_bit_11 and_bit_11 bit_eq_.
can_or_bit :
   Pi BIT1:bit. Pi BIT2:bit. Pi BIT3:bit. or_bit BIT1 BIT2 BIT3 -> type.
-00 : can_or_bit zero zero zero or_bit_00.
-01 : can_or_bit zero one' one' or_bit_01.
-10 : can_or_bit one' zero one' or_bit_10.
-11 : can_or_bit one' one' one' or_bit_11.
or_bit_fun :
   Pi BIT1:bit. Pi BIT2:bit. Pi BIT3:bit. Pi BIT3':bit.
      or_bit BIT1 BIT2 BIT3 -> or_bit BIT1 BIT2 BIT3' -> bit_eq BIT3 BIT3'
         -> type.
- : or_bit_fun or_bit_00 or_bit_00 bit_eq_.
- : or_bit_fun or_bit_01 or_bit_01 bit_eq_.
- : or_bit_fun or_bit_10 or_bit_10 bit_eq_.
- : or_bit_fun or_bit_11 or_bit_11 bit_eq_.
can_xor_bit :
   Pi BIT1:bit. Pi BIT2:bit. Pi BIT3:bit. xor_bit BIT1 BIT2 BIT3 -> type.
-00 : can_xor_bit zero zero zero xor_bit_00.
-01 : can_xor_bit zero one' one' xor_bit_01.
-10 : can_xor_bit one' zero one' xor_bit_10.
-11 : can_xor_bit one' one' zero xor_bit_11.
xor_bit_fun :
   Pi BIT1:bit. Pi BIT2:bit. Pi BIT3:bit. Pi BIT3':bit.
      xor_bit BIT1 BIT2 BIT3 -> xor_bit BIT1 BIT2 BIT3' -> bit_eq BIT3 BIT3'
         -> type.
- : xor_bit_fun xor_bit_00 xor_bit_00 bit_eq_.
- : xor_bit_fun xor_bit_01 xor_bit_01 bit_eq_.
- : xor_bit_fun xor_bit_10 xor_bit_10 bit_eq_.
- : xor_bit_fun xor_bit_11 xor_bit_11 bit_eq_.
can_and :
   Pi N:nat. Pi B1:binary N. Pi B2:binary N. Pi B3:binary N.
      and B1 B2 B3 -> type.
- : can_and nil$ nil$ nil$ and_nil.
- :
   can_and ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3) (and_cons Dand Dandbit)
      <- can_and_bit BIT1 BIT2 BIT3 Dandbit
      <- can_and B1 B2 B3 Dand.
and_fun3 :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
      Pi B3':binary N1.
      and B1 B2 B3 -> and B1 B2 B3' -> binary_eq B3 B3' -> type.
- : and_fun3 and_nil and_nil binary_eq_.
- :
   and_fun3 (and_cons Dand Dandb) (and_cons Dand' Dandb') Dbeq2
      <- and_bit_fun Dandb Dandb' Dbiteq
      <- and_fun3 Dand Dand' Dbeq1
      <- binary_eq_cons Dbiteq Dbeq1 Dbeq2.
can_or :
   Pi N:nat. Pi B1:binary N. Pi B2:binary N. Pi B3:binary N. or B1 B2 B3 -> type.
- : can_or nil$ nil$ nil$ or_nil.
- :
   can_or ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3) (or_cons Dor Dorbit)
      <- can_or_bit BIT1 BIT2 BIT3 Dorbit
      <- can_or B1 B2 B3 Dor.
or_fun3 :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
      Pi B3':binary N1. or B1 B2 B3 -> or B1 B2 B3' -> binary_eq B3 B3' -> type.
- : or_fun3 or_nil or_nil binary_eq_.
- :
   or_fun3 (or_cons Dor Dorb) (or_cons Dor' Dorb') Dbeq2
      <- or_bit_fun Dorb Dorb' Dbiteq
      <- or_fun3 Dor Dor' Dbeq1
      <- binary_eq_cons Dbiteq Dbeq1 Dbeq2.
can_xor :
   Pi N:nat. Pi B1:binary N. Pi B2:binary N. Pi B3:binary N.
      xor B1 B2 B3 -> type.
- : can_xor nil$ nil$ nil$ xor_nil.
- :
   can_xor ($ BIT1 B1) ($ BIT2 B2) ($ BIT3 B3) (xor_cons Dxor Dxorbit)
      <- can_xor_bit BIT1 BIT2 BIT3 Dxorbit
      <- can_xor B1 B2 B3 Dxor.
xor_fun3 :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
      Pi B3':binary N1.
      xor B1 B2 B3 -> xor B1 B2 B3' -> binary_eq B3 B3' -> type.
- : xor_fun3 xor_nil xor_nil binary_eq_.
- :
   xor_fun3 (xor_cons Dxor Dxorb) (xor_cons Dxor' Dxorb') Dbeq2
      <- xor_bit_fun Dxorb Dxorb' Dbiteq
      <- xor_fun3 Dxor Dxor' Dbeq1
      <- binary_eq_cons Dbiteq Dbeq1 Dbeq2.
and_bit_ident : Pi BIT:bit. and_bit BIT BIT BIT -> type.
- : and_bit_ident zero and_bit_00.
- : and_bit_ident one' and_bit_11.
and_ident : Pi N1:nat. Pi B:binary N1. and B B B -> type.
- : and_ident nil$ and_nil.
- :
   and_ident ($ BIT B) (and_cons Dand Dandb)
      <- and_bit_ident BIT Dandb
      <- and_ident B Dand.
and_append :
   Pi N1:nat. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1. Pi N2:nat.
      Pi N3:nat. Pi B:binary N2. Pi BB1:binary N3. Pi BB2:binary N3.
      Pi BB3:binary N3.
      and B1 B2 B3 -> binary_append B B1 BB1 -> binary_append B B2 BB2
         -> binary_append B B3 BB3 -> and BB1 BB2 BB3 -> type.
- :
   and_append and_nil binary_append_nil binary_append_nil binary_append_nil Dand
      <- and_ident B1 Dand.
- :
   and_append (and_cons Dand Dandbit) (binary_append_cons Dbapp1)
      (binary_append_cons Dbapp2) (binary_append_cons Dbapp3)
      (and_cons Dandnew Dandbit)
      <- and_append Dand Dbapp1 Dbapp2 Dbapp3 Dandnew.
can_addc_wo :
   Pi N:nat. Pi BITI:bit. Pi B1:binary (s N). Pi B2:binary (s N).
      Pi B3:binary (s N). Pi BITC:bit. Pi BITO:bit.
      addc_wo BITI B1 B2 B3 BITC BITO -> type.
- :
   can_addc_wo CARRY_IN B1 B2 B3 CARRY OVERFLOW
      (addc_wo_ Dxor Dba Daddbit Dadd Dhb2 Dhb1)
      <- can_highbit B1 BIT1 B1' Dhb1
      <- can_highbit B2 BIT2 B2' Dhb2
      <- can_addc CARRY_IN B1' B2' B3' CARRY_OUT Dadd
      <- can_addbit BIT1 BIT2 CARRY_OUT BIT3 CARRY Daddbit
      <- can_binary_append ($ BIT3 nil$) B3' B3 (sum_s sum_z) Dba
      <- can_xor_bit CARRY_OUT CARRY OVERFLOW Dxor.
can_add_wo :
   Pi N:nat. Pi B1:binary (s N). Pi B2:binary (s N). Pi B3:binary (s N).
      Pi BITC:bit. Pi BITO:bit. add_wo B1 B2 B3 BITC BITO -> type.
- :
   can_add_wo B1 B2 B3 BITC BITO (add_wo_ D)
      <- can_addc_wo zero B1 B2 B3 BITC BITO D.
can_addc_wo' :
   Pi N:nat. Pi BITI:bit. Pi B1:binary (s N). Pi B2:binary (s N).
      Pi B3:binary (s N). Pi BITC:bit. Pi BITO:bit.
      addc_wo BITI B1 B2 B3 BITC BITO -> type.
- :
   can_addc_wo' CARRY_IN B1 B2 B3 CARRY OVERFLOW
      (addc_wo_ Dxor Dba3 Daddbit Dadd Dhb2 Dhb1)
      <- can_highbit B1 BIT1 B1' Dhb1
      <- can_highbit B3 BIT3 B3' Dhb3
      <- highbit_is_binary_append Dhb3 Dba3
      <- can_addc' CARRY_IN B1' B2' B3' CARRY_OUT Dadd
      <- can_addbit' BIT1 BIT2 CARRY_OUT BIT3 CARRY Daddbit
      <- can_binary_append ($ BIT2 nil$) B2' B2 (sum_s sum_z) Dba2
      <- binary_append_is_highbit Dba2 Dhb2
      <- can_xor_bit CARRY_OUT CARRY OVERFLOW Dxor.
can_add_wo' :
   Pi N:nat. Pi B1:binary (s N). Pi B2:binary (s N). Pi B3:binary (s N).
      Pi BITC:bit. Pi BITO:bit. add_wo B1 B2 B3 BITC BITO -> type.
- :
   can_add_wo' B1 B2 B3 BITC BITO (add_wo_ D)
      <- can_addc_wo' zero B1 B2 B3 BITC BITO D.
addc_wo_is_addc :
   Pi N1:nat. Pi BITI:bit. Pi B1:binary (s N1). Pi B2:binary (s N1).
      Pi B3:binary (s N1). Pi BITO:bit. Pi B4:bit.
      addc_wo BITI B1 B2 B3 BITO B4 -> addc BITI B1 B2 B3 BITO -> type.
- :
   addc_wo_is_addc (addc_wo_ X1 Dba3 Daddbit Dadd Dhb2 Dhb1) Dadd'
      <- highbit_is_binary_append Dhb1 Dba1
      <- highbit_is_binary_append Dhb2 Dba2
      <- addc_append (addc_cons addc_nil Daddbit) Dadd Dba1 Dba2 Dba3 Dadd'.
add_wo_is_add :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi B3:binary (s N1).
      Pi BIT:bit. Pi B4:bit. add_wo B1 B2 B3 BIT B4 -> add B1 B2 B3 BIT -> type.
- : add_wo_is_add (add_wo_ D) (add_ D') <- addc_wo_is_addc D D'.
addc_is_addc_wo :
   Pi N1:nat. Pi BITI:bit. Pi B1:binary (s N1). Pi B2:binary (s N1).
      Pi B3:binary (s N1). Pi BITO:bit. Pi B4:bit.
      addc BITI B1 B2 B3 BITO -> addc_wo BITI B1 B2 B3 BITO B4 -> type.
- :
   addc_is_addc_wo Dadd (addc_wo_ Dxor Dba3 Daddbit Daddlo Dhb2 Dhb1)
      <- can_highbit B11 B4 B8 Dhb1
      <- can_highbit B12 B5 B9 Dhb2
      <- can_highbit B13 B6 B10 Dhb3
      <- highbit_is_binary_append Dhb1 Dba1
      <- highbit_is_binary_append Dhb2 Dba2
      <- highbit_is_binary_append Dhb3 Dba3
      <- addc_append' (addc_cons addc_nil Daddbit) Daddlo Dba1 Dba2 Dba3 Dadd
      <- can_xor_bit B1 B2 B3 Dxor.
add_is_add_wo :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi B3:binary (s N1).
      Pi BIT:bit. Pi B4:bit. add B1 B2 B3 BIT -> add_wo B1 B2 B3 BIT B4 -> type.
- : add_is_add_wo (add_ D) (add_wo_ D') <- addc_is_addc_wo D D'.
addc_wo_fun3 :
   Pi N1:nat. Pi BIT:bit. Pi B1:binary (s N1). Pi B2:binary (s N1).
      Pi B3:binary (s N1). Pi BIT1:bit. Pi BIT2:bit. Pi B3':binary (s N1).
      Pi BIT1':bit. Pi BIT2':bit.
      addc_wo BIT B1 B2 B3 BIT1 BIT2 -> addc_wo BIT B1 B2 B3' BIT1' BIT2'
         -> bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> binary_eq B3 B3' -> type.
- :
   addc_wo_fun3 (addc_wo_ Dxor Dba Daddbit Dadd Dhb2 Dhb1)
      (addc_wo_ Dxor' Dba' Daddbit' Dadd' Dhb2' Dhb1') Deq_carry Deq_overflow
      Deq
      <- highbit_fun Dhb1 Dhb1' Deqbit1 Deq1
      <- highbit_fun Dhb2 Dhb2' Deqbit2 Deq2
      <- addc_resp bit_eq_ Deq1 Deq2 binary_eq_ bit_eq_ Dadd Dadd''
      <- addc_fun3 Dadd'' Dadd' Deqbitc Deq3
      <- addbit_resp Deqbit1 Deqbit2 Deqbitc bit_eq_ bit_eq_ Daddbit Daddbit''
      <- addbit_fun3 Daddbit'' Daddbit' Deqbit3 Deq_carry
      <- binary_eq_cons Deqbit3 binary_eq_ Deq3hi
      <- binary_append_resp Deq3hi Deq3 binary_eq_ Dba Dba''
      <- binary_append_fun Dba'' Dba' Deq
      <- xor_bit_resp Deqbitc Deq_carry bit_eq_ Dxor Dxor''
      <- xor_bit_fun Dxor'' Dxor' Deq_overflow.
add_wo_fun3 :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi B3:binary (s N1).
      Pi BIT1:bit. Pi BIT2:bit. Pi B3':binary (s N1). Pi BIT1':bit.
      Pi BIT2':bit.
      add_wo B1 B2 B3 BIT1 BIT2 -> add_wo B1 B2 B3' BIT1' BIT2'
         -> bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> binary_eq B3 B3' -> type.
- : add_wo_fun3 (add_wo_ D) (add_wo_ D') D1 D2 D3 <- addc_wo_fun3 D D' D1 D2 D3.
addc_wo_fun1 :
   Pi N1:nat. Pi BIT:bit. Pi B1:binary (s N1). Pi B2:binary (s N1).
      Pi B3:binary (s N1). Pi BIT1:bit. Pi BIT2:bit. Pi B1':binary (s N1).
      Pi BIT1':bit. Pi BIT2':bit.
      addc_wo BIT B1 B2 B3 BIT1 BIT2 -> addc_wo BIT B1' B2 B3 BIT1' BIT2'
         -> bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> binary_eq B1 B1' -> type.
- :
   addc_wo_fun1 (addc_wo_ Dxor Dba Daddbit Dadd Dhb2 Dhb1)
      (addc_wo_ Dxor' Dba' Daddbit' Dadd' Dhb2' Dhb1') Deq_carry Deq_overflow
      Deq
      <- highbit_fun Dhb2 Dhb2' Deqbit2 Deq2
      <- binary_append'_fun Dba Dba' Deq3hi Deq3 X2
      <- addc_resp bit_eq_ binary_eq_ Deq2 Deq3 bit_eq_ Dadd Dadd''
      <- addc_fun1 Dadd'' Dadd' Deqbitc Deq1
      <- binary_eq_cons' Deqbit3 X1 Deq3hi
      <- addbit_resp bit_eq_ Deqbit2 Deqbitc Deqbit3 bit_eq_ Daddbit Daddbit''
      <- addbit_fun1 Daddbit'' Daddbit' Deqbit1 Deq_carry
      <- highbit_resp binary_eq_ Deqbit1 Deq1 Dhb1 Dhb1''
      <- highbit_fun1 Dhb1'' Dhb1' Deq
      <- xor_bit_resp Deqbitc Deq_carry bit_eq_ Dxor Dxor''
      <- xor_bit_fun Dxor'' Dxor' Deq_overflow.
add_wo_fun1 :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi B3:binary (s N1).
      Pi BIT1:bit. Pi BIT2:bit. Pi B1':binary (s N1). Pi BIT1':bit.
      Pi BIT2':bit.
      add_wo B1 B2 B3 BIT1 BIT2 -> add_wo B1' B2 B3 BIT1' BIT2'
         -> bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> binary_eq B1 B1' -> type.
- : add_wo_fun1 (add_wo_ D) (add_wo_ D') D1 D2 D3 <- addc_wo_fun1 D D' D1 D2 D3.
addc_wo_commute :
   Pi N1:nat. Pi BITI:bit. Pi B1:binary (s N1). Pi B2:binary (s N1).
      Pi B3:binary (s N1). Pi CARRY:bit. Pi OVERFLOW:bit.
      addc_wo BITI B1 B2 B3 CARRY OVERFLOW
         -> addc_wo BITI B2 B1 B3 CARRY OVERFLOW -> type.
- :
   addc_wo_commute (addc_wo_ Dxor Dba Daddbit Dadd Dhb2 Dhb1)
      (addc_wo_ Dxor Dba Daddbit' Dadd' Dhb1 Dhb2)
      <- addc_commute Dadd Dadd'
      <- addbit_commute Daddbit Daddbit'.
add_wo_commute :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi B3:binary (s N1).
      Pi CARRY:bit. Pi OVERFLOW:bit.
      add_wo B1 B2 B3 CARRY OVERFLOW -> add_wo B2 B1 B3 CARRY OVERFLOW -> type.
- : add_wo_commute (add_wo_ D) (add_wo_ D') <- addc_wo_commute D D'.
can_n_bit_zero : Pi N:nat. Pi B:binary N. n_bit_zero N B -> type.
- : can_n_bit_zero z nil$ n_bit_zero_z.
- : can_n_bit_zero (s N) ($ zero B1) (n_bit_zero_s D) <- can_n_bit_zero N B1 D.
n_bit_zero_fun :
   Pi N:nat. Pi B:binary N. Pi B':binary N.
      n_bit_zero N B -> n_bit_zero N B' -> binary_eq B B' -> type.
- : n_bit_zero_fun n_bit_zero_z n_bit_zero_z binary_eq_.
- :
   n_bit_zero_fun (n_bit_zero_s Dnbz) (n_bit_zero_s Dnbz') Deq'
      <- n_bit_zero_fun Dnbz Dnbz' Deq
      <- binary_eq_cons bit_eq_ Deq Deq'.
can_pad : Pi M:nat. Pi N:nat. Pi B:binary M. Pi B':binary N. pad N B B' -> type.
- : can_pad z B1 nil$ pad_z.
- : can_pad (s N1) nil$ B1 (pad_nil D) <- can_n_bit_zero (s N1) B1 D.
- : can_pad (s N) ($ B2 B) ($ B2 B1) (pad_$ D) <- can_pad N B B1 D.
pad_fun :
   Pi N:nat. Pi N':nat. Pi N1:nat. Pi B1:binary N1. Pi B2:binary N.
      Pi B2':binary N'.
      nat_eq N N' -> pad N B1 B2 -> pad N' B1 B2' -> binary_eq B2 B2' -> type.
- : pad_fun nat_eq_ pad_z pad_z binary_eq_.
- :
   pad_fun nat_eq_ (pad_nil Dnbz) (pad_nil Dnbz') Deq
      <- n_bit_zero_fun Dnbz Dnbz' Deq.
- :
   pad_fun nat_eq_ (pad_$ Dpad) (pad_$ Dpad') Deq'
      <- pad_fun nat_eq_ Dpad Dpad' Deq
      <- binary_eq_cons bit_eq_ Deq Deq'.
pad_resp :
   Pi N:nat. Pi N':nat. Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi B1':binary N2.
      Pi B2:binary N. Pi B2':binary N'.
      nat_eq N N' -> binary_eq B1 B1' -> binary_eq B2 B2' -> pad N B1 B2
         -> pad N' B1' B2' -> type.
pad_resp_ : pad_resp nat_eq_ binary_eq_ binary_eq_ D D.
n_bit_zero_is_zero :
   Pi N:nat. Pi B:binary N. n_bit_zero N B -> is_zero B -> type.
- : n_bit_zero_is_zero n_bit_zero_z is_zero_nil.
- :
   n_bit_zero_is_zero (n_bit_zero_s D) (is_zero_cons D')
      <- n_bit_zero_is_zero D D'.
n_bit_one_is_one : Pi N:nat. Pi B:binary N. n_bit_one N B -> is_one B -> type.
- : n_bit_one_is_one (n_bit_one_ D) (is_one_ D') <- n_bit_zero_is_zero D D'.
sound_infer_represents_width :
   Pi N:nat. Pi Nsz:nat. Pi B:binary Nsz.
      infer_represents_width N Nsz B -> represents N B -> type.
- :
   sound_infer_represents_width (infer_represents_width_z D) (represents_z D')
      <- n_bit_zero_is_zero D D'.
- :
   sound_infer_represents_width (infer_represents_width_s Dadd Dnbz Dirw)
      (represents_s Dadd Dio Drep)
      <- sound_infer_represents_width Dirw Drep
      <- n_bit_one_is_one Dnbz Dio.
rotate_left_once_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary (s N1). Pi B2:binary (s N2).
      Pi B1':binary (s N1). Pi B2':binary (s N2).
      binary_eq B1 B2 -> binary_eq B1' B2' -> rotate_left_once B1 B1'
         -> rotate_left_once B2 B2' -> type.
- : rotate_left_once_resp binary_eq_ binary_eq_ D D.
rotate_right_once_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary (s N1). Pi B2:binary (s N2).
      Pi B1':binary (s N1). Pi B2':binary (s N2).
      binary_eq B1 B2 -> binary_eq B1' B2' -> rotate_right_once B1 B1'
         -> rotate_right_once B2 B2' -> type.
- : rotate_right_once_resp binary_eq_ binary_eq_ D D.
shift_left_once_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary (s N1). Pi B2:binary (s N2). Pi BIT1:bit.
      Pi BIT2:bit. Pi B1':binary (s N1). Pi B2':binary (s N2).
      binary_eq B1 B2 -> bit_eq BIT1 BIT2 -> binary_eq B1' B2'
         -> shift_left_once B1 BIT1 B1' -> shift_left_once B2 BIT2 B2' -> type.
- : shift_left_once_resp binary_eq_ bit_eq_ binary_eq_ D D.
shift_right_once_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary (s N1). Pi B2:binary (s N2). Pi BIT1:bit.
      Pi BIT2:bit. Pi B1':binary (s N1). Pi B2':binary (s N2).
      binary_eq B1 B2 -> bit_eq BIT1 BIT2 -> binary_eq B1' B2'
         -> shift_right_once B1 BIT1 B1' -> shift_right_once B2 BIT2 B2' -> type.
- : shift_right_once_resp binary_eq_ bit_eq_ binary_eq_ D D.
shift_arith_right_once_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary (s N1). Pi B2:binary (s N2).
      Pi B1':binary (s N1). Pi B2':binary (s N2).
      binary_eq B1 B2 -> binary_eq B1' B2' -> shift_arith_right_once B1 B1'
         -> shift_arith_right_once B2 B2' -> type.
- : shift_arith_right_once_resp binary_eq_ binary_eq_ D D.
rotate_left_resp :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N4:nat. Pi B1:binary (s N3).
      Pi B2:binary (s N4). Pi B1':binary (s N3). Pi B2':binary (s N4).
      nat_eq N1 N2 -> binary_eq B1 B2 -> binary_eq B1' B2'
         -> rotate_left N1 B1 B1' -> rotate_left N2 B2 B2' -> type.
- : rotate_left_resp nat_eq_ binary_eq_ binary_eq_ D D.
rotate_right_resp :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N4:nat. Pi B1:binary (s N3).
      Pi B2:binary (s N4). Pi B1':binary (s N3). Pi B2':binary (s N4).
      nat_eq N1 N2 -> binary_eq B1 B2 -> binary_eq B1' B2'
         -> rotate_right N1 B1 B1' -> rotate_right N2 B2 B2' -> type.
- : rotate_right_resp nat_eq_ binary_eq_ binary_eq_ D D.
shift_left_resp :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N4:nat. Pi B1:binary (s N3).
      Pi B2:binary (s N4). Pi B1':binary (s N3). Pi B2':binary (s N4).
      Pi BIT1:bit. Pi BIT2:bit.
      nat_eq N1 N2 -> binary_eq B1 B2 -> binary_eq B1' B2' -> bit_eq BIT1 BIT2
         -> shift_left N1 B1 B1' BIT1 -> shift_left N2 B2 B2' BIT2 -> type.
- : shift_left_resp nat_eq_ binary_eq_ binary_eq_ bit_eq_ D D.
shift_arith_right_resp :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N4:nat. Pi B1:binary (s N3).
      Pi B2:binary (s N4). Pi B1':binary (s N3). Pi B2':binary (s N4).
      Pi BIT1:bit. Pi BIT2:bit.
      nat_eq N1 N2 -> binary_eq B1 B2 -> binary_eq B1' B2' -> bit_eq BIT1 BIT2
         -> shift_arith_right N1 B1 B1' BIT1 -> shift_arith_right N2 B2 B2' BIT2
         -> type.
- : shift_arith_right_resp nat_eq_ binary_eq_ binary_eq_ bit_eq_ D D.
shift_right_resp :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N4:nat. Pi B1:binary (s N3).
      Pi B2:binary (s N4). Pi B1':binary (s N3). Pi B2':binary (s N4).
      Pi BIT1:bit. Pi BIT2:bit.
      nat_eq N1 N2 -> binary_eq B1 B2 -> binary_eq B1' B2' -> bit_eq BIT1 BIT2
         -> shift_right N1 B1 B1' BIT1 -> shift_right N2 B2 B2' BIT2 -> type.
- : shift_right_resp nat_eq_ binary_eq_ binary_eq_ bit_eq_ D D.
rol_once_wo_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary (s N1). Pi B1':binary (s N2).
      Pi B2:binary (s N1). Pi B2':binary (s N2). Pi BIT1:bit. Pi BIT1':bit.
      Pi BIT2:bit. Pi BIT2':bit.
      binary_eq B1 B1' -> binary_eq B2 B2' -> bit_eq BIT1 BIT1'
         -> bit_eq BIT2 BIT2' -> rol_once_wo B1 B2 BIT1 BIT2
         -> rol_once_wo B1' B2' BIT1' BIT2' -> type.
- : rol_once_wo_resp binary_eq_ binary_eq_ bit_eq_ bit_eq_ D D.
ror_once_wo_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary (s N1). Pi B1':binary (s N2).
      Pi B2:binary (s N1). Pi B2':binary (s N2). Pi BIT1:bit. Pi BIT1':bit.
      Pi BIT2:bit. Pi BIT2':bit.
      binary_eq B1 B1' -> binary_eq B2 B2' -> bit_eq BIT1 BIT1'
         -> bit_eq BIT2 BIT2' -> ror_once_wo B1 B2 BIT1 BIT2
         -> ror_once_wo B1' B2' BIT1' BIT2' -> type.
- : ror_once_wo_resp binary_eq_ binary_eq_ bit_eq_ bit_eq_ D D.
rotate_left_once_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1).
      Pi Bout':binary (s N1).
      rotate_left_once Bin Bout -> rotate_left_once Bin Bout'
         -> binary_eq Bout Bout' -> type.
- :
   rotate_left_once_fun (rotate_left_once_ Dhibit1) (rotate_left_once_ Dhibit2)
      Dbeq2
      <- highbit_fun Dhibit1 Dhibit2 Dbiteq Dbeq1
      <- binary_eq_cons Dbiteq Dbeq1 Dbeq2.
rotate_left_fun :
   Pi N1:nat. Pi N:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1).
      Pi Bout':binary (s N1).
      rotate_left N Bin Bout -> rotate_left N Bin Bout' -> binary_eq Bout Bout'
         -> type.
- : rotate_left_fun rotate_left_z rotate_left_z binary_eq_.
- :
   rotate_left_fun (rotate_left_s Dro Dr) (rotate_left_s Dro' Dr') Dbeq2
      <- rotate_left_fun Dr Dr' Dbeq1
      <- rotate_left_once_resp Dbeq1 binary_eq_ Dro Dro''
      <- rotate_left_once_fun Dro'' Dro' Dbeq2.
rotate_right_once_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1).
      Pi Bout':binary (s N1).
      rotate_right_once Bin Bout -> rotate_right_once Bin Bout'
         -> binary_eq Bout Bout' -> type.
- :
   rotate_right_once_fun (rotate_right_once_ Dhibit1)
      (rotate_right_once_ Dhibit2) Dbeq1
      <- highbit_fun1 Dhibit1 Dhibit2 Dbeq1.
rotate_right_fun :
   Pi N1:nat. Pi N:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1).
      Pi Bout':binary (s N1).
      rotate_right N Bin Bout -> rotate_right N Bin Bout'
         -> binary_eq Bout Bout' -> type.
- : rotate_right_fun rotate_right_z rotate_right_z binary_eq_.
- :
   rotate_right_fun (rotate_right_s Dro Dr) (rotate_right_s Dro' Dr') Dbeq2
      <- rotate_right_fun Dr Dr' Dbeq1
      <- rotate_right_once_resp Dbeq1 binary_eq_ Dro Dro''
      <- rotate_right_once_fun Dro'' Dro' Dbeq2.
shift_left_once_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Cin:bit. Pi Bout:binary (s N1).
      Pi Bout':binary (s N1).
      shift_left_once Bin Cin Bout -> shift_left_once Bin Cin Bout'
         -> binary_eq Bout Bout' -> type.
- :
   shift_left_once_fun (shift_left_once_ Dhibit1) (shift_left_once_ Dhibit2)
      Dbeq2
      <- highbit_fun Dhibit1 Dhibit2 Dbiteq1 Dbeq1
      <- binary_eq_cons bit_eq_ Dbeq1 Dbeq2.
shift_left_fun :
   Pi N1:nat. Pi N:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1).
      Pi Cout:bit. Pi Bout':binary (s N1). Pi Cout':bit.
      shift_left N Bin Bout Cout -> shift_left N Bin Bout' Cout'
         -> binary_eq Bout Bout' -> bit_eq Cout Cout' -> type.
- : shift_left_fun shift_left_z shift_left_z binary_eq_ bit_eq_.
- :
   shift_left_fun (shift_left_s Dro Dhb Dr) (shift_left_s Dro' Dhb' Dr') Dbeq2
      Dbiteq
      <- shift_left_fun Dr Dr' Dbeq1 X2
      <- highbit_resp Dbeq1 bit_eq_ binary_eq_ Dhb Dhb''
      <- highbit_fun Dhb'' Dhb' Dbiteq X1
      <- shift_left_once_resp Dbeq1 bit_eq_ binary_eq_ Dro Dro''
      <- shift_left_once_fun Dro'' Dro' Dbeq2.
shift_right_once_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Cin:bit. Pi Bout:binary (s N1).
      Pi Bout':binary (s N1).
      shift_right_once Bin Cin Bout -> shift_right_once Bin Cin Bout'
         -> binary_eq Bout Bout' -> type.
- :
   shift_right_once_fun (shift_right_once_ Dhibit1) (shift_right_once_ Dhibit2)
      Dbeq1
      <- highbit_fun1 Dhibit1 Dhibit2 Dbeq1.
shift_right_fun :
   Pi N1:nat. Pi N:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1).
      Pi Cout:bit. Pi Bout':binary (s N1). Pi Cout':bit.
      shift_right N Bin Bout Cout -> shift_right N Bin Bout' Cout'
         -> binary_eq Bout Bout' -> bit_eq Cout Cout' -> type.
- : shift_right_fun shift_right_z shift_right_z binary_eq_ bit_eq_.
- :
   shift_right_fun (shift_right_s Dro Dlb Dr) (shift_right_s Dro' Dlb' Dr')
      Dbeq2 Dbiteq
      <- shift_right_fun Dr Dr' Dbeq1 X2
      <- lowbit_resp Dbeq1 bit_eq_ binary_eq_ Dlb Dlb''
      <- lowbit_fun Dlb'' Dlb' Dbiteq X1
      <- shift_right_once_resp Dbeq1 bit_eq_ binary_eq_ Dro Dro''
      <- shift_right_once_fun Dro'' Dro' Dbeq2.
shift_arith_right_once_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1).
      Pi Bout':binary (s N1).
      shift_arith_right_once Bin Bout -> shift_arith_right_once Bin Bout'
         -> binary_eq Bout Bout' -> type.
- :
   shift_arith_right_once_fun (shift_arith_right_once_ Dsro1 Dhibit1)
      (shift_arith_right_once_ Dsro2 Dhibit2) Dbeq2
      <- highbit_fun Dhibit1 Dhibit2 Dbiteq1 Dbeq1
      <- shift_right_once_resp binary_eq_ Dbiteq1 binary_eq_ Dsro1 Dsro1'
      <- shift_right_once_fun Dsro1' Dsro2 Dbeq2.
shift_arith_right_fun :
   Pi N1:nat. Pi N:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1).
      Pi Cout:bit. Pi Bout':binary (s N1). Pi Cout':bit.
      shift_arith_right N Bin Bout Cout -> shift_arith_right N Bin Bout' Cout'
         -> binary_eq Bout Bout' -> bit_eq Cout Cout' -> type.
- :
   shift_arith_right_fun shift_arith_right_z shift_arith_right_z binary_eq_
      bit_eq_.
- :
   shift_arith_right_fun (shift_arith_right_s Dro Dlb Dr)
      (shift_arith_right_s Dro' Dlb' Dr') Dbeq2 Dbiteq
      <- shift_arith_right_fun Dr Dr' Dbeq1 X2
      <- lowbit_resp Dbeq1 bit_eq_ binary_eq_ Dlb Dlb''
      <- lowbit_fun Dlb'' Dlb' Dbiteq X1
      <- shift_arith_right_once_resp Dbeq1 binary_eq_ Dro Dro''
      <- shift_arith_right_once_fun Dro'' Dro' Dbeq2.
rol_once_wo_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1). Pi Cout:bit.
      Pi Oout:bit. Pi Bout':binary (s N1). Pi Cout':bit. Pi Oout':bit.
      rol_once_wo Bin Bout Cout Oout -> rol_once_wo Bin Bout' Cout' Oout'
         -> binary_eq Bout Bout' -> bit_eq Cout Cout' -> bit_eq Oout Oout'
         -> type.
- :
   rol_once_wo_fun (rol_once_wo_ Dxor1 Dhibit1 Drol1 Dhibit1')
      (rol_once_wo_ Dxor2 Dhibit2 Drol2 Dhibit2') Dbeq1 Dbiteq1 Dbiteq3
      <- highbit_fun Dhibit1' Dhibit2' Dbiteq1 X2
      <- rotate_left_once_fun Drol1 Drol2 Dbeq1
      <- highbit_resp Dbeq1 bit_eq_ binary_eq_ Dhibit1 Dhibit1r
      <- highbit_fun Dhibit1r Dhibit2 Dbiteq2 X1
      <- xor_bit_resp Dbiteq1 Dbiteq2 bit_eq_ Dxor1 Dxor1'
      <- xor_bit_fun Dxor1' Dxor2 Dbiteq3.
ror_once_wo_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1). Pi Cout:bit.
      Pi Oout:bit. Pi Bout':binary (s N1). Pi Cout':bit. Pi Oout':bit.
      ror_once_wo Bin Bout Cout Oout -> ror_once_wo Bin Bout' Cout' Oout'
         -> binary_eq Bout Bout' -> bit_eq Cout Cout' -> bit_eq Oout Oout'
         -> type.
- :
   ror_once_wo_fun (ror_once_wo_ Dxor1 Dhibit1 Dror1 Dhibit1')
      (ror_once_wo_ Dxor2 Dhibit2 Dror2 Dhibit2') Dbeq1 Dbiteq2 Dbiteq3
      <- highbit_fun Dhibit1' Dhibit2' Dbiteq1 X2
      <- rotate_right_once_fun Dror1 Dror2 Dbeq1
      <- highbit_resp Dbeq1 bit_eq_ binary_eq_ Dhibit1 Dhibit1r
      <- highbit_fun Dhibit1r Dhibit2 Dbiteq2 X1
      <- xor_bit_resp Dbiteq1 Dbiteq2 bit_eq_ Dxor1 Dxor1'
      <- xor_bit_fun Dxor1' Dxor2 Dbiteq3.
shl_once_wo_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1). Pi Cout:bit.
      Pi Oout:bit. Pi Bout':binary (s N1). Pi Cout':bit. Pi Oout':bit.
      shl_once_wo Bin Bout Cout Oout -> shl_once_wo Bin Bout' Cout' Oout'
         -> binary_eq Bout Bout' -> bit_eq Cout Cout' -> bit_eq Oout Oout'
         -> type.
- :
   shl_once_wo_fun (shl_once_wo_ Dxor1 Dhibit1 Dshl1 Dhibit1')
      (shl_once_wo_ Dxor2 Dhibit2 Dshl2 Dhibit2') Dbeq1 Dbiteq1 Dbiteq3
      <- highbit_fun Dhibit1' Dhibit2' Dbiteq1 X2
      <- shift_left_once_fun Dshl1 Dshl2 Dbeq1
      <- highbit_resp Dbeq1 bit_eq_ binary_eq_ Dhibit1 Dhibit1r
      <- highbit_fun Dhibit1r Dhibit2 Dbiteq2 X1
      <- xor_bit_resp Dbiteq1 Dbiteq2 bit_eq_ Dxor1 Dxor1'
      <- xor_bit_fun Dxor1' Dxor2 Dbiteq3.
shr_once_wo_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1). Pi Cout:bit.
      Pi Oout:bit. Pi Bout':binary (s N1). Pi Cout':bit. Pi Oout':bit.
      shr_once_wo Bin Bout Cout Oout -> shr_once_wo Bin Bout' Cout' Oout'
         -> binary_eq Bout Bout' -> bit_eq Cout Cout' -> bit_eq Oout Oout'
         -> type.
- :
   shr_once_wo_fun (shr_once_wo_ Dhibit1 Dshr1 Dlowbit1)
      (shr_once_wo_ Dhibit2 Dshr2 Dlowbit2) Dbeq1 Dbiteq1 Dbiteq2
      <- lowbit_fun Dlowbit1 Dlowbit2 Dbiteq1 X2
      <- shift_right_once_fun Dshr1 Dshr2 Dbeq1
      <- highbit_fun Dhibit1 Dhibit2 Dbiteq2 X1.
sar_once_wo_fun :
   Pi N1:nat. Pi Bin:binary (s N1). Pi Bout:binary (s N1). Pi Cout:bit.
      Pi Oout:bit. Pi Bout':binary (s N1). Pi Cout':bit. Pi Oout':bit.
      sar_once_wo Bin Bout Cout Oout -> sar_once_wo Bin Bout' Cout' Oout'
         -> binary_eq Bout Bout' -> bit_eq Cout Cout' -> bit_eq Oout Oout'
         -> type.
- :
   sar_once_wo_fun (sar_once_wo_ Dsar1 Dlb1) (sar_once_wo_ Dsar2 Dlb2) Dbeq1
      Dbiteq1 bit_eq_
      <- lowbit_fun Dlb1 Dlb2 Dbiteq1 X1
      <- shift_arith_right_once_fun Dsar1 Dsar2 Dbeq1.
can_rotate_left_once :
   Pi N1:nat. Pi Bout:binary (s N1). Pi Bin:binary (s N1).
      rotate_left_once Bin Bout -> type.
- : can_rotate_left_once B (rotate_left_once_ Dhb) <- can_highbit B B1 B2 Dhb.
can_rotate_left :
   Pi N1:nat. Pi Bout:binary (s N1). Pi N:nat. Pi Bin:binary (s N1).
      rotate_left N Bin Bout -> type.
- : can_rotate_left z Bin rotate_left_z.
- :
   can_rotate_left (s N) Bin (rotate_left_s Dronce Drl)
      <- can_rotate_left N Bin Drl
      <- can_rotate_left_once B2 Dronce.
can_rotate_right_once :
   Pi N1:nat. Pi Bout:binary (s N1). Pi Bin:binary (s N1).
      rotate_right_once Bin Bout -> type.
- :
   can_rotate_right_once ($ LOBIT Bin) (rotate_right_once_ Dhb)
      <- can_highbit' LOBIT Bin Dhb.
can_rotate_right :
   Pi N1:nat. Pi Bout:binary (s N1). Pi N:nat. Pi Bin:binary (s N1).
      rotate_right N Bin Bout -> type.
- : can_rotate_right z Bin rotate_right_z.
- :
   can_rotate_right (s N) Bin (rotate_right_s Dronce Drl)
      <- can_rotate_right N Bin Drl
      <- can_rotate_right_once B2 Dronce.
can_shift_left_once :
   Pi N1:nat. Pi Bout:binary (s N1). Pi Bin:binary (s N1). Pi BITin:bit.
      shift_left_once Bin BITin Bout -> type.
- :
   can_shift_left_once Bin BITin (shift_left_once_ Dhb)
      <- can_highbit Bin B1 B2 Dhb.
can_shift_left :
   Pi N1:nat. Pi Bout:binary (s N1). Pi Cout:bit. Pi N:nat.
      Pi Bin:binary (s N1). shift_left N Bin Bout Cout -> type.
- : can_shift_left z Bin shift_left_z.
- :
   can_shift_left (s N) Bin (shift_left_s Dronce Dhb Drl)
      <- can_shift_left N Bin Drl
      <- can_highbit B2 B3 B4 Dhb
      <- can_shift_left_once B2 zero Dronce.
can_shift_right_once :
   Pi N1:nat. Pi Bout:binary (s N1). Pi Bin:binary (s N1). Pi BITin:bit.
      shift_right_once Bin BITin Bout -> type.
- :
   can_shift_right_once ($ LOBIT Bin) BITin (shift_right_once_ Dhb)
      <- can_highbit' BITin Bin Dhb.
can_shift_right :
   Pi N1:nat. Pi Bout:binary (s N1). Pi Cout:bit. Pi N:nat.
      Pi Bin:binary (s N1). shift_right N Bin Bout Cout -> type.
- : can_shift_right z Bin shift_right_z.
- :
   can_shift_right (s N) Bin (shift_right_s Dronce Dlb Drl)
      <- can_shift_right N Bin Drl
      <- can_lowbit B2 B3 B4 Dlb
      <- can_shift_right_once B2 zero Dronce.
can_shift_arith_right_once :
   Pi N1:nat. Pi Bout:binary (s N1). Pi Bin:binary (s N1).
      shift_arith_right_once Bin Bout -> type.
- :
   can_shift_arith_right_once Bin (shift_arith_right_once_ Dshr Dhibit)
      <- can_highbit Bin HIBIT B2 Dhibit
      <- can_shift_right_once Bin HIBIT Dshr.
can_shift_arith_right :
   Pi N1:nat. Pi Bout:binary (s N1). Pi Cout:bit. Pi N:nat.
      Pi Bin:binary (s N1). shift_arith_right N Bin Bout Cout -> type.
- : can_shift_arith_right z Bin shift_arith_right_z.
- :
   can_shift_arith_right (s N) Bin (shift_arith_right_s Dronce Dlb Drl)
      <- can_shift_arith_right N Bin Drl
      <- can_lowbit B2 B3 B4 Dlb
      <- can_shift_arith_right_once B2 Dronce.
rol_is_rol_wo :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi BITout:bit.
      Pi Oout:bit. rotate_left 1' B1 B2 -> rol_once_wo B1 B2 BITout Oout -> type.
- :
   rol_is_rol_wo (rotate_left_s Dronce rotate_left_z)
      (rol_once_wo_ Dxor Dhibit1 Dronce Dhibit2)
      <- can_highbit B6 B1 B7 Dhibit2
      <- can_highbit B4 B2 B5 Dhibit1
      <- can_xor_bit B1 B2 B3 Dxor.
ror_is_ror_wo :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi BITout:bit.
      Pi Oout:bit. rotate_right 1' B1 B2 -> ror_once_wo B1 B2 BITout Oout -> type.
- :
   ror_is_ror_wo (rotate_right_s Dronce rotate_right_z)
      (ror_once_wo_ Dxor Dhibit1 Dronce Dhibit2)
      <- can_highbit B6 B1 B7 Dhibit2
      <- can_highbit B4 B2 B5 Dhibit1
      <- can_xor_bit B1 B2 B3 Dxor.
shl_is_shl_wo :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi BITout:bit.
      Pi Oout:bit.
      shift_left 1' B1 B2 BITout -> shl_once_wo B1 B2 BITout Oout -> type.
- :
   shl_is_shl_wo (shift_left_s Dronce Dhibit shift_left_z)
      (shl_once_wo_ Dxor Dhibit1 Dronce Dhibit)
      <- can_highbit B4 B2 B5 Dhibit1
      <- can_xor_bit B1 B2 B3 Dxor.
shr_is_shr_wo :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi BITout:bit.
      Pi Oout:bit.
      shift_right 1' B1 B2 BITout -> shr_once_wo B1 B2 BITout Oout -> type.
- :
   shr_is_shr_wo (shift_right_s Dronce Dlb shift_right_z)
      (shr_once_wo_ Dhibit Dronce Dlb)
      <- can_highbit B1 B2 B3 Dhibit.
sar_is_sar_wo :
   Pi N1:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi BITout:bit.
      Pi Oout:bit.
      shift_arith_right 1' B1 B2 BITout -> sar_once_wo B1 B2 BITout Oout -> type.
- :
   sar_is_sar_wo (shift_arith_right_s Dronce Dlb shift_arith_right_z)
      (sar_once_wo_ Dronce Dlb).
aval_eq : aval -> aval -> type.
aval_eq_ : aval_eq A A.
byte_eq : string 1' -> string 1' -> type.
byte_eq_ : byte_eq B B.
dest_eq : dest -> dest -> type.
dest_eq_ : dest_eq E E.
effect_eq : effect -> effect -> type.
effect_eq_ : effect_eq E E.
reg_eq : reg -> reg -> type.
reg_eq_ : reg_eq R R.
heap_eq : heap -> heap -> type.
heap_eq_ : heap_eq H H.
htp_eq : htp -> htp -> type.
htp_eq_ : htp_eq S S.
inst_eq : inst -> inst -> type.
inst_eq_ : inst_eq IN IN.
instseq_eq : instseq -> instseq -> type.
instseq_eq_ : instseq_eq I I.
loc_eq : loc -> loc -> type.
loc_eq_ : loc_eq L L.
machine_eq : machine -> machine -> type.
machine_eq_ : machine_eq M M.
operand_eq : operand -> operand -> type.
operand_eq_ : operand_eq O O.
oracle_eq : oracle -> oracle -> type.
oracle_eq_ : oracle_eq OR OR.
pc_eq : pc -> pc -> type.
pc_eq_ : pc_eq PC PC.
pred_eq : pred -> pred -> type.
pred_eq_ : pred_eq R R.
prop_eq : prop -> prop -> type.
prop_eq_ : prop_eq P P.
ptp_eq : ptp -> ptp -> type.
ptp_eq_ : ptp_eq U U.
rfile_eq : rfile -> rfile -> type.
rfile_eq_ : rfile_eq R R.
rtp_eq : rtp -> rtp -> type.
rtp_eq_ : rtp_eq G G.
rtp*_eq : Pi N1:nat. Pi N2:nat. rtp* N1 -> rtp* N2 -> type.
rtp*_eq_ : rtp*_eq G G.
seg_eq : seg -> seg -> type.
seg_eq_ : seg_eq SEG SEG.
tp_eq : tp -> tp -> type.
tp_eq_ : tp_eq T T.
val_eq : val -> val -> type.
val_eq_ : val_eq V V.
uval_eq : uval -> uval -> type.
uval_eq_ : uval_eq U U.
inst_eq_trans :
   Pi IN1:inst. Pi IN2:inst. Pi IN3:inst.
      inst_eq IN1 IN2 -> inst_eq IN2 IN3 -> inst_eq IN1 IN3 -> type.
inst_eq_trans_ : inst_eq_trans inst_eq_ inst_eq_ inst_eq_.
kind_eq_trans :
   Pi K1:kind. Pi K2:kind. Pi K3:kind.
      kind_eq K1 K2 -> kind_eq K2 K3 -> kind_eq K1 K3 -> type.
kind_eq_trans_ : kind_eq_trans kind_eq_ kind_eq_ kind_eq_.
tp_eq_trans :
   Pi T1:tp. Pi T2:tp. Pi T3:tp.
      tp_eq T1 T2 -> tp_eq T2 T3 -> tp_eq T1 T3 -> type.
tp_eq_trans_ : tp_eq_trans tp_eq_ tp_eq_ tp_eq_.
heap_eq_symm : Pi H1:heap. Pi H2:heap. heap_eq H1 H2 -> heap_eq H2 H1 -> type.
heap_eq_symm_ : heap_eq_symm heap_eq_ heap_eq_.
oracle_eq_symm :
   Pi OR1:oracle. Pi OR2:oracle. oracle_eq OR1 OR2 -> oracle_eq OR2 OR1 -> type.
oracle_eq_symm_ : oracle_eq_symm oracle_eq_ oracle_eq_.
kind_eq_symm : Pi T1:kind. Pi T2:kind. kind_eq T1 T2 -> kind_eq T2 T1 -> type.
kind_eq_symm_ : kind_eq_symm kind_eq_ kind_eq_.
pc_eq_symm : Pi PC1:pc. Pi PC2:pc. pc_eq PC1 PC2 -> pc_eq PC2 PC1 -> type.
pc_eq_symm_ : pc_eq_symm pc_eq_ pc_eq_.
rfile_eq_symm :
   Pi R1:rfile. Pi R2:rfile. rfile_eq R1 R2 -> rfile_eq R2 R1 -> type.
rfile_eq_symm_ : rfile_eq_symm rfile_eq_ rfile_eq_.
tp_eq_symm : Pi T1:tp. Pi T2:tp. tp_eq T1 T2 -> tp_eq T2 T1 -> type.
tp_eq_symm_ : tp_eq_symm tp_eq_ tp_eq_.
uval_eq_symm : Pi V1:uval. Pi V2:uval. uval_eq V1 V2 -> uval_eq V2 V1 -> type.
uval_eq_symm_ : uval_eq_symm uval_eq_ uval_eq_.
val_eq_symm : Pi V1:val. Pi V2:val. val_eq V1 V2 -> val_eq V2 V1 -> type.
val_eq_symm_ : val_eq_symm val_eq_ val_eq_.
operand_eq_symm :
   Pi O1:operand. Pi O2:operand. operand_eq O1 O2 -> operand_eq O2 O1 -> type.
operand_eq_symm_ : operand_eq_symm operand_eq_ operand_eq_.
pred_eq_symm : Pi R1:pred. Pi R2:pred. pred_eq R1 R2 -> pred_eq R2 R1 -> type.
- : pred_eq_symm pred_eq_ pred_eq_.
aval_eq_cons :
   Pi N1:nat. Pi N2:nat.
      nat_eq N1 N2 -> Pi A:nat -> aval. aval_eq (A N1) (A N2) -> type.
aval_eq_cons_ : aval_eq_cons nat_eq_ (\n:nat. A1 n) aval_eq_.
dest_eq_cons :
   Pi O1:operand. Pi O2:operand.
      operand_eq O1 O2 -> Pi E:operand -> dest. dest_eq (E O1) (E O2) -> type.
dest_eq_cons_ : dest_eq_cons operand_eq_ (\o:operand. E1 o) dest_eq_.
heap_eq_cons :
   Pi V:val. Pi V':val. Pi H:heap. Pi H':heap.
      val_eq V V' -> heap_eq H H'
         -> Pi L:loc. heap_eq (hcons L V H) (hcons L V' H') -> type.
heap_eq_cons_ : heap_eq_cons val_eq_ heap_eq_ L1 heap_eq_.
htp_eq_cons :
   Pi T':tp. Pi T':tp. Pi S:htp. Pi S':htp. Pi L:loc.
      tp_eq T' T' -> htp_eq S S' -> htp_eq (htpcons L T' S) (htpcons L T' S')
         -> type.
htp_eq_cons_ : htp_eq_cons tp_eq_ htp_eq_ htp_eq_.
kind_eq_cons :
   Pi K1:kind. Pi K2:kind.
      kind_eq K1 K2 -> Pi K:kind -> kind. kind_eq (K K1) (K K2) -> type.
kind_eq_cons_ : kind_eq_cons kind_eq_ (\k:kind. K2 k) kind_eq_.
kind_eq_cons' :
   Pi K1:kind. Pi K1':kind. Pi K2:kind. Pi K2':kind.
      kind_eq K1 K1' -> kind_eq K2 K2'
         -> Pi K:kind -> kind -> kind. kind_eq (K K1 K2) (K K1' K2') -> type.
- : kind_eq_cons' kind_eq_ kind_eq_ (\k:kind. \k1:kind. K3 k k1) kind_eq_.
kind_eq_cons2 :
   Pi K1:kind -> kind. Pi K2:kind -> kind.
      (Pi k:kind. kind_eq (K1 k) (K2 k))
         -> Pi K:(kind -> kind) -> kind.
                kind_eq (K (\k:kind. K1 k)) (K (\k:kind. K2 k)) -> type.
kind_eq_cons2_ :
   kind_eq_cons2 (\k:kind. kind_eq_) (\k:kind -> kind. K2 k) kind_eq_.
inst_eq_cons_operand :
   Pi O1:operand. Pi O2:operand.
      operand_eq O1 O2
         -> Pi IN:operand -> inst. inst_eq (IN O1) (IN O2) -> type.
inst_eq_cons_operand_ :
   inst_eq_cons_operand operand_eq_ (\o:operand. IN1 o) inst_eq_.
inst_eq_cons_dest :
   Pi E1:dest. Pi E2:dest.
      dest_eq E1 E2 -> Pi IN:dest -> inst. inst_eq (IN E1) (IN E2) -> type.
inst_eq_cons_dest_ : inst_eq_cons_dest dest_eq_ (\e:dest. IN1 e) inst_eq_.
instseq_eq_cons :
   Pi I1:instseq. Pi I2:instseq. Pi IN:inst.
      instseq_eq I1 I2 -> instseq_eq (; IN I1) (; IN I2) -> type.
instseq_eq_cons_ : instseq_eq_cons instseq_eq_ instseq_eq_.
loc_eq_cons : Pi N:nat. Pi N':nat. nat_eq N N' -> loc_eq (lc N) (lc N') -> type.
loc_eq_cons_ : loc_eq_cons nat_eq_ loc_eq_.
machine_eq_cons :
   Pi H:heap. Pi H':heap. Pi L:loc. Pi L':loc. Pi R:rfile. Pi R':rfile.
      Pi PC:pc. Pi PC':pc.
      heap_eq H H' -> loc_eq L L' -> rfile_eq R R' -> pc_eq PC PC'
         -> machine_eq (mach H L R PC) (mach H' L' R' PC') -> type.
machine_eq_cons_ :
   machine_eq_cons heap_eq_ loc_eq_ rfile_eq_ pc_eq_ machine_eq_.
number_eq_cons :
   Pi N:nat. Pi N':nat. Pi B:binary N. Pi B':binary N'.
      nat_eq N N' -> binary_eq B B' -> tp_eq (number B) (number B') -> type.
- : number_eq_cons nat_eq_ binary_eq_ tp_eq_.
number_eq_cons' :
   Pi N1:nat. Pi N2:nat. Pi B:binary N1. Pi B':binary N2.
      binary_eq B B' -> tp_eq (number B) (number B') -> type.
- : number_eq_cons' binary_eq_ tp_eq_.
operand_eq_cons_val :
   Pi V1:val. Pi V2:val.
      val_eq V1 V2 -> Pi O:val -> operand. operand_eq (O V1) (O V2) -> type.
operand_eq_cons_val_ : operand_eq_cons_val val_eq_ (\v:val. O1 v) operand_eq_.
operand_eq_cons :
   Pi O1:operand. Pi O2:operand.
      operand_eq O1 O2
         -> Pi O:operand -> operand. operand_eq (O O1) (O O2) -> type.
operand_eq_cons_ : operand_eq_cons operand_eq_ (\o:operand. O2 o) operand_eq_.
operand_eq_cons2 :
   Pi O1:operand. Pi O2:operand. Pi O3:operand. Pi O4:operand.
      operand_eq O1 O2 -> operand_eq O3 O4
         -> Pi O:operand -> operand -> operand.
                operand_eq (O O1 O3) (O O2 O4) -> type.
operand_eq_cons2_ :
   operand_eq_cons2 operand_eq_ operand_eq_ (\o:operand. \o1:operand. O3 o o1)
      operand_eq_.
pc_eq_cons :
   Pi N:nat. Pi N':nat.
      nat_eq N N' -> Pi L:loc. pc_eq (pc_ L N) (pc_ L N') -> type.
pc_eq_cons_ : pc_eq_cons nat_eq_ L1 pc_eq_.
pnumeq_eq_cons :
   Pi T1:tp. Pi T1':tp. Pi T2:tp. Pi T2':tp.
      tp_eq T1 T1' -> tp_eq T2 T2' -> prop_eq (pnumeq T1 T2) (pnumeq T1' T2')
         -> type.
- : pnumeq_eq_cons tp_eq_ tp_eq_ prop_eq_.
pred_eq_cons' :
   Pi R1:pred. Pi R1':pred. Pi R2:pred. Pi R2':pred.
      pred_eq R1 R1' -> pred_eq R2 R2'
         -> Pi R:pred -> pred -> pred. pred_eq (R R1 R2) (R R1' R2') -> type.
- : pred_eq_cons' pred_eq_ pred_eq_ (\r:pred. \r1:pred. R3 r r1) pred_eq_.
pred_eq_cons2 :
   Pi R1:kind -> pred -> pred. Pi R2:kind -> pred -> pred.
      (Pi k:kind. Pi r:pred. pred_eq (R1 k r) (R2 k r))
         -> Pi K:(kind -> pred -> pred) -> pred.
                pred_eq (K (\k:kind. \r:pred. R1 k r))
                   (K (\k:kind. \r:pred. R2 k r)) -> type.
pred_eq_cons2_ :
   pred_eq_cons2 (\k:kind. \r:pred. pred_eq_) (\r:kind -> pred -> pred. R2 r)
      pred_eq_.
pred_eq_cons_kind :
   Pi K:kind. Pi K':kind.
      kind_eq K K' -> Pi R:kind -> pred. pred_eq (R K) (R K') -> type.
- : pred_eq_cons_kind kind_eq_ (\k:kind. R1 k) pred_eq_.
pred_eq_cons_kind2 :
   Pi K:kind -> kind. Pi K':kind -> kind.
      (Pi k:kind. kind_eq (K k) (K' k))
         -> Pi R:(kind -> kind) -> pred.
                pred_eq (R (\k:kind. K k)) (R (\k:kind. K' k)) -> type.
- : pred_eq_cons_kind2 (\k:kind. kind_eq_) (\k:kind -> kind. R1 k) pred_eq_.
prop_eq_cons_tp :
   Pi T':tp. Pi T':tp.
      tp_eq T' T' -> Pi P:tp -> prop. prop_eq (P T') (P T') -> type.
- : prop_eq_cons_tp tp_eq_ (\t:tp. P t) prop_eq_.
rtp_eq_cons :
   Pi T1:tp. Pi T2:tp. Pi G1:rtp* regcount. Pi G2:rtp* regcount.
      tp_eq T1 T2 -> rtp*_eq G1 G2 -> rtp_eq (rt T1 G1) (rt T2 G2) -> type.
rtp_eq_cons_ : rtp_eq_cons tp_eq_ rtp*_eq_ rtp_eq_.
rtp*_eq_cons :
   Pi T1:tp. Pi T2:tp. Pi N1:nat. Pi N2:nat. Pi G1:rtp* N1. Pi G2:rtp* N2.
      tp_eq T1 T2 -> rtp*_eq G1 G2 -> rtp*_eq (rtcons T1 G1) (rtcons T2 G2)
         -> type.
rtp*_eq_cons_ : rtp*_eq_cons tp_eq_ rtp*_eq_ rtp*_eq_.
tp_eq_cons :
   Pi T1:tp. Pi T2:tp.
      tp_eq T1 T2 -> Pi T:tp -> tp. tp_eq (T T1) (T T2) -> type.
tp_eq_cons_ : tp_eq_cons tp_eq_ (\t:tp. T2 t) tp_eq_.
tp_eq_cons2 :
   Pi T1:tp -> tp. Pi T2:tp -> tp.
      (Pi t:tp. tp_eq (T1 t) (T2 t))
         -> Pi T:(tp -> tp) -> tp.
                tp_eq (T (\t:tp. T1 t)) (T (\t:tp. T2 t)) -> type.
tp_eq_cons2_ : tp_eq_cons2 (\t:tp. tp_eq_) (\t:tp -> tp. T2 t) tp_eq_.
tp_eq_cons_kind :
   Pi K1:kind. Pi K2:kind.
      kind_eq K1 K2 -> Pi T':kind -> tp. tp_eq (T' K1) (T' K2) -> type.
tp_eq_cons_kind_ : tp_eq_cons_kind kind_eq_ (\k:kind. T1 k) tp_eq_.
tp_eq_cons2_kind :
   Pi T1:kind -> tp. Pi T2:kind -> tp.
      (Pi k:kind. tp_eq (T1 k) (T2 k))
         -> Pi T':(kind -> tp) -> tp.
                tp_eq (T' (\k:kind. T1 k)) (T' (\k:kind. T2 k)) -> type.
tp_eq_cons2_kind_ :
   tp_eq_cons2_kind (\k:kind. tp_eq_) (\t:kind -> tp. T2 t) tp_eq_.
tp_eq_cons_pred :
   Pi R1:pred. Pi R2:pred.
      pred_eq R1 R2 -> Pi T':pred -> tp. tp_eq (T' R1) (T' R2) -> type.
tp_eq_cons_pred_ : tp_eq_cons_pred pred_eq_ (\r:pred. T1 r) tp_eq_.
tp_eq_cons_kind2 :
   Pi K1:kind -> kind. Pi K2:kind -> kind.
      (Pi k:kind. kind_eq (K1 k) (K2 k))
         -> Pi T':(kind -> kind) -> tp.
                tp_eq (T' (\k:kind. K1 k)) (T' (\k:kind. K2 k)) -> type.
tp_eq_cons_kind2_ :
   tp_eq_cons_kind2 (\k:kind. kind_eq_) (\k:kind -> kind. T1 k) tp_eq_.
tp_eq_cons_rtp :
   Pi G1:rtp. Pi G2:rtp.
      rtp_eq G1 G2 -> Pi T':rtp -> tp. tp_eq (T' G1) (T' G2) -> type.
tp_eq_cons_rtp_ : tp_eq_cons_rtp rtp_eq_ (\g:rtp. T1 g) tp_eq_.
tp_eq_cons_prod :
   Pi T1:tp. Pi T2:tp. Pi T3:tp. Pi T4:tp.
      tp_eq T1 T2 -> tp_eq T3 T4 -> tp_eq (prod T1 T3) (prod T2 T4) -> type.
- : tp_eq_cons_prod tp_eq_ tp_eq_ tp_eq_.
tp_eq_cons_mbox :
   Pi T1:tp. Pi T2:tp. tp_eq T1 T2 -> tp_eq (mbox T1) (mbox T2) -> type.
- : tp_eq_cons_mbox tp_eq_ tp_eq_.
tp_eq_cons_sptr :
   Pi T1:tp. Pi T2:tp. tp_eq T1 T2 -> tp_eq (sptr T1) (sptr T2) -> type.
- : tp_eq_cons_sptr tp_eq_ tp_eq_.
tr_resp : Pi P:prop. Pi P':prop. prop_eq P P' -> tr P -> tr P' -> type.
- : tr_resp prop_eq_ D D.
val_eq_cons :
   Pi U1:uval. Pi U2:uval. Pi V1:val. Pi V2:val.
      uval_eq U1 U2 -> val_eq V1 V2 -> val_eq (;' U1 V1) (;' U2 V2) -> type.
- : val_eq_cons uval_eq_ val_eq_ val_eq_.
val_lit_eq_cons :
   Pi B1:binary bytebits. Pi B2:binary bytebits. Pi V1:val. Pi V2:val.
      binary_eq B1 B2 -> val_eq V1 V2
         -> val_eq (;' (@' (lit B1) 0') V1) (;' (@' (lit B2) 0') V2) -> type.
- : val_lit_eq_cons binary_eq_ val_eq_ val_eq_.
val_pointer_eq_cons :
   Pi L1:loc. Pi L2:loc. Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N4:nat. Pi V1:val.
      Pi V2:val.
      loc_eq L1 L2 -> nat_eq N1 N2 -> nat_eq N3 N4 -> val_eq V1 V2
         -> val_eq (;' (@' (pointer L1 N1) N3) V1) (;' (@' (pointer L2 N2) N4) V2)
         -> type.
- : val_pointer_eq_cons loc_eq_ nat_eq_ nat_eq_ val_eq_ val_eq_.
uval_pointer_eq_cons :
   Pi L1:loc. Pi L2:loc. Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N4:nat.
      loc_eq L1 L2 -> nat_eq N1 N2 -> nat_eq N3 N4
         -> uval_eq (@' (pointer L1 N1) N3) (@' (pointer L2 N2) N4) -> type.
- : uval_pointer_eq_cons loc_eq_ nat_eq_ nat_eq_ uval_eq_.
aval_eq_pointer :
   Pi L:loc. Pi N:nat. Pi L':loc. Pi N':nat.
      aval_eq (pointer L N) (pointer L' N') -> loc_eq L L' -> nat_eq N N'
         -> type.
aval_eq_pointer_ : aval_eq_pointer aval_eq_ loc_eq_ nat_eq_.
karrow_eq_cdr :
   Pi K1:kind. Pi K2:kind. Pi K1':kind. Pi K2':kind.
      kind_eq (karrow K1 K2) (karrow K1' K2') -> kind_eq K1 K1'
         -> kind_eq K2 K2' -> type.
karrow_eq_cdr_ : karrow_eq_cdr kind_eq_ kind_eq_ kind_eq_.
kprod_eq_cdr :
   Pi K1:kind. Pi K2:kind. Pi K1':kind. Pi K2':kind.
      kind_eq (kprod K1 K2) (kprod K1' K2') -> kind_eq K1 K1' -> kind_eq K2 K2'
         -> type.
kprod_eq_cdr_ : kprod_eq_cdr kind_eq_ kind_eq_ kind_eq_.
kforall_eq_cdr :
   Pi K:kind -> kind. Pi K':kind -> kind.
      kind_eq (kforall (\k:kind. K k)) (kforall (\k:kind. K' k))
         -> (Pi k:kind. kind_eq (K k) (K' k)) -> type.
kforall_eq_cdr_ : kforall_eq_cdr kind_eq_ (\k:kind. kind_eq_).
ksum_eq_cdr :
   Pi K1:kind. Pi K2:kind. Pi K1':kind. Pi K2':kind.
      kind_eq (ksum K1 K2) (ksum K1' K2') -> kind_eq K1 K1' -> kind_eq K2 K2'
         -> type.
ksum_eq_cdr_ : ksum_eq_cdr kind_eq_ kind_eq_ kind_eq_.
krec_eq_cdr :
   Pi K:kind -> kind. Pi K':kind -> kind.
      kind_eq (krec (\k:kind. K k)) (krec (\k:kind. K' k))
         -> (Pi k:kind. kind_eq (K k) (K' k)) -> type.
krec_eq_cdr_ : krec_eq_cdr kind_eq_ (\k:kind. kind_eq_).
loc_eq_cdr : Pi N:nat. Pi N':nat. loc_eq (lc N) (lc N') -> nat_eq N N' -> type.
loc_eq_cdr_ : loc_eq_cdr loc_eq_ nat_eq_.
tp_eq_number :
   Pi N:nat. Pi B:binary N. Pi N':nat. Pi B':binary N'.
      tp_eq (number B) (number B') -> nat_eq N N' -> binary_eq B B' -> type.
tp_eq_number_ : tp_eq_number tp_eq_ nat_eq_ binary_eq_.
operand_eq_rco :
   Pi R1:reg. Pi R2:reg. operand_eq (rco R1) (rco R2) -> reg_eq R1 R2 -> type.
operand_eq_rco_ : operand_eq_rco operand_eq_ reg_eq_.
asize_resp :
   Pi A:aval. Pi A':aval. Pi N:nat. Pi N':nat.
      aval_eq A A' -> nat_eq N N' -> asize A N -> asize A' N' -> type.
asize_resp_ : asize_resp aval_eq_ nat_eq_ D D.
aof_resp :
   Pi S:htp. Pi S':htp. Pi A:aval. Pi A':aval. Pi T':tp. Pi T':tp.
      htp_eq S S' -> aval_eq A A' -> tp_eq T' T' -> aof S A T' -> aof S' A' T'
         -> type.
aof_resp_ : aof_resp htp_eq_ aval_eq_ tp_eq_ D D.
append_resp :
   Pi V1:val. Pi V1':val. Pi V2:val. Pi V2':val. Pi V3:val. Pi V3':val.
      val_eq V1 V1' -> val_eq V2 V2' -> val_eq V3 V3' -> append V1 V2 V3
         -> append V1' V2' V3' -> type.
append_resp_ : append_resp val_eq_ val_eq_ val_eq_ D D.
atomval_resp :
   Pi V:val. Pi V':val. Pi A:aval. Pi A':aval.
      val_eq V V' -> aval_eq A A' -> atomval V A 0' -> atomval V' A' 0' -> type.
atomval_resp_ : atomval_resp val_eq_ aval_eq_ D D.
binary_int_resp :
   Pi V:val. Pi V':val. Pi N1:nat. Pi N2:nat. Pi B:binary N1. Pi B':binary N2.
      Pi End:endian.
      val_eq V V' -> binary_eq B B' -> binary_int End V B
         -> binary_int End V' B' -> type.
binary_int_resp_ : binary_int_resp val_eq_ binary_eq_ D D.
boxsub_resp :
   Pi T':tp. Pi T':tp. Pi N:nat. Pi N':nat. Pi T1:tp. Pi T1':tp. Pi T2:tp.
      Pi T2':tp.
      tp_eq T' T' -> nat_eq N N' -> tp_eq T1 T1' -> tp_eq T2 T2'
         -> boxsub T' N T1 T2 -> boxsub T' N' T1' T2' -> type.
- : boxsub_resp tp_eq_ nat_eq_ tp_eq_ tp_eq_ D D.
codeok_resp :
   Pi I:instseq. Pi I':instseq. Pi S:htp. Pi G:rtp.
      instseq_eq I I' -> codeok S G I -> codeok S G I' -> type.
codeok_resp_ : codeok_resp instseq_eq_ D D.
clookup_resp :
   Pi I:instseq. Pi I':instseq. Pi H:heap. Pi PC:pc.
      instseq_eq I I' -> clookup H PC I -> clookup H PC I' -> type.
clookup_resp_ : clookup_resp instseq_eq_ D D.
codeval_resp :
   Pi PC:pc. Pi PC':pc. Pi V:val. Pi V':val. Pi I:instseq. Pi I':instseq.
      pc_eq PC PC' -> val_eq V V' -> instseq_eq I I' -> codeval PC V I
         -> codeval PC' V' I' -> type.
codeval_resp_ : codeval_resp pc_eq_ val_eq_ instseq_eq_ D D.
cond_tp_resp :
   Pi BT:tp. Pi BT':tp. Pi T1:tp. Pi T1':tp. Pi T2:tp. Pi T2':tp. Pi N:nat.
      Pi Cond:cond.
      tp_eq BT BT' -> tp_eq T1 T1' -> tp_eq T2 T2' -> cond_tp N Cond BT T1 T2
         -> cond_tp N Cond BT' T1' T2' -> type.
cond_tp_resp_ : cond_tp_resp tp_eq_ tp_eq_ tp_eq_ D D.
delocalize_resp :
   Pi O1:operand. Pi O1':operand. Pi O2:operand. Pi O2':operand. Pi PC:pc.
      operand_eq O1 O1' -> operand_eq O2 O2' -> delocalize PC O1 O2
         -> delocalize PC O1' O2' -> type.
- : delocalize_resp operand_eq_ operand_eq_ D D.
delocalize_inst_resp :
   Pi IN1:inst. Pi IN1':inst. Pi IN2:inst. Pi IN2':inst. Pi PC:pc.
      inst_eq IN1 IN1' -> inst_eq IN2 IN2' -> delocalize_inst PC IN1 IN2
         -> delocalize_inst PC IN1' IN2' -> type.
delocalize_inst_resp_ : delocalize_inst_resp inst_eq_ inst_eq_ D D.
entails_resp :
   Pi R1:pred. Pi R1':pred. Pi R2:pred. Pi R2':pred.
      pred_eq R1 R1' -> pred_eq R2 R2' -> entails R1 R2 -> entails R1' R2'
         -> type.
- : entails_resp pred_eq_ pred_eq_ D D.
hof_resp :
   Pi H:heap. Pi H':heap. Pi S:htp. Pi S':htp.
      heap_eq H H' -> hof S H S' -> hof S H' S' -> type.
hof_resp_ : hof_resp heap_eq_ D D.
hupdate_resp :
   Pi H1:heap. Pi H1':heap. Pi H2:heap. Pi H2':heap. Pi L:loc. Pi V:val.
      heap_eq H1 H1' -> heap_eq H2 H2' -> hupdate H1 L V H2
         -> hupdate H1' L V H2' -> type.
hupdate_resp_ : hupdate_resp heap_eq_ heap_eq_ D D.
hupdate_resp' :
   Pi H1:heap. Pi H2:heap. Pi H:heap. Pi L:loc. Pi V:val.
      heap_eq H1 H2 -> hupdate H L V H1 -> hupdate H L V H2 -> type.
hupdate_resp'_ : hupdate_resp' heap_eq_ D D.
hlookup_resp :
   Pi H:heap. Pi H':heap. Pi L:loc. Pi L':loc. Pi V:val. Pi V':val.
      heap_eq H H' -> loc_eq L L' -> val_eq V V' -> hlookup H L V
         -> hlookup H' L' V' -> type.
hlookup_resp_ : hlookup_resp heap_eq_ loc_eq_ val_eq_ D D.
htlookup_resp :
   Pi S:htp. Pi S':htp. Pi L:loc. Pi L':loc. Pi T':tp. Pi T':tp.
      htp_eq S S' -> loc_eq L L' -> tp_eq T' T' -> htlookup S L T'
         -> htlookup S' L' T' -> type.
- : htlookup_resp htp_eq_ loc_eq_ tp_eq_ D D.
htupdate_resp :
   Pi S:htp. Pi S':htp. Pi L:loc. Pi L':loc. Pi T':tp. Pi T':tp. Pi S2:htp.
      Pi S2':htp.
      htp_eq S S' -> loc_eq L L' -> tp_eq T' T' -> htp_eq S2 S2'
         -> htupdate S L T' S2 -> htupdate S' L' T' S2' -> type.
- : htupdate_resp htp_eq_ loc_eq_ tp_eq_ htp_eq_ D D.
htdelete_resp :
   Pi S:htp. Pi S':htp. Pi L:loc. Pi L':loc. Pi S2:htp. Pi S2':htp.
      htp_eq S S' -> loc_eq L L' -> htp_eq S2 S2' -> htdelete S L S2
         -> htdelete S' L' S2' -> type.
- : htdelete_resp htp_eq_ loc_eq_ htp_eq_ D D.
initok_resp :
   Pi I:instseq. Pi I':instseq. Pi S:htp. Pi G:rtp. Pi REG:reg. Pi T':tp.
      instseq_eq I I' -> initok S G REG T' I -> initok S G REG T' I' -> type.
initok_resp_ : initok_resp instseq_eq_ D D.
kof_resp :
   Pi T':tp. Pi T':tp. Pi K:kind. Pi K':kind.
      tp_eq T' T' -> kind_eq K K' -> kof T' K -> kof T' K' -> type.
kof_resp_ : kof_resp tp_eq_ kind_eq_ D D.
kof_assm_resp :
   Pi K1:kind. Pi K1':kind. Pi T':tp -> tp. Pi K2:kind.
      kind_eq K1 K1' -> (Pi t:tp. kof t K1 -> kof (T' t) K2)
         -> (Pi t:tp. kof t K1' -> kof (T' t) K2) -> type.
- :
   kof_assm_resp kind_eq_ (\t:tp. \x:kof t K1. D t x)
      (\t:tp. \x:kof t K1. D t x).
cloc_leq_resp :
   Pi L1:tp. Pi L1':tp. Pi L2:tp. Pi L2':tp.
      tp_eq L1 L1' -> tp_eq L2 L2' -> cloc_leq L1 L2 -> cloc_leq L1' L2' -> type.
- : cloc_leq_resp tp_eq_ tp_eq_ D D.
cloc_lt_resp :
   Pi L1:tp. Pi L1':tp. Pi L2:tp. Pi L2':tp.
      tp_eq L1 L1' -> tp_eq L2 L2' -> cloc_lt L1 L2 -> cloc_lt L1' L2' -> type.
- : cloc_lt_resp tp_eq_ tp_eq_ D D.
loc_lt_resp :
   Pi L1:loc. Pi L1':loc. Pi L2:loc. Pi L2':loc.
      loc_eq L1 L1' -> loc_eq L2 L2' -> loc_lt L1 L2 -> loc_lt L1' L2' -> type.
- : loc_lt_resp loc_eq_ loc_eq_ D D.
machineok_resp :
   Pi H:heap. Pi H':heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      heap_eq H H' -> machineok (mach H L R PC) -> machineok (mach H' L R PC)
         -> type.
machineok_resp_ : machineok_resp heap_eq_ D D.
of_resp :
   Pi S:htp. Pi S':htp. Pi V:val. Pi V':val. Pi T':tp.
      htp_eq S S' -> val_eq V V' -> of S V T' -> of S' V' T' -> type.
of_resp_ : of_resp htp_eq_ val_eq_ D D.
oof_resp :
   Pi S:htp. Pi S':htp. Pi G:rtp. Pi G':rtp. Pi O:operand. Pi O':operand.
      Pi T':tp. Pi T':tp.
      htp_eq S S' -> rtp_eq G G' -> operand_eq O O' -> tp_eq T' T'
         -> oof S G O T' -> oof S' G' O' T' -> type.
oof_resp_ : oof_resp htp_eq_ rtp_eq_ operand_eq_ tp_eq_ D D.
perform_resp :
   Pi IN:inst. Pi IN':inst. Pi M:machine. Pi M':machine.
      inst_eq IN IN' -> perform M IN M' -> perform M IN' M' -> type.
perform_resp_ : perform_resp inst_eq_ D D.
pon_resp :
   Pi R:pred. Pi R':pred. Pi K:kind. Pi K':kind.
      pred_eq R R' -> kind_eq K K' -> pon R K -> pon R' K' -> type.
- : pon_resp pred_eq_ kind_eq_ D D.
rtlookup_resp :
   Pi G1:rtp. Pi G1':rtp. Pi T':tp. Pi T':tp. Pi REG:reg.
      rtp_eq G1 G1' -> tp_eq T' T' -> rtlookup G1 REG T' -> rtlookup G1' REG T'
         -> type.
rtlookup_resp_ : rtlookup_resp rtp_eq_ tp_eq_ D D.
rtupdate_resp :
   Pi G1:rtp. Pi G1':rtp. Pi T':tp. Pi T':tp. Pi G2:rtp. Pi G2':rtp. Pi REG:reg.
      rtp_eq G1 G1' -> tp_eq T' T' -> rtp_eq G2 G2' -> rtupdate G1 REG T' G2
         -> rtupdate G1' REG T' G2' -> type.
rtupdate_resp_ : rtupdate_resp rtp_eq_ tp_eq_ rtp_eq_ D D.
sat_resp :
   Pi T':tp. Pi T':tp. Pi R:pred. Pi R':pred. Pi K:kind. Pi K':kind.
      tp_eq T' T' -> pred_eq R R' -> kind_eq K K' -> sat T' R K -> sat T' R' K'
         -> type.
- : sat_resp tp_eq_ pred_eq_ kind_eq_ D D.
sat_assm_resp :
   Pi R1:pred. Pi R1':pred. Pi K1:kind. Pi K1':kind. Pi T':tp -> tp. Pi R2:pred.
      Pi K2:kind.
      pred_eq R1 R1' -> kind_eq K1 K1'
         -> (Pi t:tp. kof t K1 -> sat t R1 K1 -> sat (T' t) R2 K2)
         -> (Pi t:tp. kof t K1' -> sat t R1' K1' -> sat (T' t) R2 K2) -> type.
- :
   sat_assm_resp pred_eq_ kind_eq_
      (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1)
      (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1).
sati_resp :
   Pi N:nat. Pi N':nat. Pi T':tp.
      nat_eq N N' -> sat T' (rti N) kt -> sat T' (rti N') kt -> type.
sati_resp_ : sati_resp nat_eq_ D D.
segof_resp :
   Pi L:loc. Pi L':loc. Pi SEG:seg. Pi SEG':seg.
      loc_eq L L' -> seg_eq SEG SEG' -> segof L SEG -> segof L' SEG' -> type.
- : segof_resp loc_eq_ seg_eq_ D D.
separate_resp :
   Pi N:nat. Pi N':nat. Pi V:val. Pi V':val. Pi V1:val. Pi V1':val. Pi V2:val.
      Pi V2':val.
      nat_eq N N' -> val_eq V V' -> val_eq V1 V1' -> val_eq V2 V2'
         -> separate N V V1 V2 -> separate N' V' V1' V2' -> type.
separate_resp_ : separate_resp nat_eq_ val_eq_ val_eq_ val_eq_ D D.
size_resp :
   Pi V:val. Pi V':val. Pi N:nat. Pi N':nat.
      val_eq V V' -> nat_eq N N' -> size V N -> size V' N' -> type.
size_resp_ : size_resp val_eq_ nat_eq_ D D.
subtype_resp :
   Pi T1:tp. Pi T1':tp. Pi T2:tp. Pi T2':tp.
      tp_eq T1 T1' -> tp_eq T2 T2' -> subtype T1 T2 -> subtype T1' T2' -> type.
subtype_resp_ : subtype_resp tp_eq_ tp_eq_ D D.
subrtype_resp :
   Pi G1:rtp. Pi G1':rtp. Pi G2:rtp. Pi G2':rtp.
      rtp_eq G1 G1' -> rtp_eq G2 G2' -> subrtype G1 G2 -> subrtype G1' G2'
         -> type.
subrtype_resp_ : subrtype_resp rtp_eq_ rtp_eq_ D D.
equiv_resp :
   Pi T1:tp. Pi T1':tp. Pi T2:tp. Pi T2':tp.
      tp_eq T1 T1' -> tp_eq T2 T2' -> equiv T1 T2 -> equiv T1' T2' -> type.
equiv_resp_ : equiv_resp tp_eq_ tp_eq_ D D.
tp_exp_resp :
   Pi T1:tp. Pi T1':tp. Pi N:nat. Pi N':nat. Pi T2:tp. Pi T2':tp.
      tp_eq T1 T1' -> nat_eq N N' -> tp_eq T2 T2' -> tp_exp T1 N T2
         -> tp_exp T1' N' T2' -> type.
tp_exp_resp_ : tp_exp_resp tp_eq_ nat_eq_ tp_eq_ D D.
update_resp :
   Pi S:htp. Pi S':htp. Pi G1:rtp. Pi G1':rtp. Pi E:dest. Pi E':dest. Pi T':tp.
      Pi T':tp. Pi G2:rtp. Pi G2':rtp.
      htp_eq S S' -> rtp_eq G1 G1' -> dest_eq E E' -> tp_eq T' T'
         -> rtp_eq G2 G2' -> update S G1 E T' G2 -> update S' G1' E' T' G2'
         -> type.
update_resp_ : update_resp htp_eq_ rtp_eq_ dest_eq_ tp_eq_ rtp_eq_ D D.
zlookup_resp :
   Pi R:rfile. Pi R':rfile. Pi Z:val. Pi Z':val.
      rfile_eq R R' -> val_eq Z Z' -> zlookup R Z -> zlookup R' Z' -> type.
zlookup_resp_ : zlookup_resp rfile_eq_ val_eq_ D D.
ztlookup_resp :
   Pi G1:rtp. Pi G1':rtp. Pi T':tp. Pi T':tp.
      rtp_eq G1 G1' -> tp_eq T' T' -> ztlookup G1 T' -> ztlookup G1' T' -> type.
ztlookup_resp_ : ztlookup_resp rtp_eq_ tp_eq_ D D.
ztupdate_resp :
   Pi G1:rtp. Pi G1':rtp. Pi T':tp. Pi T':tp. Pi G2:rtp. Pi G2':rtp.
      rtp_eq G1 G1' -> tp_eq T' T' -> rtp_eq G2 G2' -> ztupdate G1 T' G2
         -> ztupdate G1' T' G2' -> type.
ztupdate_resp_ : ztupdate_resp rtp_eq_ tp_eq_ rtp_eq_ D D.
not_bpointer_resp :
   Pi L1:loc. Pi L2:loc. Pi N1:nat. Pi N2:nat. Pi V1:val. Pi V2:val.
      loc_eq L1 L2 -> nat_eq N1 N2 -> val_eq V1 V2 -> not_bpointer L1 N1 V1
         -> not_bpointer L2 N2 V2 -> type.
- : not_bpointer_resp loc_eq_ nat_eq_ val_eq_ D D.
strengthen :
   Pi K':kind. Pi T':tp. Pi K:kind.
      (Pi t:tp. kof t K' -> kof T' K) -> kof T' K -> type.
- : strengthen (\t:tp. \x:kof t K1. D t x) (D (diverge _ K1) (kof_diverge _)).
strengthenpr :
   Pi K':kind. Pi R:pred. Pi K:kind.
      (Pi t:tp. kof t K' -> pon R K) -> pon R K -> type.
- : strengthenpr (\t:tp. \x:kof t K1. D t x) (D (diverge _ K1) (kof_diverge _)).
kind_eq_arrow_closed :
   Pi K1:kind -> kind. Pi K2:kind -> kind. Pi K:kind. Pi K1':kind. Pi K2':kind.
      (Pi k:kind. kind_eq (karrow (K1 k) (K2 k)) K)
         -> (Pi k:kind. kind_eq (K1 k) K1') -> (Pi k:kind. kind_eq (K2 k) K2')
         -> kind_eq K (karrow K1' K2') -> type.
- :
   kind_eq_arrow_closed (\k:kind. kind_eq_) (\k:kind. kind_eq_)
      (\k:kind. kind_eq_) kind_eq_.
kind_eq_prod_closed :
   Pi K1:kind -> kind. Pi K2:kind -> kind. Pi K:kind. Pi K1':kind. Pi K2':kind.
      (Pi k:kind. kind_eq (kprod (K1 k) (K2 k)) K)
         -> (Pi k:kind. kind_eq (K1 k) K1') -> (Pi k:kind. kind_eq (K2 k) K2')
         -> kind_eq K (kprod K1' K2') -> type.
- :
   kind_eq_prod_closed (\k:kind. kind_eq_) (\k:kind. kind_eq_)
      (\k:kind. kind_eq_) kind_eq_.
kind_eq_forall_closed :
   Pi K1:kind -> kind -> kind. Pi K:kind. Pi K2:kind -> kind.
      (Pi k:kind. kind_eq (kforall (\k1:kind. K1 k k1)) K)
         -> (Pi k:kind. Pi k':kind. kind_eq (K1 k k') (K2 k'))
         -> kind_eq K (kforall (\k:kind. K2 k)) -> type.
- :
   kind_eq_forall_closed (\k:kind. kind_eq_) (\k:kind. \k':kind. kind_eq_)
      kind_eq_.
kind_eq_sum_closed :
   Pi K1:kind -> kind. Pi K2:kind -> kind. Pi K:kind. Pi K1':kind. Pi K2':kind.
      (Pi k:kind. kind_eq (ksum (K1 k) (K2 k)) K)
         -> (Pi k:kind. kind_eq (K1 k) K1') -> (Pi k:kind. kind_eq (K2 k) K2')
         -> kind_eq K (ksum K1' K2') -> type.
- :
   kind_eq_sum_closed (\k:kind. kind_eq_) (\k:kind. kind_eq_)
      (\k:kind. kind_eq_) kind_eq_.
kind_eq_rec_closed :
   Pi K1:kind -> kind -> kind. Pi K:kind. Pi K2:kind -> kind.
      (Pi k:kind. kind_eq (krec (\k1:kind. K1 k k1)) K)
         -> (Pi k:kind. Pi k':kind. kind_eq (K1 k k') (K2 k'))
         -> kind_eq K (krec (\k:kind. K2 k)) -> type.
- :
   kind_eq_rec_closed (\k:kind. kind_eq_) (\k:kind. \k':kind. kind_eq_) 
kind_eq_.
krstrengthen :
   Pi T':tp. Pi K:kind -> kind. Pi K':kind.
      (Pi k:kind. Pi r:pred. pon r k -> kof T' (K k)) -> kof T' K'
         -> (Pi k:kind. kind_eq (K k) K') -> type.
krstrengthenr :
   Pi G:rtp. (Pi k:kind. Pi r:pred. pon r k -> rtpok G) -> rtpok G -> type.
krstrengthenr* :
   Pi N1:nat. Pi G:rtp* N1.
      (Pi k:kind. Pi r:pred. pon r k -> rtpok* G) -> rtpok* G -> type.
krstrengthenp :
   Pi P:prop. (Pi k:kind. Pi r:pred. pon r k -> propok P) -> propok P -> type.
-closed : krstrengthen (\k:kind. \r:pred. \d:pon r k. D) D (\k:kind. kind_eq_).
-annot :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_annot (D k r d) (Dpon k r d))
      (kof_annot (D kt rtd pon_td) (Dpon kt rtd pon_td)) (\k:kind. kind_eq_).
-lam :
   krstrengthen
      (\k:kind. \r:pred. \d:pon r k. kof_lam (\t:tp. \x:kof t K3. D k r d t x))
      (kof_lam (\t:tp. \x:kof t K3. D' t x)) (\k:kind. Deq' k)
      <- (Pi t:tp. Pi d':kof t K3.
             krstrengthen (\k:kind. \r:pred. \d:pon r k. D k r d t d') (D' t d')
                (\k:kind. Deq k))
      <- (Pi k:kind. kind_eq_cons (Deq k) (\k':kind. karrow K3 k') (Deq' k)).
-app :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_app (D2 k r d) (D1 k r d))
      (kof_app D2'' D1'') (\k:kind. Deq1b k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_arrow_closed (\k:kind. Deq1 k) (\k:kind. Deq1a k)
            (\k:kind. Deq1b k) Deq1ab
      <- kof_resp tp_eq_ Deq1ab D1' D1''
      <- (Pi k:kind. kind_eq_symm (Deq2 k) (Deq2' k))
      <- (Pi k:kind. kind_eq_trans (Deq2' k) (Deq1a k) (Deqa k))
      <- kof_resp tp_eq_ (Deqa kt) D2' D2''.
-pair :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_pair (D2 k r d) (D1 k r d))
      (kof_pair D2' D1') (\k:kind. Deq5 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- (Pi k:kind. kind_eq_cons (Deq1 k) (\k':kind. kprod k' (K2 k)) (Deq4 k))
      <- (Pi k:kind. kind_eq_cons (Deq2 k) (\k':kind. kprod K1' k') (Deq3 k))
      <- (Pi k:kind. kind_eq_trans (Deq4 k) (Deq3 k) (Deq5 k)).
-pi1 :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_pi1 (D k r d)) (kof_pi1 D'')
      (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- kind_eq_prod_closed (\k:kind. Deq k) (\k:kind. Deq1 k)
            (\k:kind. Deq2 k) Deq12
      <- kof_resp tp_eq_ Deq12 D' D''.
-pi2 :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_pi2 (D k r d)) (kof_pi2 D'')
      (\k:kind. Deq2 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- kind_eq_prod_closed (\k:kind. Deq k) (\k:kind. Deq1 k)
            (\k:kind. Deq2 k) Deq12
      <- kof_resp tp_eq_ Deq12 D' D''.
-klam :
   krstrengthen
      (\k:kind. \r:pred. \d:pon r k.
          kof_klam (\k1:kind. \r1:pred. \x:pon r1 k1. D k r d k1 r1 x))
      (kof_klam (\k:kind. \r:pred. \x:pon r k. D' k r x)) (\k:kind. Deq' k)
      <- (Pi k':kind. Pi r':pred. Pi d':pon r' k'.
             krstrengthen (\k:kind. \r:pred. \d:pon r k. D k r d k' r' d')
                (D' k' r' d') (\k:kind. Deq k' k))
      <- (Pi k:kind.
             kind_eq_cons2 (\k':kind. Deq k' k)
                (\k1:kind -> kind. kforall (\k2:kind. k1 k2)) (Deq' k)).
-kapp :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_kapp (D k r d) (Dpon k r d))
      (kof_kapp D'' (Dpon kt rtd pon_td)) (\k:kind. Deq1 k K)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- kind_eq_forall_closed (\k:kind. Deq k) (\k:kind. \k':kind. Deq1 k k')
            Deq2
      <- kof_resp tp_eq_ Deq2 D' D''.
-in1 :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_in1 (D k r d)) (kof_in1 D')
      (\k:kind. Deq' k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- (Pi k:kind. kind_eq_cons (Deq k) (\k':kind. ksum k' K) (Deq' k)).
-in2 :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_in2 (D k r d)) (kof_in2 D')
      (\k:kind. Deq' k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- (Pi k:kind. kind_eq_cons (Deq k) (\k':kind. ksum K k') (Deq' k)).
-case :
   krstrengthen
      (\k:kind. \r:pred. \d:pon r k.
          kof_case (\t:tp. \x:kof t K2. D2 k r d t x)
             (\t:tp. \x:kof t K1. D1 k r d t x) (D k r d))
      (kof_case (\t:tp. \x:kof t K2. D2 kt rtd pon_td t x)
          (\t:tp. \x:kof t K1. D1 kt rtd pon_td t x) (D kt rtd pon_td))
      (\k:kind. kind_eq_).
-roll :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_roll (D k r d))
      (kof_roll (D kt rtd pon_td)) (\k:kind. kind_eq_).
-unroll :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_unroll (D k r d))
      (kof_unroll D'') (\k:kind. Deq1'' k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- kind_eq_rec_closed (\k:kind. Deq k) (\k:kind. \k':kind. Deq1 k k') Deq2
      <- kof_resp tp_eq_ Deq2 D' D''
      <- (Pi k:kind.
             kind_eq_cons2 (\k1:kind. Deq1 k k1)
                (\k':kind -> kind. K k (krec (\k1:kind. k' k1))) (Deq1' k))
      <- (Pi k:kind.
             kind_eq_trans (Deq1' k) (Deq1 k (krec (\k1:kind. K' k1)))
                (Deq1'' k)).
-eteq :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_seteq (D k r d))
      (kof_seteq D'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- kind_eq_symm (Deq kt) Deq'
      <- kof_resp tp_eq_ Deq' D' D''.
-prod :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_prod (D2 k r d) (D1 k r d))
      (kof_prod D2'' D1'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-exp :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_exp (D2 k r d) (D1 k r d))
      (kof_exp D2'' D1'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-code :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_code (D k r d)) (kof_code D')
      (\k:kind. kind_eq_)
      <- krstrengthenr (\k:kind. \r:pred. \x:pon r k. D k r x) D'.
-arrow :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_arrow (D k r d))
      (kof_arrow D') (\k:kind. kind_eq_)
      <- krstrengthenr (\k:kind. \r:pred. \x:pon r k. D k r x) D'.
-cbox :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_cbox (D2 k r d) (D1 k r d))
      (kof_cbox D2'' D1'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-cmbox :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_cmbox (D2 k r d) (D1 k r d))
      (kof_cmbox D2'' D1'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-ptr :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_sptr (D k r d))
      (kof_sptr D'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- kind_eq_symm (Deq kt) Deq'
      <- kof_resp tp_eq_ Deq' D' D''.
-forall :
   krstrengthen
      (\k:kind. \r:pred. \d:pon r k.
          kof_forall (\t:tp. \x:kof t K1. D k r d t x) (Dpon k r d))
      (kof_forall (\t:tp. \x:kof t K1. D'' t x) (Dpon kt rtd pon_td))
      (\k:kind. kind_eq_)
      <- (Pi t:tp. Pi d':kof t K1.
             krstrengthen (\k:kind. \r:pred. \d:pon r k. D k r d t d') (D' t d')
                (\k:kind. Deq k))
      <- kind_eq_symm (Deq kt) Deq'
      <- (Pi t:tp. Pi d:kof t K1. kof_resp tp_eq_ Deq' (D' t d) (D'' t d)).
-exists :
   krstrengthen
      (\k:kind. \r:pred. \d:pon r k.
          kof_exists (\t:tp. \x:kof t K1. D k r d t x) (Dpon k r d))
      (kof_exists (\t:tp. \x:kof t K1. D'' t x) (Dpon kt rtd pon_td))
      (\k:kind. kind_eq_)
      <- (Pi t:tp. Pi d':kof t K1.
             krstrengthen (\k:kind. \r:pred. \d:pon r k. D k r d t d') (D' t d')
                (\k:kind. Deq k))
      <- kind_eq_symm (Deq kt) Deq'
      <- (Pi t:tp. Pi d:kof t K1. kof_resp tp_eq_ Deq' (D' t d) (D'' t d)).
-guard :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_guard (D2 k r d) (D1 k r d))
      (kof_guard D2'' D1') (\k:kind. kind_eq_)
      <- krstrengthenp (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq k)
      <- kind_eq_symm (Deq kt) Deq'
      <- kof_resp tp_eq_ Deq' D2' D2''.
-assert :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_assert (D2 k r d) (D1 k r d))
      (kof_assert D2'' D1') (\k:kind. kind_eq_)
      <- krstrengthenp (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq k)
      <- kind_eq_symm (Deq kt) Deq'
      <- kof_resp tp_eq_ Deq' D2' D2''.
-rec :
   krstrengthen
      (\k:kind. \r:pred. \d:pon r k. kof_rec (\t:tp. \x:kof t kt. D k r d t x))
      (kof_rec (\t:tp. \x:kof t kt. D'' t x)) (\k:kind. kind_eq_)
      <- (Pi t:tp. Pi d':kof t kt.
             krstrengthen (\k:kind. \r:pred. \d:pon r k. D k r d t d') (D' t d')
                (\k:kind. Deq k))
      <- kind_eq_symm (Deq kt) Deq'
      <- (Pi t:tp. Pi d:kof t kt. kof_resp tp_eq_ Deq' (D' t d) (D'' t d)).
-meet :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_meet (D2 k r d) (D1 k r d))
      (kof_meet D2'' D1'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-join :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_join (D2 k r d) (D1 k r d))
      (kof_join D2'' D1'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-numadd :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_numadd (D2 k r d) (D1 k r d))
      (kof_numadd D2'' D1'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-nummul :
   krstrengthen (\k:kind. \r:pred. \d:pon r k. kof_nummul (D2 k r d) (D1 k r d))
      (kof_nummul D2'' D1'') (\k:kind. kind_eq_)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-nil : krstrengthenr* (\k:kind. \r:pred. \d:pon r k. rtpok_nil) rtpok_nil.
-cons :
   krstrengthenr*
      (\k:kind. \r:pred. \d:pon r k. rtpok_cons (D2 k r d) (D1 k r d))
      (rtpok_cons D2' D1'')
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq k)
      <- krstrengthenr* (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
      <- kind_eq_symm (Deq kt) Deq'
      <- kof_resp tp_eq_ Deq' D1' D1''.
- :
   krstrengthenr (\k:kind. \r:pred. \d:pon r k. rtpok_ (D2 k r d) (D1 k r d))
      (rtpok_ D2' D1'')
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq k)
      <- krstrengthenr* (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
      <- kind_eq_symm (Deq kt) Deq'
      <- kof_resp tp_eq_ Deq' D1' D1''.
-closed : krstrengthenp (\k:kind. \r:pred. \d:pon r k. D) D.
-numeq :
   krstrengthenp
      (\k:kind. \r:pred. \d:pon r k. propok_numeq (D2 k r d) (D1 k r d))
      (propok_numeq D2'' D1'')
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-numleq :
   krstrengthenp
      (\k:kind. \r:pred. \d:pon r k. propok_numleq (D2 k r d) (D1 k r d))
      (propok_numleq D2'' D1'')
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-loclt :
   krstrengthenp
      (\k:kind. \r:pred. \d:pon r k. propok_loclt (D2 k r d) (D1 k r d))
      (propok_loclt D2'' D1'')
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'
            (\k:kind. Deq2 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kind_eq_symm (Deq2 kt) Deq2'
      <- kof_resp tp_eq_ Deq1' D1' D1''
      <- kof_resp tp_eq_ Deq2' D2' D2''.
-goodlc :
   krstrengthenp (\k:kind. \r:pred. \d:pon r k. propok_goodloc (D1 k r d))
      (propok_goodloc D1'')
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
            (\k:kind. Deq1 k)
      <- kind_eq_symm (Deq1 kt) Deq1'
      <- kof_resp tp_eq_ Deq1' D1' D1''.
impl :
   krstrengthenp
      (\k:kind. \r:pred. \d:pon r k. propok_impl (D2 k r d) (D1 k r d))
      (propok_impl D2' D1')
      <- krstrengthenp (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
      <- krstrengthenp (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'.
-and :
   krstrengthenp
      (\k:kind. \r:pred. \d:pon r k. propok_and (D2 k r d) (D1 k r d))
      (propok_and D2' D1')
      <- krstrengthenp (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
      <- krstrengthenp (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'.
-or :
   krstrengthenp (\k:kind. \r:pred. \d:pon r k. propok_or (D2 k r d) (D1 k r d))
      (propok_or D2' D1')
      <- krstrengthenp (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
      <- krstrengthenp (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'.
kstrengthen :
   Pi T':tp. Pi K:kind -> kind. Pi K':kind.
      (Pi k:kind. kof T' (K k)) -> kof T' K' -> (Pi k:kind. kind_eq (K k) K')
         -> type.
- :
   kstrengthen (\k:kind. Dkof k) Dkof' (\k:kind. Deq k)
      <- krstrengthen (\k:kind. \r:pred. \d:pon r k. Dkof k) Dkof'
            (\k:kind. Deq k).
-ame : kof_fun D D kind_eq_.
-annot : kof_fun (kof_annot X1 X2) (kof_annot X3 X4) kind_eq_.
-lam :
   kof_fun (kof_lam (\t:tp. \x:kof t K3. D1 t x))
      (kof_lam (\t:tp. \x:kof t K3. D2 t x)) Deq'
      <- (Pi t:tp. Pi d:kof t K3. kof_fun (D1 t d) (D2 t d) Deq)
      <- kind_eq_cons Deq (\k:kind. karrow K3 k) Deq'.
-app :
   kof_fun (kof_app X2 D1) (kof_app X3 D2) Deq'
      <- kof_fun D1 D2 Deq
      <- karrow_eq_cdr Deq X1 Deq'.
-pair :
   kof_fun (kof_pair D2 D1) (kof_pair D2' D1') Deq
      <- kof_fun D1 D1' Deq1
      <- kof_fun D2 D2' Deq2
      <- kind_eq_cons Deq1 (\k:kind. kprod k K2) Deq1'
      <- kind_eq_cons Deq2 (\k:kind. kprod K3 k) Deq2'
      <- kind_eq_trans Deq1' Deq2' Deq.
-pi1 :
   kof_fun (kof_pi1 D1) (kof_pi1 D2) Deq'
      <- kof_fun D1 D2 Deq
      <- kprod_eq_cdr Deq Deq' X1.
-pi2 :
   kof_fun (kof_pi2 D1) (kof_pi2 D2) Deq'
      <- kof_fun D1 D2 Deq
      <- kprod_eq_cdr Deq X1 Deq'.
-klam :
   kof_fun (kof_klam (\k:kind. \r:pred. \x:pon r k. D1 k r x))
      (kof_klam (\k:kind. \r:pred. \x:pon r k. D2 k r x)) Deq'
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             kof_fun (D1 k r d) (D2 k r d) (Deq k))
      <- kind_eq_cons2 (\k:kind. Deq k)
            (\k:kind -> kind. kforall (\k1:kind. k k1)) Deq'.
-kapp :
   kof_fun (kof_kapp D1 Dpon) (kof_kapp D2 X1) (Deq' K)
      <- kof_fun D1 D2 Deq
      <- kforall_eq_cdr Deq (\k:kind. Deq' k).
-in1 :
   kof_fun (kof_in1 D1) (kof_in1 D2) Deq'
      <- kof_fun D1 D2 Deq
      <- kind_eq_cons Deq (\k:kind. ksum k K3) Deq'.
-in2 :
   kof_fun (kof_in2 D1) (kof_in2 D2) Deq'
      <- kof_fun D1 D2 Deq
      <- kind_eq_cons Deq (\k:kind. ksum K3 k) Deq'.
kof_fun|case :
   Pi K1':kind. Pi K1:kind. Pi T':tp -> tp. Pi K2:kind.
      kind_eq K1' K1 -> (Pi t:tp. kof t K1 -> kof (T' t) K2)
         -> (Pi t:tp. kof t K1' -> kof (T' t) K2) -> type.
- :
   kof_fun|case kind_eq_ (\t:tp. \x:kof t K1. D t x) (\t:tp. \x:kof t K1. D t x).
-case :
   kof_fun
      (kof_case (\t:tp. \x:kof t K3. X2 t x) (\t:tp. \x:kof t K1. D1a t x) D1)
      (kof_case (\t:tp. \x:kof t K3. X3 t x) (\t:tp. \x:kof t K1. D2a t x) D2)
      Deq''
      <- kof_fun D1 D2 Deq
      <- ksum_eq_cdr Deq Deq' X1
      <- kof_fun|case Deq' (\t:tp. \x:kof t K1. D2a t x)
            (\t:tp. \x:kof t K1. D2a' t x)
      <- (Pi t:tp. Pi d:kof t K1. kof_fun (D1a t d) (D2a' t d) Deq'').
-roll : kof_fun (kof_roll X1) (kof_roll X2) kind_eq_.
-unroll :
   kof_fun (kof_unroll D1) (kof_unroll D2) Deq''
      <- kof_fun D1 D2 Deq
      <- krec_eq_cdr Deq (\k:kind. Deq' k)
      <- kind_eq_cons2 (\k:kind. Deq' k)
            (\k:kind -> kind. k (krec (\k1:kind. k k1))) Deq''.
-b0 : kof_fun kof_b0 kof_b0 kind_eq_.
-b1 : kof_fun kof_b1 kof_b1 kind_eq_.
-eteq : kof_fun (kof_seteq X1) (kof_seteq X2) kind_eq_.
-prod : kof_fun (kof_prod X1 X2) (kof_prod X3 X4) kind_eq_.
-exp : kof_fun (kof_exp X1 X2) (kof_exp X3 X4) kind_eq_.
-code : kof_fun (kof_code X1) (kof_code X2) kind_eq_.
-arrow : kof_fun (kof_arrow X1) (kof_arrow X2) kind_eq_.
-box : kof_fun (kof_cbox X1 X2) (kof_cbox X3 X4) kind_eq_.
-mbox : kof_fun (kof_cmbox X1 X2) (kof_cmbox X3 X4) kind_eq_.
-ptr : kof_fun (kof_sptr X1) (kof_sptr X2) kind_eq_.
-forall :
   kof_fun (kof_forall (\t:tp. \x:kof t K1. X1 t x) X2)
      (kof_forall (\t:tp. \x:kof t K1. X3 t x) X4) kind_eq_.
-exists :
   kof_fun (kof_exists (\t:tp. \x:kof t K1. X1 t x) X2)
      (kof_exists (\t:tp. \x:kof t K1. X3 t x) X4) kind_eq_.
-guard : kof_fun (kof_guard X1 X2) (kof_guard X3 X4) kind_eq_.
-assert : kof_fun (kof_assert X1 X2) (kof_assert X3 X4) kind_eq_.
-rec :
   kof_fun (kof_rec (\t:tp. \x:kof t kt. X1 t x))
      (kof_rec (\t:tp. \x:kof t kt. X2 t x)) kind_eq_.
-meet : kof_fun (kof_meet X1 X2) (kof_meet X3 X4) kind_eq_.
-join : kof_fun (kof_join X1 X2) (kof_join X3 X4) kind_eq_.
-ns : kof_fun kof_ns kof_ns kind_eq_.
-void : kof_fun kof_void kof_void kind_eq_.
-gotptr : kof_fun kof_gotptr kof_gotptr kind_eq_.
-numadd : kof_fun (kof_numadd X1 X2) (kof_numadd X3 X4) kind_eq_.
-nummul : kof_fun (kof_nummul X1 X2) (kof_nummul X3 X4) kind_eq_.
pon_fun :
   Pi R:pred. Pi K1:kind. Pi K2:kind.
      pon R K1 -> pon R K2 -> kind_eq K1 K2 -> type.
-ame : pon_fun D D kind_eq_.
-true : pon_fun pon_true pon_true kind_eq_.
-d : pon_fun pon_td pon_td kind_eq_.
-n : pon_fun (pon_tn X1) (pon_tn X2) kind_eq_.
-arrow :
   pon_fun (pon_arrow D2 D1) (pon_arrow D2' D1') Deq
      <- pon_fun D1 D1' Deq1
      <- pon_fun D2 D2' Deq2
      <- kind_eq_cons Deq1 (\k:kind. karrow k K2) Deq1'
      <- kind_eq_cons Deq2 (\k:kind. karrow K1' k) Deq2'
      <- kind_eq_trans Deq1' Deq2' Deq.
-prod :
   pon_fun (pon_prod D2 D1) (pon_prod D2' D1') Deq
      <- pon_fun D1 D1' Deq1
      <- pon_fun D2 D2' Deq2
      <- kind_eq_cons Deq1 (\k:kind. kprod k K2) Deq1'
      <- kind_eq_cons Deq2 (\k:kind. kprod K1' k) Deq2'
      <- kind_eq_trans Deq1' Deq2' Deq.
-forall :
   pon_fun (pon_forall (\k:kind. \r:pred. \x:pon r k. D k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. D' k r x)) Deq'
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             pon_fun (D k r d) (D' k r d) (Deq k))
      <- kind_eq_cons2 (\k:kind. Deq k)
            (\k:kind -> kind. kforall (\k1:kind. k k1)) Deq'.
-um :
   pon_fun (pon_sum D2 D1) (pon_sum D2' D1') Deq
      <- pon_fun D1 D1' Deq1
      <- pon_fun D2 D2' Deq2
      <- kind_eq_cons Deq1 (\k:kind. ksum k K2) Deq1'
      <- kind_eq_cons Deq2 (\k:kind. ksum K1' k) Deq2'
      <- kind_eq_trans Deq1' Deq2' Deq.
-rec :
   pon_fun (pon_rec (\k:kind. \r:pred. \x:pon r k. D k r x))
      (pon_rec (\k:kind. \r:pred. \x:pon r k. D' k r x)) Deq'
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             pon_fun (D k r d) (D' k r d) (Deq k))
      <- kind_eq_cons2 (\k:kind. Deq k) (\k:kind -> kind. krec (\k1:kind. k k1))
            Deq'.
kind_eq_karrow_kprod_contradict :
   Pi K1:kind. Pi K2:kind. Pi K3:kind. Pi K4:kind.
      kind_eq (karrow K1 K2) (kprod K3 K4) -> false -> type.
kind_eq_karrow_kforall_contradict :
   Pi K1:kind. Pi K2:kind. Pi K3:kind -> kind.
      kind_eq (karrow K1 K2) (kforall (\k:kind. K3 k)) -> false -> type.
kind_eq_karrow_ksum_contradict :
   Pi K1:kind. Pi K2:kind. Pi K3:kind. Pi K4:kind.
      kind_eq (karrow K1 K2) (ksum K3 K4) -> false -> type.
kind_eq_karrow_krec_contradict :
   Pi K1:kind. Pi K2:kind. Pi K3:kind -> kind.
      kind_eq (karrow K1 K2) (krec (\k:kind. K3 k)) -> false -> type.
kind_eq_kprod_kforall_contradict :
   Pi K1:kind. Pi K2:kind. Pi K3:kind -> kind.
      kind_eq (kprod K1 K2) (kforall (\k:kind. K3 k)) -> false -> type.
kind_eq_kprod_ksum_contradict :
   Pi K1:kind. Pi K2:kind. Pi K3:kind. Pi K4:kind.
      kind_eq (kprod K1 K2) (ksum K3 K4) -> false -> type.
kind_eq_kprod_krec_contradict :
   Pi K1:kind. Pi K2:kind. Pi K3:kind -> kind.
      kind_eq (kprod K1 K2) (krec (\k:kind. K3 k)) -> false -> type.
kind_eq_kforall_ksum_contradict :
   Pi K1:kind -> kind. Pi K2:kind. Pi K3:kind.
      kind_eq (kforall (\k:kind. K1 k)) (ksum K2 K3) -> false -> type.
kind_eq_kforall_krec_contradict :
   Pi K1:kind -> kind. Pi K2:kind -> kind.
      kind_eq (kforall (\k:kind. K1 k)) (krec (\k:kind. K2 k)) -> false -> type.
kind_eq_ksum_krec_contradict :
   Pi K1:kind. Pi K2:kind. Pi K3:kind -> kind.
      kind_eq (ksum K1 K2) (krec (\k:kind. K3 k)) -> false -> type.
kind_eq_kt_karrow_contradict :
   Pi K1:kind. Pi K2:kind. kind_eq kt (karrow K1 K2) -> false -> type.
kind_eq_kt_kprod_contradict :
   Pi K1:kind. Pi K2:kind. kind_eq kt (kprod K1 K2) -> false -> type.
kind_eq_kt_kforall_contradict :
   Pi K1:kind -> kind. kind_eq kt (kforall (\k:kind. K1 k)) -> false -> type.
kind_eq_kt_krec_contradict :
   Pi K1:kind -> kind. kind_eq kt (krec (\k:kind. K1 k)) -> false -> type.
kind_eq_knum_karrow_contradict :
   Pi K1:kind. Pi K2:kind. kind_eq knum (karrow K1 K2) -> false -> type.
kind_eq_knum_kprod_contradict :
   Pi K1:kind. Pi K2:kind. kind_eq knum (kprod K1 K2) -> false -> type.
kind_eq_knum_kforall_contradict :
   Pi K1:kind -> kind. kind_eq knum (kforall (\k:kind. K1 k)) -> false -> type.
kind_eq_knum_ksum_contradict :
   Pi K1:kind. Pi K2:kind. kind_eq knum (ksum K1 K2) -> false -> type.
kind_eq_knum_krec_contradict :
   Pi K1:kind -> kind. kind_eq knum (krec (\k:kind. K1 k)) -> false -> type.
kind_eq_kloc_karrow_contradict :
   Pi K1:kind. Pi K2:kind. kind_eq kloc (karrow K1 K2) -> false -> type.
kind_eq_kloc_kprod_contradict :
   Pi K1:kind. Pi K2:kind. kind_eq kloc (kprod K1 K2) -> false -> type.
kind_eq_kloc_kforall_contradict :
   Pi K1:kind -> kind. kind_eq kloc (kforall (\k:kind. K1 k)) -> false -> type.
kind_eq_kloc_ksum_contradict :
   Pi K1:kind. Pi K2:kind. kind_eq kloc (ksum K1 K2) -> false -> type.
kind_eq_kloc_krec_contradict :
   Pi K1:kind -> kind. kind_eq kloc (krec (\k:kind. K1 k)) -> false -> type.
extensionality :
   Pi K1:kind. Pi T':tp. Pi K2:kind.
      (Pi t:tp. kof t K1 -> kof (app T' t) K2) -> kof T' (karrow K1 K2) -> type.
- :
   extensionality (\t:tp. \d:kof t K1. kof_app d (D t d)) D'
      <- strengthen (\t:tp. \x:kof t K1. D t x) D'.
pextensionality :
   Pi T':tp. Pi K1:kind. Pi K2:kind.
      kof (pi1 T') K1 -> kof (pi2 T') K2 -> kof T' (kprod K1 K2) -> type.
- :
   pextensionality (kof_pi1 D1) (kof_pi2 D2) D
      <- kof_fun D1 D2 Deq
      <- kprod_eq_cdr Deq Deq1 Deq2
      <- kind_eq_cons Deq2 (\k:kind. kprod K1 k) Deq'
      <- kof_resp tp_eq_ Deq' D1 D.
kextensionality :
   Pi T':tp. Pi K:kind -> kind.
      (Pi k:kind. Pi r:pred. pon r k -> kof (kapp T' k r) (K k))
         -> kof T' (kforall (\k:kind. K k)) -> type.
- :
   kextensionality (\k:kind. \r:pred. \d:pon r k. kof_kapp (D k r d) d) D'''
      <- krstrengthen (\k:kind. \r:pred. \x:pon r k. D k r x) D'
            (\k:kind. Deq k)
      <- kind_eq_forall_closed (\k:kind. Deq k) (\k:kind. \k':kind. Deq1 k k')
            Deq2
      <- kof_resp tp_eq_ Deq2 D' D''
      <- kind_eq_cons2 (\k:kind. Deq1 k k)
            (\k:kind -> kind. kforall (\k1:kind. k k1)) Deq3
      <- kind_eq_symm Deq3 Deq3'
      <- kof_resp tp_eq_ Deq3' D'' D'''.
kof_tp_exp :
   Pi T':tp. Pi N:nat. Pi T':tp.
      kof T' kt -> tp_exp T' N T' -> kof T' kt -> type.
- : kof_tp_exp X1 tp_exp_z kof_b0.
- : kof_tp_exp Dkof (tp_exp_s Dte) (kof_prod D Dkof) <- kof_tp_exp Dkof Dte D.
tp_exp_fun :
   Pi T':tp. Pi N:nat. Pi T1:tp. Pi T2:tp.
      tp_exp T' N T1 -> tp_exp T' N T2 -> tp_eq T1 T2 -> type.
- : tp_exp_fun tp_exp_z tp_exp_z tp_eq_.
- :
   tp_exp_fun (tp_exp_s D1) (tp_exp_s D2) D'
      <- tp_exp_fun D1 D2 D
      <- tp_eq_cons D (\t:tp. prod T' t) D'.
tp_exp_separate :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi T':tp. Pi T1:tp. Pi T2:tp. Pi T3:tp.
      sum N1 N2 N3 -> tp_exp T' N1 T1 -> tp_exp T' N2 T2 -> tp_exp T' N3 T3
         -> subtype (prod T1 T2) T3 -> subtype T3 (prod T1 T2) -> type.
- :
   tp_exp_separate sum_z tp_exp_z Dte2 Dte3 Dsub Dsubrev
      <- tp_exp_fun Dte2 Dte3 Deq
      <- subtype_resp tp_eq_ Deq lunite Dsub
      <- subtype_resp Deq tp_eq_ luniti Dsubrev.
- :
   tp_exp_separate (sum_s Dsum) (tp_exp_s Dte1) Dte2 (tp_exp_s Dte3)
      (trans (prod_sub Dsub reflex) rassoc)
      (trans lassoc (prod_sub Dsubrev reflex))
      <- tp_exp_separate Dsum Dte1 Dte2 Dte3 Dsub Dsubrev.
can_tp_exp : Pi T':tp. Pi N:nat. Pi T':tp. tp_exp T' N T' -> type.
- : can_tp_exp T' 0' b0 tp_exp_z.
- : can_tp_exp T' (s N) (prod T' T') (tp_exp_s D) <- can_tp_exp T' N T' D.
tp_exp_sum :
   Pi T':tp. Pi N1:nat. Pi T1:tp. Pi N2:nat. Pi T2:tp. Pi N3:nat. Pi T3:tp.
      tp_exp T' N1 T1 -> tp_exp T' N2 T2 -> sum N1 N2 N3 -> tp_exp T' N3 T3
         -> subtype T3 (prod T1 T2) -> subtype (prod T1 T2) T3 -> type.
- : tp_exp_sum tp_exp_z Dte sum_z Dte luniti lunite.
- :
   tp_exp_sum (tp_exp_s Dte1) Dte2 (sum_s Dsum) (tp_exp_s Dte3)
      (trans lassoc (prod_sub Dsub reflex))
      (trans (prod_sub Dsubrev reflex) rassoc)
      <- tp_exp_sum Dte1 Dte2 Dsum Dte3 Dsub Dsubrev.
tp_exp_sum' :
   Pi T':tp. Pi N1:nat. Pi T1:tp. Pi N2:nat. Pi T2:tp. Pi N3:nat. Pi T3:tp.
      tp_exp T' N1 T1 -> tp_exp T' N2 T2 -> sum N1 N2 N3 -> tp_exp T' N3 T3
         -> subtype T3 (prod T1 T2) -> subtype (prod T1 T2) T3 -> type.
- :
   tp_exp_sum' Dte1 Dte2 Dsum Dte3 Dsub1' Dsub2'
      <- can_tp_exp T5 N2 T1 Dte1
      <- can_tp_exp T5 N3 T2 Dte2
      <- tp_exp_sum Dte1 Dte2 Dsum Dte3' Dsub1 Dsub2
      <- tp_exp_fun Dte3' Dte3 Deq
      <- subtype_resp Deq tp_eq_ Dsub1 Dsub1'
      <- subtype_resp tp_eq_ Deq Dsub2 Dsub2'.
false_implies_kof : false -> Pi T':tp. Pi K:kind. kof T' K -> type.
htpok_replace :
   Pi L:loc. Pi T':tp. Pi S:htp. Pi L':loc. Pi T':tp.
      htpok (htpcons L T' S) L' -> kof T' kt -> htpok (htpcons L T' S) L'
         -> type.
htpok_replace_ :
   htpok_replace (htpok_cons Dhtpok X1 Dlt) Dkof (htpok_cons Dhtpok Dkof Dlt).
htpok_cdr :
   Pi L:loc. Pi T':tp. Pi S:htp. Pi L1:loc.
      htpok (htpcons L T' S) L1 -> htpok S L -> type.
htpok_cdr_ : htpok_cdr (htpok_cons D X1 X2) D.
flatten : tp -> tp -> type.
flatten_onto : tp -> tp -> tp -> type.
flatten_prod :
   flatten (prod T1 T2) T' <- flatten T2 T2' <- flatten_onto T1 T2' T'.
flatten_else : flatten T' T'.
flatten_onto_prod :
   flatten_onto (prod T' T') T1 T3
      <- flatten_onto T' T1 T2
      <- flatten_onto T' T2 T3.
flatten_onto_else : flatten_onto T1 T2 (prod T1 T2).
flatten_onto_sub :
   Pi T1:tp. Pi T2:tp. Pi T3:tp.
      flatten_onto T1 T2 T3 -> subtype (prod T1 T2) T3
         -> subtype T3 (prod T1 T2) -> type.
flatten_onto_sub_prod :
   flatten_onto_sub (flatten_onto_prod D2 D1)
      (trans Dsub2 (trans (prod_sub Dsub1 reflex) rassoc))
      (trans (trans lassoc (prod_sub Dsub1' reflex)) Dsub2')
      <- flatten_onto_sub D1 Dsub1 Dsub1'
      <- flatten_onto_sub D2 Dsub2 Dsub2'.
flatten_onto_sub_else : flatten_onto_sub flatten_onto_else reflex reflex.
flatten_sub :
   Pi T1:tp. Pi T2:tp. flatten T1 T2 -> subtype T1 T2 -> subtype T2 T1 -> type.
flatten_sub_prod :
   flatten_sub (flatten_prod D2 D1) (trans Dsub2 (prod_sub Dsub1 reflex))
      (trans (prod_sub Dsub1' reflex) Dsub2')
      <- flatten_sub D1 Dsub1 Dsub1'
      <- flatten_onto_sub D2 Dsub2 Dsub2'.
flatten_sub_else : flatten_sub flatten_else reflex reflex.
rtlookup_update_invert :
   Pi G1:rtp. Pi REG:reg. Pi T1:tp. Pi T2:tp. Pi G2:rtp.
      rtlookup G1 REG T1 -> rtupdate G1 REG T2 G2 -> rtupdate G2 REG T1 G1
         -> type.
rtlookup_update_invert* :
   Pi N1:nat. Pi G1:rtp* N1. Pi N:nat. Pi T1:tp. Pi T2:tp. Pi G2:rtp* N1.
      rtlookup* G1 N T1 -> rtupdate* G1 N T2 G2 -> rtupdate* G2 N T1 G1 -> type.
- : rtlookup_update_invert* rtlookup_z rtupdate_z rtupdate_z.
- :
   rtlookup_update_invert* (rtlookup_s Dlook) (rtupdate_s Dupd)
      (rtupdate_s Dupd')
      <- rtlookup_update_invert* Dlook Dupd Dupd'.
- :
   rtlookup_update_invert (rtlookup_ Dlook) (rtupdate_ Dupd) (rtupdate_ Dupd')
      <- rtlookup_update_invert* Dlook Dupd Dupd'.
ztlookup_update_invert :
   Pi G1:rtp. Pi ZT1:tp. Pi ZT2:tp. Pi G2:rtp.
      ztlookup G1 ZT1 -> ztupdate G1 ZT2 G2 -> ztupdate G2 ZT1 G1 -> type.
ztlookup_update_invert_ : ztlookup_update_invert ztlookup_ ztupdate_ ztupdate_.
rtupdate_rtlookup :
   Pi G1:rtp. Pi REG:reg. Pi T':tp. Pi G2:rtp.
      rtupdate G1 REG T' G2 -> rtlookup G2 REG T' -> type.
rtupdate_rtlookup* :
   Pi N1:nat. Pi G1:rtp* N1. Pi N:nat. Pi T':tp. Pi G2:rtp* N1.
      rtupdate* G1 N T' G2 -> rtlookup* G2 N T' -> type.
rtupdate_rtlookup_z : rtupdate_rtlookup* rtupdate_z rtlookup_z.
rtupdate_rtlookup_s :
   rtupdate_rtlookup* (rtupdate_s Dupd) (rtlookup_s Dlook)
      <- rtupdate_rtlookup* Dupd Dlook.
rtupdate_rtlookup_ :
   rtupdate_rtlookup (rtupdate_ Dupd) (rtlookup_ Dlook)
      <- rtupdate_rtlookup* Dupd Dlook.
ztupdate_ztlookup :
   Pi G1:rtp. Pi T':tp. Pi G2:rtp. ztupdate G1 T' G2 -> ztlookup G2 T' -> type.
ztupdate_ztlookup_ : ztupdate_ztlookup ztupdate_ ztlookup_.
can_ztupdate : Pi T1:rtp. Pi T2:tp. Pi T3:rtp. ztupdate T1 T2 T3 -> type.
can_ztupdate_ : can_ztupdate (rt T1 G1) T2 (rt T2 G1) ztupdate_.
ztupdate_last :
   Pi G:rtp. Pi T1:tp. Pi G1:rtp. Pi T2:tp. Pi G2:rtp.
      ztupdate G T1 G1 -> ztupdate G T2 G2 -> ztupdate G1 T2 G2 -> type.
ztupdate_last_ : ztupdate_last ztupdate_ ztupdate_ ztupdate_.
subrtype*_reflex : Pi N1:nat. Pi G:rtp* N1. subrtype* G G -> type.
-nil : subrtype*_reflex rtnil subrtype_nil.
-cons :
   subrtype*_reflex (rtcons T1 G) (subrtype_cons D reflex)
      <- subrtype*_reflex G D.
subrtype*_trans :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1. Pi G3:rtp* N1.
      subrtype* G1 G2 -> subrtype* G2 G3 -> subrtype* G1 G3 -> type.
-n : subrtype*_trans subrtype_nil subrtype_nil subrtype_nil.
-c :
   subrtype*_trans (subrtype_cons Dsubr1 Dsub1) (subrtype_cons Dsubr2 Dsub2)
      (subrtype_cons Dsubr3 (trans Dsub2 Dsub1))
      <- subrtype*_trans Dsubr1 Dsubr2 Dsubr3.
subrtype*_rtlookup :
   Pi N1:nat. Pi G1:rtp* N1. Pi N2:nat. Pi T1:tp. Pi T2:tp. Pi G2:rtp* N1.
      rtlookup* G1 N2 T1 -> rtupdate* G1 N2 T2 G2 -> subtype T1 T2
         -> subrtype* G1 G2 -> type.
- :
   subrtype*_rtlookup rtlookup_z rtupdate_z Dsub (subrtype_cons Drefl Dsub)
      <- subrtype*_reflex G1 Drefl.
- :
   subrtype*_rtlookup (rtlookup_s Drtl) (rtupdate_s Drtup) Dsub
      (subrtype_cons Dsubr reflex)
      <- subrtype*_rtlookup Drtl Drtup Dsub Dsubr.
subrtype_decons :
   Pi T1:tp. Pi G1:rtp* regcount. Pi T2:tp. Pi G2:rtp* regcount.
      subrtype (rt T1 G1) (rt T2 G2) -> subtype T1 T2 -> subrtype* G1 G2 -> type.
-ref : subrtype_decons subrtype_reflex reflex D <- subrtype*_reflex D1 D.
-trans :
   subrtype_decons (subrtype_trans D23 D12) (trans D23a D12a) Db
      <- subrtype_decons D12 D12a D12b
      <- subrtype_decons D23 D23a D23b
      <- subrtype*_trans D12b D23b Db.
-reg :
   subrtype_decons (subrtype_reg Dsub (rtupdate_ Dupd) (rtlookup_ Dlook)) 
reflex
      Drsub
      <- subrtype*_rtlookup Dlook Dupd Dsub Drsub.
-p :
   subrtype_decons (subrtype_sp Dsub ztupdate_ ztlookup_) Dsub Drsub
      <- subrtype*_reflex G1 Drsub.
-all : subrtype_decons (subrtype_all Dsubr Dsub) Dsub Dsubr.
kof_in1_invert :
   Pi T':tp. Pi K:kind. Pi K1:kind. Pi K2:kind.
      kof (in1 T' K) (ksum K1 K2) -> kof T' K1 -> kind_eq K K2 -> type.
- : kof_in1_invert (kof_in1 Dkof) Dkof kind_eq_.
kof_in2_invert :
   Pi T':tp. Pi K:kind. Pi K1:kind. Pi K2:kind.
      kof (in2 T' K) (ksum K1 K2) -> kof T' K2 -> kind_eq K K1 -> type.
- : kof_in2_invert (kof_in2 Dkof) Dkof kind_eq_.
propok_numlt_invert :
   Pi TN1:tp. Pi TN2:tp.
      propok (pnumlt TN1 TN2) -> kof TN1 knum -> kof TN2 knum -> type.
- : propok_numlt_invert (propok_numlt _ _ D D') D' D.
kof_setlt_invert :
   Pi N:nat. Pi TN:tp. kof (setlt N TN) kt -> kof TN knum -> type.
- :
   kof_setlt_invert
      (kof_exists (\t:tp. \d:kof t knum. kof_assert (X2 t d) (D t d)) X3) D'
      <- propok_numlt_invert (D (numlit 0') kof_numlit) X1 D'.
kof_setgt_invert :
   Pi N:nat. Pi TN:tp. kof (setgt N TN) kt -> kof TN knum -> type.
- :
   kof_setgt_invert
      (kof_exists (\t:tp. \d:kof t knum. kof_assert (X2 t d) (D t d)) X3) D'
      <- propok_numlt_invert (D (numlit 0') kof_numlit) D' X1.
false_implies_equiv : false -> Pi T1:tp. Pi T2:tp. equiv T1 T2 -> type.
equivr_symm :
   Pi G:rtp. Pi G':rtp. rtpok G -> equivr G G' -> equivr G' G -> type.
equivr_symm* :
   Pi N1:nat. Pi G:rtp* N1. Pi G':rtp* N1.
      rtpok* G -> equivr* G G' -> equivr* G' G -> type.
equivr_symm_nil : equivr_symm* X1 equivr_nil equivr_nil.
equivr_symm_cons :
   equivr_symm* (rtpok_cons Drtpok Dkof) (equivr_cons D2 D1)
      (equivr_cons D2' (equiv_symm Dkof D1))
      <- equivr_symm* Drtpok D2 D2'.
equivr_symm_ :
   equivr_symm (rtpok_ Drtpok Dkof) (equivr_ D2 D1)
      (equivr_ D2' (equiv_symm Dkof D1))
      <- equivr_symm* Drtpok D2 D2'.
compatability_pr :
   Pi K':kind. Pi T':pred -> tp. Pi K:kind. Pi R1:pred. Pi R2:pred.
      (Pi r:pred. pon r K' -> kof (T' r) K) -> pon R1 K' -> pon R2 K'
         -> equivpr R1 R2 -> equiv (T' R1) (T' R2) -> type.
compatabilityr_pr :
   Pi K':kind. Pi G:pred -> rtp. Pi R1:pred. Pi R2:pred.
      (Pi r:pred. pon r K' -> rtpok (G r)) -> pon R1 K' -> pon R2 K'
         -> equivpr R1 R2 -> equivr (G R1) (G R2) -> type.
compatabilityr*_pr :
   Pi K':kind. Pi N:nat. Pi G:pred -> rtp* N. Pi R1:pred. Pi R2:pred.
      (Pi r:pred. pon r K' -> rtpok* (G r)) -> pon R1 K' -> pon R2 K'
         -> equivpr R1 R2 -> equivr* (G R1) (G R2) -> type.
compatabilityp_pr :
   Pi K':kind. Pi P:pred -> prop. Pi R1:pred. Pi R2:pred.
      (Pi r:pred. pon r K' -> propok (P r)) -> pon R1 K' -> pon R2 K'
         -> equivpr R1 R2 -> equivp (P R1) (P R2) -> type.
compatabilitypr_pr :
   Pi K':kind. Pi R:pred -> pred. Pi K:kind. Pi R1:pred. Pi R2:pred.
      (Pi r:pred. pon r K' -> pon (R r) K) -> pon R1 K' -> pon R2 K'
         -> equivpr R1 R2 -> equivpr (R R1) (R R2) -> type.
-closed : compatability_pr (\r:pred. \d:pon r K1. D) X1 X2 X3 equiv_reflex.
-annot :
   compatability_pr (\r:pred. \d:pon r K1. kof_annot (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_annot Dequiv1 Dequiv2)
      <- compatabilitypr_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-lam :
   compatability_pr
      (\r:pred. \d:pon r K2. kof_lam (\t:tp. \x:kof t K1. D r d t x)) Dpon1
      Dpon2 Dequiv (equiv_lam (\t:tp. \x:kof t K1. Dequiv' t x))
      <- (Pi t:tp. Pi d':kof t K1.
             compatability_pr (\r:pred. \d:pon r K2. D r d t d') Dpon1 Dpon2
                Dequiv (Dequiv' t d')).
-app :
   compatability_pr (\r:pred. \d:pon r K1. kof_app (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_app Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-pair :
   compatability_pr (\r:pred. \d:pon r K1. kof_pair (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_pair Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-pi1 :
   compatability_pr (\r:pred. \d:pon r K1. kof_pi1 (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_pi1 Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-pi2 :
   compatability_pr (\r:pred. \d:pon r K1. kof_pi2 (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_pi2 Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-klam :
   compatability_pr
      (\r:pred. \d:pon r K1.
          kof_klam (\k:kind. \r1:pred. \x:pon r1 k. D r d k r1 x)) Dpon1 Dpon2
      Dequiv (equiv_klam (\k:kind. \r:pred. \x:pon r k. Dequiv' k r x))
      <- (Pi k':kind. Pi r':pred. Pi d':pon r' k'.
             compatability_pr (\r:pred. \d:pon r K1. D r d k' r' d') Dpon1 Dpon2
                Dequiv (Dequiv' k' r' d')).
-kapp :
   compatability_pr (\r:pred. \d:pon r K1. kof_kapp (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_kapp Dequiv1 Dequiv2)
      <- compatabilitypr_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-in1 :
   compatability_pr (\r:pred. \d:pon r K1. kof_in1 (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_in1 Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-in2 :
   compatability_pr (\r:pred. \d:pon r K1. kof_in2 (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_in2 Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-case :
   compatability_pr
      (\r:pred. \d:pon r K2.
          kof_case (\t:tp. \x:kof t K1. D2 r d t x)
             (\t:tp. \x:kof t K4. D1 r d t x) (D0 r d)) Dpon1 Dpon2 Dequiv
      (equiv_case (\t:tp. \x:kof t K1. Dequiv2 t x)
          (\t:tp. \x:kof t K4. Dequiv1 t x) Dequiv0)
      <- compatability_pr (\r:pred. \x:pon r K2. D0 r x) Dpon1 Dpon2 Dequiv
            Dequiv0
      <- (Pi t:tp. Pi d':kof t K4.
             compatability_pr (\r:pred. \d:pon r K2. D1 r d t d') Dpon1 Dpon2
                Dequiv (Dequiv1 t d'))
      <- (Pi t:tp. Pi d':kof t K1.
             compatability_pr (\r:pred. \d:pon r K2. D2 r d t d') Dpon1 Dpon2
                Dequiv (Dequiv2 t d')).
-roll :
   compatability_pr (\r:pred. \d:pon r K1. kof_roll (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_roll Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-unroll :
   compatability_pr (\r:pred. \d:pon r K1. kof_unroll (D r d)) Dpon1 Dpon2
      Dequiv (equiv_unroll Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-eteq :
   compatability_pr (\r:pred. \d:pon r K1. kof_seteq (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_seteq Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-prod :
   compatability_pr (\r:pred. \d:pon r K1. kof_prod (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_prod Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-exp :
   compatability_pr (\r:pred. \d:pon r K1. kof_exp (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_exp Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-code :
   compatability_pr (\r:pred. \d:pon r K1. kof_code (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_code Dequiv')
      <- compatabilityr_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-arrow :
   compatability_pr (\r:pred. \d:pon r K1. kof_arrow (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_arrow Dequiv')
      <- compatabilityr_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-cbox :
   compatability_pr (\r:pred. \d:pon r K1. kof_cbox (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_cbox Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-cmbox :
   compatability_pr (\r:pred. \d:pon r K1. kof_cmbox (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_cmbox Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-ptr :
   compatability_pr (\r:pred. \d:pon r K1. kof_sptr (D r d)) Dpon1 Dpon2 Dequiv
      (equiv_sptr Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. D r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-forall :
   compatability_pr
      (\r:pred. \d:pon r K2.
          kof_forall (\t:tp. \x:kof t K1. D2 r d t x) (D1 r d)) Dpon1 Dpon2
      Dequiv (equiv_forall Dequiv1 (\t:tp. \x:kof t K1. Dequiv2 t x))
      <- compatabilitypr_pr (\r:pred. \x:pon r K2. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- (Pi t:tp. Pi d':kof t K1.
             compatability_pr (\r:pred. \d:pon r K2. D2 r d t d') Dpon1 Dpon2
                Dequiv (Dequiv2 t d')).
-exists :
   compatability_pr
      (\r:pred. \d:pon r K2.
          kof_exists (\t:tp. \x:kof t K1. D2 r d t x) (D1 r d)) Dpon1 Dpon2
      Dequiv (equiv_exists Dequiv1 (\t:tp. \x:kof t K1. Dequiv2 t x))
      <- compatabilitypr_pr (\r:pred. \x:pon r K2. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- (Pi t:tp. Pi d':kof t K1.
             compatability_pr (\r:pred. \d:pon r K2. D2 r d t d') Dpon1 Dpon2
                Dequiv (Dequiv2 t d')).
-guard :
   compatability_pr (\r:pred. \d:pon r K1. kof_guard (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_guard Dequiv2 Dequiv1)
      <- compatabilityp_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-assert :
   compatability_pr (\r:pred. \d:pon r K1. kof_assert (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_assert Dequiv2 Dequiv1)
      <- compatabilityp_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-rec :
   compatability_pr
      (\r:pred. \d:pon r K1. kof_rec (\t:tp. \x:kof t kt. D r d t x)) Dpon1
      Dpon2 Dequiv (equiv_rec (\t:tp. \x:kof t kt. Dequiv' t x))
      <- (Pi t:tp. Pi d':kof t kt.
             compatability_pr (\r:pred. \d:pon r K1. D r d t d') Dpon1 Dpon2
                Dequiv (Dequiv' t d')).
-meet :
   compatability_pr (\r:pred. \d:pon r K1. kof_meet (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_meet Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-join :
   compatability_pr (\r:pred. \d:pon r K1. kof_join (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_join Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-numadd :
   compatability_pr (\r:pred. \d:pon r K1. kof_numadd (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_numadd Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-nummul :
   compatability_pr (\r:pred. \d:pon r K1. kof_nummul (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equiv_nummul Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-nil : compatabilityr*_pr (\r:pred. \d:pon r K1. rtpok_nil) X1 X2 X3 equivr_nil.
-cons :
   compatabilityr*_pr (\r:pred. \d:pon r K1. rtpok_cons (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equivr_cons Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatabilityr*_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
- :
   compatabilityr_pr (\r:pred. \d:pon r K1. rtpok_ (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equivr_ Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatabilityr*_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-closed : compatabilityp_pr (\r:pred. \d:pon r K1. D) X1 X2 X3 equivp_reflex.
-impl :
   compatabilityp_pr (\r:pred. \d:pon r K1. propok_impl (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equivp_impl Dequiv2 Dequiv1)
      <- compatabilityp_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatabilityp_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-and :
   compatabilityp_pr (\r:pred. \d:pon r K1. propok_and (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equivp_and Dequiv2 Dequiv1)
      <- compatabilityp_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatabilityp_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-or :
   compatabilityp_pr (\r:pred. \d:pon r K1. propok_or (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equivp_or Dequiv2 Dequiv1)
      <- compatabilityp_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatabilityp_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-numeq :
   compatabilityp_pr (\r:pred. \d:pon r K1. propok_numeq (D2 r d) (D1 r d))
      Dpon1 Dpon2 Dequiv (equivp_numeq Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-numleq :
   compatabilityp_pr (\r:pred. \d:pon r K1. propok_numleq (D2 r d) (D1 r d))
      Dpon1 Dpon2 Dequiv (equivp_numleq Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-loclt :
   compatabilityp_pr (\r:pred. \d:pon r K1. propok_loclt (D2 r d) (D1 r d))
      Dpon1 Dpon2 Dequiv (equivp_loclt Dequiv2 Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatability_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-goodlc :
   compatabilityp_pr (\r:pred. \d:pon r K1. propok_goodloc (D1 r d)) Dpon1 Dpon2
      Dequiv (equivp_goodloc Dequiv1)
      <- compatability_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1.
-var : compatabilitypr_pr (\r:pred. \d:pon r K1. d) X1 X2 D D.
-closed : compatabilitypr_pr (\r:pred. \d:pon r K1. D) X1 X2 X3 equivpr_reflex.
-true :
   compatabilitypr_pr (\r:pred. \d:pon r K1. pon_true) X1 X2 X3 equivpr_reflex.
-tn :
   compatabilitypr_pr (\r:pred. \d:pon r K1. pon_tn (Dkof r d)) Dpon1 Dpon2
      Dequiv (equivpr_tn Dequiv')
      <- compatability_pr (\r:pred. \x:pon r K1. Dkof r x) Dpon1 Dpon2 Dequiv
            Dequiv'.
-arrow :
   compatabilitypr_pr (\r:pred. \d:pon r K1. pon_arrow (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equivpr_arrow Dequiv2 Dequiv1)
      <- compatabilitypr_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatabilitypr_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-prod :
   compatabilitypr_pr (\r:pred. \d:pon r K1. pon_prod (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equivpr_prod Dequiv2 Dequiv1)
      <- compatabilitypr_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatabilitypr_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-forall :
   compatabilitypr_pr
      (\r:pred. \d:pon r K1.
          pon_forall (\k:kind. \r1:pred. \x:pon r1 k. D r d k r1 x)) Dpon1 Dpon2
      Dequiv (equivpr_forall (\k:kind. \r:pred. \x:pon r k. Dequiv' k r x))
      <- (Pi k':kind. Pi r':pred. Pi d':pon r' k'.
             compatabilitypr_pr (\r:pred. \d:pon r K1. D r d k' r' d') Dpon1
                Dpon2 Dequiv (Dequiv' k' r' d')).
-um :
   compatabilitypr_pr (\r:pred. \d:pon r K1. pon_sum (D2 r d) (D1 r d)) Dpon1
      Dpon2 Dequiv (equivpr_sum Dequiv2 Dequiv1)
      <- compatabilitypr_pr (\r:pred. \x:pon r K1. D1 r x) Dpon1 Dpon2 Dequiv
            Dequiv1
      <- compatabilitypr_pr (\r:pred. \x:pon r K1. D2 r x) Dpon1 Dpon2 Dequiv
            Dequiv2.
-rec :
   compatabilitypr_pr
      (\r:pred. \d:pon r K1.
          pon_rec (\k:kind. \r1:pred. \x:pon r1 k. D r d k r1 x)) Dpon1 Dpon2
      Dequiv (equivpr_rec (\k:kind. \r:pred. \x:pon r k. Dequiv' k r x))
      <- (Pi k':kind. Pi r':pred. Pi d':pon r' k'.
             compatabilitypr_pr (\r:pred. \d:pon r K1. D r d k' r' d') Dpon1
                Dpon2 Dequiv (Dequiv' k' r' d')).
reduce : tp -> tp -> type.
reducer : rtp -> rtp -> type.
reducer* : Pi N:nat. rtp* N -> rtp* N -> type.
reducep : prop -> prop -> type.
reducepr : pred -> pred -> type.
reduce_id : reduce T' T'.
reduce_annbeta : reduce (annot T' R K) T' <- reduce T' T'.
reduce_beta :
   reduce (app (lam K (\t:tp. T1 t)) T2) (T1' T2')
      <- (Pi t:tp. kof t K -> reduce (T1 t) (T1' t))
      <- reduce T2 T2'.
reduce_eta :
   reduce T' (lam K (\t:tp. app T' t)) <- kof T' (karrow K K1) <- reduce T' T'.
reduce_pbeta1 : reduce (pi1 (pair T1 T2)) T1' <- reduce T1 T1'.
reduce_pbeta2 : reduce (pi2 (pair T1 T2)) T2' <- reduce T2 T2'.
reduce_peta :
   reduce T' (pair (pi1 T') (pi2 T')) <- kof T' (kprod K1 K2) <- reduce T' T'.
reduce_kbeta :
   reduce (kapp (klam (\k:kind. \r:pred. T' k r)) K R) (T' K R')
      <- (Pi k:kind. Pi r:pred. pon r k -> reduce (T' k r) (T' k r))
      <- reducepr R R'.
reduce_keta :
   reduce T' (klam (\k:kind. \r:pred. kapp T' k r))
      <- kof T' (kforall (\k:kind. K1 k))
      <- reduce T' T'.
reduce_sbeta1 :
   reduce (case (in1 T' K2) K1 K3 K (\t:tp. T1 t) (\t:tp. T2 t)) (T1' T')
      <- reduce T' T'
      <- (Pi t:tp. kof t K1 -> reduce (T1 t) (T1' t)).
reduce_sbeta2 :
   reduce (case (in2 T' K1) K3 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) (T2' T')
      <- reduce T' T'
      <- (Pi t:tp. kof t K2 -> reduce (T2 t) (T2' t)).
reduce_rbeta : reduce (unroll (roll (\k:kind. K1 k) T')) T' <- reduce T' T'.
reduce_reta :
   reduce T' (roll (\k:kind. K k) (unroll T'))
      <- kof T' (krec (\k:kind. K k))
      <- reduce T' T'.
reduce_annot :
   reduce (annot T' R K) (annot T' R' K) <- reduce T' T' <- reducepr R R'.
reduce_lam :
   reduce (lam K (\t:tp. T' t)) (lam K (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> reduce (T' t) (T' t)).
reduce_app : reduce (app T1 T2) (app T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_pair :
   reduce (pair T1 T2) (pair T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_pi1 : reduce (pi1 T') (pi1 T') <- reduce T' T'.
reduce_pi2 : reduce (pi2 T') (pi2 T') <- reduce T' T'.
reduce_klam :
   reduce (klam (\k:kind. \r:pred. T' k r)) (klam (\k:kind. \r:pred. T' k r))
      <- (Pi k:kind. Pi r:pred. pon r k -> reduce (T' k r) (T' k r)).
reduce_kapp :
   reduce (kapp T' K R) (kapp T' K R') <- reduce T' T' <- reducepr R R'.
reduce_in1 : reduce (in1 T' K) (in1 T' K) <- reduce T' T'.
reduce_in2 : reduce (in2 T' K) (in2 T' K) <- reduce T' T'.
reduce_case :
   reduce (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t))
      (case T' K1 K2 K (\t:tp. T1' t) (\t:tp. T2' t))
      <- reduce T' T'
      <- (Pi t:tp. kof t K1 -> reduce (T1 t) (T1' t))
      <- (Pi t:tp. kof t K2 -> reduce (T2 t) (T2' t)).
reduce_roll :
   reduce (roll (\k:kind. K k) T') (roll (\k:kind. K k) T') <- reduce T' T'.
reduce_unroll : reduce (unroll T') (unroll T') <- reduce T' T'.
reduce_seteq : reduce (seteq N T') (seteq N T') <- reduce T' T'.
reduce_prod :
   reduce (prod T1 T2) (prod T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_exp : reduce (exp T1 T2) (exp T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_code : reduce (code PC G) (code PC G') <- reducer G G'.
reduce_arrow : reduce (arrow G) (arrow G') <- reducer G G'.
reduce_cbox :
   reduce (cbox T1 T2) (cbox T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_cmbox :
   reduce (cmbox T1 T2) (cmbox T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_sptr : reduce (sptr T') (sptr T') <- reduce T' T'.
reduce_forall :
   reduce (forall K R (\t:tp. T' t)) (forall K R' (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> reduce (T' t) (T' t))
      <- reducepr R R'.
reduce_exists :
   reduce (exists K R (\t:tp. T' t)) (exists K R' (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> reduce (T' t) (T' t))
      <- reducepr R R'.
reduce_guard :
   reduce (guard P T') (guard P' T') <- reducep P P' <- reduce T' T'.
reduce_assert :
   reduce (assert P T') (assert P' T') <- reducep P P' <- reduce T' T'.
reduce_rec :
   reduce (rec (\t:tp. T' t)) (rec (\t:tp. T' t))
      <- (Pi t:tp. kof t kt -> reduce (T' t) (T' t)).
reduce_meet :
   reduce (meet T1 T2) (meet T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_join :
   reduce (join T1 T2) (join T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_numadd :
   reduce (numadd T1 T2) (numadd T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reduce_nummul :
   reduce (nummul T1 T2) (nummul T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reducer_nil : reducer* rtnil rtnil.
reducer_cons :
   reducer* (rtcons T' G) (rtcons T' G') <- reduce T' T' <- reducer* G G'.
reducer_ : reducer (rt T' G) (rt T' G') <- reduce T' T' <- reducer* G G'.
reducep_numeq :
   reducep (pnumeq T1 T2) (pnumeq T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reducep_numleq :
   reducep (pnumleq T1 T2) (pnumleq T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reducep_loclt :
   reducep (ploclt T1 T2) (ploclt T1' T2') <- reduce T1 T1' <- reduce T2 T2'.
reducep_goodloc : reducep (goodloc T') (goodloc T') <- reduce T' T'.
reducep_impl :
   reducep (pimpl P1 P2) (pimpl P1' P2') <- reducep P1 P1' <- reducep P2 P2'.
reducep_and :
   reducep (pand P1 P2) (pand P1' P2') <- reducep P1 P1' <- reducep P2 P2'.
reducep_or :
   reducep (por P1 P2) (por P1' P2') <- reducep P1 P1' <- reducep P2 P2'.
reducep_false : reducep pfalse pfalse.
reducepr_id : reducepr R R.
reducepr_tn : reducepr (rtn T') (rtn T') <- reduce T' T'.
reducepr_arrow :
   reducepr (rarrow R1 R2) (rarrow R1' R2')
      <- reducepr R1 R1'
      <- reducepr R2 R2'.
reducepr_prod :
   reducepr (rprod R1 R2) (rprod R1' R2') <- reducepr R1 R1' <- reducepr R2 R2'.
reducepr_forall :
   reducepr (rforall (\k:kind. \r:pred. R k r))
      (rforall (\k:kind. \r:pred. R' k r))
      <- (Pi k:kind. Pi r:pred. pon r k -> reducepr (R k r) (R' k r)).
reducepr_sum :
   reducepr (rsum R1 R2) (rsum R1' R2') <- reducepr R1 R1' <- reducepr R2 R2'.
reducepr_rec :
   reducepr (rrec (\k:kind. \r:pred. R k r)) (rrec (\k:kind. \r:pred. R' k r))
      <- (Pi k:kind. Pi r:pred. pon r k -> reducepr (R k r) (R' k r)).
mreduce : tp -> tp -> type.
mreduce_id : mreduce T' T'.
mreduce_step : mreduce T1 T3 <- reduce T1 T2 <- mreduce T2 T3.
mreduce_single : Pi T1:tp. Pi T2:tp. reduce T1 T2 -> mreduce T1 T2
   = \T1:tp. \T2:tp. \d:reduce T1 T2. mreduce_step mreduce_id d.
mreducer : rtp -> rtp -> type.
mreducer_id : mreducer G G.
mreducer_step : mreducer G1 G3 <- reducer G1 G2 <- mreducer G2 G3.
mreducer* : Pi N:nat. rtp* N -> rtp* N -> type.
mreducer*_id : mreducer* G G.
mreducer*_step : mreducer* G1 G3 <- reducer* G1 G2 <- mreducer* G2 G3.
mreducep : prop -> prop -> type.
mreducep_id : mreducep P P.
mreducep_step : mreducep P1 P3 <- reducep P1 P2 <- mreducep P2 P3.
mreducepr : pred -> pred -> type.
mreducepr_id : mreducepr R R.
mreducepr_step : mreducepr R1 R3 <- reducepr R1 R2 <- mreducepr R2 R3.
reduce_resp :
   Pi T1:tp. Pi T1':tp. Pi T2:tp. Pi T2':tp.
      tp_eq T1 T1' -> tp_eq T2 T2' -> reduce T1 T2 -> reduce T1' T2' -> type.
reduce_resp_ : reduce_resp tp_eq_ tp_eq_ D D.
mreduce_resp :
   Pi T1:tp. Pi T1':tp. Pi T2:tp. Pi T2':tp.
      tp_eq T1 T1' -> tp_eq T2 T2' -> mreduce T1 T2 -> mreduce T1' T2' -> type.
mreduce_resp_ : mreduce_resp tp_eq_ tp_eq_ D D.
number_eq_cdr :
   Pi N:nat. Pi B:binary N. Pi N':nat. Pi B':binary N'.
      tp_eq (number B) (number B') -> nat_eq N N' -> binary_eq B B' -> type.
number_eq_cdr_ : number_eq_cdr tp_eq_ nat_eq_ binary_eq_.
false_implies_reduce : false -> Pi T1:tp. Pi T2:tp. reduce T1 T2 -> type.
false_implies_tp_eq : false -> Pi T1:tp. Pi T2:tp. tp_eq T1 T2 -> type.
reduce_numlit :
   Pi N:nat. Pi T':tp. reduce (numlit N) T' -> tp_eq (numlit N) T' -> type.
- : reduce_numlit reduce_id tp_eq_.
reduce_number :
   Pi N1:nat. Pi B:binary N1. Pi T':tp.
      reduce (number B) T' -> tp_eq (number B) T' -> type.
- : reduce_number reduce_id tp_eq_.
reduce_numlit' :
   Pi N:nat. Pi T':tp. reduce (numlit N) T' -> tp_eq T' (numlit N) -> type.
reduce_numlit'_ :
   reduce_numlit' D Deq' <- reduce_numlit D Deq <- tp_eq_symm Deq Deq'.
reduce_number' :
   Pi N1:nat. Pi B:binary N1. Pi T':tp.
      reduce (number B) T' -> tp_eq T' (number B) -> type.
reduce_number'_ :
   reduce_number' D Deq' <- reduce_number D Deq <- tp_eq_symm Deq Deq'.
mreduce_numlit :
   Pi N:nat. Pi T':tp. mreduce (numlit N) T' -> tp_eq (numlit N) T' -> type.
- : mreduce_numlit mreduce_id tp_eq_.
- :
   mreduce_numlit (mreduce_step D Dreduce) Deq2
      <- reduce_numlit' Dreduce Deq1
      <- mreduce_resp Deq1 tp_eq_ D D'
      <- mreduce_numlit D' Deq2.
mreduce_number :
   Pi N1:nat. Pi B:binary N1. Pi T':tp.
      mreduce (number B) T' -> tp_eq (number B) T' -> type.
- : mreduce_number mreduce_id tp_eq_.
- :
   mreduce_number (mreduce_step D Dreduce) Deq2
      <- reduce_number' Dreduce Deq1
      <- mreduce_resp Deq1 tp_eq_ D D'
      <- mreduce_number D' Deq2.
mreduce_numlit' :
   Pi N:nat. Pi T':tp. mreduce (numlit N) T' -> tp_eq T' (numlit N) -> type.
- : mreduce_numlit' D Deq' <- mreduce_numlit D Deq <- tp_eq_symm Deq Deq'.
mreduce_number' :
   Pi N1:nat. Pi B:binary N1. Pi T':tp.
      mreduce (number B) T' -> tp_eq T' (number B) -> type.
- : mreduce_number' D Deq' <- mreduce_number D Deq <- tp_eq_symm Deq Deq'.
reduce_void :
   Pi N:nat. Pi T':tp. reduce (void N) T' -> tp_eq T' (void N) -> type.
- : reduce_void reduce_id tp_eq_.
mreduce_void :
   Pi N:nat. Pi T':tp. mreduce (void N) T' -> tp_eq T' (void N) -> type.
-id : mreduce_void mreduce_id tp_eq_.
-tep :
   mreduce_void (mreduce_step D Dreduce) Deq'
      <- reduce_void Dreduce Deq
      <- mreduce_resp Deq tp_eq_ D D'
      <- mreduce_void D' Deq'.
sr :
   Pi T1:tp. Pi K:kind. Pi T2:tp. kof T1 K -> reduce T1 T2 -> kof T2 K -> type.
srr : Pi G1:rtp. Pi G2:rtp. rtpok G1 -> reducer G1 G2 -> rtpok G2 -> type.
srr* :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1.
      rtpok* G1 -> reducer* G1 G2 -> rtpok* G2 -> type.
srp : Pi P1:prop. Pi P2:prop. propok P1 -> reducep P1 P2 -> propok P2 -> type.
srpr :
   Pi R1:pred. Pi K:kind. Pi R2:pred.
      pon R1 K -> reducepr R1 R2 -> pon R2 K -> type.
-id : sr D reduce_id D.
-annbet : sr (kof_annot D X1) (reduce_annbeta Dreduce) D' <- sr D Dreduce D'.
-beta :
   sr (kof_app D2 (kof_lam (\t:tp. \x:kof t K. D1' t x)))
      (reduce_beta Dreduce2 (\t:tp. \x:kof t K. Dreduce1 t x)) (D1'' T2 D2')
      <- (Pi t:tp. Pi d:kof t K. sr (D1' t d) (Dreduce1 t d) (D1'' t d))
      <- sr D2 Dreduce2 D2'.
-eta :
   sr D (reduce_eta Dreduce Dkof) D'''
      <- sr D Dreduce D'
      <- kof_fun D Dkof Deq
      <- kof_resp tp_eq_ Deq D' D''
      <- kind_eq_symm Deq Deq'
      <- kof_resp tp_eq_ Deq' (kof_lam (\t:tp. \d:kof t K1. kof_app d D'')) D'''.
-pbeta1 :
   sr (kof_pi1 (kof_pair D2 D1)) (reduce_pbeta1 Dreduce) D1'
      <- sr D1 Dreduce D1'.
-pbeta2 :
   sr (kof_pi2 (kof_pair D2 D1)) (reduce_pbeta2 Dreduce) D2'
      <- sr D2 Dreduce D2'.
-peta :
   sr D (reduce_peta Dreduce Dkof) D'''
      <- sr D Dreduce D'
      <- kof_fun D Dkof Deq
      <- kof_resp tp_eq_ Deq D' D''
      <- kind_eq_symm Deq Deq'
      <- kof_resp tp_eq_ Deq' (kof_pair (kof_pi2 D'') (kof_pi1 D'')) D'''.
-kbeta :
   sr (kof_kapp (kof_klam (\k:kind. \r:pred. \x:pon r k. D' k r x)) Dpon)
      (reduce_kbeta Dreduce2 (\k:kind. \r:pred. \x:pon r k. Dreduce k r x))
      (D'' K R' Dpon')
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             sr (D' k r d) (Dreduce k r d) (D'' k r d))
      <- srpr Dpon Dreduce2 Dpon'.
-keta :
   sr D (reduce_keta Dreduce Dkof) D'''
      <- sr D Dreduce D'
      <- kof_fun D Dkof Deq
      <- kof_resp tp_eq_ Deq D' D''
      <- kind_eq_symm Deq Deq'
      <- kof_resp tp_eq_ Deq'
            (kof_klam (\k:kind. \r:pred. \d:pon r k. kof_kapp D'' d)) D'''.
-beta1 :
   sr
      (kof_case (\t:tp. \x:kof t K3. D3 t x) (\t:tp. \x:kof t K1. D2 t x)
          (kof_in1 D1'))
      (reduce_sbeta1 (\t:tp. \x:kof t K1. Dreduce2 t x) Dreduce1) (D2' T4 D1'')
      <- sr D1' Dreduce1 D1''
      <- (Pi t:tp. Pi d:kof t K1. sr (D2 t d) (Dreduce2 t d) (D2' t d)).
-beta2 :
   sr
      (kof_case (\t:tp. \x:kof t K1. D3 t x) (\t:tp. \x:kof t K3. D2 t x)
          (kof_in2 D1'))
      (reduce_sbeta2 (\t:tp. \x:kof t K1. Dreduce3 t x) Dreduce1) (D3' T4 D1'')
      <- sr D1' Dreduce1 D1''
      <- (Pi t:tp. Pi d:kof t K1. sr (D3 t d) (Dreduce3 t d) (D3' t d)).
-rbeta :
   sr (kof_unroll (kof_roll D')) (reduce_rbeta Dreduce) D'' <- sr D' Dreduce D''.
-reta :
   sr D (reduce_reta Dreduce Dkof) D'''
      <- sr D Dreduce D'
      <- kof_fun D Dkof Deq
      <- kof_resp tp_eq_ Deq D' D''
      <- kind_eq_symm Deq Deq'
      <- kof_resp tp_eq_ Deq' (kof_roll (kof_unroll D'')) D'''.
-annot :
   sr (kof_annot D Dpon) (reduce_annot Dreduce2 Dreduce) (kof_annot D' Dpon')
      <- sr D Dreduce D'
      <- srpr Dpon Dreduce2 Dpon'.
-lam :
   sr (kof_lam (\t:tp. \x:kof t K. D t x))
      (reduce_lam (\t:tp. \x:kof t K. Dreduce t x))
      (kof_lam (\t:tp. \x:kof t K. D' t x))
      <- (Pi t:tp. Pi d:kof t K. sr (D t d) (Dreduce t d) (D' t d)).
-app :
   sr (kof_app D2 D1) (reduce_app Dreduce2 Dreduce1) (kof_app D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-pair :
   sr (kof_pair D2 D1) (reduce_pair Dreduce2 Dreduce1) (kof_pair D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-pi1 : sr (kof_pi1 D) (reduce_pi1 Dreduce) (kof_pi1 D') <- sr D Dreduce D'.
-pi2 : sr (kof_pi2 D) (reduce_pi2 Dreduce) (kof_pi2 D') <- sr D Dreduce D'.
-klam :
   sr (kof_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. Dreduce k r x))
      (kof_klam (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             sr (D k r d) (Dreduce k r d) (D' k r d)).
-kapp :
   sr (kof_kapp D Dpon) (reduce_kapp Dreduce2 Dreduce) (kof_kapp D' Dpon')
      <- sr D Dreduce D'
      <- srpr Dpon Dreduce2 Dpon'.
-in1 : sr (kof_in1 D) (reduce_in1 Dreduce) (kof_in1 D') <- sr D Dreduce D'.
-in2 : sr (kof_in2 D) (reduce_in2 Dreduce) (kof_in2 D') <- sr D Dreduce D'.
-case :
   sr (kof_case (\t:tp. \x:kof t K1. D3 t x) (\t:tp. \x:kof t K3. D2 t x) D1)
      (reduce_case (\t:tp. \x:kof t K1. Dreduce3 t x)
          (\t:tp. \x:kof t K3. Dreduce2 t x) Dreduce1)
      (kof_case (\t:tp. \x:kof t K1. D3' t x) (\t:tp. \x:kof t K3. D2' t x) D1')
      <- sr D1 Dreduce1 D1'
      <- (Pi t:tp. Pi d:kof t K3. sr (D2 t d) (Dreduce2 t d) (D2' t d))
      <- (Pi t:tp. Pi d:kof t K1. sr (D3 t d) (Dreduce3 t d) (D3' t d)).
-roll : sr (kof_roll D) (reduce_roll Dreduce) (kof_roll D') <- sr D Dreduce D'.
-unroll :
   sr (kof_unroll D) (reduce_unroll Dreduce) (kof_unroll D') <- sr D Dreduce D'.
-eteq :
   sr (kof_seteq D1) (reduce_seteq Dreduce) (kof_seteq D1') <- sr D1 Dreduce D1'.
-prod :
   sr (kof_prod D2 D1) (reduce_prod Dreduce2 Dreduce1) (kof_prod D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-exp :
   sr (kof_exp D2 D1) (reduce_exp Dreduce2 Dreduce1) (kof_exp D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-code :
   sr (kof_code Drtpok) (reduce_code Dreducer) (kof_code Drtpok')
      <- srr Drtpok Dreducer Drtpok'.
-arrow :
   sr (kof_arrow Drtpok) (reduce_arrow Dreducer) (kof_arrow Drtpok')
      <- srr Drtpok Dreducer Drtpok'.
-cbox :
   sr (kof_cbox D2 D1) (reduce_cbox Dreduce2 Dreduce1) (kof_cbox D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-cmbox :
   sr (kof_cmbox D2 D1) (reduce_cmbox Dreduce2 Dreduce1) (kof_cmbox D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-ptr :
   sr (kof_sptr D1) (reduce_sptr Dreduce) (kof_sptr D1') <- sr D1 Dreduce D1'.
-forall :
   sr (kof_forall (\t:tp. \x:kof t K1. D1 t x) Dpon)
      (reduce_forall Dreduce2 (\t:tp. \x:kof t K1. Dreduce t x))
      (kof_forall (\t:tp. \x:kof t K1. D1' t x) Dpon')
      <- (Pi t:tp. Pi d:kof t K1. sr (D1 t d) (Dreduce t d) (D1' t d))
      <- srpr Dpon Dreduce2 Dpon'.
-exists :
   sr (kof_exists (\t:tp. \x:kof t K1. D1 t x) Dpon)
      (reduce_exists Dreduce2 (\t:tp. \x:kof t K1. Dreduce t x))
      (kof_exists (\t:tp. \x:kof t K1. D1' t x) Dpon')
      <- (Pi t:tp. Pi d:kof t K1. sr (D1 t d) (Dreduce t d) (D1' t d))
      <- srpr Dpon Dreduce2 Dpon'.
-guard :
   sr (kof_guard D2 D1) (reduce_guard Dred2 Dred1) (kof_guard D2' D1')
      <- srp D1 Dred1 D1'
      <- sr D2 Dred2 D2'.
-assert :
   sr (kof_assert D2 D1) (reduce_assert Dred2 Dred1) (kof_assert D2' D1')
      <- srp D1 Dred1 D1'
      <- sr D2 Dred2 D2'.
-rec :
   sr (kof_rec (\t:tp. \x:kof t kt. D1 t x))
      (reduce_rec (\t:tp. \x:kof t kt. Dreduce t x))
      (kof_rec (\t:tp. \x:kof t kt. D1' t x))
      <- (Pi t:tp. Pi d:kof t kt. sr (D1 t d) (Dreduce t d) (D1' t d)).
-meet :
   sr (kof_meet D2 D1) (reduce_meet Dreduce2 Dreduce1) (kof_meet D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-join :
   sr (kof_join D2 D1) (reduce_join Dreduce2 Dreduce1) (kof_join D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-numadd :
   sr (kof_numadd D2 D1) (reduce_numadd Dreduce2 Dreduce1) (kof_numadd D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-nummul :
   sr (kof_nummul D2 D1) (reduce_nummul Dreduce2 Dreduce1) (kof_nummul D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-nil : srr* rtpok_nil reducer_nil rtpok_nil.
-cons :
   srr* (rtpok_cons Drtpok Dkof) (reducer_cons Dreducer Dreduce)
      (rtpok_cons Drtpok' Dkof')
      <- sr Dkof Dreduce Dkof'
      <- srr* Drtpok Dreducer Drtpok'.
- :
   srr (rtpok_ Drtpok Dkof) (reducer_ Dreducer Dreduce) (rtpok_ Drtpok' Dkof')
      <- sr Dkof Dreduce Dkof'
      <- srr* Drtpok Dreducer Drtpok'.
-numeq :
   srp (propok_numeq D2 D1) (reducep_numeq Dred2 Dred1) (propok_numeq D2' D1')
      <- sr D1 Dred1 D1'
      <- sr D2 Dred2 D2'.
-numleq :
   srp (propok_numleq D2 D1) (reducep_numleq Dred2 Dred1)
      (propok_numleq D2' D1')
      <- sr D1 Dred1 D1'
      <- sr D2 Dred2 D2'.
-loclt :
   srp (propok_loclt D2 D1) (reducep_loclt Dred2 Dred1) (propok_loclt D2' D1')
      <- sr D1 Dred1 D1'
      <- sr D2 Dred2 D2'.
-loclt :
   srp (propok_goodloc D1) (reducep_goodloc Dred1) (propok_goodloc D1')
      <- sr D1 Dred1 D1'.
-impl :
   srp (propok_impl D2 D1) (reducep_impl Dred2 Dred1) (propok_impl D2' D1')
      <- srp D1 Dred1 D1'
      <- srp D2 Dred2 D2'.
-and :
   srp (propok_and D2 D1) (reducep_and Dred2 Dred1) (propok_and D2' D1')
      <- srp D1 Dred1 D1'
      <- srp D2 Dred2 D2'.
-or :
   srp (propok_or D2 D1) (reducep_or Dred2 Dred1) (propok_or D2' D1')
      <- srp D1 Dred1 D1'
      <- srp D2 Dred2 D2'.
-false : srp propok_false reducep_false propok_false.
-id : srpr D reducepr_id D.
-tn : srpr (pon_tn D) (reducepr_tn Dred) (pon_tn D') <- sr D Dred D'.
-arrow :
   srpr (pon_arrow D2 D1) (reducepr_arrow Dred2 Dred1) (pon_arrow D2' D1')
      <- srpr D1 Dred1 D1'
      <- srpr D2 Dred2 D2'.
-prod :
   srpr (pon_prod D2 D1) (reducepr_prod Dred2 Dred1) (pon_prod D2' D1')
      <- srpr D1 Dred1 D1'
      <- srpr D2 Dred2 D2'.
-forall :
   srpr (pon_forall (\k:kind. \r:pred. \x:pon r k. D k r x))
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. Dred k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             srpr (D k r d) (Dred k r d) (D' k r d)).
-um :
   srpr (pon_sum D2 D1) (reducepr_sum Dred2 Dred1) (pon_sum D2' D1')
      <- srpr D1 Dred1 D1'
      <- srpr D2 Dred2 D2'.
-rec :
   srpr (pon_rec (\k:kind. \r:pred. \x:pon r k. D k r x))
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. Dred k r x))
      (pon_rec (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             srpr (D k r d) (Dred k r d) (D' k r d)).
msr :
   Pi T1:tp. Pi K:kind. Pi T2:tp. kof T1 K -> mreduce T1 T2 -> kof T2 K -> type.
msr_id : msr D mreduce_id D.
msr_step : msr D (mreduce_step D23 D12) D'' <- sr D D12 D' <- msr D' D23 D''.
substitute1 :
   Pi T1:tp. Pi T2:tp. Pi T':tp -> tp.
      reduce T1 T2 -> reduce (T' T1) (T' T2) -> type.
substitute1r :
   Pi T1:tp. Pi T2:tp. Pi G:tp -> rtp.
      reduce T1 T2 -> reducer (G T1) (G T2) -> type.
substitute1r* :
   Pi N:nat. Pi T1:tp. Pi T2:tp. Pi G:tp -> rtp* N.
      reduce T1 T2 -> reducer* (G T1) (G T2) -> type.
substitute1p :
   Pi T1:tp. Pi T2:tp. Pi P:tp -> prop.
      reduce T1 T2 -> reducep (P T1) (P T2) -> type.
substitute1pr :
   Pi T1:tp. Pi T2:tp. Pi R:tp -> pred.
      reduce T1 T2 -> reducepr (R T1) (R T2) -> type.
-var : substitute1 (\t:tp. t) D D.
-closed : substitute1 (\t:tp. T') D reduce_id.
-annot :
   substitute1 (\t:tp. annot (T' t) (R t) K) D (reduce_annot D2 D1)
      <- substitute1 (\t:tp. T' t) D D1
      <- substitute1pr (\t:tp. R t) D D2.
-lam :
   substitute1 (\t:tp. lam K (\t1:tp. T' t t1)) D
      (reduce_lam (\t':tp. \x:kof t' K. D' t'))
      <- (Pi t':tp. substitute1 (\t:tp. T' t t') D (D' t')).
-app :
   substitute1 (\t:tp. app (T4 t) (T3 t)) D (reduce_app D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-pair :
   substitute1 (\t:tp. pair (T4 t) (T3 t)) D (reduce_pair D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-pi1 :
   substitute1 (\t:tp. pi1 (T' t)) D (reduce_pi1 D')
      <- substitute1 (\t:tp. T' t) D D'.
-pi2 :
   substitute1 (\t:tp. pi2 (T' t)) D (reduce_pi2 D')
      <- substitute1 (\t:tp. T' t) D D'.
-klam :
   substitute1 (\t:tp. klam (\k:kind. \r:pred. T' t k r)) D
      (reduce_klam (\k:kind. \r:pred. \d:pon r k. D' k r))
      <- (Pi k:kind. Pi r:pred. substitute1 (\t:tp. T' t k r) D (D' k r)).
-kapp :
   substitute1 (\t:tp. kapp (T' t) K (R t)) D (reduce_kapp D2 D1)
      <- substitute1 (\t:tp. T' t) D D1
      <- substitute1pr (\t:tp. R t) D D2.
-in1 :
   substitute1 (\t:tp. in1 (T' t) K) D (reduce_in1 D')
      <- substitute1 (\t:tp. T' t) D D'.
-in2 :
   substitute1 (\t:tp. in2 (T' t) K) D (reduce_in2 D')
      <- substitute1 (\t:tp. T' t) D D'.
-case :
   substitute1 (\t:tp. case (T' t) K1 K2 K (\t1:tp. T4 t t1) (\t1:tp. T3 t t1))
      D
      (reduce_case (\t':tp. \d':kof t' K2. D2 t') (\t':tp. \d':kof t' K1. D1 t')
          D')
      <- substitute1 (\t:tp. T' t) D D'
      <- (Pi t':tp. substitute1 (\t:tp. T4 t t') D (D1 t'))
      <- (Pi t':tp. substitute1 (\t:tp. T3 t t') D (D2 t')).
-roll :
   substitute1 (\t:tp. roll (\k:kind. K k) (T' t)) D (reduce_roll D')
      <- substitute1 (\t:tp. T' t) D D'.
-unroll :
   substitute1 (\t:tp. unroll (T' t)) D (reduce_unroll D')
      <- substitute1 (\t:tp. T' t) D D'.
-eteq :
   substitute1 (\t:tp. seteq N (T' t)) D (reduce_seteq D')
      <- substitute1 (\t:tp. T' t) D D'.
-prod :
   substitute1 (\t:tp. prod (T4 t) (T3 t)) D (reduce_prod D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-exp :
   substitute1 (\t:tp. exp (T4 t) (T3 t)) D (reduce_exp D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-code :
   substitute1 (\t:tp. code PC (G t)) D (reduce_code D')
      <- substitute1r (\t:tp. G t) D D'.
-arrow :
   substitute1 (\t:tp. arrow (G t)) D (reduce_arrow D')
      <- substitute1r (\t:tp. G t) D D'.
-cbox :
   substitute1 (\t:tp. cbox (T4 t) (T3 t)) D (reduce_cbox D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-cmbox :
   substitute1 (\t:tp. cmbox (T4 t) (T3 t)) D (reduce_cmbox D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-ptr :
   substitute1 (\t:tp. sptr (T' t)) D (reduce_sptr D')
      <- substitute1 (\t:tp. T' t) D D'.
-forall :
   substitute1 (\t:tp. forall K (R t) (\t1:tp. T' t t1)) D
      (reduce_forall D2 (\t':tp. \x:kof t' K. D1 t'))
      <- (Pi t':tp. substitute1 (\t:tp. T' t t') D (D1 t'))
      <- substitute1pr (\t:tp. R t) D D2.
-exists :
   substitute1 (\t:tp. exists K (R t) (\t1:tp. T' t t1)) D
      (reduce_exists D2 (\t':tp. \x:kof t' K. D1 t'))
      <- (Pi t':tp. substitute1 (\t:tp. T' t t') D (D1 t'))
      <- substitute1pr (\t:tp. R t) D D2.
-guard :
   substitute1 (\t:tp. guard (T4 t) (T3 t)) D (reduce_guard D2 D1)
      <- substitute1p (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-assert :
   substitute1 (\t:tp. assert (T4 t) (T3 t)) D (reduce_assert D2 D1)
      <- substitute1p (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-rec :
   substitute1 (\t:tp. rec (\t1:tp. T' t t1)) D
      (reduce_rec (\t':tp. \x:kof t' kt. D' t'))
      <- (Pi t':tp. substitute1 (\t:tp. T' t t') D (D' t')).
-meet :
   substitute1 (\t:tp. meet (T4 t) (T3 t)) D (reduce_meet D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-join :
   substitute1 (\t:tp. join (T4 t) (T3 t)) D (reduce_join D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-numadd :
   substitute1 (\t:tp. numadd (T4 t) (T3 t)) D (reduce_numadd D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-nummul :
   substitute1 (\t:tp. nummul (T4 t) (T3 t)) D (reduce_nummul D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-nil : substitute1r* (\t:tp. rtnil) D reducer_nil.
-cons :
   substitute1r* (\t:tp. rtcons (T' t) (G t)) D (reducer_cons D2 D1)
      <- substitute1 (\t:tp. T' t) D D1
      <- substitute1r* (\t:tp. G t) D D2.
- :
   substitute1r (\t:tp. rt (T' t) (G t)) D (reducer_ D2 D1)
      <- substitute1 (\t:tp. T' t) D D1
      <- substitute1r* (\t:tp. G t) D D2.
-numeq :
   substitute1p (\t:tp. pnumeq (T4 t) (T3 t)) D (reducep_numeq D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-numleq :
   substitute1p (\t:tp. pnumleq (T4 t) (T3 t)) D (reducep_numleq D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-loclt :
   substitute1p (\t:tp. ploclt (T4 t) (T3 t)) D (reducep_loclt D2 D1)
      <- substitute1 (\t:tp. T4 t) D D1
      <- substitute1 (\t:tp. T3 t) D D2.
-goodlc :
   substitute1p (\t:tp. goodloc (T3 t)) D (reducep_goodloc D1)
      <- substitute1 (\t:tp. T3 t) D D1.
-impl :
   substitute1p (\t:tp. pimpl (P1 t) (P2 t)) D (reducep_impl D2 D1)
      <- substitute1p (\t:tp. P1 t) D D1
      <- substitute1p (\t:tp. P2 t) D D2.
-and :
   substitute1p (\t:tp. pand (P1 t) (P2 t)) D (reducep_and D2 D1)
      <- substitute1p (\t:tp. P1 t) D D1
      <- substitute1p (\t:tp. P2 t) D D2.
-or :
   substitute1p (\t:tp. por (P1 t) (P2 t)) D (reducep_or D2 D1)
      <- substitute1p (\t:tp. P1 t) D D1
      <- substitute1p (\t:tp. P2 t) D D2.
-false : substitute1p (\t:tp. pfalse) X1 reducep_false.
-closed : substitute1pr (\t:tp. R) X1 reducepr_id.
-tn :
   substitute1pr (\t:tp. rtn (T' t)) D (reducepr_tn D')
      <- substitute1 (\t:tp. T' t) D D'.
-arrow :
   substitute1pr (\t:tp. rarrow (R1 t) (R2 t)) D (reducepr_arrow D2 D1)
      <- substitute1pr (\t:tp. R1 t) D D1
      <- substitute1pr (\t:tp. R2 t) D D2.
-prod :
   substitute1pr (\t:tp. rprod (R1 t) (R2 t)) D (reducepr_prod D2 D1)
      <- substitute1pr (\t:tp. R1 t) D D1
      <- substitute1pr (\t:tp. R2 t) D D2.
-forall :
   substitute1pr (\t:tp. rforall (\k:kind. \r:pred. R t k r)) D
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             substitute1pr (\t:tp. R t k r) D (D' k r d)).
-um :
   substitute1pr (\t:tp. rsum (R1 t) (R2 t)) D (reducepr_sum D2 D1)
      <- substitute1pr (\t:tp. R1 t) D D1
      <- substitute1pr (\t:tp. R2 t) D D2.
-rec :
   substitute1pr (\t:tp. rrec (\k:kind. \r:pred. R t k r)) D
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             substitute1pr (\t:tp. R t k r) D (D' k r d)).
substitutepr1 :
   Pi T1:pred. Pi T2:pred. Pi T':pred -> tp.
      reducepr T1 T2 -> reduce (T' T1) (T' T2) -> type.
substitutepr1r :
   Pi T1:pred. Pi T2:pred. Pi G:pred -> rtp.
      reducepr T1 T2 -> reducer (G T1) (G T2) -> type.
substitutepr1r* :
   Pi N:nat. Pi T1:pred. Pi T2:pred. Pi G:pred -> rtp* N.
      reducepr T1 T2 -> reducer* (G T1) (G T2) -> type.
substitutepr1p :
   Pi T1:pred. Pi T2:pred. Pi P:pred -> prop.
      reducepr T1 T2 -> reducep (P T1) (P T2) -> type.
substitutepr1pr :
   Pi T1:pred. Pi T2:pred. Pi R:pred -> pred.
      reducepr T1 T2 -> reducepr (R T1) (R T2) -> type.
-closed : substitutepr1 (\t:pred. T') D reduce_id.
-annot :
   substitutepr1 (\t:pred. annot (T' t) (R t) K) D (reduce_annot D2 D1)
      <- substitutepr1 (\r:pred. T' r) D D1
      <- substitutepr1pr (\r:pred. R r) D D2.
-lam :
   substitutepr1 (\t:pred. lam K (\t1:tp. T' t t1)) D
      (reduce_lam (\t':tp. \x:kof t' K. D' t'))
      <- (Pi t':tp. substitutepr1 (\t:pred. T' t t') D (D' t')).
-app :
   substitutepr1 (\t:pred. app (T1 t) (T2 t)) D (reduce_app D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-pair :
   substitutepr1 (\t:pred. pair (T1 t) (T2 t)) D (reduce_pair D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-pi1 :
   substitutepr1 (\t:pred. pi1 (T' t)) D (reduce_pi1 D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-pi2 :
   substitutepr1 (\t:pred. pi2 (T' t)) D (reduce_pi2 D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-klam :
   substitutepr1 (\t:pred. klam (\k:kind. \r:pred. T' t k r)) D
      (reduce_klam (\k:kind. \r:pred. \d:pon r k. D' k r))
      <- (Pi k:kind. Pi r:pred. substitutepr1 (\t:pred. T' t k r) D (D' k r)).
-kapp :
   substitutepr1 (\t:pred. kapp (T' t) K (R t)) D (reduce_kapp D2 D1)
      <- substitutepr1 (\r:pred. T' r) D D1
      <- substitutepr1pr (\r:pred. R r) D D2.
-in1 :
   substitutepr1 (\t:pred. in1 (T' t) K) D (reduce_in1 D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-in2 :
   substitutepr1 (\t:pred. in2 (T' t) K) D (reduce_in2 D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-case :
   substitutepr1
      (\t:pred. case (T' t) K1 K2 K (\t1:tp. T1 t t1) (\t1:tp. T2 t t1)) D
      (reduce_case (\t':tp. \d':kof t' K2. D2 t') (\t':tp. \d':kof t' K1. D1 t')
          D')
      <- substitutepr1 (\r:pred. T' r) D D'
      <- (Pi t':tp. substitutepr1 (\t:pred. T1 t t') D (D1 t'))
      <- (Pi t':tp. substitutepr1 (\t:pred. T2 t t') D (D2 t')).
-roll :
   substitutepr1 (\t:pred. roll (\k:kind. K k) (T' t)) D (reduce_roll D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-unroll :
   substitutepr1 (\t:pred. unroll (T' t)) D (reduce_unroll D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-eteq :
   substitutepr1 (\t:pred. seteq N (T' t)) D (reduce_seteq D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-prod :
   substitutepr1 (\t:pred. prod (T1 t) (T2 t)) D (reduce_prod D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-exp :
   substitutepr1 (\t:pred. exp (T1 t) (T2 t)) D (reduce_exp D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-code :
   substitutepr1 (\t:pred. code PC (G t)) D (reduce_code D')
      <- substitutepr1r (\r:pred. G r) D D'.
-arrow :
   substitutepr1 (\t:pred. arrow (G t)) D (reduce_arrow D')
      <- substitutepr1r (\r:pred. G r) D D'.
-cbox :
   substitutepr1 (\t:pred. cbox (T1 t) (T2 t)) D (reduce_cbox D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-cmbox :
   substitutepr1 (\t:pred. cmbox (T1 t) (T2 t)) D (reduce_cmbox D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-ptr :
   substitutepr1 (\t:pred. sptr (T' t)) D (reduce_sptr D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-forall :
   substitutepr1 (\t:pred. forall K (R t) (\t1:tp. T' t t1)) D
      (reduce_forall D2 (\t':tp. \x:kof t' K. D1 t'))
      <- (Pi t':tp. substitutepr1 (\t:pred. T' t t') D (D1 t'))
      <- substitutepr1pr (\r:pred. R r) D D2.
-exists :
   substitutepr1 (\t:pred. exists K (R t) (\t1:tp. T' t t1)) D
      (reduce_exists D2 (\t':tp. \x:kof t' K. D1 t'))
      <- (Pi t':tp. substitutepr1 (\t:pred. T' t t') D (D1 t'))
      <- substitutepr1pr (\r:pred. R r) D D2.
-guard :
   substitutepr1 (\t:pred. guard (T1 t) (T2 t)) D (reduce_guard D2 D1)
      <- substitutepr1p (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-assert :
   substitutepr1 (\t:pred. assert (T1 t) (T2 t)) D (reduce_assert D2 D1)
      <- substitutepr1p (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-rec :
   substitutepr1 (\t:pred. rec (\t1:tp. T' t t1)) D
      (reduce_rec (\t':tp. \x:kof t' kt. D' t'))
      <- (Pi t':tp. substitutepr1 (\t:pred. T' t t') D (D' t')).
-meet :
   substitutepr1 (\t:pred. meet (T1 t) (T2 t)) D (reduce_meet D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-join :
   substitutepr1 (\t:pred. join (T1 t) (T2 t)) D (reduce_join D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-numadd :
   substitutepr1 (\t:pred. numadd (T1 t) (T2 t)) D (reduce_numadd D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-nummul :
   substitutepr1 (\t:pred. nummul (T1 t) (T2 t)) D (reduce_nummul D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-nil : substitutepr1r* (\t:pred. rtnil) D reducer_nil.
-cons :
   substitutepr1r* (\t:pred. rtcons (T' t) (G t)) D (reducer_cons D2 D1)
      <- substitutepr1 (\r:pred. T' r) D D1
      <- substitutepr1r* (\r:pred. G r) D D2.
- :
   substitutepr1r (\t:pred. rt (T' t) (G t)) D (reducer_ D2 D1)
      <- substitutepr1 (\r:pred. T' r) D D1
      <- substitutepr1r* (\r:pred. G r) D D2.
-numeq :
   substitutepr1p (\t:pred. pnumeq (T1 t) (T2 t)) D (reducep_numeq D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-numleq :
   substitutepr1p (\t:pred. pnumleq (T1 t) (T2 t)) D (reducep_numleq D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-loclt :
   substitutepr1p (\t:pred. ploclt (T1 t) (T2 t)) D (reducep_loclt D2 D1)
      <- substitutepr1 (\r:pred. T1 r) D D1
      <- substitutepr1 (\r:pred. T2 r) D D2.
-goodlc :
   substitutepr1p (\t:pred. goodloc (T1 t)) D (reducep_goodloc D1)
      <- substitutepr1 (\r:pred. T1 r) D D1.
-impl :
   substitutepr1p (\t:pred. pimpl (P1 t) (P2 t)) D (reducep_impl D2 D1)
      <- substitutepr1p (\r:pred. P1 r) D D1
      <- substitutepr1p (\r:pred. P2 r) D D2.
-and :
   substitutepr1p (\t:pred. pand (P1 t) (P2 t)) D (reducep_and D2 D1)
      <- substitutepr1p (\r:pred. P1 r) D D1
      <- substitutepr1p (\r:pred. P2 r) D D2.
-or :
   substitutepr1p (\t:pred. por (P1 t) (P2 t)) D (reducep_or D2 D1)
      <- substitutepr1p (\r:pred. P1 r) D D1
      <- substitutepr1p (\r:pred. P2 r) D D2.
-false : substitutepr1p (\t:pred. pfalse) X1 reducep_false.
-var : substitutepr1pr (\t:pred. t) D D.
-closed : substitutepr1pr (\t:pred. R) X1 reducepr_id.
-tn :
   substitutepr1pr (\t:pred. rtn (T' t)) D (reducepr_tn D')
      <- substitutepr1 (\r:pred. T' r) D D'.
-arrow :
   substitutepr1pr (\t:pred. rarrow (R4 t) (R3 t)) D (reducepr_arrow D2 D1)
      <- substitutepr1pr (\r:pred. R4 r) D D1
      <- substitutepr1pr (\r:pred. R3 r) D D2.
-prod :
   substitutepr1pr (\t:pred. rprod (R4 t) (R3 t)) D (reducepr_prod D2 D1)
      <- substitutepr1pr (\r:pred. R4 r) D D1
      <- substitutepr1pr (\r:pred. R3 r) D D2.
-forall :
   substitutepr1pr (\t:pred. rforall (\k:kind. \r:pred. R t k r)) D
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             substitutepr1pr (\t:pred. R t k r) D (D' k r d)).
-um :
   substitutepr1pr (\t:pred. rsum (R4 t) (R3 t)) D (reducepr_sum D2 D1)
      <- substitutepr1pr (\r:pred. R4 r) D D1
      <- substitutepr1pr (\r:pred. R3 r) D D2.
-rec :
   substitutepr1pr (\t:pred. rrec (\k:kind. \r:pred. R t k r)) D
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             substitutepr1pr (\t:pred. R t k r) D (D' k r d)).
substitute2 :
   Pi K:kind. Pi T1:tp -> tp. Pi T1':tp -> tp. Pi T2:tp. Pi T2':tp.
      (Pi t:tp. kof t K -> reduce (T1 t) (T1' t)) -> kof T2 K -> reduce T2 T2'
         -> reduce (T1 T2) (T1' T2') -> type.
substitute2r :
   Pi K:kind. Pi G:tp -> rtp. Pi G':tp -> rtp. Pi T':tp. Pi T':tp.
      (Pi t:tp. kof t K -> reducer (G t) (G' t)) -> kof T' K -> reduce T' T'
         -> reducer (G T') (G' T') -> type.
substitute2r* :
   Pi K:kind. Pi N:nat. Pi G:tp -> rtp* N. Pi G':tp -> rtp* N. Pi T':tp.
      Pi T':tp.
      (Pi t:tp. kof t K -> reducer* (G t) (G' t)) -> kof T' K -> reduce T' T'
         -> reducer* (G T') (G' T') -> type.
substitute2p :
   Pi K:kind. Pi P:tp -> prop. Pi P':tp -> prop. Pi T':tp. Pi T':tp.
      (Pi t:tp. kof t K -> reducep (P t) (P' t)) -> kof T' K -> reduce T' T'
         -> reducep (P T') (P' T') -> type.
substitute2pr :
   Pi K:kind. Pi R:tp -> pred. Pi R':tp -> pred. Pi T':tp. Pi T':tp.
      (Pi t:tp. kof t K -> reducepr (R t) (R' t)) -> kof T' K -> reduce T' T'
         -> reducepr (R T') (R' T') -> type.
-id :
   substitute2 (\t:tp. \d:kof t K1. reduce_id) X1 D D'
      <- substitute1 (\t:tp. T' t) D D'.
-annbet :
   substitute2 (\t:tp. \d:kof t K1. reduce_annbeta (D1 t d)) Dkof D
      (reduce_annbeta D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-beta :
   substitute2
      (\t:tp. \d:kof t K1.
          reduce_beta (D2 t d) (\t1:tp. \x:kof t1 K. D1 t d t1 x)) Dkof D
      (reduce_beta D2' (\t:tp. \x:kof t K. D1' t x))
      <- (Pi t':tp. Pi d':kof t' K.
             substitute2 (\t:tp. \d:kof t K1. D1 t d t' d') Dkof D (D1' t' d'))
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-eta :
   substitute2 (\t:tp. \d:kof t K1. reduce_eta (D1 t d) (Dkof' t d)) Dkof D
      (reduce_eta D1' (Dkof' T3 Dkof))
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-pbeta1 :
   substitute2 (\t:tp. \d:kof t K1. reduce_pbeta1 (D1 t d)) Dkof D
      (reduce_pbeta1 D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-pbeta2 :
   substitute2 (\t:tp. \d:kof t K1. reduce_pbeta2 (D1 t d)) Dkof D
      (reduce_pbeta2 D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-peta :
   substitute2 (\t:tp. \d:kof t K1. reduce_peta (D1 t d) (Dkof' t d)) Dkof D
      (reduce_peta D1' (Dkof' T3 Dkof))
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-kbeta :
   substitute2
      (\t:tp. \d:kof t K1.
          reduce_kbeta (D2 t d) (\k:kind. \r:pred. \x:pon r k. D1 t d k r x))
      Dkof D (reduce_kbeta D2' (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d':pon r k.
             substitute2 (\t:tp. \d:kof t K1. D1 t d k r d') Dkof D (D1' k r d'))
      <- substitute2pr (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-keta :
   substitute2 (\t:tp. \d:kof t K1. reduce_keta (D1 t d) (Dkof' t d)) Dkof D
      (reduce_keta D1' (Dkof' T3 Dkof))
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-beta1 :
   substitute2
      (\t:tp. \d:kof t K2.
          reduce_sbeta1 (\t1:tp. \x:kof t1 K1. D2 t d t1 x) (D1 t d)) Dkof D
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D2' t x) D1')
      <- substitute2 (\t:tp. \x:kof t K2. D1 t x) Dkof D D1'
      <- (Pi t':tp. Pi d':kof t' K1.
             substitute2 (\t:tp. \d:kof t K2. D2 t d t' d') Dkof D (D2' t' d')).
-beta2 :
   substitute2
      (\t:tp. \d:kof t K1.
          reduce_sbeta2 (\t1:tp. \x:kof t1 K2. D2 t d t1 x) (D1 t d)) Dkof D
      (reduce_sbeta2 (\t:tp. \x:kof t K2. D2' t x) D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- (Pi t':tp. Pi d':kof t' K2.
             substitute2 (\t:tp. \d:kof t K1. D2 t d t' d') Dkof D (D2' t' d')).
-rbeta :
   substitute2 (\t:tp. \d:kof t K1. reduce_rbeta (D1 t d)) Dkof D
      (reduce_rbeta D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-reta :
   substitute2 (\t:tp. \d:kof t K1. reduce_reta (D1 t d) (Dkof' t d)) Dkof D
      (reduce_reta D1' (Dkof' T3 Dkof))
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-annot :
   substitute2 (\t:tp. \d:kof t K1. reduce_annot (D2 t d) (D1 t d)) Dkof D
      (reduce_annot D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2pr (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-lam :
   substitute2
      (\t:tp. \d:kof t K1. reduce_lam (\t1:tp. \x:kof t1 K. D1 t d t1 x)) Dkof D
      (reduce_lam (\t:tp. \x:kof t K. D1' t x))
      <- (Pi t':tp. Pi d':kof t' K.
             substitute2 (\t:tp. \d:kof t K1. D1 t d t' d') Dkof D (D1' t' d')).
-app :
   substitute2 (\t:tp. \d:kof t K1. reduce_app (D2 t d) (D1 t d)) Dkof D
      (reduce_app D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-pair :
   substitute2 (\t:tp. \d:kof t K1. reduce_pair (D2 t d) (D1 t d)) Dkof D
      (reduce_pair D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-pi1 :
   substitute2 (\t:tp. \d:kof t K1. reduce_pi1 (D1 t d)) Dkof D (reduce_pi1 D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-pi2 :
   substitute2 (\t:tp. \d:kof t K1. reduce_pi2 (D1 t d)) Dkof D (reduce_pi2 D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-klam :
   substitute2
      (\t:tp. \d:kof t K1.
          reduce_klam (\k:kind. \r:pred. \x:pon r k. D1 t d k r x)) Dkof D
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d':pon r k.
             substitute2 (\t:tp. \d:kof t K1. D1 t d k r d') Dkof D (D1' k r d')).
-kapp :
   substitute2 (\t:tp. \d:kof t K1. reduce_kapp (D2 t d) (D1 t d)) Dkof D
      (reduce_kapp D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2pr (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-in1 :
   substitute2 (\t:tp. \d:kof t K1. reduce_in1 (D1 t d)) Dkof D (reduce_in1 D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-in2 :
   substitute2 (\t:tp. \d:kof t K1. reduce_in2 (D1 t d)) Dkof D (reduce_in2 D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-case :
   substitute2
      (\t:tp. \d:kof t K1.
          reduce_case (\t1:tp. \x:kof t1 K2. D3 t d t1 x)
             (\t2:tp. \x:kof t2 K3. D2 t d t2 x) (D1 t d)) Dkof D
      (reduce_case (\t:tp. \x:kof t K2. D3' t x) (\t:tp. \x:kof t K3. D2' t x)
          D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- (Pi t':tp. Pi d':kof t' K3.
             substitute2 (\t:tp. \d:kof t K1. D2 t d t' d') Dkof D (D2' t' d'))
      <- (Pi t':tp. Pi d':kof t' K2.
             substitute2 (\t:tp. \d:kof t K1. D3 t d t' d') Dkof D (D3' t' d')).
-roll :
   substitute2 (\t:tp. \d:kof t K1. reduce_roll (D1 t d)) Dkof D
      (reduce_roll D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-unroll :
   substitute2 (\t:tp. \d:kof t K1. reduce_unroll (D1 t d)) Dkof D
      (reduce_unroll D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-eteq :
   substitute2 (\t:tp. \d:kof t K1. reduce_seteq (D1 t d)) Dkof D
      (reduce_seteq D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-prod :
   substitute2 (\t:tp. \d:kof t K1. reduce_prod (D2 t d) (D1 t d)) Dkof D
      (reduce_prod D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-exp :
   substitute2 (\t:tp. \d:kof t K1. reduce_exp (D2 t d) (D1 t d)) Dkof D
      (reduce_exp D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-code :
   substitute2 (\t:tp. \d:kof t K1. reduce_code (D1 t d)) Dkof D
      (reduce_code D1')
      <- substitute2r (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-arrow :
   substitute2 (\t:tp. \d:kof t K1. reduce_arrow (D1 t d)) Dkof D
      (reduce_arrow D1')
      <- substitute2r (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-cbox :
   substitute2 (\t:tp. \d:kof t K1. reduce_cbox (D2 t d) (D1 t d)) Dkof D
      (reduce_cbox D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-cmbox :
   substitute2 (\t:tp. \d:kof t K1. reduce_cmbox (D2 t d) (D1 t d)) Dkof D
      (reduce_cmbox D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-ptr :
   substitute2 (\t:tp. \d:kof t K1. reduce_sptr (D1 t d)) Dkof D
      (reduce_sptr D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-forall :
   substitute2
      (\t:tp. \d:kof t K1.
          reduce_forall (D2 t d) (\t1:tp. \x:kof t1 K. D1 t d t1 x)) Dkof D
      (reduce_forall D2' (\t:tp. \x:kof t K. D1' t x))
      <- (Pi t':tp. Pi d':kof t' K.
             substitute2 (\t:tp. \d:kof t K1. D1 t d t' d') Dkof D (D1' t' d'))
      <- substitute2pr (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-exists :
   substitute2
      (\t:tp. \d:kof t K1.
          reduce_exists (D2 t d) (\t1:tp. \x:kof t1 K. D1 t d t1 x)) Dkof D
      (reduce_exists D2' (\t:tp. \x:kof t K. D1' t x))
      <- (Pi t':tp. Pi d':kof t' K.
             substitute2 (\t:tp. \d:kof t K1. D1 t d t' d') Dkof D (D1' t' d'))
      <- substitute2pr (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-guard :
   substitute2 (\t:tp. \d:kof t K1. reduce_guard (D2 t d) (D1 t d)) Dkof D
      (reduce_guard D2' D1')
      <- substitute2p (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-assert :
   substitute2 (\t:tp. \d:kof t K1. reduce_assert (D2 t d) (D1 t d)) Dkof D
      (reduce_assert D2' D1')
      <- substitute2p (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-rec :
   substitute2
      (\t:tp. \d:kof t K1. reduce_rec (\t1:tp. \x:kof t1 kt. D1 t d t1 x)) Dkof
      D (reduce_rec (\t:tp. \x:kof t kt. D1' t x))
      <- (Pi t':tp. Pi d':kof t' kt.
             substitute2 (\t:tp. \d:kof t K1. D1 t d t' d') Dkof D (D1' t' d')).
-meet :
   substitute2 (\t:tp. \d:kof t K1. reduce_meet (D2 t d) (D1 t d)) Dkof D
      (reduce_meet D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-join :
   substitute2 (\t:tp. \d:kof t K1. reduce_join (D2 t d) (D1 t d)) Dkof D
      (reduce_join D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-numadd :
   substitute2 (\t:tp. \d:kof t K1. reduce_numadd (D2 t d) (D1 t d)) Dkof D
      (reduce_numadd D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-nummul :
   substitute2 (\t:tp. \d:kof t K1. reduce_nummul (D2 t d) (D1 t d)) Dkof D
      (reduce_nummul D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-nil : substitute2r* (\t:tp. \d:kof t K1. reducer_nil) X1 X2 reducer_nil.
-cons :
   substitute2r* (\t:tp. \d:kof t K1. reducer_cons (D2 t d) (D1 t d)) Dkof D
      (reducer_cons D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2r* (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
- :
   substitute2r (\t:tp. \d:kof t K1. reducer_ (D2 t d) (D1 t d)) Dkof D
      (reducer_ D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2r* (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-numeq :
   substitute2p (\t:tp. \d:kof t K1. reducep_numeq (D2 t d) (D1 t d)) Dkof D
      (reducep_numeq D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-numleq :
   substitute2p (\t:tp. \d:kof t K1. reducep_numleq (D2 t d) (D1 t d)) Dkof D
      (reducep_numleq D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-loclt :
   substitute2p (\t:tp. \d:kof t K1. reducep_loclt (D2 t d) (D1 t d)) Dkof D
      (reducep_loclt D2' D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2 (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-goodlc :
   substitute2p (\t:tp. \d:kof t K1. reducep_goodloc (D1 t d)) Dkof D
      (reducep_goodloc D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-impl :
   substitute2p (\t:tp. \d:kof t K1. reducep_impl (D2 t d) (D1 t d)) Dkof D
      (reducep_impl D2' D1')
      <- substitute2p (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2p (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-and :
   substitute2p (\t:tp. \d:kof t K1. reducep_and (D2 t d) (D1 t d)) Dkof D
      (reducep_and D2' D1')
      <- substitute2p (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2p (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-or :
   substitute2p (\t:tp. \d:kof t K1. reducep_or (D2 t d) (D1 t d)) Dkof D
      (reducep_or D2' D1')
      <- substitute2p (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2p (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-false : substitute2p (\t:tp. \d:kof t K1. reducep_false) X1 X2 reducep_false.
-id :
   substitute2pr (\t:tp. \d:kof t K1. reducepr_id) X1 D D'
      <- substitute1pr (\t:tp. R t) D D'.
-tn :
   substitute2pr (\t:tp. \d:kof t K1. reducepr_tn (D1 t d)) Dkof D
      (reducepr_tn D1')
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'.
-arrow :
   substitute2pr (\t:tp. \d:kof t K1. reducepr_arrow (D2 t d) (D1 t d)) Dkof D
      (reducepr_arrow D2' D1')
      <- substitute2pr (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2pr (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-prod :
   substitute2pr (\t:tp. \d:kof t K1. reducepr_prod (D2 t d) (D1 t d)) Dkof D
      (reducepr_prod D2' D1')
      <- substitute2pr (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2pr (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-forall :
   substitute2pr
      (\t:tp. \d:kof t K1.
          reducepr_forall (\k:kind. \r:pred. \x:pon r k. D1 t d k r x)) Dkof D
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d':pon r k.
             substitute2pr (\t:tp. \d:kof t K1. D1 t d k r d') Dkof D
                (D1' k r d')).
-um :
   substitute2pr (\t:tp. \d:kof t K1. reducepr_sum (D2 t d) (D1 t d)) Dkof D
      (reducepr_sum D2' D1')
      <- substitute2pr (\t:tp. \x:kof t K1. D1 t x) Dkof D D1'
      <- substitute2pr (\t:tp. \x:kof t K1. D2 t x) Dkof D D2'.
-rec :
   substitute2pr
      (\t:tp. \d:kof t K1.
          reducepr_rec (\k:kind. \r:pred. \x:pon r k. D1 t d k r x)) Dkof D
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d':pon r k.
             substitute2pr (\t:tp. \d:kof t K1. D1 t d k r d') Dkof D
                (D1' k r d')).
substitutepr2 :
   Pi K:kind. Pi T1:pred -> tp. Pi T1':pred -> tp. Pi T2:pred. Pi T2':pred.
      (Pi t:pred. pon t K -> reduce (T1 t) (T1' t)) -> pon T2 K
         -> reducepr T2 T2' -> reduce (T1 T2) (T1' T2') -> type.
substitutepr2r :
   Pi K:kind. Pi G:pred -> rtp. Pi G':pred -> rtp. Pi T':pred. Pi T':pred.
      (Pi t:pred. pon t K -> reducer (G t) (G' t)) -> pon T' K -> reducepr T' T'
         -> reducer (G T') (G' T') -> type.
substitutepr2r* :
   Pi K:kind. Pi N:nat. Pi G:pred -> rtp* N. Pi G':pred -> rtp* N. Pi T':pred.
      Pi T':pred.
      (Pi t:pred. pon t K -> reducer* (G t) (G' t)) -> pon T' K
         -> reducepr T' T' -> reducer* (G T') (G' T') -> type.
substitutepr2p :
   Pi K:kind. Pi P:pred -> prop. Pi P':pred -> prop. Pi T':pred. Pi T':pred.
      (Pi t:pred. pon t K -> reducep (P t) (P' t)) -> pon T' K -> reducepr T' T'
         -> reducep (P T') (P' T') -> type.
substitutepr2pr :
   Pi K:kind. Pi R:pred -> pred. Pi R':pred -> pred. Pi T':pred. Pi T':pred.
      (Pi t:pred. pon t K -> reducepr (R t) (R' t)) -> pon T' K
         -> reducepr T' T' -> reducepr (R T') (R' T') -> type.
-id :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_id) X1 D D'
      <- substitutepr1 (\r:pred. T' r) D D'.
-annbet :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_annbeta (D1 t d)) Dkof D
      (reduce_annbeta D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-beta :
   substitutepr2
      (\t:pred. \d:pon t K1.
          reduce_beta (D2 t d) (\t1:tp. \x:kof t1 K. D1 t d t1 x)) Dkof D
      (reduce_beta D2' (\t:tp. \x:kof t K. D1' t x))
      <- (Pi t':tp. Pi d':kof t' K.
             substitutepr2 (\t:pred. \d:pon t K1. D1 t d t' d') Dkof D
                (D1' t' d'))
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-eta :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_eta (D1 t d) (Dkof' t d)) Dkof D
      (reduce_eta D1' (Dkof' R1 Dkof))
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-pbeta1 :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_pbeta1 (D1 t d)) Dkof D
      (reduce_pbeta1 D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-pbeta2 :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_pbeta2 (D1 t d)) Dkof D
      (reduce_pbeta2 D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-peta :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_peta (D1 t d) (Dkof' t d)) Dkof D
      (reduce_peta D1' (Dkof' R1 Dkof))
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-kbeta :
   substitutepr2
      (\t:pred. \d:pon t K1.
          reduce_kbeta (D2 t d) (\k:kind. \r:pred. \x:pon r k. D1 t d k r x))
      Dkof D (reduce_kbeta D2' (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d':pon r k.
             substitutepr2 (\t:pred. \d:pon t K1. D1 t d k r d') Dkof D
                (D1' k r d'))
      <- substitutepr2pr (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-keta :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_keta (D1 t d) (Dkof' t d)) Dkof D
      (reduce_keta D1' (Dkof' R1 Dkof))
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-beta1 :
   substitutepr2
      (\t:pred. \d:pon t K2.
          reduce_sbeta1 (\t1:tp. \x:kof t1 K1. D2 t d t1 x) (D1 t d)) Dkof D
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D2' t x) D1')
      <- substitutepr2 (\t:pred. \x:pon t K2. D1 t x) Dkof D D1'
      <- (Pi t':tp. Pi d':kof t' K1.
             substitutepr2 (\t:pred. \d:pon t K2. D2 t d t' d') Dkof D
                (D2' t' d')).
-beta2 :
   substitutepr2
      (\t:pred. \d:pon t K1.
          reduce_sbeta2 (\t1:tp. \x:kof t1 K2. D2 t d t1 x) (D1 t d)) Dkof D
      (reduce_sbeta2 (\t:tp. \x:kof t K2. D2' t x) D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- (Pi t':tp. Pi d':kof t' K2.
             substitutepr2 (\t:pred. \d:pon t K1. D2 t d t' d') Dkof D
                (D2' t' d')).
-rbeta :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_rbeta (D1 t d)) Dkof D
      (reduce_rbeta D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-reta :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_reta (D1 t d) (Dkof' t d)) Dkof D
      (reduce_reta D1' (Dkof' R1 Dkof))
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-annot :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_annot (D2 t d) (D1 t d)) Dkof D
      (reduce_annot D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2pr (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-lam :
   substitutepr2
      (\t:pred. \d:pon t K1. reduce_lam (\t1:tp. \x:kof t1 K. D1 t d t1 x)) Dkof
      D (reduce_lam (\t:tp. \x:kof t K. D1' t x))
      <- (Pi t':tp. Pi d':kof t' K.
             substitutepr2 (\t:pred. \d:pon t K1. D1 t d t' d') Dkof D
                (D1' t' d')).
-app :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_app (D2 t d) (D1 t d)) Dkof D
      (reduce_app D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-pair :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_pair (D2 t d) (D1 t d)) Dkof D
      (reduce_pair D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-pi1 :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_pi1 (D1 t d)) Dkof D
      (reduce_pi1 D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-pi2 :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_pi2 (D1 t d)) Dkof D
      (reduce_pi2 D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-klam :
   substitutepr2
      (\t:pred. \d:pon t K1.
          reduce_klam (\k:kind. \r:pred. \x:pon r k. D1 t d k r x)) Dkof D
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d':pon r k.
             substitutepr2 (\t:pred. \d:pon t K1. D1 t d k r d') Dkof D
                (D1' k r d')).
-kapp :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_kapp (D2 t d) (D1 t d)) Dkof D
      (reduce_kapp D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2pr (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-in1 :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_in1 (D1 t d)) Dkof D
      (reduce_in1 D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-in2 :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_in2 (D1 t d)) Dkof D
      (reduce_in2 D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-case :
   substitutepr2
      (\t:pred. \d:pon t K1.
          reduce_case (\t1:tp. \x:kof t1 K2. D3 t d t1 x)
             (\t2:tp. \x:kof t2 K3. D2 t d t2 x) (D1 t d)) Dkof D
      (reduce_case (\t:tp. \x:kof t K2. D3' t x) (\t:tp. \x:kof t K3. D2' t x)
          D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- (Pi t':tp. Pi d':kof t' K3.
             substitutepr2 (\t:pred. \d:pon t K1. D2 t d t' d') Dkof D
                (D2' t' d'))
      <- (Pi t':tp. Pi d':kof t' K2.
             substitutepr2 (\t:pred. \d:pon t K1. D3 t d t' d') Dkof D
                (D3' t' d')).
-roll :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_roll (D1 t d)) Dkof D
      (reduce_roll D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-unroll :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_unroll (D1 t d)) Dkof D
      (reduce_unroll D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-eteq :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_seteq (D1 t d)) Dkof D
      (reduce_seteq D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-prod :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_prod (D2 t d) (D1 t d)) Dkof D
      (reduce_prod D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-exp :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_exp (D2 t d) (D1 t d)) Dkof D
      (reduce_exp D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-code :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_code (D1 t d)) Dkof D
      (reduce_code D1')
      <- substitutepr2r (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-arrow :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_arrow (D1 t d)) Dkof D
      (reduce_arrow D1')
      <- substitutepr2r (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-cbox :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_cbox (D2 t d) (D1 t d)) Dkof D
      (reduce_cbox D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-cmbox :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_cmbox (D2 t d) (D1 t d)) Dkof D
      (reduce_cmbox D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-ptr :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_sptr (D1 t d)) Dkof D
      (reduce_sptr D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-forall :
   substitutepr2
      (\t:pred. \d:pon t K1.
          reduce_forall (D2 t d) (\t1:tp. \x:kof t1 K. D1 t d t1 x)) Dkof D
      (reduce_forall D2' (\t:tp. \x:kof t K. D1' t x))
      <- (Pi t':tp. Pi d':kof t' K.
             substitutepr2 (\t:pred. \d:pon t K1. D1 t d t' d') Dkof D
                (D1' t' d'))
      <- substitutepr2pr (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-exists :
   substitutepr2
      (\t:pred. \d:pon t K1.
          reduce_exists (D2 t d) (\t1:tp. \x:kof t1 K. D1 t d t1 x)) Dkof D
      (reduce_exists D2' (\t:tp. \x:kof t K. D1' t x))
      <- (Pi t':tp. Pi d':kof t' K.
             substitutepr2 (\t:pred. \d:pon t K1. D1 t d t' d') Dkof D
                (D1' t' d'))
      <- substitutepr2pr (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-guard :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_guard (D2 t d) (D1 t d)) Dkof D
      (reduce_guard D2' D1')
      <- substitutepr2p (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-assert :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_assert (D2 t d) (D1 t d)) Dkof D
      (reduce_assert D2' D1')
      <- substitutepr2p (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-rec :
   substitutepr2
      (\t:pred. \d:pon t K1. reduce_rec (\t1:tp. \x:kof t1 kt. D1 t d t1 x))
      Dkof D (reduce_rec (\t:tp. \x:kof t kt. D1' t x))
      <- (Pi t':tp. Pi d':kof t' kt.
             substitutepr2 (\t:pred. \d:pon t K1. D1 t d t' d') Dkof D
                (D1' t' d')).
-meet :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_meet (D2 t d) (D1 t d)) Dkof D
      (reduce_meet D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-join :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_join (D2 t d) (D1 t d)) Dkof D
      (reduce_join D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-numadd :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_numadd (D2 t d) (D1 t d)) Dkof D
      (reduce_numadd D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-nummul :
   substitutepr2 (\t:pred. \d:pon t K1. reduce_nummul (D2 t d) (D1 t d)) Dkof D
      (reduce_nummul D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-nil : substitutepr2r* (\t:pred. \d:pon t K1. reducer_nil) X1 X2 reducer_nil.
-cons :
   substitutepr2r* (\t:pred. \d:pon t K1. reducer_cons (D2 t d) (D1 t d)) Dkof D
      (reducer_cons D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2r* (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
- :
   substitutepr2r (\t:pred. \d:pon t K1. reducer_ (D2 t d) (D1 t d)) Dkof D
      (reducer_ D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2r* (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-numeq :
   substitutepr2p (\t:pred. \d:pon t K1. reducep_numeq (D2 t d) (D1 t d)) Dkof D
      (reducep_numeq D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-numleq :
   substitutepr2p (\t:pred. \d:pon t K1. reducep_numleq (D2 t d) (D1 t d)) Dkof
      D (reducep_numleq D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-loclt :
   substitutepr2p (\t:pred. \d:pon t K1. reducep_loclt (D2 t d) (D1 t d)) Dkof D
      (reducep_loclt D2' D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2 (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-goodlc :
   substitutepr2p (\t:pred. \d:pon t K1. reducep_goodloc (D1 t d)) Dkof D
      (reducep_goodloc D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-impl :
   substitutepr2p (\t:pred. \d:pon t K1. reducep_impl (D2 t d) (D1 t d)) Dkof D
      (reducep_impl D2' D1')
      <- substitutepr2p (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2p (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-and :
   substitutepr2p (\t:pred. \d:pon t K1. reducep_and (D2 t d) (D1 t d)) Dkof D
      (reducep_and D2' D1')
      <- substitutepr2p (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2p (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-or :
   substitutepr2p (\t:pred. \d:pon t K1. reducep_or (D2 t d) (D1 t d)) Dkof D
      (reducep_or D2' D1')
      <- substitutepr2p (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2p (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-false :
   substitutepr2p (\t:pred. \d:pon t K1. reducep_false) X1 X2 reducep_false.
-id :
   substitutepr2pr (\t:pred. \d:pon t K1. reducepr_id) X1 D D'
      <- substitutepr1pr (\r:pred. R r) D D'.
-tn :
   substitutepr2pr (\t:pred. \d:pon t K1. reducepr_tn (D1 t d)) Dkof D
      (reducepr_tn D1')
      <- substitutepr2 (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'.
-arrow :
   substitutepr2pr (\t:pred. \d:pon t K1. reducepr_arrow (D2 t d) (D1 t d)) Dkof
      D (reducepr_arrow D2' D1')
      <- substitutepr2pr (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2pr (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-prod :
   substitutepr2pr (\t:pred. \d:pon t K1. reducepr_prod (D2 t d) (D1 t d)) Dkof
      D (reducepr_prod D2' D1')
      <- substitutepr2pr (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2pr (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-forall :
   substitutepr2pr
      (\t:pred. \d:pon t K1.
          reducepr_forall (\k:kind. \r:pred. \x:pon r k. D1 t d k r x)) Dkof D
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d':pon r k.
             substitutepr2pr (\t:pred. \d:pon t K1. D1 t d k r d') Dkof D
                (D1' k r d')).
-um :
   substitutepr2pr (\t:pred. \d:pon t K1. reducepr_sum (D2 t d) (D1 t d)) Dkof D
      (reducepr_sum D2' D1')
      <- substitutepr2pr (\t:pred. \x:pon t K1. D1 t x) Dkof D D1'
      <- substitutepr2pr (\t:pred. \x:pon t K1. D2 t x) Dkof D D2'.
-rec :
   substitutepr2pr
      (\t:pred. \d:pon t K1.
          reducepr_rec (\k:kind. \r:pred. \x:pon r k. D1 t d k r x)) Dkof D
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d':pon r k.
             substitutepr2pr (\t:pred. \d:pon t K1. D1 t d k r d') Dkof D
                (D1' k r d')).
reduce_metric : Pi T1:tp. Pi T2:tp. reduce T1 T2 -> nat -> type.
reduce_metricr : Pi G1:rtp. Pi G2:rtp. reducer G1 G2 -> nat -> type.
reduce_metricr* :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1. reducer* G1 G2 -> nat -> type.
reduce_metricp : Pi P1:prop. Pi P2:prop. reducep P1 P2 -> nat -> type.
reduce_metricpr : Pi R1:pred. Pi R2:pred. reducepr R1 R2 -> nat -> type.
reduce_metric_id : reduce_metric reduce_id z.
reduce_metric_annbeta :
   reduce_metric (reduce_annbeta D) (s N) <- reduce_metric D N.
reduce_metric_beta :
   reduce_metric (reduce_beta D2 (\t:tp. \x:kof t K1. D1 t x)) (s N3)
      <- (Pi t:tp. Pi d:kof t K1. reduce_metric (D1 t d) N1)
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_eta : reduce_metric (reduce_eta D X1) (s N) <- reduce_metric D N.
reduce_metric_pbeta1 :
   reduce_metric (reduce_pbeta1 D) (s N) <- reduce_metric D N.
reduce_metric_pbeta2 :
   reduce_metric (reduce_pbeta2 D) (s N) <- reduce_metric D N.
reduce_metric_peta :
   reduce_metric (reduce_peta D X1) (s N) <- reduce_metric D N.
reduce_metric_kbeta :
   reduce_metric (reduce_kbeta D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x))
      (s N3)
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k. reduce_metric (D1 k r d) N1)
      <- reduce_metricpr D2 N2
      <- sum N1 N2 N3.
reduce_metric_keta :
   reduce_metric (reduce_keta D X1) (s N) <- reduce_metric D N.
reduce_metric_sbeta1 :
   reduce_metric (reduce_sbeta1 (\t:tp. \x:kof t K1. D2 t x) D1) (s N3)
      <- reduce_metric D1 N1
      <- (Pi t:tp. Pi d:kof t K1. reduce_metric (D2 t d) N2)
      <- sum N1 N2 N3.
reduce_metric_sbeta2 :
   reduce_metric (reduce_sbeta2 (\t:tp. \x:kof t K1. D2 t x) D1) (s N3)
      <- reduce_metric D1 N1
      <- (Pi t:tp. Pi d:kof t K1. reduce_metric (D2 t d) N2)
      <- sum N1 N2 N3.
reduce_metric_rbeta : reduce_metric (reduce_rbeta D) (s N) <- reduce_metric D N.
reduce_metric_reta :
   reduce_metric (reduce_reta D X1) (s N) <- reduce_metric D N.
reduce_metric_annot :
   reduce_metric (reduce_annot D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metricpr D2 N2
      <- sum N1 N2 N3.
reduce_metric_lam :
   reduce_metric (reduce_lam (\t:tp. \x:kof t K1. D t x)) (s N)
      <- (Pi t:tp. Pi d:kof t K1. reduce_metric (D t d) N).
reduce_metric_app :
   reduce_metric (reduce_app D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_pair :
   reduce_metric (reduce_pair D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_pi1 : reduce_metric (reduce_pi1 D) (s N) <- reduce_metric D N.
reduce_metric_pi2 : reduce_metric (reduce_pi2 D) (s N) <- reduce_metric D N.
reduce_metric_klam :
   reduce_metric (reduce_klam (\k:kind. \r:pred. \x:pon r k. D k r x)) (s N)
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k. reduce_metric (D k r d) N).
reduce_metric_kapp :
   reduce_metric (reduce_kapp D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metricpr D2 N2
      <- sum N1 N2 N3.
reduce_metric_in1 : reduce_metric (reduce_in1 D) (s N) <- reduce_metric D N.
reduce_metric_in2 : reduce_metric (reduce_in2 D) (s N) <- reduce_metric D N.
reduce_metric_case :
   reduce_metric
      (reduce_case (\t:tp. \x:kof t K1. D3 t x) (\t:tp. \x:kof t K2. D2 t x) D1)
      (s N)
      <- reduce_metric D1 N1
      <- (Pi t:tp. Pi d:kof t K2. reduce_metric (D2 t d) N2)
      <- (Pi t:tp. Pi d:kof t K1. reduce_metric (D3 t d) N3)
      <- sum N2 N3 N23
      <- sum N23 N1 N.
reduce_metric_roll : reduce_metric (reduce_roll D) (s N) <- reduce_metric D N.
reduce_metric_unroll :
   reduce_metric (reduce_unroll D) (s N) <- reduce_metric D N.
reduce_metric_seteq : reduce_metric (reduce_seteq D) (s N) <- reduce_metric D N.
reduce_metric_prod :
   reduce_metric (reduce_prod D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_exp :
   reduce_metric (reduce_exp D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_code : reduce_metric (reduce_code D) (s N) <- reduce_metricr D N.
reduce_metric_arrow :
   reduce_metric (reduce_arrow D) (s N) <- reduce_metricr D N.
reduce_metric_cbox :
   reduce_metric (reduce_cbox D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_cmbox :
   reduce_metric (reduce_cmbox D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_sptr : reduce_metric (reduce_sptr D) (s N) <- reduce_metric D N.
reduce_metric_forall :
   reduce_metric (reduce_forall D2 (\t:tp. \x:kof t K1. D1 t x)) (s N3)
      <- (Pi t:tp. Pi d:kof t K1. reduce_metric (D1 t d) N1)
      <- reduce_metricpr D2 N2
      <- sum N1 N2 N3.
reduce_metric_exists :
   reduce_metric (reduce_exists D2 (\t:tp. \x:kof t K1. D1 t x)) (s N3)
      <- (Pi t:tp. Pi d:kof t K1. reduce_metric (D1 t d) N1)
      <- reduce_metricpr D2 N2
      <- sum N1 N2 N3.
reduce_metric_guard :
   reduce_metric (reduce_guard D2 D1) (s N3)
      <- reduce_metricp D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_assert :
   reduce_metric (reduce_assert D2 D1) (s N3)
      <- reduce_metricp D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_rec :
   reduce_metric (reduce_rec (\t:tp. \x:kof t kt. D t x)) (s N)
      <- (Pi t:tp. Pi d:kof t kt. reduce_metric (D t d) N).
reduce_metric_meet :
   reduce_metric (reduce_meet D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_join :
   reduce_metric (reduce_join D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_numadd :
   reduce_metric (reduce_numadd D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_nummul :
   reduce_metric (reduce_nummul D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_nil : reduce_metricr* reducer_nil z.
reduce_metric_cons :
   reduce_metricr* (reducer_cons D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metricr* D2 N2
      <- sum N1 N2 N3.
reduce_metric_reducer_ :
   reduce_metricr (reducer_ D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metricr* D2 N2
      <- sum N1 N2 N3.
reduce_metric_numeq :
   reduce_metricp (reducep_numeq D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_numleq :
   reduce_metricp (reducep_numleq D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_loclt :
   reduce_metricp (reducep_loclt D2 D1) (s N3)
      <- reduce_metric D1 N1
      <- reduce_metric D2 N2
      <- sum N1 N2 N3.
reduce_metric_goodloc :
   reduce_metricp (reducep_goodloc D) (s N) <- reduce_metric D N.
reduce_metric_impl :
   reduce_metricp (reducep_impl D2 D1) (s N3)
      <- reduce_metricp D1 N1
      <- reduce_metricp D2 N2
      <- sum N1 N2 N3.
reduce_metric_and :
   reduce_metricp (reducep_and D2 D1) (s N3)
      <- reduce_metricp D1 N1
      <- reduce_metricp D2 N2
      <- sum N1 N2 N3.
reduce_metric_or :
   reduce_metricp (reducep_or D2 D1) (s N3)
      <- reduce_metricp D1 N1
      <- reduce_metricp D2 N2
      <- sum N1 N2 N3.
reduce_metric_false : reduce_metricp reducep_false z.
reduce_metricpr_id : reduce_metricpr reducepr_id z.
reduce_metricpr_tn : reduce_metricpr (reducepr_tn D) (s N) <- reduce_metric D N.
reduce_metricpr_arrow :
   reduce_metricpr (reducepr_arrow D2 D1) (s N3)
      <- reduce_metricpr D1 N1
      <- reduce_metricpr D2 N2
      <- sum N1 N2 N3.
reduce_metricpr_prod :
   reduce_metricpr (reducepr_prod D2 D1) (s N3)
      <- reduce_metricpr D1 N1
      <- reduce_metricpr D2 N2
      <- sum N1 N2 N3.
reduce_metricpr_forall :
   reduce_metricpr (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D k r x))
      (s N)
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k. reduce_metricpr (D k r d) N).
reduce_metricpr_sum :
   reduce_metricpr (reducepr_sum D2 D1) (s N3)
      <- reduce_metricpr D1 N1
      <- reduce_metricpr D2 N2
      <- sum N1 N2 N3.
reduce_metricpr_rec :
   reduce_metricpr (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D k r x)) (s N)
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k. reduce_metricpr (D k r d) N).
can_reduce_metric :
   Pi T1:tp. Pi T2:tp. Pi N:nat. Pi D:reduce T1 T2. reduce_metric D N -> type.
can_reduce_metricr :
   Pi G1:rtp. Pi G2:rtp. Pi N:nat. Pi D:reducer G1 G2.
      reduce_metricr D N -> type.
can_reduce_metricr* :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1. Pi N:nat. Pi D:reducer* G1 G2.
      reduce_metricr* D N -> type.
can_reduce_metricp :
   Pi P1:prop. Pi P2:prop. Pi N:nat. Pi D:reducep P1 P2.
      reduce_metricp D N -> type.
can_reduce_metricpr :
   Pi R1:pred. Pi R2:pred. Pi N:nat. Pi D:reducepr R1 R2.
      reduce_metricpr D N -> type.
-id : can_reduce_metric reduce_id reduce_metric_id.
-annbet :
   can_reduce_metric (reduce_annbeta D) (reduce_metric_annbeta DM)
      <- can_reduce_metric D DM.
-beta :
   can_reduce_metric (reduce_beta D2 (\t:tp. \x:kof t K1. D1 t x))
      (reduce_metric_beta Dsum DM2 (\t:tp. \d:kof t K1. DM1 t d))
      <- (Pi t:tp. Pi d:kof t K1. can_reduce_metric (D1 t d) (DM1 t d))
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-eta :
   can_reduce_metric (reduce_eta D X1) (reduce_metric_eta DM)
      <- can_reduce_metric D DM.
-pbeta1 :
   can_reduce_metric (reduce_pbeta1 D) (reduce_metric_pbeta1 DM)
      <- can_reduce_metric D DM.
-pbeta2 :
   can_reduce_metric (reduce_pbeta2 D) (reduce_metric_pbeta2 DM)
      <- can_reduce_metric D DM.
-peta :
   can_reduce_metric (reduce_peta D X1) (reduce_metric_peta DM)
      <- can_reduce_metric D DM.
-kbeta :
   can_reduce_metric (reduce_kbeta D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x))
      (reduce_metric_kbeta Dsum DM2 (\k:kind. \r:pred. \d:pon r k. DM1 k r d))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             can_reduce_metric (D1 k r d) (DM1 k r d))
      <- can_reduce_metricpr D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-keta :
   can_reduce_metric (reduce_keta D X1) (reduce_metric_keta DM)
      <- can_reduce_metric D DM.
-beta1 :
   can_reduce_metric (reduce_sbeta1 (\t:tp. \x:kof t K1. D2 t x) D1)
      (reduce_metric_sbeta1 Dsum (\t:tp. \d:kof t K1. DM2 t d) DM1)
      <- can_reduce_metric D1 DM1
      <- (Pi t:tp. Pi d:kof t K1. can_reduce_metric (D2 t d) (DM2 t d))
      <- can_sum N1 N2 N3 Dsum.
-beta2 :
   can_reduce_metric (reduce_sbeta2 (\t:tp. \x:kof t K1. D2 t x) D1)
      (reduce_metric_sbeta2 Dsum (\t:tp. \d:kof t K1. DM2 t d) DM1)
      <- can_reduce_metric D1 DM1
      <- (Pi t:tp. Pi d:kof t K1. can_reduce_metric (D2 t d) (DM2 t d))
      <- can_sum N1 N2 N3 Dsum.
-rbeta :
   can_reduce_metric (reduce_rbeta D) (reduce_metric_rbeta DM)
      <- can_reduce_metric D DM.
-reta :
   can_reduce_metric (reduce_reta D X1) (reduce_metric_reta DM)
      <- can_reduce_metric D DM.
-annot :
   can_reduce_metric (reduce_annot D2 D1) (reduce_metric_annot Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metricpr D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-lam :
   can_reduce_metric (reduce_lam (\t:tp. \x:kof t K1. D t x))
      (reduce_metric_lam (\t:tp. \d:kof t K1. DM t d))
      <- (Pi t:tp. Pi d:kof t K1. can_reduce_metric (D t d) (DM t d)).
-app :
   can_reduce_metric (reduce_app D2 D1) (reduce_metric_app Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-pair :
   can_reduce_metric (reduce_pair D2 D1) (reduce_metric_pair Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-pi1 :
   can_reduce_metric (reduce_pi1 D) (reduce_metric_pi1 DM)
      <- can_reduce_metric D DM.
-pi2 :
   can_reduce_metric (reduce_pi2 D) (reduce_metric_pi2 DM)
      <- can_reduce_metric D DM.
-klam :
   can_reduce_metric (reduce_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (reduce_metric_klam (\k:kind. \r:pred. \d:pon r k. DM k r d))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             can_reduce_metric (D k r d) (DM k r d)).
-kapp :
   can_reduce_metric (reduce_kapp D2 D1) (reduce_metric_kapp Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metricpr D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-in1 :
   can_reduce_metric (reduce_in1 D) (reduce_metric_in1 DM)
      <- can_reduce_metric D DM.
-in2 :
   can_reduce_metric (reduce_in2 D) (reduce_metric_in2 DM)
      <- can_reduce_metric D DM.
-case :
   can_reduce_metric
      (reduce_case (\t:tp. \x:kof t K1. D3 t x) (\t:tp. \x:kof t K2. D2 t x) D1)
      (reduce_metric_case Dsum' Dsum (\t:tp. \d:kof t K1. DM3 t d)
          (\t:tp. \d:kof t K2. DM2 t d) DM1)
      <- can_reduce_metric D1 DM1
      <- (Pi t:tp. Pi d:kof t K2. can_reduce_metric (D2 t d) (DM2 t d))
      <- (Pi t:tp. Pi d:kof t K1. can_reduce_metric (D3 t d) (DM3 t d))
      <- can_sum N4 N5 N1 Dsum
      <- can_sum N1 N2 N3 Dsum'.
-roll :
   can_reduce_metric (reduce_roll D) (reduce_metric_roll DM)
      <- can_reduce_metric D DM.
-unroll :
   can_reduce_metric (reduce_unroll D) (reduce_metric_unroll DM)
      <- can_reduce_metric D DM.
-eteq :
   can_reduce_metric (reduce_seteq D) (reduce_metric_seteq DM)
      <- can_reduce_metric D DM.
-prod :
   can_reduce_metric (reduce_prod D2 D1) (reduce_metric_prod Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-exp :
   can_reduce_metric (reduce_exp D2 D1) (reduce_metric_exp Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-code :
   can_reduce_metric (reduce_code D) (reduce_metric_code DM)
      <- can_reduce_metricr D DM.
-arrow :
   can_reduce_metric (reduce_arrow D) (reduce_metric_arrow DM)
      <- can_reduce_metricr D DM.
-cbox :
   can_reduce_metric (reduce_cbox D2 D1) (reduce_metric_cbox Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-cmbox :
   can_reduce_metric (reduce_cmbox D2 D1) (reduce_metric_cmbox Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-ptr :
   can_reduce_metric (reduce_sptr D) (reduce_metric_sptr DM)
      <- can_reduce_metric D DM.
-forall :
   can_reduce_metric (reduce_forall D2 (\t:tp. \x:kof t K1. D1 t x))
      (reduce_metric_forall Dsum DM2 (\t:tp. \d:kof t K1. DM1 t d))
      <- (Pi t:tp. Pi d:kof t K1. can_reduce_metric (D1 t d) (DM1 t d))
      <- can_reduce_metricpr D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-exists :
   can_reduce_metric (reduce_exists D2 (\t:tp. \x:kof t K1. D1 t x))
      (reduce_metric_exists Dsum DM2 (\t:tp. \d:kof t K1. DM1 t d))
      <- (Pi t:tp. Pi d:kof t K1. can_reduce_metric (D1 t d) (DM1 t d))
      <- can_reduce_metricpr D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-guard :
   can_reduce_metric (reduce_guard D2 D1) (reduce_metric_guard Dsum DM2 DM1)
      <- can_reduce_metricp D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-assert :
   can_reduce_metric (reduce_assert D2 D1) (reduce_metric_assert Dsum DM2 DM1)
      <- can_reduce_metricp D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-rec :
   can_reduce_metric (reduce_rec (\t:tp. \x:kof t kt. D t x))
      (reduce_metric_rec (\t:tp. \d:kof t kt. DM t d))
      <- (Pi t:tp. Pi d:kof t kt. can_reduce_metric (D t d) (DM t d)).
-meet :
   can_reduce_metric (reduce_meet D2 D1) (reduce_metric_meet Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-join :
   can_reduce_metric (reduce_join D2 D1) (reduce_metric_join Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-numadd :
   can_reduce_metric (reduce_numadd D2 D1) (reduce_metric_numadd Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-nummul :
   can_reduce_metric (reduce_nummul D2 D1) (reduce_metric_nummul Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-nil : can_reduce_metricr* reducer_nil reduce_metric_nil.
-cons :
   can_reduce_metricr* (reducer_cons D2 D1) (reduce_metric_cons Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metricr* D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- :
   can_reduce_metricr (reducer_ D2 D1) (reduce_metric_reducer_ Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metricr* D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-numeq :
   can_reduce_metricp (reducep_numeq D2 D1) (reduce_metric_numeq Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-numleq :
   can_reduce_metricp (reducep_numleq D2 D1) (reduce_metric_numleq Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-loclt :
   can_reduce_metricp (reducep_loclt D2 D1) (reduce_metric_loclt Dsum DM2 DM1)
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-goodlc :
   can_reduce_metricp (reducep_goodloc D) (reduce_metric_goodloc DM)
      <- can_reduce_metric D DM.
-impl :
   can_reduce_metricp (reducep_impl D2 D1) (reduce_metric_impl Dsum DM2 DM1)
      <- can_reduce_metricp D1 DM1
      <- can_reduce_metricp D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-and :
   can_reduce_metricp (reducep_and D2 D1) (reduce_metric_and Dsum DM2 DM1)
      <- can_reduce_metricp D1 DM1
      <- can_reduce_metricp D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-or :
   can_reduce_metricp (reducep_or D2 D1) (reduce_metric_or Dsum DM2 DM1)
      <- can_reduce_metricp D1 DM1
      <- can_reduce_metricp D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-false : can_reduce_metricp reducep_false reduce_metric_false.
-id : can_reduce_metricpr reducepr_id reduce_metricpr_id.
-tn :
   can_reduce_metricpr (reducepr_tn D) (reduce_metricpr_tn DM)
      <- can_reduce_metric D DM.
-arrow :
   can_reduce_metricpr (reducepr_arrow D2 D1)
      (reduce_metricpr_arrow Dsum DM2 DM1)
      <- can_reduce_metricpr D1 DM1
      <- can_reduce_metricpr D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-prod :
   can_reduce_metricpr (reducepr_prod D2 D1) (reduce_metricpr_prod Dsum DM2 DM1)
      <- can_reduce_metricpr D1 DM1
      <- can_reduce_metricpr D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-forall :
   can_reduce_metricpr (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D k r x))
      (reduce_metricpr_forall (\k:kind. \r:pred. \d:pon r k. DM k r d))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             can_reduce_metricpr (D k r d) (DM k r d)).
-um :
   can_reduce_metricpr (reducepr_sum D2 D1) (reduce_metricpr_sum Dsum DM2 DM1)
      <- can_reduce_metricpr D1 DM1
      <- can_reduce_metricpr D2 DM2
      <- can_sum N1 N2 N3 Dsum.
-rec :
   can_reduce_metricpr (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D k r x))
      (reduce_metricpr_rec (\k:kind. \r:pred. \d:pon r k. DM k r d))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             can_reduce_metricpr (D k r d) (DM k r d)).
diam_vacuous :
   false -> Pi T1:tp. Pi T2:tp. Pi T':tp. reduce T1 T' -> reduce T2 T' -> type.
diam :
   Pi T':tp. Pi K1:kind. Pi T1:tp. Pi T2:tp. Pi T':tp.
      kof T' K1
         -> Pi D1:reduce T' T1. Pi D2:reduce T' T2. Pi N1:nat.
                reduce_metric D1 N1
                   -> Pi N2:nat.
                          reduce_metric D2 N2 -> reduce T1 T' -> reduce T2 T'
                             -> type.
diamr :
   Pi G:rtp. Pi G1:rtp. Pi G2:rtp. Pi G':rtp.
      rtpok G
         -> Pi D1:reducer G G1. Pi D2:reducer G G2. Pi N1:nat.
                reduce_metricr D1 N1
                   -> Pi N2:nat.
                          reduce_metricr D2 N2 -> reducer G1 G' -> reducer G2 G'
                             -> type.
diamr* :
   Pi N1:nat. Pi G:rtp* N1. Pi G1:rtp* N1. Pi G2:rtp* N1. Pi G':rtp* N1.
      rtpok* G
         -> Pi D1:reducer* G G1. Pi D2:reducer* G G2. Pi N2:nat.
                reduce_metricr* D1 N2
                   -> Pi N3:nat.
                          reduce_metricr* D2 N3 -> reducer* G1 G'
                             -> reducer* G2 G' -> type.
diamp :
   Pi P:prop. Pi P1:prop. Pi P2:prop. Pi P':prop.
      propok P
         -> Pi D1:reducep P P1. Pi D2:reducep P P2. Pi N1:nat.
                reduce_metricp D1 N1
                   -> Pi N2:nat.
                          reduce_metricp D2 N2 -> reducep P1 P' -> reducep P2 P'
                             -> type.
diampr :
   Pi R:pred. Pi K1:kind. Pi R1:pred. Pi R2:pred. Pi R':pred.
      pon R K1
         -> Pi D1:reducepr R R1. Pi D2:reducepr R R2. Pi N1:nat.
                reduce_metricpr D1 N1
                   -> Pi N2:nat.
                          reduce_metricpr D2 N2 -> reducepr R1 R'
                             -> reducepr R2 R' -> type.
-i* : diam X1 reduce_id D N1 X2 N2 X3 D reduce_id.
-*i : diam X1 D reduce_id N1 X2 N2 X3 reduce_id D.
-e* :
   diam X1 (reduce_eta D1 Dkof) D2 (s N1) (reduce_metric_eta Dmet1) N2 Dmet2
      (reduce_lam (\t:tp. \d:kof t K1. reduce_app reduce_id D1'))
      (reduce_eta D2' Dkof')
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'
      <- sr Dkof D2 Dkof'.
-*e :
   diam X1 D1 (reduce_eta D2 Dkof) N1 Dmet1 (s N2) (reduce_metric_eta Dmet2)
      (reduce_eta D1' Dkof')
      (reduce_lam (\t:tp. \d:kof t K1. reduce_app reduce_id D2'))
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'
      <- sr Dkof D1 Dkof'.
-pe* :
   diam X1 (reduce_peta D1 Dkof) D2 (s N1) (reduce_metric_peta Dmet1) N2 Dmet2
      (reduce_pair (reduce_pi2 D1') (reduce_pi1 D1')) (reduce_peta D2' Dkof')
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'
      <- sr Dkof D2 Dkof'.
-*pe :
   diam X1 D1 (reduce_peta D2 Dkof) N1 Dmet1 (s N2) (reduce_metric_peta Dmet2)
      (reduce_peta D1' Dkof') (reduce_pair (reduce_pi2 D2') (reduce_pi1 D2'))
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'
      <- sr Dkof D1 Dkof'.
-E* :
   diam X1 (reduce_keta D1 Dkof) D2 (s N1) (reduce_metric_keta Dmet1) N2 Dmet2
      (reduce_klam (\k:kind. \r:pred. \d:pon r k. reduce_kapp reducepr_id D1'))
      (reduce_keta D2' Dkof')
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'
      <- sr Dkof D2 Dkof'.
-*E :
   diam X1 D1 (reduce_keta D2 Dkof) N1 Dmet1 (s N2) (reduce_metric_keta Dmet2)
      (reduce_keta D1' Dkof')
      (reduce_klam (\k:kind. \r:pred. \d:pon r k. reduce_kapp reducepr_id D2'))
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'
      <- sr Dkof D1 Dkof'.
-re* :
   diam X1 (reduce_reta D1 Dkof) D2 (s N1) (reduce_metric_reta Dmet1) N2 Dmet2
      (reduce_roll (reduce_unroll D1')) (reduce_reta D2' Dkof')
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'
      <- sr Dkof D2 Dkof'.
-*re :
   diam X1 D1 (reduce_reta D2 Dkof) N1 Dmet1 (s N2) (reduce_metric_reta Dmet2)
      (reduce_reta D1' Dkof') (reduce_roll (reduce_unroll D2'))
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'
      <- sr Dkof D1 Dkof'.
-annb_b :
   diam (kof_annot Dkof X1) (reduce_annbeta D1) (reduce_annbeta D2) (s N1)
      (reduce_metric_annbeta Dmet1) (s N2) (reduce_metric_annbeta Dmet2) D1' D2'
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-annb_a :
   diam (kof_annot Dkof X1) (reduce_annbeta D1) (reduce_annot D22 D2) (s N1)
      (reduce_metric_annbeta Dmet1) (s N4)
      (reduce_metric_annot Dsum Dmet22 Dmet2) D1' (reduce_annbeta D2')
      <- employ_sum' N2 N3 N4 Dsum
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-anna_b :
   diam (kof_annot Dkof X1) (reduce_annot D12 D1) (reduce_annbeta D2) (s N4)
      (reduce_metric_annot Dsum Dmet12 Dmet1) (s N2)
      (reduce_metric_annbeta Dmet2) (reduce_annbeta D1') D2'
      <- employ_sum' N1 N3 N4 Dsum
      <- diam Dkof D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-annot :
   diam (kof_annot Dkof Dpon) (reduce_annot D12 D1) (reduce_annot D22 D2) 
(s N6)
      (reduce_metric_annot Dsum1 Dmet12 Dmet1) (s N5)
      (reduce_metric_annot Dsum2 Dmet22 Dmet2) (reduce_annot D12' D1')
      (reduce_annot D22' D2')
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- diam Dkof D1 D2 N3 Dmet1 N4 Dmet2 D1' D2'
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-b_b :
   diam (kof_app Dkof2 (kof_lam (\t:tp. \x:kof t K1. Dkof1 t x)))
      (reduce_beta D12 (\t:tp. \x:kof t K1. D11 t x))
      (reduce_beta D22 (\t:tp. \x:kof t K1. D21 t x)) (s N6)
      (reduce_metric_beta Dsum1 Dmet12 (\t:tp. \d:kof t K1. Dmet11 t d)) (s N5)
      (reduce_metric_beta Dsum2 Dmet22 (\t:tp. \d:kof t K1. Dmet21 t d)) D1 D2
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof1 t d) (D11 t d) (D21 t d) N3 (Dmet11 t d) N4
                (Dmet21 t d) (D11' t d) (D21' t d))
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- sr Dkof2 D12 Dkof21
      <- sr Dkof2 D22 Dkof22
      <- substitute2 (\t:tp. \x:kof t K1. D11' t x) Dkof21 D12' D1
      <- substitute2 (\t:tp. \x:kof t K1. D21' t x) Dkof22 D22' D2.
-b_al :
   diam (kof_app Dkof2 (kof_lam (\t:tp. \x:kof t K1. Dkof1 t x)))
      (reduce_beta D12 (\t:tp. \x:kof t K1. D11 t x))
      (reduce_app D22 (reduce_lam (\t:tp. \x:kof t K1. D21 t x))) (s N6)
      (reduce_metric_beta Dsum1 Dmet12 (\t:tp. \d:kof t K1. Dmet11 t d)) (s N5)
      (reduce_metric_app Dsum2 Dmet22
          (reduce_metric_lam (\t:tp. \d:kof t K1. Dmet21 t d))) D1
      (reduce_beta D22' (\t:tp. \x:kof t K1. D21' t x))
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum (s N4) N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 (s N4) N5 Dsum2'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof1 t d) (D11 t d) (D21 t d) N3 (Dmet11 t d) N4
                (Dmet21 t d) (D11' t d) (D21' t d))
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- sr Dkof2 D12 Dkof2'
      <- substitute2 (\t:tp. \x:kof t K1. D11' t x) Dkof2' D12' D1.
-al_b :
   diam (kof_app Dkof2 (kof_lam (\t:tp. \x:kof t K1. Dkof1 t x)))
      (reduce_app D12 (reduce_lam (\t:tp. \x:kof t K1. D11 t x)))
      (reduce_beta D22 (\t:tp. \x:kof t K1. D21 t x)) (s N6)
      (reduce_metric_app Dsum1 Dmet12
          (reduce_metric_lam (\t:tp. \d:kof t K1. Dmet11 t d))) (s N5)
      (reduce_metric_beta Dsum2 Dmet22 (\t:tp. \d:kof t K1. Dmet21 t d))
      (reduce_beta D12' (\t:tp. \x:kof t K1. D11' t x)) D2
      <- employ_sum (s N3) N2 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N2 (s N3) N6 Dsum1'
      <- employ_sum N4 N1 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N1 N4 N5 Dsum2'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof1 t d) (D11 t d) (D21 t d) N3 (Dmet11 t d) N4
                (Dmet21 t d) (D11' t d) (D21' t d))
      <- diam Dkof2 D12 D22 N2 Dmet12 N1 Dmet22 D12' D22'
      <- sr Dkof2 D22 Dkof2'
      <- substitute2 (\t:tp. \x:kof t K1. D21' t x) Dkof2' D22' D2.
-b_ai :
   diam (kof_app Dkof2 X1) (reduce_beta D12 (\t:tp. \x:kof t K2. D11 t x))
      (reduce_app D22 reduce_id) (s N5)
      (reduce_metric_beta Dsum1 Dmet12 (\t:tp. \d:kof t K2. Dmet11 t d)) (s N3)
      (reduce_metric_app Dsum2 Dmet22 reduce_metric_id) D1
      (reduce_beta D22' (\t:tp. \x:kof t K2. D11 t x))
      <- employ_sum N4 N1 N5 Dsum1
      <- employ_sum z N2 N3 Dsum2
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- substitute1 (\t:tp. T' t) D12' D1.
-ai_b :
   diam (kof_app Dkof2 X1) (reduce_app D12 reduce_id)
      (reduce_beta D22 (\t:tp. \x:kof t K2. D21 t x)) (s N5)
      (reduce_metric_app Dsum1 Dmet12 reduce_metric_id) (s N4)
      (reduce_metric_beta Dsum2 Dmet22 (\t:tp. \d:kof t K2. Dmet21 t d))
      (reduce_beta D12' (\t:tp. \x:kof t K2. D21 t x)) D2
      <- employ_sum z N1 N5 Dsum1
      <- employ_sum N3 N2 N4 Dsum2
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- substitute1 (\t:tp. T' t) D22' D2.
-b_ae :
   diam (kof_app Dkof2 (kof_lam (\t:tp. \x:kof t K1. Dkof1 t x)))
      (reduce_beta D12 (\t:tp. \x:kof t K1. D11 t x))
      (reduce_app D22 (reduce_eta D21 (kof_lam (\t:tp. \x:kof t K1. X1 t x))))
      (s N1) (reduce_metric_beta Dsum1 Dmet12 (\t:tp. \d:kof t K1. Dmet11 t d))
      (s N2) (reduce_metric_app Dsum2 Dmet22 (reduce_metric_eta Dmet21)) D1'
      (reduce_beta D22' (\t:tp. \d:kof t K1. D2 t d))
      <- employ_sum N11 N12 N1 Dsum1
      <- employ_sum' (s N11) N12 (s N1) (sum_s Dsum1)
      <- employ_sum (s N21) N22 N2 Dsum2
      <- employ_sum' (s N21) N22 N2 Dsum2
      <- sum_ident N11 Dsum1z
      <- sum_ident N21 Dsum2z
      <- (Pi t:tp. Pi d:kof t K1.
             diam (kof_app d (kof_lam (\t1:tp. \x:kof t1 K1. Dkof1 t1 x)))
                (reduce_beta reduce_id (\t2:tp. \x:kof t2 K1. D11 t2 x))
                (reduce_app reduce_id D21) (s N11)
                (reduce_metric_beta Dsum1z reduce_metric_id
                    (\t3:tp. \d1:kof t3 K1. Dmet11 t3 d1)) (s N21)
                (reduce_metric_app Dsum2z reduce_metric_id Dmet21) (D1 t d)
                (D2 t d))
      <- diam Dkof2 D12 D22 N12 Dmet12 N22 Dmet22 D12' D22'
      <- sr Dkof2 D12 Dkof2'
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof2' D12' D1'.
-ae_b :
   diam (kof_app Dkof2 (kof_lam (\t:tp. \x:kof t K1. Dkof1 t x)))
      (reduce_app D22 (reduce_eta D21 (kof_lam (\t:tp. \x:kof t K1. X1 t x))))
      (reduce_beta D12 (\t:tp. \x:kof t K1. D11 t x)) (s N2)
      (reduce_metric_app Dsum2 Dmet22 (reduce_metric_eta Dmet21)) (s N1)
      (reduce_metric_beta Dsum1 Dmet12 (\t:tp. \d:kof t K1. Dmet11 t d))
      (reduce_beta D22' (\t:tp. \d:kof t K1. D2 t d)) D1'
      <- employ_sum N11 N12 N1 Dsum1
      <- employ_sum' (s N11) N12 (s N1) (sum_s Dsum1)
      <- employ_sum (s N21) N22 N2 Dsum2
      <- employ_sum' (s N21) N22 N2 Dsum2
      <- sum_ident N11 Dsum1z
      <- sum_ident N21 Dsum2z
      <- (Pi t:tp. Pi d:kof t K1.
             diam (kof_app d (kof_lam (\t1:tp. \x:kof t1 K1. Dkof1 t1 x)))
                (reduce_app reduce_id D21)
                (reduce_beta reduce_id (\t2:tp. \x:kof t2 K1. D11 t2 x)) 
(s N21)
                (reduce_metric_app Dsum2z reduce_metric_id Dmet21) (s N11)
                (reduce_metric_beta Dsum1z reduce_metric_id
                    (\t3:tp. \d1:kof t3 K1. Dmet11 t3 d1)) (D2 t d) (D1 t d))
      <- diam Dkof2 D22 D12 N22 Dmet22 N12 Dmet12 D22' D12'
      <- sr Dkof2 D12 Dkof2'
      <- substitute2 (\t:tp. \x:kof t K1. D1 t x) Dkof2' D12' D1'.
-aa :
   diam (kof_app Dkof2 Dkof1) (reduce_app D12 D11) (reduce_app D22 D21) (s N6)
      (reduce_metric_app Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_app Dsum2 Dmet22 Dmet21) (reduce_app D12' D11')
      (reduce_app D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-ll :
   diam (kof_lam (\t:tp. \x:kof t K1. Dkof' t x))
      (reduce_lam (\t:tp. \x:kof t K1. D1 t x))
      (reduce_lam (\t:tp. \x:kof t K1. D2 t x)) (s N1)
      (reduce_metric_lam (\t:tp. \d:kof t K1. Dmet1 t d)) (s N2)
      (reduce_metric_lam (\t:tp. \d:kof t K1. Dmet2 t d))
      (reduce_lam (\t:tp. \x:kof t K1. D1' t x))
      (reduce_lam (\t:tp. \x:kof t K1. D2' t x))
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof' t d) (D1 t d) (D2 t d) N1 (Dmet1 t d) N2 (Dmet2 t d)
                (D1' t d) (D2' t d)).
-b1_b1 :
   diam (kof_pi1 (kof_pair Dkof2 Dkof1)) (reduce_pbeta1 D1) (reduce_pbeta1 D2)
      (s N1) (reduce_metric_pbeta1 Dmet1) (s N2) (reduce_metric_pbeta1 Dmet2)
      D1' D2'
      <- diam Dkof1 D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-b2_b2 :
   diam (kof_pi2 (kof_pair Dkof2 Dkof1)) (reduce_pbeta2 D1) (reduce_pbeta2 D2)
      (s N1) (reduce_metric_pbeta2 Dmet1) (s N2) (reduce_metric_pbeta2 Dmet2)
      D1' D2'
      <- diam Dkof2 D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-b1_p1P :
   diam (kof_pi1 (kof_pair Dkof2 Dkof1)) (reduce_pbeta1 D1)
      (reduce_pi1 (reduce_pair D22 D21)) (s N1) (reduce_metric_pbeta1 Dmet1)
      (s (s N4)) (reduce_metric_pi1 (reduce_metric_pair Dsum2 Dmet22 Dmet21))
      D1' (reduce_pbeta1 D2')
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N3 N2 N4 Dsum2'
      <- diam Dkof1 D1 D21 N1 Dmet1 N2 Dmet21 D1' D2'.
-p1P_b1 :
   diam (kof_pi1 (kof_pair Dkof2 Dkof1)) (reduce_pi1 (reduce_pair D22 D21))
      (reduce_pbeta1 D1) (s (s N4))
      (reduce_metric_pi1 (reduce_metric_pair Dsum2 Dmet22 Dmet21)) (s N2)
      (reduce_metric_pbeta1 Dmet1) (reduce_pbeta1 D2') D1'
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N3 N1 N4 Dsum2'
      <- diam Dkof1 D21 D1 N1 Dmet21 N2 Dmet1 D2' D1'.
-b2_p2P :
   diam (kof_pi2 (kof_pair Dkof2 Dkof1)) (reduce_pbeta2 D1)
      (reduce_pi2 (reduce_pair D22 D21)) (s N1) (reduce_metric_pbeta2 Dmet1)
      (s (s N4)) (reduce_metric_pi2 (reduce_metric_pair Dsum2 Dmet22 Dmet21))
      D1' (reduce_pbeta2 D2')
      <- employ_sum N3 N2 N4 Dsum2
      <- diam Dkof2 D1 D22 N1 Dmet1 N2 Dmet22 D1' D2'.
-p2P_b2 :
   diam (kof_pi2 (kof_pair Dkof2 Dkof1)) (reduce_pi2 (reduce_pair D22 D21))
      (reduce_pbeta2 D1) (s (s N4))
      (reduce_metric_pi2 (reduce_metric_pair Dsum2 Dmet22 Dmet21)) (s N2)
      (reduce_metric_pbeta2 Dmet1) (reduce_pbeta2 D2') D1'
      <- employ_sum N3 N1 N4 Dsum2
      <- diam Dkof2 D22 D1 N1 Dmet22 N2 Dmet1 D2' D1'.
-b1_p1pe :
   diam Dkof (reduce_pbeta1 D1) (reduce_pi1 (reduce_peta D2 Dkof_eta)) (s N1)
      (reduce_metric_pbeta1 Dmet1) (s (s N2))
      (reduce_metric_pi1 (reduce_metric_peta Dmet2)) D1' (reduce_pbeta1 D2')
      <- diam Dkof (reduce_pbeta1 D1) (reduce_pi1 D2) (s N1)
            (reduce_metric_pbeta1 Dmet1) (s N2) (reduce_metric_pi1 Dmet2) D1'
            D2'.
-p1pe_b1 :
   diam Dkof (reduce_pi1 (reduce_peta D2 Dkof_eta)) (reduce_pbeta1 D1)
      (s (s N1)) (reduce_metric_pi1 (reduce_metric_peta Dmet2)) (s N2)
      (reduce_metric_pbeta1 Dmet1) (reduce_pbeta1 D2') D1'
      <- diam Dkof (reduce_pi1 D2) (reduce_pbeta1 D1) (s N1)
            (reduce_metric_pi1 Dmet2) (s N2) (reduce_metric_pbeta1 Dmet1) D2'
            D1'.
-b2_p2pe :
   diam Dkof (reduce_pbeta2 D1) (reduce_pi2 (reduce_peta D2 Dkof_eta)) (s N1)
      (reduce_metric_pbeta2 Dmet1) (s (s N2))
      (reduce_metric_pi2 (reduce_metric_peta Dmet2)) D1' (reduce_pbeta2 D2')
      <- diam Dkof (reduce_pbeta2 D1) (reduce_pi2 D2) (s N1)
            (reduce_metric_pbeta2 Dmet1) (s N2) (reduce_metric_pi2 Dmet2) D1'
            D2'.
-p2pe_b2 :
   diam Dkof (reduce_pi2 (reduce_peta D2 Dkof_eta)) (reduce_pbeta2 D1)
      (s (s N1)) (reduce_metric_pi2 (reduce_metric_peta Dmet2)) (s N2)
      (reduce_metric_pbeta2 Dmet1) (reduce_pbeta2 D2') D1'
      <- diam Dkof (reduce_pi2 D2) (reduce_pbeta2 D1) (s N1)
            (reduce_metric_pi2 Dmet2) (s N2) (reduce_metric_pbeta2 Dmet1) D2'
            D1'.
-b1_p1i :
   diam Dkof (reduce_pbeta1 D1) (reduce_pi1 reduce_id) N1 X1 N2 X2 reduce_id
      (reduce_pbeta1 D1).
-p1i_b1 :
   diam Dkof (reduce_pi1 reduce_id) (reduce_pbeta1 D1) N1 X1 N2 X2
      (reduce_pbeta1 D1) reduce_id.
-b2_p2i :
   diam Dkof (reduce_pbeta2 D2) (reduce_pi2 reduce_id) N1 X1 N2 X2 reduce_id
      (reduce_pbeta2 D2).
-p2i_b2 :
   diam Dkof (reduce_pi2 reduce_id) (reduce_pbeta2 D2) N1 X1 N2 X2
      (reduce_pbeta2 D2) reduce_id.
-p1 :
   diam (kof_pi1 Dkof') (reduce_pi1 D1) (reduce_pi1 D2) (s N1)
      (reduce_metric_pi1 Dmet1) (s N2) (reduce_metric_pi1 Dmet2)
      (reduce_pi1 D1') (reduce_pi1 D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-p2 :
   diam (kof_pi2 Dkof') (reduce_pi2 D1) (reduce_pi2 D2) (s N1)
      (reduce_metric_pi2 Dmet1) (s N2) (reduce_metric_pi2 Dmet2)
      (reduce_pi2 D1') (reduce_pi2 D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-P_P :
   diam (kof_pair Dkof2 Dkof1) (reduce_pair D12 D11) (reduce_pair D22 D21)
      (s N6) (reduce_metric_pair Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_pair Dsum2 Dmet22 Dmet21) (reduce_pair D12' D11')
      (reduce_pair D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-B_B :
   diam (kof_kapp (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof' k r x)) Dpon)
      (reduce_kbeta D12 (\k:kind. \r:pred. \x:pon r k. D11 k r x))
      (reduce_kbeta D22 (\k:kind. \r:pred. \x:pon r k. D21 k r x)) (s N6)
      (reduce_metric_kbeta Dsum1 Dmet12
          (\k:kind. \r:pred. \d:pon r k. Dmet11 k r d)) (s N5)
      (reduce_metric_kbeta Dsum2 Dmet22
          (\k:kind. \r:pred. \d:pon r k. Dmet21 k r d)) D1' D2'
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             diam (Dkof' k r d) (D11 k r d) (D21 k r d) N3 (Dmet11 k r d) N4
                (Dmet21 k r d) (D11' k r d) (D21' k r d))
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- srpr Dpon D12 Dpon1
      <- srpr Dpon D22 Dpon2
      <- substitutepr2 (\t:pred. \x:pon t K. D11' K t x) Dpon1 D12' D1'
      <- substitutepr2 (\t:pred. \x:pon t K. D21' K t x) Dpon2 D22' D2'.
-B_AL :
   diam (kof_kapp (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof' k r x)) Dpon)
      (reduce_kbeta D12 (\k:kind. \r:pred. \x:pon r k. D11 k r x))
      (reduce_kapp D22 (reduce_klam (\k:kind. \r:pred. \x:pon r k. D21 k r x)))
      (s N6)
      (reduce_metric_kbeta Dsum1 Dmet12
          (\k:kind. \r:pred. \d:pon r k. Dmet11 k r d)) (s N5)
      (reduce_metric_kapp Dsum2 Dmet22
          (reduce_metric_klam (\k:kind. \r:pred. \d:pon r k. Dmet21 k r d))) D1'
      (reduce_kbeta D22' (\k:kind. \r:pred. \x:pon r k. D21' k r x))
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum (s N4) N2 N5 Dsum2
      <- employ_sum' (s N4) N2 N5 Dsum2
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             diam (Dkof' k r d) (D11 k r d) (D21 k r d) N3 (Dmet11 k r d) N4
                (Dmet21 k r d) (D11' k r d) (D21' k r d))
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- srpr Dpon D12 Dpon1
      <- substitutepr2 (\t:pred. \x:pon t K. D11' K t x) Dpon1 D12' D1'.
-AL_B :
   diam (kof_kapp (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof' k r x)) Dpon)
      (reduce_kapp D12 (reduce_klam (\k:kind. \r:pred. \x:pon r k. D11 k r x)))
      (reduce_kbeta D22 (\k:kind. \r:pred. \x:pon r k. D21 k r x)) (s N6)
      (reduce_metric_kapp Dsum1 Dmet12
          (reduce_metric_klam (\k:kind. \r:pred. \d:pon r k. Dmet11 k r d)))
      (s N5)
      (reduce_metric_kbeta Dsum2 Dmet22
          (\k:kind. \r:pred. \d:pon r k. Dmet21 k r d))
      (reduce_kbeta D12' (\k:kind. \r:pred. \x:pon r k. D11' k r x)) D2'
      <- employ_sum (s N3) N1 N6 Dsum1
      <- employ_sum' (s N3) N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             diam (Dkof' k r d) (D11 k r d) (D21 k r d) N3 (Dmet11 k r d) N4
                (Dmet21 k r d) (D11' k r d) (D21' k r d))
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- srpr Dpon D22 Dpon2
      <- substitutepr2 (\t:pred. \x:pon t K. D21' K t x) Dpon2 D22' D2'.
-B_AI :
   diam (kof_kapp X1 Dpon)
      (reduce_kbeta D12 (\k:kind. \r:pred. \x:pon r k. D11 k r x))
      (reduce_kapp D22 reduce_id) (s N5)
      (reduce_metric_kbeta Dsum1 Dmet12
          (\k:kind. \r:pred. \d:pon r k. Dmet11 k r d)) (s N3)
      (reduce_metric_kapp Dsum2 Dmet22 reduce_metric_id) D1
      (reduce_kbeta D22' (\k:kind. \r:pred. \x:pon r k. D11 k r x))
      <- employ_sum N4 N1 N5 Dsum1
      <- employ_sum z N2 N3 Dsum2
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- substitutepr1 (\r:pred. T' K r) D12' D1.
-AI_B :
   diam (kof_kapp X1 Dpon) (reduce_kapp D12 reduce_id)
      (reduce_kbeta D22 (\k:kind. \r:pred. \x:pon r k. D21 k r x)) (s N5)
      (reduce_metric_kapp Dsum1 Dmet12 reduce_metric_id) (s N4)
      (reduce_metric_kbeta Dsum2 Dmet22
          (\k:kind. \r:pred. \d:pon r k. Dmet21 k r d))
      (reduce_kbeta D12' (\k:kind. \r:pred. \x:pon r k. D21 k r x)) D2
      <- employ_sum z N1 N5 Dsum1
      <- employ_sum N3 N2 N4 Dsum2
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'
      <- substitutepr1 (\r:pred. T' K r) D22' D2.
-B_AE :
   diam (kof_kapp (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof' k r x)) Dpon)
      (reduce_kbeta D12 (\k:kind. \r:pred. \x:pon r k. D11 k r x))
      (reduce_kapp D22 (reduce_keta D21 Dkof_eta)) (s N1)
      (reduce_metric_kbeta Dsum1 Dmet12
          (\k:kind. \r:pred. \d:pon r k. Dmet11 k r d)) (s N2)
      (reduce_metric_kapp Dsum2 Dmet22 (reduce_metric_keta Dmet21)) D1'
      (reduce_kbeta D22' (\k:kind. \r:pred. \x:pon r k. D21' k r x))
      <- employ_sum N11 N12 N1 Dsum1
      <- employ_sum' (s N11) N12 (s N1) (sum_s Dsum1)
      <- employ_sum (s N21) N22 N2 Dsum2
      <- employ_sum' (s N21) N22 N2 Dsum2
      <- sum_ident N11 Dsum1z
      <- sum_ident N21 Dsum2z
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             diam
                (kof_kapp
                    (kof_klam (\k1:kind. \r1:pred. \x:pon r1 k1. Dkof' k1 r1 x))
                    d)
                (reduce_kbeta reducepr_id
                    (\k2:kind. \r2:pred. \x:pon r2 k2. D11 k2 r2 x))
                (reduce_kapp reducepr_id D21) (s N11)
                (reduce_metric_kbeta Dsum1z reduce_metricpr_id
                    (\k3:kind. \r3:pred. \d1:pon r3 k3. Dmet11 k3 r3 d1))
                (s N21) (reduce_metric_kapp Dsum2z reduce_metricpr_id Dmet21)
                (D11' k r d) (D21' k r d))
      <- diampr Dpon D12 D22 N12 Dmet12 N22 Dmet22 D12' D22'
      <- srpr Dpon D12 Dpon1
      <- substitutepr2 (\t:pred. \x:pon t K. D11' K t x) Dpon1 D12' D1'.
-AE_B :
   diam (kof_kapp (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof' k r x)) Dpon)
      (reduce_kapp D12 (reduce_keta D11 Dkof_eta))
      (reduce_kbeta D22 (\k:kind. \r:pred. \x:pon r k. D21 k r x)) (s N1)
      (reduce_metric_kapp Dsum1 Dmet12 (reduce_metric_keta Dmet11)) (s N2)
      (reduce_metric_kbeta Dsum2 Dmet22
          (\k:kind. \r:pred. \d:pon r k. Dmet21 k r d))
      (reduce_kbeta D12' (\k:kind. \r:pred. \x:pon r k. D11' k r x)) D2'
      <- employ_sum (s N11) N12 N1 Dsum1
      <- employ_sum' (s N11) N12 N1 Dsum1
      <- employ_sum N21 N22 N2 Dsum2
      <- employ_sum' (s N21) N22 (s N2) (sum_s Dsum2)
      <- sum_ident N11 Dsum1z
      <- sum_ident N21 Dsum2z
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             diam
                (kof_kapp
                    (kof_klam (\k1:kind. \r1:pred. \x:pon r1 k1. Dkof' k1 r1 x))
                    d)
                (reduce_kapp reducepr_id D11)
                (reduce_kbeta reducepr_id
                    (\k2:kind. \r2:pred. \x:pon r2 k2. D21 k2 r2 x)) (s N11)
                (reduce_metric_kapp Dsum1z reduce_metricpr_id Dmet11) (s N21)
                (reduce_metric_kbeta Dsum2z reduce_metricpr_id
                    (\k3:kind. \r3:pred. \d1:pon r3 k3. Dmet21 k3 r3 d1))
                (D11' k r d) (D21' k r d))
      <- diampr Dpon D12 D22 N12 Dmet12 N22 Dmet22 D12' D22'
      <- srpr Dpon D22 Dpon2
      <- substitutepr2 (\t:pred. \x:pon t K. D21' K t x) Dpon2 D22' D2'.
-AA :
   diam (kof_kapp Dkof' Dpon) (reduce_kapp D12 D11) (reduce_kapp D22 D21) 
(s N6)
      (reduce_metric_kapp Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_kapp Dsum2 Dmet22 Dmet21) (reduce_kapp D12' D11')
      (reduce_kapp D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- diam Dkof' D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-LL :
   diam (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof' k r x))
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. D1 k r x))
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. D2 k r x)) (s N1)
      (reduce_metric_klam (\k:kind. \r:pred. \d:pon r k. Dmet1 k r d)) (s N2)
      (reduce_metric_klam (\k:kind. \r:pred. \d:pon r k. Dmet2 k r d))
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. D2' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             diam (Dkof' k r d) (D1 k r d) (D2 k r d) N1 (Dmet1 k r d) N2
                (Dmet2 k r d) (D1' k r d) (D2' k r d)).
-b1_sb1 :
   diam
      (kof_case (\t:tp. \x:kof t K3. X1 t x) (\t:tp. \x:kof t K1. Dkof2 t x)
          (kof_in1 Dkof1))
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D12 t x) D11)
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D22 t x) D21) (s N6)
      (reduce_metric_sbeta1 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (s N5)
      (reduce_metric_sbeta1 Dsum2 (\t:tp. \d:kof t K1. Dmet22 t d) Dmet21) D1 D2
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D12 t d) (D22 t d) N1 (Dmet12 t d) N2
                (Dmet22 t d) (D12' t d) (D22' t d))
      <- sr Dkof1 D11 Dkof11
      <- sr Dkof1 D21 Dkof21
      <- substitute2 (\t:tp. \x:kof t K1. D12' t x) Dkof11 D11' D1
      <- substitute2 (\t:tp. \x:kof t K1. D22' t x) Dkof21 D21' D2.
-b2_sb2 :
   diam
      (kof_case (\t:tp. \x:kof t K1. Dkof2 t x) (\t:tp. \x:kof t K3. X1 t x)
          (kof_in2 Dkof1))
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D12 t x) D11)
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D22 t x) D21) (s N6)
      (reduce_metric_sbeta2 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (s N5)
      (reduce_metric_sbeta2 Dsum2 (\t:tp. \d:kof t K1. Dmet22 t d) Dmet21) D1 D2
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D12 t d) (D22 t d) N1 (Dmet12 t d) N2
                (Dmet22 t d) (D12' t d) (D22' t d))
      <- sr Dkof1 D11 Dkof11
      <- sr Dkof1 D21 Dkof21
      <- substitute2 (\t:tp. \x:kof t K1. D12' t x) Dkof11 D11' D1
      <- substitute2 (\t:tp. \x:kof t K1. D22' t x) Dkof21 D21' D2.
-b1_cin1 :
   diam
      (kof_case (\t:tp. \x:kof t K3. X2 t x) (\t:tp. \x:kof t K1. Dkof2 t x)
          (kof_in1 Dkof1))
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D12 t x) D11)
      (reduce_case (\t:tp. \x:kof t K3. X3 t x) (\t:tp. \x:kof t K1. D22 t x)
          (reduce_in1 D21))
      (s N9)
      (reduce_metric_sbeta1 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (s N6)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K3. Dmet23 t d)
          (\t:tp. \d:kof t K1. Dmet22 t d) (reduce_metric_in1 Dmet21)) D1
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D22' t x) D21')
      <- employ_sum N3 N1 N9 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N9 Dsum1'
      <- employ_sum N8 (s N4) N6 Dsum2b
      <- sum_assoc Dsum2a Dsum2b X1 Dsum22
      <- sum_commute Dsum22 Dsum22'
      <- employ_sum N5 N2 N6 Dsum22'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D12 t d) (D22 t d) N1 (Dmet12 t d) N2
                (Dmet22 t d) (D12' t d) (D22' t d))
      <- sr Dkof1 D11 Dkof11
      <- substitute2 (\t:tp. \x:kof t K1. D12' t x) Dkof11 D11' D1.
-cin1_sb1 :
   diam
      (kof_case (\t:tp. \x:kof t K3. X2 t x) (\t:tp. \x:kof t K1. Dkof2 t x)
          (kof_in1 Dkof1))
      (reduce_case (\t:tp. \x:kof t K3. X3 t x) (\t:tp. \x:kof t K1. D22 t x)
          (reduce_in1 D21))
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D12 t x) D11) (s N6)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K3. Dmet23 t d)
          (\t:tp. \d:kof t K1. Dmet22 t d) (reduce_metric_in1 Dmet21)) 
(s N9)
      (reduce_metric_sbeta1 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D22' t x) D21') D1
      <- employ_sum N4 N2 N9 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N2 N4 N9 Dsum1'
      <- employ_sum N8 (s N3) N6 Dsum2b
      <- sum_assoc Dsum2a Dsum2b X1 Dsum22
      <- sum_commute Dsum22 Dsum22'
      <- employ_sum N5 N1 N6 Dsum22'
      <- diam Dkof1 D21 D11 N3 Dmet21 N4 Dmet11 D21' D11'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D22 t d) (D12 t d) N1 (Dmet22 t d) N2
                (Dmet12 t d) (D22' t d) (D12' t d))
      <- sr Dkof1 D11 Dkof11
      <- substitute2 (\t:tp. \x:kof t K1. D12' t x) Dkof11 D11' D1.
-b2_cin2 :
   diam
      (kof_case (\t:tp. \x:kof t K1. Dkof2 t x) (\t:tp. \x:kof t K3. X2 t x)
          (kof_in2 Dkof1))
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D12 t x) D11)
      (reduce_case (\t:tp. \x:kof t K1. D23 t x) (\t:tp. \x:kof t K3. X3 t x)
          (reduce_in2 D21))
      (s N9)
      (reduce_metric_sbeta2 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (s N6)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K1. Dmet23 t d)
          (\t:tp. \d:kof t K3. Dmet22 t d) (reduce_metric_in2 Dmet21)) D1
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D23' t x) D21')
      <- employ_sum N3 N1 N9 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N9 Dsum1'
      <- employ_sum N8 (s N4) N6 Dsum2b
      <- sum_commute Dsum2a Dsum2a'
      <- sum_assoc Dsum2a' Dsum2b X1 Dsum23
      <- sum_commute Dsum23 Dsum23'
      <- employ_sum N5 N2 N6 Dsum23'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D12 t d) (D23 t d) N1 (Dmet12 t d) N2
                (Dmet23 t d) (D12' t d) (D23' t d))
      <- sr Dkof1 D11 Dkof11
      <- substitute2 (\t:tp. \x:kof t K1. D12' t x) Dkof11 D11' D1.
-cin2_sb2 :
   diam
      (kof_case (\t:tp. \x:kof t K1. Dkof2 t x) (\t:tp. \x:kof t K3. X2 t x)
          (kof_in2 Dkof1))
      (reduce_case (\t:tp. \x:kof t K1. D23 t x) (\t:tp. \x:kof t K3. X3 t x)
          (reduce_in2 D21))
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D12 t x) D11) (s N6)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K1. Dmet23 t d)
          (\t:tp. \d:kof t K3. Dmet22 t d) (reduce_metric_in2 Dmet21)) 
(s N9)
      (reduce_metric_sbeta2 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D23' t x) D21') D1
      <- employ_sum N4 N2 N9 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N2 N4 N9 Dsum1'
      <- employ_sum N8 (s N3) N6 Dsum2b
      <- sum_commute Dsum2a Dsum2a'
      <- sum_assoc Dsum2a' Dsum2b X1 Dsum23
      <- sum_commute Dsum23 Dsum23'
      <- employ_sum N5 N1 N6 Dsum23'
      <- diam Dkof1 D21 D11 N3 Dmet21 N4 Dmet11 D21' D11'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D23 t d) (D12 t d) N1 (Dmet23 t d) N2
                (Dmet12 t d) (D23' t d) (D12' t d))
      <- sr Dkof1 D11 Dkof11
      <- substitute2 (\t:tp. \x:kof t K1. D12' t x) Dkof11 D11' D1.
-b1_ci :
   diam
      (kof_case (\t:tp. \x:kof t K3. X2 t x) (\t:tp. \x:kof t K1. Dkof2 t x)
          (kof_in1 Dkof1))
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D12 t x) D11)
      (reduce_case (\t:tp. \x:kof t K3. X3 t x) (\t:tp. \x:kof t K1. D22 t x)
          reduce_id)
      (s N9)
      (reduce_metric_sbeta1 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (s N4)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K3. Dmet23 t d)
          (\t:tp. \d:kof t K1. Dmet22 t d) Dmet21)
      (D12' T' Dkof1') (reduce_sbeta1 (\t:tp. \x:kof t K1. D22' t x) D11)
      <- employ_sum N8 N1 N9 Dsum1
      <- sum_assoc Dsum2a Dsum2b X1 Dsum22
      <- sum_commute Dsum22 Dsum22'
      <- employ_sum N3 N2 N4 Dsum22'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D12 t d) (D22 t d) N1 (Dmet12 t d) N2
                (Dmet22 t d) (D12' t d) (D22' t d))
      <- sr Dkof1 D11 Dkof1'.
-ci_sb1 :
   diam
      (kof_case (\t:tp. \x:kof t K3. X2 t x) (\t:tp. \x:kof t K1. Dkof2 t x)
          (kof_in1 Dkof1))
      (reduce_case (\t:tp. \x:kof t K3. X3 t x) (\t:tp. \x:kof t K1. D22 t x)
          reduce_id)
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D12 t x) D11) (s N4)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K3. Dmet23 t d)
          (\t:tp. \d:kof t K1. Dmet22 t d) Dmet21) 
(s N9)
      (reduce_metric_sbeta1 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D22' t x) D11) (D12' T' Dkof1')
      <- employ_sum N8 N2 N9 Dsum1
      <- sum_assoc Dsum2a Dsum2b X1 Dsum22
      <- sum_commute Dsum22 Dsum22'
      <- employ_sum N3 N1 N4 Dsum22'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D22 t d) (D12 t d) N1 (Dmet22 t d) N2
                (Dmet12 t d) (D22' t d) (D12' t d))
      <- sr Dkof1 D11 Dkof1'.
-b2_ci :
   diam
      (kof_case (\t:tp. \x:kof t K1. Dkof2 t x) (\t:tp. \x:kof t K3. X2 t x)
          (kof_in2 Dkof1))
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D12 t x) D11)
      (reduce_case (\t:tp. \x:kof t K1. D23 t x) (\t:tp. \x:kof t K3. X3 t x)
          reduce_id)
      (s N9)
      (reduce_metric_sbeta2 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (s N4)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K1. Dmet23 t d)
          (\t:tp. \d:kof t K3. Dmet22 t d) Dmet21)
      (D12' T' Dkof1') (reduce_sbeta2 (\t:tp. \x:kof t K1. D23' t x) D11)
      <- employ_sum N8 N1 N9 Dsum1
      <- sum_commute Dsum2a Dsum2a'
      <- sum_assoc Dsum2a' Dsum2b X1 Dsum23
      <- sum_commute Dsum23 Dsum23'
      <- employ_sum N3 N2 N4 Dsum23'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D12 t d) (D23 t d) N1 (Dmet12 t d) N2
                (Dmet23 t d) (D12' t d) (D23' t d))
      <- sr Dkof1 D11 Dkof1'.
-ci_sb2 :
   diam
      (kof_case (\t:tp. \x:kof t K1. Dkof2 t x) (\t:tp. \x:kof t K3. X2 t x)
          (kof_in2 Dkof1))
      (reduce_case (\t:tp. \x:kof t K1. D23 t x) (\t:tp. \x:kof t K3. X3 t x)
          reduce_id)
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D12 t x) D11) (s N4)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K1. Dmet23 t d)
          (\t:tp. \d:kof t K3. Dmet22 t d) Dmet21) 
(s N9)
      (reduce_metric_sbeta2 Dsum1 (\t:tp. \d:kof t K1. Dmet12 t d) Dmet11)
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D23' t x) D11) (D12' T' Dkof1')
      <- employ_sum N8 N2 N9 Dsum1
      <- sum_commute Dsum2a Dsum2a'
      <- sum_assoc Dsum2a' Dsum2b X1 Dsum23
      <- sum_commute Dsum23 Dsum23'
      <- employ_sum N3 N1 N4 Dsum23'
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof2 t d) (D23 t d) (D12 t d) N1 (Dmet23 t d) N2
                (Dmet12 t d) (D23' t d) (D12' t d))
      <- sr Dkof1 D11 Dkof1'.
-case :
   diam
      (kof_case (\t:tp. \x:kof t K1. Dkof3 t x) (\t:tp. \x:kof t K3. Dkof2 t x)
          Dkof1)
      (reduce_case (\t:tp. \x:kof t K1. D13 t x) (\t:tp. \x:kof t K3. D12 t x)
          D11)
      (reduce_case (\t:tp. \x:kof t K1. D23 t x) (\t:tp. \x:kof t K3. D22 t x)
          D21)
      (s N11)
      (reduce_metric_case Dsum1b Dsum1a (\t:tp. \d:kof t K1. Dmet13 t d)
          (\t:tp. \d:kof t K3. Dmet12 t d) Dmet11) 
(s N8)
      (reduce_metric_case Dsum2b Dsum2a (\t:tp. \d:kof t K1. Dmet23 t d)
          (\t:tp. \d:kof t K3. Dmet22 t d) Dmet21)
      (reduce_case (\t:tp. \x:kof t K1. D13' t x) (\t:tp. \x:kof t K3. D12' t x)
          D11')
      (reduce_case (\t:tp. \x:kof t K1. D23' t x) (\t:tp. \x:kof t K3. D22' t x)
          D21')
      <- employ_sum N12 N5 N11 Dsum1b
      <- employ_sum N9 N6 N8 Dsum2b
      <- sum_assoc Dsum1a Dsum1b X4 Dsum12
      <- sum_commute Dsum12 Dsum12'
      <- employ_sum N14 N3 N11 Dsum12'
      <- sum_assoc Dsum2a Dsum2b X3 Dsum22
      <- sum_commute Dsum22 Dsum22'
      <- employ_sum N13 N4 N8 Dsum22'
      <- sum_commute Dsum1a Dsum1a'
      <- sum_assoc Dsum1a' Dsum1b X2 Dsum13
      <- sum_commute Dsum13 Dsum13'
      <- employ_sum N10 N1 N11 Dsum13'
      <- sum_commute Dsum2a Dsum2a'
      <- sum_assoc Dsum2a' Dsum2b X1 Dsum23
      <- sum_commute Dsum23 Dsum23'
      <- employ_sum N7 N2 N8 Dsum23'
      <- diam Dkof1 D11 D21 N5 Dmet11 N6 Dmet21 D11' D21'
      <- (Pi t:tp. Pi d:kof t K3.
             diam (Dkof2 t d) (D12 t d) (D22 t d) N3 (Dmet12 t d) N4
                (Dmet22 t d) (D12' t d) (D22' t d))
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof3 t d) (D13 t d) (D23 t d) N1 (Dmet13 t d) N2
                (Dmet23 t d) (D13' t d) (D23' t d)).
-in1 :
   diam (kof_in1 Dkof') (reduce_in1 D1) (reduce_in1 D2) (s N1)
      (reduce_metric_in1 Dmet1) (s N2) (reduce_metric_in1 Dmet2)
      (reduce_in1 D1') (reduce_in1 D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-in2 :
   diam (kof_in2 Dkof') (reduce_in2 D1) (reduce_in2 D2) (s N1)
      (reduce_metric_in2 Dmet1) (s N2) (reduce_metric_in2 Dmet2)
      (reduce_in2 D1') (reduce_in2 D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-rb_rb :
   diam (kof_unroll (kof_roll Dkof')) (reduce_rbeta D1) (reduce_rbeta D2) 
(s N1)
      (reduce_metric_rbeta Dmet1) (s N2) (reduce_metric_rbeta Dmet2) D1' D2'
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-rb_UR :
   diam (kof_unroll (kof_roll Dkof')) (reduce_rbeta D1)
      (reduce_unroll (reduce_roll D2)) (s N1) (reduce_metric_rbeta Dmet1)
      (s (s N2)) (reduce_metric_unroll (reduce_metric_roll Dmet2)) D1'
      (reduce_rbeta D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-UR_rb :
   diam (kof_unroll (kof_roll Dkof')) (reduce_unroll (reduce_roll D1))
      (reduce_rbeta D2) (s (s N1))
      (reduce_metric_unroll (reduce_metric_roll Dmet1)) (s N2)
      (reduce_metric_rbeta Dmet2) (reduce_rbeta D1') D2'
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-rb_Ure :
   diam Dkof (reduce_rbeta D1) (reduce_unroll (reduce_reta D2 X1)) (s N1)
      (reduce_metric_rbeta Dmet1) (s (s N2))
      (reduce_metric_unroll (reduce_metric_reta Dmet2)) D1' (reduce_rbeta D2')
      <- diam Dkof (reduce_rbeta D1) (reduce_unroll D2) (s N1)
            (reduce_metric_rbeta Dmet1) (s N2) (reduce_metric_unroll Dmet2) D1'
            D2'.
-Ure_rb :
   diam Dkof (reduce_unroll (reduce_reta D1 X1)) (reduce_rbeta D2) (s (s N1))
      (reduce_metric_unroll (reduce_metric_reta Dmet1)) (s N2)
      (reduce_metric_rbeta Dmet2) (reduce_rbeta D1') D2'
      <- diam Dkof (reduce_unroll D1) (reduce_rbeta D2) (s N1)
            (reduce_metric_unroll Dmet1) (s N2) (reduce_metric_rbeta Dmet2) D1'
            D2'.
-rb_Ui :
   diam Dkof (reduce_rbeta D1) (reduce_unroll reduce_id) N1 X1 N2 X2 reduce_id
      (reduce_rbeta D1).
-Ui_rb :
   diam Dkof (reduce_unroll reduce_id) (reduce_rbeta D1) N1 X1 N2 X2
      (reduce_rbeta D1) reduce_id.
-U_U :
   diam (kof_unroll Dkof') (reduce_unroll D1) (reduce_unroll D2) (s N1)
      (reduce_metric_unroll Dmet1) (s N2) (reduce_metric_unroll Dmet2)
      (reduce_unroll D1') (reduce_unroll D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-R_R :
   diam (kof_roll Dkof') (reduce_roll D1) (reduce_roll D2) (s N1)
      (reduce_metric_roll Dmet1) (s N2) (reduce_metric_roll Dmet2)
      (reduce_roll D1') (reduce_roll D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-eteq :
   diam (kof_seteq Dkof') (reduce_seteq D1) (reduce_seteq D2) (s N1)
      (reduce_metric_seteq Dmet1) (s N2) (reduce_metric_seteq Dmet2)
      (reduce_seteq D1') (reduce_seteq D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-prod :
   diam (kof_prod Dkof2 Dkof1) (reduce_prod D12 D11) (reduce_prod D22 D21)
      (s N6) (reduce_metric_prod Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_prod Dsum2 Dmet22 Dmet21) (reduce_prod D12' D11')
      (reduce_prod D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-exp :
   diam (kof_exp Dkof2 Dkof1) (reduce_exp D12 D11) (reduce_exp D22 D21) (s N6)
      (reduce_metric_exp Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_exp Dsum2 Dmet22 Dmet21) (reduce_exp D12' D11')
      (reduce_exp D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-code :
   diam (kof_code Drtpok) (reduce_code D1) (reduce_code D2) (s N1)
      (reduce_metric_code Dmet1) (s N2) (reduce_metric_code Dmet2)
      (reduce_code D1') (reduce_code D2')
      <- diamr Drtpok D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-arrow :
   diam (kof_arrow Drtpok) (reduce_arrow D1) (reduce_arrow D2) (s N1)
      (reduce_metric_arrow Dmet1) (s N2) (reduce_metric_arrow Dmet2)
      (reduce_arrow D1') (reduce_arrow D2')
      <- diamr Drtpok D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-cbox :
   diam (kof_cbox Dkof2 Dkof1) (reduce_cbox D12 D11) (reduce_cbox D22 D21)
      (s N6) (reduce_metric_cbox Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_cbox Dsum2 Dmet22 Dmet21) (reduce_cbox D12' D11')
      (reduce_cbox D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-cmbox :
   diam (kof_cmbox Dkof2 Dkof1) (reduce_cmbox D12 D11) (reduce_cmbox D22 D21)
      (s N6) (reduce_metric_cmbox Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_cmbox Dsum2 Dmet22 Dmet21) (reduce_cmbox D12' D11')
      (reduce_cmbox D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-ptr :
   diam (kof_sptr Dkof') (reduce_sptr D1) (reduce_sptr D2) (s N1)
      (reduce_metric_sptr Dmet1) (s N2) (reduce_metric_sptr Dmet2)
      (reduce_sptr D1') (reduce_sptr D2')
      <- diam Dkof' D1 D2 N1 Dmet1 N2 Dmet2 D1' D2'.
-forall :
   diam (kof_forall (\t:tp. \x:kof t K1. Dkof' t x) Dpon)
      (reduce_forall D12 (\t:tp. \x:kof t K1. D11 t x))
      (reduce_forall D22 (\t:tp. \x:kof t K1. D21 t x)) (s N6)
      (reduce_metric_forall Dsum1 Dmet12 (\t:tp. \d:kof t K1. Dmet11 t d))
      (s N5)
      (reduce_metric_forall Dsum2 Dmet22 (\t:tp. \d:kof t K1. Dmet21 t d))
      (reduce_forall D12' (\t:tp. \x:kof t K1. D11' t x))
      (reduce_forall D22' (\t:tp. \x:kof t K1. D21' t x))
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof' t d) (D11 t d) (D21 t d) N3 (Dmet11 t d) N4
                (Dmet21 t d) (D11' t d) (D21' t d))
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-exists :
   diam (kof_exists (\t:tp. \x:kof t K1. Dkof' t x) Dpon)
      (reduce_exists D12 (\t:tp. \x:kof t K1. D11 t x))
      (reduce_exists D22 (\t:tp. \x:kof t K1. D21 t x)) (s N6)
      (reduce_metric_exists Dsum1 Dmet12 (\t:tp. \d:kof t K1. Dmet11 t d))
      (s N5)
      (reduce_metric_exists Dsum2 Dmet22 (\t:tp. \d:kof t K1. Dmet21 t d))
      (reduce_exists D12' (\t:tp. \x:kof t K1. D11' t x))
      (reduce_exists D22' (\t:tp. \x:kof t K1. D21' t x))
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- (Pi t:tp. Pi d:kof t K1.
             diam (Dkof' t d) (D11 t d) (D21 t d) N3 (Dmet11 t d) N4
                (Dmet21 t d) (D11' t d) (D21' t d))
      <- diampr Dpon D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-guard :
   diam (kof_guard Dkof2 Dpropok) (reduce_guard D12 D11) (reduce_guard D22 D21)
      (s N6) (reduce_metric_guard Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_guard Dsum2 Dmet22 Dmet21) (reduce_guard D12' D11')
      (reduce_guard D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diamp Dpropok D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-assert :
   diam (kof_assert Dkof2 Dpropok) (reduce_assert D12 D11)
      (reduce_assert D22 D21) (s N6) (reduce_metric_assert Dsum1 Dmet12 Dmet11)
      (s N5) (reduce_metric_assert Dsum2 Dmet22 Dmet21)
      (reduce_assert D12' D11') (reduce_assert D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diamp Dpropok D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-rec :
   diam (kof_rec (\t:tp. \x:kof t kt. Dkof' t x))
      (reduce_rec (\t:tp. \x:kof t kt. D1 t x))
      (reduce_rec (\t:tp. \x:kof t kt. D2 t x)) (s N1)
      (reduce_metric_rec (\t:tp. \d:kof t kt. Dmet1 t d)) (s N2)
      (reduce_metric_rec (\t:tp. \d:kof t kt. Dmet2 t d))
      (reduce_rec (\t:tp. \x:kof t kt. D1' t x))
      (reduce_rec (\t:tp. \x:kof t kt. D2' t x))
      <- (Pi t:tp. Pi d:kof t kt.
             diam (Dkof' t d) (D1 t d) (D2 t d) N1 (Dmet1 t d) N2 (Dmet2 t d)
                (D1' t d) (D2' t d)).
-meet :
   diam (kof_meet Dkof2 Dkof1) (reduce_meet D12 D11) (reduce_meet D22 D21)
      (s N6) (reduce_metric_meet Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_meet Dsum2 Dmet22 Dmet21) (reduce_meet D12' D11')
      (reduce_meet D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-join :
   diam (kof_join Dkof2 Dkof1) (reduce_join D12 D11) (reduce_join D22 D21)
      (s N6) (reduce_metric_join Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_join Dsum2 Dmet22 Dmet21) (reduce_join D12' D11')
      (reduce_join D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-numadd :
   diam (kof_numadd Dkof2 Dkof1) (reduce_numadd D12 D11) (reduce_numadd D22 D21)
      (s N6) (reduce_metric_numadd Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_numadd Dsum2 Dmet22 Dmet21) (reduce_numadd D12' D11')
      (reduce_numadd D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-nummul :
   diam (kof_nummul Dkof2 Dkof1) (reduce_nummul D12 D11) (reduce_nummul D22 D21)
      (s N6) (reduce_metric_nummul Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_nummul Dsum2 Dmet22 Dmet21) (reduce_nummul D12' D11')
      (reduce_nummul D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-nil : diamr* X1 reducer_nil reducer_nil N1 X2 N2 X3 reducer_nil reducer_nil.
-cons :
   diamr* (rtpok_cons Drtpok Dkof) (reducer_cons D12 D11) (reducer_cons D22 D21)
      (s N7) (reduce_metric_cons Dsum1 Dmet12 Dmet11) (s N6)
      (reduce_metric_cons Dsum2 Dmet22 Dmet21) (reducer_cons D12' D11')
      (reducer_cons D22' D21')
      <- employ_sum N4 N2 N7 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N2 N4 N7 Dsum1'
      <- employ_sum N5 N3 N6 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N3 N5 N6 Dsum2'
      <- diam Dkof D11 D21 N4 Dmet11 N5 Dmet21 D11' D21'
      <- diamr* Drtpok D12 D22 N2 Dmet12 N3 Dmet22 D12' D22'.
- :
   diamr (rtpok_ Drtpok Dkof) (reducer_ D12 D11) (reducer_ D22 D21) (s N6)
      (reduce_metric_reducer_ Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_reducer_ Dsum2 Dmet22 Dmet21) (reducer_ D12' D11')
      (reducer_ D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diamr* Drtpok D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-numeq :
   diamp (propok_numeq Dkof2 Dkof1) (reducep_numeq D12 D11)
      (reducep_numeq D22 D21) (s N6) (reduce_metric_numeq Dsum1 Dmet12 Dmet11)
      (s N5) (reduce_metric_numeq Dsum2 Dmet22 Dmet21) (reducep_numeq D12' D11')
      (reducep_numeq D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-numleq :
   diamp (propok_numleq Dkof2 Dkof1) (reducep_numleq D12 D11)
      (reducep_numleq D22 D21) (s N6) (reduce_metric_numleq Dsum1 Dmet12 Dmet11)
      (s N5) (reduce_metric_numleq Dsum2 Dmet22 Dmet21)
      (reducep_numleq D12' D11') (reducep_numleq D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-loclt :
   diamp (propok_loclt Dkof2 Dkof1) (reducep_loclt D12 D11)
      (reducep_loclt D22 D21) (s N6) (reduce_metric_loclt Dsum1 Dmet12 Dmet11)
      (s N5) (reduce_metric_loclt Dsum2 Dmet22 Dmet21) (reducep_loclt D12' D11')
      (reducep_loclt D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diam Dkof1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diam Dkof2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-goodloc :
   diamp (propok_goodloc Dkof1) (reducep_goodloc D1) (reducep_goodloc D2) 
(s N1)
      (reduce_metric_goodloc DM1) (s N2) (reduce_metric_goodloc DM2)
      (reducep_goodloc D1') (reducep_goodloc D2')
      <- diam Dkof1 D1 D2 N1 DM1 N2 DM2 D1' D2'.
-impl :
   diamp (propok_impl Dpropok2 Dpropok1) (reducep_impl D12 D11)
      (reducep_impl D22 D21) (s N6) (reduce_metric_impl Dsum1 Dmet12 Dmet11)
      (s N5) (reduce_metric_impl Dsum2 Dmet22 Dmet21) (reducep_impl D12' D11')
      (reducep_impl D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diamp Dpropok1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diamp Dpropok2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-and :
   diamp (propok_and Dpropok2 Dpropok1) (reducep_and D12 D11)
      (reducep_and D22 D21) (s N6) (reduce_metric_and Dsum1 Dmet12 Dmet11)
      (s N5) (reduce_metric_and Dsum2 Dmet22 Dmet21) (reducep_and D12' D11')
      (reducep_and D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diamp Dpropok1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diamp Dpropok2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-or :
   diamp (propok_or Dpropok2 Dpropok1) (reducep_or D12 D11) (reducep_or D22 D21)
      (s N6) (reduce_metric_or Dsum1 Dmet12 Dmet11) (s N5)
      (reduce_metric_or Dsum2 Dmet22 Dmet21) (reducep_or D12' D11')
      (reducep_or D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- employ_sum N1 N3 N6 Dsum1'
      <- employ_sum N4 N2 N5 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- employ_sum N2 N4 N5 Dsum2'
      <- diamp Dpropok1 D11 D21 N3 Dmet11 N4 Dmet21 D11' D21'
      <- diamp Dpropok2 D12 D22 N1 Dmet12 N2 Dmet22 D12' D22'.
-false :
   diamp X1 reducep_false reducep_false N1 X2 N2 X3 reducep_false reducep_false.
-i* : diampr X1 reducepr_id D N1 X2 N2 X3 D reducepr_id.
-*i : diampr X1 D reducepr_id N1 X2 N2 X3 reducepr_id D.
-tn :
   diampr (pon_tn Dkof) (reducepr_tn D1) (reducepr_tn D2) (s N1)
      (reduce_metricpr_tn DM1) (s N2) (reduce_metricpr_tn DM2) (reducepr_tn D1')
      (reducepr_tn D2')
      <- diam Dkof D1 D2 N1 DM1 N2 DM2 D1' D2'.
-arrow :
   diampr (pon_arrow Dpon2 Dpon1) (reducepr_arrow D12 D11)
      (reducepr_arrow D22 D21) (s N6) (reduce_metricpr_arrow Dsum1 DM12 DM11)
      (s N5) (reduce_metricpr_arrow Dsum2 DM22 DM21) (reducepr_arrow D12' D11')
      (reducepr_arrow D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- diampr Dpon1 D11 D21 N3 DM11 N4 DM21 D11' D21'
      <- diampr Dpon2 D12 D22 N1 DM12 N2 DM22 D12' D22'.
-prod :
   diampr (pon_prod Dpon2 Dpon1) (reducepr_prod D12 D11) (reducepr_prod D22 D21)
      (s N6) (reduce_metricpr_prod Dsum1 DM12 DM11) (s N5)
      (reduce_metricpr_prod Dsum2 DM22 DM21) (reducepr_prod D12' D11')
      (reducepr_prod D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- diampr Dpon1 D11 D21 N3 DM11 N4 DM21 D11' D21'
      <- diampr Dpon2 D12 D22 N1 DM12 N2 DM22 D12' D22'.
-forall :
   diampr (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D1 k r x))
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D2 k r x)) (s N1)
      (reduce_metricpr_forall (\k:kind. \r:pred. \d:pon r k. DM1 k r d)) (s N2)
      (reduce_metricpr_forall (\k:kind. \r:pred. \d:pon r k. DM2 k r d))
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D2' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             diampr (Dpon k r d) (D1 k r d) (D2 k r d) N1 (DM1 k r d) N2
                (DM2 k r d) (D1' k r d) (D2' k r d)).
-um :
   diampr (pon_sum Dpon2 Dpon1) (reducepr_sum D12 D11) (reducepr_sum D22 D21)
      (s N6) (reduce_metricpr_sum Dsum1 DM12 DM11) (s N5)
      (reduce_metricpr_sum Dsum2 DM22 DM21) (reducepr_sum D12' D11')
      (reducepr_sum D22' D21')
      <- employ_sum N3 N1 N6 Dsum1
      <- employ_sum' N3 N1 N6 Dsum1
      <- employ_sum N4 N2 N5 Dsum2
      <- employ_sum' N4 N2 N5 Dsum2
      <- diampr Dpon1 D11 D21 N3 DM11 N4 DM21 D11' D21'
      <- diampr Dpon2 D12 D22 N1 DM12 N2 DM22 D12' D22'.
-rec :
   diampr (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D1 k r x))
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D2 k r x)) (s N1)
      (reduce_metricpr_rec (\k:kind. \r:pred. \d:pon r k. DM1 k r d)) (s N2)
      (reduce_metricpr_rec (\k:kind. \r:pred. \d:pon r k. DM2 k r d))
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D1' k r x))
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D2' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             diampr (Dpon k r d) (D1 k r d) (D2 k r d) N1 (DM1 k r d) N2
                (DM2 k r d) (D1' k r d) (D2' k r d)).
diamond :
   Pi T':tp. Pi K1:kind. Pi T1:tp. Pi T2:tp. Pi T':tp.
      kof T' K1 -> reduce T' T1 -> reduce T' T2 -> reduce T1 T' -> reduce T2 T'
         -> type.
- :
   diamond Dkof D1 D2 D1' D2'
      <- can_reduce_metric D1 DM1
      <- can_reduce_metric D2 DM2
      <- diam Dkof D1 D2 N1 DM1 N2 DM2 D1' D2'.
half_confluence :
   Pi T':tp. Pi K1:kind. Pi T1:tp. Pi T2:tp. Pi T':tp.
      kof T' K1 -> reduce T' T1 -> mreduce T' T2 -> mreduce T1 T'
         -> reduce T2 T' -> type.
-id : half_confluence X1 D mreduce_id mreduce_id D.
-tep :
   half_confluence Dkof D1 (mreduce_step D2trans D2) (mreduce_step D1trans D1')
      D2''
      <- diamond Dkof D1 D2 D1' D2'
      <- sr Dkof D2 Dkof2'
      <- half_confluence Dkof2' D2' D2trans D1trans D2''.
confluence :
   Pi T':tp. Pi K1:kind. Pi T1:tp. Pi T2:tp. Pi T':tp.
      kof T' K1 -> mreduce T' T1 -> mreduce T' T2 -> mreduce T1 T'
         -> mreduce T2 T' -> type.
-id : confluence X1 mreduce_id D D mreduce_id.
-tep :
   confluence Dkof (mreduce_step D1trans D1) D2 D1'' (mreduce_step D2trans D2')
      <- half_confluence Dkof D1 D2 D1' D2'
      <- sr Dkof D1 Dkof'
      <- confluence Dkof' D1trans D1' D1'' D2trans.
reduce_is_equiv :
   Pi T1:tp. Pi K1:kind. Pi T2:tp.
      kof T1 K1 -> reduce T1 T2 -> equiv T1 T2 -> type.
reduce_is_equivr :
   Pi G1:rtp. Pi G2:rtp. rtpok G1 -> reducer G1 G2 -> equivr G1 G2 -> type.
reduce_is_equivr* :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1.
      rtpok* G1 -> reducer* G1 G2 -> equivr* G1 G2 -> type.
reduce_is_equivp :
   Pi P1:prop. Pi P2:prop. propok P1 -> reducep P1 P2 -> equivp P1 P2 -> type.
reduce_is_equivpr :
   Pi R1:pred. Pi K1:kind. Pi R2:pred.
      pon R1 K1 -> reducepr R1 R2 -> equivpr R1 R2 -> type.
-id : reduce_is_equiv X1 reduce_id equiv_reflex.
-annbet :
   reduce_is_equiv (kof_annot Dkof X1) (reduce_annbeta D)
      (equiv_trans D' equiv_annbeta)
      <- reduce_is_equiv Dkof D D'.
-beta :
   reduce_is_equiv (kof_app Dkof2 (kof_lam (\t:tp. \x:kof t K1. Dkof1 t x)))
      (reduce_beta D2 (\t:tp. \x:kof t K1. D1 t x))
      (equiv_trans equiv_beta
          (equiv_app D2' (equiv_lam (\t:tp. \x:kof t K1. D1' t x))))
      <- (Pi t:tp. Pi d:kof t K1. reduce_is_equiv (Dkof1 t d) (D1 t d) (D1' t d))
      <- reduce_is_equiv Dkof2 D2 D2'.
-eta :
   reduce_is_equiv Dkof (reduce_eta D Dkof_eta)
      (equiv_trans
          (equiv_symm (kof_lam (\t:tp. \d:kof t SK1. kof_app d Dkof''))
              equiv_eta) D')
      <- reduce_is_equiv Dkof D D'
      <- sr Dkof D Dkof'
      <- kof_fun Dkof Dkof_eta Deq
      <- kof_resp tp_eq_ Deq Dkof' Dkof''.
-pbeta1 :
   reduce_is_equiv (kof_pi1 (kof_pair Dkof2 Dkof1)) (reduce_pbeta1 D)
      (equiv_trans equiv_pbeta1 (equiv_pi1 (equiv_pair equiv_reflex D')))
      <- reduce_is_equiv Dkof1 D D'
      <- sr Dkof1 D Dkof1'.
-pbeta2 :
   reduce_is_equiv (kof_pi2 (kof_pair Dkof2 Dkof1)) (reduce_pbeta2 D)
      (equiv_trans equiv_pbeta2 (equiv_pi2 (equiv_pair D' equiv_reflex)))
      <- reduce_is_equiv Dkof2 D D'
      <- sr Dkof2 D Dkof2'.
-peta :
   reduce_is_equiv Dkof (reduce_peta D Dkof_eta)
      (equiv_trans
          (equiv_symm (kof_pair (kof_pi2 Dkof'') (kof_pi1 Dkof'')) equiv_peta)
          D')
      <- reduce_is_equiv Dkof D D'
      <- sr Dkof D Dkof'
      <- kof_fun Dkof Dkof_eta Deq
      <- kof_resp tp_eq_ Deq Dkof' Dkof''.
-kbeta :
   reduce_is_equiv
      (kof_kapp (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof1 k r x)) Dpon)
      (reduce_kbeta D2 (\k:kind. \r:pred. \x:pon r k. D k r x))
      (equiv_trans equiv_kbeta
          (equiv_kapp D2' (equiv_klam (\k:kind. \r:pred. \x:pon r k. D' k r x))))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             reduce_is_equiv (Dkof1 k r d) (D k r d) (D' k r d))
      <- reduce_is_equivpr Dpon D2 D2'.
-keta :
   reduce_is_equiv Dkof (reduce_keta D Dkof_eta)
      (equiv_trans
          (equiv_symm
              (kof_klam (\k:kind. \r:pred. \d:pon r k. kof_kapp Dkof'' d))
              equiv_keta) D')
      <- reduce_is_equiv Dkof D D'
      <- sr Dkof D Dkof'
      <- kof_fun Dkof Dkof_eta Deq
      <- kof_resp tp_eq_ Deq Dkof' Dkof''.
-beta1 :
   reduce_is_equiv
      (kof_case (\t:tp. \x:kof t K3. X1 t x) (\t:tp. \x:kof t K1. Dkof2 t x)
          (kof_in1 Dkof1))
      (reduce_sbeta1 (\t:tp. \x:kof t K1. D2 t x) D1)
      (equiv_trans equiv_sbeta1
          (equiv_case (\t:tp. \d:kof t K3. equiv_reflex)
              (\t:tp. \x:kof t K1. D2' t x) (equiv_in1 D1')))
      <- reduce_is_equiv Dkof1 D1 D1'
      <- (Pi t:tp. Pi d:kof t K1. reduce_is_equiv (Dkof2 t d) (D2 t d) (D2' t d)).
-beta2 :
   reduce_is_equiv
      (kof_case (\t:tp. \x:kof t K1. Dkof2 t x) (\t:tp. \x:kof t K3. X1 t x)
          (kof_in2 Dkof1))
      (reduce_sbeta2 (\t:tp. \x:kof t K1. D2 t x) D1)
      (equiv_trans equiv_sbeta2
          (equiv_case (\t:tp. \x:kof t K1. D2' t x)
              (\t:tp. \d:kof t K3. equiv_reflex) (equiv_in2 D1')))
      <- reduce_is_equiv Dkof1 D1 D1'
      <- (Pi t:tp. Pi d:kof t K1. reduce_is_equiv (Dkof2 t d) (D2 t d) (D2' t d)).
-rbeta :
   reduce_is_equiv (kof_unroll (kof_roll Dkof')) (reduce_rbeta D)
      (equiv_trans D' equiv_rbeta)
      <- reduce_is_equiv Dkof' D D'.
-reta :
   reduce_is_equiv Dkof (reduce_reta D Dkof_eta)
      (equiv_trans
          (equiv_symm (kof_roll (kof_unroll Dkof'')) (equiv_reta Dkof'')) D')
      <- reduce_is_equiv Dkof D D'
      <- kof_fun Dkof Dkof_eta Deq
      <- kof_resp tp_eq_ Deq Dkof Dkof'
      <- sr Dkof' D Dkof''.
-annot :
   reduce_is_equiv (kof_annot Dkof Dpon) (reduce_annot D2 D)
      (equiv_annot D2' D')
      <- reduce_is_equiv Dkof D D'
      <- reduce_is_equivpr Dpon D2 D2'.
-lam :
   reduce_is_equiv (kof_lam (\t:tp. \x:kof t K1. Dkof' t x))
      (reduce_lam (\t:tp. \x:kof t K1. D t x))
      (equiv_lam (\t:tp. \x:kof t K1. D' t x))
      <- (Pi t:tp. Pi d:kof t K1. reduce_is_equiv (Dkof' t d) (D t d) (D' t d)).
-app :
   reduce_is_equiv (kof_app Dkof2 Dkof1) (reduce_app D2 D1) (equiv_app D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-pair :
   reduce_is_equiv (kof_pair Dkof2 Dkof1) (reduce_pair D2 D1)
      (equiv_pair D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-pi1 :
   reduce_is_equiv (kof_pi1 Dkof1) (reduce_pi1 D) (equiv_pi1 D')
      <- reduce_is_equiv Dkof1 D D'.
-pi2 :
   reduce_is_equiv (kof_pi2 Dkof1) (reduce_pi2 D) (equiv_pi2 D')
      <- reduce_is_equiv Dkof1 D D'.
-klam :
   reduce_is_equiv (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof1 k r x))
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (equiv_klam (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             reduce_is_equiv (Dkof1 k r d) (D k r d) (D' k r d)).
-kapp :
   reduce_is_equiv (kof_kapp Dkof1 Dpon) (reduce_kapp D2 D) (equiv_kapp D2' D')
      <- reduce_is_equiv Dkof1 D D'
      <- reduce_is_equivpr Dpon D2 D2'.
-in1 :
   reduce_is_equiv (kof_in1 Dkof') (reduce_in1 D) (equiv_in1 D')
      <- reduce_is_equiv Dkof' D D'.
-in2 :
   reduce_is_equiv (kof_in2 Dkof') (reduce_in2 D) (equiv_in2 D')
      <- reduce_is_equiv Dkof' D D'.
-case :
   reduce_is_equiv
      (kof_case (\t:tp. \x:kof t K1. Dkof2 t x) (\t:tp. \x:kof t K3. Dkof1 t x)
          Dkof')
      (reduce_case (\t:tp. \x:kof t K1. D2 t x) (\t:tp. \x:kof t K3. D1 t x) D)
      (equiv_case (\t:tp. \x:kof t K1. D2' t x) (\t:tp. \x:kof t K3. D1' t x) D')
      <- reduce_is_equiv Dkof' D D'
      <- (Pi t:tp. Pi d:kof t K3. reduce_is_equiv (Dkof1 t d) (D1 t d) (D1' t d))
      <- (Pi t:tp. Pi d:kof t K1. reduce_is_equiv (Dkof2 t d) (D2 t d) (D2' t d)).
-roll :
   reduce_is_equiv (kof_roll Dkof') (reduce_roll D) (equiv_roll D')
      <- reduce_is_equiv Dkof' D D'.
-unroll :
   reduce_is_equiv (kof_unroll Dkof') (reduce_unroll D) (equiv_unroll D')
      <- reduce_is_equiv Dkof' D D'.
-eteq :
   reduce_is_equiv (kof_seteq Dkof') (reduce_seteq D) (equiv_seteq D')
      <- reduce_is_equiv Dkof' D D'.
-prod :
   reduce_is_equiv (kof_prod Dkof2 Dkof1) (reduce_prod D2 D1)
      (equiv_prod D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-exp :
   reduce_is_equiv (kof_exp Dkof2 Dkof1) (reduce_exp D2 D1) (equiv_exp D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-code :
   reduce_is_equiv (kof_code Drtpok) (reduce_code D) (equiv_code D')
      <- reduce_is_equivr Drtpok D D'.
-arrow :
   reduce_is_equiv (kof_arrow Drtpok) (reduce_arrow D) (equiv_arrow D')
      <- reduce_is_equivr Drtpok D D'.
-cbox :
   reduce_is_equiv (kof_cbox Dkof2 Dkof1) (reduce_cbox D2 D1)
      (equiv_cbox D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-cmbox :
   reduce_is_equiv (kof_cmbox Dkof2 Dkof1) (reduce_cmbox D2 D1)
      (equiv_cmbox D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-ptr :
   reduce_is_equiv (kof_sptr Dkof') (reduce_sptr D) (equiv_sptr D')
      <- reduce_is_equiv Dkof' D D'.
-forall :
   reduce_is_equiv (kof_forall (\t:tp. \x:kof t K1. Dkof' t x) Dpon)
      (reduce_forall D2 (\t:tp. \x:kof t K1. D t x))
      (equiv_forall D2' (\t:tp. \x:kof t K1. D' t x))
      <- (Pi t:tp. Pi d:kof t K1. reduce_is_equiv (Dkof' t d) (D t d) (D' t d))
      <- reduce_is_equivpr Dpon D2 D2'.
-exists :
   reduce_is_equiv (kof_exists (\t:tp. \x:kof t K1. Dkof' t x) Dpon)
      (reduce_exists D2 (\t:tp. \x:kof t K1. D t x))
      (equiv_exists D2' (\t:tp. \x:kof t K1. D' t x))
      <- (Pi t:tp. Pi d:kof t K1. reduce_is_equiv (Dkof' t d) (D t d) (D' t d))
      <- reduce_is_equivpr Dpon D2 D2'.
-guard :
   reduce_is_equiv (kof_guard Dkof2 Dpropok1) (reduce_guard D2 D1)
      (equiv_guard D2' D1')
      <- reduce_is_equivp Dpropok1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-assert :
   reduce_is_equiv (kof_assert Dkof2 Dpropok1) (reduce_assert D2 D1)
      (equiv_assert D2' D1')
      <- reduce_is_equivp Dpropok1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-rec :
   reduce_is_equiv (kof_rec (\t:tp. \x:kof t kt. Dkof' t x))
      (reduce_rec (\t:tp. \x:kof t kt. D t x))
      (equiv_rec (\t:tp. \x:kof t kt. D' t x))
      <- (Pi t:tp. Pi d:kof t kt. reduce_is_equiv (Dkof' t d) (D t d) (D' t d)).
-meet :
   reduce_is_equiv (kof_meet Dkof2 Dkof1) (reduce_meet D2 D1)
      (equiv_meet D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-join :
   reduce_is_equiv (kof_join Dkof2 Dkof1) (reduce_join D2 D1)
      (equiv_join D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-numadd :
   reduce_is_equiv (kof_numadd Dkof2 Dkof1) (reduce_numadd D2 D1)
      (equiv_numadd D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-nummul :
   reduce_is_equiv (kof_nummul Dkof2 Dkof1) (reduce_nummul D2 D1)
      (equiv_nummul D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-nil : reduce_is_equivr* X1 reducer_nil equivr_nil.
-cons :
   reduce_is_equivr* (rtpok_cons Drtpok Dkof) (reducer_cons D2 D1)
      (equivr_cons D2' D1')
      <- reduce_is_equiv Dkof D1 D1'
      <- reduce_is_equivr* Drtpok D2 D2'.
- :
   reduce_is_equivr (rtpok_ Drtpok Dkof) (reducer_ D2 D1) (equivr_ D2' D1')
      <- reduce_is_equiv Dkof D1 D1'
      <- reduce_is_equivr* Drtpok D2 D2'.
-numeq :
   reduce_is_equivp (propok_numeq Dkof2 Dkof1) (reducep_numeq D2 D1)
      (equivp_numeq D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-numleq :
   reduce_is_equivp (propok_numleq Dkof2 Dkof1) (reducep_numleq D2 D1)
      (equivp_numleq D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-loclt :
   reduce_is_equivp (propok_loclt Dkof2 Dkof1) (reducep_loclt D2 D1)
      (equivp_loclt D2' D1')
      <- reduce_is_equiv Dkof1 D1 D1'
      <- reduce_is_equiv Dkof2 D2 D2'.
-goodlc :
   reduce_is_equivp (propok_goodloc Dkof1) (reducep_goodloc D1)
      (equivp_goodloc D1')
      <- reduce_is_equiv Dkof1 D1 D1'.
-impl :
   reduce_is_equivp (propok_impl Dpropok2 Dpropok1) (reducep_impl D2 D1)
      (equivp_impl D2' D1')
      <- reduce_is_equivp Dpropok1 D1 D1'
      <- reduce_is_equivp Dpropok2 D2 D2'.
-and :
   reduce_is_equivp (propok_and Dpropok2 Dpropok1) (reducep_and D2 D1)
      (equivp_and D2' D1')
      <- reduce_is_equivp Dpropok1 D1 D1'
      <- reduce_is_equivp Dpropok2 D2 D2'.
-or :
   reduce_is_equivp (propok_or Dpropok2 Dpropok1) (reducep_or D2 D1)
      (equivp_or D2' D1')
      <- reduce_is_equivp Dpropok1 D1 D1'
      <- reduce_is_equivp Dpropok2 D2 D2'.
-false : reduce_is_equivp X1 reducep_false equivp_reflex.
-id : reduce_is_equivpr X1 reducepr_id equivpr_reflex.
-tn :
   reduce_is_equivpr (pon_tn Dkof) (reducepr_tn D) (equivpr_tn D')
      <- reduce_is_equiv Dkof D D'.
-arrow :
   reduce_is_equivpr (pon_arrow Dpon2 Dpon1) (reducepr_arrow D2 D1)
      (equivpr_arrow D2' D1')
      <- reduce_is_equivpr Dpon1 D1 D1'
      <- reduce_is_equivpr Dpon2 D2 D2'.
-prod :
   reduce_is_equivpr (pon_prod Dpon2 Dpon1) (reducepr_prod D2 D1)
      (equivpr_prod D2' D1')
      <- reduce_is_equivpr Dpon1 D1 D1'
      <- reduce_is_equivpr Dpon2 D2 D2'.
-forall :
   reduce_is_equivpr (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D k r x))
      (equivpr_forall (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             reduce_is_equivpr (Dpon k r d) (D k r d) (D' k r d)).
-um :
   reduce_is_equivpr (pon_sum Dpon2 Dpon1) (reducepr_sum D2 D1)
      (equivpr_sum D2' D1')
      <- reduce_is_equivpr Dpon1 D1 D1'
      <- reduce_is_equivpr Dpon2 D2 D2'.
-rec :
   reduce_is_equivpr (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D k r x))
      (equivpr_rec (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             reduce_is_equivpr (Dpon k r d) (D k r d) (D' k r d)).
mreduce_is_equiv :
   Pi T1:tp. Pi K:kind. Pi T2:tp.
      kof T1 K -> mreduce T1 T2 -> equiv T1 T2 -> type.
mreduce_is_equiv_id : mreduce_is_equiv X1 mreduce_id equiv_reflex.
mreduce_is_equiv_step :
   mreduce_is_equiv Dkof (mreduce_step D23 D12) (equiv_trans D23' D12')
      <- reduce_is_equiv Dkof D12 D12'
      <- sr Dkof D12 Dkof'
      <- mreduce_is_equiv Dkof' D23 D23'.
mreduce_trans :
   Pi T1:tp. Pi T2:tp. Pi T3:tp.
      mreduce T1 T2 -> mreduce T2 T3 -> mreduce T1 T3 -> type.
mreduce_trans_id : mreduce_trans mreduce_id D D.
mreduce_trans_step :
   mreduce_trans (mreduce_step D1 D) D2 (mreduce_step D3 D)
      <- mreduce_trans D1 D2 D3.
mreducer_trans :
   Pi T1:rtp. Pi T2:rtp. Pi T3:rtp.
      mreducer T1 T2 -> mreducer T2 T3 -> mreducer T1 T3 -> type.
mreducer_trans_id : mreducer_trans mreducer_id D D.
mreducer_trans_step :
   mreducer_trans (mreducer_step D1 D) D2 (mreducer_step D3 D)
      <- mreducer_trans D1 D2 D3.
mreducer_trans* :
   Pi N1:nat. Pi T1:rtp* N1. Pi T2:rtp* N1. Pi T3:rtp* N1.
      mreducer* T1 T2 -> mreducer* T2 T3 -> mreducer* T1 T3 -> type.
mreducer_trans*_id : mreducer_trans* mreducer*_id D D.
mreducer_trans*_step :
   mreducer_trans* (mreducer*_step D1 D) D2 (mreducer*_step D3 D)
      <- mreducer_trans* D1 D2 D3.
mreducep_trans :
   Pi P1:prop. Pi P2:prop. Pi P3:prop.
      mreducep P1 P2 -> mreducep P2 P3 -> mreducep P1 P3 -> type.
-id : mreducep_trans mreducep_id D D.
-tep :
   mreducep_trans (mreducep_step D1 D) D2 (mreducep_step D3 D)
      <- mreducep_trans D1 D2 D3.
mreducepr_trans :
   Pi P1:pred. Pi P2:pred. Pi P3:pred.
      mreducepr P1 P2 -> mreducepr P2 P3 -> mreducepr P1 P3 -> type.
-id : mreducepr_trans mreducepr_id D D.
-tep :
   mreducepr_trans (mreducepr_step D1 D) D2 (mreducepr_step D3 D)
      <- mreducepr_trans D1 D2 D3.
reducer_reflex : Pi G:rtp. reducer G G -> type.
reducer_reflex* : Pi N:nat. Pi G:rtp* N. reducer* G G -> type.
reducer_reflex_nil : reducer_reflex* rtnil reducer_nil.
reducer_reflex_cons :
   reducer_reflex* (rtcons T1 G) (reducer_cons D reduce_id)
      <- reducer_reflex* G D.
reducer_reflex_ :
   reducer_reflex (rt T1 G) (reducer_ D reduce_id) <- reducer_reflex* G D.
reducep_reflex : Pi P:prop. reducep P P -> type.
-numeq : reducep_reflex (pnumeq T1 T2) (reducep_numeq reduce_id reduce_id).
-numleq : reducep_reflex (pnumleq T1 T2) (reducep_numleq reduce_id reduce_id).
-loclt : reducep_reflex (ploclt T1 T2) (reducep_loclt reduce_id reduce_id).
-goodlc : reducep_reflex (goodloc T') (reducep_goodloc reduce_id).
-impl :
   reducep_reflex (pimpl P1 P2) (reducep_impl D2 D1)
      <- reducep_reflex P1 D1
      <- reducep_reflex P2 D2.
-and :
   reducep_reflex (pand P1 P2) (reducep_and D2 D1)
      <- reducep_reflex P1 D1
      <- reducep_reflex P2 D2.
-or :
   reducep_reflex (por P1 P2) (reducep_or D2 D1)
      <- reducep_reflex P1 D1
      <- reducep_reflex P2 D2.
-false : reducep_reflex pfalse reducep_false.
msubstitute :
   Pi T1:tp. Pi T2:tp. Pi T':tp -> tp.
      mreduce T1 T2 -> mreduce (T' T1) (T' T2) -> type.
-id : msubstitute (\t:tp. T2 t) mreduce_id mreduce_id.
-tep :
   msubstitute (\t:tp. T' t) (mreduce_step D23 D12) (mreduce_step D23' D12')
      <- substitute1 (\t:tp. T' t) D12 D12'
      <- msubstitute (\t:tp. T' t) D23 D23'.
msubstitute_pr :
   Pi R1:pred. Pi R2:pred. Pi T':pred -> tp.
      mreducepr R1 R2 -> mreduce (T' R1) (T' R2) -> type.
-id : msubstitute_pr (\r:pred. T1 r) mreducepr_id mreduce_id.
-tep :
   msubstitute_pr (\r:pred. T' r) (mreducepr_step D23 D12)
      (mreduce_step D23' D12')
      <- substitutepr1 (\r:pred. T' r) D12 D12'
      <- msubstitute_pr (\r:pred. T' r) D23 D23'.
msubstitutep :
   Pi T1:tp. Pi T2:tp. Pi P:tp -> prop.
      mreduce T1 T2 -> mreducep (P T1) (P T2) -> type.
-id : msubstitutep (\t:tp. P1 t) mreduce_id mreducep_id.
-tep :
   msubstitutep (\t:tp. P t) (mreduce_step D23 D12) (mreducep_step D23' D12')
      <- substitute1p (\t:tp. P t) D12 D12'
      <- msubstitutep (\t:tp. P t) D23 D23'.
msubstitutepr :
   Pi T1:tp. Pi T2:tp. Pi R:tp -> pred.
      mreduce T1 T2 -> mreducepr (R T1) (R T2) -> type.
-id : msubstitutepr (\t:tp. R1 t) mreduce_id mreducepr_id.
-tep :
   msubstitutepr (\t:tp. P t) (mreduce_step D23 D12) (mreducepr_step D23' D12')
      <- substitute1pr (\t:tp. P t) D12 D12'
      <- msubstitutepr (\t:tp. P t) D23 D23'.
msubstitutepr_pr :
   Pi R1:pred. Pi R2:pred. Pi R:pred -> pred.
      mreducepr R1 R2 -> mreducepr (R R1) (R R2) -> type.
-id : msubstitutepr_pr (\r:pred. R2 r) mreducepr_id mreducepr_id.
-tep :
   msubstitutepr_pr (\r:pred. P r) (mreducepr_step D23 D12)
      (mreducepr_step D23' D12')
      <- substitutepr1pr (\r:pred. P r) D12 D12'
      <- msubstitutepr_pr (\r:pred. P r) D23 D23'.
msubstitute2 :
   Pi T1:tp. Pi T2:tp. Pi T1':tp. Pi T2':tp. Pi T':tp -> tp -> tp.
      mreduce T1 T2 -> mreduce T1' T2' -> mreduce (T' T1 T1') (T' T2 T2')
         -> type.
- :
   msubstitute2 (\t:tp. \t1:tp. T' t t1) Dreduce Dreduce' D3
      <- msubstitute (\t:tp. T' t T1') Dreduce D1
      <- msubstitute (\t:tp. T' T2 t) Dreduce' D2
      <- mreduce_trans D1 D2 D3.
msubstitute2p :
   Pi T1:tp. Pi T2:tp. Pi T1':tp. Pi T2':tp. Pi P:tp -> tp -> prop.
      mreduce T1 T2 -> mreduce T1' T2' -> mreducep (P T1 T1') (P T2 T2') -> type.
- :
   msubstitute2p (\t:tp. \t1:tp. P t t1) Dreduce Dreduce' D3
      <- msubstitutep (\t:tp. P t T1') Dreduce D1
      <- msubstitutep (\t:tp. P T2 t) Dreduce' D2
      <- mreducep_trans D1 D2 D3.
msubstitute2pr_pr :
   Pi R1:pred. Pi R2:pred. Pi R1':pred. Pi R2':pred. Pi R:pred -> pred -> pred.
      mreducepr R1 R2 -> mreducepr R1' R2' -> mreducepr (R R1 R1') (R R2 R2')
         -> type.
- :
   msubstitute2pr_pr (\r:pred. \r1:pred. R r r1) Dred Dred' D3
      <- msubstitutepr_pr (\r:pred. R r R1') Dred D1
      <- msubstitutepr_pr (\r:pred. R R2 r) Dred' D2
      <- mreducepr_trans D1 D2 D3.
mreduce_lam :
   Pi SK:kind. Pi T1:tp -> tp. Pi T2:tp -> tp.
      (Pi t:tp. kof t SK -> mreduce (T1 t) (T2 t))
         -> mreduce (lam SK (\t:tp. T1 t)) (lam SK (\t:tp. T2 t)) -> type.
mreduce_lam_id : mreduce_lam (\t:tp. \d:kof t K1. mreduce_id) mreduce_id.
mreduce_lam_step :
   mreduce_lam (\t:tp. \d:kof t K1. mreduce_step (D23 t d) (D12 t d))
      (mreduce_step D23' (reduce_lam (\t:tp. \x:kof t K1. D12 t x)))
      <- mreduce_lam (\t:tp. \x:kof t K1. D23 t x) D23'.
mreduce_klam :
   Pi T1:kind -> pred -> tp. Pi T2:kind -> pred -> tp.
      (Pi k:kind. Pi r:pred. pon r k -> mreduce (T1 k r) (T2 k r))
         -> mreduce (klam (\k:kind. \r:pred. T1 k r))
               (klam (\k:kind. \r:pred. T2 k r)) -> type.
-id : mreduce_klam (\k:kind. \r:pred. \d:pon r k. mreduce_id) mreduce_id.
-tep :
   mreduce_klam
      (\k:kind. \r:pred. \d:pon r k. mreduce_step (D23 k r d) (D12 k r d))
      (mreduce_step D23' (reduce_klam (\k:kind. \r:pred. \x:pon r k. D12 k r x)))
      <- mreduce_klam (\k:kind. \r:pred. \x:pon r k. D23 k r x) D23'.
mreduce_case :
   Pi T':tp. Pi T':tp. Pi K1:kind. Pi T1:tp -> tp. Pi T1':tp -> tp. Pi K2:kind.
      Pi T2:tp -> tp. Pi T2':tp -> tp. Pi K:kind.
      mreduce T' T' -> (Pi t:tp. kof t K1 -> mreduce (T1 t) (T1' t))
         -> (Pi t:tp. kof t K2 -> mreduce (T2 t) (T2' t))
         -> mreduce (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t))
               (case T' K1 K2 K (\t:tp. T1' t) (\t:tp. T2' t)) -> type.
mreduce_case_id :
   mreduce_case mreduce_id (\t:tp. \d:kof t K1. mreduce_id)
      (\t:tp. \d:kof t K2. mreduce_id) mreduce_id.
mreduce_case_step1 :
   mreduce_case (mreduce_step Dbc Dab) (\t:tp. \x:kof t K1. D2 t x)
      (\t:tp. \x:kof t K2. D3 t x)
      (mreduce_step Dbc'
          (reduce_case (\t:tp. \d:kof t K2. reduce_id)
              (\t:tp. \d:kof t K1. reduce_id) Dab))
      <- mreduce_case Dbc (\t:tp. \x:kof t K1. D2 t x)
            (\t:tp. \x:kof t K2. D3 t x) Dbc'.
mreduce_case_step2 :
   mreduce_case D1 (\t:tp. \d:kof t K1. mreduce_step (Dbc t d) (Dab t d))
      (\t:tp. \x:kof t K2. D3 t x)
      (mreduce_step Dbc'
          (reduce_case (\t:tp. \d:kof t K2. reduce_id)
              (\t:tp. \x:kof t K1. Dab t x) reduce_id))
      <- mreduce_case D1 (\t:tp. \x:kof t K1. Dbc t x)
            (\t:tp. \x:kof t K2. D3 t x) Dbc'.
mreduce_case_step3 :
   mreduce_case D1 (\t:tp. \x:kof t K1. D2 t x)
      (\t:tp. \d:kof t K2. mreduce_step (Dbc t d) (Dab t d))
      (mreduce_step Dbc'
          (reduce_case (\t:tp. \x:kof t K2. Dab t x)
              (\t:tp. \d:kof t K1. reduce_id) reduce_id))
      <- mreduce_case D1 (\t:tp. \x:kof t K1. D2 t x)
            (\t:tp. \x:kof t K2. Dbc t x) Dbc'.
mreduce_rforall :
   Pi R1:kind -> pred -> pred. Pi R2:kind -> pred -> pred.
      (Pi k:kind. Pi r:pred. pon r k -> mreducepr (R1 k r) (R2 k r))
         -> mreducepr (rforall (\k:kind. \r:pred. R1 k r))
               (rforall (\k:kind. \r:pred. R2 k r)) -> type.
-id : mreduce_rforall (\k:kind. \r:pred. \d:pon r k. mreducepr_id) mreducepr_id.
-tep :
   mreduce_rforall
      (\k:kind. \r:pred. \d:pon r k. mreducepr_step (D23 k r d) (D12 k r d))
      (mreducepr_step D23'
          (reducepr_forall (\k:kind. \r:pred. \x:pon r k. D12 k r x)))
      <- mreduce_rforall (\k:kind. \r:pred. \x:pon r k. D23 k r x) D23'.
mreduce_rrec :
   Pi R1:kind -> pred -> pred. Pi R2:kind -> pred -> pred.
      (Pi k:kind. Pi r:pred. pon r k -> mreducepr (R1 k r) (R2 k r))
         -> mreducepr (rrec (\k:kind. \r:pred. R1 k r))
               (rrec (\k:kind. \r:pred. R2 k r)) -> type.
-id : mreduce_rrec (\k:kind. \r:pred. \d:pon r k. mreducepr_id) mreducepr_id.
-tep :
   mreduce_rrec
      (\k:kind. \r:pred. \d:pon r k. mreducepr_step (D23 k r d) (D12 k r d))
      (mreducepr_step D23'
          (reducepr_rec (\k:kind. \r:pred. \x:pon r k. D12 k r x)))
      <- mreduce_rrec (\k:kind. \r:pred. \x:pon r k. D23 k r x) D23'.
church_rosser :
   Pi T1:tp. Pi K:kind. Pi T2:tp. Pi T':tp.
      kof T1 K -> equiv T1 T2 -> mreduce T1 T' -> mreduce T2 T' -> kof T2 K
         -> type.
church_rosserr :
   Pi G1:rtp. Pi G2:rtp. Pi G:rtp.
      rtpok G1 -> equivr G1 G2 -> mreducer G1 G -> mreducer G2 G -> rtpok G2
         -> type.
church_rosserr* :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1. Pi G:rtp* N1.
      rtpok* G1 -> equivr* G1 G2 -> mreducer* G1 G -> mreducer* G2 G
         -> rtpok* G2 -> type.
church_rosserp :
   Pi P1:prop. Pi P2:prop. Pi P:prop.
      propok P1 -> equivp P1 P2 -> mreducep P1 P -> mreducep P2 P -> propok P2
         -> type.
church_rosserpr :
   Pi R1:pred. Pi K:kind. Pi R2:pred. Pi R:pred.
      pon R1 K -> equivpr R1 R2 -> mreducepr R1 R -> mreducepr R2 R -> pon R2 K
         -> type.
-reflex : church_rosser Dkof equiv_reflex mreduce_id mreduce_id Dkof.
-ymm :
   church_rosser Dkof1 (equiv_symm Dkof2 D) D2 D1 Dkof2'
      <- church_rosser Dkof2 D D1 D2 Dkof1'
      <- kof_fun Dkof1' Dkof1 Deq
      <- kof_resp tp_eq_ Deq Dkof2 Dkof2'.
-trans :
   church_rosser Dkof1 (equiv_trans D23 D12) D1' D3' Dkof3
      <- church_rosser Dkof1 D12 D1 D2a Dkof2
      <- church_rosser Dkof2 D23 D2b D3 Dkof3
      <- confluence Dkof2 D2a D2b D2a' D2b'
      <- mreduce_trans D1 D2a' D1'
      <- mreduce_trans D3 D2b' D3'.
-annbet :
   church_rosser (kof_annot Dkof X1) equiv_annbeta
      (mreduce_single (reduce_annbeta reduce_id)) mreduce_id Dkof.
-beta :
   church_rosser Dkof equiv_beta
      (mreduce_step mreduce_id
          (reduce_beta reduce_id (\t:tp. \d:kof t K1. reduce_id))) mreduce_id
      Dkof'
      <- sr Dkof (reduce_beta reduce_id (\t:tp. \d:kof t K1. reduce_id)) Dkof'.
-eta :
   church_rosser (kof_lam (\t:tp. \x:kof t K1. Dkof' t x)) equiv_eta mreduce_id
      (mreduce_single (reduce_eta reduce_id Dkof'')) Dkof''
      <- extensionality (\t:tp. \x:kof t K1. Dkof' t x) Dkof''.
-pbeta1 :
   church_rosser Dkof equiv_pbeta1
      (mreduce_step mreduce_id (reduce_pbeta1 reduce_id)) mreduce_id Dkof'
      <- sr Dkof (reduce_pbeta1 reduce_id) Dkof'.
-pbeta2 :
   church_rosser Dkof equiv_pbeta2
      (mreduce_step mreduce_id (reduce_pbeta2 reduce_id)) mreduce_id Dkof'
      <- sr Dkof (reduce_pbeta2 reduce_id) Dkof'.
-peta :
   church_rosser (kof_pair Dkof2 Dkof1) equiv_peta mreduce_id
      (mreduce_single (reduce_peta reduce_id Dkof')) Dkof'
      <- pextensionality Dkof1 Dkof2 Dkof'.
-kbeta :
   church_rosser Dkof equiv_kbeta
      (mreduce_step mreduce_id
          (reduce_kbeta reducepr_id (\k:kind. \r:pred. \d:pon r k. reduce_id)))
      mreduce_id Dkof'
      <- sr Dkof
            (reduce_kbeta reducepr_id (\k:kind. \r:pred. \d:pon r k. reduce_id))
            Dkof'.
-keta :
   church_rosser (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof' k r x))
      equiv_keta mreduce_id (mreduce_single (reduce_keta reduce_id Dkof''))
      Dkof''
      <- kextensionality (\k:kind. \r:pred. \x:pon r k. Dkof' k r x) Dkof''.
-beta1 :
   church_rosser Dkof equiv_sbeta1
      (mreduce_step mreduce_id
          (reduce_sbeta1 (\t:tp. \d:kof t K2. reduce_id) reduce_id)) mreduce_id
      Dkof'
      <- sr Dkof (reduce_sbeta1 (\t:tp. \d:kof t K2. reduce_id) reduce_id) Dkof'.
-beta2 :
   church_rosser Dkof equiv_sbeta2
      (mreduce_step mreduce_id
          (reduce_sbeta2 (\t:tp. \d:kof t K3. reduce_id) reduce_id)) mreduce_id
      Dkof'
      <- sr Dkof (reduce_sbeta2 (\t:tp. \d:kof t K3. reduce_id) reduce_id) Dkof'.
-rbeta :
   church_rosser Dkof equiv_rbeta
      (mreduce_step mreduce_id (reduce_rbeta reduce_id)) mreduce_id Dkof'
      <- sr Dkof (reduce_rbeta reduce_id) Dkof'.
-reta :
   church_rosser (kof_roll X1) (equiv_reta Dkof) mreduce_id
      (mreduce_single (reduce_reta reduce_id Dkof)) Dkof.
-annot :
   church_rosser (kof_annot Dkof Dpon) (equiv_annot Dr D) D1''' D2'''
      (kof_annot Dkof' Dpon')
      <- church_rosser Dkof D D1 D2 Dkof'
      <- church_rosserpr Dpon Dr Dr1 Dr2 Dpon'
      <- msubstitute (\t:tp. annot t R3 K) D1 D1'
      <- msubstitute (\t:tp. annot t R2 K) D2 D2'
      <- msubstitute_pr (\r:pred. annot T' r K) Dr1 D1''
      <- msubstitute_pr (\r:pred. annot T' r K) Dr2 D2''
      <- mreduce_trans D1' D1'' D1'''
      <- mreduce_trans D2' D2'' D2'''.
-lam :
   church_rosser (kof_lam (\t:tp. \x:kof t K. Dkof' t x))
      (equiv_lam (\t:tp. \x:kof t K. D t x)) D1' D2'
      (kof_lam (\t:tp. \x:kof t K. Dkof'' t x))
      <- (Pi t:tp. Pi d:kof t K.
             church_rosser (Dkof' t d) (D t d) (D1 t d) (D2 t d) (Dkof'' t d))
      <- mreduce_lam (\t:tp. \x:kof t K. D1 t x) D1'
      <- mreduce_lam (\t:tp. \x:kof t K. D2 t x) D2'.
-app :
   church_rosser (kof_app Dkof2 Dkof1) (equiv_app D2 D1) D1' D2'
      (kof_app Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. app t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. app t1 t2) D12 D22 D2'.
-pair :
   church_rosser (kof_pair Dkof2 Dkof1) (equiv_pair D2 D1) D1' D2'
      (kof_pair Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. pair t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. pair t1 t2) D12 D22 D2'.
-pi1 :
   church_rosser (kof_pi1 Dkof') (equiv_pi1 D) D1' D2' (kof_pi1 Dkof'')
      <- church_rosser Dkof' D D1 D2 Dkof''
      <- msubstitute (\t:tp. pi1 t) D1 D1'
      <- msubstitute (\t:tp. pi1 t) D2 D2'.
-pi2 :
   church_rosser (kof_pi2 Dkof') (equiv_pi2 D) D1' D2' (kof_pi2 Dkof'')
      <- church_rosser Dkof' D D1 D2 Dkof''
      <- msubstitute (\t:tp. pi2 t) D1 D1'
      <- msubstitute (\t:tp. pi2 t) D2 D2'.
-klam :
   church_rosser (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof' k r x))
      (equiv_klam (\k:kind. \r:pred. \x:pon r k. D k r x)) D1' D2'
      (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof'' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             church_rosser (Dkof' k r d) (D k r d) (D1 k r d) (D2 k r d)
                (Dkof'' k r d))
      <- mreduce_klam (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
      <- mreduce_klam (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'.
-kapp :
   church_rosser (kof_kapp Dkof Dpon) (equiv_kapp Dr D) D1''' D2'''
      (kof_kapp Dkof' Dpon')
      <- church_rosser Dkof D D1 D2 Dkof'
      <- church_rosserpr Dpon Dr Dr1 Dr2 Dpon'
      <- msubstitute (\t:tp. kapp t K R3) D1 D1'
      <- msubstitute (\t:tp. kapp t K R2) D2 D2'
      <- msubstitute_pr (\r:pred. kapp T' K r) Dr1 D1''
      <- msubstitute_pr (\r:pred. kapp T' K r) Dr2 D2''
      <- mreduce_trans D1' D1'' D1'''
      <- mreduce_trans D2' D2'' D2'''.
-in1 :
   church_rosser (kof_in1 Dkof) (equiv_in1 D)
      (mreduce_step D1' (reduce_in1 reduce_id)) D2' (kof_in1 Dkof')
      <- church_rosser Dkof D D1 D2 Dkof'
      <- msubstitute (\t:tp. in1 t K) D1 D1'
      <- msubstitute (\t:tp. in1 t K) D2 D2'.
-in2 :
   church_rosser (kof_in2 Dkof) (equiv_in2 D)
      (mreduce_step D1' (reduce_in2 reduce_id)) D2' (kof_in2 Dkof')
      <- church_rosser Dkof D D1 D2 Dkof'
      <- msubstitute (\t:tp. in2 t K) D1 D1'
      <- msubstitute (\t:tp. in2 t K) D2 D2'.
-case :
   church_rosser
      (kof_case (\t:tp. \x:kof t K2. Dkof2 t x) (\t:tp. \x:kof t K1. Dkof1 t x)
          Dkof0)
      (equiv_case (\t:tp. \x:kof t K2. D2 t x) (\t:tp. \x:kof t K1. D1 t x) D0)
      Da Db
      (kof_case (\t:tp. \x:kof t K2. Dkof2' t x)
          (\t:tp. \x:kof t K1. Dkof1' t x) Dkof0')
      <- church_rosser Dkof0 D0 D0a D0b Dkof0'
      <- (Pi t:tp. Pi d:kof t K1.
             church_rosser (Dkof1 t d) (D1 t d) (D1a t d) (D1b t d) (Dkof1' t d))
      <- (Pi t:tp. Pi d:kof t K2.
             church_rosser (Dkof2 t d) (D2 t d) (D2a t d) (D2b t d) (Dkof2' t d))
      <- mreduce_case D0a (\t:tp. \x:kof t K1. D1a t x)
            (\t:tp. \x:kof t K2. D2a t x) Da
      <- mreduce_case D0b (\t:tp. \x:kof t K1. D1b t x)
            (\t:tp. \x:kof t K2. D2b t x) Db.
-roll :
   church_rosser (kof_roll Dkof) (equiv_roll D) D1' D2' (kof_roll Dkof')
      <- church_rosser Dkof D D1 D2 Dkof'
      <- msubstitute (\t:tp. roll (\k:kind. K k) t) D1 D1'
      <- msubstitute (\t:tp. roll (\k:kind. K k) t) D2 D2'.
-unroll :
   church_rosser (kof_unroll Dkof) (equiv_unroll D) D1' D2' (kof_unroll Dkof')
      <- church_rosser Dkof D D1 D2 Dkof'
      <- msubstitute (\t:tp. unroll t) D1 D1'
      <- msubstitute (\t:tp. unroll t) D2 D2'.
-eteq :
   church_rosser (kof_seteq Dkof') (equiv_seteq D) D1' D2' (kof_seteq Dkof'')
      <- church_rosser Dkof' D D1 D2 Dkof''
      <- msubstitute (\t:tp. seteq N t) D1 D1'
      <- msubstitute (\t:tp. seteq N t) D2 D2'.
-prod :
   church_rosser (kof_prod Dkof2 Dkof1) (equiv_prod D2 D1) D1' D2'
      (kof_prod Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. prod t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. prod t1 t2) D12 D22 D2'.
-exp :
   church_rosser (kof_exp Dkof2 Dkof1) (equiv_exp D2 D1) D1' D2'
      (kof_exp Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. exp t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. exp t1 t2) D12 D22 D2'.
church_rosser_code| :
   Pi G1:rtp. Pi G2:rtp. Pi PC:pc.
      mreducer G1 G2 -> mreduce (code PC G1) (code PC G2) -> type.
-id : church_rosser_code| mreducer_id mreduce_id.
-tep :
   church_rosser_code| (mreducer_step D23 D12)
      (mreduce_step D23' (reduce_code D12))
      <- church_rosser_code| D23 D23'.
-code :
   church_rosser (kof_code Drtpok) (equiv_code D) D1' D2' (kof_code Drtpok')
      <- church_rosserr Drtpok D D1 D2 Drtpok'
      <- church_rosser_code| D1 D1'
      <- church_rosser_code| D2 D2'.
church_rosser_arrow| :
   Pi G1:rtp. Pi G2:rtp. mreducer G1 G2 -> mreduce (arrow G1) (arrow G2) -> type.
-id : church_rosser_arrow| mreducer_id mreduce_id.
-tep :
   church_rosser_arrow| (mreducer_step D23 D12)
      (mreduce_step D23' (reduce_arrow D12))
      <- church_rosser_arrow| D23 D23'.
-arrow :
   church_rosser (kof_arrow Drtpok) (equiv_arrow D) D1' D2' (kof_arrow Drtpok')
      <- church_rosserr Drtpok D D1 D2 Drtpok'
      <- church_rosser_arrow| D1 D1'
      <- church_rosser_arrow| D2 D2'.
-cbox :
   church_rosser (kof_cbox Dkof2 Dkof1) (equiv_cbox D2 D1) D1' D2'
      (kof_cbox Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. cbox t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. cbox t1 t2) D12 D22 D2'.
-cmbox :
   church_rosser (kof_cmbox Dkof2 Dkof1) (equiv_cmbox D2 D1) D1' D2'
      (kof_cmbox Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. cmbox t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. cmbox t1 t2) D12 D22 D2'.
-ptr :
   church_rosser (kof_sptr Dkof') (equiv_sptr D) D1' D2' (kof_sptr Dkof'')
      <- church_rosser Dkof' D D1 D2 Dkof''
      <- msubstitute (\t:tp. sptr t) D1 D1'
      <- msubstitute (\t:tp. sptr t) D2 D2'.
church_rosser_forall| :
   Pi K:kind. Pi T1:tp -> tp. Pi T2:tp -> tp. Pi R:pred.
      (Pi t:tp. kof t K -> mreduce (T1 t) (T2 t))
         -> mreduce (forall K R (\t:tp. T1 t)) (forall K R (\t:tp. T2 t))
         -> type.
-id : church_rosser_forall| (\t:tp. \d:kof t K1. mreduce_id) mreduce_id.
-tep :
   church_rosser_forall| (\t:tp. \d:kof t K1. mreduce_step (D23 t d) (D12 t d))
      (mreduce_step D23'
          (reduce_forall reducepr_id (\t:tp. \x:kof t K1. D12 t x)))
      <- church_rosser_forall| (\t:tp. \x:kof t K1. D23 t x) D23'.
-forall :
   church_rosser (kof_forall (\t:tp. \x:kof t K. Dkof t x) Dpon)
      (equiv_forall Dr (\t:tp. \x:kof t K. D t x)) D1''' D2'''
      (kof_forall (\t:tp. \x:kof t K. Dkof' t x) Dpon')
      <- (Pi t:tp. Pi d:kof t K.
             church_rosser (Dkof t d) (D t d) (D1 t d) (D2 t d) (Dkof' t d))
      <- church_rosserpr Dpon Dr Dr1 Dr2 Dpon'
      <- church_rosser_forall| (\t:tp. \x:kof t K. D1 t x) D1'
      <- church_rosser_forall| (\t:tp. \x:kof t K. D2 t x) D2'
      <- msubstitute_pr (\r:pred. forall K r (\t:tp. T' t)) Dr1 D1''
      <- msubstitute_pr (\r:pred. forall K r (\t:tp. T' t)) Dr2 D2''
      <- mreduce_trans D1' D1'' D1'''
      <- mreduce_trans D2' D2'' D2'''.
church_rosser_exists| :
   Pi K:kind. Pi T1:tp -> tp. Pi T2:tp -> tp. Pi R:pred.
      (Pi t:tp. kof t K -> mreduce (T1 t) (T2 t))
         -> mreduce (exists K R (\t:tp. T1 t)) (exists K R (\t:tp. T2 t))
         -> type.
-id : church_rosser_exists| (\t:tp. \d:kof t K1. mreduce_id) mreduce_id.
-tep :
   church_rosser_exists| (\t:tp. \d:kof t K1. mreduce_step (D23 t d) (D12 t d))
      (mreduce_step D23'
          (reduce_exists reducepr_id (\t:tp. \x:kof t K1. D12 t x)))
      <- church_rosser_exists| (\t:tp. \x:kof t K1. D23 t x) D23'.
-exists :
   church_rosser (kof_exists (\t:tp. \x:kof t K. Dkof t x) Dpon)
      (equiv_exists Dr (\t:tp. \x:kof t K. D t x)) D1''' D2'''
      (kof_exists (\t:tp. \x:kof t K. Dkof' t x) Dpon')
      <- (Pi t:tp. Pi d:kof t K.
             church_rosser (Dkof t d) (D t d) (D1 t d) (D2 t d) (Dkof' t d))
      <- church_rosserpr Dpon Dr Dr1 Dr2 Dpon'
      <- church_rosser_exists| (\t:tp. \x:kof t K. D1 t x) D1'
      <- church_rosser_exists| (\t:tp. \x:kof t K. D2 t x) D2'
      <- msubstitute_pr (\r:pred. exists K r (\t:tp. T' t)) Dr1 D1''
      <- msubstitute_pr (\r:pred. exists K r (\t:tp. T' t)) Dr2 D2''
      <- mreduce_trans D1' D1'' D1'''
      <- mreduce_trans D2' D2'' D2'''.
church_rosser_guard| :
   Pi P1:prop. Pi P2:prop. Pi T':tp.
      mreducep P1 P2 -> mreduce (guard P1 T') (guard P2 T') -> type.
-id : church_rosser_guard| mreducep_id mreduce_id.
-tep :
   church_rosser_guard| (mreducep_step D23 D12)
      (mreduce_step D23' (reduce_guard reduce_id D12))
      <- church_rosser_guard| D23 D23'.
-guard :
   church_rosser (kof_guard Dkof Dpropok) (equiv_guard D2 D1) D1' D2'
      (kof_guard Dkof' Dpropok')
      <- church_rosserp Dpropok D1 D11 D12 Dpropok'
      <- church_rosser Dkof D2 D21 D22 Dkof'
      <- church_rosser_guard| D11 D11'
      <- church_rosser_guard| D12 D12'
      <- msubstitute (\t:tp. guard P t) D21 D21'
      <- msubstitute (\t:tp. guard P t) D22 D22'
      <- mreduce_trans D11' D21' D1'
      <- mreduce_trans D12' D22' D2'.
church_rosser_assert| :
   Pi P1:prop. Pi P2:prop. Pi T':tp.
      mreducep P1 P2 -> mreduce (assert P1 T') (assert P2 T') -> type.
-id : church_rosser_assert| mreducep_id mreduce_id.
-tep :
   church_rosser_assert| (mreducep_step D23 D12)
      (mreduce_step D23' (reduce_assert reduce_id D12))
      <- church_rosser_assert| D23 D23'.
-assert :
   church_rosser (kof_assert Dkof Dpropok) (equiv_assert D2 D1) D1' D2'
      (kof_assert Dkof' Dpropok')
      <- church_rosserp Dpropok D1 D11 D12 Dpropok'
      <- church_rosser Dkof D2 D21 D22 Dkof'
      <- church_rosser_assert| D11 D11'
      <- church_rosser_assert| D12 D12'
      <- msubstitute (\t:tp. assert P t) D21 D21'
      <- msubstitute (\t:tp. assert P t) D22 D22'
      <- mreduce_trans D11' D21' D1'
      <- mreduce_trans D12' D22' D2'.
church_rosser_rec| :
   Pi T1:tp -> tp. Pi T2:tp -> tp.
      (Pi t:tp. kof t kt -> mreduce (T1 t) (T2 t))
         -> mreduce (rec (\t:tp. T1 t)) (rec (\t:tp. T2 t)) -> type.
-id : church_rosser_rec| (\t:tp. \d:kof t kt. mreduce_id) mreduce_id.
-tep :
   church_rosser_rec| (\t:tp. \d:kof t kt. mreduce_step (D23 t d) (D12 t d))
      (mreduce_step D23' (reduce_rec (\t:tp. \x:kof t kt. D12 t x)))
      <- church_rosser_rec| (\t:tp. \x:kof t kt. D23 t x) D23'.
-rec :
   church_rosser (kof_rec (\t:tp. \x:kof t kt. Dkof' t x))
      (equiv_rec (\t:tp. \x:kof t kt. D t x)) D1' D2'
      (kof_rec (\t:tp. \x:kof t kt. Dkof'' t x))
      <- (Pi t:tp. Pi d:kof t kt.
             church_rosser (Dkof' t d) (D t d) (D1 t d) (D2 t d) (Dkof'' t d))
      <- church_rosser_rec| (\t:tp. \x:kof t kt. D1 t x) D1'
      <- church_rosser_rec| (\t:tp. \x:kof t kt. D2 t x) D2'.
-meet :
   church_rosser (kof_meet Dkof2 Dkof1) (equiv_meet D2 D1) D1' D2'
      (kof_meet Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. meet t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. meet t1 t2) D12 D22 D2'.
-join :
   church_rosser (kof_join Dkof2 Dkof1) (equiv_join D2 D1) D1' D2'
      (kof_join Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. join t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. join t1 t2) D12 D22 D2'.
-numadd :
   church_rosser (kof_numadd Dkof2 Dkof1) (equiv_numadd D2 D1) D1' D2'
      (kof_numadd Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. numadd t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. numadd t1 t2) D12 D22 D2'.
-nummul :
   church_rosser (kof_nummul Dkof2 Dkof1) (equiv_nummul D2 D1) D1' D2'
      (kof_nummul Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2 (\t1:tp. \t2:tp. nummul t1 t2) D11 D21 D1'
      <- msubstitute2 (\t1:tp. \t2:tp. nummul t1 t2) D12 D22 D2'.
-nil : church_rosserr* rtpok_nil equivr_nil mreducer*_id mreducer*_id rtpok_nil.
church_rosserr_cons| :
   Pi T1:tp. Pi T2:tp. Pi N1:nat. Pi G:rtp* N1.
      mreduce T1 T2 -> mreducer* (rtcons T1 G) (rtcons T2 G) -> type.
-id : church_rosserr_cons| mreduce_id mreducer*_id.
-tep :
   church_rosserr_cons| (mreduce_step D23 D12)
      (mreducer*_step D23' (reducer_cons D D12))
      <- reducer_reflex* G1 D
      <- church_rosserr_cons| D23 D23'.
church_rosserr_cons|| :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1. Pi T':tp.
      mreducer* G1 G2 -> mreducer* (rtcons T' G1) (rtcons T' G2) -> type.
-id : church_rosserr_cons|| mreducer*_id mreducer*_id.
-tep :
   church_rosserr_cons|| (mreducer*_step D23 D12)
      (mreducer*_step D23' (reducer_cons D12 reduce_id))
      <- church_rosserr_cons|| D23 D23'.
-cons :
   church_rosserr* (rtpok_cons Drtpok Dkof) (equivr_cons D2 D1) D1' D2'
      (rtpok_cons Drtpok' Dkof')
      <- church_rosser Dkof D1 D11 D12 Dkof'
      <- church_rosserr* Drtpok D2 D21 D22 Drtpok'
      <- church_rosserr_cons| D11 D1a
      <- church_rosserr_cons| D12 D2a
      <- church_rosserr_cons|| D21 D1b
      <- church_rosserr_cons|| D22 D2b
      <- mreducer_trans* D1a D1b D1'
      <- mreducer_trans* D2a D2b D2'.
church_rosserr_| :
   Pi T1:tp. Pi T2:tp. Pi G:rtp* regcount.
      mreduce T1 T2 -> mreducer (rt T1 G) (rt T2 G) -> type.
-id : church_rosserr_| mreduce_id mreducer_id.
-tep :
   church_rosserr_| (mreduce_step D23 D12) (mreducer_step D23' (reducer_ D D12))
      <- reducer_reflex* G1 D
      <- church_rosserr_| D23 D23'.
church_rosserr_|| :
   Pi G1:rtp* regcount. Pi G2:rtp* regcount. Pi T':tp.
      mreducer* G1 G2 -> mreducer (rt T' G1) (rt T' G2) -> type.
-id : church_rosserr_|| mreducer*_id mreducer_id.
-tep :
   church_rosserr_|| (mreducer*_step D23 D12)
      (mreducer_step D23' (reducer_ D12 reduce_id))
      <- church_rosserr_|| D23 D23'.
- :
   church_rosserr (rtpok_ Drtpok Dkof) (equivr_ D2 D1) D1' D2'
      (rtpok_ Drtpok' Dkof')
      <- church_rosser Dkof D1 D11 D12 Dkof'
      <- church_rosserr* Drtpok D2 D21 D22 Drtpok'
      <- church_rosserr_| D11 D1a
      <- church_rosserr_| D12 D2a
      <- church_rosserr_|| D21 D1b
      <- church_rosserr_|| D22 D2b
      <- mreducer_trans D1a D1b D1'
      <- mreducer_trans D2a D2b D2'.
-reflex : church_rosserp Dpropok equivp_reflex mreducep_id mreducep_id Dpropok.
-ymm :
   church_rosserp X2 (equivp_symm Dpropok D) D2 D1 Dpropok
      <- church_rosserp Dpropok D D1 D2 X1.
-numeq :
   church_rosserp (propok_numeq Dkof2 Dkof1) (equivp_numeq D2 D1) D1' D2'
      (propok_numeq Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2p (\t:tp. \t1:tp. pnumeq t t1) D11 D21 D1'
      <- msubstitute2p (\t:tp. \t1:tp. pnumeq t t1) D12 D22 D2'.
-numleq :
   church_rosserp (propok_numleq Dkof2 Dkof1) (equivp_numleq D2 D1) D1' D2'
      (propok_numleq Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2p (\t:tp. \t1:tp. pnumleq t t1) D11 D21 D1'
      <- msubstitute2p (\t:tp. \t1:tp. pnumleq t t1) D12 D22 D2'.
-loclt :
   church_rosserp (propok_loclt Dkof2 Dkof1) (equivp_loclt D2 D1) D1' D2'
      (propok_loclt Dkof2' Dkof1')
      <- church_rosser Dkof1 D1 D11 D12 Dkof1'
      <- church_rosser Dkof2 D2 D21 D22 Dkof2'
      <- msubstitute2p (\t:tp. \t1:tp. ploclt t t1) D11 D21 D1'
      <- msubstitute2p (\t:tp. \t1:tp. ploclt t t1) D12 D22 D2'.
-goodlc :
   church_rosserp (propok_goodloc Dkof) (equivp_goodloc D) D1' D2'
      (propok_goodloc Dkof')
      <- church_rosser Dkof D D1 D2 Dkof'
      <- msubstitutep (\t:tp. goodloc t) D1 D1'
      <- msubstitutep (\t:tp. goodloc t) D2 D2'.
church_rosserp_impl| :
   Pi P1:prop. Pi P1':prop. Pi P2:prop. Pi P2':prop.
      mreducep P1 P1' -> mreducep P2 P2'
         -> mreducep (pimpl P1 P2) (pimpl P1' P2') -> type.
-id : church_rosserp_impl| mreducep_id mreducep_id mreducep_id.
-tep* :
   church_rosserp_impl| (mreducep_step D23 D12) D
      (mreducep_step D23' (reducep_impl Did D12))
      <- church_rosserp_impl| D23 D D23'
      <- reducep_reflex P1 Did.
-*step :
   church_rosserp_impl| D (mreducep_step D23 D12)
      (mreducep_step D23' (reducep_impl D12 Did))
      <- church_rosserp_impl| D D23 D23'
      <- reducep_reflex P1 Did.
-impl :
   church_rosserp (propok_impl Dpropok2 Dpropok1) (equivp_impl D2 D1) D1' D2'
      (propok_impl Dpropok2' Dpropok1')
      <- church_rosserp Dpropok1 D1 D11 D12 Dpropok1'
      <- church_rosserp Dpropok2 D2 D21 D22 Dpropok2'
      <- church_rosserp_impl| D11 D21 D1'
      <- church_rosserp_impl| D12 D22 D2'.
church_rosserp_and| :
   Pi P1:prop. Pi P1':prop. Pi P2:prop. Pi P2':prop.
      mreducep P1 P1' -> mreducep P2 P2' -> mreducep (pand P1 P2) (pand P1' P2')
         -> type.
-id : church_rosserp_and| mreducep_id mreducep_id mreducep_id.
-tep* :
   church_rosserp_and| (mreducep_step D23 D12) D
      (mreducep_step D23' (reducep_and Did D12))
      <- church_rosserp_and| D23 D D23'
      <- reducep_reflex P1 Did.
-*step :
   church_rosserp_and| D (mreducep_step D23 D12)
      (mreducep_step D23' (reducep_and D12 Did))
      <- church_rosserp_and| D D23 D23'
      <- reducep_reflex P1 Did.
-and :
   church_rosserp (propok_and Dpropok2 Dpropok1) (equivp_and D2 D1) D1' D2'
      (propok_and Dpropok2' Dpropok1')
      <- church_rosserp Dpropok1 D1 D11 D12 Dpropok1'
      <- church_rosserp Dpropok2 D2 D21 D22 Dpropok2'
      <- church_rosserp_and| D11 D21 D1'
      <- church_rosserp_and| D12 D22 D2'.
church_rosserp_or| :
   Pi P1:prop. Pi P1':prop. Pi P2:prop. Pi P2':prop.
      mreducep P1 P1' -> mreducep P2 P2' -> mreducep (por P1 P2) (por P1' P2')
         -> type.
-id : church_rosserp_or| mreducep_id mreducep_id mreducep_id.
-tep* :
   church_rosserp_or| (mreducep_step D23 D12) D
      (mreducep_step D23' (reducep_or Did D12))
      <- church_rosserp_or| D23 D D23'
      <- reducep_reflex P1 Did.
-*step :
   church_rosserp_or| D (mreducep_step D23 D12)
      (mreducep_step D23' (reducep_or D12 Did))
      <- church_rosserp_or| D D23 D23'
      <- reducep_reflex P1 Did.
-or :
   church_rosserp (propok_or Dpropok2 Dpropok1) (equivp_or D2 D1) D1' D2'
      (propok_or Dpropok2' Dpropok1')
      <- church_rosserp Dpropok1 D1 D11 D12 Dpropok1'
      <- church_rosserp Dpropok2 D2 D21 D22 Dpropok2'
      <- church_rosserp_or| D11 D21 D1'
      <- church_rosserp_or| D12 D22 D2'.
-reflex : church_rosserpr D equivpr_reflex mreducepr_id mreducepr_id D.
-ymm :
   church_rosserpr Dpon1 (equivpr_symm Dpon2 D) D2 D1 Dpon2'
      <- church_rosserpr Dpon2 D D1 D2 Dpon1'
      <- pon_fun Dpon1' Dpon1 Deq
      <- pon_resp pred_eq_ Deq Dpon2 Dpon2'.
-tn :
   church_rosserpr (pon_tn Dkof) (equivpr_tn D) D1' D2' (pon_tn Dkof')
      <- church_rosser Dkof D D1 D2 Dkof'
      <- msubstitutepr (\t:tp. rtn t) D1 D1'
      <- msubstitutepr (\t:tp. rtn t) D2 D2'.
-arrow :
   church_rosserpr (pon_arrow Dpon2 Dpon1) (equivpr_arrow D2 D1) D1' D2'
      (pon_arrow Dpon2' Dpon1')
      <- church_rosserpr Dpon1 D1 D11 D12 Dpon1'
      <- church_rosserpr Dpon2 D2 D21 D22 Dpon2'
      <- msubstitute2pr_pr (\r:pred. \r1:pred. rarrow r r1) D11 D21 D1'
      <- msubstitute2pr_pr (\r:pred. \r1:pred. rarrow r r1) D12 D22 D2'.
-prod :
   church_rosserpr (pon_prod Dpon2 Dpon1) (equivpr_prod D2 D1) D1' D2'
      (pon_prod Dpon2' Dpon1')
      <- church_rosserpr Dpon1 D1 D11 D12 Dpon1'
      <- church_rosserpr Dpon2 D2 D21 D22 Dpon2'
      <- msubstitute2pr_pr (\r:pred. \r1:pred. rprod r r1) D11 D21 D1'
      <- msubstitute2pr_pr (\r:pred. \r1:pred. rprod r r1) D12 D22 D2'.
-forall :
   church_rosserpr (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (equivpr_forall (\k:kind. \r:pred. \x:pon r k. D k r x)) D1' D2'
      (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             church_rosserpr (Dpon k r d) (D k r d) (D1 k r d) (D2 k r d)
                (Dpon' k r d))
      <- mreduce_rforall (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
      <- mreduce_rforall (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'.
-um :
   church_rosserpr (pon_sum Dpon2 Dpon1) (equivpr_sum D2 D1) D1' D2'
      (pon_sum Dpon2' Dpon1')
      <- church_rosserpr Dpon1 D1 D11 D12 Dpon1'
      <- church_rosserpr Dpon2 D2 D21 D22 Dpon2'
      <- msubstitute2pr_pr (\r:pred. \r1:pred. rsum r r1) D11 D21 D1'
      <- msubstitute2pr_pr (\r:pred. \r1:pred. rsum r r1) D12 D22 D2'.
-rec :
   church_rosserpr (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (equivpr_rec (\k:kind. \r:pred. \x:pon r k. D k r x)) D1' D2'
      (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             church_rosserpr (Dpon k r d) (D k r d) (D1 k r d) (D2 k r d)
                (Dpon' k r d))
      <- mreduce_rrec (\k:kind. \r:pred. \x:pon r k. D1 k r x) D1'
      <- mreduce_rrec (\k:kind. \r:pred. \x:pon r k. D2 k r x) D2'.
app_reduce :
   Pi T1:tp. Pi SK:kind. Pi T1':tp -> tp. Pi T2:tp. Pi T2':tp.
      mreduce T1 (lam SK (\t:tp. T1' t)) -> mreduce T2 T2'
         -> mreduce (app T1 T2) (T1' T2') -> type.
app_reduce_ :
   app_reduce Dreduce1 Dreduce2 Dreduce'
      <- msubstitute2 (\t1:tp. \t2:tp. app t1 t2) Dreduce1 Dreduce2 Dreduce
      <- mreduce_trans Dreduce
            (mreduce_single
                (reduce_beta reduce_id (\t:tp. \d:kof t K1. reduce_id)))
            Dreduce'.
pi1_reduce :
   Pi T':tp. Pi T1:tp. Pi T2:tp.
      mreduce T' (pair T1 T2) -> mreduce (pi1 T') T1 -> type.
pi1_reduce_ :
   pi1_reduce Dreduce Dreduce''
      <- msubstitute (\t:tp. pi1 t) Dreduce Dreduce'
      <- mreduce_trans Dreduce' (mreduce_single (reduce_pbeta1 reduce_id))
            Dreduce''.
pi2_reduce :
   Pi T':tp. Pi T1:tp. Pi T2:tp.
      mreduce T' (pair T1 T2) -> mreduce (pi2 T') T2 -> type.
pi2_reduce_ :
   pi2_reduce Dreduce Dreduce''
      <- msubstitute (\t:tp. pi2 t) Dreduce Dreduce'
      <- mreduce_trans Dreduce' (mreduce_single (reduce_pbeta2 reduce_id))
            Dreduce''.
kapp_reduce :
   Pi T':tp. Pi T':kind -> pred -> tp. Pi K:kind. Pi R:pred.
      mreduce T' (klam (\k:kind. \r:pred. T' k r))
         -> mreduce (kapp T' K R) (T' K R) -> type.
kapp_reduce_ :
   kapp_reduce Dreduce Dreduce''
      <- msubstitute (\t:tp. kapp t K R) Dreduce Dreduce'
      <- mreduce_trans Dreduce'
            (mreduce_single
                (reduce_kbeta reducepr_id
                    (\k:kind. \r:pred. \d:pon r k. reduce_id))) Dreduce''.
case_reduce1 :
   Pi T':tp. Pi T':tp. Pi K1:kind. Pi K2:kind. Pi T1:tp -> tp. Pi T1':tp -> tp.
      Pi K3:kind. Pi K:kind. Pi T2:tp -> tp.
      mreduce T' (in1 T' K1) -> (Pi t:tp. kof t K2 -> mreduce (T1 t) (T1' t))
         -> mreduce (case T' K2 K3 K (\t:tp. T1 t) (\t:tp. T2 t)) (T1' T')
         -> type.
- :
   case_reduce1 Dreduce1 (\t:tp. \x:kof t K1. Dreduce2 t x) Dreduce'
      <- mreduce_case Dreduce1 (\t:tp. \x:kof t K1. Dreduce2 t x)
            (\t:tp. \d:kof t K2. mreduce_id) Dreduce
      <- mreduce_trans Dreduce
            (mreduce_single
                (reduce_sbeta1 (\t:tp. \d:kof t K1. reduce_id) reduce_id))
            Dreduce'.
case_reduce2 :
   Pi T':tp. Pi T':tp. Pi K1:kind. Pi K2:kind. Pi T2:tp -> tp. Pi T2':tp -> tp.
      Pi K3:kind. Pi K:kind. Pi T1:tp -> tp.
      mreduce T' (in2 T' K1) -> (Pi t:tp. kof t K2 -> mreduce (T2 t) (T2' t))
         -> mreduce (case T' K3 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) (T2' T')
         -> type.
- :
   case_reduce2 Dreduce1 (\t:tp. \x:kof t K2. Dreduce2 t x) Dreduce'
      <- mreduce_case Dreduce1 (\t:tp. \d:kof t K1. mreduce_id)
            (\t:tp. \x:kof t K2. Dreduce2 t x) Dreduce
      <- mreduce_trans Dreduce
            (mreduce_single
                (reduce_sbeta2 (\t:tp. \d:kof t K2. reduce_id) reduce_id))
            Dreduce'.
unroll_reduce :
   Pi T':tp. Pi K1:kind -> kind. Pi T':tp.
      mreduce T' (roll (\k:kind. K1 k) T') -> mreduce (unroll T') T' -> type.
unroll_reduce_ :
   unroll_reduce Dreduce Dreduce''
      <- msubstitute (\t:tp. unroll t) Dreduce Dreduce'
      <- mreduce_trans Dreduce' (mreduce_single (reduce_rbeta reduce_id))
            Dreduce''.
reduce_tp_exp :
   Pi T1:tp. Pi T2:tp. Pi N:nat. Pi T1':tp. Pi T2':tp.
      reduce T1 T2 -> tp_exp T1 N T1' -> tp_exp T2 N T2' -> reduce T1' T2'
         -> type.
reduce_tp_exp_z : reduce_tp_exp X1 tp_exp_z tp_exp_z reduce_id.
reduce_tp_exp_s :
   reduce_tp_exp Dreduce (tp_exp_s Dte) (tp_exp_s Dte')
      (reduce_prod Dreduce' Dreduce)
      <- reduce_tp_exp Dreduce Dte Dte' Dreduce'.
mreduce_number2 :
   Pi T':tp. Pi K1:kind. Pi N:nat. Pi B:binary N. Pi N':nat. Pi B':binary N'.
      kof T' K1 -> mreduce T' (number B) -> mreduce T' (number B')
         -> nat_eq N N' -> binary_eq B B' -> type.
mreduce_number2| :
   Pi N1:nat. Pi B1:binary N1. Pi T':tp. Pi N2:nat. Pi B2:binary N2.
      tp_eq (number B1) T' -> tp_eq (number B2) T' -> nat_eq N1 N2
         -> binary_eq B1 B2 -> type.
mreduce_number2|_ : mreduce_number2| tp_eq_ tp_eq_ nat_eq_ binary_eq_.
mreduce_number2_ :
   mreduce_number2 Dakof Dreduce1 Dreduce2 Dnateq Dbineq
      <- confluence Dakof Dreduce1 Dreduce2 Dreduce1' Dreduce2'
      <- mreduce_number Dreduce1' Deq1
      <- mreduce_number Dreduce2' Deq2
      <- mreduce_number2| Deq1 Deq2 Dnateq Dbineq.
mreduce_numadd_numlit_contradict :
   Pi T1:tp. Pi T2:tp. Pi N1:nat.
      mreduce (numadd T1 T2) (numlit N1) -> false -> type.
- :
   mreduce_numadd_numlit_contradict (mreduce_step D reduce_id) D'
      <- mreduce_numadd_numlit_contradict D D'.
- :
   mreduce_numadd_numlit_contradict (mreduce_step D (reduce_numadd X1 X2)) D'
      <- mreduce_numadd_numlit_contradict D D'.
mreduce_nummul_numlit_contradict :
   Pi T1:tp. Pi T2:tp. Pi N1:nat.
      mreduce (nummul T1 T2) (numlit N1) -> false -> type.
- :
   mreduce_nummul_numlit_contradict (mreduce_step D reduce_id) D'
      <- mreduce_nummul_numlit_contradict D D'.
- :
   mreduce_nummul_numlit_contradict (mreduce_step D (reduce_nummul X1 X2)) D'
      <- mreduce_nummul_numlit_contradict D D'.
reduce_location :
   Pi L:loc. Pi T':tp. mreduce (location L) T' -> tp_eq T' (location L) -> type.
- : reduce_location mreduce_id tp_eq_.
- :
   reduce_location (mreduce_step Dred reduce_id) Deq <- reduce_location Dred Deq.
equiv_location :
   Pi L:loc. Pi L':loc. equiv (location L) (location L') -> loc_eq L' L -> type.
equiv_location| :
   Pi T':tp. Pi L:loc. Pi L':loc.
      tp_eq T' (location L) -> tp_eq T' (location L') -> loc_eq L' L -> type.
- : equiv_location| tp_eq_ tp_eq_ loc_eq_.
- :
   equiv_location Dequiv Deq
      <- church_rosser kof_location Dequiv Dred1 Dred2 X1
      <- reduce_location Dred1 Deq1
      <- reduce_location Dred2 Deq2
      <- equiv_location| Deq1 Deq2 Deq.
reduce_canonloc :
   Pi TL:tp. Pi T':tp.
      mreduce TL T' -> canonloc TL -> kof TL kloc -> tp_eq T' TL -> type.
- : reduce_canonloc mreduce_id X1 X2 tp_eq_.
- :
   reduce_canonloc (mreduce_step Dred reduce_id) Dcanon Dkof Deq
      <- reduce_canonloc Dred Dcanon Dkof Deq.
- :
   reduce_canonloc (mreduce_step X1 (reduce_eta X2 Dkof')) X3 Dkof Deq'
      <- kof_fun Dkof Dkof' Deq
      <- kind_eq_kloc_karrow_contradict Deq Dfalse
      <- false_implies_tp_eq Dfalse T1 T2 Deq'.
- :
   reduce_canonloc (mreduce_step X1 (reduce_peta X2 Dkof')) X3 Dkof Deq'
      <- kof_fun Dkof Dkof' Deq
      <- kind_eq_kloc_kprod_contradict Deq Dfalse
      <- false_implies_tp_eq Dfalse T1 T2 Deq'.
- :
   reduce_canonloc (mreduce_step X1 (reduce_keta X2 Dkof')) X3 Dkof Deq'
      <- kof_fun Dkof Dkof' Deq
      <- kind_eq_kloc_kforall_contradict Deq Dfalse
      <- false_implies_tp_eq Dfalse T1 T2 Deq'.
- :
   reduce_canonloc (mreduce_step X1 (reduce_reta X2 Dkof')) X3 Dkof Deq'
      <- kof_fun Dkof Dkof' Deq
      <- kind_eq_kloc_krec_contradict Deq Dfalse
      <- false_implies_tp_eq Dfalse T1 T2 Deq'.
equiv_canonloc :
   Pi TL:tp. Pi TL':tp.
      equiv TL TL' -> canonloc TL -> canonloc TL' -> kof TL kloc -> tp_eq TL TL'
         -> type.
- :
   equiv_canonloc Dequiv Dcanon1 Dcanon2 Dkof1 Deq
      <- church_rosser Dkof1 Dequiv Dred1 Dred2 Dkof2
      <- reduce_canonloc Dred1 Dcanon1 Dkof1 Deq1
      <- reduce_canonloc Dred2 Dcanon2 Dkof2 Deq2
      <- tp_eq_symm Deq1 Deq1'
      <- tp_eq_trans Deq1' Deq2 Deq.
- : canonloc_kof canonloc_ kof_location.
- : cloc_lt_reg (cloc_lt_conc X1) canonloc_ canonloc_.
- :
   cloc_lt_reg (cloc_lt_trans D23 D12) D1 D3
      <- cloc_lt_reg D12 D1 X2
      <- cloc_lt_reg D23 X1 D3.
cloc_leq_reg1 :
   Pi TL1:tp. Pi TL2:tp.
      cloc_leq TL1 TL2 -> canonloc TL1 -> canonloc TL2 -> type.
- : cloc_leq_reg1 (cloc_leq_lt Dlt) X2 D <- cloc_lt_reg Dlt X1 D.
- : cloc_leq_reg1 cloc_leq_eq D D.
cloc_leq_reg2 :
   Pi TL1:tp. Pi TL2:tp.
      cloc_leq TL1 TL2 -> canonloc TL2 -> canonloc TL1 -> type.
- : cloc_leq_reg2 (cloc_leq_lt Dlt) X2 D <- cloc_lt_reg Dlt D X1.
- : cloc_leq_reg2 cloc_leq_eq D D.
-impli :
   tr_reg (tr_impli Dpropok1 (\x:tr P1. Dtr x)) (propok_impl Dpropok2 Dpropok1)
      <- (Pi d:tr P1. tr_reg d Dpropok1 -> tr_reg (Dtr d) Dpropok2).
-imple :
   tr_reg (tr_imple X2 Dtr) Dpropok <- tr_reg Dtr (propok_impl Dpropok X1).
-andi :
   tr_reg (tr_andi D2 D1) (propok_and Dpropok2 Dpropok1)
      <- tr_reg D1 Dpropok1
      <- tr_reg D2 Dpropok2.
-ande1 :
   tr_reg (tr_ande1 D) Dpropok1 <- tr_reg D (propok_and Dpropok2 Dpropok1).
-ande2 :
   tr_reg (tr_ande2 D) Dpropok2 <- tr_reg D (propok_and Dpropok2 Dpropok1).
-ori1 :
   tr_reg (tr_ori1 Dpropok2 Dtr) (propok_or Dpropok2 Dpropok1)
      <- tr_reg Dtr Dpropok1.
-ori2 :
   tr_reg (tr_ori2 Dpropok1 Dtr) (propok_or Dpropok2 Dpropok1)
      <- tr_reg Dtr Dpropok2.
-ore :
   tr_reg (tr_ore (\x:tr P3. Dtr2 x) (\x:tr P1. Dtr1 x) Dtr0) Dpropok
      <- tr_reg Dtr0 (propok_or Dpropok2 Dpropok1)
      <- (Pi d:tr P1. tr_reg d Dpropok1 -> tr_reg (Dtr1 d) Dpropok).
-falsee : tr_reg (tr_falsee D X1) D.
-equiv : tr_reg (tr_equiv D X1 X2) D.
-numeq_symm :
   tr_reg (tr_numeq_symm D) (propok_numeq D1 D2)
      <- tr_reg D (propok_numeq D2 D1).
-numeq_trans :
   tr_reg (tr_numeq_trans D23 D12) (propok_numeq D3 D1)
      <- tr_reg D12 (propok_numeq X2 D1)
      <- tr_reg D23 (propok_numeq D3 X1).
-numeq_lit : tr_reg tr_numeq_lit (propok_numeq kof_numlit kof_numlit).
-numeq_bin : tr_reg tr_numeq_bin (propok_numeq kof_number kof_number).
-numeq_rep1 : tr_reg (tr_numeq_rep1 X1) (propok_numeq kof_numlit kof_number).
-numeq_rep2 : tr_reg (tr_numeq_rep2 X1) (propok_numeq kof_number kof_numlit).
-numleq_refl :
   tr_reg (tr_numleq_refl D) (propok_numleq D2 D1)
      <- tr_reg D (propok_numeq D2 D1).
-numleq_antisym :
   tr_reg (tr_numleq_antisymm X1 D) (propok_numeq D2 D1)
      <- tr_reg D (propok_numleq D2 D1).
-numleq_trans :
   tr_reg (tr_numleq_trans D23 D12) (propok_numleq D3 D1)
      <- tr_reg D12 (propok_numleq X2 D1)
      <- tr_reg D23 (propok_numleq D3 X1).
-numleq_lit : tr_reg (tr_numleq_lit X1) (propok_numleq kof_numlit kof_numlit).
-numleq_good1 :
   tr_reg (tr_numleq_good1 D) (propok_numeq D1 D1)
      <- tr_reg D (propok_numleq D2 D1).
-numleq_good2 :
   tr_reg (tr_numleq_good2 D) (propok_numeq D2 D2)
      <- tr_reg D (propok_numleq D2 D1).
-numlt_lit : tr_reg (tr_numlt_lit X1) (propok_numlt _ _ kof_numlit kof_numlit).
-numlt_bin : tr_reg (tr_numlt_bin X1 X2) (propok_numlt _ _ kof_number kof_number).
-numlt_contra : tr_reg (tr_numlt_contra X1) propok_false.
-numadd_commute :
   tr_reg (tr_numadd_commute D2 D1)
      (propok_numeq (kof_numadd D1' D2') (kof_numadd D2' D1'))
      <- tr_reg D1 (propok_numeq D1' X2)
      <- tr_reg D2 (propok_numeq D2' X1).
-numadd_assoc :
   tr_reg (tr_numadd_assoc D3 D2 D1)
      (propok_numeq (kof_numadd D3' (kof_numadd D2' D1'))
          (kof_numadd (kof_numadd D3' D2') D1'))
      <- tr_reg D1 (propok_numeq D1' X3)
      <- tr_reg D2 (propok_numeq D2' X2)
      <- tr_reg D3 (propok_numeq D3' X1).
-numadd_ident :
   tr_reg (tr_numadd_ident D) (propok_numeq D' (kof_numadd kof_numlit D'))
      <- tr_reg D (propok_numeq D' X1).
-numadd_mono :
   tr_reg (tr_numadd_monotone D2 D1)
      (propok_numleq (kof_numadd D21 D11) (kof_numadd D22 D12))
      <- tr_reg D1 (propok_numleq D11 D12)
      <- tr_reg D2 (propok_numleq D21 D22).
-numadd_leq :
   tr_reg (tr_numadd_leq D2 D1) (propok_numleq (kof_numadd D2' D1') D1')
      <- tr_reg D1 (propok_numeq D1' X2)
      <- tr_reg D2 (propok_numeq D2' X1).
-numadd_lit :
   tr_reg (tr_numadd_lit X1)
      (propok_numeq kof_numlit (kof_numadd kof_numlit kof_numlit)).
-numadd_bin :
   tr_reg (tr_numadd_bin X1)
      (propok_numeq kof_number (kof_numadd kof_number kof_number)).
-numadd_good1 :
   tr_reg (tr_numadd_good1 D) (propok_numeq D1 D1)
      <- tr_reg D (propok_numeq (kof_numadd D2 D1) X1).
-numadd_good2 :
   tr_reg (tr_numadd_good2 D) (propok_numeq D2 D2)
      <- tr_reg D (propok_numeq (kof_numadd D2 D1) X1).
-nummul_commute :
   tr_reg (tr_nummul_commute D2 D1)
      (propok_numeq (kof_nummul D1' D2') (kof_nummul D2' D1'))
      <- tr_reg D1 (propok_numeq D1' X2)
      <- tr_reg D2 (propok_numeq D2' X1).
-nummul_mono :
   tr_reg (tr_nummul_monotone D2 D1)
      (propok_numleq (kof_nummul D21 D11) (kof_nummul D22 D12))
      <- tr_reg D1 (propok_numleq D11 D12)
      <- tr_reg D2 (propok_numleq D21 D22).
-nummul_lit :
   tr_reg (tr_nummul_lit X1)
      (propok_numeq kof_numlit (kof_nummul kof_numlit kof_numlit)).
-loclt_location :
   tr_reg (tr_loclt_location Dclt) (propok_loclt Dkof2 Dkof1)
      <- cloc_lt_reg Dclt Dcanon1 Dcanon2
      <- canonloc_kof Dcanon1 Dkof1
      <- canonloc_kof Dcanon2 Dkof2.
-loclt_trans :
   tr_reg (tr_loclt_trans D23 D12) (propok_loclt D3 D1)
      <- tr_reg D12 (propok_loclt X2 D1)
      <- tr_reg D23 (propok_loclt D3 X1).
-loclt_good1 :
   tr_reg (tr_loclt_good1 D) (propok_goodloc D1)
      <- tr_reg D (propok_loclt D2 D1).
-loclt_good2 :
   tr_reg (tr_loclt_good2 D) (propok_goodloc D2)
      <- tr_reg D (propok_loclt D2 D1).
-goodloc_loc : tr_reg tr_goodloc_location (propok_goodloc kof_location).
entails_pon :
   Pi R1:pred. Pi R2:pred. Pi K:kind.
      entails R1 R2 -> pon R1 K -> pon R2 K -> type.
entails_pon' :
   Pi R2:pred. Pi R1:pred. Pi K:kind.
      entails R2 R1 -> pon R1 K -> pon R2 K -> type.
-refl : entails_pon entails_reflex D D.
-trans :
   entails_pon (entails_trans D23 D12) D1 D3
      <- entails_pon D12 D1 D2
      <- entails_pon D23 D2 D3.
-equiv :
   entails_pon (entails_equiv D2 D1 D) D1' D2'
      <- pon_fun D1 D1' Deq
      <- pon_resp pred_eq_ Deq D2 D2'.
-true :
   entails_pon (entails_true D1) D2 D
      <- pon_fun D1 D2 Deq
      <- pon_resp pred_eq_ Deq pon_true D.
-tn_td : entails_pon (entails_tn_td X1) (pon_tn X2) pon_td.
-tn :
   entails_pon (entails_tn D) (pon_tn X2) (pon_tn Dkof)
      <- tr_reg D (propok_numeq Dkof X1).
-tn :
   entails_pon (entails_tng D) (pon_tn X3) (pon_tn Dkof)
      <- tr_reg D (propok_impl (propok_numeq Dkof X1) X2).
-arrow :
   entails_pon (entails_arrow Dent2 Dent1) (pon_arrow D2 D1) (pon_arrow D2' D1')
      <- entails_pon' Dent1 D1 D1'
      <- entails_pon Dent2 D2 D2'.
-prod :
   entails_pon (entails_prod Dent2 Dent1) (pon_prod D2 D1) (pon_prod D2' D1')
      <- entails_pon Dent1 D1 D1'
      <- entails_pon Dent2 D2 D2'.
-forall :
   entails_pon (entails_forall (\k:kind. \r:pred. \x:pon r k. Dent k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. D k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             entails_pon (Dent k r d) (D k r d) (D' k r d)).
-um :
   entails_pon (entails_sum Dent2 Dent1) (pon_sum D2 D1) (pon_sum D2' D1')
      <- entails_pon Dent1 D1 D1'
      <- entails_pon Dent2 D2 D2'.
-refl : entails_pon' entails_reflex D D.
-trans :
   entails_pon' (entails_trans D23 D12) D3 D1
      <- entails_pon' D23 D3 D2
      <- entails_pon' D12 D2 D1.
-equiv :
   entails_pon' (entails_equiv D2 D1 D) D2' D1'
      <- pon_fun D2 D2' Deq
      <- pon_resp pred_eq_ Deq D1 D1'.
-true : entails_pon' (entails_true D) pon_true D.
-tn_td : entails_pon' (entails_tn_td D) pon_td (pon_tn D).
-tn :
   entails_pon' (entails_tn D) (pon_tn X2) (pon_tn Dkof)
      <- tr_reg D (propok_numeq X1 Dkof).
-tn :
   entails_pon' (entails_tng D) (pon_tn X3) (pon_tn Dkof)
      <- tr_reg D (propok_impl (propok_numeq X1 Dkof) X2).
-arrow :
   entails_pon' (entails_arrow Dent2 Dent1) (pon_arrow D2 D1)
      (pon_arrow D2' D1')
      <- entails_pon Dent1 D1 D1'
      <- entails_pon' Dent2 D2 D2'.
-prod :
   entails_pon' (entails_prod Dent2 Dent1) (pon_prod D2 D1) (pon_prod D2' D1')
      <- entails_pon' Dent1 D1 D1'
      <- entails_pon' Dent2 D2 D2'.
-forall :
   entails_pon' (entails_forall (\k:kind. \r:pred. \x:pon r k. Dent k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. D k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             entails_pon' (Dent k r d) (D k r d) (D' k r d)).
-um :
   entails_pon' (entails_sum Dent2 Dent1) (pon_sum D2 D1) (pon_sum D2' D1')
      <- entails_pon' Dent1 D1 D1'
      <- entails_pon' Dent2 D2 D2'.
-true : sat_reg (sat_true Dkof) Dkof pon_true.
-annot :
   sat_reg (sat_annot Dsat) (kof_annot Dkof Dpon) Dpon <- sat_reg Dsat Dkof Dpon.
-lam :
   sat_reg (sat_lam (\t:tp. \x:kof t K1. \x1:sat t R2 K1. Dsat t x x1) Dpon)
      (kof_lam (\t:tp. \x:kof t K1. Dkof t x)) (pon_arrow Dpon'' Dpon)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R2 K1.
             sat_reg d2 d1 Dpon
                -> sat_reg (Dsat t d1 d2) (Dkof t d1) (Dpon' t d1))
      <- strengthenpr (\t:tp. \x:kof t K1. Dpon' t x) Dpon''.
-app :
   sat_reg (sat_app D2 D1) (kof_app Dkof2 Dkof1) Dpon2
      <- sat_reg D1 Dkof1 (pon_arrow Dpon2 X2)
      <- sat_reg D2 Dkof2 X1.
-pair :
   sat_reg (sat_pair D2 D1) (kof_pair Dkof2 Dkof1) (pon_prod Dpon2 Dpon1)
      <- sat_reg D1 Dkof1 Dpon1
      <- sat_reg D2 Dkof2 Dpon2.
-pi1 :
   sat_reg (sat_pi1 D) (kof_pi1 Dkof) Dpon1
      <- sat_reg D Dkof (pon_prod Dpon2 Dpon1).
-pi2 :
   sat_reg (sat_pi2 D) (kof_pi2 Dkof) Dpon2
      <- sat_reg D Dkof (pon_prod Dpon2 Dpon1).
-klam :
   sat_reg (sat_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (kof_klam (\k:kind. \r:pred. \x:pon r k. Dkof k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             sat_reg (D k r d) (Dkof k r d) (Dpon k r d)).
-kapp :
   sat_reg (sat_kapp Dpon' D) (kof_kapp Dkof Dpon') (Dpon K2 R2 Dpon')
      <- sat_reg D Dkof (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon k r x)).
-in1 :
   sat_reg (sat_in1 Dpon' Dsat) (kof_in1 Dkof) (pon_sum Dpon' Dpon)
      <- sat_reg Dsat Dkof Dpon.
-in2 :
   sat_reg (sat_in2 Dpon' Dsat) (kof_in2 Dkof) (pon_sum Dpon Dpon')
      <- sat_reg Dsat Dkof Dpon.
-case :
   sat_reg
      (sat_case (\t:tp. \x:kof t K3. \x1:sat t R2 K3. Dsat2 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R3 K1. Dsat1 t x x1) Dsat0)
      (kof_case (\t:tp. \x:kof t K3. Dkof2 t x) (\t:tp. \x:kof t K1. Dkof1 t x)
          Dkof0)
      Dpon'
      <- sat_reg Dsat0 Dkof0 (pon_sum Dpon2 Dpon1)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R3 K1.
             sat_reg d2 d1 Dpon1
                -> sat_reg (Dsat1 t d1 d2) (Dkof1 t d1) (Dpon t d1))
      <- (Pi t:tp. Pi d1:kof t K3. Pi d2:sat t R2 K3.
             sat_reg d2 d1 Dpon2
                -> sat_reg (Dsat2 t d1 d2) (Dkof2 t d1) (Dpon_dk t d1))
      <- strengthenpr (\t:tp. \x:kof t K1. Dpon t x) Dpon'.
-roll :
   sat_reg (sat_roll Dsat (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (kof_roll Dkof) (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      <- sat_reg Dsat Dkof X1.
-unroll :
   sat_reg (sat_unroll Dsat) (kof_unroll Dkof)
      (Dpon (krec (\k:kind. K1 k)) (rrec (\k:kind. \r:pred. R1 k r))
          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))
      <- sat_reg Dsat Dkof (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x)).
-b0 : sat_reg sat_b0i kof_b0 (pon_ti _).
-b1 : sat_reg sat_b1i kof_b1 (pon_ti _).
-eteq : sat_reg (sat_seteqi Dkof) (kof_seteq Dkof) (pon_ti _).
-prod :
   sat_reg (sat_prodd Dsat2 Dsat1) (kof_prod Dkof2 Dkof1) pon_td
      <- sat_reg Dsat1 Dkof1 X2
      <- sat_reg Dsat2 Dkof2 X1.
-prod :
   sat_reg (sat_prodn Dsat2 Dsat1) (kof_prod Dkof2 Dkof1)
      (pon_tn (kof_numadd Dkof2' Dkof1'))
      <- sat_reg Dsat1 Dkof1 (pon_tn Dkof1')
      <- sat_reg Dsat2 Dkof2 (pon_tn Dkof2').
-exp :
   sat_reg (sat_expd Dkof2 Dsat) (kof_exp Dkof2 Dkof1) pon_td
      <- sat_reg Dsat Dkof1 X1.
-exp :
   sat_reg (sat_expn X1 Dkof' Dsat) (kof_exp Dkof' Dkof)
      (pon_tn (kof_nummul Dkof'' Dkof'))
      <- sat_reg Dsat Dkof (pon_tn Dkof'').
-exp : sat_reg (sat_expiz X1 Dkof' Dkof) (kof_exp Dkof' Dkof) (pon_ti _).
-arrow : sat_reg (sat_arrowi Drtpok) (kof_arrow Drtpok) (pon_ti _).
-cbox : sat_reg (sat_cboxi Dkof2 Dkof1) (kof_cbox Dkof2 Dkof1) (pon_ti _).
-cmbox : sat_reg (sat_cmboxi Dkof2 Dkof1) (kof_cmbox Dkof2 Dkof1) (pon_ti _).
-ptr : sat_reg (sat_sptri Dkof) (kof_sptr Dkof) (pon_ti _).
-forall :
   sat_reg (sat_foralld Dsat Dsatarg (\t:tp. \x:kof t K1. Dkof t x))
      (kof_forall (\t:tp. \x:kof t K1. Dkof t x) Dpon) pon_td
      <- sat_reg Dsatarg X1 Dpon.
-forall :
   sat_reg (sat_foralli Dsat Dsatarg (\t:tp. \x:kof t K1. Dkof t x))
      (kof_forall (\t:tp. \x:kof t K1. Dkof t x) Dpon) (pon_tn Dkof')
      <- sat_reg Dsatarg X2 Dpon
      <- sat_reg Dsat X1 (pon_tn Dkof').
-exists :
   sat_reg (sat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsat t x x1) Dpon)
      (kof_exists (\t:tp. \x:kof t K1. Dkof t x) Dpon) (pon_tn Dkof'')
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon
                -> sat_reg (Dsat t d1 d2) (Dkof t d1) (pon_tn (Dkof' t d1)))
      <- strengthen (\t:tp. \x:kof t K1. Dkof' t x) Dkof''.
-guard :
   sat_reg (sat_guardd Dsat X1 Dpropok) (kof_guard Dkof Dpropok) pon_td
      <- sat_reg Dsat Dkof Dpon'.
-guard :
   sat_reg (sat_guardi Dsat X1 Dpropok) (kof_guard Dkof Dpropok) (pon_tn Dkof')
      <- sat_reg Dsat Dkof (pon_tn Dkof').
-assert :
   sat_reg (sat_assertd (\x:tr P1. Dsat x) Dpropok) (kof_assert Dkof Dpropok)
      pon_td
      <- (Pi d:tr P1. tr_reg d Dpropok -> sat_reg (Dsat d) Dkof Dpon').
-assert :
   sat_reg (sat_asserti (\x:tr P1. Dsat x) Dpropok) (kof_assert Dkof Dpropok)
      (pon_tn Dkof')
      <- (Pi d:tr P1. tr_reg d Dpropok -> sat_reg (Dsat d) Dkof (pon_tn Dkof')).
-rec :
   sat_reg (sat_recd (\t:tp. \x:kof t kt. Dsat t x))
      (kof_rec (\t:tp. \x:kof t kt. Dkof t x)) pon_td
      <- (Pi t:tp. Pi d:kof t kt. sat_reg (Dsat t d) (Dkof t d) (Dpon' t d)).
-rec :
   sat_reg (sat_reci (\t:tp. \x:kof t kt. Dsat t x))
      (kof_rec (\t:tp. \x:kof t kt. Dkof t x)) (pon_tn Dkof'')
      <- (Pi t:tp. Pi d:kof t kt.
             sat_reg (Dsat t d) (Dkof t d) (pon_tn (Dkof' t d)))
      <- strengthen (\t:tp. \x:kof t kt. Dkof' t x) Dkof''.
-meet :
   sat_reg (sat_meetd1 Dkof2 Dsat1) (kof_meet Dkof2 Dkof1) pon_td
      <- sat_reg Dsat1 Dkof1 X1.
-meet :
   sat_reg (sat_meetd2 Dsat2 Dkof1) (kof_meet Dkof2 Dkof1) pon_td
      <- sat_reg Dsat2 Dkof2 X1.
-meet :
   sat_reg (sat_meeti1 Dkof2 Dsat1) (kof_meet Dkof2 Dkof1) (pon_tn Dkof')
      <- sat_reg Dsat1 Dkof1 (pon_tn Dkof').
-meet :
   sat_reg (sat_meeti2 Dsat2 Dkof1) (kof_meet Dkof2 Dkof1) (pon_tn Dkof')
      <- sat_reg Dsat2 Dkof2 (pon_tn Dkof').
-join :
   sat_reg (sat_joini Dsat2 Dsat1) (kof_join Dkof2 Dkof1) (pon_tn Dkof')
      <- sat_reg Dsat1 Dkof1 (pon_tn Dkof')
      <- sat_reg Dsat2 Dkof2 X1.
-ns : sat_reg sat_nsi kof_ns (pon_ti _).
-void : sat_reg sat_voidi kof_void (pon_ti _).
-gotptr : sat_reg sat_gotptri kof_gotptr (pon_ti _).
-entail :
   sat_reg (entailment Dent Dsat) Dkof Dpon'
      <- sat_reg Dsat Dkof Dpon
      <- entails_pon Dent Dpon Dpon'.
loc_lt_trans :
   Pi L1:loc. Pi L2:loc. Pi L3:loc.
      loc_lt L1 L2 -> loc_lt L2 L3 -> loc_lt L1 L3 -> type.
loc_lt_trans_ :
   loc_lt_trans (loc_lt_ D12) (loc_lt_ D23) (loc_lt_ D13)
      <- lt_trans D12 D23 D13.
loc_leq_trans :
   Pi L1:loc. Pi L2:loc. Pi L3:loc.
      loc_leq L1 L2 -> loc_leq L2 L3 -> loc_leq L1 L3 -> type.
loc_leq_trans_ :
   loc_leq_trans (loc_leq_ D12) (loc_leq_ D23) (loc_leq_ D13)
      <- leq_trans D12 D23 D13.
loc_leq_lt_trans :
   Pi L1:loc. Pi L2:loc. Pi L3:loc.
      loc_leq L1 L2 -> loc_lt L2 L3 -> loc_lt L1 L3 -> type.
loc_leq_lt_trans_ :
   loc_leq_lt_trans (loc_leq_ D12) (loc_lt_ D23) (loc_lt_ D13)
      <- leq_lt_trans D12 D23 D13.
loc_lt_leq_trans :
   Pi L1:loc. Pi L2:loc. Pi L3:loc.
      loc_lt L1 L2 -> loc_leq L2 L3 -> loc_lt L1 L3 -> type.
loc_lt_leq_trans_ :
   loc_lt_leq_trans (loc_lt_ D12) (loc_leq_ D23) (loc_lt_ D13)
      <- lt_leq_trans D12 D23 D13.
loc_leq_reflex : Pi L:loc. loc_leq L L -> type.
loc_leq_reflex_ : loc_leq_reflex (lc N) (loc_leq_ D) <- leq_reflex N D.
loc_lt_contradict : Pi L:loc. loc_lt L L -> false -> type.
loc_lt_contradict_ :
   loc_lt_contradict (loc_lt_ D) Dfalse <- lt_contradict D Dfalse.
loc_lt_implies_leq : Pi L:loc. Pi L':loc. loc_lt L L' -> loc_leq L L' -> type.
loc_lt_implies_leq_ :
   loc_lt_implies_leq (loc_lt_ D1) (loc_leq_ D2) <- lt_implies_leq D1 D2.
rtlookup_reg :
   Pi G:rtp. Pi REG:reg. Pi T':tp.
      rtpok G -> rtlookup G REG T' -> kof T' kt -> type.
rtlookup_reg* :
   Pi N1:nat. Pi G:rtp* N1. Pi N:nat. Pi T':tp.
      rtpok* G -> rtlookup* G N T' -> kof T' kt -> type.
rtlookup_reg_z : rtlookup_reg* (rtpok_cons X1 D) rtlookup_z D.
rtlookup_reg_s :
   rtlookup_reg* (rtpok_cons D1 X1) (rtlookup_s D2) D <- rtlookup_reg* D1 D2 D.
rtlookup_reg_ :
   rtlookup_reg (rtpok_ D1 X1) (rtlookup_ D2) D <- rtlookup_reg* D1 D2 D.
ztlookup_reg :
   Pi G:rtp. Pi ZT:tp. rtpok G -> ztlookup G ZT -> kof ZT kt -> type.
ztlookup_reg_ : ztlookup_reg (rtpok_ X1 D) ztlookup_ D.
htlookup_reg :
   Pi S:htp. Pi L1:loc. Pi L:loc. Pi T':tp.
      htpok S L1 -> htlookup S L T' -> kof T' kt -> type.
- : htlookup_reg (htpok_cons X1 D X2) htlookup_hit D.
- :
   htlookup_reg (htpok_cons Dh X1 X2) (htlookup_miss Dhtlookup X3) D
      <- htlookup_reg Dh Dhtlookup D.
rtupdate_reg :
   Pi G:rtp. Pi T':tp. Pi REG:reg. Pi G':rtp.
      rtpok G -> kof T' kt -> rtupdate G REG T' G' -> rtpok G' -> type.
rtupdate_reg* :
   Pi N1:nat. Pi G:rtp* N1. Pi T':tp. Pi N:nat. Pi G':rtp* N1.
      rtpok* G -> kof T' kt -> rtupdate* G N T' G' -> rtpok* G' -> type.
gratuitous :
   Pi T1:tp. Pi R1:pred. Pi K1:kind. Pi D1:sat T1 R1 K1. Pi D2:kof T1 K1.
      Pi D3:pon R1 K1. Pi G1:rtp. Pi T2:tp. Pi REG1:reg. Pi G2:rtp.
      Pi D4:rtpok G1. Pi D5:kof T2 kt. Pi D6:rtupdate G1 REG1 T2 G2.
      Pi D7:rtpok G2. (sat_reg D1 D2 D3 -> rtupdate_reg D4 D5 D6 D7) -> type.
- :
   rtupdate_reg* (rtpok_cons Drtpok X1) Dkof rtupdate_z (rtpok_cons Drtpok Dkof).
- :
   rtupdate_reg* (rtpok_cons Drtpok Dkof) Dkof' (rtupdate_s D)
      (rtpok_cons Drtpok' Dkof)
      <- rtupdate_reg* Drtpok Dkof' D Drtpok'.
- :
   rtupdate_reg (rtpok_ Drtpok Dkof) Dkof' (rtupdate_ D) (rtpok_ Drtpok' Dkof)
      <- rtupdate_reg* Drtpok Dkof' D Drtpok'.
ztupdate_reg :
   Pi G:rtp. Pi T':tp. Pi G':rtp.
      rtpok G -> kof T' kt -> ztupdate G T' G' -> rtpok G' -> type.
ztupdate_reg_ :
   ztupdate_reg (rtpok_ Drtpok X1) Dkof ztupdate_ (rtpok_ Drtpok Dkof).
htupdate_reg :
   Pi S:htp. Pi L:loc. Pi L':loc. Pi T':tp. Pi S':htp.
      htpok S L -> htupdate S L' T' S' -> kof T' kt -> htpok S' L -> type.
- :
   htupdate_reg (htpok_cons Dhtpok X1 Dlt) htupdate_hit Dkof
      (htpok_cons Dhtpok Dkof Dlt).
- :
   htupdate_reg (htpok_cons Dhtpok Dkof Dlt) (htupdate_miss Dupd X1) Dkof'
      (htpok_cons Dhtpok' Dkof Dlt)
      <- htupdate_reg Dhtpok Dupd Dkof' Dhtpok'.
htdelete_reg :
   Pi S:htp. Pi L:loc. Pi L':loc. Pi S':htp.
      htpok S L -> htdelete S L' S' -> htpok S' L -> type.
- : htdelete_reg (htpok_cons htpok_nil X1 X2) htdelete_hit htpok_nil.
- :
   htdelete_reg (htpok_cons (htpok_cons Dhtpok Dkof Dlt) X1 Dlt') htdelete_hit
      (htpok_cons Dhtpok Dkof Dlt'')
      <- loc_lt_trans Dlt Dlt' Dlt''.
- :
   htdelete_reg (htpok_cons Dhtpok Dkof Dlt) (htdelete_miss Ddel X1)
      (htpok_cons Dhtpok' Dkof Dlt)
      <- htdelete_reg Dhtpok Ddel Dhtpok'.
subtype_reg1 :
   Pi T1:tp. Pi T2:tp. kof T1 kt -> kof T2 kt -> subtype T1 T2 -> type.
subtype_reg2 :
   Pi T1:tp. Pi T2:tp. kof T1 kt -> kof T2 kt -> subtype T1 T2 -> type.
subrtype_reg1 :
   Pi G1:rtp. Pi G2:rtp. subrtype G1 G2 -> rtpok G1 -> rtpok G2 -> type.
subrtype_reg2 :
   Pi G1:rtp. Pi G2:rtp. subrtype G1 G2 -> rtpok G1 -> rtpok G2 -> type.
subrtype_reg1* :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1.
      subrtype* G1 G2 -> rtpok* G1 -> rtpok* G2 -> type.
subrtype_reg2* :
   Pi N1:nat. Pi G1:rtp* N1. Pi G2:rtp* N1.
      subrtype* G1 G2 -> rtpok* G1 -> rtpok* G2 -> type.
- : subtype_reg1 D D reflex.
- : subtype_reg2 D D reflex.
- : subtype_reg1 X1 D (reflexeq D X2 X3).
- : subtype_reg2 D X1 (reflexeq X2 D X3).
- :
   subtype_reg1 D1 D3 (trans D23 D12)
      <- subtype_reg1 D1 D2 D12
      <- subtype_reg1 D2 D3 D23.
- :
   subtype_reg2 D1 D3 (trans D23 D12)
      <- subtype_reg2 D2 D3 D23
      <- subtype_reg2 D1 D2 D12.
- :
   subtype_reg1 (kof_seteq D) (kof_seteq D') (seteq_sub Dtr)
      <- tr_reg Dtr (propok_numeq D' X1).
- :
   subtype_reg2 (kof_seteq D) (kof_seteq D') (seteq_sub Dtr)
      <- tr_reg Dtr (propok_numeq X1 D).
- :
   subtype_reg1 (kof_prod D2 D1) (kof_prod D2' D1') (prod_sub Dsub2 Dsub1)
      <- subtype_reg1 D1 D1' Dsub1
      <- subtype_reg1 D2 D2' Dsub2.
- :
   subtype_reg2 (kof_prod D2 D1) (kof_prod D2' D1') (prod_sub Dsub2 Dsub1)
      <- subtype_reg2 D1 D1' Dsub1
      <- subtype_reg2 D2 D2' Dsub2.
- :
   subtype_reg1 (kof_exp D2 D1) (kof_exp D2' D1') (exp_sub Dtr Dsub)
      <- subtype_reg1 D1 D1' Dsub
      <- tr_reg Dtr (propok_numeq D2' X1).
- :
   subtype_reg2 (kof_exp D2' D1') (kof_exp D2 D1) (exp_sub Dtr Dsub)
      <- subtype_reg2 D1' D1 Dsub
      <- tr_reg Dtr (propok_numeq X1 D2').
- :
   subtype_reg1 (kof_code D1) (kof_code D2) (code_sub D)
      <- subrtype_reg2 D D2 D1.
- :
   subtype_reg2 (kof_code D1) (kof_code D2) (code_sub D)
      <- subrtype_reg1 D D2 D1.
- :
   subtype_reg1 (kof_arrow D1) (kof_arrow D2) (arrow_sub D)
      <- subrtype_reg2 D D2 D1.
- :
   subtype_reg2 (kof_arrow D1) (kof_arrow D2) (arrow_sub D)
      <- subrtype_reg1 D D2 D1.
- :
   subtype_reg1 (kof_cbox Dkof2 Dkof1) (kof_cbox Dkof2' Dkof1') (cbox_sub D2 D1)
      <- subtype_reg1 Dkof1 Dkof1' D1
      <- subtype_reg1 Dkof2 Dkof2' D2.
- :
   subtype_reg2 (kof_cbox Dkof2 Dkof1) (kof_cbox Dkof2' Dkof1') (cbox_sub D2 D1)
      <- subtype_reg2 Dkof1 Dkof1' D1
      <- subtype_reg2 Dkof2 Dkof2' D2.
- :
   subtype_reg1 (kof_cmbox Dkof2 Dkof1) (kof_cmbox Dkof2' Dkof1')
      (cmbox_sub X1 D2 X2 D1)
      <- subtype_reg1 Dkof1 Dkof1' D1
      <- subtype_reg1 Dkof2 Dkof2' D2.
- :
   subtype_reg2 (kof_cmbox Dkof2 Dkof1) (kof_cmbox Dkof2' Dkof1')
      (cmbox_sub X1 D2 X2 D1)
      <- subtype_reg2 Dkof1 Dkof1' D1
      <- subtype_reg2 Dkof2 Dkof2' D2.
- :
   subtype_reg1 (kof_sptr Dkof1) (kof_sptr Dkof2) (sptr_sub Dsub)
      <- subtype_reg1 Dkof1 Dkof2 Dsub.
- :
   subtype_reg2 (kof_sptr Dkof1) (kof_sptr Dkof2) (sptr_sub Dsub)
      <- subtype_reg2 Dkof1 Dkof2 Dsub.
- :
   subtype_reg1 (kof_forall (\t:tp. \x:kof t K1. D1' t x) Dpon)
      (kof_forall (\t:tp. \x:kof t K1. D2 t x) Dpon)
      (forall_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon -> subtype_reg1 (D1' t d1) (D2 t d1) (D t d1 d2)).
- :
   subtype_reg2 (kof_forall (\t:tp. \x:kof t K1. D1 t x) Dpon)
      (kof_forall (\t:tp. \x:kof t K1. D2' t x) Dpon)
      (forall_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon -> subtype_reg2 (D1 t d1) (D2' t d1) (D t d1 d2)).
- :
   subtype_reg1 (kof_exists (\t:tp. \x:kof t K1. D1' t x) Dpon)
      (kof_exists (\t:tp. \x:kof t K1. D2 t x) Dpon)
      (exists_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon -> subtype_reg1 (D1' t d1) (D2 t d1) (D t d1 d2)).
- :
   subtype_reg2 (kof_exists (\t:tp. \x:kof t K1. D1 t x) Dpon)
      (kof_exists (\t:tp. \x:kof t K1. D2' t x) Dpon)
      (exists_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon -> subtype_reg2 (D1 t d1) (D2' t d1) (D t d1 d2)).
- :
   subtype_reg1 (kof_guard Dkof Dpropok) (kof_guard Dkof' Dpropok)
      (guard_sub (\x:tr P1. D x))
      <- (Pi d:tr P1. tr_reg d Dpropok -> subtype_reg1 Dkof Dkof' (D d)).
- :
   subtype_reg2 (kof_guard Dkof' Dpropok) (kof_guard Dkof Dpropok)
      (guard_sub (\x:tr P1. D x))
      <- (Pi d:tr P1. tr_reg d Dpropok -> subtype_reg2 Dkof' Dkof (D d)).
- :
   subtype_reg1 (kof_assert Dkof Dpropok) (kof_assert Dkof' Dpropok)
      (assert_sub (\x:tr P1. D x))
      <- (Pi d:tr P1. tr_reg d Dpropok -> subtype_reg1 Dkof Dkof' (D d)).
- :
   subtype_reg2 (kof_assert Dkof' Dpropok) (kof_assert Dkof Dpropok)
      (assert_sub (\x:tr P1. D x))
      <- (Pi d:tr P1. tr_reg d Dpropok -> subtype_reg2 Dkof' Dkof (D d)).
- :
   subtype_reg1 (kof_join D2 D1) (kof_join D2' D1') (join_sub Dsub2 Dsub1)
      <- subtype_reg1 D1 D1' Dsub1
      <- subtype_reg1 D2 D2' Dsub2.
- :
   subtype_reg2 (kof_join D2 D1) (kof_join D2' D1') (join_sub Dsub2 Dsub1)
      <- subtype_reg2 D1 D1' Dsub1
      <- subtype_reg2 D2 D2' Dsub2.
- :
   subtype_reg1 X2 (Dkoffun T' Dkofarg)
      (forall_elim Dsat (\t:tp. \x:kof t K. Dkoffun t x))
      <- sat_reg Dsat Dkofarg X1.
- :
   subtype_reg2 (kof_forall (\t:tp. \x:kof t K1. Dkoffun t x) Dpon) X2
      (forall_elim Dsat (\t:tp. \x:kof t K1. Dkoffun t x))
      <- sat_reg Dsat X1 Dpon.
- :
   subtype_reg1 X2 (kof_exists (\t:tp. \x:kof t K1. Dkoffun t x) Dpon)
      (exists_intro Dsat (\t:tp. \x:kof t K1. Dkoffun t x))
      <- sat_reg Dsat X1 Dpon.
- :
   subtype_reg2 (Dkoffun T' Dkofarg) X2
      (exists_intro Dsat (\t:tp. \x:kof t K. Dkoffun t x))
      <- sat_reg Dsat Dkofarg X1.
- : subtype_reg1 D (kof_forall (\t:tp. \d:kof t K1. D) Dpon) (gen Dpon).
- :
   subtype_reg2 D' (kof_forall (\t:tp. \x:kof t K. D t x) X1) (gen X2)
      <- strengthen (\t:tp. \x:kof t K. D t x) D'.
- :
   subtype_reg1 (kof_exists (\t:tp. \x:kof t K. D t x) X1) D' (cogen X2)
      <- strengthen (\t:tp. \x:kof t K. D t x) D'.
- : subtype_reg2 (kof_exists (\t:tp. \d:kof t K1. D) Dpon) D (cogen Dpon).
- : subtype_reg1 (kof_guard D' X1) D' (guard_elim Dtr).
- : subtype_reg2 (kof_guard D Dpropok) D (guard_elim Dtr) <- tr_reg Dtr Dpropok.
- : subtype_reg1 D (kof_guard D Dpropok) (gen_guard Dpropok).
- : subtype_reg2 D' (kof_guard D' X1) (gen_guard X2).
- : subtype_reg1 D (kof_assert D D') (assert_intro Dtr) <- tr_reg Dtr D'.
- : subtype_reg2 D' (kof_assert D' X1) (assert_intro X2).
- : subtype_reg1 (kof_assert D' X1) D' (cogen_assert X2).
- : subtype_reg2 (kof_assert D Dpropok) D (cogen_assert Dpropok).
- :
   subtype_reg1 X1 (kof_rec (\t:tp. \x:kof t kt. D t x))
      (rec_intro (\t:tp. \x:kof t kt. D t x)).
- :
   subtype_reg2 (D (rec (\t:tp. T' t)) (kof_rec (\t:tp. \x:kof t kt. D t x))) X1
      (rec_intro (\t:tp. \x:kof t kt. D t x)).
- :
   subtype_reg1 X1 (D (rec (\t:tp. T' t)) (kof_rec (\t:tp. \x:kof t kt. D t x)))
      (rec_elim (\t:tp. \x:kof t kt. D t x)).
- :
   subtype_reg2 (kof_rec (\t:tp. \x:kof t kt. D t x)) X1
      (rec_elim (\t:tp. \x:kof t kt. D t x)).
- :
   subtype_reg1 X2 (kof_exp Dkof kof_ns) (nsexp_sub Dsat)
      <- sat_reg Dsat X1 (pon_tn Dkof).
- : subtype_reg2 Dkof X2 (nsexp_sub Dsat) <- sat_reg Dsat Dkof X1.
- : subtype_reg1 X1 D (void_sub D).
- : subtype_reg2 kof_void X1 (void_sub X2).
- : subtype_reg1 X1 D (raa D X2 X3).
- : subtype_reg2 D X1 (raa X2 D X3).
- :
   subtype_reg1 D (kof_meet D2 D1) (meet_intro Dsub2 Dsub1)
      <- subtype_reg1 D D1 Dsub1
      <- subtype_reg1 D D2 Dsub2.
- :
   subtype_reg2 D' (kof_meet X1 D1) (meet_intro X2 Dsub1)
      <- subtype_reg2 D' D1 Dsub1.
- : subtype_reg1 (kof_meet X1 D') D' (meet_elim1 X2).
- : subtype_reg2 (kof_meet D2 D1) D1 (meet_elim1 D2).
- : subtype_reg1 (kof_meet D' X1) D' (meet_elim2 X2).
- : subtype_reg2 (kof_meet D2 D1) D2 (meet_elim2 D1).
- : subtype_reg1 D1 (kof_join D2 D1) (join_intro1 D2).
- : subtype_reg2 D' (kof_join X1 D') (join_intro1 X2).
- : subtype_reg2 D' (kof_join D' X1) (join_intro2 X2).
- : subtype_reg1 D2 (kof_join D2 D1) (join_intro2 D1).
- :
   subtype_reg1 (kof_join X1 D1) D' (join_elim X2 Dsub1)
      <- subtype_reg1 D1 D' Dsub1.
- :
   subtype_reg2 (kof_join D2 D1) D (join_elim Dsub2 Dsub1)
      <- subtype_reg2 D1 D Dsub1
      <- subtype_reg2 D2 D Dsub2.
- :
   subtype_reg1 (kof_meet (kof_join D2 D1) D)
      (kof_join (kof_meet D2 D) (kof_meet D1 D)) meet_dist_join.
- :
   subtype_reg2 (kof_meet (kof_join D2 D1) D)
      (kof_join (kof_meet D2 X1) (kof_meet D1 D)) meet_dist_join.
- :
   subtype_reg1 (kof_meet (kof_prod D2' D1') (kof_prod D2 D1))
      (kof_prod (kof_meet D2' D2) (kof_meet D1' D1)) (meet_dist_prod X1 X2).
- :
   subtype_reg2 (kof_meet (kof_prod D2' D1') (kof_prod D2 D1))
      (kof_prod (kof_meet D2' D2) (kof_meet D1' D1)) (meet_dist_prod X1 X2).
- :
   subtype_reg1 (kof_meet (kof_prod D2' D1') (kof_prod D2 D1))
      (kof_prod (kof_meet D2' D2) (kof_meet D1' D1)) (meet_dist_prod' X1 X2).
- :
   subtype_reg2 (kof_meet (kof_prod D2' D1') (kof_prod D2 D1))
      (kof_prod (kof_meet D2' D2) (kof_meet D1' D1)) (meet_dist_prod' X1 X2).
- :
   subtype_reg1 (kof_prod (kof_join D2 D1) D)
      (kof_join (kof_prod D2 D) (kof_prod D1 D)) prod_dist_join1.
- :
   subtype_reg2 (kof_prod (kof_join D2 D1) D)
      (kof_join (kof_prod D2 X1) (kof_prod D1 D)) prod_dist_join1.
- :
   subtype_reg1 (kof_prod D (kof_join D2 D1))
      (kof_join (kof_prod D D2) (kof_prod D D1)) prod_dist_join2.
- :
   subtype_reg2 (kof_prod D (kof_join D2 D1))
      (kof_join (kof_prod X1 D2) (kof_prod D D1)) prod_dist_join2.
- : subtype_reg1 X1 kof_void (prod_dist_void1 X2).
- : subtype_reg2 (kof_prod D kof_void) X1 (prod_dist_void1 D).
- : subtype_reg1 X1 kof_void (prod_dist_void2 X2).
- : subtype_reg2 (kof_prod kof_void D) X1 (prod_dist_void2 D).
- :
   subtype_reg1 (kof_meet (kof_cbox D2b D2a) (kof_cbox D1b D1a))
      (kof_cbox (kof_meet D2b D1b) (kof_meet D2a D1a))
      (meet_dist_cbox X1 X2 X3 X4).
- :
   subtype_reg2 (kof_meet (kof_cbox D2b D2a) (kof_cbox D1b D1a))
      (kof_cbox (kof_meet D2b D1b) (kof_meet D2a D1a))
      (meet_dist_cbox X1 X2 X3 X4).
- :
   subtype_reg1 (kof_meet (kof_cmbox D2b D2a) (kof_cmbox D1b D1a))
      (kof_cmbox (kof_meet D2b D1b) (kof_meet D2a D1a))
      (meet_dist_cmbox X1 X2 X3 X4).
- :
   subtype_reg2 (kof_meet (kof_cmbox D2b D2a) (kof_cmbox D1b D1a))
      (kof_cmbox (kof_meet D2b D1b) (kof_meet D2a D1a))
      (meet_dist_cmbox X1 X2 X3 X4).
- :
   subtype_reg1 (kof_meet D2 (kof_assert D1 D)) (kof_assert (kof_meet D2 D1) D)
      assert_dist_meet1.
- :
   subtype_reg2 (kof_meet D2 (kof_assert D1 D)) (kof_assert (kof_meet D2 D1) D)
      assert_dist_meet1.
- :
   subtype_reg1 (kof_meet (kof_assert D2 D) D1) (kof_assert (kof_meet D2 D1) D)
      assert_dist_meet2.
- :
   subtype_reg2 (kof_meet (kof_assert D2 D) D1) (kof_assert (kof_meet D2 D1) D)
      assert_dist_meet2.
- :
   subtype_reg1 (kof_meet D2 (kof_exists (\t:tp. \x:kof t K1. D1 t x) Dpon))
      (kof_exists (\t:tp. \d:kof t K1. kof_meet D2 (D1 t d)) Dpon)
      exists_dist_meet1.
- :
   subtype_reg2 (kof_meet D2' (kof_exists (\t:tp. \x:kof t K1. D1 t x) Dpon))
      (kof_exists (\t:tp. \d:kof t K1. kof_meet (D2 t d) (D1 t d)) Dpon)
      exists_dist_meet1
      <- strengthen (\t:tp. \x:kof t K1. D2 t x) D2'.
- :
   subtype_reg1 (kof_meet (kof_exists (\t:tp. \x:kof t K1. D2 t x) Dpon) D1)
      (kof_exists (\t:tp. \d:kof t K1. kof_meet (D2 t d) D1) Dpon)
      exists_dist_meet2.
- :
   subtype_reg2 (kof_meet (kof_exists (\t:tp. \x:kof t K1. D2 t x) Dpon) D1')
      (kof_exists (\t:tp. \d:kof t K1. kof_meet (D2 t d) (D1 t d)) Dpon)
      exists_dist_meet2
      <- strengthen (\t:tp. \x:kof t K1. D1 t x) D1'.
- : subtype_reg1 (kof_cmbox D2 D1) (kof_cbox D2 D1) cforgetm.
- : subtype_reg2 (kof_cmbox D2 D1) (kof_cbox D2 D1) cforgetm.
- : subtype_reg1 (kof_cbox (kof_prod D2 D1) D0) (kof_cbox D1 D0) (rtruncate X1).
- : subtype_reg2 (kof_cbox (kof_prod D2 D1) D0) (kof_cbox D1 D0) (rtruncate D2).
- :
   subtype_reg1 (kof_cmbox (kof_prod D2 D1) D0) (kof_cmbox D1 D0)
      (rtruncatem X1).
- :
   subtype_reg2 (kof_cmbox (kof_prod D2 D1) D0) (kof_cmbox D1 D0)
      (rtruncatem D2).
- : subtype_reg1 (kof_cbox D0 (kof_prod D2 D1)) (kof_cbox D0 D2) (ltruncate X1).
- : subtype_reg2 (kof_cbox D0 (kof_prod D2 D1)) (kof_cbox D0 D2) (ltruncate D1).
- :
   subtype_reg1 (kof_cmbox D0 (kof_prod D2 D1)) (kof_cmbox D0 D2)
      (ltruncatem X1).
- :
   subtype_reg2 (kof_cmbox D0 (kof_prod D2 D1)) (kof_cmbox D0 D2)
      (ltruncatem D1).
- :
   subtype_reg1 (kof_prod (kof_prod D3 D2) D1) (kof_prod D3 (kof_prod D2 D1))
      lassoc.
- :
   subtype_reg2 (kof_prod (kof_prod D3 D2) D1) (kof_prod D3 (kof_prod D2 D1))
      lassoc.
- :
   subtype_reg1 (kof_prod D3 (kof_prod D2 D1)) (kof_prod (kof_prod D3 D2) D1)
      rassoc.
- :
   subtype_reg2 (kof_prod D3 (kof_prod D2 D1)) (kof_prod (kof_prod D3 D2) D1)
      rassoc.
- : subtype_reg1 D (kof_prod D kof_b0) luniti.
- : subtype_reg2 D' (kof_prod D' X1) luniti.
- : subtype_reg1 (kof_prod D' X1) D' lunite.
- : subtype_reg2 (kof_prod D kof_b0) D lunite.
- : subtype_reg1 D (kof_prod kof_b0 D) runiti.
- : subtype_reg2 D' (kof_prod X1 D') runiti.
- : subtype_reg1 (kof_prod X1 D') D' runite.
- : subtype_reg2 (kof_prod kof_b0 D) D runite.
- :
   subtype_reg1 (kof_exp X1 D') D'' (explode X2 Dte X3) <- kof_tp_exp D' Dte D''.
- :
   subtype_reg2 (kof_exp D2 D1) X2 (explode D1 X3 Dtr)
      <- tr_reg Dtr (propok_numeq X1 D2).
- :
   subtype_reg1 X2 (kof_exp D2 D1) (implode D1 X3 Dtr)
      <- tr_reg Dtr (propok_numeq X1 D2).
- :
   subtype_reg2 D'' (kof_exp X1 D') (implode X2 Dte X3) <- kof_tp_exp D' Dte D''.
- :
   subtype_reg1 (kof_exp X2 D) (kof_prod (kof_exp D2 D) (kof_exp D1 D))
      (partition Dtr)
      <- tr_reg Dtr (propok_numeq (kof_numadd D2 D1) X1).
- :
   subtype_reg2 (kof_exp D12 D) (kof_prod (kof_exp X2 D) X3) (partition Dtr)
      <- tr_reg Dtr (propok_numeq X1 D12).
- :
   subtype_reg1 (kof_prod (kof_exp X2 D) X3) (kof_exp D12 D) (conjoin Dtr)
      <- tr_reg Dtr (propok_numeq X1 D12).
- :
   subtype_reg2 (kof_prod (kof_exp D2 D) (kof_exp D1 D)) (kof_exp X2 D)
      (conjoin Dtr)
      <- tr_reg Dtr (propok_numeq (kof_numadd D2 D1) X1).
- : subtype_reg1 X1 (kof_inti _) (seteq_forget X2).
- : subtype_reg2 (kof_seteq Dkof) X1 (seteq_forget Dkof).
- : subtype_reg1 (kof_prod D2 D1) D1 (codeappend X1).
- : subtype_reg2 (kof_prod D2 D1) D1 (codeappend D2).
- : subtype_reg1 X1 kof_void (int_cptr_contra X2 X3).
- :
   subtype_reg2 (kof_meet (kof_cbox Dkof2 Dkof1) (kof_setlt _ kof_number)) X1
      (int_cptr_contra Dkof2 Dkof1).
- :
   subtype_reg1 (kof_seteq D) (kof_assert (kof_seteq D) (propok_numeq D D))
      seteq_goodnum.
- : subtype_reg2 (kof_seteq D) (kof_assert (kof_seteq D) X1) seteq_goodnum.
- :
   subtype_reg1 (kof_exp D2 D1)
      (kof_assert (kof_exp D2 D1) (propok_numeq D2 D2)) exp_goodnum.
- : subtype_reg2 (kof_exp D2 D1) (kof_assert (kof_exp D2 D1) X1) exp_goodnum.
- :
   subtype_reg1 Dkof (kof_assert Dkof (propok_good _ Dkof')) (sat_goodnum Dsat)
      <- sat_reg Dsat X1 (pon_tn Dkof').
- : subtype_reg2 Dkof (kof_assert Dkof X1) (sat_goodnum X2).
- :
   subtype_reg1 (kof_meet (kof_seteq D2) (kof_seteq D1))
      (kof_assert (kof_seteq D1) (propok_numeq D2 D1)) seteq_meet.
- :
   subtype_reg2 (kof_meet (kof_seteq D2) (kof_seteq D1))
      (kof_assert X1 (propok_numeq D2 D1)) seteq_meet.
- :
   subtype_reg1 X2
      (kof_join (kof_join (kof_setgt _ Dkof) (kof_seteq Dkof)) (kof_setlt _ Dkof))
      (trichotomy Dtr)
      <- tr_reg Dtr (propok_numeq Dkof X1).
- : subtype_reg2 (kof_inti _) X1 (trichotomy X2).
- :
   subtype_reg1 X1 (kof_exists (\t:tp. \d:kof t knum. kof_seteq d) pon_true)
      focus.
- : subtype_reg2 (kof_inti _) X1 focus.
- : subrtype_reg1 subrtype_reflex D D.
- : subrtype_reg2 subrtype_reflex D D.
- :
   subrtype_reg1 (subrtype_trans D23 D12) D1 D3
      <- subrtype_reg1 D12 D1 D2
      <- subrtype_reg1 D23 D2 D3.
- :
   subrtype_reg2 (subrtype_trans D23 D12) D1 D3
      <- subrtype_reg2 D23 D2 D3
      <- subrtype_reg2 D12 D1 D2.
- :
   subrtype_reg1 (subrtype_reg Dsub Drtupdate Drtlookup) Drtpok Drtpok'
      <- rtlookup_reg Drtpok Drtlookup Dkof1
      <- subtype_reg1 Dkof1 Dkof2 Dsub
      <- rtupdate_reg Drtpok Dkof2 Drtupdate Drtpok'.
- :
   subrtype_reg2 (subrtype_reg Dsub Drtupdate Drtlookup) Drtpok' Drtpok
      <- rtupdate_rtlookup Drtupdate Drtlookup'
      <- rtlookup_reg Drtpok Drtlookup' Dkof2
      <- subtype_reg2 Dkof1 Dkof2 Dsub
      <- rtlookup_update_invert Drtlookup Drtupdate Drtupdate'
      <- rtupdate_reg Drtpok Dkof1 Drtupdate' Drtpok'.
- :
   subrtype_reg1 (subrtype_sp Dsub Dztupdate Dztlookup) Drtpok Drtpok'
      <- ztlookup_reg Drtpok Dztlookup Dkof1
      <- subtype_reg1 Dkof1 Dkof2 Dsub
      <- ztupdate_reg Drtpok Dkof2 Dztupdate Drtpok'.
- :
   subrtype_reg2 (subrtype_sp Dsub Dztupdate Dztlookup) Drtpok' Drtpok
      <- ztupdate_ztlookup Dztupdate Dztlookup'
      <- ztlookup_reg Drtpok Dztlookup' Dkof2
      <- subtype_reg2 Dkof1 Dkof2 Dsub
      <- ztlookup_update_invert Dztlookup Dztupdate Dztupdate'
      <- ztupdate_reg Drtpok Dkof1 Dztupdate' Drtpok'.
- :
   subrtype_reg1 (subrtype_all Drsub Dsub) (rtpok_ Drtpok1 Dkof1)
      (rtpok_ Drtpok2 Dkof2)
      <- subtype_reg1 Dkof1 Dkof2 Dsub
      <- subrtype_reg1* Drsub Drtpok1 Drtpok2.
- :
   subrtype_reg2 (subrtype_all Drsub Dsub) (rtpok_ Drtpok1 Dkof1)
      (rtpok_ Drtpok2 Dkof2)
      <- subtype_reg2 Dkof1 Dkof2 Dsub
      <- subrtype_reg2* Drsub Drtpok1 Drtpok2.
- : subrtype_reg1* subrtype_nil rtpok_nil rtpok_nil.
- :
   subrtype_reg1* (subrtype_cons Dsubr Dsub) (rtpok_cons D1r Dkof1)
      (rtpok_cons D2r Dkof2)
      <- subtype_reg1 Dkof1 Dkof2 Dsub
      <- subrtype_reg1* Dsubr D1r D2r.
- : subrtype_reg2* subrtype_nil rtpok_nil rtpok_nil.
- :
   subrtype_reg2* (subrtype_cons Dsubr Dsub) (rtpok_cons D1r Dkof1)
      (rtpok_cons D2r Dkof2)
      <- subtype_reg2 Dkof1 Dkof2 Dsub
      <- subrtype_reg2* Dsubr D1r D2r.
boxsub_reg :
   Pi T':tp. Pi N:nat. Pi T1:tp. Pi T2:tp.
      boxsub T' N T1 T2 -> kof T' kt -> kof T1 kt -> kof T2 kt -> type.
-base :
   boxsub_reg (boxsub_base D2 D1 Dsub) D D1' D2
      <- sat_reg D1 D1' X1
      <- subtype_reg2 D (kof_prod D2 D1') Dsub.
-transl :
   boxsub_reg (boxsub_transl Dsub D) Dkof' Dkof1 Dkof2
      <- boxsub_reg D Dkof Dkof1 Dkof2
      <- subtype_reg2 Dkof' Dkof Dsub.
-transr :
   boxsub_reg (boxsub_transr D2 D1 D) Dkof Dkof1' Dkof2'
      <- boxsub_reg D Dkof Dkof1 Dkof2
      <- subtype_reg1 Dkof1 Dkof1' D1
      <- subtype_reg1 Dkof2 Dkof2' D2.
-hleft :
   boxsub_reg (boxsub_shleft X1 X2 D) Dkof Dkof1a (kof_prod Dkof2 Dkof1b)
      <- boxsub_reg D Dkof (kof_prod Dkof1b Dkof1a) Dkof2.
-right :
   boxsub_reg (boxsub_shright X1 X2 D) Dkof (kof_prod Dkof2a Dkof1) Dkof2b
      <- boxsub_reg D Dkof Dkof1 (kof_prod Dkof2b Dkof2a).
-meet :
   boxsub_reg (boxsub_meet D' D) Dkof (kof_meet Dkof1' Dkof1)
      (kof_meet Dkof2' Dkof2)
      <- boxsub_reg D Dkof Dkof1 Dkof2
      <- boxsub_reg D' X1 Dkof1' Dkof2'.
binary_int_product :
   Pi N:nat. Pi End1:endian. Pi V1:val. Pi B:binary N. Pi N1:nat.
      binary_int End1 V1 B -> product N1 bytebits N -> type.
-null : binary_int_product binary_int_null product_z.
-cnsbig :
   binary_int_product (binary_int_cons_big Dba Dbi) (product_s Dsum Dprod)
      <- binary_append_length Dba Dsum
      <- binary_int_product Dbi Dprod.
-cnslit :
   binary_int_product (binary_int_cons_lit Dba Dbi) (product_s Dsum' Dprod)
      <- binary_append_length Dba Dsum
      <- sum_commute Dsum Dsum'
      <- binary_int_product Dbi Dprod.
of_reg : Pi S:htp. Pi V:val. Pi T':tp. of S V T' -> kof T' kt -> type.
-lit : of_reg (of_atom aof_lit X1) kof_b1.
-hptr :
   of_reg (of_atom (aof_chpointer X4 Dbsub X5 X6) X7) (kof_cmbox D3 D2)
      <- boxsub_reg Dbsub X1 (kof_prod D2 X2) (kof_prod X3 D3).
-ptr :
   of_reg (of_atom (aof_cpointer Dbsub X4) X5) (kof_cbox D3 D2)
      <- boxsub_reg Dbsub X1 (kof_prod D2 X2) (kof_prod X3 D3).
-fun : of_reg (of_atom (aof_function X1 D X2 X3 X4) X5) (kof_arrow D).
-ptr : of_reg (of_spointer X1 D X2) (kof_sptr D') <- of_reg D D'.
-gotptr : of_reg (of_atom aof_gotpointer X1) kof_gotptr.
-code : of_reg (of_code X1 D X2) (kof_code D).
-eteq : of_reg (of_seteq Dbi Dp) (kof_seteq kof_number).
-append :
   of_reg (of_append Dof2 Dof1 X1) (kof_prod D2 D1)
      <- of_reg Dof1 D1
      <- of_reg Dof2 D2.
-ns : of_reg of_ns kof_ns.
-null : of_reg of_null kof_b0.
-forall :
   of_reg (forall_intro (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1) Dpon)
      (kof_forall (\t:tp. \x:kof t K1. D t x) Dpon)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon -> of_reg (Dof t d1 d2) (D t d1)).
-guard :
   of_reg (guard_intro (\x:tr P1. Dof x) Dpropok) (kof_guard Dkof Dpropok)
      <- (Pi d:tr P1. tr_reg d Dpropok -> of_reg (Dof d) Dkof).
-meet :
   of_reg (meet_intro_val D2 D1) (kof_meet D2' D1')
      <- of_reg D1 D1'
      <- of_reg D2 D2'.
-ub : of_reg (subsume Dsub Dof) D2 <- of_reg Dof D1 <- subtype_reg1 D1 D2 Dsub.
-ns : of_reg (of_big_ns Dte X1) Dkof <- kof_tp_exp kof_ns Dte Dkof.
-top : of_reg of_top kof_top.
-zctra : of_reg (of_size_contra D X1 X2 X3 X4) D.
oof_reg :
   Pi G:rtp. Pi S:htp. Pi O:operand. Pi T':tp.
      rtpok G -> oof S G O T' -> kof T' kt -> type.
-im : oof_reg X1 (oof_im Dof X2) Dkof <- of_reg Dof Dkof.
-rco : oof_reg Drtpok (oof_rco Dlook) Dkof <- rtlookup_reg Drtpok Dlook Dkof.
-mco : oof_reg X2 (oof_mco Dsat X3 X4) Dkof <- sat_reg Dsat Dkof X1.
-imco : oof_reg X2 (oof_imco Dsat X3 X4 X5) Dkof <- sat_reg Dsat Dkof X1.
-imco_a :
   oof_reg X2 (oof_imco_array X3 Dsat X4 X5 X6) Dkof <- sat_reg Dsat Dkof X1.
-co : oof_reg X2 (oof_zco X3 X4 X5 Dsat X6 X7) Dkof <- sat_reg Dsat Dkof X1.
-pco :
   oof_reg Drtpok (oof_spco Dlook) (kof_sptr Dkof)
      <- ztlookup_reg Drtpok Dlook Dkof.
-comb :
   oof_reg Drtpok (oof_combine Doof2 Doof1) (kof_prod Dkof2 Dkof1)
      <- oof_reg Drtpok Doof1 Dkof1
      <- oof_reg Drtpok Doof2 Dkof2.
-proj : oof_reg Drtpok (oof_proj Dsat X2 X3) Dkof <- sat_reg Dsat Dkof X1.
-ub :
   oof_reg Drtpok (oof_subsume Dsub Doof) Dkof2
      <- oof_reg Drtpok Doof Dkof1
      <- subtype_reg1 Dkof1 Dkof2 Dsub.
-rsub :
   oof_reg Drtpok1 (oof_rsubsume Drsub Doof) Dkof
      <- subrtype_reg1 Drsub Drtpok1 Drtpok2
      <- oof_reg Drtpok2 Doof Dkof.
update_reg :
   Pi G:rtp. Pi T':tp. Pi S:htp. Pi E:dest. Pi G':rtp.
      rtpok G -> kof T' kt -> update S G E T' G' -> rtpok G' -> type.
-rdest :
   update_reg Drtpok X2 (update_rdest Drtupdate Dsat) Drtpok'
      <- sat_reg Dsat Dkof X1
      <- rtupdate_reg Drtpok Dkof Drtupdate Drtpok'.
-mdest : update_reg Drtpok X1 (update_mdest X2 X3 X4) Drtpok.
-imdest : update_reg Drtpok X1 (update_imdest X2 X3 X4 X5) Drtpok.
-imdsta : update_reg Drtpok X1 (update_imdest_array X2 X3 X4 X5 X6) Drtpok.
-dest :
   update_reg Drtpok1 X4
      (update_zdest Dztupdate2 Dztupdate1 Dsub Dztlook X5 X6 X7 Doof Dsat2')
      Drtpok3
      <- oof_reg Drtpok1 Doof (kof_sptr (kof_prod (kof_prod Dkof3 X3) Dkof1))
      <- sat_reg Dsat2' Dkof2' X2
      <- ztlookup_reg Drtpok1 Dztlook Dkofz
      <- subtype_reg1 Dkofz (kof_prod X1 Dkofz') Dsub
      <- ztupdate_reg Drtpok1
            (kof_prod (kof_prod (kof_prod Dkof3 Dkof2') Dkof1) Dkofz')
            Dztupdate1 Drtpok2
      <- rtupdate_reg Drtpok2
            (kof_sptr (kof_prod (kof_prod Dkof3 Dkof2') Dkof1)) Dztupdate2
            Drtpok3.
-dest2 :
   update_reg Drtpok1 X4
      (update_zdest2 Dztupdate Dsub Dztlook X5 X6 X7 Doof Dsat2') Drtpok2
      <- oof_reg Drtpok1 Doof (kof_sptr (kof_prod (kof_prod Dkof3 X3) Dkof1))
      <- sat_reg Dsat2' Dkof2' X2
      <- ztlookup_reg Drtpok1 Dztlook Dkofz
      <- subtype_reg1 Dkofz (kof_prod X1 Dkofz') Dsub
      <- ztupdate_reg Drtpok1
            (kof_prod (kof_prod (kof_prod Dkof3 Dkof2') Dkof1) Dkofz') Dztupdate
            Drtpok2.
-pdest :
   update_reg Drtpok Dkof (update_spdest Dztupdate X1 X2 X3 Dsub) Drtpok'
      <- subtype_reg1 Dkof (kof_sptr Dkof'') Dsub
      <- ztupdate_reg Drtpok Dkof'' Dztupdate Drtpok'.
-proj :
   update_reg Drtpok Dkof2 (update_projdest Dupdate X2 X3 X4 Doof) Drtpok'
      <- oof_reg Drtpok Doof (kof_prod (kof_prod Dkof3 X1) Dkof1)
      <- update_reg Drtpok (kof_prod (kof_prod Dkof3 Dkof2) Dkof1) Dupdate
            Drtpok'.
-comb :
   update_reg Drtpok (kof_prod Dkof2 Dkof1)
      (update_combdest Dupdate2 Dupdate1 X1) Drtpok''
      <- update_reg Drtpok Dkof1 Dupdate1 Drtpok'
      <- update_reg Drtpok' Dkof2 Dupdate2 Drtpok''.
-ub :
   update_reg Drtpok Dkof (update_subsume Dsub Dupdate) Drtpok'
      <- subtype_reg1 Dkof Dkof' Dsub
      <- update_reg Drtpok Dkof' Dupdate Drtpok'.
-rsub :
   update_reg Drtpok Dkof (update_rsubsume Drsub Dupdate) Drtpok''
      <- update_reg Drtpok Dkof Dupdate Drtpok'
      <- subrtype_reg1 Drsub Drtpok' Drtpok''.
goodheap_leq :
   Pi H:heap. Pi L:loc. Pi L':loc.
      goodheap* H L -> loc_leq L L' -> goodheap* H L' -> type.
goodheap_leq_nil : goodheap_leq goodheap_nil X1 goodheap_nil.
goodheap_leq_cons :
   goodheap_leq (goodheap_cons Dgoodheap (loc_lt_ Dlt)) (loc_leq_ Dleq)
      (goodheap_cons Dgoodheap (loc_lt_ Dlt'))
      <- lt_leq_trans Dlt Dleq Dlt'.
goodheap_tail :
   Pi L:loc. Pi V:val. Pi H:heap. goodheap (hcons L V H) -> goodheap H -> type.
goodheap_tail_ : goodheap_tail (goodheap_ (goodheap_cons D X1)) (goodheap_ D).
goodheap_tail' :
   Pi L:loc. Pi V:val. Pi H:heap.
      goodheap (hcons L V H) -> goodheap* H L -> type.
goodheap_tail'_ : goodheap_tail' (goodheap_ (goodheap_cons D X1)) D.
typed_heap_good :
   Pi S:htp. Pi L1:loc. Pi S1:htp. Pi H:heap.
      htpok S L1 -> hof S1 H S -> goodheap H -> type.
typed_heap_good* :
   Pi S:htp. Pi N:loc. Pi S1:htp. Pi H:heap.
      htpok S N -> hof S1 H S -> goodheap* H N -> type.
typed_heap_good_nil : typed_heap_good* X1 hof_nil goodheap_nil.
typed_heap_good_cons :
   typed_heap_good* (htpok_cons Dhtpok X1 Dlt) (hof_cons Dhof X2 X3)
      (goodheap_cons D Dlt)
      <- typed_heap_good* Dhtpok Dhof D.
typed_heap_good_ :
   typed_heap_good D1 D2 (goodheap_ D3) <- typed_heap_good* D1 D2 D3.
machineok_heap_good :
   Pi H:heap. Pi L1:loc. Pi R1:rfile. Pi PC1:pc.
      machineok (mach H L1 R1 PC1) -> goodheap H -> type.
machineok_heap_good_std :
   machineok_heap_good (machineok_std Dhtpok X1 X2 X3 Dhof) Dgoodheap
      <- typed_heap_good Dhtpok Dhof Dgoodheap.
machineok_heap_good_init :
   machineok_heap_good (machineok_init Dhtpok X1 X2 X3 X4 X5 X6 Dhof) Dgoodheap
      <- typed_heap_good Dhtpok Dhof Dgoodheap.
goodheap_hlookup :
   Pi H:heap. Pi L:loc. Pi L':loc. Pi V1:val.
      goodheap* H L -> hlookup H L' V1 -> loc_lt L' L -> type.
goodheap_hlookup_hit : goodheap_hlookup (goodheap_cons X1 Dlt) hlookup_hit Dlt.
goodheap_hlookup_miss :
   goodheap_hlookup (goodheap_cons Dgoodheap Dlt') (hlookup_miss Dhlookup X1)
      Dlt''
      <- goodheap_hlookup Dgoodheap Dhlookup Dlt
      <- loc_lt_trans Dlt Dlt' Dlt''.
rof_reg : Pi S:htp. Pi R:rfile. Pi G:rtp. rof S R G -> rtpok G -> type.
rof_reg* :
   Pi N1:nat. Pi S:htp. Pi R:rfile* N1. Pi G:rtp* N1.
      rof* S R G -> rtpok* G -> type.
rof_reg_nil : rof_reg* rof_nil rtpok_nil.
rof_reg_cons :
   rof_reg* (rof_cons Drof Dof X1) (rtpok_cons Drtpok Dkof)
      <- of_reg Dof Dkof
      <- rof_reg* Drof Drtpok.
rof_reg_ :
   rof_reg (rof_ Drof Dof) (rtpok_ Drtpok Dkof)
      <- of_reg Dof Dkof
      <- rof_reg* Drof Drtpok.
calculate : tp -> nat -> type.
calculate_elim : tp -> nat -> type.
calculate_elim_ :
   calculate_elim T' N <- kof T' knum <- reduce T' T' <- calculate T' N.
calculate_numlit : calculate (numlit N) N.
calculate_number : calculate (number B) N <- represents N B.
calculate_numadd :
   calculate (numadd T1 T2) N
      <- calculate T1 N1
      <- calculate T2 N2
      <- sum N1 N2 N.
calculate_nummul :
   calculate (nummul T1 T2) N
      <- calculate T1 N1
      <- calculate T2 N2
      <- product N1 N2 N.
calculate_annot : calculate (annot T' R K) N <- calculate_elim (annot T' R K) N.
calculate_app : calculate (app T1 T2) N <- calculate_elim (app T1 T2) N.
calculate_pi1 : calculate (pi1 T') N <- calculate_elim (pi1 T') N.
calculate_pi2 : calculate (pi2 T') N <- calculate_elim (pi2 T') N.
calculate_kapp : calculate (kapp T' K R) N <- calculate_elim (kapp T' K R) N.
calculate_case :
   calculate (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) N
      <- calculate_elim (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) N.
calculate_unroll : calculate (unroll T') N <- calculate_elim (unroll T') N.
calcloc : tp -> tp -> type.
calcloc_elim : tp -> tp -> type.
calcloc_elim_ :
   calcloc_elim T' N <- kof T' kloc <- reduce T' T' <- calcloc T' N.
calcloc_canon : calcloc TL TL <- canonloc TL.
calcloc_annot : calcloc (annot T' R K) N <- calcloc_elim (annot T' R K) N.
calcloc_app : calcloc (app T1 T2) N <- calcloc_elim (app T1 T2) N.
calcloc_pi1 : calcloc (pi1 T') N <- calcloc_elim (pi1 T') N.
calcloc_pi2 : calcloc (pi2 T') N <- calcloc_elim (pi2 T') N.
calcloc_kapp : calcloc (kapp T' K R) N <- calcloc_elim (kapp T' K R) N.
calcloc_case :
   calcloc (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) N
      <- calcloc_elim (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) N.
calcloc_unroll : calcloc (unroll T') N <- calcloc_elim (unroll T') N.
tra : prop -> type.
trn : prop -> type.
trax : prop -> type.
tra_axiom : tra P <- trax P.
tra_imple : tra P2 <- tra (pimpl P1 P2) <- trn P1.
tra_ande1 : tra P1 <- tra (pand P1 P2).
tra_ande2 : tra P2 <- tra (pand P1 P2).
tra_equiv : tra P <- tra P' <- equivp P' P <- propok P.
trn_atom : trn P <- tra P.
trn_impli : trn (pimpl P1 P2) <- (tra P1 -> trn P2) <- propok P1.
trn_andi : trn (pand P1 P2) <- trn P1 <- trn P2.
trn_ori1 : trn (por P1 P2) <- trn P1 <- propok P2.
trn_ori2 : trn (por P1 P2) <- trn P2 <- propok P1.
trn_ore : trn P <- tra (por P1 P2) <- (tra P1 -> trn P) <- (tra P2 -> trn P).
trn_falsee : trn P <- tra pfalse <- propok P.
trax_numeq_symm : trax (pnumeq T1 T2) <- trn (pnumeq T2 T1).
trax_numeq_trans :
   trax (pnumeq T1 T3) <- trn (pnumeq T1 T2) <- trn (pnumeq T2 T3).
trax_numeq_lit : trax (pnumeq (numlit N) (numlit N)).
trax_numeq_bin : trax (pnumeq (number B) (number B)).
trax_numeq_rep1 : trax (pnumeq (number B) (numlit N)) <- represents N B.
trax_numeq_rep2 : trax (pnumeq (numlit N) (number B)) <- represents N B.
trax_numleq_refl : trax (pnumleq T1 T2) <- trn (pnumeq T1 T2).
trax_numleq_antisymm :
   trax (pnumeq T1 T2) <- trn (pnumleq T1 T2) <- trn (pnumleq T2 T1).
trax_numleq_trans :
   trax (pnumleq T1 T3) <- trn (pnumleq T1 T2) <- trn (pnumleq T2 T3).
trax_numleq_lit : trax (pnumleq (numlit N1) (numlit N2)) <- leq N1 N2.
trax_numleq_good1 : trax (good T1) <- trn (pnumleq T1 T2).
trax_numleq_good2 : trax (good T2) <- trn (pnumleq T1 T2).
trax_numlt_lit : trax (pnumlt (numlit N1) (numlit N2)) <- lt N1 N2.
trax_numlt_bin :
   trax (pnumlt (number B1) (number B2))
      <- add B1 Bdiff B2 zero
      <- is_nonzero Bdiff.
trax_numlt_contra : trax pfalse <- trn (pnumlt T' T').
trax_numadd_commute :
   trax (pnumeq (numadd T1 T2) (numadd T2 T1)) <- trn (good T1) <- trn (good T2).
trax_numadd_assoc :
   trax (pnumeq (numadd T1 (numadd T2 T3)) (numadd (numadd T1 T2) T3))
      <- trn (good T1)
      <- trn (good T2)
      <- trn (good T3).
trax_numadd_ident : trax (pnumeq (numadd T' (numlit 0')) T') <- trn (good T').
trax_numadd_monotone :
   trax (pnumleq (numadd T1 T2) (numadd T1' T2'))
      <- trn (pnumleq T1 T1')
      <- trn (pnumleq T2 T2').
trax_numadd_leq :
   trax (pnumleq T1 (numadd T1 T2)) <- trn (pnumeq T1 T1) <- trn (pnumeq T2 T2).
trax_numadd_lit :
   trax (pnumeq (numadd (numlit N1) (numlit N2)) (numlit N3)) <- sum N1 N2 N3.
trax_numadd_bin :
   trax (pnumeq (numadd (number B1) (number B2)) (number B3))
      <- add B1 B2 B3 zero.
trax_numadd_good1 : trax (good T1) <- trn (good (numadd T1 T2)).
trax_numadd_good2 : trax (good T2) <- trn (good (numadd T1 T2)).
trax_nummul_commute :
   trax (pnumeq (nummul T1 T2) (nummul T2 T1)) <- trn (good T1) <- trn (good T2).
trax_nummul_monotone :
   trax (pnumleq (nummul T1 T2) (nummul T1' T2'))
      <- trn (pnumleq T1 T1')
      <- trn (pnumleq T2 T2').
trax_nummul_lit :
   trax (pnumeq (nummul (numlit N1) (numlit N2)) (numlit N3))
      <- product N1 N2 N3.
trax_loclt_location : trax (ploclt TL1 TL2) <- cloc_lt TL1 TL2.
trax_loclt_trans :
   trax (ploclt T1 T3) <- trn (ploclt T1 T2) <- trn (ploclt T2 T3).
trax_loclt_good1 : trax (goodloc T1) <- trn (ploclt T1 T2).
trax_loclt_good2 : trax (goodloc T2) <- trn (ploclt T1 T2).
trax_goodloc_location : trax (goodloc (location L)).
trc : prop -> type.
trc_impl : trc (pimpl P1 P2) <- (tra P1 -> trn P2) <- propok P1.
trc_and : trc (pand P1 P2) <- trc P1 <- trc P2.
trc_or1 : trc (por P1 P2) <- trc P1 <- propok P2.
trc_or2 : trc (por P1 P2) <- trc P2 <- propok P1.
trc_numeq : trc (pnumeq T1 T2) <- calculate T1 N <- calculate T2 N.
trc_numleq :
   trc (pnumleq T1 T2) <- calculate T1 N1 <- calculate T2 N2 <- leq N1 N2.
trc_loclt :
   trc (ploclt TL1 TL2)
      <- calcloc TL1 TL1'
      <- calcloc TL2 TL2'
      <- cloc_lt TL1' TL2'.
trc_goodloc : trc (goodloc TL) <- calcloc TL T1.
tra_eq : Pi P:prop. Pi P':prop. tra P -> tra P' -> type.
tra_eq_ : tra_eq D D.
trn_eq : Pi P:prop. Pi P':prop. trn P -> trn P' -> type.
trn_eq_ : trn_eq D D.
tra_resp : Pi P:prop. Pi P':prop. prop_eq P P' -> tra P -> tra P' -> type.
- : tra_resp prop_eq_ D D.
tra_reg : Pi P:prop. tra P -> propok P -> type.
trn_reg : Pi P:prop. trn P -> propok P -> type.
trax_reg : Pi P:prop. trax P -> propok P -> type.
-axiom : tra_reg (tra_axiom D) Dpropok <- trax_reg D Dpropok.
-imple :
   tra_reg (tra_imple X2 Dtr) Dpropok <- tra_reg Dtr (propok_impl Dpropok X1).
-ande1 :
   tra_reg (tra_ande1 D) Dpropok1 <- tra_reg D (propok_and Dpropok2 Dpropok1).
-ande2 :
   tra_reg (tra_ande2 D) Dpropok2 <- tra_reg D (propok_and Dpropok2 Dpropok1).
-equiv : tra_reg (tra_equiv D X1 X2) D.
-atom : trn_reg (trn_atom Dtr) Dpropok <- tra_reg Dtr Dpropok.
-impli :
   trn_reg (trn_impli Dpropok1 (\x:tra P1. Dtr x))
      (propok_impl Dpropok2 Dpropok1)
      <- (Pi d:tra P1. tra_reg d Dpropok1 -> trn_reg (Dtr d) Dpropok2).
-andi :
   trn_reg (trn_andi D2 D1) (propok_and Dpropok2 Dpropok1)
      <- trn_reg D1 Dpropok1
      <- trn_reg D2 Dpropok2.
-ori1 :
   trn_reg (trn_ori1 Dpropok2 Dtr) (propok_or Dpropok2 Dpropok1)
      <- trn_reg Dtr Dpropok1.
-ori2 :
   trn_reg (trn_ori2 Dpropok1 Dtr) (propok_or Dpropok2 Dpropok1)
      <- trn_reg Dtr Dpropok2.
-ore :
   trn_reg (trn_ore (\x:tra P3. Dtr2 x) (\x:tra P1. Dtr1 x) Dtr0) Dpropok
      <- tra_reg Dtr0 (propok_or Dpropok2 Dpropok1)
      <- (Pi d:tra P1. tra_reg d Dpropok1 -> trn_reg (Dtr1 d) Dpropok).
-falsee : trn_reg (trn_falsee D X1) D.
-numeq_symm :
   trax_reg (trax_numeq_symm D) (propok_numeq D1 D2)
      <- trn_reg D (propok_numeq D2 D1).
-numeq_trans :
   trax_reg (trax_numeq_trans D23 D12) (propok_numeq D3 D1)
      <- trn_reg D12 (propok_numeq X2 D1)
      <- trn_reg D23 (propok_numeq D3 X1).
-numeq_lit : trax_reg trax_numeq_lit (propok_numeq kof_numlit kof_numlit).
-numeq_bin : trax_reg trax_numeq_bin (propok_numeq kof_number kof_number).
-numeq_rep1 :
   trax_reg (trax_numeq_rep1 X1) (propok_numeq kof_numlit kof_number).
-numeq_rep2 :
   trax_reg (trax_numeq_rep2 X1) (propok_numeq kof_number kof_numlit).
-numleq_refl :
   trax_reg (trax_numleq_refl D) (propok_numleq D2 D1)
      <- trn_reg D (propok_numeq D2 D1).
-numleq_antisym :
   trax_reg (trax_numleq_antisymm X1 D) (propok_numeq D2 D1)
      <- trn_reg D (propok_numleq D2 D1).
-numleq_trans :
   trax_reg (trax_numleq_trans D23 D12) (propok_numleq D3 D1)
      <- trn_reg D12 (propok_numleq X2 D1)
      <- trn_reg D23 (propok_numleq D3 X1).
-numleq_lit :
   trax_reg (trax_numleq_lit X1) (propok_numleq kof_numlit kof_numlit).
-numleq_good1 :
   trax_reg (trax_numleq_good1 D) (propok_numeq D1 D1)
      <- trn_reg D (propok_numleq D2 D1).
-numleq_good2 :
   trax_reg (trax_numleq_good2 D) (propok_numeq D2 D2)
      <- trn_reg D (propok_numleq D2 D1).
-numlt_lit : trax_reg (trax_numlt_lit X1) (propok_numlt _ _ kof_numlit kof_numlit).
-numlt_bin :
   trax_reg (trax_numlt_bin X1 X2) (propok_numlt _ _ kof_number kof_number).
-numlt_contra : trax_reg (trax_numlt_contra X1) propok_false.
-numadd_commute :
   trax_reg (trax_numadd_commute D2 D1)
      (propok_numeq (kof_numadd D1' D2') (kof_numadd D2' D1'))
      <- trn_reg D1 (propok_numeq D1' X2)
      <- trn_reg D2 (propok_numeq D2' X1).
-numadd_assoc :
   trax_reg (trax_numadd_assoc D3 D2 D1)
      (propok_numeq (kof_numadd D3' (kof_numadd D2' D1'))
          (kof_numadd (kof_numadd D3' D2') D1'))
      <- trn_reg D1 (propok_numeq D1' X3)
      <- trn_reg D2 (propok_numeq D2' X2)
      <- trn_reg D3 (propok_numeq D3' X1).
-numadd_ident :
   trax_reg (trax_numadd_ident D) (propok_numeq D' (kof_numadd kof_numlit D'))
      <- trn_reg D (propok_numeq D' X1).
-numadd_mono :
   trax_reg (trax_numadd_monotone D2 D1)
      (propok_numleq (kof_numadd D21 D11) (kof_numadd D22 D12))
      <- trn_reg D1 (propok_numleq D11 D12)
      <- trn_reg D2 (propok_numleq D21 D22).
-numadd_leq :
   trax_reg (trax_numadd_leq D2 D1) (propok_numleq (kof_numadd D2' D1') D1')
      <- trn_reg D1 (propok_numeq D1' X2)
      <- trn_reg D2 (propok_numeq D2' X1).
-numadd_lit :
   trax_reg (trax_numadd_lit X1)
      (propok_numeq kof_numlit (kof_numadd kof_numlit kof_numlit)).
-numadd_bin :
   trax_reg (trax_numadd_bin X1)
      (propok_numeq kof_number (kof_numadd kof_number kof_number)).
-numadd_good1 :
   trax_reg (trax_numadd_good1 D) (propok_numeq D1 D1)
      <- trn_reg D (propok_numeq (kof_numadd D2 D1) X1).
-numadd_good2 :
   trax_reg (trax_numadd_good2 D) (propok_numeq D2 D2)
      <- trn_reg D (propok_numeq (kof_numadd D2 D1) X1).
-nummul_commute :
   trax_reg (trax_nummul_commute D2 D1)
      (propok_numeq (kof_nummul D1' D2') (kof_nummul D2' D1'))
      <- trn_reg D1 (propok_numeq D1' X2)
      <- trn_reg D2 (propok_numeq D2' X1).
-nummul_mono :
   trax_reg (trax_nummul_monotone D2 D1)
      (propok_numleq (kof_nummul D21 D11) (kof_nummul D22 D12))
      <- trn_reg D1 (propok_numleq D11 D12)
      <- trn_reg D2 (propok_numleq D21 D22).
-nummul_lit :
   trax_reg (trax_nummul_lit X1)
      (propok_numeq kof_numlit (kof_nummul kof_numlit kof_numlit)).
-loclt_location :
   trax_reg (trax_loclt_location Dclt) (propok_loclt Dkof2 Dkof1)
      <- cloc_lt_reg Dclt Dcanon1 Dcanon2
      <- canonloc_kof Dcanon1 Dkof1
      <- canonloc_kof Dcanon2 Dkof2.
-loclt_trans :
   trax_reg (trax_loclt_trans D23 D12) (propok_loclt D3 D1)
      <- trn_reg D12 (propok_loclt X2 D1)
      <- trn_reg D23 (propok_loclt D3 X1).
-loclt_good1 :
   trax_reg (trax_loclt_good1 D) (propok_goodloc D1)
      <- trn_reg D (propok_loclt D2 D1).
-loclt_good2 :
   trax_reg (trax_loclt_good2 D) (propok_goodloc D2)
      <- trn_reg D (propok_loclt D2 D1).
-goodloc_loc : trax_reg trax_goodloc_location (propok_goodloc kof_location).

calculate_resp :
   Pi T':tp. Pi T':tp. Pi N:nat. Pi N':nat.
      tp_eq T' T' -> nat_eq N N' -> calculate T' N -> calculate T' N' -> type.
- : calculate_resp tp_eq_ nat_eq_ D D.
calculate_kof : Pi T':tp. Pi N1:nat. calculate T' N1 -> kof T' knum -> type.
- : calculate_kof calculate_numlit kof_numlit.
- : calculate_kof (calculate_number X1) kof_number.
- :
   calculate_kof (calculate_numadd X1 D2 D1) (kof_numadd D2' D1')
      <- calculate_kof D1 D1'
      <- calculate_kof D2 D2'.
- :
   calculate_kof (calculate_nummul X1 D2 D1) (kof_nummul D2' D1')
      <- calculate_kof D1 D1'
      <- calculate_kof D2 D2'.
- : calculate_kof (calculate_annot (calculate_elim_ X1 X2 D)) D.
- : calculate_kof (calculate_app (calculate_elim_ X1 X2 D)) D.
- : calculate_kof (calculate_pi1 (calculate_elim_ X1 X2 D)) D.
- : calculate_kof (calculate_pi2 (calculate_elim_ X1 X2 D)) D.
- : calculate_kof (calculate_kapp (calculate_elim_ X1 X2 D)) D.
- : calculate_kof (calculate_case (calculate_elim_ X1 X2 D)) D.
- : calculate_kof (calculate_unroll (calculate_elim_ X1 X2 D)) D.
calculate_unreduce :
   Pi T2:tp. Pi N:nat. Pi T1:tp.
      calculate T2 N -> reduce T1 T2 -> kof T1 knum -> calculate T1 N -> type.
-id : calculate_unreduce D reduce_id X1 D.
-numadd :
   calculate_unreduce (calculate_numadd Dsum D2 D1) (reduce_numadd Dred2 Dred1)
      (kof_numadd Dkof2 Dkof1) (calculate_numadd Dsum D2' D1')
      <- calculate_unreduce D1 Dred1 Dkof1 D1'
      <- calculate_unreduce D2 Dred2 Dkof2 D2'.
-nummul :
   calculate_unreduce (calculate_nummul Dsum D2 D1) (reduce_nummul Dred2 Dred1)
      (kof_nummul Dkof2 Dkof1) (calculate_nummul Dsum D2' D1')
      <- calculate_unreduce D1 Dred1 Dkof1 D1'
      <- calculate_unreduce D2 Dred2 Dkof2 D2'.
-annot :
   calculate_unreduce Dcalc Dred Dkof
      (calculate_annot (calculate_elim_ Dcalc Dred Dkof)).
-app :
   calculate_unreduce Dcalc Dred Dkof
      (calculate_app (calculate_elim_ Dcalc Dred Dkof)).
-pi1 :
   calculate_unreduce Dcalc Dred Dkof
      (calculate_pi1 (calculate_elim_ Dcalc Dred Dkof)).
-pi2 :
   calculate_unreduce Dcalc Dred Dkof
      (calculate_pi2 (calculate_elim_ Dcalc Dred Dkof)).
-kapp :
   calculate_unreduce Dcalc Dred Dkof
      (calculate_kapp (calculate_elim_ Dcalc Dred Dkof)).
-case :
   calculate_unreduce Dcalc Dred Dkof
      (calculate_case (calculate_elim_ Dcalc Dred Dkof)).
-unroll :
   calculate_unreduce Dcalc Dred Dkof
      (calculate_unroll (calculate_elim_ Dcalc Dred Dkof)).
calculate_munreduce :
   Pi T2:tp. Pi N:nat. Pi T1:tp.
      calculate T2 N -> mreduce T1 T2 -> kof T1 knum -> calculate T1 N -> type.
- : calculate_munreduce Dcalc mreduce_id X1 Dcalc.
- :
   calculate_munreduce Dcalc3 (mreduce_step D23 D12) Dkof1 Dcalc1
      <- sr Dkof1 D12 Dkof2
      <- calculate_munreduce Dcalc3 D23 Dkof2 Dcalc2
      <- calculate_unreduce Dcalc2 D12 Dkof1 Dcalc1.
calculate_reduce :
   Pi T1:tp. Pi N:nat. Pi T2:tp.
      calculate T1 N -> reduce T1 T2 -> calculate T2 N -> type.
calculate_elim_reduce :
   Pi T1:tp. Pi N:nat. Pi T2:tp.
      calculate_elim T1 N -> reduce T1 T2 -> calculate T2 N -> type.
- :
   calculate_elim_reduce (calculate_elim_ Dcalc Dred1 Dkof) Dred2 Dcalc''
      <- diamond Dkof Dred1 Dred2 Dred1' Dred2'
      <- calculate_reduce Dcalc Dred1' Dcalc'
      <- sr Dkof Dred2 Dkof'
      <- calculate_unreduce Dcalc' Dred2' Dkof' Dcalc''.
- : calculate_reduce D reduce_id D.
- :
   calculate_reduce (calculate_numadd Dsum Dcalc2 Dcalc1)
      (reduce_numadd Dred2 Dred1) (calculate_numadd Dsum Dcalc2' Dcalc1')
      <- calculate_reduce Dcalc1 Dred1 Dcalc1'
      <- calculate_reduce Dcalc2 Dred2 Dcalc2'.
- :
   calculate_reduce (calculate_nummul Dsum Dcalc2 Dcalc1)
      (reduce_nummul Dred2 Dred1) (calculate_nummul Dsum Dcalc2' Dcalc1')
      <- calculate_reduce Dcalc1 Dred1 Dcalc1'
      <- calculate_reduce Dcalc2 Dred2 Dcalc2'.
- :
   calculate_reduce (calculate_annot D) Dred D'
      <- calculate_elim_reduce D Dred D'.
- :
   calculate_reduce (calculate_app D) Dred D' <- calculate_elim_reduce D Dred D'.
- :
   calculate_reduce (calculate_pi1 D) Dred D' <- calculate_elim_reduce D Dred D'.
- :
   calculate_reduce (calculate_pi2 D) Dred D' <- calculate_elim_reduce D Dred D'.
- :
   calculate_reduce (calculate_kapp D) Dred D'
      <- calculate_elim_reduce D Dred D'.
- :
   calculate_reduce (calculate_case D) Dred D'
      <- calculate_elim_reduce D Dred D'.
- :
   calculate_reduce (calculate_unroll D) Dred D'
      <- calculate_elim_reduce D Dred D'.
calculate_mreduce :
   Pi T1:tp. Pi N:nat. Pi T2:tp.
      calculate T1 N -> mreduce T1 T2 -> calculate T2 N -> type.
- : calculate_mreduce Dcalc mreduce_id Dcalc.
- :
   calculate_mreduce Dcalc1 (mreduce_step D23 D12) Dcalc3
      <- calculate_reduce Dcalc1 D12 Dcalc2
      <- calculate_mreduce Dcalc2 D23 Dcalc3.
calculate_equiv :
   Pi T1:tp. Pi N:nat. Pi T2:tp.
      calculate T1 N -> equiv T1 T2 -> calculate T2 N -> type.
- :
   calculate_equiv Dcalc1 Dequiv Dcalc2
      <- calculate_kof Dcalc1 Dkof1
      <- church_rosser Dkof1 Dequiv Dred1 Dred2 Dkof2
      <- calculate_mreduce Dcalc1 Dred1 Dcalc
      <- calculate_munreduce Dcalc Dred2 Dkof2 Dcalc2.
calculate_fun :
   Pi T':tp. Pi N:nat. Pi N':nat.
      calculate T' N -> calculate T' N' -> nat_eq N N' -> type.
calculate_elim_fun :
   Pi T':tp. Pi N:nat. Pi N':nat.
      calculate_elim T' N -> calculate_elim T' N' -> nat_eq N N' -> type.
- :
   calculate_elim_fun (calculate_elim_ Dcalc1 Dred1 Dkof)
      (calculate_elim_ Dcalc2 Dred2 X1) Deq
      <- diamond Dkof Dred1 Dred2 Dred1' Dred2'
      <- sr Dkof Dred1 Dkof'
      <- calculate_reduce Dcalc2 Dred2' Dcalc2'
      <- calculate_unreduce Dcalc2' Dred1' Dkof' Dcalc2''
      <- calculate_fun Dcalc1 Dcalc2'' Deq.
- : calculate_fun calculate_numlit calculate_numlit nat_eq_.
- :
   calculate_fun (calculate_number Drep) (calculate_number Drep') Deq
      <- represents_fun1 Drep Drep' Deq.
- :
   calculate_fun (calculate_numadd Dsum Dcalc2 Dcalc1)
      (calculate_numadd Dsum' Dcalc2' Dcalc1') Deq
      <- calculate_fun Dcalc1 Dcalc1' Deq1
      <- calculate_fun Dcalc2 Dcalc2' Deq2
      <- sum_resp Deq1 Deq2 nat_eq_ Dsum Dsum''
      <- sum_fun3 Dsum'' Dsum' Deq.
- :
   calculate_fun (calculate_nummul Dsum Dcalc2 Dcalc1)
      (calculate_nummul Dsum' Dcalc2' Dcalc1') Deq
      <- calculate_fun Dcalc1 Dcalc1' Deq1
      <- calculate_fun Dcalc2 Dcalc2' Deq2
      <- prod_resp Deq1 Deq2 nat_eq_ Dsum Dsum''
      <- prod_fun3 Dsum'' Dsum' Deq.
- :
   calculate_fun (calculate_annot D1) (calculate_annot D2) D
      <- calculate_elim_fun D1 D2 D.
- :
   calculate_fun (calculate_app D1) (calculate_app D2) D
      <- calculate_elim_fun D1 D2 D.
- :
   calculate_fun (calculate_pi1 D1) (calculate_pi1 D2) D
      <- calculate_elim_fun D1 D2 D.
- :
   calculate_fun (calculate_pi2 D1) (calculate_pi2 D2) D
      <- calculate_elim_fun D1 D2 D.
- :
   calculate_fun (calculate_kapp D1) (calculate_kapp D2) D
      <- calculate_elim_fun D1 D2 D.
- :
   calculate_fun (calculate_case D1) (calculate_case D2) D
      <- calculate_elim_fun D1 D2 D.
- :
   calculate_fun (calculate_unroll D1) (calculate_unroll D2) D
      <- calculate_elim_fun D1 D2 D.
calculate_is_numeq :
   Pi T':tp. Pi N:nat. calculate T' N -> tr (pnumeq T' (numlit N)) -> type.
calculate_elim_is_numeq :
   Pi T':tp. Pi N:nat. calculate_elim T' N -> tr (pnumeq T' (numlit N)) -> type.
- :
   calculate_elim_is_numeq (calculate_elim_ Dcalc Dred Dkof)
      (tr_equiv (propok_numeq kof_numlit Dkof)
          (equivp_numeq equiv_reflex (equiv_symm Dkof Dequiv)) Dtr)
      <- calculate_is_numeq Dcalc Dtr
      <- reduce_is_equiv Dkof Dred Dequiv.
- : calculate_is_numeq calculate_numlit tr_numeq_lit.
- : calculate_is_numeq (calculate_number Drep) (tr_numeq_rep1 Drep).
- :
   calculate_is_numeq (calculate_numadd Dsum Dcalc2 Dcalc1)
      (tr_numeq_trans (tr_numadd_lit Dsum) (tr_numadd_compat _ _ _ _ Dtr2 Dtr1))
      <- calculate_is_numeq Dcalc1 Dtr1
      <- calculate_is_numeq Dcalc2 Dtr2.
- :
   calculate_is_numeq (calculate_nummul Dprod Dcalc2 Dcalc1)
      (tr_numeq_trans (tr_nummul_lit Dprod) (tr_nummul_compat _ _ _ _ Dtr2 Dtr1))
      <- calculate_is_numeq Dcalc1 Dtr1
      <- calculate_is_numeq Dcalc2 Dtr2.
- : calculate_is_numeq (calculate_annot D) D' <- calculate_elim_is_numeq D D'.
- : calculate_is_numeq (calculate_app D) D' <- calculate_elim_is_numeq D D'.
- : calculate_is_numeq (calculate_pi1 D) D' <- calculate_elim_is_numeq D D'.
- : calculate_is_numeq (calculate_pi2 D) D' <- calculate_elim_is_numeq D D'.
- : calculate_is_numeq (calculate_kapp D) D' <- calculate_elim_is_numeq D D'.
- : calculate_is_numeq (calculate_case D) D' <- calculate_elim_is_numeq D D'.
- : calculate_is_numeq (calculate_unroll D) D' <- calculate_elim_is_numeq D D'.
false_implies_calcloc : Pi T':tp. Pi TL:tp. false -> calcloc T' TL -> type.
calcloc_resp :
   Pi T':tp. Pi T':tp. Pi L:tp. Pi L':tp.
      tp_eq T' T' -> tp_eq L L' -> calcloc T' L -> calcloc T' L' -> type.
- : calcloc_resp tp_eq_ tp_eq_ D D.
calcloc_kof : Pi T':tp. Pi T1:tp. calcloc T' T1 -> kof T' kloc -> type.
- : calcloc_kof (calcloc_canon Dcanon) Dkof <- canonloc_kof Dcanon Dkof.
- : calcloc_kof (calcloc_annot (calcloc_elim_ X1 X2 D)) D.
- : calcloc_kof (calcloc_app (calcloc_elim_ X1 X2 D)) D.
- : calcloc_kof (calcloc_pi1 (calcloc_elim_ X1 X2 D)) D.
- : calcloc_kof (calcloc_pi2 (calcloc_elim_ X1 X2 D)) D.
- : calcloc_kof (calcloc_kapp (calcloc_elim_ X1 X2 D)) D.
- : calcloc_kof (calcloc_case (calcloc_elim_ X1 X2 D)) D.
- : calcloc_kof (calcloc_unroll (calcloc_elim_ X1 X2 D)) D.
calcloc_unreduce :
   Pi T2:tp. Pi L:tp. Pi T1:tp.
      calcloc T2 L -> reduce T1 T2 -> kof T1 kloc -> calcloc T1 L -> type.
-id : calcloc_unreduce D reduce_id X1 D.
-annot :
   calcloc_unreduce Dcalc Dred Dkof
      (calcloc_annot (calcloc_elim_ Dcalc Dred Dkof)).
-app :
   calcloc_unreduce Dcalc Dred Dkof
      (calcloc_app (calcloc_elim_ Dcalc Dred Dkof)).
-pi1 :
   calcloc_unreduce Dcalc Dred Dkof
      (calcloc_pi1 (calcloc_elim_ Dcalc Dred Dkof)).
-pi2 :
   calcloc_unreduce Dcalc Dred Dkof
      (calcloc_pi2 (calcloc_elim_ Dcalc Dred Dkof)).
-kapp :
   calcloc_unreduce Dcalc Dred Dkof
      (calcloc_kapp (calcloc_elim_ Dcalc Dred Dkof)).
-case :
   calcloc_unreduce Dcalc Dred Dkof
      (calcloc_case (calcloc_elim_ Dcalc Dred Dkof)).
-unroll :
   calcloc_unreduce Dcalc Dred Dkof
      (calcloc_unroll (calcloc_elim_ Dcalc Dred Dkof)).
calcloc_munreduce :
   Pi T2:tp. Pi L:tp. Pi T1:tp.
      calcloc T2 L -> mreduce T1 T2 -> kof T1 kloc -> calcloc T1 L -> type.
- : calcloc_munreduce Dcalc mreduce_id X1 Dcalc.
- :
   calcloc_munreduce Dcalc3 (mreduce_step D23 D12) Dkof1 Dcalc1
      <- sr Dkof1 D12 Dkof2
      <- calcloc_munreduce Dcalc3 D23 Dkof2 Dcalc2
      <- calcloc_unreduce Dcalc2 D12 Dkof1 Dcalc1.
calcloc_reduce :
   Pi T1:tp. Pi L:tp. Pi T2:tp.
      calcloc T1 L -> reduce T1 T2 -> calcloc T2 L -> type.
calcloc_elim_reduce :
   Pi T1:tp. Pi L:tp. Pi T2:tp.
      calcloc_elim T1 L -> reduce T1 T2 -> calcloc T2 L -> type.
- :
   calcloc_elim_reduce (calcloc_elim_ Dcalc Dred1 Dkof) Dred2 Dcalc''
      <- diamond Dkof Dred1 Dred2 Dred1' Dred2'
      <- calcloc_reduce Dcalc Dred1' Dcalc'
      <- sr Dkof Dred2 Dkof'
      <- calcloc_unreduce Dcalc' Dred2' Dkof' Dcalc''.
- : calcloc_reduce D reduce_id D.
- : calcloc_reduce (calcloc_annot D) Dred D' <- calcloc_elim_reduce D Dred D'.
- : calcloc_reduce (calcloc_app D) Dred D' <- calcloc_elim_reduce D Dred D'.
- : calcloc_reduce (calcloc_pi1 D) Dred D' <- calcloc_elim_reduce D Dred D'.
- : calcloc_reduce (calcloc_pi2 D) Dred D' <- calcloc_elim_reduce D Dred D'.
- : calcloc_reduce (calcloc_kapp D) Dred D' <- calcloc_elim_reduce D Dred D'.
- : calcloc_reduce (calcloc_case D) Dred D' <- calcloc_elim_reduce D Dred D'.
- : calcloc_reduce (calcloc_unroll D) Dred D' <- calcloc_elim_reduce D Dred D'.
- :
   calcloc_reduce (calcloc_canon Dcanon) (reduce_eta X1 Dkof') D
      <- canonloc_kof Dcanon Dkof
      <- kof_fun Dkof Dkof' Deq
      <- kind_eq_kloc_karrow_contradict Deq Dfalse
      <- false_implies_calcloc Dfalse D.
- :
   calcloc_reduce (calcloc_canon Dcanon) (reduce_keta X1 Dkof') D
      <- canonloc_kof Dcanon Dkof
      <- kof_fun Dkof Dkof' Deq
      <- kind_eq_kloc_kforall_contradict Deq Dfalse
      <- false_implies_calcloc Dfalse D.
- :
   calcloc_reduce (calcloc_canon Dcanon) (reduce_peta X1 Dkof') D
      <- canonloc_kof Dcanon Dkof
      <- kof_fun Dkof Dkof' Deq
      <- kind_eq_kloc_kprod_contradict Deq Dfalse
      <- false_implies_calcloc Dfalse D.
- :
   calcloc_reduce (calcloc_canon Dcanon) (reduce_reta X1 Dkof') D
      <- canonloc_kof Dcanon Dkof
      <- kof_fun Dkof Dkof' Deq
      <- kind_eq_kloc_krec_contradict Deq Dfalse
      <- false_implies_calcloc Dfalse D.
calcloc_mreduce :
   Pi T1:tp. Pi L:tp. Pi T2:tp.
      calcloc T1 L -> mreduce T1 T2 -> calcloc T2 L -> type.
- : calcloc_mreduce Dcalc mreduce_id Dcalc.
- :
   calcloc_mreduce Dcalc1 (mreduce_step D23 D12) Dcalc3
      <- calcloc_reduce Dcalc1 D12 Dcalc2
      <- calcloc_mreduce Dcalc2 D23 Dcalc3.
calcloc_equiv :
   Pi T1:tp. Pi L:tp. Pi T2:tp.
      calcloc T1 L -> equiv T1 T2 -> calcloc T2 L -> type.
- :
   calcloc_equiv Dcalc1 Dequiv Dcalc2
      <- calcloc_kof Dcalc1 Dkof1
      <- church_rosser Dkof1 Dequiv Dred1 Dred2 Dkof2
      <- calcloc_mreduce Dcalc1 Dred1 Dcalc
      <- calcloc_munreduce Dcalc Dred2 Dkof2 Dcalc2.
calcloc_fun :
   Pi T':tp. Pi L:tp. Pi L':tp.
      calcloc T' L -> calcloc T' L' -> tp_eq L L' -> type.
calcloc_elim_fun :
   Pi T':tp. Pi L:tp. Pi L':tp.
      calcloc_elim T' L -> calcloc_elim T' L' -> tp_eq L L' -> type.
- :
   calcloc_elim_fun (calcloc_elim_ Dcalc1 Dred1 Dkof)
      (calcloc_elim_ Dcalc2 Dred2 X1) Deq
      <- diamond Dkof Dred1 Dred2 Dred1' Dred2'
      <- sr Dkof Dred1 Dkof'
      <- calcloc_reduce Dcalc2 Dred2' Dcalc2'
      <- calcloc_unreduce Dcalc2' Dred1' Dkof' Dcalc2''
      <- calcloc_fun Dcalc1 Dcalc2'' Deq.
- : calcloc_fun (calcloc_canon X1) (calcloc_canon X2) tp_eq_.
- :
   calcloc_fun (calcloc_annot D1) (calcloc_annot D2) D
      <- calcloc_elim_fun D1 D2 D.
- : calcloc_fun (calcloc_app D1) (calcloc_app D2) D <- calcloc_elim_fun D1 D2 D.
- : calcloc_fun (calcloc_pi1 D1) (calcloc_pi1 D2) D <- calcloc_elim_fun D1 D2 D.
- : calcloc_fun (calcloc_pi2 D1) (calcloc_pi2 D2) D <- calcloc_elim_fun D1 D2 D.
- :
   calcloc_fun (calcloc_kapp D1) (calcloc_kapp D2) D <- calcloc_elim_fun D1 D2 D.
- :
   calcloc_fun (calcloc_case D1) (calcloc_case D2) D <- calcloc_elim_fun D1 D2 D.
- :
   calcloc_fun (calcloc_unroll D1) (calcloc_unroll D2) D
      <- calcloc_elim_fun D1 D2 D.
calcloc_is_loclt :
   Pi T1:tp. Pi L1:tp. Pi T2:tp. Pi L2:tp.
      calcloc T1 L1 -> calcloc T2 L2 -> cloc_lt L1 L2 -> tr (ploclt T1 T2)
         -> type.
calcloc_elim_is_loclt1 :
   Pi T1:tp. Pi L1:tp. Pi T2:tp. Pi L2:tp.
      calcloc_elim T1 L1 -> calcloc T2 L2 -> cloc_lt L1 L2 -> tr (ploclt T1 T2)
         -> type.
calcloc_elim_is_loclt2 :
   Pi T1:tp. Pi L1:tp. Pi T2:tp. Pi L2:tp.
      calcloc T1 L1 -> calcloc_elim T2 L2 -> cloc_lt L1 L2 -> tr (ploclt T1 T2)
         -> type.
- :
   calcloc_elim_is_loclt1 (calcloc_elim_ Dcalc1 Dred1 Dkof1) Dcalc2 Dlt
      (tr_equiv (propok_loclt Dkof2 Dkof1)
          (equivp_loclt equiv_reflex (equiv_symm Dkof1 Dequiv1)) Dtr)
      <- calcloc_is_loclt Dcalc1 Dcalc2 Dlt Dtr
      <- reduce_is_equiv Dkof1 Dred1 Dequiv1
      <- calcloc_kof Dcalc2 Dkof2.
- :
   calcloc_elim_is_loclt2 Dcalc1 (calcloc_elim_ Dcalc2 Dred2 Dkof2) Dlt
      (tr_equiv (propok_loclt Dkof2 Dkof1)
          (equivp_loclt (equiv_symm Dkof2 Dequiv2) equiv_reflex) Dtr)
      <- calcloc_is_loclt Dcalc1 Dcalc2 Dlt Dtr
      <- reduce_is_equiv Dkof2 Dred2 Dequiv2
      <- calcloc_kof Dcalc1 Dkof1.
- :
   calcloc_is_loclt (calcloc_canon X1) (calcloc_canon X2) Dlt
      (tr_loclt_location Dlt).
- :
   calcloc_is_loclt (calcloc_annot Dcalc1) Dcalc2 Dlt Dtr
      <- calcloc_elim_is_loclt1 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt (calcloc_app Dcalc1) Dcalc2 Dlt Dtr
      <- calcloc_elim_is_loclt1 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt (calcloc_pi1 Dcalc1) Dcalc2 Dlt Dtr
      <- calcloc_elim_is_loclt1 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt (calcloc_pi2 Dcalc1) Dcalc2 Dlt Dtr
      <- calcloc_elim_is_loclt1 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt (calcloc_kapp Dcalc1) Dcalc2 Dlt Dtr
      <- calcloc_elim_is_loclt1 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt (calcloc_case Dcalc1) Dcalc2 Dlt Dtr
      <- calcloc_elim_is_loclt1 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt (calcloc_unroll Dcalc1) Dcalc2 Dlt Dtr
      <- calcloc_elim_is_loclt1 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt Dcalc1 (calcloc_annot Dcalc2) Dlt Dtr
      <- calcloc_elim_is_loclt2 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt Dcalc1 (calcloc_app Dcalc2) Dlt Dtr
      <- calcloc_elim_is_loclt2 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt Dcalc1 (calcloc_pi1 Dcalc2) Dlt Dtr
      <- calcloc_elim_is_loclt2 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt Dcalc1 (calcloc_pi2 Dcalc2) Dlt Dtr
      <- calcloc_elim_is_loclt2 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt Dcalc1 (calcloc_kapp Dcalc2) Dlt Dtr
      <- calcloc_elim_is_loclt2 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt Dcalc1 (calcloc_case Dcalc2) Dlt Dtr
      <- calcloc_elim_is_loclt2 Dcalc1 Dcalc2 Dlt Dtr.
- :
   calcloc_is_loclt Dcalc1 (calcloc_unroll Dcalc2) Dlt Dtr
      <- calcloc_elim_is_loclt2 Dcalc1 Dcalc2 Dlt Dtr.
ishead : Pi P1:prop. Pi P2:prop. (tra P1 -> tra P2) -> type.
ishead_var : ishead (\d:tra P1. d).
ishead_imple :
   ishead (\d:tra P1. tra_imple (D2 d) (D1 d)) <- ishead (\x:tra P1. D1 x).
ishead_ande1 : ishead (\d:tra P1. tra_ande1 (D d)) <- ishead (\x:tra P1. D x).
ishead_ande2 : ishead (\d:tra P1. tra_ande2 (D d)) <- ishead (\x:tra P1. D x).
ishead_equiv :
   ishead (\d:tra P1. tra_equiv Dpropok Dequiv (D d)) <- ishead (\x:tra P1. D x).
nothead : Pi P1:prop. Pi P2:prop. (tra P1 -> tra P2) -> type.
nothead_closed : nothead (\d:tra P1. D).
nothead_axiom : nothead (\d:tra P1. tra_axiom (D d)).
nothead_ande1 :
   nothead (\d:tra P1. tra_ande1 (D d)) <- nothead (\x:tra P1. D x).
nothead_ande2 :
   nothead (\d:tra P1. tra_ande2 (D d)) <- nothead (\x:tra P1. D x).
nothead_imple :
   nothead (\d:tra P1. tra_imple (D2 d) (D1 d)) <- nothead (\x:tra P1. D1 x).
nothead_equiv :
   nothead (\d:tra P1. tra_equiv Dpropok Dequiv (D d))
      <- nothead (\x:tra P1. D x).
maybe_head : Pi P1:prop. Pi P2:prop. (tra P1 -> tra P2) -> type.
maybe_head_yes : maybe_head (\x:tra P1. D x) <- ishead (\x:tra P1. D x).
maybe_head_no : maybe_head (\x:tra P1. D x) <- nothead (\x:tra P1. D x).
maybe_head_imple :
   Pi P1:prop. Pi P2:prop. Pi P3:prop. Pi D:tra P1 -> tra (pimpl P2 P3).
      Pi D':tra P1 -> trn P2.
      maybe_head (\x:tra P1. D x)
         -> maybe_head (\d:tra P1. tra_imple (D' d) (D d)) -> type.
- : maybe_head_imple (maybe_head_yes D) (maybe_head_yes (ishead_imple D)).
- : maybe_head_imple (maybe_head_no D) (maybe_head_no (nothead_imple D)).
maybe_head_ande1 :
   Pi P1:prop. Pi P2:prop. Pi P3:prop. Pi D:tra P1 -> tra (pand P2 P3).
      maybe_head (\x:tra P1. D x) -> maybe_head (\d:tra P1. tra_ande1 (D d))
         -> type.
- : maybe_head_ande1 (maybe_head_yes D) (maybe_head_yes (ishead_ande1 D)).
- : maybe_head_ande1 (maybe_head_no D) (maybe_head_no (nothead_ande1 D)).
maybe_head_ande2 :
   Pi P1:prop. Pi P2:prop. Pi P3:prop. Pi D:tra P1 -> tra (pand P2 P3).
      maybe_head (\x:tra P1. D x) -> maybe_head (\d:tra P1. tra_ande2 (D d))
         -> type.
- : maybe_head_ande2 (maybe_head_yes D) (maybe_head_yes (ishead_ande2 D)).
- : maybe_head_ande2 (maybe_head_no D) (maybe_head_no (nothead_ande2 D)).
maybe_head_equiv :
   Pi P1:prop. Pi P2:prop. Pi D:tra P1 -> tra P2. Pi P3:prop.
      Pi Dpropok:propok P3. Pi Dequiv:equivp P2 P3.
      maybe_head (\x:tra P1. D x)
         -> maybe_head (\d:tra P1. tra_equiv Dpropok Dequiv (D d)) -> type.
- : maybe_head_equiv (maybe_head_yes D) (maybe_head_yes (ishead_equiv D)).
- : maybe_head_equiv (maybe_head_no D) (maybe_head_no (nothead_equiv D)).
decide_head :
   Pi P1:prop. Pi P2:prop. Pi D:tra P1 -> tra P2.
      maybe_head (\x:tra P1. D x) -> type.
-var : decide_head (\d:tra P1. d) (maybe_head_yes ishead_var).
-closed : decide_head (\d:tra P1. D) (maybe_head_no nothead_closed).
-axiom : decide_head (\d:tra P1. tra_axiom (D d)) (maybe_head_no nothead_axiom).
-imple :
   decide_head (\d:tra P1. tra_imple (D2 d) (D1 d)) D'
      <- decide_head (\x:tra P1. D1 x) D
      <- maybe_head_imple D D'.
-ande1 :
   decide_head (\d:tra P1. tra_ande1 (D d)) D''
      <- decide_head (\x:tra P1. D x) D'
      <- maybe_head_ande1 D' D''.
-ande2 :
   decide_head (\d:tra P1. tra_ande2 (D d)) D''
      <- decide_head (\x:tra P1. D x) D'
      <- maybe_head_ande2 D' D''.
-equiv :
   decide_head (\d:tra P1. tra_equiv Dpropok Dequiv (D d)) D''
      <- decide_head (\x:tra P1. D x) D'
      <- maybe_head_equiv D' D''.
prop_size : prop -> nat -> type.
pnumeq_size : prop_size (pnumeq T1 T2) 0'.
pnumleq_size : prop_size (pnumleq T1 T2) 0'.
ploclt_size : prop_size (ploclt T1 T2) 0'.
goodloc_size : prop_size (goodloc T') 0'.
pimpl_size :
   prop_size (pimpl P1 P2) (s N)
      <- prop_size P1 N1
      <- prop_size P2 N2
      <- sum N1 N2 N.
pand_size :
   prop_size (pand P1 P2) (s N)
      <- prop_size P1 N1
      <- prop_size P2 N2
      <- sum N1 N2 N.
por_size :
   prop_size (por P1 P2) (s N)
      <- prop_size P1 N1
      <- prop_size P2 N2
      <- sum N1 N2 N.
pfalse_size : prop_size pfalse 0'.
can_prop_size : Pi P:prop. Pi N:nat. prop_size P N -> type.
- : can_prop_size (pnumeq T1 T2) 0' pnumeq_size.
- : can_prop_size (pnumleq T1 T2) 0' pnumleq_size.
- : can_prop_size (ploclt T1 T2) 0' ploclt_size.
- : can_prop_size (goodloc T1) 0' goodloc_size.
- :
   can_prop_size (pimpl P1 P2) (s N3) (pimpl_size Dsum Dsize2 Dsize1)
      <- can_prop_size P1 N1 Dsize1
      <- can_prop_size P2 N2 Dsize2
      <- can_sum N1 N2 N3 Dsum.
- :
   can_prop_size (pand P1 P2) (s N3) (pand_size Dsum Dsize2 Dsize1)
      <- can_prop_size P1 N1 Dsize1
      <- can_prop_size P2 N2 Dsize2
      <- can_sum N1 N2 N3 Dsum.
- :
   can_prop_size (por P1 P2) (s N3) (por_size Dsum Dsize2 Dsize1)
      <- can_prop_size P1 N1 Dsize1
      <- can_prop_size P2 N2 Dsize2
      <- can_sum N1 N2 N3 Dsum.
- : can_prop_size pfalse 0' pfalse_size.
prop_size_fun :
   Pi P:prop. Pi N1:nat. Pi N2:nat.
      prop_size P N1 -> prop_size P N2 -> nat_eq N1 N2 -> type.
- : prop_size_fun pnumeq_size pnumeq_size nat_eq_.
- : prop_size_fun pnumleq_size pnumleq_size nat_eq_.
- : prop_size_fun ploclt_size ploclt_size nat_eq_.
- : prop_size_fun goodloc_size goodloc_size nat_eq_.
- :
   prop_size_fun (pimpl_size Dsum1 Dsize1b Dsize1a)
      (pimpl_size Dsum2 Dsize2b Dsize2a) Deq'
      <- prop_size_fun Dsize1a Dsize2a DeqA
      <- prop_size_fun Dsize1b Dsize2b DeqB
      <- sum_resp DeqA DeqB nat_eq_ Dsum1 Dsum1'
      <- sum_fun3 Dsum1' Dsum2 Deq
      <- nat_eq_inc Deq Deq'.
- :
   prop_size_fun (pand_size Dsum1 Dsize1b Dsize1a)
      (pand_size Dsum2 Dsize2b Dsize2a) Deq'
      <- prop_size_fun Dsize1a Dsize2a DeqA
      <- prop_size_fun Dsize1b Dsize2b DeqB
      <- sum_resp DeqA DeqB nat_eq_ Dsum1 Dsum1'
      <- sum_fun3 Dsum1' Dsum2 Deq
      <- nat_eq_inc Deq Deq'.
- :
   prop_size_fun (por_size Dsum1 Dsize1b Dsize1a)
      (por_size Dsum2 Dsize2b Dsize2a) Deq'
      <- prop_size_fun Dsize1a Dsize2a DeqA
      <- prop_size_fun Dsize1b Dsize2b DeqB
      <- sum_resp DeqA DeqB nat_eq_ Dsum1 Dsum1'
      <- sum_fun3 Dsum1' Dsum2 Deq
      <- nat_eq_inc Deq Deq'.
- : prop_size_fun pfalse_size pfalse_size nat_eq_.
equiv_prop_size :
   Pi P1:prop. Pi P2:prop. Pi N:nat.
      equivp P1 P2 -> prop_size P1 N -> prop_size P2 N -> type.
equiv_prop_size' :
   Pi P1:prop. Pi P2:prop. Pi N:nat.
      equivp P1 P2 -> prop_size P1 N -> prop_size P2 N -> type.
-reflex : equiv_prop_size equivp_reflex D D.
-ymm :
   equiv_prop_size (equivp_symm X1 Dequiv) D D' <- equiv_prop_size' Dequiv D' D.
-numeq : equiv_prop_size (equivp_numeq X1 X2) pnumeq_size pnumeq_size.
-numleq : equiv_prop_size (equivp_numleq X1 X2) pnumleq_size pnumleq_size.
-loclt : equiv_prop_size (equivp_loclt X1 X2) ploclt_size ploclt_size.
-loclt : equiv_prop_size (equivp_goodloc X1) goodloc_size goodloc_size.
-impl :
   equiv_prop_size (equivp_impl D2 D1) (pimpl_size Dsum Dsize2 Dsize1)
      (pimpl_size Dsum Dsize2' Dsize1')
      <- equiv_prop_size D1 Dsize1 Dsize1'
      <- equiv_prop_size D2 Dsize2 Dsize2'.
-and :
   equiv_prop_size (equivp_and D2 D1) (pand_size Dsum Dsize2 Dsize1)
      (pand_size Dsum Dsize2' Dsize1')
      <- equiv_prop_size D1 Dsize1 Dsize1'
      <- equiv_prop_size D2 Dsize2 Dsize2'.
-or :
   equiv_prop_size (equivp_or D2 D1) (por_size Dsum Dsize2 Dsize1)
      (por_size Dsum Dsize2' Dsize1')
      <- equiv_prop_size D1 Dsize1 Dsize1'
      <- equiv_prop_size D2 Dsize2 Dsize2'.
-reflex : equiv_prop_size' equivp_reflex D D.
-ymm :
   equiv_prop_size' (equivp_symm X1 Dequiv) D D' <- equiv_prop_size Dequiv D' D.
-numeq : equiv_prop_size' (equivp_numeq X1 X2) pnumeq_size pnumeq_size.
-numleq : equiv_prop_size' (equivp_numleq X1 X2) pnumleq_size pnumleq_size.
-loclt : equiv_prop_size' (equivp_loclt X1 X2) ploclt_size ploclt_size.
-loclt : equiv_prop_size' (equivp_goodloc X1) goodloc_size goodloc_size.
-impl :
   equiv_prop_size' (equivp_impl D2 D1) (pimpl_size Dsum Dsize2 Dsize1)
      (pimpl_size Dsum Dsize2' Dsize1')
      <- equiv_prop_size' D1 Dsize1 Dsize1'
      <- equiv_prop_size' D2 Dsize2 Dsize2'.
-and :
   equiv_prop_size' (equivp_and D2 D1) (pand_size Dsum Dsize2 Dsize1)
      (pand_size Dsum Dsize2' Dsize1')
      <- equiv_prop_size' D1 Dsize1 Dsize1'
      <- equiv_prop_size' D2 Dsize2 Dsize2'.
-or :
   equiv_prop_size' (equivp_or D2 D1) (por_size Dsum Dsize2 Dsize1)
      (por_size Dsum Dsize2' Dsize1')
      <- equiv_prop_size' D1 Dsize1 Dsize1'
      <- equiv_prop_size' D2 Dsize2 Dsize2'.
ishead_size :
   Pi P1:prop. Pi P2:prop. Pi N1:nat. Pi N2:nat. Pi D:tra P1 -> tra P2.
      ishead (\x:tra P1. D x) -> prop_size P1 N1 -> prop_size P2 N2 -> leq N2 N1
         -> type.
-var :
   ishead_size (\x:tra P1. x) ishead_var Dsize1 Dsize2 Dleq
      <- prop_size_fun Dsize2 Dsize1 Deq
      <- leq_reflex' Deq Dleq.
-imple :
   ishead_size (\d:tra P1. tra_imple (X1 d) (Dtra d)) (ishead_imple Dhead)
      Dsize1 Dsize2b Dleq
      <- can_prop_size P2 N4 Dsize2a
      <- can_sum N4 N1 N2 Dsum
      <- sum_implies_leq' Dsum Dleq1
      <- leq_succ N2 Dleq2
      <- ishead_size (\x:tra P1. Dtra x) Dhead Dsize1
            (pimpl_size Dsum Dsize2b Dsize2a) Dleq3
      <- leq_trans Dleq1 Dleq2 Dleq12
      <- leq_trans Dleq12 Dleq3 Dleq.
-ande1 :
   ishead_size (\d:tra P1. tra_ande1 (D d)) (ishead_ande1 Dhead) Dsize1 Dsize2a
      Dleq
      <- can_prop_size P3 N4 Dsize2b
      <- can_sum N1 N4 N2 Dsum
      <- sum_implies_leq Dsum Dleq1
      <- leq_succ N2 Dleq2
      <- ishead_size (\x:tra P1. D x) Dhead Dsize1
            (pand_size Dsum Dsize2b Dsize2a) Dleq3
      <- leq_trans Dleq1 Dleq2 Dleq12
      <- leq_trans Dleq12 Dleq3 Dleq.
-ande2 :
   ishead_size (\d:tra P1. tra_ande2 (D d)) (ishead_ande2 Dhead) Dsize1 Dsize2b
      Dleq
      <- can_prop_size P2 N4 Dsize2a
      <- can_sum N4 N1 N2 Dsum
      <- sum_implies_leq' Dsum Dleq1
      <- leq_succ N2 Dleq2
      <- ishead_size (\x:tra P1. D x) Dhead Dsize1
            (pand_size Dsum Dsize2b Dsize2a) Dleq3
      <- leq_trans Dleq1 Dleq2 Dleq12
      <- leq_trans Dleq12 Dleq3 Dleq.
-equiv :
   ishead_size (\d:tra P1. tra_equiv Dpropok Dequiv (Dtra d))
      (ishead_equiv Dhead) Dsize1 Dsize2 Dleq
      <- equiv_prop_size' Dequiv Dsize2' Dsize2
      <- ishead_size (\x:tra P1. Dtra x) Dhead Dsize1 Dsize2' Dleq.
form_ande :
   Pi P1:prop. Pi P2:prop. trn (pand P1 P2) -> trn P1 -> trn P2 -> type.
-atom :
   form_ande (trn_atom D) (trn_atom (tra_ande1 D)) (trn_atom (tra_ande2 D)).
-andi : form_ande (trn_andi D2 D1) D1 D2.
-ore :
   form_ande (trn_ore (\x:tra P1. D2 x) (\x:tra P4. D1 x) D0)
      (trn_ore (\x:tra P1. D21 x) (\x:tra P4. D11 x) D0)
      (trn_ore (\x:tra P1. D22 x) (\x:tra P4. D12 x) D0)
      <- tra_reg D0 (propok_or Dpropok2 Dpropok1)
      <- (Pi d:tra P4. tra_reg d Dpropok1 -> form_ande (D1 d) (D11 d) (D12 d))
      <- (Pi d:tra P1. tra_reg d Dpropok2 -> form_ande (D2 d) (D21 d) (D22 d)).
-falsee :
   form_ande (trn_falsee (propok_and Dpropok2 Dpropok1) D)
      (trn_falsee Dpropok1 D) (trn_falsee Dpropok2 D).
form_falsee : Pi P:prop. trn pfalse -> propok P -> trn P -> type.
-atom : form_falsee (trn_atom Dtra) Dpropok (trn_falsee Dpropok Dtra).
-ore :
   form_falsee (trn_ore (\x:tra P1. D2 x) (\x:tra P3. D1 x) D0) Dpropok
      (trn_ore (\x:tra P1. D2' x) (\x:tra P3. D1' x) D0)
      <- tra_reg D0 (propok_or Dpropok2 Dpropok1)
      <- (Pi d:tra P3. tra_reg d Dpropok1 -> form_falsee (D1 d) Dpropok (D1' d))
      <- (Pi d:tra P1. tra_reg d Dpropok2 -> form_falsee (D2 d) Dpropok (D2' d)).
-falsee : form_falsee (trn_falsee X1 D) Dpropok (trn_falsee Dpropok D).
equiv_trn :
   Pi P1:prop. Pi P2:prop. trn P1 -> equivp P1 P2 -> propok P2 -> trn P2 -> type.
equiv_trn' :
   Pi P1:prop. Pi P2:prop. trn P1 -> equivp P2 P1 -> propok P2 -> trn P2 -> type.
-reflex : equiv_trn D equivp_reflex X1 D.
-ymm :
   equiv_trn D (equivp_symm Dpropok Dequiv) X1 D'
      <- equiv_trn' D Dequiv Dpropok D'.
-atom :
   equiv_trn (trn_atom D) Dequiv Dpropok (trn_atom (tra_equiv Dpropok Dequiv D)).
-impli :
   equiv_trn (trn_impli Dpropok (\x:tra P1. D x)) (equivp_impl Dequiv2 Dequiv1)
      (propok_impl Dpropok2 Dpropok1)
      (trn_impli Dpropok1
          (\d:tra P4. D' (tra_equiv Dpropok (equivp_symm Dpropok Dequiv1) d)))
      <- (Pi d:tra P1.
             tra_reg d Dpropok -> equiv_trn (D d) Dequiv2 Dpropok2 (D' d)).
-andi :
   equiv_trn (trn_andi D2 D1) (equivp_and Dequiv2 Dequiv1)
      (propok_and Dpropok2 Dpropok1) (trn_andi D2' D1')
      <- equiv_trn D1 Dequiv1 Dpropok1 D1'
      <- equiv_trn D2 Dequiv2 Dpropok2 D2'.
-ori1 :
   equiv_trn (trn_ori1 X1 D) (equivp_or X2 Dequiv) (propok_or Dpropok2 Dpropok1)
      (trn_ori1 Dpropok2 D')
      <- equiv_trn D Dequiv Dpropok1 D'.
-ori2 :
   equiv_trn (trn_ori2 X1 D) (equivp_or Dequiv X2) (propok_or Dpropok2 Dpropok1)
      (trn_ori2 Dpropok1 D')
      <- equiv_trn D Dequiv Dpropok2 D'.
-ore :
   equiv_trn (trn_ore (\x:tra P1. D2 x) (\x:tra P4. D1 x) D0) Dequiv Dpropok
      (trn_ore (\x:tra P1. D2' x) (\x:tra P4. D1' x) D0)
      <- tra_reg D0 (propok_or Dpropok2 Dpropok1)
      <- (Pi d:tra P4.
             tra_reg d Dpropok1 -> equiv_trn (D1 d) Dequiv Dpropok (D1' d))
      <- (Pi d:tra P1.
             tra_reg d Dpropok2 -> equiv_trn (D2 d) Dequiv Dpropok (D2' d)).
-falsee : equiv_trn (trn_falsee X1 D) Dequiv Dpropok (trn_falsee Dpropok D).
-reflex : equiv_trn' D equivp_reflex X1 D.
-ymm :
   equiv_trn' D (equivp_symm X1 Dequiv) Dpropok D'
      <- equiv_trn D Dequiv Dpropok D'.
-atom :
   equiv_trn' (trn_atom D) Dequiv Dpropok
      (trn_atom (tra_equiv Dpropok (equivp_symm Dpropok Dequiv) D)).
-impli :
   equiv_trn' (trn_impli Dpropok (\x:tra P1. D x)) (equivp_impl Dequiv2 Dequiv1)
      (propok_impl Dpropok2 Dpropok1)
      (trn_impli Dpropok1 (\d:tra P4. D' (tra_equiv Dpropok Dequiv1 d)))
      <- (Pi d:tra P1.
             tra_reg d Dpropok -> equiv_trn' (D d) Dequiv2 Dpropok2 (D' d)).
-andi :
   equiv_trn' (trn_andi D2 D1) (equivp_and Dequiv2 Dequiv1)
      (propok_and Dpropok2 Dpropok1) (trn_andi D2' D1')
      <- equiv_trn' D1 Dequiv1 Dpropok1 D1'
      <- equiv_trn' D2 Dequiv2 Dpropok2 D2'.
-ori1 :
   equiv_trn' (trn_ori1 X1 D) (equivp_or X2 Dequiv)
      (propok_or Dpropok2 Dpropok1) (trn_ori1 Dpropok2 D')
      <- equiv_trn' D Dequiv Dpropok1 D'.
-ori2 :
   equiv_trn' (trn_ori2 X1 D) (equivp_or Dequiv X2)
      (propok_or Dpropok2 Dpropok1) (trn_ori2 Dpropok1 D')
      <- equiv_trn' D Dequiv Dpropok2 D'.
-ore :
   equiv_trn' (trn_ore (\x:tra P1. D2 x) (\x:tra P4. D1 x) D0) Dequiv Dpropok
      (trn_ore (\x:tra P1. D2' x) (\x:tra P4. D1' x) D0)
      <- tra_reg D0 (propok_or Dpropok2 Dpropok1)
      <- (Pi d:tra P4.
             tra_reg d Dpropok1 -> equiv_trn' (D1 d) Dequiv Dpropok (D1' d))
      <- (Pi d:tra P1.
             tra_reg d Dpropok2 -> equiv_trn' (D2 d) Dequiv Dpropok (D2' d)).
-falsee : equiv_trn' (trn_falsee X1 D) X2 Dpropok (trn_falsee Dpropok D).
cut :
   Pi P1:prop. Pi P2:prop. Pi N:nat.
      prop_size P1 N
         -> Pi N':nat.
                nat_eq N' (s 0') -> trn P1 -> (tra P1 -> trn P2) -> trn P2
                   -> type.
cuta :
   Pi P1:prop. Pi P2:prop. Pi N:nat.
      prop_size P1 N
         -> Pi N':nat.
                nat_eq N' (s 0') -> trn P1 -> (tra P1 -> tra P2) -> trn P2
                   -> type.
cutanh :
   Pi P1:prop. Pi P2:prop. Pi N:nat.
      prop_size P1 N
         -> Pi N':nat.
                nat_eq N' (s 0') -> trn P1
                   -> Pi D2:tra P1 -> tra P2.
                          nothead (\x:tra P1. D2 x) -> tra P2 -> type.
cutax :
   Pi P1:prop. Pi P2:prop. Pi N:nat.
      prop_size P1 N
         -> Pi N':nat.
                nat_eq N' (s 0') -> trn P1 -> (tra P1 -> trax P2) -> trax P2
                   -> type.
form_imple :
   Pi P1:prop. Pi P2:prop. Pi N:nat.
      prop_size (pimpl P1 P2) N
         -> Pi N':nat.
                nat_eq N' 0' -> trn (pimpl P1 P2) -> trn P1 -> trn P2 -> type.
form_ore :
   Pi P1:prop. Pi P2:prop. Pi P':prop. Pi N:nat.
      prop_size (por P1 P2) N
         -> Pi N':nat.
                nat_eq N' 0' -> trn (por P1 P2) -> (tra P1 -> trn P')
                   -> (tra P2 -> trn P') -> trn P' -> type.
-closed : cut N1 X1 (s 0') nat_eq_ X2 (\d:tra P1. D) D.
-atom :
   cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P1. trn_atom (Dtra2 d)) D
      <- cuta N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P1. Dtra2 x) D.
-impli :
   cut N1 Dsize (s 0') nat_eq_ Dtrn1
      (\d:tra P2. trn_impli Dpropok (\x:tra P1. Dtrn2 d x))
      (trn_impli Dpropok (\x:tra P1. Dtrn2' x))
      <- (Pi d':tra P1.
             tra_reg d' Dpropok
                -> cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P2. Dtrn2 d d')
                      (Dtrn2' d')).
-andi :
   cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P1. trn_andi (Dtrn2b d) (Dtrn2a d))
      (trn_andi DtrnB DtrnA)
      <- cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P1. Dtrn2a x) DtrnA
      <- cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P1. Dtrn2b x) DtrnB.
-ori1 :
   cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P1. trn_ori1 Dpropok (Dtrn2 d))
      (trn_ori1 Dpropok D)
      <- cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P1. Dtrn2 x) D.
-ori2 :
   cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P1. trn_ori2 Dpropok (Dtrn2 d))
      (trn_ori2 Dpropok D)
      <- cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P1. Dtrn2 x) D.
cut|ore :
   Pi P1:prop. Pi P2a:prop. Pi P2b:prop. Pi P2:prop. Pi N:nat.
      prop_size P1 N
         -> Pi N':nat.
                nat_eq N' (s 0') -> trn P1
                   -> Pi D0:tra P1 -> tra (por P2a P2b).
                          Pi D1:tra P1 -> tra P2a -> trn P2.
                          Pi D2:tra P1 -> tra P2b -> trn P2.
                          maybe_head (\x:tra P1. D0 x)
                             -> Pi D:tra P1 -> trn P2.
                                    (Pi d:tra P1.
                                        trn_eq (D d)
                                           (trn_ore (\x:tra P2b. D2 d x)
                                               (\x:tra P2a. D1 d x) (D0 d)))
                                       -> trn P2 -> type.
-ore :
   cut N1 Dsize (s 0') nat_eq_ Dtrn1
      (\d:tra P1.
          trn_ore (\x:tra P3. Dtrn2b d x) (\x:tra P2. Dtrn2a d x) (Dtra2 d)) D
      <- decide_head (\x:tra P1. Dtra2 x) Dmhead
      <- cut|ore N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P1. Dtra2 x)
            (\x:tra P1. \x1:tra P2. Dtrn2a x x1)
            (\x:tra P1. \x1:tra P3. Dtrn2b x x1) Dmhead
            (\x:tra P1.
                trn_ore (\x1:tra P3. Dtrn2b x x1) (\x1:tra P2. Dtrn2a x x1)
                   (Dtra2 x))
            (\d:tra P1. trn_eq_) D.
-H :
   cut|ore N2 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P4. Dtra2 x)
      (\x:tra P4. \x1:tra P1. Dtrn2a x x1) (\x:tra P4. \x1:tra P2. Dtrn2b x x1)
      (maybe_head_yes Dhead)
      (\x:tra P4.
          trn_ore (\x1:tra P2. Dtrn2b x x1) (\x1:tra P1. Dtrn2a x x1) (Dtra2 x))
      (\d:tra P4. trn_eq_) D
      <- cuta N2 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P4. Dtra2 x) Dtrn
      <- trn_reg Dtrn (propok_or Dpropok2 Dpropok1)
      <- (Pi d':tra P1.
             tra_reg d' Dpropok1
                -> cut N2 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P4. Dtrn2a d d')
                      (DtrnA d'))
      <- (Pi d':tra P2.
             tra_reg d' Dpropok2
                -> cut N2 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P4. Dtrn2b d d')
                      (DtrnB d'))
      <- can_prop_size (por P1 P2) N1 Dsize'
      <- ishead_size (\x:tra P4. Dtra2 x) Dhead Dsize Dsize' Dleq
      <- employ_leq N1 N2 Dleq
      <- form_ore N1 Dsize' 0' nat_eq_ Dtrn (\x:tra P1. DtrnA x)
            (\x:tra P2. DtrnB x) D.
-NH :
   cut|ore N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P2. Dtra2 x)
      (\x:tra P2. \x1:tra P4. Dtrn2a x x1) (\x:tra P2. \x1:tra P1. Dtrn2b x x1)
      (maybe_head_no Dnhead)
      (\x:tra P2.
          trn_ore (\x1:tra P1. Dtrn2b x x1) (\x1:tra P4. Dtrn2a x x1) (Dtra2 x))
      (\d:tra P2. trn_eq_)
      (trn_ore (\x:tra P1. DtrnB x) (\x:tra P4. DtrnA x) Dtra2')
      <- cutanh N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P2. Dtra2 x) Dnhead Dtra2'
      <- tra_reg Dtra2' (propok_or Dpropok2 Dpropok1)
      <- (Pi d':tra P4.
             tra_reg d' Dpropok1
                -> cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P2. Dtrn2a d d')
                      (DtrnA d'))
      <- (Pi d':tra P1.
             tra_reg d' Dpropok2
                -> cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P2. Dtrn2b d d')
                      (DtrnB d')).
-falsee :
   cut N1 Dsize (s 0') nat_eq_ Dtrn1 (\d:tra P2. trn_falsee Dpropok (Dtra2 d)) D'
      <- cuta N1 Dsize (s 0') nat_eq_ Dtrn1 (\x:tra P2. Dtra2 x) D
      <- form_falsee D Dpropok D'.
-closed : cuta N1 X1 (s 0') nat_eq_ X2 (\d:tra P1. D) (trn_atom D).
-var : cuta N1 X1 (s 0') nat_eq_ D (\d:tra P1. d) D.
-axiom :
   cuta N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. tra_axiom (D2 d))
      (trn_atom (tra_axiom D))
      <- cutax N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
cuta|imple :
   Pi P1:prop. Pi P2:prop. Pi P3:prop. Pi N:nat.
      prop_size P1 N
         -> Pi N':nat.
                nat_eq N' (s 0') -> trn P1
                   -> Pi D2a:tra P1 -> tra (pimpl P2 P3).
                          Pi D2b:tra P1 -> trn P2.
                          maybe_head (\x:tra P1. D2a x)
                             -> Pi D2:tra P1 -> tra P3.
                                    (Pi d:tra P1.
                                        tra_eq (D2 d)
                                           (tra_imple (D2b d) (D2a d)))
                                       -> trn P3 -> type.
-imple :
   cuta N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. tra_imple (D2b d) (D2a d)) D
      <- decide_head (\x:tra P1. D2a x) Dmhead
      <- cuta|imple N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x)
            (\x:tra P1. D2b x) Dmhead (\x:tra P1. tra_imple (D2b x) (D2a x))
            (\d:tra P1. tra_eq_) D.
-H :
   cuta|imple N2 Dsize (s 0') nat_eq_ D1 (\x:tra P3. D2a x) (\x:tra P3. D2b x)
      (maybe_head_yes Dhead) (\x:tra P3. tra_imple (D2b x) (D2a x))
      (\d:tra P3. tra_eq_) D
      <- cuta N2 Dsize (s 0') nat_eq_ D1 (\x:tra P3. D2a x) Da
      <- cut N2 Dsize (s 0') nat_eq_ D1 (\x:tra P3. D2b x) Db
      <- can_prop_size (pimpl P1 P2) N1 Dsize'
      <- ishead_size (\x:tra P3. D2a x) Dhead Dsize Dsize' Dleq
      <- employ_leq N1 N2 Dleq
      <- form_imple N1 Dsize' 0' nat_eq_ Da Db D.
-NH :
   cuta|imple N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) (\x:tra P1. D2b x)
      (maybe_head_no Dnhead) (\x:tra P1. tra_imple (D2b x) (D2a x))
      (\d:tra P1. tra_eq_) (trn_atom (tra_imple Db Da))
      <- cutanh N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Dnhead Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-ande1 :
   cuta N1 Dsize (s 0') nat_eq_ D1 (\d:tra P3. tra_ande1 (D2 d)) D'
      <- cuta N1 Dsize (s 0') nat_eq_ D1 (\x:tra P3. D2 x) D
      <- form_ande D D' X1.
-ande2 :
   cuta N1 Dsize (s 0') nat_eq_ D1 (\d:tra P3. tra_ande2 (D2 d)) D'
      <- cuta N1 Dsize (s 0') nat_eq_ D1 (\x:tra P3. D2 x) D
      <- form_ande D X1 D'.
-equiv :
   cuta N1 Dsize (s 0') nat_eq_ D1 (\d:tra P3. tra_equiv Dpropok Dequiv (D2 d))
      D'
      <- cuta N1 Dsize (s 0') nat_eq_ D1 (\x:tra P3. D2 x) D
      <- equiv_trn D Dequiv Dpropok D'.
-closed : cutanh N1 X1 (s 0') nat_eq_ X2 (\d:tra P1. D) nothead_closed D.
-axiom :
   cutanh N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. tra_axiom (D2 d)) nothead_axiom
      (tra_axiom D)
      <- cutax N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-imple :
   cutanh N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. tra_imple (D2b d) (D2a d))
      (nothead_imple Dnhead) (tra_imple Db Da)
      <- cutanh N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Dnhead Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-ande1 :
   cutanh N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. tra_ande1 (D2 d))
      (nothead_ande1 Dnhead) (tra_ande1 D)
      <- cutanh N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) Dnhead D.
-ande2 :
   cutanh N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. tra_ande2 (D2 d))
      (nothead_ande2 Dnhead) (tra_ande2 D)
      <- cutanh N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) Dnhead D.
-equiv :
   cutanh N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. tra_equiv Dpropok Dequiv (D2 d))
      (nothead_equiv Dnhead) (tra_equiv Dpropok Dequiv D)
      <- cutanh N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) Dnhead D.
-closed : cutax N1 Dsize (s 0') nat_eq_ X1 (\d:tra P1. D) D.
-numeq_symm :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numeq_symm (D2 d))
      (trax_numeq_symm D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-numeq_trans :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numeq_trans (D2b d) (D2a d))
      (trax_numeq_trans Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-numleq_refl :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numleq_refl (D2 d))
      (trax_numleq_refl D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-numleq_antisym :
   cutax N1 Dsize (s 0') nat_eq_ D1
      (\d:tra P1. trax_numleq_antisymm (D2b d) (D2a d))
      (trax_numleq_antisymm Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-numleq_trans :
   cutax N1 Dsize (s 0') nat_eq_ D1
      (\d:tra P1. trax_numleq_trans (D2b d) (D2a d)) (trax_numleq_trans Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-numleq_good1 :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numleq_good1 (D2 d))
      (trax_numleq_good1 D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-numleq_good2 :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numleq_good2 (D2 d))
      (trax_numleq_good2 D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-numlt_contra :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numlt_contra (D2 d))
      (trax_numlt_contra D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-numadd_commute :
   cutax N1 Dsize (s 0') nat_eq_ D1
      (\d:tra P1. trax_numadd_commute (D2b d) (D2a d))
      (trax_numadd_commute Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-numadd_assoc :
   cutax N1 Dsize (s 0') nat_eq_ D1
      (\d:tra P1. trax_numadd_assoc (D2c d) (D2b d) (D2a d))
      (trax_numadd_assoc Dc Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2c x) Dc.
-numadd_ident :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numadd_ident (D2 d))
      (trax_numadd_ident D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-numadd_mono :
   cutax N1 Dsize (s 0') nat_eq_ D1
      (\d:tra P1. trax_numadd_monotone (D2b d) (D2a d))
      (trax_numadd_monotone Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-numadd_leq :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numadd_leq (D2b d) (D2a d))
      (trax_numadd_leq Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-numadd_good1 :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numadd_good1 (D2 d))
      (trax_numadd_good1 D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-numadd_good2 :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_numadd_good2 (D2 d))
      (trax_numadd_good2 D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-nummul_commute :
   cutax N1 Dsize (s 0') nat_eq_ D1
      (\d:tra P1. trax_nummul_commute (D2b d) (D2a d))
      (trax_nummul_commute Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-nummul_mono :
   cutax N1 Dsize (s 0') nat_eq_ D1
      (\d:tra P1. trax_nummul_monotone (D2b d) (D2a d))
      (trax_nummul_monotone Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-loclt_trans :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_loclt_trans (D2b d) (D2a d))
      (trax_loclt_trans Db Da)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2a x) Da
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2b x) Db.
-loclt_good1 :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_loclt_good1 (D2 d))
      (trax_loclt_good1 D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-loclt_good2 :
   cutax N1 Dsize (s 0') nat_eq_ D1 (\d:tra P1. trax_loclt_good2 (D2 d))
      (trax_loclt_good2 D)
      <- cut N1 Dsize (s 0') nat_eq_ D1 (\x:tra P1. D2 x) D.
-atom :
   form_imple N1 X1 0' nat_eq_ (trn_atom D1) D2 (trn_atom (tra_imple D2 D1)).
-impli :
   form_imple (s N3) (pimpl_size Dsum Dsize2 Dsize1) 0' nat_eq_
      (trn_impli X1 (\x:tra P1. D1 x)) D2 D
      <- employ_sum' N1 N2 N3 Dsum
      <- cut N1 Dsize1 (s 0') nat_eq_ D2 (\x:tra P1. D1 x) D.
-ore :
   form_imple N1 Dsize 0' nat_eq_
      (trn_ore (\x:tra P1. D12 x) (\x:tra P4. D11 x) D10) D2
      (trn_ore (\x:tra P1. D12' x) (\x:tra P4. D11' x) D10)
      <- tra_reg D10 (propok_or Dpropok2 Dpropok1)
      <- (Pi d:tra P4.
             tra_reg d Dpropok1
                -> form_imple N1 Dsize 0' nat_eq_ (D11 d) D2 (D11' d))
      <- (Pi d:tra P1.
             tra_reg d Dpropok2
                -> form_imple N1 Dsize 0' nat_eq_ (D12 d) D2 (D12' d)).
-falsee :
   form_imple N1 Dsize 0' nat_eq_ (trn_falsee (propok_impl Dpropok X1) D1) D2
      (trn_falsee Dpropok D1).
-atom :
   form_ore N1 X1 0' nat_eq_ (trn_atom D) (\x:tra P1. D1 x) (\x:tra P2. D2 x)
      (trn_ore (\x:tra P2. D2 x) (\x:tra P1. D1 x) D).
-ori1 :
   form_ore (s N3) (por_size Dsum Dsize2 Dsize1) 0' nat_eq_ (trn_ori1 X1 D)
      (\x:tra P1. D1 x) (\x:tra P3. X2 x) D'
      <- employ_sum' N1 N2 N3 Dsum
      <- cut N1 Dsize1 (s 0') nat_eq_ D (\x:tra P1. D1 x) D'.
-ori2 :
   form_ore (s N3) (por_size Dsum Dsize2 Dsize1) 0' nat_eq_ (trn_ori2 X1 D)
      (\x:tra P3. X2 x) (\x:tra P1. D2 x) D'
      <- employ_sum N2 N1 N3 Dsum
      <- cut N1 Dsize2 (s 0') nat_eq_ D (\x:tra P1. D2 x) D'.
-ore :
   form_ore N1 Dsize 0' nat_eq_
      (trn_ore (\x:tra P1. Dtrn2 x) (\x:tra P5. Dtrn1 x) Dtra) (\x:tra P2. D1 x)
      (\x:tra P3. D2 x)
      (trn_ore (\x:tra P1. Dtrn2' x) (\x:tra P5. Dtrn1' x) Dtra)
      <- tra_reg Dtra (propok_or Dpropok2 Dpropok1)
      <- (Pi d:tra P5.
             tra_reg d Dpropok1
                -> form_ore N1 Dsize 0' nat_eq_ (Dtrn1 d) (\x:tra P2. D1 x)
                      (\x:tra P3. D2 x) (Dtrn1' d))
      <- (Pi d:tra P1.
             tra_reg d Dpropok2
                -> form_ore N1 Dsize 0' nat_eq_ (Dtrn2 d) (\x:tra P2. D1 x)
                      (\x:tra P3. D2 x) (Dtrn2' d)).
-falsee :
   form_ore N1 Dsize 0' nat_eq_ (trn_falsee (propok_or X1 Dpropok) D)
      (\x:tra P1. D1 x) (\x:tra P3. D2 x) (trn_falsee Dpropok' D)
      <- (Pi d:tra P1. tra_reg d Dpropok -> trn_reg (D1 d) Dpropok').
normalize : Pi P:prop. tr P -> trn P -> type.
-impli :
   normalize (tr_impli Dpropok (\x:tr P1. D x))
      (trn_impli Dpropok (\x:tra P1. D' x))
      <- (Pi d1:tr P1. Pi d2:tra P1.
             tra_reg d2 Dpropok
                -> normalize d1 (trn_atom d2)
                -> normalize (D d1) (D' d2)).
-imple :
   normalize (tr_imple D2 D1) D
      <- normalize D1 D1'
      <- normalize D2 D2'
      <- can_prop_size (pimpl P1 P2) N1 Dsize
      <- form_imple N1 Dsize 0' nat_eq_ D1' D2' D.
-andi :
   normalize (tr_andi D2 D1) (trn_andi D2' D1')
      <- normalize D1 D1'
      <- normalize D2 D2'.
-ande1 : normalize (tr_ande1 D) D'' <- normalize D D' <- form_ande D' D'' X1.
-ande2 : normalize (tr_ande2 D) D'' <- normalize D D' <- form_ande D' X1 D''.
-ori1 : normalize (tr_ori1 Dpropok D) (trn_ori1 Dpropok D') <- normalize D D'.
-ori2 : normalize (tr_ori2 Dpropok D) (trn_ori2 Dpropok D') <- normalize D D'.
-ore :
   normalize (tr_ore (\x:tr P2. D2 x) (\x:tr P1. D1 x) D0) D
      <- normalize D0 D0'
      <- trn_reg D0' (propok_or Dpropok2 Dpropok1)
      <- (Pi d1:tr P1. Pi d2:tra P1.
             tra_reg d2 Dpropok1
                -> normalize d1 (trn_atom d2)
                -> normalize (D1 d1) (D1' d2))
      <- (Pi d1:tr P2. Pi d2:tra P2.
             tra_reg d2 Dpropok2
                -> normalize d1 (trn_atom d2)
                -> normalize (D2 d1) (D2' d2))
      <- can_prop_size (por P1 P2) N1 Dsize
      <- form_ore N1 Dsize 0' nat_eq_ D0' (\x:tra P1. D1' x) (\x:tra P2. D2' x) D.
-falsee :
   normalize (tr_falsee Dpropok D) D''
      <- normalize D D'
      <- form_falsee D' Dpropok D''.
-equiv :
   normalize (tr_equiv Dpropok Dequiv Dtr) Dtrn'
      <- normalize Dtr Dtrn
      <- equiv_trn Dtrn Dequiv Dpropok Dtrn'.
-numeq_symm :
   normalize (tr_numeq_symm D) (trn_atom (tra_axiom (trax_numeq_symm D')))
      <- normalize D D'.
-numeq_trans :
   normalize (tr_numeq_trans D2 D1)
      (trn_atom (tra_axiom (trax_numeq_trans D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-numeq_lit : normalize tr_numeq_lit (trn_atom (tra_axiom trax_numeq_lit)).
-numeq_bin : normalize tr_numeq_bin (trn_atom (tra_axiom trax_numeq_bin)).
-numeq_rep1 :
   normalize (tr_numeq_rep1 D) (trn_atom (tra_axiom (trax_numeq_rep1 D))).
-numeq_rep2 :
   normalize (tr_numeq_rep2 D) (trn_atom (tra_axiom (trax_numeq_rep2 D))).
-numleq_refl :
   normalize (tr_numleq_refl D) (trn_atom (tra_axiom (trax_numleq_refl D')))
      <- normalize D D'.
-numleq_antisym :
   normalize (tr_numleq_antisymm D2 D1)
      (trn_atom (tra_axiom (trax_numleq_antisymm D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-numleq_trans :
   normalize (tr_numleq_trans D2 D1)
      (trn_atom (tra_axiom (trax_numleq_trans D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-numleq_lit :
   normalize (tr_numleq_lit D) (trn_atom (tra_axiom (trax_numleq_lit D))).
-numleq_good1 :
   normalize (tr_numleq_good1 D) (trn_atom (tra_axiom (trax_numleq_good1 D')))
      <- normalize D D'.
-numleq_good2 :
   normalize (tr_numleq_good2 D) (trn_atom (tra_axiom (trax_numleq_good2 D')))
      <- normalize D D'.
-numlt_lit :
   normalize (tr_numlt_lit D) (trn_atom (tra_axiom (trax_numlt_lit D))).
-numlt_bin :
   normalize (tr_numlt_bin D2 D1) (trn_atom (tra_axiom (trax_numlt_bin D2 D1))).
-numlt_contra :
   normalize (tr_numlt_contra D) (trn_atom (tra_axiom (trax_numlt_contra D')))
      <- normalize D D'.
-numadd_commute :
   normalize (tr_numadd_commute D2 D1)
      (trn_atom (tra_axiom (trax_numadd_commute D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-numadd_assoc :
   normalize (tr_numadd_assoc D3 D2 D1)
      (trn_atom (tra_axiom (trax_numadd_assoc D3' D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'
      <- normalize D3 D3'.
-numadd_ident :
   normalize (tr_numadd_ident D) (trn_atom (tra_axiom (trax_numadd_ident D')))
      <- normalize D D'.
-numadd_mono :
   normalize (tr_numadd_monotone D2 D1)
      (trn_atom (tra_axiom (trax_numadd_monotone D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-numadd_leq :
   normalize (tr_numadd_leq D2 D1)
      (trn_atom (tra_axiom (trax_numadd_leq D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-numadd_lit :
   normalize (tr_numadd_lit D) (trn_atom (tra_axiom (trax_numadd_lit D))).
-numadd_bin :
   normalize (tr_numadd_bin D) (trn_atom (tra_axiom (trax_numadd_bin D))).
-numadd_good1 :
   normalize (tr_numadd_good1 D) (trn_atom (tra_axiom (trax_numadd_good1 D')))
      <- normalize D D'.
-numadd_good2 :
   normalize (tr_numadd_good2 D) (trn_atom (tra_axiom (trax_numadd_good2 D')))
      <- normalize D D'.
-nummul_commute :
   normalize (tr_nummul_commute D2 D1)
      (trn_atom (tra_axiom (trax_nummul_commute D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-nummul_mono :
   normalize (tr_nummul_monotone D2 D1)
      (trn_atom (tra_axiom (trax_nummul_monotone D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-nummul_lit :
   normalize (tr_nummul_lit D) (trn_atom (tra_axiom (trax_nummul_lit D))).
-loclt_location :
   normalize (tr_loclt_location D)
      (trn_atom (tra_axiom (trax_loclt_location D))).
-loclt_trans :
   normalize (tr_loclt_trans D2 D1)
      (trn_atom (tra_axiom (trax_loclt_trans D2' D1')))
      <- normalize D1 D1'
      <- normalize D2 D2'.
-loclt_good1 :
   normalize (tr_loclt_good1 D) (trn_atom (tra_axiom (trax_loclt_good1 D')))
      <- normalize D D'.
-loclt_good2 :
   normalize (tr_loclt_good2 D) (trn_atom (tra_axiom (trax_loclt_good2 D')))
      <- normalize D D'.
-goodloc_loc :
   normalize tr_goodloc_location (trn_atom (tra_axiom trax_goodloc_location)).

equivp_impl_impl :
   Pi P1:prop. Pi P2:prop. Pi D:prop. Pi P3:prop. Pi P4:prop.
      equivp (pimpl P1 P2) D -> prop_eq D (pimpl P3 P4) -> type.
equivp_impl_impl' :
   Pi D:prop. Pi P1:prop. Pi P2:prop. Pi P3:prop. Pi P4:prop.
      equivp D (pimpl P1 P2) -> prop_eq D (pimpl P3 P4) -> type.
-refl : equivp_impl_impl equivp_reflex prop_eq_.
-ymm : equivp_impl_impl (equivp_symm X1 D) Deq <- equivp_impl_impl' D Deq.
-impl : equivp_impl_impl (equivp_impl X1 X2) prop_eq_.
-refl : equivp_impl_impl' equivp_reflex prop_eq_.
-ymm : equivp_impl_impl' (equivp_symm X1 D) Deq <- equivp_impl_impl D Deq.
-impl : equivp_impl_impl' (equivp_impl X1 X2) prop_eq_.
equivp_and_and :
   Pi P1:prop. Pi P2:prop. Pi D:prop. Pi P3:prop. Pi P4:prop.
      equivp (pand P1 P2) D -> prop_eq D (pand P3 P4) -> type.
equivp_and_and' :
   Pi D:prop. Pi P1:prop. Pi P2:prop. Pi P3:prop. Pi P4:prop.
      equivp D (pand P1 P2) -> prop_eq D (pand P3 P4) -> type.
-refl : equivp_and_and equivp_reflex prop_eq_.
-ymm : equivp_and_and (equivp_symm X1 D) Deq <- equivp_and_and' D Deq.
-and : equivp_and_and (equivp_and X1 X2) prop_eq_.
-refl : equivp_and_and' equivp_reflex prop_eq_.
-ymm : equivp_and_and' (equivp_symm X1 D) Deq <- equivp_and_and D Deq.
-and : equivp_and_and' (equivp_and X1 X2) prop_eq_.
equivp_or_or :
   Pi P1:prop. Pi P2:prop. Pi D:prop. Pi P3:prop. Pi P4:prop.
      equivp (por P1 P2) D -> prop_eq D (por P3 P4) -> type.
equivp_or_or' :
   Pi D:prop. Pi P1:prop. Pi P2:prop. Pi P3:prop. Pi P4:prop.
      equivp D (por P1 P2) -> prop_eq D (por P3 P4) -> type.
-refl : equivp_or_or equivp_reflex prop_eq_.
-ymm : equivp_or_or (equivp_symm X1 D) Deq <- equivp_or_or' D Deq.
-or : equivp_or_or (equivp_or X1 X2) prop_eq_.
-refl : equivp_or_or' equivp_reflex prop_eq_.
-ymm : equivp_or_or' (equivp_symm X1 D) Deq <- equivp_or_or D Deq.
-or : equivp_or_or' (equivp_or X1 X2) prop_eq_.
equivp_false_false : Pi D:prop. equivp pfalse D -> prop_eq D pfalse -> type.
equivp_false_false' : Pi D:prop. equivp D pfalse -> prop_eq D pfalse -> type.
-refl : equivp_false_false equivp_reflex prop_eq_.
-ymm : equivp_false_false (equivp_symm X1 D) Deq <- equivp_false_false' D Deq.
-refl : equivp_false_false' equivp_reflex prop_eq_.
-ymm : equivp_false_false' (equivp_symm X1 D) Deq <- equivp_false_false D Deq.
false_implies_trc : Pi P:prop. false -> trc P -> type.
no_atomic_impl : Pi P1:prop. Pi P2:prop. tra (pimpl P1 P2) -> false -> type.
no_atomic_and : Pi P1:prop. Pi P2:prop. tra (pand P1 P2) -> false -> type.
-imple : no_atomic_impl (tra_imple X1 D) Dfalse <- no_atomic_impl D Dfalse.
-ande1 : no_atomic_impl (tra_ande1 D) Dfalse <- no_atomic_and D Dfalse.
-ande2 : no_atomic_impl (tra_ande2 D) Dfalse <- no_atomic_and D Dfalse.
-equiv :
   no_atomic_impl (tra_equiv X1 Dequiv D) Dfalse
      <- equivp_impl_impl' Dequiv Deq
      <- tra_resp Deq D D'
      <- no_atomic_impl D' Dfalse.
-imple : no_atomic_and (tra_imple X1 D) Dfalse <- no_atomic_impl D Dfalse.
-ande1 : no_atomic_and (tra_ande1 D) Dfalse <- no_atomic_and D Dfalse.
-ande2 : no_atomic_and (tra_ande2 D) Dfalse <- no_atomic_and D Dfalse.
-equiv :
   no_atomic_and (tra_equiv X1 Dequiv D) Dfalse
      <- equivp_and_and' Dequiv Deq
      <- tra_resp Deq D D'
      <- no_atomic_and D' Dfalse.
no_atomic_or : Pi P1:prop. Pi P2:prop. tra (por P1 P2) -> false -> type.
-imple : no_atomic_or (tra_imple X1 D) Dfalse <- no_atomic_impl D Dfalse.
-ande1 : no_atomic_or (tra_ande1 D) Dfalse <- no_atomic_and D Dfalse.
-ande2 : no_atomic_or (tra_ande2 D) Dfalse <- no_atomic_and D Dfalse.
-equiv :
   no_atomic_or (tra_equiv X1 Dequiv D) Dfalse
      <- equivp_or_or' Dequiv Deq
      <- tra_resp Deq D D'
      <- no_atomic_or D' Dfalse.
no_canonical_false : trc pfalse -> false -> type.
equiv_trc :
   Pi P1:prop. Pi P2:prop. trc P1 -> equivp P1 P2 -> propok P2 -> trc P2 -> type.
equiv_trc' :
   Pi P1:prop. Pi P2:prop. trc P1 -> equivp P2 P1 -> propok P2 -> trc P2 -> type.
-reflex : equiv_trc D equivp_reflex X1 D.
-ymm :
   equiv_trc D (equivp_symm Dpropok Dequiv) X1 D'
      <- equiv_trc' D Dequiv Dpropok D'.
-impl :
   equiv_trc (trc_impl Dpropok (\x:tra P1. D x)) (equivp_impl Dequiv2 Dequiv1)
      (propok_impl Dpropok2 Dpropok1)
      (trc_impl Dpropok1
          (\d:tra P4. D' (tra_equiv Dpropok (equivp_symm Dpropok Dequiv1) d)))
      <- (Pi d:tra P1.
             tra_reg d Dpropok -> equiv_trn (D d) Dequiv2 Dpropok2 (D' d)).
-and :
   equiv_trc (trc_and D2 D1) (equivp_and Dequiv2 Dequiv1)
      (propok_and Dpropok2 Dpropok1) (trc_and D2' D1')
      <- equiv_trc D1 Dequiv1 Dpropok1 D1'
      <- equiv_trc D2 Dequiv2 Dpropok2 D2'.
-or1 :
   equiv_trc (trc_or1 X1 D) (equivp_or X2 Dequiv) (propok_or Dpropok2 Dpropok1)
      (trc_or1 Dpropok2 D')
      <- equiv_trc D Dequiv Dpropok1 D'.
-or2 :
   equiv_trc (trc_or2 X1 D) (equivp_or Dequiv X2) (propok_or Dpropok2 Dpropok1)
      (trc_or2 Dpropok1 D')
      <- equiv_trc D Dequiv Dpropok2 D'.
-numeq :
   equiv_trc (trc_numeq Dcalc2 Dcalc1) (equivp_numeq Dequiv2 Dequiv1)
      (propok_numeq Dkof2 Dkof1) (trc_numeq Dcalc2' Dcalc1')
      <- calculate_equiv Dcalc1 Dequiv1 Dcalc1'
      <- calculate_equiv Dcalc2 Dequiv2 Dcalc2'.
-numleq :
   equiv_trc (trc_numleq Dleq Dcalc2 Dcalc1) (equivp_numleq Dequiv2 Dequiv1)
      (propok_numleq Dkof2 Dkof1) (trc_numleq Dleq Dcalc2' Dcalc1')
      <- calculate_equiv Dcalc1 Dequiv1 Dcalc1'
      <- calculate_equiv Dcalc2 Dequiv2 Dcalc2'.
-loclt :
   equiv_trc (trc_loclt Dlt Dcalc2 Dcalc1) (equivp_loclt Dequiv2 Dequiv1)
      (propok_loclt Dkof2 Dkof1) (trc_loclt Dlt Dcalc2' Dcalc1')
      <- calcloc_equiv Dcalc1 Dequiv1 Dcalc1'
      <- calcloc_equiv Dcalc2 Dequiv2 Dcalc2'.
-goodlc :
   equiv_trc (trc_goodloc Dcalc) (equivp_goodloc Dequiv) (propok_goodloc Dkof)
      (trc_goodloc Dcalc')
      <- calcloc_equiv Dcalc Dequiv Dcalc'.
-reflex : equiv_trc' D equivp_reflex X1 D.
-ymm :
   equiv_trc' D (equivp_symm X1 Dequiv) Dpropok D'
      <- equiv_trc D Dequiv Dpropok D'.
-impl :
   equiv_trc' (trc_impl Dpropok (\x:tra P1. D x)) (equivp_impl Dequiv2 Dequiv1)
      (propok_impl Dpropok2 Dpropok1)
      (trc_impl Dpropok1 (\d:tra P4. D' (tra_equiv Dpropok Dequiv1 d)))
      <- (Pi d:tra P1.
             tra_reg d Dpropok -> equiv_trn' (D d) Dequiv2 Dpropok2 (D' d)).
-and :
   equiv_trc' (trc_and D2 D1) (equivp_and Dequiv2 Dequiv1)
      (propok_and Dpropok2 Dpropok1) (trc_and D2' D1')
      <- equiv_trc' D1 Dequiv1 Dpropok1 D1'
      <- equiv_trc' D2 Dequiv2 Dpropok2 D2'.
-or1 :
   equiv_trc' (trc_or1 X1 D) (equivp_or X2 Dequiv) (propok_or Dpropok2 Dpropok1)
      (trc_or1 Dpropok2 D')
      <- equiv_trc' D Dequiv Dpropok1 D'.
-or2 :
   equiv_trc' (trc_or2 X1 D) (equivp_or Dequiv X2) (propok_or Dpropok2 Dpropok1)
      (trc_or2 Dpropok1 D')
      <- equiv_trc' D Dequiv Dpropok2 D'.
-numeq :
   equiv_trc' (trc_numeq Dcalc2 Dcalc1) (equivp_numeq Dequiv2 Dequiv1)
      (propok_numeq Dkof2 Dkof1) (trc_numeq Dcalc2' Dcalc1')
      <- calculate_equiv Dcalc1 (equiv_symm Dkof1 Dequiv1) Dcalc1'
      <- calculate_equiv Dcalc2 (equiv_symm Dkof2 Dequiv2) Dcalc2'.
-numleq :
   equiv_trc' (trc_numleq Dleq Dcalc2 Dcalc1) (equivp_numleq Dequiv2 Dequiv1)
      (propok_numleq Dkof2 Dkof1) (trc_numleq Dleq Dcalc2' Dcalc1')
      <- calculate_equiv Dcalc1 (equiv_symm Dkof1 Dequiv1) Dcalc1'
      <- calculate_equiv Dcalc2 (equiv_symm Dkof2 Dequiv2) Dcalc2'.
-loclt :
   equiv_trc' (trc_loclt Dlt Dcalc2 Dcalc1) (equivp_loclt Dequiv2 Dequiv1)
      (propok_loclt Dkof2 Dkof1) (trc_loclt Dlt Dcalc2' Dcalc1')
      <- calcloc_equiv Dcalc1 (equiv_symm Dkof1 Dequiv1) Dcalc1'
      <- calcloc_equiv Dcalc2 (equiv_symm Dkof2 Dequiv2) Dcalc2'.
-goodlc :
   equiv_trc' (trc_goodloc Dcalc) (equivp_goodloc Dequiv) (propok_goodloc Dkof)
      (trc_goodloc Dcalc')
      <- calcloc_equiv Dcalc (equiv_symm Dkof Dequiv) Dcalc'.
canonize_atomic : Pi P:prop. tra P -> trc P -> type.
canonize_normal : Pi P:prop. trn P -> trc P -> type.
canonize_axiom : Pi P:prop. trax P -> trc P -> type.
-axiom : canonize_atomic (tra_axiom D) D' <- canonize_axiom D D'.
-imple :
   canonize_atomic (tra_imple X1 D) D'
      <- no_atomic_impl D Dfalse
      <- false_implies_trc Dfalse D'.
-ande1 :
   canonize_atomic (tra_ande1 D) D'
      <- no_atomic_and D Dfalse
      <- false_implies_trc Dfalse D'.
-ande2 :
   canonize_atomic (tra_ande2 D) D'
      <- no_atomic_and D Dfalse
      <- false_implies_trc Dfalse D'.
-equiv :
   canonize_atomic (tra_equiv Dpropok Dequiv D) D''
      <- canonize_atomic D D'
      <- equiv_trc D' Dequiv Dpropok D''.
-atom : canonize_normal (trn_atom D) D' <- canonize_atomic D D'.
-impli :
   canonize_normal (trn_impli Dpropok (\x:tra P1. Dtr x))
      (trc_impl Dpropok (\x:tra P1. Dtr x)).
-andi :
   canonize_normal (trn_andi D2 D1) (trc_and D2' D1')
      <- canonize_normal D1 D1'
      <- canonize_normal D2 D2'.
-ori1 :
   canonize_normal (trn_ori1 Dpropok D) (trc_or1 Dpropok D')
      <- canonize_normal D D'.
-ori2 :
   canonize_normal (trn_ori2 Dpropok D) (trc_or2 Dpropok D')
      <- canonize_normal D D'.
-ore :
   canonize_normal (trn_ore (\x:tra P3. X1 x) (\x:tra P2. X2 x) D) D'
      <- no_atomic_or D Dfalse
      <- false_implies_trc Dfalse D'.
-falsee :
   canonize_normal (trn_falsee X1 D) D''
      <- canonize_atomic D D'
      <- no_canonical_false D' Dfalse
      <- false_implies_trc Dfalse D''.
-numeq_symm :
   canonize_axiom (trax_numeq_symm D) (trc_numeq Dcalc1 Dcalc2)
      <- canonize_normal D (trc_numeq Dcalc2 Dcalc1).
-numeq_trans :
   canonize_axiom (trax_numeq_trans D23 D12) (trc_numeq Dcalc3' Dcalc1)
      <- canonize_normal D12 (trc_numeq Dcalc2 Dcalc1)
      <- canonize_normal D23 (trc_numeq Dcalc3 Dcalc2')
      <- calculate_fun Dcalc2' Dcalc2 Deq
      <- calculate_resp tp_eq_ Deq Dcalc3 Dcalc3'.
-numeq_lit :
   canonize_axiom trax_numeq_lit (trc_numeq calculate_numlit calculate_numlit).
-numeq_bin :
   canonize_axiom trax_numeq_bin
      (trc_numeq (calculate_number Drep) (calculate_number Drep))
      <- can_represents1 B1 N2 Drep.
-numeq_rep1 :
   canonize_axiom (trax_numeq_rep1 Drep)
      (trc_numeq calculate_numlit (calculate_number Drep)).
-numeq_rep2 :
   canonize_axiom (trax_numeq_rep2 Drep)
      (trc_numeq (calculate_number Drep) calculate_numlit).
-numleq_refl :
   canonize_axiom (trax_numleq_refl D) (trc_numleq Dleq Dcalc2 Dcalc1)
      <- canonize_normal D (trc_numeq Dcalc2 Dcalc1)
      <- leq_reflex N1 Dleq.
-numleq_antisym :
   canonize_axiom (trax_numleq_antisymm D' D) (trc_numeq Dcalc2 Dcalc1'')
      <- canonize_normal D (trc_numleq Dleq Dcalc2 Dcalc1)
      <- canonize_normal D' (trc_numleq Dleq' Dcalc1' Dcalc2')
      <- calculate_fun Dcalc1' Dcalc1 Deq1
      <- calculate_fun Dcalc2' Dcalc2 Deq2
      <- leq_resp Deq2 Deq1 Dleq' Dleq''
      <- leq_antisymm Dleq Dleq'' Deq
      <- calculate_resp tp_eq_ Deq Dcalc1 Dcalc1''.
-numleq_trans :
   canonize_axiom (trax_numleq_trans D23 D12) (trc_numleq Dleq Dcalc3 Dcalc1)
      <- canonize_normal D12 (trc_numleq Dleq12 Dcalc2 Dcalc1)
      <- canonize_normal D23 (trc_numleq Dleq23 Dcalc3 Dcalc2')
      <- calculate_fun Dcalc2 Dcalc2' Deq
      <- leq_resp nat_eq_ Deq Dleq12 Dleq12'
      <- leq_trans Dleq12' Dleq23 Dleq.
-numleq_lit :
   canonize_axiom (trax_numleq_lit D)
      (trc_numleq D calculate_numlit calculate_numlit).
-numleq_good1 :
   canonize_axiom (trax_numleq_good1 D) (trc_numeq Dcalc1 Dcalc1)
      <- canonize_normal D (trc_numleq X1 Dcalc2 Dcalc1).
-numleq_good2 :
   canonize_axiom (trax_numleq_good2 D) (trc_numeq Dcalc2 Dcalc2)
      <- canonize_normal D (trc_numleq X1 Dcalc2 Dcalc1).
-numlit_lit :
   canonize_axiom (trax_numlt_lit Dlt)
      (trc_numleq Dleq calculate_numlit
          (calculate_numadd (sum_s sum_z) calculate_numlit calculate_numlit))
      <- lt_implies_succ_leq Dlt Dleq.
-numlt_bin :
   canonize_axiom (trax_numlt_bin Dinz Dadd)
      (trc_numleq Dleq (calculate_number Drep2)
          (calculate_numadd (sum_s sum_z) (calculate_number Drep1)
              calculate_numlit))
      <- can_represents1 B3 N3 Drep2
      <- sum_add_corr4 Drep1 Drepdiff Drep2 Dsum Dadd
      <- represents_nonzero Dinz Drepdiff Deqdiff
      <- sum_resp nat_eq_ Deqdiff nat_eq_ Dsum Dsum'
      <- sum_shift' Dsum'' Dsum'
      <- sum_implies_leq Dsum'' Dleq.
-numlt_contra :
   canonize_axiom (trax_numlt_contra D) D'
      <- canonize_normal D
            (trc_numleq Dleq Dcalc2
                (calculate_numadd (sum_s sum_z) Dcalc1 calculate_numlit))
      <- calculate_fun Dcalc2 Dcalc1 Deq
      <- leq_resp nat_eq_ Deq Dleq Dleq'
      <- leq_succ_implies_lt Dleq' Dlt
      <- lt_contradict Dlt Dfalse
      <- false_implies_trc Dfalse D'.
-numadd_commute :
   canonize_axiom (trax_numadd_commute D2 D1)
      (trc_numeq (calculate_numadd Dsum' Dcalc1 Dcalc2)
          (calculate_numadd Dsum Dcalc2 Dcalc1))
      <- canonize_normal D1 (trc_numeq X2 Dcalc1)
      <- canonize_normal D2 (trc_numeq X1 Dcalc2)
      <- can_sum N1 N2 N3 Dsum
      <- sum_commute Dsum Dsum'.
-numadd_assoc :
   canonize_axiom (trax_numadd_assoc D3 D2 D1)
      (trc_numeq
          (calculate_numadd Dsum12_3 Dcalc3
              (calculate_numadd Dsum12 Dcalc2 Dcalc1))
          (calculate_numadd Dsum1_23 (calculate_numadd Dsum23 Dcalc3 Dcalc2)
              Dcalc1))
      <- canonize_normal D1 (trc_numeq X3 Dcalc1)
      <- canonize_normal D2 (trc_numeq X2 Dcalc2)
      <- canonize_normal D3 (trc_numeq X1 Dcalc3)
      <- can_sum N1 N2 N3 Dsum12
      <- can_sum N3 N4 N5 Dsum12_3
      <- sum_assoc Dsum12 Dsum12_3 Dsum23 Dsum1_23.
-numadd_ident :
   canonize_axiom (trax_numadd_ident D)
      (trc_numeq Dcalc (calculate_numadd Dsum calculate_numlit Dcalc))
      <- canonize_normal D (trc_numeq X1 Dcalc)
      <- sum_ident N1 Dsum.
-numadd_mono :
   canonize_axiom (trax_numadd_monotone D2 D1)
      (trc_numleq Dleq (calculate_numadd Dsum' Dcalc2' Dcalc1')
          (calculate_numadd Dsum Dcalc2 Dcalc1))
      <- canonize_normal D1 (trc_numleq Dleq1 Dcalc1' Dcalc1)
      <- canonize_normal D2 (trc_numleq Dleq2 Dcalc2' Dcalc2)
      <- can_sum N2 N4 N6 Dsum'
      <- sum_monotone' Dleq1 Dleq2 Dsum Dsum' Dleq.
-numadd_leq :
   canonize_axiom (trax_numadd_leq D2 D1)
      (trc_numleq Dleq (calculate_numadd Dsum Dcalc2 Dcalc1) Dcalc1)
      <- canonize_normal D1 (trc_numeq X2 Dcalc1)
      <- canonize_normal D2 (trc_numeq X1 Dcalc2)
      <- can_sum N1 N2 N3 Dsum
      <- sum_implies_leq Dsum Dleq.
-numadd_lit :
   canonize_axiom (trax_numadd_lit Dsum)
      (trc_numeq calculate_numlit
          (calculate_numadd Dsum calculate_numlit calculate_numlit)).
-numadd_bin :
   canonize_axiom (trax_numadd_bin Dadd)
      (trc_numeq (calculate_number Drep3)
          (calculate_numadd Dsum (calculate_number Drep2)
              (calculate_number Drep1)))
      <- can_represents1 B3 N4 Drep3
      <- sum_add_corr4 Drep1 Drep2 Drep3 Dsum Dadd.
-numadd_good1 :
   canonize_axiom (trax_numadd_good1 D) (trc_numeq Dcalc1 Dcalc1)
      <- canonize_normal D (trc_numeq (calculate_numadd X1 Dcalc2 Dcalc1) X2).
-numadd_good2 :
   canonize_axiom (trax_numadd_good2 D) (trc_numeq Dcalc2 Dcalc2)
      <- canonize_normal D (trc_numeq (calculate_numadd X1 Dcalc2 Dcalc1) X2).
-nummul_commute :
   canonize_axiom (trax_nummul_commute D2 D1)
      (trc_numeq (calculate_nummul Dprod' Dcalc1 Dcalc2)
          (calculate_nummul Dprod Dcalc2 Dcalc1))
      <- canonize_normal D1 (trc_numeq X2 Dcalc1)
      <- canonize_normal D2 (trc_numeq X1 Dcalc2)
      <- can_product N1 N2 N3 Dprod
      <- prod_commute Dprod Dprod'.
-nummul_mono :
   canonize_axiom (trax_nummul_monotone D2 D1)
      (trc_numleq Dleq (calculate_nummul Dprod' Dcalc2' Dcalc1')
          (calculate_nummul Dprod Dcalc2 Dcalc1))
      <- canonize_normal D1 (trc_numleq Dleq1 Dcalc1' Dcalc1)
      <- canonize_normal D2 (trc_numleq Dleq2 Dcalc2' Dcalc2)
      <- can_product N2 N4 N6 Dprod'
      <- prod_monotone' Dleq1 Dleq2 Dprod Dprod' Dleq.
-nummul_lit :
   canonize_axiom (trax_nummul_lit Dsum)
      (trc_numeq calculate_numlit
          (calculate_nummul Dsum calculate_numlit calculate_numlit)).
-loclt_location :
   canonize_axiom (trax_loclt_location Dlt)
      (trc_loclt Dlt (calcloc_canon Dcanon2) (calcloc_canon Dcanon1))
      <- cloc_lt_reg Dlt Dcanon1 Dcanon2.
-loclt_trans :
   canonize_axiom (trax_loclt_trans D23 D12)
      (trc_loclt (cloc_lt_trans Dlt23 Dlt12') Dcalc3 Dcalc1)
      <- canonize_normal D12 (trc_loclt Dlt12 Dcalc2 Dcalc1)
      <- canonize_normal D23 (trc_loclt Dlt23 Dcalc3 Dcalc2')
      <- calcloc_fun Dcalc2 Dcalc2' Deq
      <- cloc_lt_resp tp_eq_ Deq Dlt12 Dlt12'.
-loclt_good1 :
   canonize_axiom (trax_loclt_good1 D) (trc_goodloc Dcalc1)
      <- canonize_normal D (trc_loclt X1 Dcalc2 Dcalc1).
-loclt_good2 :
   canonize_axiom (trax_loclt_good2 D) (trc_goodloc Dcalc2)
      <- canonize_normal D (trc_loclt X1 Dcalc2 Dcalc1).
-goodloc_loc :
   canonize_axiom trax_goodloc_location (trc_goodloc (calcloc_canon canonloc_)).
canonize : Pi P:prop. tr P -> trc P -> type.
- : canonize Dtr Dtrc <- normalize Dtr Dtrn <- canonize_normal Dtrn Dtrc.
numeq_number_cdr :
   Pi N1:nat. Pi B1:binary N1. Pi N2:nat. Pi B2:binary N2.
      tr (pnumeq (number B1) (number B2)) -> nat_eq N1 N2 -> binary_eq B1 B2
         -> type.
- :
   numeq_number_cdr Dtr nat_eq_ Deq
      <- canonize Dtr
            (trc_numeq (calculate_number Drep2) (calculate_number Drep1))
      <- represents_fun2 Drep1 Drep2 Deq.
numeq_numlit_fun :
   Pi T':tp. Pi N:nat. Pi N':nat.
      tr (pnumeq T' (numlit N)) -> tr (pnumeq T' (numlit N')) -> nat_eq N N'
         -> type.
- :
   numeq_numlit_fun Dtr1 Dtr2 Deq
      <- canonize (tr_numeq_trans Dtr2 (tr_numeq_symm Dtr1))
            (trc_numeq Dcalc calculate_numlit)
      <- calculate_fun Dcalc calculate_numlit Deq.
canonize_numlt :
   Pi T1:tp. Pi T2:tp. Pi N1:nat. Pi N2:nat.
      tr (pnumlt T1 T2) -> calculate T1 N1 -> calculate T2 N2 -> lt N1 N2
         -> type.
- :
   canonize_numlt Dtr Dcalc1 Dcalc2 Dlt
      <- canonize Dtr
            (trc_numleq Dleq Dcalc2
                (calculate_numadd (sum_s sum_z) Dcalc1 calculate_numlit))
      <- leq_succ_implies_lt Dleq Dlt.
canonize_good : Pi T':tp. Pi N:nat. tr (good T') -> calculate T' N -> type.
- : canonize_good Dtr Dcalc <- canonize Dtr (trc_numeq X1 Dcalc).
canonize_numeq_lit :
   Pi N:nat. Pi N':nat.
      tr (pnumeq (numlit N) (numlit N')) -> nat_eq N N' -> type.
- :
   canonize_numeq_lit Dtr Deq
      <- canonize Dtr (trc_numeq Dcalc2 Dcalc1)
      <- calculate_fun calculate_numlit Dcalc1 Deq1
      <- calculate_fun Dcalc2 calculate_numlit Deq2
      <- nat_eq_trans Deq1 Deq2 Deq.
false_implies_sat :
   false -> Pi T':tp. Pi R:pred. Pi K:kind. sat T' R K -> type.
notvar : tp -> type.
notvar_annot : notvar (annot T1 R1 K1).
notvar_lam : notvar (lam K1 (\t:tp. T1 t)).
notvar_app : notvar (app T1 T2).
notvar_pair : notvar (pair T1 T2).
notvar_pi1 : notvar (pi1 T1).
notvar_pi2 : notvar (pi2 T1).
notvar_klam : notvar (klam (\k:kind. \r:pred. T1 k r)).
notvar_kapp : notvar (kapp T1 K1 R1).
notvar_in1 : notvar (in1 T1 K1).
notvar_in2 : notvar (in2 T1 K1).
notvar_case : notvar (case T1 K1 K2 K3 (\t:tp. T2 t) (\t:tp. T3 t)).
notvar_roll : notvar (roll (\k:kind. K1 k) T1).
notvar_unroll : notvar (unroll T1).
notvar_b0 : notvar b0.
notvar_b1 : notvar b1.
notvar_seteq : notvar (seteq N1 T1).
notvar_prod : notvar (prod T1 T2).
notvar_exp : notvar (exp T1 T2).
notvar_code : notvar (code PC1 G1).
notvar_arrow : notvar (arrow G1).
notvar_cbox : notvar (cbox T1 T2).
notvar_cmbox : notvar (cmbox T1 T2).
notvar_sptr : notvar (sptr T1).
notvar_forall : notvar (forall K1 R1 (\t:tp. T1 t)).
notvar_exists : notvar (exists K1 R1 (\t:tp. T1 t)).
notvar_guard : notvar (guard P1 T1).
notvar_assert : notvar (assert P1 T1).
notvar_rec : notvar (rec (\t:tp. T1 t)).
notvar_meet : notvar (meet T1 T2).
notvar_join : notvar (join T1 T2).
notvar_ns : notvar ns.
notvar_void : notvar (void N1).
notvar_number : notvar (number B1).
notvar_gotptr : notvar gotptr.
csat : tp -> pred -> kind -> type.
csat_true : csat T' (rtrue K) K <- kof T' K.
csat_annot : csat (annot T' R K) R' K <- sat T' R K <- entails R R'.
csat_lam :
   csat (lam K (\t:tp. T' t)) (rarrow R1 R2) (karrow K1 K2)
      <- kind_eq K K1
      <- pon R1 K
      <- (Pi t:tp. kof t K -> sat t R1 K -> sat (T' t) R2 K2).
csat_app :
   csat (app T1 T2) R2 K2
      <- sat T1 (rarrow R1 R2) (karrow K1 K2)
      <- sat T2 R1 K1.
csat_pair :
   csat (pair T1 T2) (rprod R1 R2) (kprod K1 K2) <- sat T1 R1 K1 <- sat T2 R2 K2.
csat_pi1 : csat (pi1 T') R1 K1 <- sat T' (rprod R1 R2) (kprod K1 K2).
csat_pi2 : csat (pi2 T') R2 K2 <- sat T' (rprod R1 R2) (kprod K1 K2).
csat_klam :
   csat (klam (\k:kind. \r:pred. T' k r)) (rforall (\k:kind. \r:pred. R k r))
      (kforall (\k:kind. K k))
      <- (Pi k:kind. Pi r:pred. pon r k -> sat (T' k r) (R k r) (K k)).
csat_kapp :
   csat (kapp T' K' R') R'' (K K')
      <- sat T' (rforall (\k:kind. \r:pred. R k r)) (kforall (\k:kind. K k))
      <- pon R' K'
      <- entails (R K' R') R''.
csat_in1 :
   csat (in1 T' K) (rsum R1 R2) (ksum K1 K2)
      <- kind_eq K K2
      <- sat T' R1 K1
      <- pon R2 K.
csat_in2 :
   csat (in2 T' K) (rsum R1 R2) (ksum K1 K2)
      <- kind_eq K K1
      <- sat T' R2 K2
      <- pon R1 K.
csat_case :
   csat (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)) R K'
      <- kind_eq K K'
      <- sat T' (rsum R1 R2) (ksum K1 K2)
      <- (Pi t:tp. kof t K1 -> sat t R1 K1 -> sat (T1 t) R K)
      <- (Pi t:tp. kof t K2 -> sat t R2 K2 -> sat (T2 t) R K).
csat_roll :
   csat (roll (\k:kind. K k) T') (rrec (\k:kind. \r:pred. R k r))
      (krec (\k:kind. K' k))
      <- (Pi k:kind. kind_eq (K k) (K' k))
      <- (Pi k:kind. Pi r:pred. pon r k -> pon (R k r) (K k))
      <- sat T' (R (krec (\k:kind. K k)) (rrec (\k:kind. \r:pred. R k r)))
            (K (krec (\k:kind. K k))).
csat_unroll :
   csat (unroll T') R' (K (krec (\k:kind. K k)))
      <- sat T' (rrec (\k:kind. \r:pred. R k r)) (krec (\k:kind. K k))
      <- entails (R (krec (\k:kind. K k)) (rrec (\k:kind. \r:pred. R k r))) R'.
csat_b0d : csat b0 rtd kt.
csat_b0i : csat b0 (rtn TN) kt <- tr (pnumeq (numlit 0') TN).
csat_b1d : csat b1 rtd kt.
csat_b1i : csat b1 (rtn TN) kt <- tr (pnumeq (numlit 1') TN).
csat_seteqd : csat (seteq N T') rtd kt <- kof T' knum.
csat_seteqi :
   csat (seteq N T') (rtn TN) kt <- kof T' knum <- tr (pnumeq (numlit N) TN).
csat_prodd : csat (prod T1 T2) rtd kt <- sat T1 rtd kt <- sat T2 rtd kt.
csat_prodn :
   csat (prod T1 T2) (rtn TN) kt
      <- sat T1 (rtn TN1) kt
      <- sat T2 (rtn TN2) kt
      <- tr (pimpl (good (numadd TN1 TN2)) (pnumeq (numadd TN1 TN2) TN)).
csat_expd : csat (exp T' TN) rtd kt <- sat T' rtd kt <- kof TN knum.
csat_expdz :
   csat (exp T' BT) rtd kt
      <- kof T' kt
      <- kof BT knum
      <- tr (pnumeq BT (numlit 0')).
csat_expn :
   csat (exp T' TN1) (rtn TN) kt
      <- sat T' (rtn TN2) kt
      <- kof TN1 knum
      <- tr (good TN2)
      <- tr (pimpl (good (nummul TN1 TN2)) (pnumeq (nummul TN1 TN2) TN)).
csat_expiz :
   csat (exp T' BT) (rtn TN) kt
      <- kof T' kt
      <- kof BT knum
      <- tr (pnumeq BT (numlit 0'))
      <- tr (pnumeq (numlit 0') TN).
csat_arrowd : csat (arrow G) rtd kt <- rtpok G.
csat_arrowi : csat (arrow G) (rtn TN) kt <- rtpok G <- tr (pnumeq wordnum TN).
csat_cboxd : csat (cbox T1 T2) rtd kt <- kof T1 kt <- kof T2 kt.
csat_cboxi :
   csat (cbox T1 T2) (rtn TN) kt
      <- kof T1 kt
      <- kof T2 kt
      <- tr (pnumeq wordnum TN).
csat_cmboxd : csat (cmbox T1 T2) rtd kt <- kof T1 kt <- kof T2 kt.
csat_cmboxi :
   csat (cmbox T1 T2) (rtn TN) kt
      <- kof T1 kt
      <- kof T2 kt
      <- tr (pnumeq wordnum TN).
csat_sptrd : csat (sptr T') rtd kt <- kof T' kt.
csat_sptri : csat (sptr T') (rtn TN) kt <- kof T' kt <- tr (pnumeq wordnum TN).
csat_foralld :
   csat (forall K R (\t:tp. T' t)) rtd kt
      <- (Pi t:tp. kof t K -> kof (T' t) kt)
      <- sat T' R K
      <- sat (T' T') rtd kt.
csat_foralli :
   csat (forall K R (\t:tp. T' t)) (rtn TN) kt
      <- (Pi t:tp. kof t K -> kof (T' t) kt)
      <- sat T' R K
      <- sat (T' T') (rtn TN) kt.
csat_existsd :
   csat (exists K R (\t:tp. T' t)) rtd kt
      <- pon R K
      <- (Pi t:tp. kof t K -> sat t R K -> sat (T' t) (rtn TN) kt).
csat_existsi :
   csat (exists K R (\t:tp. T' t)) (rtn TN) kt
      <- pon R K
      <- (Pi t:tp. kof t K -> sat t R K -> sat (T' t) (rtn TN) kt).
csat_guardd : csat (guard P T') rtd kt <- propok P <- tr P <- sat T' rtd kt.
csat_guardi :
   csat (guard P T') (rtn TN) kt <- propok P <- tr P <- sat T' (rtn TN) kt.
csat_assertd : csat (assert P T') rtd kt <- propok P <- (tr P -> sat T' rtd kt).
csat_asserti :
   csat (assert P T') (rtn TN) kt <- propok P <- (tr P -> sat T' (rtn TN) kt).
csat_recd :
   csat (rec (\t:tp. T' t)) rtd kt <- (Pi t:tp. kof t kt -> sat (T' t) rtd kt).
csat_reci :
   csat (rec (\t:tp. T' t)) (rtn TN) kt
      <- (Pi t:tp. kof t kt -> sat (T' t) (rtn TN) kt).
csat_meetd1 : csat (meet T1 T2) rtd kt <- sat T1 rtd kt <- kof T2 kt.
csat_meetd2 : csat (meet T1 T2) rtd kt <- kof T1 kt <- sat T2 rtd kt.
csat_meeti1 : csat (meet T1 T2) (rtn TN) kt <- sat T1 (rtn TN) kt <- kof T2 kt.
csat_meeti2 : csat (meet T1 T2) (rtn TN) kt <- kof T1 kt <- sat T2 (rtn TN) kt.
csat_joind :
   csat (join T1 T2) rtd kt <- sat T1 (rtn TN) kt <- sat T2 (rtn TN) kt.
csat_joini :
   csat (join T1 T2) (rtn TN) kt <- sat T1 (rtn TN) kt <- sat T2 (rtn TN) kt.
csat_nsd : csat ns rtd kt.
csat_nsi : csat ns (rtn TN) kt <- tr (pnumeq (numlit 1') TN).
csat_voidd : csat (void N1) rtd kt.
csat_voidi : csat (void N) (rtn TN) kt <- tr (pnumeq (numlit N) TN).
csat_gotptrd : csat gotptr rtd kt.
csat_gotptri : csat gotptr (rtn TN) kt <- tr (pnumeq wordnum TN).
csat_resp :
   Pi T':tp. Pi T':tp. Pi R:pred. Pi R':pred. Pi K:kind. Pi K':kind.
      tp_eq T' T' -> pred_eq R R' -> kind_eq K K' -> csat T' R K
         -> csat T' R' K' -> type.
- : csat_resp tp_eq_ pred_eq_ kind_eq_ D D.
csat_weaken : Pi T':tp. Pi R:pred. Pi K:kind. csat T' R K -> sat T' R K -> type.
-true : csat_weaken (csat_true D) (sat_true D).
-annot : csat_weaken (csat_annot Dent D) (entailment Dent (sat_annot D)).
-lam :
   csat_weaken
      (csat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1 kind_eq_)
      (sat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1).
-app : csat_weaken (csat_app D2 D1) (sat_app D2 D1).
-pair : csat_weaken (csat_pair D2 D1) (sat_pair D2 D1).
-pi1 : csat_weaken (csat_pi1 D) (sat_pi1 D).
-pi2 : csat_weaken (csat_pi2 D) (sat_pi2 D).
-klam :
   csat_weaken (csat_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (sat_klam (\k:kind. \r:pred. \x:pon r k. D k r x)).
-kapp : csat_weaken (csat_kapp Dent D2 D1) (entailment Dent (sat_kapp D2 D1)).
-in1 : csat_weaken (csat_in1 D2 D1 kind_eq_) (sat_in1 D2 D1).
-in2 : csat_weaken (csat_in2 D2 D1 kind_eq_) (sat_in2 D2 D1).
-case :
   csat_weaken
      (csat_case (\t:tp. \x:kof t K2. \x1:sat t R2 K2. D2 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R3 K1. D1 t x x1) D0 kind_eq_)
      (sat_case (\t:tp. \x:kof t K2. \x1:sat t R2 K2. D2 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R3 K1. D1 t x x1) D0).
-roll :
   csat_weaken
      (csat_roll D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x) (\k:kind. kind_eq_))
      (sat_roll D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x)).
-unroll : csat_weaken (csat_unroll Dent D) (entailment Dent (sat_unroll D)).
-b0 : csat_weaken csat_b0d sat_b0d.
-b0 : csat_weaken (csat_b0i D) (incleq _ _ _ D sat_b0i).
-b1 : csat_weaken csat_b1d sat_b1d.
-b1 : csat_weaken (csat_b1i D) (incleq _ _ _ D sat_b1i).
-eteq : csat_weaken (csat_seteqd D) (incl _ _ (sat_seteqi D)).
-eteq : csat_weaken (csat_seteqi D D1) (incleq _ _ _ D (sat_seteqi D1)).
-prod : csat_weaken (csat_prodd D2 D1) (sat_prodd D2 D1).
-prod :
   csat_weaken (csat_prodn D3 D2 D1)
      (entailment (entails_tng D3) (sat_prodn D2 D1)).
-exp : csat_weaken (csat_expd D2 D1) (sat_expd D2 D1).
-exp :
   csat_weaken (csat_expn D4 D3 D2 D1)
      (entailment (entails_tng D4) (sat_expn D3 D2 D1)).
-exp : csat_weaken (csat_expdz D3 D2 D1) (incl _ _ (sat_expiz D3 D2 D1)).
-exp : csat_weaken (csat_expiz D4 D3 D2 D1) (incleq _ _ _ D4 (sat_expiz D3 D2 D1)).
-arrow : csat_weaken (csat_arrowd D) (incl _ _ (sat_arrowi D)).
-arrow : csat_weaken (csat_arrowi D' D) (incleq _ _ _ D' (sat_arrowi D)).
-box : csat_weaken (csat_cboxd D2 D1) (incl _ _ (sat_cboxi D2 D1)).
-box : csat_weaken (csat_cboxi D' D2 D1) (incleq _ _ _ D' (sat_cboxi D2 D1)).
-mbox : csat_weaken (csat_cmboxd D2 D1) (incl _ _ (sat_cmboxi D2 D1)).
-mbox : csat_weaken (csat_cmboxi D' D2 D1) (incleq _ _ _ D' (sat_cmboxi D2 D1)).
-ptr : csat_weaken (csat_sptrd D) (incl _ _ (sat_sptri D)).
-ptr : csat_weaken (csat_sptri D' D) (incleq _ _ _ D' (sat_sptri D)).
-forall :
   csat_weaken (csat_foralld D3 D2 (\t:tp. \x:kof t K1. D1 t x))
      (sat_foralld D3 D2 (\t:tp. \x:kof t K1. D1 t x)).
-forall :
   csat_weaken (csat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x))
      (sat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x)).
-exists :
   csat_weaken
      (csat_existsd (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (incln _ _ D'
          (sat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 D1
                -> sat_reg (D2 t d1 d2) (Dkof t d1) (pon_tn (D t d1)))
      <- strengthen (\t:tp. \x:kof t K1. D t x) D'.
-exists :
   csat_weaken
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (sat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1).
-guard : csat_weaken (csat_guardd D3 D2 D1) (sat_guardd D3 D2 D1).
-guard : csat_weaken (csat_guardi D3 D2 D1) (sat_guardi D3 D2 D1).
-assert :
   csat_weaken (csat_assertd (\x:tr P1. D2 x) D1)
      (sat_assertd (\x:tr P1. D2 x) D1).
-assert :
   csat_weaken (csat_asserti (\x:tr P1. D2 x) D1)
      (sat_asserti (\x:tr P1. D2 x) D1).
-rec :
   csat_weaken (csat_recd (\t:tp. \x:kof t kt. D t x))
      (sat_recd (\t:tp. \x:kof t kt. D t x)).
-rec :
   csat_weaken (csat_reci (\t:tp. \x:kof t kt. D t x))
      (sat_reci (\t:tp. \x:kof t kt. D t x)).
-meet : csat_weaken (csat_meetd1 D2 D1) (sat_meetd1 D2 D1).
-meet : csat_weaken (csat_meetd2 D2 D1) (sat_meetd2 D2 D1).
-meet : csat_weaken (csat_meeti1 D2 D1) (sat_meeti1 D2 D1).
-meet : csat_weaken (csat_meeti2 D2 D1) (sat_meeti2 D2 D1).
-join :
   csat_weaken (csat_joind D2 D1) (incln _ _ D1' (sat_joini D2 D1))
      <- sat_reg D1 X1 (pon_tn D1').
-join : csat_weaken (csat_joini D2 D1) (sat_joini D2 D1).
-ns : csat_weaken csat_nsd sat_nsd.
-ns : csat_weaken (csat_nsi D) (incleq _ _ _ D sat_nsi).
-void : csat_weaken csat_voidd sat_voidd.
-void : csat_weaken (csat_voidi D) (incleq _ _ _ D sat_voidi).
-gotptr : csat_weaken csat_gotptrd sat_gotptrd.
-gotptr : csat_weaken (csat_gotptri D) (incleq _ _ _ D sat_gotptri).
csat_reg :
   Pi T':tp. Pi R:pred. Pi K:kind. csat T' R K -> kof T' K -> pon R K -> type.
- : csat_reg D D1 D2 <- csat_weaken D D' <- sat_reg D' D1 D2.
csat_equiv :
   Pi R1:pred. Pi R2:pred. Pi K:kind. Pi T':tp.
      equivpr R1 R2 -> pon R2 K -> csat T' R1 K -> csat T' R2 K -> type.
csat_equiv' :
   Pi R2:pred. Pi R1:pred. Pi K:kind. Pi T':tp.
      equivpr R2 R1 -> pon R2 K -> csat T' R1 K -> csat T' R2 K -> type.
-reflex : csat_equiv equivpr_reflex X1 D D.
-ymm :
   csat_equiv (equivpr_symm X1 Dequiv) Dpon D D' <- csat_equiv' Dequiv Dpon D D'.
-annot :
   csat_equiv Dequiv Dpon (csat_annot D2 D1)
      (csat_annot (entails_trans (entails_equiv Dpon Dpon' Dequiv) D2) D1)
      <- csat_reg (csat_annot D2 D1) X1 Dpon'.
-lam :
   csat_equiv (equivpr_arrow Dequiv2 Dequiv1) (pon_arrow Dpon2 Dpon1)
      (csat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1 kind_eq_)
      (csat_lam
          (\t:tp. \d1:kof t K1. \d2:sat t R3 K1.
              entailment (entails_equiv Dpon2 Dpon2' Dequiv2)
                 (D2 t d1
                     (entailment
                         (entails_equiv Dpon1' Dpon1
                             (equivpr_symm Dpon1' Dequiv1)) d2))) Dpon1 
kind_eq_)
      <- csat_reg
            (csat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1
                kind_eq_) X1
            (pon_arrow Dpon2' Dpon1').
-app :
   csat_equiv Dequiv Dpon (csat_app D2 D1)
      (csat_app D2
          (entailment
              (entails_arrow (entails_equiv Dpon Dpon' Dequiv) entails_reflex)
              D1))
      <- csat_reg (csat_app D2 D1) X1 Dpon'.
-pair :
   csat_equiv (equivpr_prod Dequiv2 Dequiv1) (pon_prod Dpon2 Dpon1)
      (csat_pair D2 D1)
      (csat_pair (entailment (entails_equiv Dpon2 Dpon2' Dequiv2) D2)
          (entailment (entails_equiv Dpon1 Dpon1' Dequiv1) D1))
      <- csat_reg (csat_pair D2 D1) X1 (pon_prod Dpon2' Dpon1').
-pi1 :
   csat_equiv Dequiv Dpon (csat_pi1 D)
      (csat_pi1
          (entailment
              (entails_prod entails_reflex (entails_equiv Dpon Dpon' Dequiv)) D))
      <- csat_reg (csat_pi1 D) X1 Dpon'.
-pi2 :
   csat_equiv Dequiv Dpon (csat_pi2 D)
      (csat_pi2
          (entailment
              (entails_prod (entails_equiv Dpon Dpon' Dequiv) entails_reflex) D))
      <- csat_reg (csat_pi2 D) X1 Dpon'.
-klam :
   csat_equiv (equivpr_forall (\k:kind. \r:pred. \x:pon r k. Dequiv k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (csat_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (csat_klam
          (\k:kind. \r:pred. \d:pon r k.
              entailment
                 (entails_equiv (Dpon k r d) (Dpon' k r d) (Dequiv k r d))
                 (D k r d)))
      <- csat_reg (csat_klam (\k:kind. \r:pred. \x:pon r k. D k r x)) X1
            (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon' k r x)).
-kapp :
   csat_equiv Dequiv Dpon (csat_kapp D3 D2 D1)
      (csat_kapp (entails_trans (entails_equiv Dpon Dpon' Dequiv) D3) D2 D1)
      <- csat_reg (csat_kapp D3 D2 D1) X1 Dpon'.
-in1 :
   csat_equiv (equivpr_sum Dequiv2 Dequiv1) (pon_sum Dpon2 Dpon1)
      (csat_in1 X2 D kind_eq_)
      (csat_in1 Dpon2 (entailment (entails_equiv Dpon1 Dpon1' Dequiv1) D)
          kind_eq_)
      <- sat_reg D X1 Dpon1'.
-in2 :
   csat_equiv (equivpr_sum Dequiv2 Dequiv1) (pon_sum Dpon2 Dpon1)
      (csat_in2 X2 D kind_eq_)
      (csat_in2 Dpon1 (entailment (entails_equiv Dpon2 Dpon2' Dequiv2) D)
          kind_eq_)
      <- sat_reg D X1 Dpon2'.
-case :
   csat_equiv Dequiv Dpon
      (csat_case (\t:tp. \x:kof t K2. \x1:sat t R2 K2. D3 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R3 K1. D2 t x x1) D1 kind_eq_)
      (csat_case
          (\t:tp. \d1:kof t K2. \d2:sat t R2 K2.
              entailment (entails_equiv Dpon Dpon' Dequiv) (D3 t d1 d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R3 K1.
              entailment (entails_equiv Dpon Dpon' Dequiv) (D2 t d1 d2)) D1
          kind_eq_)
      <- csat_reg
            (csat_case (\t:tp. \x:kof t K2. \x1:sat t R2 K2. D3 t x x1)
                (\t:tp. \x:kof t K1. \x1:sat t R3 K1. D2 t x x1) D1 kind_eq_) X1
            Dpon'.
-roll :
   csat_equiv (equivpr_rec (\k:kind. \r:pred. \x:pon r k. Dequiv k r x))
      (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (csat_roll D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x) (\k:kind. kind_eq_))
      (csat_roll
          (entailment
              (entails_trans
                  (entails_equiv
                      (Dpon (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R2 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))
                      (Dpon' (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R2 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))
                      (Dequiv (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R2 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))))
                  (entails_equiv
                      (Dpon' (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R2 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))
                      (Dpon' (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R1 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon' k r x)))
                      Dequiv'))
              D2)
          (\k:kind. \r:pred. \x:pon r k. Dpon k r x) (\k:kind. kind_eq_))
      <- csat_reg
            (csat_roll D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x)
                (\k:kind. kind_eq_)) X1
            (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon' k r x))
      <- compatabilitypr_pr
            (\r:pred. \x:pon r (krec (\k:kind. K1 k)).
                Dpon' (krec (\k:kind. K1 k)) r x)
            (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon' k r x))
            (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
            (equivpr_rec (\k:kind. \r:pred. \x:pon r k. Dequiv k r x)) Dequiv'.
-unroll :
   csat_equiv Dequiv Dpon (csat_unroll D2 D1)
      (csat_unroll (entails_trans (entails_equiv Dpon Dpon' Dequiv) D2) D1)
      <- csat_reg (csat_unroll D2 D1) X1 Dpon'.
-b0 :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_b0i D)
      (csat_b0i
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq Dequiv equiv_reflex) D)).
-b1 :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_b1i D)
      (csat_b1i
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq Dequiv equiv_reflex) D)).
-eteq :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_seteqi D2 D1)
      (csat_seteqi
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq Dequiv equiv_reflex) D2) D1).
-prod :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_prodn D3 D2 D1)
      (csat_prodn
          (tr_equiv (propok_impl (propok_numeq Dkof Dkof') (propok_good _ Dkof'))
              (equivp_impl (equivp_numeq Dequiv equiv_reflex) equivp_reflex) D3)
          D2 D1)
      <- tr_reg D3 (propok_impl (propok_numeq X1 Dkof') X2).
-exp :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_expn D4 D3 D2 D1)
      (csat_expn
          (tr_equiv (propok_impl (propok_numeq Dkof Dkof') (propok_good _ Dkof'))
              (equivp_impl (equivp_numeq Dequiv equiv_reflex) equivp_reflex) D4)
          D3 D2 D1)
      <- tr_reg D4 (propok_impl (propok_numeq X1 Dkof') X2).
-expiz :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_expiz D4 D3 D2 D1)
      (csat_expiz
          (tr_equiv (propok_numeq Dkof Dkof') (equivp_numeq Dequiv equiv_reflex)
              D4)
          D3 D2 D1)
      <- tr_reg D4 (propok_numeq X1 Dkof').
-arrow :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_arrowi D D1)
      (csat_arrowi
          (tr_equiv (propok_numeq Dkof Dkof') (equivp_numeq Dequiv equiv_reflex)
              D)
          D1)
      <- tr_reg D (propok_numeq X1 Dkof').
-cbox :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_cboxi D D2 D1)
      (csat_cboxi
          (tr_equiv (propok_numeq Dkof Dkof') (equivp_numeq Dequiv equiv_reflex)
              D)
          D2 D1)
      <- tr_reg D (propok_numeq X1 Dkof').
-cmbox :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_cmboxi D D2 D1)
      (csat_cmboxi
          (tr_equiv (propok_numeq Dkof Dkof') (equivp_numeq Dequiv equiv_reflex)
              D)
          D2 D1)
      <- tr_reg D (propok_numeq X1 Dkof').
-ptr :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_sptri D D1)
      (csat_sptri
          (tr_equiv (propok_numeq Dkof Dkof') (equivp_numeq Dequiv equiv_reflex)
              D)
          D1)
      <- tr_reg D (propok_numeq X1 Dkof').
-forall :
   csat_equiv Dequiv Dpon (csat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x))
      (csat_foralli (entailment (entails_equiv Dpon Dpon' Dequiv) D3) D2
          (\t:tp. \x:kof t K1. D1 t x))
      <- sat_reg D3 X1 Dpon'.
-exists :
   csat_equiv Dequiv Dpon
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (csat_existsi
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              entailment (entails_equiv Dpon Dpon' Dequiv) (D2 t d1 d2)) D1)
      <- csat_reg
            (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
            X1 Dpon'.
-guard :
   csat_equiv Dequiv Dpon (csat_guardi D3 D2 D1)
      (csat_guardi (entailment (entails_equiv Dpon Dpon' Dequiv) D3) D2 D1)
      <- sat_reg D3 X1 Dpon'.
-assert :
   csat_equiv Dequiv Dpon (csat_asserti (\x:tr P1. D2 x) D1)
      (csat_asserti
          (\d:tr P1. entailment (entails_equiv Dpon Dpon' Dequiv) (D2 d)) D1)
      <- csat_reg (csat_asserti (\x:tr P1. D2 x) D1) X1 Dpon'.
-rec :
   csat_equiv Dequiv Dpon (csat_reci (\t:tp. \x:kof t kt. D t x))
      (csat_reci
          (\t:tp. \d:kof t kt.
              entailment (entails_equiv Dpon Dpon' Dequiv) (D t d)))
      <- csat_reg (csat_reci (\t:tp. \x:kof t kt. D t x)) X1 Dpon'.
-meet :
   csat_equiv Dequiv Dpon (csat_meeti1 D2 D1)
      (csat_meeti1 D2 (entailment (entails_equiv Dpon Dpon' Dequiv) D1))
      <- sat_reg D1 X1 Dpon'.
-meet :
   csat_equiv Dequiv Dpon (csat_meeti2 D2 D1)
      (csat_meeti2 (entailment (entails_equiv Dpon Dpon' Dequiv) D2) D1)
      <- sat_reg D2 X1 Dpon'.
-join :
   csat_equiv Dequiv Dpon (csat_joini D2 D1)
      (csat_joini (entailment (entails_equiv Dpon Dpon' Dequiv) D2)
          (entailment (entails_equiv Dpon Dpon' Dequiv) D1))
      <- sat_reg D1 X1 Dpon'.
-ns :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_nsi D)
      (csat_nsi
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq Dequiv equiv_reflex) D)).
-void :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_voidi D)
      (csat_voidi
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq Dequiv equiv_reflex) D)).
-gotptr :
   csat_equiv (equivpr_tn Dequiv) (pon_tn Dkof) (csat_gotptri D)
      (csat_gotptri
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq Dequiv equiv_reflex) D)).
-reflex : csat_equiv' equivpr_reflex X1 D D.
-ymm :
   csat_equiv' (equivpr_symm X1 Dequiv) Dpon D D' <- csat_equiv Dequiv Dpon D D'.
-annot :
   csat_equiv' Dequiv Dpon (csat_annot D2 D1)
      (csat_annot
          (entails_trans (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
              D2)
          D1)
      <- csat_reg (csat_annot D2 D1) X1 Dpon'.
-lam :
   csat_equiv' (equivpr_arrow Dequiv2 Dequiv1) (pon_arrow Dpon2 Dpon1)
      (csat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1 kind_eq_)
      (csat_lam
          (\t:tp. \d1:kof t K1. \d2:sat t R3 K1.
              entailment
                 (entails_equiv Dpon2 Dpon2' (equivpr_symm Dpon2 Dequiv2))
                 (D2 t d1 (entailment (entails_equiv Dpon1' Dpon1 Dequiv1) d2)))
          Dpon1 kind_eq_)
      <- csat_reg
            (csat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1
                kind_eq_) X1
            (pon_arrow Dpon2' Dpon1').
-app :
   csat_equiv' Dequiv Dpon (csat_app D2 D1)
      (csat_app D2
          (entailment
              (entails_arrow
                  (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
                  entails_reflex) D1))
      <- csat_reg (csat_app D2 D1) X1 Dpon'.
-pair :
   csat_equiv' (equivpr_prod Dequiv2 Dequiv1) (pon_prod Dpon2 Dpon1)
      (csat_pair D2 D1)
      (csat_pair
          (entailment (entails_equiv Dpon2 Dpon2' (equivpr_symm Dpon2 Dequiv2))
              D2)
          (entailment (entails_equiv Dpon1 Dpon1' (equivpr_symm Dpon1 Dequiv1))
              D1))
      <- csat_reg (csat_pair D2 D1) X1 (pon_prod Dpon2' Dpon1').
-pi1 :
   csat_equiv' Dequiv Dpon (csat_pi1 D)
      (csat_pi1
          (entailment
              (entails_prod entails_reflex
                  (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))) D))
      <- csat_reg (csat_pi1 D) X1 Dpon'.
-pi2 :
   csat_equiv' Dequiv Dpon (csat_pi2 D)
      (csat_pi2
          (entailment
              (entails_prod
                  (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
                  entails_reflex) D))
      <- csat_reg (csat_pi2 D) X1 Dpon'.
-klam :
   csat_equiv' (equivpr_forall (\k:kind. \r:pred. \x:pon r k. Dequiv k r x))
      (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (csat_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (csat_klam
          (\k:kind. \r:pred. \d:pon r k.
              entailment
                 (entails_equiv (Dpon k r d) (Dpon' k r d)
                     (equivpr_symm (Dpon k r d) (Dequiv k r d))) (D k r d)))
      <- csat_reg (csat_klam (\k:kind. \r:pred. \x:pon r k. D k r x)) X1
            (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon' k r x)).
-kapp :
   csat_equiv' Dequiv Dpon (csat_kapp D3 D2 D1)
      (csat_kapp
          (entails_trans (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
              D3)
          D2 D1)
      <- csat_reg (csat_kapp D3 D2 D1) X1 Dpon'.
-in1 :
   csat_equiv' (equivpr_sum Dequiv2 Dequiv1) (pon_sum Dpon2 Dpon1)
      (csat_in1 X2 D kind_eq_)
      (csat_in1 Dpon2
          (entailment (entails_equiv Dpon1 Dpon1' (equivpr_symm Dpon1 Dequiv1))
              D)
          kind_eq_)
      <- sat_reg D X1 Dpon1'.
-in2 :
   csat_equiv' (equivpr_sum Dequiv2 Dequiv1) (pon_sum Dpon2 Dpon1)
      (csat_in2 X2 D kind_eq_)
      (csat_in2 Dpon1
          (entailment (entails_equiv Dpon2 Dpon2' (equivpr_symm Dpon2 Dequiv2))
              D)
          kind_eq_)
      <- sat_reg D X1 Dpon2'.
-case :
   csat_equiv' Dequiv Dpon
      (csat_case (\t:tp. \x:kof t K2. \x1:sat t R2 K2. D3 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R3 K1. D2 t x x1) D1 kind_eq_)
      (csat_case
          (\t:tp. \d1:kof t K2. \d2:sat t R2 K2.
              entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
                 (D3 t d1 d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R3 K1.
              entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
                 (D2 t d1 d2))
          D1 kind_eq_)
      <- csat_reg
            (csat_case (\t:tp. \x:kof t K2. \x1:sat t R2 K2. D3 t x x1)
                (\t:tp. \x:kof t K1. \x1:sat t R3 K1. D2 t x x1) D1 kind_eq_) X1
            Dpon'.
-roll :
   csat_equiv' (equivpr_rec (\k:kind. \r:pred. \x:pon r k. Dequiv k r x))
      (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (csat_roll D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x) (\k:kind. kind_eq_))
      (csat_roll
          (entailment
              (entails_trans
                  (entails_equiv
                      (Dpon (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R2 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))
                      (Dpon' (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R2 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))
                      (equivpr_symm
                          (Dpon (krec (\k:kind. K1 k))
                              (rrec (\k:kind. \r:pred. R2 k r))
                              (pon_rec
                                  (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))
                          (Dequiv (krec (\k:kind. K1 k))
                              (rrec (\k:kind. \r:pred. R2 k r))
                              (pon_rec
                                  (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))))
                  (entails_equiv
                      (Dpon' (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R2 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x)))
                      (Dpon' (krec (\k:kind. K1 k))
                          (rrec (\k:kind. \r:pred. R1 k r))
                          (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon' k r x)))
                      Dequiv'))
              D2)
          (\k:kind. \r:pred. \x:pon r k. Dpon k r x) (\k:kind. kind_eq_))
      <- csat_reg
            (csat_roll D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x)
                (\k:kind. kind_eq_)) X1
            (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon' k r x))
      <- compatabilitypr_pr
            (\r:pred. \x:pon r (krec (\k:kind. K1 k)).
                Dpon' (krec (\k:kind. K1 k)) r x)
            (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon' k r x))
            (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
            (equivpr_symm (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
                (equivpr_rec (\k:kind. \r:pred. \x:pon r k. Dequiv k r x)))
            Dequiv'.
-unroll :
   csat_equiv' Dequiv Dpon (csat_unroll D2 D1)
      (csat_unroll
          (entails_trans (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
              D2)
          D1)
      <- csat_reg (csat_unroll D2 D1) X1 Dpon'.
-b0 :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_b0i D)
      (csat_b0i
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D)).
-b1 :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_b1i D)
      (csat_b1i
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D)).
-eteq :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_seteqi D2 D1)
      (csat_seteqi
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D2) D1).
-prod :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_prodn D3 D2 D1)
      (csat_prodn
          (tr_equiv (propok_impl (propok_numeq Dkof Dkof') (propok_good _ Dkof'))
              (equivp_impl (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex)
                  equivp_reflex)
              D3)
          D2 D1)
      <- tr_reg D3 (propok_impl (propok_numeq X1 Dkof') X2).
-exp :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_expn D4 D3 D2 D1)
      (csat_expn
          (tr_equiv (propok_impl (propok_numeq Dkof Dkof') (propok_good _ Dkof'))
              (equivp_impl (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex)
                  equivp_reflex)
              D4)
          D3 D2 D1)
      <- tr_reg D4 (propok_impl (propok_numeq X1 Dkof') X2).
-expiz :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_expiz D4 D3 D2 D1)
      (csat_expiz
          (tr_equiv (propok_numeq Dkof Dkof')
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D4) D3 D2 D1)
      <- tr_reg D4 (propok_numeq X1 Dkof').
-arrow :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_arrowi D D1)
      (csat_arrowi
          (tr_equiv (propok_numeq Dkof Dkof')
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D) D1)
      <- tr_reg D (propok_numeq X1 Dkof').
-cbox :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_cboxi D D2 D1)
      (csat_cboxi
          (tr_equiv (propok_numeq Dkof Dkof')
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D) D2 D1)
      <- tr_reg D (propok_numeq X1 Dkof').
-cmbox :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_cmboxi D D2 D1)
      (csat_cmboxi
          (tr_equiv (propok_numeq Dkof Dkof')
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D) D2 D1)
      <- tr_reg D (propok_numeq X1 Dkof').
-ptr :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_sptri D D1)
      (csat_sptri
          (tr_equiv (propok_numeq Dkof Dkof')
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D) D1)
      <- tr_reg D (propok_numeq X1 Dkof').
-forall :
   csat_equiv' Dequiv Dpon (csat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x))
      (csat_foralli
          (entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv)) D3)
          D2 (\t:tp. \x:kof t K1. D1 t x))
      <- sat_reg D3 X1 Dpon'.
-exists :
   csat_equiv' Dequiv Dpon
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (csat_existsi
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
                 (D2 t d1 d2))
          D1)
      <- csat_reg
            (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
            X1 Dpon'.
-guard :
   csat_equiv' Dequiv Dpon (csat_guardi D3 D2 D1)
      (csat_guardi
          (entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv)) D3)
          D2 D1)
      <- sat_reg D3 X1 Dpon'.
-assert :
   csat_equiv' Dequiv Dpon (csat_asserti (\x:tr P1. D2 x) D1)
      (csat_asserti
          (\d:tr P1.
              entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
                 (D2 d))
          D1)
      <- csat_reg (csat_asserti (\x:tr P1. D2 x) D1) X1 Dpon'.
-rec :
   csat_equiv' Dequiv Dpon (csat_reci (\t:tp. \x:kof t kt. D t x))
      (csat_reci
          (\t:tp. \d:kof t kt.
              entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv))
                 (D t d)))
      <- csat_reg (csat_reci (\t:tp. \x:kof t kt. D t x)) X1 Dpon'.
-meet :
   csat_equiv' Dequiv Dpon (csat_meeti1 D2 D1)
      (csat_meeti1 D2
          (entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv)) D1))
      <- sat_reg D1 X1 Dpon'.
-meet :
   csat_equiv' Dequiv Dpon (csat_meeti2 D2 D1)
      (csat_meeti2
          (entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv)) D2)
          D1)
      <- sat_reg D2 X1 Dpon'.
-join :
   csat_equiv' Dequiv Dpon (csat_joini D2 D1)
      (csat_joini
          (entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv)) D2)
          (entailment (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv)) D1))
      <- sat_reg D1 X1 Dpon'.
-ns :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_nsi D)
      (csat_nsi
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D)).
-void :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_voidi D)
      (csat_voidi
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D)).
-gotptr :
   csat_equiv' (equivpr_tn Dequiv) (pon_tn Dkof) (csat_gotptri D)
      (csat_gotptri
          (tr_equiv (propok_numeq Dkof kof_numlit)
              (equivp_numeq (equiv_symm Dkof Dequiv) equiv_reflex) D)).
csat_entails :
   Pi T':tp. Pi R1:pred. Pi K:kind. Pi R2:pred.
      csat T' R1 K -> entails R1 R2 -> csat T' R2 K -> type.
-reflex : csat_entails D entails_reflex D.
-trans :
   csat_entails D1 (entails_trans D23 D12) D3
      <- csat_entails D1 D12 D2
      <- csat_entails D2 D23 D3.
-equiv :
   csat_entails D1 (entails_equiv Dpon2 Dpon1 Dequiv) D2
      <- csat_reg D1 X1 Dpon1'
      <- pon_fun Dpon1 Dpon1' Deq
      <- pon_resp pred_eq_ Deq Dpon2 Dpon2'
      <- csat_equiv Dequiv Dpon2' D1 D2.
-true :
   csat_entails Dcsat (entails_true Dpon) D
      <- csat_reg Dcsat Dkof Dpon'
      <- pon_fun Dpon Dpon' Deq
      <- kind_eq_symm Deq Deq'
      <- kof_resp tp_eq_ Deq' Dkof Dkof'
      <- csat_resp tp_eq_ pred_eq_ Deq (csat_true Dkof') D.
-annot :
   csat_entails (csat_annot Dent Dsat) Dent'
      (csat_annot (entails_trans Dent' Dent) Dsat).
-lam :
   csat_entails
      (csat_lam (\t:tp. \x:kof t K1. \x1:sat t R2 K1. Dsat t x x1) Dpon 
kind_eq_)
      (entails_arrow Dent2 Dent1)
      (csat_lam
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              entailment Dent2 (Dsat t d1 (entailment Dent1 d2))) Dpon' 
kind_eq_)
      <- entails_pon' Dent1 Dpon Dpon'.
-app :
   csat_entails (csat_app D2 D1) Dent
      (csat_app D2 (entailment (entails_arrow Dent entails_reflex) D1)).
-pair :
   csat_entails (csat_pair D2 D1) (entails_prod Dent2 Dent1)
      (csat_pair (entailment Dent2 D2) (entailment Dent1 D1)).
-pi1 :
   csat_entails (csat_pi1 D) Dent
      (csat_pi1 (entailment (entails_prod entails_reflex Dent) D)).
-pi2 :
   csat_entails (csat_pi2 D) Dent
      (csat_pi2 (entailment (entails_prod Dent entails_reflex) D)).
-klam :
   csat_entails (csat_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (entails_forall (\k:kind. \r:pred. \x:pon r k. Dent k r x))
      (csat_klam
          (\k:kind. \r:pred. \d:pon r k. entailment (Dent k r d) (D k r d))).
-kapp :
   csat_entails (csat_kapp Dent D2 D1) Dent'
      (csat_kapp (entails_trans Dent' Dent) D2 D1).
-in1 :
   csat_entails (csat_in1 Dpon Dsat kind_eq_) (entails_sum Dent2 Dent1)
      (csat_in1 Dpon' (entailment Dent1 Dsat) kind_eq_)
      <- entails_pon Dent2 Dpon Dpon'.
-in2 :
   csat_entails (csat_in2 Dpon Dsat kind_eq_) (entails_sum Dent2 Dent1)
      (csat_in2 Dpon' (entailment Dent2 Dsat) kind_eq_)
      <- entails_pon Dent1 Dpon Dpon'.
-case :
   csat_entails
      (csat_case (\t:tp. \x:kof t K2. \x1:sat t R3 K2. D2 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R4 K1. D1 t x x1) D0 kind_eq_) Dent
      (csat_case
          (\t:tp. \d1:kof t K2. \d2:sat t R3 K2. entailment Dent (D2 t d1 d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R4 K1. entailment Dent (D1 t d1 d2))
          D0 kind_eq_).
-unroll :
   csat_entails (csat_unroll Dent D) Dent'
      (csat_unroll (entails_trans Dent' Dent) D).
-b0 : csat_entails (csat_b0i X1) (entails_tn_td X2) csat_b0d.
-b0 :
   csat_entails (csat_b0i D) (entails_tn D') (csat_b0i (tr_numeq_trans D' D)).
-b0 :
   csat_entails (csat_b0i D) (entails_tng D')
      (csat_b0i (tr_numeq_trans_g2 _ _ _ D' D)).
-b1 : csat_entails (csat_b1i X1) (entails_tn_td X2) csat_b1d.
-b1 :
   csat_entails (csat_b1i D) (entails_tn D') (csat_b1i (tr_numeq_trans D' D)).
-b1 :
   csat_entails (csat_b1i D) (entails_tng D')
      (csat_b1i (tr_numeq_trans_g2 _ _ _ D' D)).
-eteq : csat_entails (csat_seteqi X1 D1) (entails_tn_td X2) (csat_seteqd D1).
-eteq :
   csat_entails (csat_seteqi D D1) (entails_tn D')
      (csat_seteqi (tr_numeq_trans D' D) D1).
-eteq :
   csat_entails (csat_seteqi D D1) (entails_tng D')
      (csat_seteqi (tr_numeq_trans_g2 _ _ _ D' D) D1).
-prod :
   csat_entails (csat_prodn X3 D2 D1) (entails_tn_td X4)
      (csat_prodd (incln _ _ D2' D2) (incln _ _ D1' D1))
      <- sat_reg D1 X2 (pon_tn D1')
      <- sat_reg D2 X1 (pon_tn D2').
-prod :
   csat_entails (csat_prodn D D2 D1) (entails_tn D')
      (csat_prodn
          (tr_impli Dpropok
              (\d:tr (good (numadd T1 T2)). tr_numeq_trans D' (tr_imple d D)))
          D2 D1)
      <- tr_reg D (propok_impl X1 Dpropok).
-prod :
   csat_entails (csat_prodn D D2 D1) (entails_tng D')
      (csat_prodn
          (tr_impli Dpropok
              (\d:tr (good (numadd T1 T2)). tr_numeq_trans_g2 _ _ _ D' (tr_imple d D)))
          D2 D1)
      <- tr_reg D (propok_impl X1 Dpropok).
-exp :
   csat_entails (csat_expn X2 X3 D2 D1) (entails_tn_td X4)
      (csat_expd D2 (incln _ _ Dkof D1))
      <- sat_reg D1 X1 (pon_tn Dkof).
-exp :
   csat_entails (csat_expn D D3 D2 D1) (entails_tn D')
      (csat_expn
          (tr_impli Dpropok
              (\d:tr (good (nummul T1 T2)). tr_numeq_trans D' (tr_imple d D)))
          D3 D2 D1)
      <- tr_reg D (propok_impl X1 Dpropok).
-exp :
   csat_entails (csat_expn D D3 D2 D1) (entails_tng D')
      (csat_expn
          (tr_impli Dpropok
              (\d:tr (good (nummul T1 T2)). tr_numeq_trans_g2 _ _ _ D' (tr_imple d D)))
          D3 D2 D1)
      <- tr_reg D (propok_impl X1 Dpropok).
-exp :
   csat_entails (csat_expiz X1 D3 D2 D1) (entails_tn_td X2)
      (csat_expdz D3 D2 D1).
-exp :
   csat_entails (csat_expiz D D3 D2 D1) (entails_tn D')
      (csat_expiz (tr_numeq_trans D' D) D3 D2 D1).
-exp :
   csat_entails (csat_expiz D D3 D2 D1) (entails_tng D')
      (csat_expiz (tr_numeq_trans_g2 _ _ _ D' D) D3 D2 D1).
-arrow : csat_entails (csat_arrowi X1 D) (entails_tn_td X2) (csat_arrowd D).
-arrow :
   csat_entails (csat_arrowi D D1) (entails_tn D')
      (csat_arrowi (tr_numeq_trans D' D) D1).
-arrow :
   csat_entails (csat_arrowi D D1) (entails_tng D')
      (csat_arrowi (tr_numeq_trans_g2 _ _ _ D' D) D1).
-cbox :
   csat_entails (csat_cboxi X1 D2 D1) (entails_tn_td X2) (csat_cboxd D2 D1).
-cbox :
   csat_entails (csat_cboxi D D2 D1) (entails_tn D')
      (csat_cboxi (tr_numeq_trans D' D) D2 D1).
-cbox :
   csat_entails (csat_cboxi D D2 D1) (entails_tng D')
      (csat_cboxi (tr_numeq_trans_g2 _ _ _ D' D) D2 D1).
-cmbox :
   csat_entails (csat_cmboxi X1 D2 D1) (entails_tn_td X2) (csat_cmboxd D2 D1).
-cmbox :
   csat_entails (csat_cmboxi D D2 D1) (entails_tn D')
      (csat_cmboxi (tr_numeq_trans D' D) D2 D1).
-cmbox :
   csat_entails (csat_cmboxi D D2 D1) (entails_tng D')
      (csat_cmboxi (tr_numeq_trans_g2 _ _ _ D' D) D2 D1).
-ptr : csat_entails (csat_sptri X1 D) (entails_tn_td X2) (csat_sptrd D).
-ptr :
   csat_entails (csat_sptri D D1) (entails_tn D')
      (csat_sptri (tr_numeq_trans D' D) D1).
-ptr :
   csat_entails (csat_sptri D D1) (entails_tng D')
      (csat_sptri (tr_numeq_trans_g2 _ _ _ D' D) D1).
-forall :
   csat_entails (csat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x))
      (entails_tn_td X2)
      (csat_foralld (incln _ _ D3' D3) D2 (\t:tp. \x:kof t K1. D1 t x))
      <- sat_reg D3 X1 (pon_tn D3').
-forall :
   csat_entails (csat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x)) (entails_tn D)
      (csat_foralli (incleq _ _ _ D D3) D2 (\t:tp. \x:kof t K1. D1 t x)).
-forall :
   csat_entails (csat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x))
      (entails_tng D)
      (csat_foralli (incleqg _ _ _ D D3) D2 (\t:tp. \x:kof t K1. D1 t x)).
-exists :
   csat_entails
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (entails_tn_td X1)
      (csat_existsd (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1).
-exists :
   csat_entails
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (entails_tn D)
      (csat_existsi
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. incleq _ _ _ D (D2 t d1 d2)) D1).
-exists :
   csat_entails
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (entails_tng D)
      (csat_existsi
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. incleqg _ _ _ D (D2 t d1 d2)) D1).
-guard :
   csat_entails (csat_guardi D3 D2 D1) (entails_tn_td X2)
      (csat_guardd (incln _ _ D3' D3) D2 D1)
      <- sat_reg D3 X1 (pon_tn D3').
-guard :
   csat_entails (csat_guardi D3 D2 D1) (entails_tn D)
      (csat_guardi (incleq _ _ _ D D3) D2 D1).
-guard :
   csat_entails (csat_guardi D3 D2 D1) (entails_tng D)
      (csat_guardi (incleqg _ _ _ D D3) D2 D1).
-assert :
   csat_entails (csat_asserti (\x:tr P1. D2 x) D1) (entails_tn_td X1)
      (csat_assertd (\d:tr P1. incln _ _ D2' (D2 d)) D1)
      <- (Pi d:tr P1. tr_reg d D1 -> sat_reg (D2 d) Dkof (pon_tn D2')).
-assert :
   csat_entails (csat_asserti (\x:tr P1. D2 x) D1) (entails_tn D)
      (csat_asserti (\d:tr P1. incleq _ _ _ D (D2 d)) D1).
-assert :
   csat_entails (csat_asserti (\x:tr P1. D2 x) D1) (entails_tng D)
      (csat_asserti (\d:tr P1. incleqg _ _ _ D (D2 d)) D1).
-rec :
   csat_entails (csat_reci (\t:tp. \x:kof t kt. D t x)) (entails_tn_td X2)
      (csat_recd (\t:tp. \d:kof t kt. incln _ _ D'' (D t d)))
      <- (Pi t:tp. Pi d:kof t kt. sat_reg (D t d) (X1 t d) (pon_tn (D' t d)))
      <- strengthen (\t:tp. \x:kof t kt. D' t x) D''.
-rec :
   csat_entails (csat_reci (\t:tp. \x:kof t kt. D1 t x)) (entails_tn D)
      (csat_reci (\t:tp. \d:kof t kt. incleq _ _ _ D (D1 t d))).
-rec :
   csat_entails (csat_reci (\t:tp. \x:kof t kt. D1 t x)) (entails_tng D)
      (csat_reci (\t:tp. \d:kof t kt. incleqg _ _ _ D (D1 t d))).
-meet :
   csat_entails (csat_meeti1 D2 D1) (entails_tn_td X2)
      (csat_meetd1 D2 (incln _ _ D1' D1))
      <- sat_reg D1 X1 (pon_tn D1').
-meet :
   csat_entails (csat_meeti1 D2 D1) (entails_tn D)
      (csat_meeti1 D2 (incleq _ _ _ D D1)).
-meet :
   csat_entails (csat_meeti1 D2 D1) (entails_tng D)
      (csat_meeti1 D2 (incleqg _ _ _ D D1)).
-meet :
   csat_entails (csat_meeti2 D2 D1) (entails_tn_td X2)
      (csat_meetd2 (incln _ _ D2' D2) D1)
      <- sat_reg D2 X1 (pon_tn D2').
-meet :
   csat_entails (csat_meeti2 D2 D1) (entails_tn D)
      (csat_meeti2 (incleq _ _ _ D D2) D1).
-meet :
   csat_entails (csat_meeti2 D2 D1) (entails_tng D)
      (csat_meeti2 (incleqg _ _ _ D D2) D1).
-join : csat_entails (csat_joini D2 D1) (entails_tn_td X1) (csat_joind D2 D1).
-join :
   csat_entails (csat_joini D2 D1) (entails_tn D)
      (csat_joini (incleq _ _ _ D D2) (incleq _ _ _ D D1)).
-join :
   csat_entails (csat_joini D2 D1) (entails_tng D)
      (csat_joini (incleqg _ _ _ D D2) (incleqg _ _ _ D D1)).
-ns : csat_entails (csat_nsi X1) (entails_tn_td X2) csat_nsd.
-ns :
   csat_entails (csat_nsi D) (entails_tn D') (csat_nsi (tr_numeq_trans D' D)).
-ns :
   csat_entails (csat_nsi D) (entails_tng D')
      (csat_nsi (tr_numeq_trans_g2 _ _ _ D' D)).
-void : csat_entails (csat_voidi X1) (entails_tn_td X2) csat_voidd.
-void :
   csat_entails (csat_voidi D) (entails_tn D')
      (csat_voidi (tr_numeq_trans D' D)).
-void :
   csat_entails (csat_voidi D) (entails_tng D')
      (csat_voidi (tr_numeq_trans_g2 _ _ _ D' D)).
-gotptr : csat_entails (csat_gotptri X1) (entails_tn_td X2) csat_gotptrd.
-gotptr :
   csat_entails (csat_gotptri D) (entails_tn D')
      (csat_gotptri (tr_numeq_trans D' D)).
-gotptr :
   csat_entails (csat_gotptri D) (entails_tng D')
      (csat_gotptri (tr_numeq_trans_g2 _ _ _ D' D)).
canonize_sat :
   Pi T':tp. Pi R:pred. Pi K:kind.
      notvar T' -> sat T' R K -> csat T' R K -> type.
-true : canonize_sat X1 (sat_true D) (csat_true D).
-annot : canonize_sat X1 (sat_annot D) (csat_annot entails_reflex D).
-lam :
   canonize_sat X1 (sat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (csat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1 kind_eq_).
-app : canonize_sat X1 (sat_app D2 D1) (csat_app D2 D1).
-pair : canonize_sat X1 (sat_pair D2 D1) (csat_pair D2 D1).
-pi1 : canonize_sat X1 (sat_pi1 D) (csat_pi1 D).
-pi2 : canonize_sat X1 (sat_pi2 D) (csat_pi2 D).
-klam :
   canonize_sat X1 (sat_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (csat_klam (\k:kind. \r:pred. \x:pon r k. D k r x)).
-kapp : canonize_sat X1 (sat_kapp D2 D1) (csat_kapp entails_reflex D2 D1).
-in1 : canonize_sat X1 (sat_in1 D2 D1) (csat_in1 D2 D1 kind_eq_).
-in2 : canonize_sat X1 (sat_in2 D2 D1) (csat_in2 D2 D1 kind_eq_).
-case :
   canonize_sat X1
      (sat_case (\t:tp. \x:kof t K2. \x1:sat t R2 K2. D2 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R3 K1. D1 t x x1) D0)
      (csat_case (\t:tp. \x:kof t K2. \x1:sat t R2 K2. D2 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R3 K1. D1 t x x1) D0 kind_eq_).
-roll :
   canonize_sat X1 (sat_roll D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x))
      (csat_roll D2 (\k:kind. \r:pred. \x:pon r k. D1 k r x) (\k:kind. kind_eq_)).
-unroll : canonize_sat X1 (sat_unroll D) (csat_unroll entails_reflex D).
-b0 : canonize_sat X1 sat_b0i (csat_b0i tr_numeq_lit).
-b1 : canonize_sat X1 sat_b1i (csat_b1i tr_numeq_lit).
-eteq : canonize_sat X1 (sat_seteqi D1) (csat_seteqi tr_numeq_lit D1).
-prod : canonize_sat X1 (sat_prodd D2 D1) (csat_prodd D2 D1).
-prod :
   canonize_sat X3 (sat_prodn D2 D1)
      (csat_prodn
          (tr_impli (propok_good _ (kof_numadd Dkof2 Dkof1))
              (\d:tr (good (numadd T4 T2)). d)) D2 D1)
      <- sat_reg D1 X2 (pon_tn Dkof1)
      <- sat_reg D2 X1 (pon_tn Dkof2).
-exp : canonize_sat X1 (sat_expd D2 D1) (csat_expd D2 D1).
-exp :
   canonize_sat X2 (sat_expn D3 D2 D1)
      (csat_expn
          (tr_impli (propok_good _ (kof_nummul Dkof1 D2))
              (\d:tr (good (nummul T3 T2)). d)) D3 D2 D1)
      <- sat_reg D1 X1 (pon_tn Dkof1).
-exp : canonize_sat X1 (sat_expiz D3 D2 D1) (csat_expiz tr_numeq_lit D3 D2 D1).
-arrow : canonize_sat X1 (sat_arrowi D) (csat_arrowi tr_numeq_lit D).
-cbox : canonize_sat X1 (sat_cboxi D2 D1) (csat_cboxi tr_numeq_lit D2 D1).
-cmbox : canonize_sat X1 (sat_cmboxi D2 D1) (csat_cmboxi tr_numeq_lit D2 D1).
-ptr : canonize_sat X1 (sat_sptri D) (csat_sptri tr_numeq_lit D).
-forall :
   canonize_sat X1 (sat_foralld D3 D2 (\t:tp. \x:kof t K1. D1 t x))
      (csat_foralld D3 D2 (\t:tp. \x:kof t K1. D1 t x)).
-forall :
   canonize_sat X1 (sat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x))
      (csat_foralli D3 D2 (\t:tp. \x:kof t K1. D1 t x)).
-exists :
   canonize_sat X1
      (sat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1).
-guard : canonize_sat X1 (sat_guardd D3 D2 D1) (csat_guardd D3 D2 D1).
-guard : canonize_sat X1 (sat_guardi D3 D2 D1) (csat_guardi D3 D2 D1).
-assert :
   canonize_sat X1 (sat_assertd (\x:tr P1. D2 x) D1)
      (csat_assertd (\x:tr P1. D2 x) D1).
-assert :
   canonize_sat X1 (sat_asserti (\x:tr P1. D2 x) D1)
      (csat_asserti (\x:tr P1. D2 x) D1).
-rec :
   canonize_sat X1 (sat_recd (\t:tp. \x:kof t kt. D t x))
      (csat_recd (\t:tp. \x:kof t kt. D t x)).
-rec :
   canonize_sat X1 (sat_reci (\t:tp. \x:kof t kt. D t x))
      (csat_reci (\t:tp. \x:kof t kt. D t x)).
-meet : canonize_sat X1 (sat_meetd1 D2 D1) (csat_meetd1 D2 D1).
-meet : canonize_sat X1 (sat_meetd2 D2 D1) (csat_meetd2 D2 D1).
-meet : canonize_sat X1 (sat_meeti1 D2 D1) (csat_meeti1 D2 D1).
-meet : canonize_sat X1 (sat_meeti2 D2 D1) (csat_meeti2 D2 D1).
-join : canonize_sat X1 (sat_joini D2 D1) (csat_joini D2 D1).
-ns : canonize_sat X1 sat_nsi (csat_nsi tr_numeq_lit).
-void : canonize_sat X1 sat_voidi (csat_voidi tr_numeq_lit).
-gotptr : canonize_sat X1 sat_gotptri (csat_gotptri tr_numeq_lit).
-entail :
   canonize_sat Dnotvar (entailment Dent D) D''
      <- canonize_sat Dnotvar D D'
      <- csat_entails D' Dent D''.
srs :
   Pi T1:tp. Pi R:pred. Pi K:kind. Pi T2:tp.
      sat T1 R K -> reduce T1 T2 -> sat T2 R K -> type.
-true : srs (sat_true Dkof) Dred (sat_true Dkof') <- sr Dkof Dred Dkof'.
-entail :
   srs (entailment Dent Dsat) Dred (entailment Dent Dsat')
      <- srs Dsat Dred Dsat'.
-id : srs D reduce_id D.
-annbet : srs (sat_annot D) (reduce_annbeta Dred) D' <- srs D Dred D'.
-beta :
   srs (sat_app D2 D1) (reduce_beta Dreduce2 (\t:tp. \x:kof t K. Dreduce1 t x))
      (D1'' T1 Dkof2 D2'')
      <- canonize_sat notvar_lam D1
            (csat_lam (\t:tp. \x:kof t K. \x1:sat t R1 K. D1' t x x1) Dpon Deq)
      <- (Pi t:tp. Pi d1:kof t K. Pi d2:sat t R1 K.
             sat_reg d2 d1 Dpon
                -> srs (D1' t d1 d2) (Dreduce1 t d1) (D1'' t d1 d2))
      <- srs D2 Dreduce2 D2'
      <- kind_eq_symm Deq Deq'
      <- sat_resp tp_eq_ pred_eq_ Deq' D2' D2''
      <- sat_reg D2'' Dkof2 X1.
srs|eta :
   Pi K:kind. Pi K1:kind. Pi K2:kind. Pi T':tp. Pi R:pred.
      kind_eq K (karrow K1 K2) -> sat T' R K -> pon R K
         -> sat (lam K1 (\t:tp. app T' t)) R K -> type.
- :
   srs|eta kind_eq_ D pon_true
      (sat_true (kof_lam (\t:tp. \d:kof t K1. kof_app d Dkof)))
      <- sat_reg D Dkof X1.
- :
   srs|eta kind_eq_ D (pon_arrow Dpon2 Dpon1)
      (sat_lam (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. sat_app d2 D) Dpon1).
-eta :
   srs D (reduce_eta Dreduce Dkof) D''
      <- srs D Dreduce D'
      <- sat_reg D Dkof' Dpon
      <- kof_fun Dkof' Dkof Deq
      <- srs|eta Deq D' Dpon D''.
-pbeta1 :
   srs (sat_pi1 D) (reduce_pbeta1 Dreduce) D1'
      <- canonize_sat notvar_pair D (csat_pair D2 D1)
      <- srs D1 Dreduce D1'.
-pbeta2 :
   srs (sat_pi2 D) (reduce_pbeta2 Dreduce) D2'
      <- canonize_sat notvar_pair D (csat_pair D2 D1)
      <- srs D2 Dreduce D2'.
srs|peta :
   Pi K:kind. Pi K1:kind. Pi K2:kind. Pi T':tp. Pi R:pred.
      kind_eq K (kprod K1 K2) -> sat T' R K -> pon R K
         -> sat (pair (pi1 T') (pi2 T')) R K -> type.
- :
   srs|peta kind_eq_ D pon_true
      (sat_true (kof_pair (kof_pi2 Dkof) (kof_pi1 Dkof)))
      <- sat_reg D Dkof X1.
- : srs|peta kind_eq_ D (pon_prod X1 X2) (sat_pair (sat_pi2 D) (sat_pi1 D)).
-peta :
   srs D (reduce_peta Dreduce Dkof) D''
      <- srs D Dreduce D'
      <- sat_reg D Dkof' Dpon
      <- kof_fun Dkof' Dkof Deq
      <- srs|peta Deq D' Dpon D''.
-kbeta :
   srs (sat_kapp Dpon D)
      (reduce_kbeta Dred2 (\k:kind. \r:pred. \x:pon r k. Dred1 k r x))
      (entailment (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv))
          (D'' K R2 Dpon'))
      <- canonize_sat notvar_klam D
            (csat_klam (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             srs (D' k r d) (Dred1 k r d) (D'' k r d))
      <- srpr Dpon Dred2 Dpon'
      <- substitutepr1pr (\r:pred. R0 K r) Dred2 Dred2'
      <- sat_reg (D' K R1 Dpon) X1 Dpon1
      <- srpr Dpon1 Dred2' Dpon2
      <- reduce_is_equivpr Dpon1 Dred2' Dequiv.
srs|keta :
   Pi K:kind. Pi K':kind -> kind. Pi T':tp. Pi R:pred.
      kind_eq K (kforall (\k:kind. K' k)) -> sat T' R K -> pon R K
         -> sat (klam (\k:kind. \r:pred. kapp T' k r)) R K -> type.
- :
   srs|keta kind_eq_ D pon_true
      (sat_true (kof_klam (\k:kind. \r:pred. \d:pon r k. kof_kapp Dkof d)))
      <- sat_reg D Dkof X1.
- :
   srs|keta kind_eq_ D (pon_forall (\k:kind. \r:pred. \x:pon r k. X1 k r x))
      (sat_klam (\k:kind. \r:pred. \d:pon r k. sat_kapp d D)).
-keta :
   srs D (reduce_keta Dreduce Dkof) D''
      <- srs D Dreduce D'
      <- sat_reg D Dkof' Dpon
      <- kof_fun Dkof' Dkof Deq
      <- srs|keta Deq D' Dpon D''.
-beta1 :
   srs
      (sat_case (\t:tp. \x:kof t K4. \x1:sat t R3 K4. D3 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
      (reduce_sbeta1 (\t:tp. \x:kof t K1. Dreduce2 t x) Dreduce1)
      (D2' T3 Dkof1'' D1'')
      <- canonize_sat notvar_in1 D1 (csat_in1 X1 D1' X2)
      <- srs D1' Dreduce1 D1''
      <- sat_reg D1'' Dkof1'' Dpon
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon
                -> srs (D2 t d1 d2) (Dreduce2 t d1) (D2' t d1 d2)).
-beta2 :
   srs
      (sat_case (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D3 t x x1)
          (\t:tp. \x:kof t K4. \x1:sat t R3 K4. D2 t x x1) D1)
      (reduce_sbeta2 (\t:tp. \x:kof t K1. Dreduce3 t x) Dreduce1)
      (D3' T3 Dkof1'' D1'')
      <- canonize_sat notvar_in2 D1 (csat_in2 X1 D1' X2)
      <- srs D1' Dreduce1 D1''
      <- sat_reg D1'' Dkof1'' Dpon
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon
                -> srs (D3 t d1 d2) (Dreduce3 t d1) (D3' t d1 d2)).
-rbeta :
   srs (sat_unroll D) (reduce_rbeta Dreduce) D'''
      <- canonize_sat notvar_roll D
            (csat_roll D' (\k:kind. \r:pred. \x:pon r k. X1 k r x)
                (\k:kind. Deq k))
      <- srs D' Dreduce D''
      <- kind_eq_cons2 (\k:kind. Deq k) (\k:kind -> kind. krec (\k1:kind. k k1))
            Deq'
      <- kind_eq_cons Deq' (\k:kind. K1 k) Deq''
      <- kind_eq_trans Deq'' (Deq (krec (\k:kind. K2 k))) Deqk
      <- pred_eq_cons_kind Deq'
            (\k:kind. R k (rrec (\k1:kind. \r:pred. R k1 r))) Deqr
      <- sat_resp tp_eq_ Deqr Deqk D'' D'''.
srs|reta :
   Pi K:kind. Pi K':kind -> kind. Pi T':tp. Pi R:pred.
      kind_eq K (krec (\k:kind. K' k)) -> sat T' R K -> pon R K
         -> sat (roll (\k:kind. K' k) (unroll T')) R K -> type.
- :
   srs|reta kind_eq_ D pon_true (sat_true (kof_roll (kof_unroll Dkof)))
      <- sat_reg D Dkof X1.
- :
   srs|reta kind_eq_ D (pon_rec (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (sat_roll (sat_unroll D) (\k:kind. \r:pred. \x:pon r k. Dpon k r x)).
-reta :
   srs D (reduce_reta Dreduce Dkof) D''
      <- srs D Dreduce D'
      <- sat_reg D Dkof' Dpon
      <- kof_fun Dkof' Dkof Deq
      <- srs|reta Deq D' Dpon D''.
-annot :
   srs (sat_annot D) (reduce_annot Dred2 Dred1)
      (entailment (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv))
          (sat_annot (entailment (entails_equiv Dpon2 Dpon1 Dequiv) D')))
      <- srs D Dred1 D'
      <- sat_reg D X1 Dpon1
      <- srpr Dpon1 Dred2 Dpon2
      <- reduce_is_equivpr Dpon1 Dred2 Dequiv.
-lam :
   srs (sat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1) Dpon)
      (reduce_lam (\t:tp. \x:kof t K1. Dreduce t x))
      (sat_lam (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D' t x x1) Dpon)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon -> srs (D t d1 d2) (Dreduce t d1) (D' t d1 d2)).
-app :
   srs (sat_app D2 D1) (reduce_app Dreduce2 Dreduce1) (sat_app D2' D1')
      <- srs D1 Dreduce1 D1'
      <- srs D2 Dreduce2 D2'.
-pair :
   srs (sat_pair D2 D1) (reduce_pair Dreduce2 Dreduce1) (sat_pair D2' D1')
      <- srs D1 Dreduce1 D1'
      <- srs D2 Dreduce2 D2'.
-pi1 : srs (sat_pi1 D) (reduce_pi1 Dreduce) (sat_pi1 D') <- srs D Dreduce D'.
-pi2 : srs (sat_pi2 D) (reduce_pi2 Dreduce) (sat_pi2 D') <- srs D Dreduce D'.
-klam :
   srs (sat_klam (\k:kind. \r:pred. \x:pon r k. D k r x))
      (reduce_klam (\k:kind. \r:pred. \x:pon r k. Dreduce k r x))
      (sat_klam (\k:kind. \r:pred. \x:pon r k. D' k r x))
      <- (Pi k:kind. Pi r:pred. Pi d:pon r k.
             srs (D k r d) (Dreduce k r d) (D' k r d)).
-kapp :
   srs (sat_kapp Dpon D) (reduce_kapp Dred2 Dred1)
      (entailment
          (entails_equiv (Dpon'' K R1 Dpon) (Dpon'' K R2 Dpon')
              (equivpr_symm (Dpon'' K R1 Dpon) Dequiv))
          (sat_kapp Dpon' D'))
      <- srs D Dred1 D'
      <- srpr Dpon Dred2 Dpon'
      <- sat_reg D X1 (pon_forall (\k:kind. \r:pred. \x:pon r k. Dpon'' k r x))
      <- substitutepr1pr (\r:pred. R K r) Dred2 Dred
      <- reduce_is_equivpr (Dpon'' K R1 Dpon) Dred Dequiv.
-in1 :
   srs (sat_in1 Dpon D) (reduce_in1 Dreduce) (sat_in1 Dpon D')
      <- srs D Dreduce D'.
-in2 :
   srs (sat_in2 Dpon D) (reduce_in2 Dreduce) (sat_in2 Dpon D')
      <- srs D Dreduce D'.
-case :
   srs
      (sat_case (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D3 t x x1)
          (\t:tp. \x:kof t K3. \x1:sat t R3 K3. D2 t x x1) D1)
      (reduce_case (\t:tp. \x:kof t K1. Dreduce3 t x)
          (\t:tp. \x:kof t K3. Dreduce2 t x) Dreduce1)
      (sat_case (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D3' t x x1)
          (\t:tp. \x:kof t K3. \x1:sat t R3 K3. D2' t x x1) D1')
      <- srs D1 Dreduce1 D1'
      <- sat_reg D1 X1 (pon_sum Dpon2 Dpon1)
      <- (Pi t:tp. Pi d1:kof t K3. Pi d2:sat t R3 K3.
             sat_reg d2 d1 Dpon1
                -> srs (D2 t d1 d2) (Dreduce2 t d1) (D2' t d1 d2))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon2
                -> srs (D3 t d1 d2) (Dreduce3 t d1) (D3' t d1 d2)).
-roll :
   srs (sat_roll D (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      (reduce_roll Dreduce)
      (sat_roll D' (\k:kind. \r:pred. \x:pon r k. Dpon k r x))
      <- srs D Dreduce D'.
-unroll :
   srs (sat_unroll D) (reduce_unroll Dreduce) (sat_unroll D')
      <- srs D Dreduce D'.
-eteq :
   srs (sat_seteqi D1) (reduce_seteq Dreduce) (sat_seteqi D1')
      <- sr D1 Dreduce D1'.
-prod :
   srs (sat_prodd D2 D1) (reduce_prod Dreduce2 Dreduce1) (sat_prodd D2' D1')
      <- srs D1 Dreduce1 D1'
      <- srs D2 Dreduce2 D2'.
-prod :
   srs (sat_prodn D2 D1) (reduce_prod Dreduce2 Dreduce1) (sat_prodn D2' D1')
      <- srs D1 Dreduce1 D1'
      <- srs D2 Dreduce2 D2'.
-exp :
   srs (sat_expd D2 D1) (reduce_exp Dreduce2 Dreduce1) (sat_expd D2' D1')
      <- srs D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-exp :
   srs (sat_expn D3 D2 D1) (reduce_exp Dreduce2 Dreduce1)
      (entailment
          (entails_equiv (pon_tn (kof_nummul Dkof D2))
              (pon_tn (kof_nummul Dkof D2'))
              (equivpr_tn (equiv_nummul equiv_reflex (equiv_symm D2 Dequiv2))))
          (sat_expn D3 D2' D1'))
      <- srs D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'
      <- sat_reg D1 X1 (pon_tn Dkof)
      <- reduce_is_equiv D2 Dreduce2 Dequiv2.
-exp :
   srs (sat_expiz D3 D2 D1) (reduce_exp Dreduce2 Dreduce1)
      (sat_expiz
          (tr_equiv (propok_numeq kof_numlit D2')
              (equivp_numeq equiv_reflex Dequiv2) D3) D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'
      <- reduce_is_equiv D2 Dreduce2 Dequiv2.
-arrow :
   srs (sat_arrowi Drtpok) (reduce_arrow Dreducer) (sat_arrowi Drtpok')
      <- srr Drtpok Dreducer Drtpok'.
-cbox :
   srs (sat_cboxi D2 D1) (reduce_cbox Dreduce2 Dreduce1) (sat_cboxi D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-cmbox :
   srs (sat_cmboxi D2 D1) (reduce_cmbox Dreduce2 Dreduce1) (sat_cmboxi D2' D1')
      <- sr D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-ptr :
   srs (sat_sptri D1) (reduce_sptr Dreduce) (sat_sptri D1') <- sr D1 Dreduce D1'.
-forall :
   srs (sat_foralld Dsat Dsatarg (\t:tp. \x:kof t K1. Dkof t x))
      (reduce_forall Dred2 (\t:tp. \x:kof t K1. Dreduce t x))
      (sat_foralld Dsat' (entailment (entails_equiv Dpon' Dpon Dequiv) Dsatarg)
          (\t:tp. \x:kof t K1. Dkof' t x))
      <- (Pi t:tp. Pi d1:kof t K1. sr (Dkof t d1) (Dreduce t d1) (Dkof' t d1))
      <- sat_reg Dsatarg Dkofarg Dpon
      <- srs Dsat (Dreduce T2 Dkofarg) Dsat'
      <- reduce_is_equivpr Dpon Dred2 Dequiv
      <- srpr Dpon Dred2 Dpon'.
-forall :
   srs (sat_foralli Dsat Dsatarg (\t:tp. \x:kof t K1. Dkof t x))
      (reduce_forall Dred2 (\t:tp. \x:kof t K1. Dreduce t x))
      (sat_foralli Dsat' (entailment (entails_equiv Dpon' Dpon Dequiv) Dsatarg)
          (\t:tp. \x:kof t K1. Dkof' t x))
      <- (Pi t:tp. Pi d1:kof t K1. sr (Dkof t d1) (Dreduce t d1) (Dkof' t d1))
      <- sat_reg Dsatarg Dkofarg Dpon
      <- srs Dsat (Dreduce T2 Dkofarg) Dsat'
      <- reduce_is_equivpr Dpon Dred2 Dequiv
      <- srpr Dpon Dred2 Dpon'.
-exists :
   srs (sat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D1 t x x1) Dpon)
      (reduce_exists Dred2 (\t:tp. \x:kof t K1. Dreduce t x))
      (sat_existsi
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              D1' t d1
                 (entailment
                     (entails_equiv Dpon Dpon' (equivpr_symm Dpon Dequiv)) d2))
          Dpon')
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon -> srs (D1 t d1 d2) (Dreduce t d1) (D1' t d1 d2))
      <- srpr Dpon Dred2 Dpon'
      <- reduce_is_equivpr Dpon Dred2 Dequiv.
-guard :
   srs (sat_guardd D3 D2 D1) (reduce_guard Dred2 Dred1)
      (sat_guardd D3' (tr_equiv D1' Dequiv D2) D1')
      <- srp D1 Dred1 D1'
      <- srs D3 Dred2 D3'
      <- reduce_is_equivp D1 Dred1 Dequiv.
-guard :
   srs (sat_guardi D3 D2 D1) (reduce_guard Dred2 Dred1)
      (sat_guardi D3' (tr_equiv D1' Dequiv D2) D1')
      <- srp D1 Dred1 D1'
      <- srs D3 Dred2 D3'
      <- reduce_is_equivp D1 Dred1 Dequiv.
-assert :
   srs (sat_assertd (\x:tr P1. D2 x) D1) (reduce_assert Dred2 Dred1)
      (sat_assertd (\d:tr P2. D2' (tr_equiv D1 (equivp_symm D1 Dequiv) d)) D1')
      <- srp D1 Dred1 D1'
      <- (Pi d:tr P1. tr_reg d D1 -> srs (D2 d) Dred2 (D2' d))
      <- reduce_is_equivp D1 Dred1 Dequiv.
-assert :
   srs (sat_asserti (\x:tr P1. D2 x) D1) (reduce_assert Dred2 Dred1)
      (sat_asserti (\d:tr P2. D2' (tr_equiv D1 (equivp_symm D1 Dequiv) d)) D1')
      <- srp D1 Dred1 D1'
      <- (Pi d:tr P1. tr_reg d D1 -> srs (D2 d) Dred2 (D2' d))
      <- reduce_is_equivp D1 Dred1 Dequiv.
-rec :
   srs (sat_recd (\t:tp. \x:kof t kt. D1 t x))
      (reduce_rec (\t:tp. \x:kof t kt. Dreduce t x))
      (sat_recd (\t:tp. \x:kof t kt. D1' t x))
      <- (Pi t:tp. Pi d:kof t kt. srs (D1 t d) (Dreduce t d) (D1' t d)).
-rec :
   srs (sat_reci (\t:tp. \x:kof t kt. D1 t x))
      (reduce_rec (\t:tp. \x:kof t kt. Dreduce t x))
      (sat_reci (\t:tp. \x:kof t kt. D1' t x))
      <- (Pi t:tp. Pi d:kof t kt. srs (D1 t d) (Dreduce t d) (D1' t d)).
-meet :
   srs (sat_meetd1 D2 D1) (reduce_meet Dreduce2 Dreduce1) (sat_meetd1 D2' D1')
      <- srs D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-meet :
   srs (sat_meetd2 D2 D1) (reduce_meet Dreduce2 Dreduce1) (sat_meetd2 D2' D1')
      <- sr D1 Dreduce1 D1'
      <- srs D2 Dreduce2 D2'.
-meet :
   srs (sat_meeti1 D2 D1) (reduce_meet Dreduce2 Dreduce1) (sat_meeti1 D2' D1')
      <- srs D1 Dreduce1 D1'
      <- sr D2 Dreduce2 D2'.
-meet :
   srs (sat_meeti2 D2 D1) (reduce_meet Dreduce2 Dreduce1) (sat_meeti2 D2' D1')
      <- sr D1 Dreduce1 D1'
      <- srs D2 Dreduce2 D2'.
-join :
   srs (sat_joini D2 D1) (reduce_join Dreduce2 Dreduce1) (sat_joini D2' D1')
      <- srs D1 Dreduce1 D1'
      <- srs D2 Dreduce2 D2'.
sat_tp_expd :
   Pi T':tp. Pi N:nat. Pi T':tp.
      sat T' rtd kt -> tp_exp T' N T' -> sat T' rtd kt -> type.
- : sat_tp_expd X1 tp_exp_z sat_b0d.
- :
   sat_tp_expd Dsat (tp_exp_s Dte) (sat_prodd D Dsat) <- sat_tp_expd Dsat Dte D.
sat_tp_expi :
   Pi T':tp. Pi M:nat. Pi N:nat. Pi P:nat. Pi T':tp.
      sat T' (rti M) kt -> product N M P -> tp_exp T' N T' -> sat T' (rti P) kt
         -> type.
- : sat_tp_expi X1 product_z tp_exp_z sat_b0i.
- :
   sat_tp_expi Dsat (product_s Dsum Dprod) (tp_exp_s Dte)
      (sat_prodi _ _ _ _ _ Dsum D Dsat)
      <- sat_tp_expi Dsat Dprod Dte D.
tp_exp_sum_td :
   Pi T':tp. Pi N1:nat. Pi T1:tp. Pi N2:nat. Pi T2:tp. Pi N3:nat. Pi T3:tp.
      tp_exp T' N1 T1 -> sat T1 rtd kt -> tp_exp T' N2 T2 -> sat T2 rtd kt
         -> sum N1 N2 N3 -> tp_exp T' N3 T3 -> sat T3 rtd kt
         -> subtype T3 (prod T1 T2) -> subtype (prod T1 T2) T3 -> type.
- : tp_exp_sum_td tp_exp_z Dsat1 Dte Dsat2 sum_z Dte Dsat2 luniti lunite.
- :
   tp_exp_sum_td (tp_exp_s Dte1) Dsat1 Dte2 Dsat2 (sum_s Dsum) (tp_exp_s Dte3)
      (sat_prodd Dsat6 Dsat5) (trans lassoc (prod_sub Dsub reflex))
      (trans (prod_sub Dsubrev reflex) rassoc)
      <- canonize_sat notvar_prod Dsat1 (csat_prodd Dsat4 Dsat5)
      <- tp_exp_sum_td Dte1 Dsat4 Dte2 Dsat2 Dsum Dte3 Dsat6 Dsub Dsubrev.
false_implies_val_eq : false -> Pi V:val. Pi V':val. val_eq V V' -> type.
false_implies_aval_eq : false -> Pi A:aval. Pi A':aval. aval_eq A A' -> type.
append_assoc :
   Pi V1:val. Pi V2:val. Pi V12:val. Pi V3:val. Pi V:val. Pi V23:val.
      append V1 V2 V12 -> append V12 V3 V -> append V2 V3 V23 -> append V1 V23 V
         -> type.
append_assoc_null : append_assoc append_null D D append_null.
append_assoc_cons :
   append_assoc (append_cons D12) (append_cons D12_3) D23 (append_cons D1_23)
      <- append_assoc D12 D12_3 D23 D1_23.
append_assoc' :
   Pi V1:val. Pi V2:val. Pi V12:val. Pi V3:val. Pi V:val. Pi V23:val.
      append V1 V2 V12 -> append V12 V3 V -> append V2 V3 V23 -> append V1 V23 V
         -> type.
append_assoc'_null : append_assoc' append_null D D append_null.
append_assoc'_cons :
   append_assoc' (append_cons D12) (append_cons D12_3) D23 (append_cons D1_23)
      <- append_assoc' D12 D12_3 D23 D1_23.
append_ident : Pi V:val. append V null V -> type.
append_ident_null : append_ident null append_null.
append_ident_cons : append_ident (;' U1 V) (append_cons D) <- append_ident V D.
append_fun3 :
   Pi V1:val. Pi V2:val. Pi V3:val. Pi V3':val.
      append V1 V2 V3 -> append V1 V2 V3' -> val_eq V3 V3' -> type.
append_fun3_null : append_fun3 append_null append_null val_eq_.
append_fun3_cons :
   append_fun3 (append_cons D1) (append_cons D2) D'
      <- append_fun3 D1 D2 D
      <- val_eq_cons uval_eq_ D D'.
can_append : Pi V1:val. Pi V2:val. Pi V3:val. append V1 V2 V3 -> type.
can_append_null : can_append null V V append_null.
can_append_cons :
   can_append (;' U V1) V2 (;' U V3) (append_cons D) <- can_append V1 V2 V3 D.
code_append :
   Pi V1:val. Pi V2:val. Pi V3:val. Pi PC:pc. Pi I:instseq.
      append V1 V2 V3 -> codeval PC V1 I -> codeval PC V3 I -> type.
code_append_nil : code_append X1 codeval_nil codeval_nil.
code_append_cons :
   code_append Dapp12_3 (codeval_cons Dcodeval Dsum Ddeloc Datomval Dapp12)
      (codeval_cons Dcodeval' Dsum Ddeloc Datomval Dapp1_23)
      <- append_assoc Dapp12 Dapp12_3 Dapp23 Dapp1_23
      <- code_append Dapp23 Dcodeval Dcodeval'.
atomval_fun :
   Pi V:val. Pi A:aval. Pi A':aval.
      atomval V A 0' -> atomval V A' 0' -> aval_eq A A' -> type.
atomval_fun_sing : atomval_fun (atomval_sing X1) (atomval_sing X2) aval_eq_.
atomval_fun_cons : atomval_fun (atomval_cons X1) (atomval_cons X2) aval_eq_.
can_atomval :
   Pi N:nat. Pi V:val. Pi A:aval. asize A (s N) -> atomval V A 0' -> type.
can_atomval* :
   Pi A:aval. Pi N:nat. Pi M:nat. Pi V:val.
      asize A N -> Pi P:nat. sum P (s M) N -> atomval V A M -> type.
can_atomval_z : can_atomval* Dasize z sum_z (atomval_sing Dasize).
can_atomval_s :
   can_atomval* Dasize (s P) Dsum (atomval_cons D)
      <- sum_shift Dsum Dsum'
      <- can_atomval* Dasize P Dsum' D.
can_atomval_ :
   can_atomval A Dasize D
      <- sum_commute (sum_s sum_z) Dsum
      <- can_atomval* Dasize N1 Dsum D.
asize_fun :
   Pi A:aval. Pi N:nat. Pi N':nat.
      asize A N -> asize A N' -> nat_eq N N' -> type.
asize_fun_lit : asize_fun asize_lit asize_lit nat_eq_.
asize_fun_pointer : asize_fun asize_pointer asize_pointer nat_eq_.
asize_fun_spointer : asize_fun asize_spointer asize_spointer nat_eq_.
asize_fun_gotpointer : asize_fun asize_gotpointer asize_gotpointer nat_eq_.
asize_fun_junk : asize_fun asize_junk asize_junk nat_eq_.
asize_fun_instruct : asize_fun asize_instruct asize_instruct nat_eq_.
atomval_asize :
   Pi V1:val. Pi A:aval. Pi M:nat. Pi N:nat.
      atomval V1 A M -> asize A N -> lt M N -> type.
atomval_asize_sing :
   atomval_asize (atomval_sing Dasize) Dasize' Dlt'
      <- asize_fun Dasize Dasize' Deq
      <- lt_succ N1 Dlt
      <- lt_resp nat_eq_ Deq Dlt Dlt'.
atomval_asize_cons :
   atomval_asize (atomval_cons D) Dasize Dlt''
      <- atomval_asize D Dasize Dlt
      <- lt_succ N1 Dlt'
      <- lt_trans Dlt' Dlt Dlt''.
atomval_append_fun :
   Pi V1:val. Pi A:aval. Pi N:nat. Pi V1':val. Pi A':aval. Pi V2:val. Pi V:val.
      Pi V2':val.
      atomval V1 A N -> atomval V1' A' N -> append V1 V2 V -> append V1' V2' V
         -> val_eq V1 V1' -> val_eq V2 V2' -> aval_eq A A' -> type.
atomval_append_fun_sing :
   atomval_append_fun (atomval_sing X1) (atomval_sing X2)
      (append_cons append_null) (append_cons append_null) val_eq_ val_eq_
      aval_eq_.
atomval_append_fun_cons :
   atomval_append_fun (atomval_cons Dav) (atomval_cons Dav') (append_cons Dapp)
      (append_cons Dapp') D1' D2 aval_eq_
      <- atomval_append_fun Dav Dav' Dapp Dapp' D1 D2 X1
      <- val_eq_cons uval_eq_ D1 D1'.
atomval_append_fun_sing_cons :
   atomval_append_fun (atomval_sing Dasize) (atomval_cons Dav) X1 X2 D1 D2 D3
      <- atomval_asize Dav Dasize (lt_s Dlt)
      <- lt_contradict Dlt Dfalse
      <- false_implies_val_eq Dfalse (;' (@' A1 N1) null) (;' (@' A1 N1) (;' U1 V3))
            D1
      <- false_implies_val_eq Dfalse V1 V2 D2
      <- false_implies_aval_eq Dfalse A1 A1 D3.
atomval_append_fun_cons_sing :
   atomval_append_fun (atomval_cons Dav) (atomval_sing Dasize) X1 X2 D1 D2 D3
      <- atomval_asize Dav Dasize (lt_s Dlt)
      <- lt_contradict Dlt Dfalse
      <- false_implies_val_eq Dfalse (;' (@' A1 N1) (;' U1 V3)) (;' (@' A1 N1) null)
            D1
      <- false_implies_val_eq Dfalse V1 V2 D2
      <- false_implies_aval_eq Dfalse A1 A1 D3.
separate_fun :
   Pi N:nat. Pi V:val. Pi V1:val. Pi V2:val. Pi V1':val. Pi V2':val.
      separate N V V1 V2 -> separate N V V1' V2' -> val_eq V1 V1'
         -> val_eq V2 V2' -> type.
separate_fun_z : separate_fun separate_z separate_z val_eq_ val_eq_.
separate_fun_s :
   separate_fun (separate_s D1) (separate_s D2) Deq1' Deq2
      <- separate_fun D1 D2 Deq1 Deq2
      <- val_eq_cons uval_eq_ Deq1 Deq1'.
separate_is_append :
   Pi N1:nat. Pi V:val. Pi V1:val. Pi V2:val.
      separate N1 V V1 V2 -> append V1 V2 V -> type.
separate_is_append_z : separate_is_append separate_z append_null.
separate_is_append_s :
   separate_is_append (separate_s D) (append_cons D') <- separate_is_append D D'.
append_is_separate :
   Pi V1:val. Pi V2:val. Pi V:val. Pi N:nat.
      append V1 V2 V -> size V1 N -> separate N V V1 V2 -> type.
append_is_separate_null : append_is_separate append_null size_null separate_z.
append_is_separate_cons :
   append_is_separate (append_cons D1) (size_cons D2) (separate_s D3)
      <- append_is_separate D1 D2 D3.
separate_size :
   Pi N:nat. Pi V1:val. Pi V:val. Pi V2:val.
      separate N V1 V V2 -> size V N -> type.
separate_size_z : separate_size separate_z size_null.
separate_size_s :
   separate_size (separate_s D) (size_cons D') <- separate_size D D'.
separate_implies_sum :
   Pi N2:nat. Pi V1:val. Pi V2:val. Pi V3:val. Pi N1:nat. Pi N3:nat.
      separate N2 V1 V2 V3 -> size V1 N1 -> size V3 N3 -> sum N2 N3 N1 -> type.
- : separate_implies_sum separate_z Dsize Dsize sum_z.
- :
   separate_implies_sum (separate_s Dsep) (size_cons Dsize1) Dsize2 (sum_s Dsum)
      <- separate_implies_sum Dsep Dsize1 Dsize2 Dsum.
separate_compose :
   Pi N1:nat. Pi V:val. Pi V1:val. Pi V':val. Pi N2:nat. Pi V2:val. Pi V'':val.
      Pi N3:nat. Pi V3:val.
      separate N1 V V1 V' -> separate N2 V' V2 V'' -> sum N1 N2 N3
         -> append V1 V2 V3 -> separate N3 V V3 V'' -> type.
separate_compose_z : separate_compose separate_z D sum_z append_null D.
separate_compose_s :
   separate_compose (separate_s Dsep1) Dsep2 (sum_s Dsum) (append_cons Dapp)
      (separate_s Dsep3)
      <- separate_compose Dsep1 Dsep2 Dsum Dapp Dsep3.
separate_size_leq :
   Pi N:nat. Pi V:val. Pi V1:val. Pi V2:val. Pi N2:nat.
      separate N V V1 V2 -> size V N2 -> leq N N2 -> type.
separate_size_leq_z : separate_size_leq separate_z Dsize leq_z.
separate_size_leq_s :
   separate_size_leq (separate_s Dsep) (size_cons Dsize) (leq_s Dleq)
      <- separate_size_leq Dsep Dsize Dleq.
exp_pt :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat. Pi V':val. Pi T':tp.
      of S V T' -> val_exp V N V' -> tp_exp T' N T' -> of S V' T' -> type.
exp_pt_z : exp_pt X1 val_exp_z tp_exp_z of_null.
exp_pt_s :
   exp_pt Dof (val_exp_s Dapp Dve) (tp_exp_s Dte) (of_append Dof' Dof Dapp)
      <- exp_pt Dof Dve Dte Dof'.
can_val_exp : Pi V:val. Pi N:nat. Pi V':val. val_exp V N V' -> type.
can_val_exp_z : can_val_exp V 0' null val_exp_z.
can_val_exp_ :
   can_val_exp V (s N) V'' (val_exp_s Dapp Dve)
      <- can_val_exp V N V' Dve
      <- can_append V V' V'' Dapp.
val_exp_size :
   Pi V:val. Pi N:nat. Pi V':val.
      val_exp V N V' -> size V 1' -> size V' N -> type.
- : val_exp_size val_exp_z X1 size_null.
- :
   val_exp_size (val_exp_s (append_cons append_null) Dvexp)
      (size_cons size_null) (size_cons Dsize)
      <- val_exp_size Dvexp (size_cons size_null) Dsize.
can_rlookup :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi REG:reg. Pi T':tp. Pi V:val.
      rof S R G -> rtlookup G REG T' -> rlookup R REG V -> of S V T' -> type.
can_rlookup* :
   Pi N1:nat. Pi S:htp. Pi R:rfile* N1. Pi G:rtp* N1. Pi N:nat. Pi T':tp.
      Pi V:val.
      rof* S R G -> rtlookup* G N T' -> rlookup* R N V -> of S V T' -> type.
can_rlookup_z : can_rlookup* (rof_cons X1 Dof X2) rtlookup_z rlookup_z Dof.
can_rlookup_s :
   can_rlookup* (rof_cons Drof X1 X2) (rtlookup_s Dlookt) (rlookup_s Dlook) Dof
      <- can_rlookup* Drof Dlookt Dlook Dof.
can_rlookup_ :
   can_rlookup (rof_ D1 X1) (rtlookup_ D2) (rlookup_ D3) D4
      <- can_rlookup* D1 D2 D3 D4.
rlookup_pt :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi REG:reg. Pi T':tp. Pi V:val.
      rof S R G -> rtlookup G REG T' -> rlookup R REG V -> of S V T' -> type.
rlookup_pt* :
   Pi N1:nat. Pi S:htp. Pi R:rfile* N1. Pi G:rtp* N1. Pi N:nat. Pi T':tp.
      Pi V:val.
      rof* S R G -> rtlookup* G N T' -> rlookup* R N V -> of S V T' -> type.
rlookup_pt_z : rlookup_pt* (rof_cons X1 Dof X2) rtlookup_z rlookup_z Dof.
rlookup_pt_s :
   rlookup_pt* (rof_cons Drof X1 X2) (rtlookup_s Dlookt) (rlookup_s Dlook) Dof
      <- rlookup_pt* Drof Dlookt Dlook Dof.
rlookup_pt_ :
   rlookup_pt (rof_ D1 X1) (rtlookup_ D2) (rlookup_ D3) D4
      <- rlookup_pt* D1 D2 D3 D4.
rlookup_fun :
   Pi R:rfile. Pi REG:reg. Pi V:val. Pi V':val.
      rlookup R REG V -> rlookup R REG V' -> val_eq V V' -> type.
rlookup_fun* :
   Pi N1:nat. Pi R:rfile* N1. Pi N:nat. Pi V:val. Pi V':val.
      rlookup* R N V -> rlookup* R N V' -> val_eq V V' -> type.
rlookup_fun_z : rlookup_fun* rlookup_z rlookup_z val_eq_.
rlookup_fun_s :
   rlookup_fun* (rlookup_s D1) (rlookup_s D2) D <- rlookup_fun* D1 D2 D.
rlookup_fun_ :
   rlookup_fun (rlookup_ D1) (rlookup_ D2) D <- rlookup_fun* D1 D2 D.
rlookup_size :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi REG:reg. Pi V:val.
      rof S R G -> rlookup R REG V -> size V wordsize -> type.
rlookup_size* :
   Pi N1:nat. Pi S:htp. Pi R:rfile* N1. Pi G:rtp* N1. Pi N:nat. Pi V:val.
      rof* S R G -> rlookup* R N V -> size V wordsize -> type.
- : rlookup_size* (rof_cons X1 X2 Dsize) rlookup_z Dsize.
- :
   rlookup_size* (rof_cons Drof X1 X2) (rlookup_s Dlook) Dsize
      <- rlookup_size* Drof Dlook Dsize.
- :
   rlookup_size (rof_ Drof X1) (rlookup_ Dlook) Dsize
      <- rlookup_size* Drof Dlook Dsize.
can_rtupdate :
   Pi G:rtp. Pi REG:reg. Pi T':tp. Pi G':rtp.
      regok REG -> rtupdate G REG T' G' -> type.
can_rtupdate* :
   Pi M:nat. Pi G:rtp* M. Pi N:nat. Pi T':tp. Pi G':rtp* M.
      lt N M -> rtupdate* G N T' G' -> type.
- : can_rtupdate* (rtcons T1 G) z T' (rtcons T' G) lt_z rtupdate_z.
- :
   can_rtupdate* (rtcons T' G) (s N) T' (rtcons T' G') (lt_s Dlt)
      (rtupdate_s Drtupdate)
      <- can_rtupdate* G N T' G' Dlt Drtupdate.
- :
   can_rtupdate (rt ZT G) (rg N) T' (rt ZT G') (regok_ Dlt)
      (rtupdate_ Drtupdate)
      <- can_rtupdate* G N T' G' Dlt Drtupdate.
rtupdate_rtlookup :
   Pi G:rtp. Pi REG:reg. Pi T':tp. Pi G':rtp.
      rtupdate G REG T' G' -> rtlookup G' REG T' -> type.
rtupdate_rtlookup* :
   Pi N1:nat. Pi G:rtp* N1. Pi N:nat. Pi T':tp. Pi G':rtp* N1.
      rtupdate* G N T' G' -> rtlookup* G' N T' -> type.
- : rtupdate_rtlookup* rtupdate_z rtlookup_z.
- :
   rtupdate_rtlookup* (rtupdate_s D) (rtlookup_s D') <- rtupdate_rtlookup* D D'.
- : rtupdate_rtlookup (rtupdate_ D) (rtlookup_ D') <- rtupdate_rtlookup* D D'.
rtupdate*_sub :
   Pi N1:nat. Pi G:rtp* N1. Pi G':rtp* N1. Pi REG:nat. Pi T':tp. Pi G1:rtp* N1.
      Pi T1:tp. Pi G2:rtp* N1.
      rtpok* G -> rtpok* G' -> rtupdate* G REG T' G1 -> subrtype* G' G
         -> subtype T1 T' -> rtupdate* G' REG T1 G2 -> subrtype* G2 G1 -> type.
- :
   rtupdate*_sub (rtpok_cons Drok1 Dkof1) (rtpok_cons Drok2 Dkof2) rtupdate_z
      (subrtype_cons Dsubr Dsub1) Dsub2 rtupdate_z (subrtype_cons Dsubr Dsub2).
- :
   rtupdate*_sub (rtpok_cons Drok1 Dkof1) (rtpok_cons Drok2 Dkof2)
      (rtupdate_s Drupd) (subrtype_cons Dsubr Dsub1) Dsub2 (rtupdate_s Drupd1)
      (subrtype_cons Dsubr1 Dsub1)
      <- rtupdate*_sub Drok1 Drok2 Drupd Dsubr Dsub2 Drupd1 Dsubr1.
rtupdate_sub :
   Pi G:rtp. Pi G':rtp. Pi REG:reg. Pi T':tp. Pi G1:rtp. Pi T1:tp. Pi G2:rtp.
      rtpok G -> rtpok G' -> rtupdate G REG T' G1 -> subrtype G' G
         -> subtype T1 T' -> rtupdate G' REG T1 G2 -> subrtype G2 G1 -> type.
- :
   rtupdate_sub (rtpok_ Drtp1 Dkof1) (rtpok_ Drtp2 Dkof2) (rtupdate_ Drupd)
      Dsubr Dsub1 (rtupdate_ Drupd1) (subrtype_all Dsubr2 Dsub2)
      <- subrtype_decons Dsubr Dsub2 Dsubr1
      <- rtupdate*_sub Drtp1 Drtp2 Drupd Dsubr1 Dsub1 Drupd1 Dsubr2.
rtlookup*_sub :
   Pi N1:nat. Pi G:rtp* N1. Pi R:nat. Pi T':tp. Pi T1:tp. Pi G1:rtp* N1.
      rtpok* G -> rtlookup* G R T' -> subtype T' T1 -> rtpok* G1
         -> rtlookup* G1 R T1 -> subrtype* G G1 -> type.
- :
   rtlookup*_sub (rtpok_cons Drok Dkof) rtlookup_z Dsub (rtpok_cons Drok Dkof1)
      rtlookup_z (subrtype_cons Dsubr Dsub)
      <- subtype_reg1 Dkof Dkof1 Dsub
      <- subrtype*_reflex G1 Dsubr.
- :
   rtlookup*_sub (rtpok_cons Drok Dkof) (rtlookup_s Drl) Dsub
      (rtpok_cons Drok1 Dkof) (rtlookup_s Drl1) (subrtype_cons Dsubr reflex)
      <- rtlookup*_sub Drok Drl Dsub Drok1 Drl1 Dsubr.
rtlookup_sub :
   Pi G:rtp. Pi R:reg. Pi T':tp. Pi T1:tp. Pi G1:rtp.
      rtpok G -> rtlookup G R T' -> subtype T' T1 -> rtpok G1
         -> rtlookup G1 R T1 -> subrtype G G1 -> type.
- :
   rtlookup_sub (rtpok_ Drok Dkof) (rtlookup_ Drl) Dsub (rtpok_ Drok1 Dkof)
      (rtlookup_ Drl1) (subrtype_all Dsubr reflex)
      <- rtlookup*_sub Drok Drl Dsub Drok1 Drl1 Dsubr.
rtupdate*_last :
   Pi N1:nat. Pi G:rtp* N1. Pi R:nat. Pi T':tp. Pi G1:rtp* N1. Pi T1:tp.
      Pi G2:rtp* N1.
      rtupdate* G R T' G1 -> rtupdate* G R T1 G2 -> rtupdate* G1 R T1 G2 -> type.
- : rtupdate*_last rtupdate_z rtupdate_z rtupdate_z.
- :
   rtupdate*_last (rtupdate_s Dru1) (rtupdate_s Dru2) (rtupdate_s Dru3)
      <- rtupdate*_last Dru1 Dru2 Dru3.
rtupdate_last :
   Pi G:rtp. Pi R:reg. Pi T':tp. Pi G1:rtp. Pi T1:tp. Pi G2:rtp.
      rtupdate G R T' G1 -> rtupdate G R T1 G2 -> rtupdate G1 R T1 G2 -> type.
- :
   rtupdate_last (rtupdate_ Dru1) (rtupdate_ Dru2) (rtupdate_ Dru3)
      <- rtupdate*_last Dru1 Dru2 Dru3.
rtlookup_rtupdate*_reverse :
   Pi N1:nat. Pi G:rtp* N1. Pi R:nat. Pi T':tp. Pi T1:tp. Pi G1:rtp* N1.
      rtlookup* G R T' -> rtupdate* G R T1 G1 -> rtlookup* G1 R T1
         -> rtupdate* G1 R T' G -> type.
- : rtlookup_rtupdate*_reverse rtlookup_z rtupdate_z rtlookup_z rtupdate_z.
- :
   rtlookup_rtupdate*_reverse (rtlookup_s Drtl1) (rtupdate_s Drtu1)
      (rtlookup_s Drtl2) (rtupdate_s Drtu2)
      <- rtlookup_rtupdate*_reverse Drtl1 Drtu1 Drtl2 Drtu2.
rtlookup_rtupdate_reverse :
   Pi G:rtp. Pi R:reg. Pi T':tp. Pi T1:tp. Pi G1:rtp.
      rtlookup G R T' -> rtupdate G R T1 G1 -> rtlookup G1 R T1
         -> rtupdate G1 R T' G -> type.
- :
   rtlookup_rtupdate_reverse (rtlookup_ Drtl1) (rtupdate_ Drtu1)
      (rtlookup_ Drtl2) (rtupdate_ Drtu2)
      <- rtlookup_rtupdate*_reverse Drtl1 Drtu1 Drtl2 Drtu2.
can_rupdate :
   Pi R:rfile. Pi REG:reg. Pi V:val. Pi R':rfile.
      regok REG -> rupdate R REG V R' -> type.
can_rupdate* :
   Pi M:nat. Pi R:rfile* M. Pi N:nat. Pi V:val. Pi R':rfile* M.
      lt N M -> rupdate* R N V R' -> type.
- : can_rupdate* (rfcons V1 R) z V (rfcons V R) X1 rupdate_z.
- :
   can_rupdate* (rfcons V R) (s N) V' (rfcons V R') (lt_s E1) (rupdate_s E2)
      <- can_rupdate* R N V' R' E1 E2.
- :
   can_rupdate (rf Z CC R) (rg N) V (rf Z CC R') (regok_ E1) (rupdate_ E2)
      <- can_rupdate* R N V R' E1 E2.
rupdate_pt :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi V:val. Pi T':tp. Pi REG:reg. Pi R':rfile.
      Pi G':rtp.
      rof S R G -> of S V T' -> size V wordsize -> rupdate R REG V R'
         -> rtupdate G REG T' G' -> rof S R' G' -> type.
rupdate_pt* :
   Pi N1:nat. Pi S:htp. Pi R:rfile* N1. Pi G:rtp* N1. Pi V:val. Pi T':tp.
      Pi N:nat. Pi R':rfile* N1. Pi G':rtp* N1.
      rof* S R G -> of S V T' -> size V wordsize -> rupdate* R N V R'
         -> rtupdate* G N T' G' -> rof* S R' G' -> type.
- :
   rupdate_pt* (rof_cons Drof X1 X2) Dof Dsize rupdate_z rtupdate_z
      (rof_cons Drof Dof Dsize).
- :
   rupdate_pt* (rof_cons Drof Dof' Dsize') Dof Dsize (rupdate_s Drupdate)
      (rtupdate_s Drtupdate) (rof_cons Drof' Dof' Dsize')
      <- rupdate_pt* Drof Dof Dsize Drupdate Drtupdate Drof'.
- :
   rupdate_pt (rof_ Drof Dzof) Dof Dsize (rupdate_ Drupdate)
      (rtupdate_ Drtupdate) (rof_ Drof' Dzof)
      <- rupdate_pt* Drof Dof Dsize Drupdate Drtupdate Drof'.
rupdate_nochange :
   Pi R:rfile. Pi REG:reg. Pi V:val.
      rlookup R REG V -> rupdate R REG V R -> type.
rupdate_nochange* :
   Pi N1:nat. Pi R:rfile* N1. Pi N:nat. Pi V:val.
      rlookup* R N V -> rupdate* R N V R -> type.
rupdate_nochange_z : rupdate_nochange* rlookup_z rupdate_z.
rupdate_nochange_s :
   rupdate_nochange* (rlookup_s D) (rupdate_s D') <- rupdate_nochange* D D'.
rupdate_nochange_ :
   rupdate_nochange (rlookup_ D) (rupdate_ D') <- rupdate_nochange* D D'.
rupdate_rlookup :
   Pi R:rfile. Pi REG:reg. Pi V:val. Pi R':rfile.
      rlookup R REG V -> rupdate R' REG V R -> type.
rupdate_rlookup* :
   Pi N1:nat. Pi R:rfile* N1. Pi N:nat. Pi V:val. Pi R':rfile* N1.
      rlookup* R N V -> rupdate* R' N V R -> type.
rupdate_rlookup_z : rupdate_rlookup* rlookup_z rupdate_z.
rupdate_rlookup_s :
   rupdate_rlookup* (rlookup_s D) (rupdate_s D') <- rupdate_rlookup* D D'.
rupdate_rlookup_ :
   rupdate_rlookup (rlookup_ D) (rupdate_ D') <- rupdate_rlookup* D D'.
rtupdate_same :
   Pi G1:rtp. Pi REG:reg. Pi T1:tp. Pi G2:rtp. Pi T':tp. Pi G3:rtp.
      rtupdate G1 REG T1 G2 -> rtupdate G2 REG T' G3 -> rtupdate G1 REG T' G3
         -> type.
rtupdate_same* :
   Pi N1:nat. Pi G1:rtp* N1. Pi N:nat. Pi T1:tp. Pi G2:rtp* N1. Pi T':tp.
      Pi G3:rtp* N1.
      rtupdate* G1 N T1 G2 -> rtupdate* G2 N T' G3 -> rtupdate* G1 N T' G3
         -> type.
- : rtupdate_same* rtupdate_z rtupdate_z rtupdate_z.
- :
   rtupdate_same* (rtupdate_s D1) (rtupdate_s D2) (rtupdate_s D3)
      <- rtupdate_same* D1 D2 D3.
- :
   rtupdate_same (rtupdate_ D1) (rtupdate_ D2) (rtupdate_ D3)
      <- rtupdate_same* D1 D2 D3.
rupdate_distinct :
   Pi REG:reg. Pi REG':reg. Pi R:rfile. Pi V:val. Pi R':rfile. Pi V':val.
      regne REG REG' -> rupdate R REG V R' -> rlookup R REG' V'
         -> rlookup R' REG' V' -> type.
rupdate_distinct* :
   Pi N:nat. Pi N':nat. Pi N1:nat. Pi R:rfile* N1. Pi V:val. Pi R':rfile* N1.
      Pi V':val.
      neq N N' -> rupdate* R N V R' -> rlookup* R N' V' -> rlookup* R' N' V'
         -> type.
rupdate_distinct_zs :
   rupdate_distinct* neq_zs rupdate_z (rlookup_s D) (rlookup_s D).
rupdate_distinct_sz :
   rupdate_distinct* neq_sz (rupdate_s X1) rlookup_z rlookup_z.
rupdate_distinct_s :
   rupdate_distinct* (neq_s D1) (rupdate_s D2) (rlookup_s D3) (rlookup_s D)
      <- rupdate_distinct* D1 D2 D3 D.
rupdate_distinct_ :
   rupdate_distinct (regne_ D1) (rupdate_ D2) (rlookup_ D3) (rlookup_ D)
      <- rupdate_distinct* D1 D2 D3 D.
can_zlookup :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi ZT:tp. Pi Z:val.
      rof S R G -> ztlookup G ZT -> zlookup R Z -> of S Z ZT -> kof ZT kt
         -> type.
can_zlookup_ :
   can_zlookup (rof_ X1 Dzof) ztlookup_ zlookup_ Dzof Dzok <- of_reg Dzof Dzok.
zlookup_pt :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi ZT:tp. Pi Z:val.
      rof S R G -> ztlookup G ZT -> zlookup R Z -> of S Z ZT -> kof ZT kt
         -> type.
zlookup_pt_ :
   zlookup_pt (rof_ X1 Dzof) ztlookup_ zlookup_ Dzof Dzok <- of_reg Dzof Dzok.
zupdate_distinct :
   Pi R:rfile. Pi Z:val. Pi R':rfile. Pi REG:reg. Pi V:val.
      zupdate R Z R' -> rlookup R REG V -> rlookup R' REG V -> type.
zupdate_distinct_ : zupdate_distinct zupdate_ (rlookup_ D) (rlookup_ D).
zupdate_distinct2 :
   Pi R:rfile. Pi Z:val. Pi R':rfile. Pi REG:reg. Pi V:val.
      zupdate R Z R' -> rlookup R REG V -> rlookup R' REG V -> type.
zupdate_distinct2_ : zupdate_distinct2 zupdate_ (rlookup_ D) (rlookup_ D).
can_zupdate :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi Z:val. Pi ZT:tp. Pi G':rtp. Pi R':rfile.
      rof S R G -> of S Z ZT -> ztupdate G ZT G' -> zupdate R Z R' -> type.
can_zupdate_ : can_zupdate (rof_ X1 X2) Dzof ztupdate_ zupdate_.
can_zupdate' :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi Z:val. Pi ZT:tp. Pi G':rtp. Pi R':rfile.
      rof S R G -> of S Z ZT -> ztupdate G ZT G' -> zupdate R Z R'
         -> rof S R' G' -> type.
can_zupdate'_ :
   can_zupdate' (rof_ Dr X1) Dzof ztupdate_ zupdate_ (rof_ Dr Dzof).
zupdate_pt :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi Z:val. Pi ZT:tp. Pi G':rtp. Pi R':rfile.
      rof S R G -> of S Z ZT -> ztupdate G ZT G' -> zupdate R Z R'
         -> rof S R' G' -> type.
zupdate_pt_ : zupdate_pt (rof_ Dr X1) Dzof ztupdate_ zupdate_ (rof_ Dr Dzof).
zupdate_fun :
   Pi G:rtp. Pi ZT:tp. Pi G1:rtp. Pi G2:rtp.
      ztupdate G ZT G1 -> ztupdate G ZT G2 -> rtp_eq G1 G2 -> type.
- : zupdate_fun ztupdate_ ztupdate_ rtp_eq_.
ztupdate_reverse :
   Pi G:rtp. Pi ZT1:tp. Pi G1:rtp. Pi ZT2:tp.
      ztupdate G ZT1 G1 -> ztlookup G ZT2 -> ztupdate G1 ZT2 G -> type.
- : ztupdate_reverse ztupdate_ ztlookup_ ztupdate_.
ztupdate_ztlookup :
   Pi G:rtp. Pi ZT:tp. Pi G1:rtp. ztupdate G ZT G1 -> ztlookup G1 ZT -> type.
- : ztupdate_ztlookup ztupdate_ ztlookup_.
ztlookup_ztupdate_reverse :
   Pi G:rtp. Pi T':tp. Pi T':tp. Pi G':rtp.
      ztlookup G T' -> ztupdate G T' G' -> ztlookup G' T' -> ztupdate G' T' G
         -> type.
- : ztlookup_ztupdate_reverse ztlookup_ ztupdate_ ztlookup_ ztupdate_.
ztupdate_sub :
   Pi G:rtp. Pi G':rtp. Pi ZT:tp. Pi G1:rtp. Pi ZT1:tp. Pi G2:rtp.
      rtpok G -> rtpok G' -> ztupdate G ZT G1 -> subrtype G' G -> subtype ZT1 ZT
         -> ztupdate G' ZT1 G2 -> subrtype G2 G1 -> type.
- :
   ztupdate_sub Drtpok1 (rtpok_ Drtpok2 Dkof3) ztupdate_ Dsubr Dsub ztupdate_
      (subrtype_trans (subrtype_all Dsub2 Dsub) (subrtype_all Dsubr1 reflex))
      <- subrtype_decons Dsubr Dsub1 Dsub2
      <- subrtype*_reflex G1 Dsubr1.
can_cclookup : Pi CC:conds. Pi R:rfile. cclookup R CC -> type.
can_cclookup_ : can_cclookup (rf V1 CC1 R1) cclookup_.
can_ccupdate : Pi R':rfile. Pi R:rfile. Pi CC:conds. ccupdate R CC R' -> type.
can_ccupdate_ : can_ccupdate (rf V1 CC2 R1) CC1 ccupdate_.
ccupdate_pt :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi CC:conds. Pi R':rfile.
      rof S R G -> ccupdate R CC R' -> rof S R' G -> type.
ccupdate_pt_ : ccupdate_pt (rof_ D1 D2) ccupdate_ (rof_ D1 D2).
rfile_subsume :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi G':rtp.
      rof S R G -> subrtype G G' -> rof S R G' -> type.
rfile_subsume_reflex : rfile_subsume Drof subrtype_reflex Drof.
rfile_subsume_trans :
   rfile_subsume Drof1 (subrtype_trans D23 D12) Drof3
      <- rfile_subsume Drof1 D12 Drof2
      <- rfile_subsume Drof2 D23 Drof3.
rfile_subsume_sp :
   rfile_subsume (rof_ Drof Dof) (subrtype_sp Dsub ztupdate_ ztlookup_)
      (rof_ Drof (subsume Dsub Dof)).
rfile_subsume_reg| :
   Pi N1:nat. Pi S:htp. Pi R:rfile* N1. Pi G:rtp* N1. Pi N:nat. Pi T':tp.
      Pi T':tp. Pi G':rtp* N1.
      rof* S R G -> rtlookup* G N T' -> subtype T' T' -> rtupdate* G N T' G'
         -> rof* S R G' -> type.
rfile_subsume_reg|_z :
   rfile_subsume_reg| (rof_cons Drof Dof Dsize) rtlookup_z Dsub rtupdate_z
      (rof_cons Drof (subsume Dsub Dof) Dsize).
rfile_subsume_reg|_s :
   rfile_subsume_reg| (rof_cons Drof Dof Dsize) (rtlookup_s Drtlookup) Dsub
      (rtupdate_s Drtupdate) (rof_cons Drof' Dof Dsize)
      <- rfile_subsume_reg| Drof Drtlookup Dsub Drtupdate Drof'.
rfile_subsume_reg :
   rfile_subsume (rof_ Drof Dof)
      (subrtype_reg Dsub (rtupdate_ Drtupdate) (rtlookup_ Drtlookup))
      (rof_ Drof' Dof)
      <- rfile_subsume_reg| Drof Drtlookup Dsub Drtupdate Drof'.
rfile_subsume* :
   Pi N1:nat. Pi S:htp. Pi R:rfile* N1. Pi G:rtp* N1. Pi G':rtp* N1.
      rof* S R G -> subrtype* G G' -> rof* S R G' -> type.
rfile_subsume*_nil : rfile_subsume* rof_nil subrtype_nil rof_nil.
rfile_subsume*_cons :
   rfile_subsume* (rof_cons Drof Dof Dsize) (subrtype_cons Drsub Dsub)
      (rof_cons Drof' (subsume Dsub Dof) Dsize)
      <- rfile_subsume* Drof Drsub Drof'.
rfile_subsume_all :
   rfile_subsume (rof_ Drof Dzof) (subrtype_all Dsub Dzsub)
      (rof_ Drof' (subsume Dzsub Dzof))
      <- rfile_subsume* Drof Dsub Drof'.
looked_up_reg_ok :
   Pi G:rtp. Pi REG:reg. Pi T':tp. rtlookup G REG T' -> regok REG -> type.
looked_up_reg_ok* :
   Pi M:nat. Pi G:rtp* M. Pi N:nat. Pi T':tp. rtlookup* G N T' -> lt N M -> type.
looked_up_reg_ok_z : looked_up_reg_ok* rtlookup_z lt_z.
looked_up_reg_ok_s :
   looked_up_reg_ok* (rtlookup_s D) (lt_s E) <- looked_up_reg_ok* D E.
looked_up_reg_ok_ :
   looked_up_reg_ok (rtlookup_ D) (regok_ E) <- looked_up_reg_ok* D E.
updated_reg_ok :
   Pi G1:rtp. Pi REG:reg. Pi T1:tp. Pi G2:rtp.
      rtupdate G1 REG T1 G2 -> regok REG -> type.
updated_reg_ok* :
   Pi M:nat. Pi G1:rtp* M. Pi N:nat. Pi T1:tp. Pi G2:rtp* M.
      rtupdate* G1 N T1 G2 -> lt N M -> type.
updated_reg_ok_z : updated_reg_ok* rtupdate_z lt_z.
updated_reg_ok_s :
   updated_reg_ok* (rtupdate_s D) (lt_s D') <- updated_reg_ok* D D'.
updated_reg_ok_ :
   updated_reg_ok (rtupdate_ D) (regok_ D') <- updated_reg_ok* D D'.
hsubtype : htp -> htp -> type.
hsubtype_refl : hsubtype S S.
hsubtype_trans : hsubtype S1 S3 <- hsubtype S1 S2 <- hsubtype S2 S3.
hsubtype_cons : hsubtype (htpcons L T' S1) (htpcons L T' S2) <- hsubtype S1 S2.
hsubtype_sub :
   hsubtype (htpcons L T1 S) (htpcons L T2 S) <- subtype T1 T2 <- segof L cseg.
hsubtype_extend : hsubtype (htpcons L T' S) S <- htpok (htpcons L T' S) L1.
htpcons_hsubtype :
   Pi L:loc. Pi T':tp. Pi S:htp. Pi L1:loc.
      htpok (htpcons L T' S) L1 -> hsubtype (htpcons L T' S) S -> type.
htpcons_hsubtype_ : htpcons_hsubtype Dhtpok (hsubtype_extend Dhtpok).
hsubtype_resp :
   Pi S1:htp. Pi S1':htp. Pi S2:htp. Pi S2':htp.
      htp_eq S1 S1' -> htp_eq S2 S2' -> hsubtype S1 S2 -> hsubtype S1' S2'
         -> type.
hsubtype_resp_ : hsubtype_resp htp_eq_ htp_eq_ D D.
can_strip : Pi S':htp. Pi S:htp. strip S S' -> type.
can_strip_nil : can_strip htpnil strip_nil.
can_strip_hseg :
   can_strip (htpcons (lc (s (s N1))) T1 S) (strip_hseg Dstrip segof_hseg)
      <- can_strip S Dstrip.
can_strip_cseg :
   can_strip (htpcons (lc 1') T1 S) (strip_cseg Dstrip segof_cseg)
      <- can_strip S Dstrip.
can_strip_bseg :
   can_strip (htpcons (lc 0') T1 S) (strip_bseg Dstrip segof_bseg)
      <- can_strip S Dstrip.
strip_fun :
   Pi S:htp. Pi S1:htp. Pi S2:htp.
      strip S S1 -> strip S S2 -> htp_eq S1 S2 -> type.
strip_fun_nil : strip_fun strip_nil strip_nil htp_eq_.
strip_fun_hseg :
   strip_fun (strip_hseg D1 X1) (strip_hseg D2 X2) D <- strip_fun D1 D2 D.
strip_fun_cseg :
   strip_fun (strip_cseg D1 X1) (strip_cseg D2 X2) D'
      <- strip_fun D1 D2 D
      <- htp_eq_cons tp_eq_ D D'.
strip_fun_bseg :
   strip_fun (strip_bseg D1 X1) (strip_bseg D2 X2) D <- strip_fun D1 D2 D.
strip_phtpok :
   Pi S:htp. Pi L:loc. Pi S':htp. htpok S L -> strip S S' -> htpok S' L -> type.
strip_phtpok* :
   Pi S:htp. Pi M:loc. Pi N:loc. Pi S':htp.
      htpok S M -> loc_leq M N -> strip S S' -> htpok S' N -> type.
strip_phtpok_nil : strip_phtpok* htpok_nil X1 strip_nil htpok_nil.
strip_phtpok_hseg :
   strip_phtpok* (htpok_cons Dhtpok X1 Dlt) Dleq (strip_hseg Dstrip X2) Dhtpok'
      <- loc_lt_implies_leq Dlt Dleq'
      <- loc_leq_trans Dleq' Dleq Dleq''
      <- strip_phtpok* Dhtpok Dleq'' Dstrip Dhtpok'.
strip_phtpok_cseg :
   strip_phtpok* (htpok_cons Dhtpok Dkof Dlt) Dleq (strip_cseg Dstrip X1)
      (htpok_cons Dhtpok' Dkof Dlt')
      <- loc_lt_leq_trans Dlt Dleq Dlt'
      <- loc_leq_reflex L1 Dleq'
      <- strip_phtpok* Dhtpok Dleq' Dstrip Dhtpok'.
strip_phtpok_bseg :
   strip_phtpok* (htpok_cons Dhtpok X1 Dlt) Dleq (strip_bseg Dstrip X2) Dhtpok'
      <- loc_lt_implies_leq Dlt Dleq'
      <- loc_leq_trans Dleq' Dleq Dleq''
      <- strip_phtpok* Dhtpok Dleq'' Dstrip Dhtpok'.
strip_phtpok_ :
   strip_phtpok Dhtpok Dstrip Dhtpok'
      <- leq_reflex N1 Dleq
      <- strip_phtpok* Dhtpok (loc_leq_ Dleq) Dstrip Dhtpok'.
strip_same_hsubtype :
   Pi S:htp. Pi S1:htp. Pi S2:htp.
      strip S S1 -> strip S S2 -> hsubtype S1 S2 -> type.
- :
   strip_same_hsubtype Dstrip1 Dstrip2 Dhsub
      <- strip_fun Dstrip1 Dstrip2 Deq
      <- hsubtype_resp htp_eq_ Deq hsubtype_refl Dhsub.
strip_preserves_hsubtype :
   Pi S1:htp. Pi S2:htp. Pi S1':htp. Pi S2':htp.
      hsubtype S1 S2 -> strip S1 S1' -> strip S2 S2' -> hsubtype S1' S2' -> type.
-trans :
   strip_preserves_hsubtype (hsubtype_trans Dhsub23 Dhsub12) Dstrip1 Dstrip3
      (hsubtype_trans Dhsub23' Dhsub12')
      <- can_strip S1 Dstrip2
      <- strip_preserves_hsubtype Dhsub12 Dstrip1 Dstrip2 Dhsub12'
      <- strip_preserves_hsubtype Dhsub23 Dstrip2 Dstrip3 Dhsub23'.
-refl-n :
   strip_preserves_hsubtype hsubtype_refl strip_nil strip_nil hsubtype_refl.
-refl-h :
   strip_preserves_hsubtype hsubtype_refl (strip_hseg Dstrip1 segof_hseg)
      (strip_hseg Dstrip2 segof_hseg) Dhsub
      <- strip_same_hsubtype Dstrip1 Dstrip2 Dhsub.
-refl-b :
   strip_preserves_hsubtype hsubtype_refl (strip_bseg Dstrip1 segof_bseg)
      (strip_bseg Dstrip2 segof_bseg) Dhsub
      <- strip_same_hsubtype Dstrip1 Dstrip2 Dhsub.
-refl-c :
   strip_preserves_hsubtype hsubtype_refl (strip_cseg Dstrip1 segof_cseg)
      (strip_cseg Dstrip2 segof_cseg) (hsubtype_cons Dhsub)
      <- strip_same_hsubtype Dstrip1 Dstrip2 Dhsub.
-cons-h :
   strip_preserves_hsubtype (hsubtype_cons Dhsub)
      (strip_hseg Dstrip1 segof_hseg) (strip_hseg Dstrip2 segof_hseg) Dhsub'
      <- strip_preserves_hsubtype Dhsub Dstrip1 Dstrip2 Dhsub'.
-cons-b :
   strip_preserves_hsubtype (hsubtype_cons Dhsub)
      (strip_bseg Dstrip1 segof_bseg) (strip_bseg Dstrip2 segof_bseg) Dhsub'
      <- strip_preserves_hsubtype Dhsub Dstrip1 Dstrip2 Dhsub'.
-cons-c :
   strip_preserves_hsubtype (hsubtype_cons Dhsub)
      (strip_cseg Dstrip1 segof_cseg) (strip_cseg Dstrip2 segof_cseg)
      (hsubtype_cons Dhsub')
      <- strip_preserves_hsubtype Dhsub Dstrip1 Dstrip2 Dhsub'.
-ub :
   strip_preserves_hsubtype (hsubtype_sub segof_cseg Dsub)
      (strip_cseg Dstrip1 segof_cseg) (strip_cseg Dstrip2 segof_cseg)
      (hsubtype_trans (hsubtype_cons Dhsub) (hsubtype_sub segof_cseg Dsub))
      <- strip_same_hsubtype Dstrip1 Dstrip2 Dhsub.
-ext-h :
   strip_preserves_hsubtype (hsubtype_extend X1) (strip_hseg Dstrip1 X2) Dstrip2
      Dhsub
      <- strip_same_hsubtype Dstrip1 Dstrip2 Dhsub.
-ext-b :
   strip_preserves_hsubtype (hsubtype_extend X1) (strip_bseg Dstrip1 X2) Dstrip2
      Dhsub
      <- strip_same_hsubtype Dstrip1 Dstrip2 Dhsub.
-ext-c :
   strip_preserves_hsubtype (hsubtype_extend (htpok_cons Dhtpok* Dkof Dlt))
      (strip_cseg Dstrip1 X1) Dstrip2 Dhsub
      <- leq_reflex N1 Dleq
      <- strip_phtpok* Dhtpok* (loc_leq_ Dleq) Dstrip1 Dhtpok*'
      <- strip_fun Dstrip1 Dstrip2 Deq
      <- hsubtype_resp htp_eq_ Deq
            (hsubtype_extend (htpok_cons Dhtpok*' Dkof Dlt)) Dhsub.
strip_hsubtype :
   Pi S:htp. Pi L1:loc. Pi S':htp.
      htpok S L1 -> strip S S' -> hsubtype S S' -> type.
-nil : strip_hsubtype X1 strip_nil hsubtype_refl.
-hseg :
   strip_hsubtype (htpok_cons Dhtpok Dkof Dlt) (strip_hseg Dstrip X1)
      (hsubtype_trans Dhsub (hsubtype_extend (htpok_cons Dhtpok Dkof Dlt)))
      <- strip_hsubtype Dhtpok Dstrip Dhsub.
-bseg :
   strip_hsubtype (htpok_cons Dhtpok Dkof Dlt) (strip_bseg Dstrip X1)
      (hsubtype_trans Dhsub (hsubtype_extend (htpok_cons Dhtpok Dkof Dlt)))
      <- strip_hsubtype Dhtpok Dstrip Dhsub.
-cseg :
   strip_hsubtype (htpok_cons Dhtpok X1 X2) (strip_cseg Dstrip X3)
      (hsubtype_cons Dhsub)
      <- strip_hsubtype Dhtpok Dstrip Dhsub.
strip_idem : Pi S:htp. Pi S':htp. strip S S' -> strip S' S' -> type.
strip_idem_nil : strip_idem strip_nil strip_nil.
strip_idem_hseg : strip_idem (strip_hseg D X1) D' <- strip_idem D D'.
strip_idem_bseg : strip_idem (strip_bseg D X1) D' <- strip_idem D D'.
strip_idem_cseg :
   strip_idem (strip_cseg D Dseg) (strip_cseg D' Dseg) <- strip_idem D D'.
strip_pt_oof :
   Pi S:htp. Pi S':htp. Pi G:rtp. Pi O:operand. Pi T':tp.
      strip S S' -> oof S G O T' -> oof S' G O T' -> type.
-im :
   strip_pt_oof Dstrip (oof_im Dof Dstrip') (oof_im Dof' Dstrip'')
      <- strip_fun Dstrip' Dstrip Deq
      <- of_resp Deq val_eq_ Dof Dof'
      <- strip_idem Dstrip Dstrip''.
-rco : strip_pt_oof X1 (oof_rco D) (oof_rco D).
-mco :
   strip_pt_oof Ds (oof_mco D1 D2 D) (oof_mco D1 D2 D') <- strip_pt_oof Ds D D'.
-imco :
   strip_pt_oof Ds (oof_imco D1 D2 Doof2 Doof1) (oof_imco D1 D2 Doof2' Doof1')
      <- strip_pt_oof Ds Doof1 Doof1'
      <- strip_pt_oof Ds Doof2 Doof2'.
-imco_a :
   strip_pt_oof Ds (oof_imco_array D1 D2 D3 Doof2 Doof1)
      (oof_imco_array D1 D2 D3 Doof2' Doof1')
      <- strip_pt_oof Ds Doof1 Doof1'
      <- strip_pt_oof Ds Doof2 Doof2'.
-co :
   strip_pt_oof Ds (oof_zco D1 D2 D3 D4 D5 D) (oof_zco D1 D2 D3 D4 D5 D')
      <- strip_pt_oof Ds D D'.
-pco : strip_pt_oof X1 (oof_spco D) (oof_spco D).
-comb :
   strip_pt_oof Ds (oof_combine D1 D2) (oof_combine D1' D2')
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'.
-proj :
   strip_pt_oof Ds (oof_proj D1 D2 D3) (oof_proj D1 D2 D3')
      <- strip_pt_oof Ds D3 D3'.
-ub :
   strip_pt_oof Ds (oof_subsume Dsub D) (oof_subsume Dsub D')
      <- strip_pt_oof Ds D D'.
-rsub :
   strip_pt_oof Ds (oof_rsubsume Dsub D) (oof_rsubsume Dsub D')
      <- strip_pt_oof Ds D D'.
strip_pt_update :
   Pi S:htp. Pi S':htp. Pi G:rtp. Pi E:dest. Pi T':tp. Pi G':rtp.
      strip S S' -> update S G E T' G' -> update S' G E T' G' -> type.
-rdest : strip_pt_update X1 (update_rdest D1 D2) (update_rdest D1 D2).
-mdest :
   strip_pt_update Dc (update_mdest D1 D2 D) (update_mdest D1 D2 D')
      <- strip_pt_oof Dc D D'.
-imdest :
   strip_pt_update Dc (update_imdest D1 D2 Doof2 Doof1)
      (update_imdest D1 D2 Doof2' Doof1')
      <- strip_pt_oof Dc Doof1 Doof1'
      <- strip_pt_oof Dc Doof2 Doof2'.
-imdsta :
   strip_pt_update Dc (update_imdest_array D1 D2 D3 Doof2 Doof1)
      (update_imdest_array D1 D2 D3 Doof2' Doof1')
      <- strip_pt_oof Dc Doof1 Doof1'
      <- strip_pt_oof Dc Doof2 Doof2'.
-dest :
   strip_pt_update Dc (update_zdest D1 D2 D3 D4 D5 D6 D7 Doof D10)
      (update_zdest D1 D2 D3 D4 D5 D6 D7 Doof' D10)
      <- strip_pt_oof Dc Doof Doof'.
-dest2 :
   strip_pt_update Dc (update_zdest2 D2 D3 D4 D5 D6 D7 Doof D10)
      (update_zdest2 D2 D3 D4 D5 D6 D7 Doof' D10)
      <- strip_pt_oof Dc Doof Doof'.
-pdest :
   strip_pt_update X1 (update_spdest D1 D2 D3 D4 D5)
      (update_spdest D1 D2 D3 D4 D5).
-comb :
   strip_pt_update Dc (update_combdest D1 D2 D3) (update_combdest D1' D2' D3)
      <- strip_pt_update Dc D1 D1'
      <- strip_pt_update Dc D2 D2'.
-proj :
   strip_pt_update Dc (update_projdest D1 D2 D3 D4 D5)
      (update_projdest D1' D2 D3 D4 D5')
      <- strip_pt_update Dc D1 D1'
      <- strip_pt_oof Dc D5 D5'.
-ub :
   strip_pt_update Dc (update_subsume D Dupdate) (update_subsume D Dupdate')
      <- strip_pt_update Dc Dupdate Dupdate'.
-rsub :
   strip_pt_update Dc (update_rsubsume D Dupdate) (update_rsubsume D Dupdate')
      <- strip_pt_update Dc Dupdate Dupdate'.
strip_pt_codeok :
   Pi S:htp. Pi S':htp. Pi G:rtp. Pi I:instseq.
      strip S S' -> codeok S G I -> codeok S' G I -> type.
strip_pt_initok :
   Pi S:htp. Pi S':htp. Pi G:rtp. Pi REG:reg. Pi T':tp. Pi I:instseq.
      strip S S' -> initok S G REG T' I -> initok S' G REG T' I -> type.
-add :
   strip_pt_codeok Ds (ok_add Dcodeok D D2 D1 Da)
      (ok_add Dcodeok' D' D2' D1' Da)
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-addptr :
   strip_pt_codeok Ds (ok_addptr Dcodeok D Da D2 D1)
      (ok_addptr Dcodeok' D' Da D2' D1')
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-addmptr :
   strip_pt_codeok Ds (ok_addmptr Dcodeok D Da D2 D1)
      (ok_addmptr Dcodeok' D' Da D2' D1')
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-addsptr :
   strip_pt_codeok Ds (ok_addsptr D5 D4 D2 D1) (ok_addsptr D5' D4' D2 D1')
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_update Ds D4 D4'
      <- strip_pt_codeok Ds D5 D5'.
-and :
   strip_pt_codeok Ds (ok_and Dcodeok D D2 D1 Da)
      (ok_and Dcodeok' D' D2' D1' Da)
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-bz :
   strip_pt_codeok Ds (ok_bz Dcodeok D2 D1) (ok_bz Dcodeok' D2' D1')
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-call :
   strip_pt_codeok Ds (ok_call Doof D1 D2 D3 Dcodeok)
      (ok_call Doof' D1 D2 D3 Dcodeok')
      <- strip_pt_oof Ds Doof Doof'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-cmp :
   strip_pt_codeok Ds (ok_cmp Dcodeok D2 D1 Da) (ok_cmp Dcodeok' D2' D1' Da)
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-cmpjcc :
   strip_pt_codeok Ds
      (ok_cmpjcc Dcodeok Doof3 D1 D2 D3 Doof12 Doof11 D4 D5 D6 Doofreg Doof2
          Doof1 Da)
      (ok_cmpjcc Dcodeok' Doof3' D1 D2 D3 Doof12' Doof11' D4 D5 D6 Doofreg'
          Doof2' Doof1' Da)
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_oof Ds Doof1 Doof1'
      <- strip_pt_oof Ds Doof2 Doof2'
      <- strip_pt_oof Ds Doofreg Doofreg'
      <- strip_pt_oof Ds Doof11 Doof11'
      <- strip_pt_oof Ds Doof12 Doof12'
      <- strip_pt_oof Ds Doof3 Doof3'.
-cmpjcc2 :
   strip_pt_codeok Ds (ok_cmpjcc2 Dcodeok Doof3 D1 D2 D3 Doof2 Doof1 Deq)
      (ok_cmpjcc2 Dcodeok' Doof3' D1 D2 D3 Doof2' Doof1' Deq)
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_oof Ds Doof1 Doof1'
      <- strip_pt_oof Ds Doof2 Doof2'
      <- strip_pt_oof Ds Doof3 Doof3'.
-fload :
   strip_pt_codeok Ds (ok_fload Dcodeok Doof) (ok_fload Dcodeok' Doof')
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_oof Ds Doof Doof'.
-fnop :
   strip_pt_codeok Ds (ok_fnop Dcodeok) (ok_fnop Dcodeok')
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-fstore :
   strip_pt_codeok Ds (ok_fstore Dcodeok Dupd Dexp)
      (ok_fstore Dcodeok' Dupd' Dexp)
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_update Ds Dupd Dupd'.
-fstflags :
   strip_pt_codeok Ds (ok_fstflags Dcodeok) (ok_fstflags Dcodeok')
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-halt : strip_pt_codeok X1 (ok_halt D1 D2) (ok_halt D1 D2).
-jal :
   strip_pt_codeok Ds (ok_jal Doof Dupd D Dcodeok)
      (ok_jal Doof' Dupd' D Dcodeok')
      <- strip_pt_update Ds Dupd Dupd'
      <- strip_pt_oof Ds Doof Doof'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-jbox :
   strip_pt_codeok Ds (ok_jbox Dcodeok Doof2 D1 D2 D3 D4 Doof1)
      (ok_jbox Dcodeok' Doof2' D1 D2 D3 D4 Doof1')
      <- strip_pt_oof Ds Doof1 Doof1'
      <- strip_pt_oof Ds Doof2 Doof2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-jcc :
   strip_pt_codeok Ds (ok_jcc Dcodeok Doof) (ok_jcc Dcodeok' Doof')
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_oof Ds Doof Doof'.
-jmp : strip_pt_codeok Ds (ok_jmp D) (ok_jmp D') <- strip_pt_oof Ds D D'.
-jnbox :
   strip_pt_codeok Ds (ok_jnbox Dcodeok Doof2 D1 D2 D3 D4 Doof1)
      (ok_jnbox Dcodeok' Doof2' D1 D2 D3 D4 Doof1')
      <- strip_pt_oof Ds Doof1 Doof1'
      <- strip_pt_oof Ds Doof2 Doof2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-malloc :
   strip_pt_codeok Ds (ok_malloc Dinitok Dupd Dte Dlt Drep Doof Doofgot)
      (ok_malloc Dinitok' Dupd Dte Dlt Drep Doof' Doofgot')
      <- strip_pt_oof Ds Doofgot Doofgot'
      <- strip_pt_oof Ds Doof Doof'
      <- strip_pt_initok Ds Dinitok Dinitok'.
-mallocarr :
   strip_pt_codeok Ds (ok_mallocarr Dcodeok D1 D2 D3 Doof2 Doof1 Doofgot)
      (ok_mallocarr Dcodeok' D1 D2 D3 Doof2' Doof1' Doofgot')
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_oof Ds Doof1 Doof1'
      <- strip_pt_oof Ds Doof2 Doof2'
      <- strip_pt_oof Ds Doofgot Doofgot'.
-mov :
   strip_pt_codeok Ds (ok_mov Dcodeok Dupd Doof) (ok_mov Dcodeok' Dupd' Doof')
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_update Ds Dupd Dupd'
      <- strip_pt_oof Ds Doof Doof'.
-movsx :
   strip_pt_codeok Ds (ok_movsx Dcodeok Dupd Doof Da)
      (ok_movsx Dcodeok' Dupd' Doof' Da)
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_update Ds Dupd Dupd'
      <- strip_pt_oof Ds Doof Doof'.
-movzx :
   strip_pt_codeok Ds (ok_movzx Dcodeok Dupd Doof Da)
      (ok_movzx Dcodeok' Dupd' Doof' Da)
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_update Ds Dupd Dupd'
      <- strip_pt_oof Ds Doof Doof'.
-nop :
   strip_pt_codeok Ds (ok_nop Dcodeok) (ok_nop Dcodeok')
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-or :
   strip_pt_codeok Ds (ok_or Dcodeok D D2 D1 Da) (ok_or Dcodeok' D' D2' D1' Da)
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-pop :
   strip_pt_codeok Ds (ok_pop Dcodeok Dupdate D1 D2 D3 D4)
      (ok_pop Dcodeok' Dupdate' D1 D2 D3 D4)
      <- strip_pt_codeok Ds Dcodeok Dcodeok'
      <- strip_pt_update Ds Dupdate Dupdate'.
-push :
   strip_pt_codeok Ds (ok_push Dcodeok D1 D2 D3 Doof)
      (ok_push Dcodeok' D1 D2 D3 Doof')
      <- strip_pt_oof Ds Doof Doof'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-pushrel :
   strip_pt_codeok Ds (ok_pushrel Dcodeok D1 D2 D3 Doof)
      (ok_pushrel Dcodeok' D1 D2 D3 Doof')
      <- strip_pt_oof Ds Doof Doof'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-ret : strip_pt_codeok Ds (ok_ret D1 D2 D3 D4) (ok_ret D1 D2 D3 D4).
-rcl :
   strip_pt_codeok Ds (ok_rcl Dcodeok D1 D2 D3 D4)
      (ok_rcl Dcodeok' D1' D2' D3' D4)
      <- strip_pt_oof Ds D3 D3'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_update Ds D1 D1'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-rcr :
   strip_pt_codeok Ds (ok_rcr Dcodeok D1 D2 D3 D4)
      (ok_rcr Dcodeok' D1' D2' D3' D4)
      <- strip_pt_oof Ds D3 D3'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_update Ds D1 D1'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-rol :
   strip_pt_codeok Ds (ok_rol Dcodeok D1 D2 D3 D4)
      (ok_rol Dcodeok' D1' D2' D3' D4)
      <- strip_pt_oof Ds D3 D3'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_update Ds D1 D1'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-ror :
   strip_pt_codeok Ds (ok_ror Dcodeok D1 D2 D3 D4)
      (ok_ror Dcodeok' D1' D2' D3' D4)
      <- strip_pt_oof Ds D3 D3'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_update Ds D1 D1'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-alloc :
   strip_pt_codeok Ds (ok_salloc Dcodeok D1 D2 D3) (ok_salloc Dcodeok' D1 D2 D3)
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-free :
   strip_pt_codeok Ds (ok_sfree Dcodeok D1 D2 D3 D4)
      (ok_sfree Dcodeok' D1 D2 D3 D4)
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-hl :
   strip_pt_codeok Ds (ok_shl Dcodeok D1 D2 D3 D4)
      (ok_shl Dcodeok' D1' D2' D3' D4)
      <- strip_pt_oof Ds D3 D3'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_update Ds D1 D1'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-ar :
   strip_pt_codeok Ds (ok_sar Dcodeok D1 D2 D3 D4)
      (ok_sar Dcodeok' D1' D2' D3' D4)
      <- strip_pt_oof Ds D3 D3'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_update Ds D1 D1'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-hr :
   strip_pt_codeok Ds (ok_shr Dcodeok D1 D2 D3 D4)
      (ok_shr Dcodeok' D1' D2' D3' D4)
      <- strip_pt_oof Ds D3 D3'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_update Ds D1 D1'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-ub :
   strip_pt_codeok Ds (ok_sub Dcodeok D D2 D1 Da)
      (ok_sub Dcodeok' D' D2' D1' Da)
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-ubptr :
   strip_pt_codeok Ds (ok_subptr Dcodeok D Da D2 D1)
      (ok_subptr Dcodeok' D' Da D2' D1')
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-ubmptr :
   strip_pt_codeok Ds (ok_submptr Dcodeok D Da D2 D1)
      (ok_submptr Dcodeok' D' Da D2' D1')
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-xor :
   strip_pt_codeok Ds (ok_xor Dcodeok D D2 D1 Da)
      (ok_xor Dcodeok' D' D2' D1' Da)
      <- strip_pt_update Ds D D'
      <- strip_pt_oof Ds D1 D1'
      <- strip_pt_oof Ds D2 D2'
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-coerce :
   strip_pt_codeok Ds (ok_coerce Dsub Dcodeok) (ok_coerce Dsub Dcodeok')
      <- strip_pt_codeok Ds Dcodeok Dcodeok'.
-unpack :
   strip_pt_codeok Ds
      (ok_unpack (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dcodeok t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D1 t x x1) D2)
      (ok_unpack (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dcodeok' t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D1 t x x1) D2)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             strip_pt_codeok Ds (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-assert :
   strip_pt_codeok Ds (ok_assert (\x:tr P1. Dcodeok x) Doof)
      (ok_assert (\x:tr P1. Dcodeok' x) Doof')
      <- strip_pt_oof Ds Doof Doof'
      <- (Pi d:tr P1. strip_pt_codeok Ds (Dcodeok d) (Dcodeok' d)).
-vcase1 :
   strip_pt_codeok Ds
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T1 (in1 t K2). Dcodeok t x x1)
          Doof)
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T1 (in1 t K2). Dcodeok' t x x1)
          Doof')
      <- strip_pt_oof Ds Doof Doof'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:equiv T1 (in1 t K2).
             strip_pt_codeok Ds (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-vcase2 :
   strip_pt_codeok Ds
      (ok_vcase2 (\t:tp. \x:kof t K1. \x1:equiv T1 (in2 t K2). Dcodeok t x x1)
          Doof)
      (ok_vcase2 (\t:tp. \x:kof t K1. \x1:equiv T1 (in2 t K2). Dcodeok' t x x1)
          Doof')
      <- strip_pt_oof Ds Doof Doof'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:equiv T1 (in2 t K2).
             strip_pt_codeok Ds (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-vacuous :
   strip_pt_codeok Ds (ok_vacuous Doof) (ok_vacuous Doof')
      <- strip_pt_oof Ds Doof Doof'.
-letpair :
   strip_pt_codeok Ds
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T1 (pair t1 t2). D2 t1 x t2 x1 x2) D1)
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T1 (pair t1 t2). D2' t1 x t2 x1 x2) D1)
      <- (Pi t1:tp. Pi d1:kof t1 K1. Pi t2:tp. Pi d2:kof t2 K2.
             Pi d:equiv T1 (pair t1 t2).
             strip_pt_codeok Ds (D2 t1 d1 t2 d2 d) (D2' t1 d1 t2 d2 d)).
-letroll :
   strip_pt_codeok Ds
      (ok_letroll
          (\t:tp. \x:kof t (K1 (krec (\k:kind. K1 k))).
              \x1:equiv T1 (roll (\k:kind. K1 k) t). D2 t x x1) D1)
      (ok_letroll
          (\t:tp. \x:kof t (K1 (krec (\k:kind. K1 k))).
              \x1:equiv T1 (roll (\k:kind. K1 k) t). D2' t x x1) D1)
      <- (Pi t:tp. Pi d1:kof t (K1 (krec (\k:kind. K1 k))).
             Pi d2:equiv T1 (roll (\k:kind. K1 k) t).
             strip_pt_codeok Ds (D2 t d1 d2) (D2' t d1 d2)).
-init-mov :
   strip_pt_initok Dh (ok_init_mov Dinitok Dkof3 Doof Dkof2 Dkof1 Dsub)
      (ok_init_mov Dinitok' Dkof3 Doof' Dkof2 Dkof1 Dsub)
      <- strip_pt_initok Dh Dinitok Dinitok'
      <- strip_pt_oof Dh Doof Doof'.
-init-pop :
   strip_pt_initok Dh
      (ok_init_pop Dinitok Dztupdate Dkof2' Dzsub Dztlookup Dkof2 Dkof1 Dsub)
      (ok_init_pop Dinitok' Dztupdate Dkof2' Dzsub Dztlookup Dkof2 Dkof1 Dsub)
      <- strip_pt_initok Dh Dinitok Dinitok'.
-init-coerce :
   strip_pt_initok Dh (ok_init_coerce Dinitok Dsub)
      (ok_init_coerce Dinitok' Dsub)
      <- strip_pt_initok Dh Dinitok Dinitok'.
-init-done :
   strip_pt_initok Dh (ok_init_done Dcodeok D) (ok_init_done Dcodeok' D)
      <- strip_pt_codeok Dh Dcodeok Dcodeok'.
hweaken_htlookup_hseg :
   Pi S1:htp. Pi S2:htp. Pi L:loc. Pi T':tp.
      hsubtype S1 S2 -> htlookup S2 L T' -> segof L hseg -> htlookup S1 L T'
         -> type.
-refl : hweaken_htlookup_hseg hsubtype_refl D X1 D.
-trans :
   hweaken_htlookup_hseg (hsubtype_trans Dhsub23 Dhsub12) Dlook3 Dsegof Dlook1
      <- hweaken_htlookup_hseg Dhsub23 Dlook3 Dsegof Dlook2
      <- hweaken_htlookup_hseg Dhsub12 Dlook2 Dsegof Dlook1.
-h-c : hweaken_htlookup_hseg (hsubtype_cons X1) htlookup_hit X2 htlookup_hit.
hweaken_htlookup_hseg_hit_sub| :
   Pi L:loc.
      segof L cseg -> segof L hseg
         -> Pi S:htp. Pi L1:loc. Pi T':tp. htlookup S L1 T' -> type.
-h-s :
   hweaken_htlookup_hseg (hsubtype_sub Dseg X1) htlookup_hit Dseg' D
      <- hweaken_htlookup_hseg_hit_sub| Dseg Dseg' (htpcons L1 T1 S1) L1 T2 D.
-h-e :
   hweaken_htlookup_hseg
      (hsubtype_extend (htpok_cons (htpok_cons X1 X2 Dlt) X3 X4)) htlookup_hit
      Dseg (htlookup_miss htlookup_hit Dlt).
-m-c :
   hweaken_htlookup_hseg (hsubtype_cons Dhsub) (htlookup_miss Dlook Dlt) Dseg
      (htlookup_miss Dlook' Dlt)
      <- hweaken_htlookup_hseg Dhsub Dlook Dseg Dlook'.
-m-s :
   hweaken_htlookup_hseg (hsubtype_sub X1 X2) (htlookup_miss Dlook Dlt) Dseg
      (htlookup_miss Dlook Dlt).
-m-e :
   hweaken_htlookup_hseg
      (hsubtype_extend (htpok_cons (htpok_cons X1 X2 Dlt) X3 X4))
      (htlookup_miss Dlook Dlt') Dseg
      (htlookup_miss (htlookup_miss Dlook Dlt') Dlt'')
      <- loc_lt_trans Dlt' Dlt Dlt''.
hweaken_htlookup_cseg :
   Pi S1:htp. Pi S2:htp. Pi L:loc. Pi T':tp. Pi T':tp.
      hsubtype S1 S2 -> htlookup S2 L T' -> htlookup S1 L T' -> subtype T' T'
         -> type.
-refl : hweaken_htlookup_cseg hsubtype_refl D D reflex.
-trans :
   hweaken_htlookup_cseg (hsubtype_trans Dhsub23 Dhsub12) Dlook3 Dlook1
      (trans Dsub23 Dsub12)
      <- hweaken_htlookup_cseg Dhsub23 Dlook3 Dlook2 Dsub23
      <- hweaken_htlookup_cseg Dhsub12 Dlook2 Dlook1 Dsub12.
-h-c :
   hweaken_htlookup_cseg (hsubtype_cons X1) htlookup_hit htlookup_hit reflex.
-h-s :
   hweaken_htlookup_cseg (hsubtype_sub X1 Dsub) htlookup_hit htlookup_hit Dsub.
-h-e :
   hweaken_htlookup_cseg
      (hsubtype_extend (htpok_cons (htpok_cons X1 X2 Dlt) X3 X4)) htlookup_hit
      (htlookup_miss htlookup_hit Dlt) reflex.
-m-c :
   hweaken_htlookup_cseg (hsubtype_cons Dhsub) (htlookup_miss Dlook Dlt)
      (htlookup_miss Dlook' Dlt) Dsub
      <- hweaken_htlookup_cseg Dhsub Dlook Dlook' Dsub.
-m-s :
   hweaken_htlookup_cseg (hsubtype_sub X1 X2) (htlookup_miss Dlook Dlt)
      (htlookup_miss Dlook Dlt) reflex.
-m-e :
   hweaken_htlookup_cseg
      (hsubtype_extend (htpok_cons (htpok_cons X1 X2 Dlt) X3 X4))
      (htlookup_miss Dlook Dlt')
      (htlookup_miss (htlookup_miss Dlook Dlt') Dlt'') reflex
      <- loc_lt_trans Dlt' Dlt Dlt''.
hweaken_aof :
   Pi S':htp. Pi S:htp. Pi A:aval. Pi T':tp.
      hsubtype S' S -> aof S A T' -> aof S' A T' -> type.
hweaken_of :
   Pi S':htp. Pi S:htp. Pi V:val. Pi T':tp.
      hsubtype S' S -> of S V T' -> of S' V T' -> type.
hweaken_oof :
   Pi S':htp. Pi S:htp. Pi G:rtp. Pi O:operand. Pi T':tp.
      hsubtype S' S -> oof S G O T' -> oof S' G O T' -> type.
hweaken_update :
   Pi S':htp. Pi S:htp. Pi G:rtp. Pi E:dest. Pi T':tp. Pi G':rtp.
      hsubtype S' S -> update S G E T' G' -> update S' G E T' G' -> type.
hweaken_codeok :
   Pi S':htp. Pi S:htp. Pi G:rtp. Pi I:instseq.
      hsubtype S' S -> codeok S G I -> codeok S' G I -> type.
hweaken_initok :
   Pi S':htp. Pi S:htp. Pi G:rtp. Pi REG:reg. Pi T':tp. Pi I:instseq.
      hsubtype S' S -> initok S G REG T' I -> initok S' G REG T' I -> type.
-lit : hweaken_aof X1 aof_lit aof_lit.
-hptr :
   hweaken_aof Dh (aof_chpointer Dsub Dbsub Dseg Dlook)
      (aof_chpointer Dsub Dbsub Dseg Dlook')
      <- hweaken_htlookup_hseg Dh Dlook Dseg Dlook'.
-ptr :
   hweaken_aof Dh (aof_cpointer Dbsub Dlook)
      (aof_cpointer (boxsub_transl Dsub Dbsub) Dlook')
      <- hweaken_htlookup_cseg Dh Dlook Dlook' Dsub.
-fun :
   hweaken_aof Dh (aof_function Dsub Drtpok Dkof Dseg Dlook)
      (aof_function (trans Dsub Dsub') Drtpok Dkof Dseg Dlook')
      <- hweaken_htlookup_cseg Dh Dlook Dlook' Dsub'.
-gotptr : hweaken_aof Dh aof_gotpointer aof_gotpointer.
-atom :
   hweaken_of Dh (of_atom Daof D) (of_atom Daof' D) <- hweaken_aof Dh Daof Daof'.
-ptr : hweaken_of Dh (of_spointer D1 D2 D3) (of_spointer D1 D2 D3).
-code :
   hweaken_of Dh (of_code Dcodeok D1 D2) (of_code Dcodeok' D1 D2)
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-append :
   hweaken_of Dh (of_append D2 D1 D) (of_append D2' D1' D)
      <- hweaken_of Dh D1 D1'
      <- hweaken_of Dh D2 D2'.
-eteq : hweaken_of X1 (of_seteq Dbi Dp) (of_seteq Dbi Dp).
-ns : hweaken_of X1 of_ns of_ns.
-null : hweaken_of X1 of_null of_null.
-all :
   hweaken_of Dh
      (forall_intro (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1) D1)
      (forall_intro (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D' t x x1) D1)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             hweaken_of Dh (D t d1 d2) (D' t d1 d2)).
-guard :
   hweaken_of Dh (guard_intro (\x:tr P1. D x) D1)
      (guard_intro (\x:tr P1. D' x) D1)
      <- (Pi d:tr P1. tr_reg d D1 -> hweaken_of Dh (D d) (D' d)).
-meet :
   hweaken_of Dh (meet_intro_val D2 D1) (meet_intro_val D2' D1')
      <- hweaken_of Dh D1 D1'
      <- hweaken_of Dh D2 D2'.
-ub : hweaken_of Dh (subsume Dsub D) (subsume Dsub D') <- hweaken_of Dh D D'.
-ns : hweaken_of X1 (of_big_ns D1 D2) (of_big_ns D1 D2).
-top : hweaken_of X1 of_top of_top.
-zctra :
   hweaken_of X1 (of_size_contra D1 D2 D3 D4 D5) (of_size_contra D1 D2 D3 D4 D5).
-im :
   hweaken_oof Dh (oof_im Dof Dstrip) (oof_im Dof' Dstrip')
      <- can_strip S3 Dstrip'
      <- strip_preserves_hsubtype Dh Dstrip' Dstrip Dh'
      <- hweaken_of Dh' Dof Dof'.
-rco : hweaken_oof X1 (oof_rco D) (oof_rco D).
-mco :
   hweaken_oof Dh (oof_mco D1 D2 D) (oof_mco D1 D2 D') <- hweaken_oof Dh D D'.
-imco :
   hweaken_oof Dh (oof_imco D1 D2 Doof2 Doof1) (oof_imco D1 D2 Doof2' Doof1')
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'.
-imco_a :
   hweaken_oof Dh (oof_imco_array D1 D2 D3 Doof2 Doof1)
      (oof_imco_array D1 D2 D3 Doof2' Doof1')
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'.
-co :
   hweaken_oof Dh (oof_zco D1 D2 D3 D4 D5 D) (oof_zco D1 D2 D3 D4 D5 D')
      <- hweaken_oof Dh D D'.
-pco : hweaken_oof X1 (oof_spco D) (oof_spco D).
-comb :
   hweaken_oof Ds (oof_combine D1 D2) (oof_combine D1' D2')
      <- hweaken_oof Ds D1 D1'
      <- hweaken_oof Ds D2 D2'.
-proj :
   hweaken_oof Ds (oof_proj D1 D2 D3) (oof_proj D1 D2 D3')
      <- hweaken_oof Ds D3 D3'.
-ub :
   hweaken_oof Dh (oof_subsume Dsub D) (oof_subsume Dsub D')
      <- hweaken_oof Dh D D'.
-rsub :
   hweaken_oof Dh (oof_rsubsume Dsub D) (oof_rsubsume Dsub D')
      <- hweaken_oof Dh D D'.
-rdest : hweaken_update X1 (update_rdest D1 D2) (update_rdest D1 D2).
-mdest :
   hweaken_update Dh (update_mdest D1 D2 D) (update_mdest D1 D2 D')
      <- hweaken_oof Dh D D'.
-imdest :
   hweaken_update Dh (update_imdest D1 D2 Doof2 Doof1)
      (update_imdest D1 D2 Doof2' Doof1')
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'.
-imdsta :
   hweaken_update Dh (update_imdest_array D1 D2 D3 Doof2 Doof1)
      (update_imdest_array D1 D2 D3 Doof2' Doof1')
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'.
-dest :
   hweaken_update Dh (update_zdest D1 D2 D3 D4 D5 D6 D7 Doof D10)
      (update_zdest D1 D2 D3 D4 D5 D6 D7 Doof' D10)
      <- hweaken_oof Dh Doof Doof'.
-dest2 :
   hweaken_update Dh (update_zdest2 D2 D3 D4 D5 D6 D7 Doof D10)
      (update_zdest2 D2 D3 D4 D5 D6 D7 Doof' D10)
      <- hweaken_oof Dh Doof Doof'.
-pdest :
   hweaken_update X1 (update_spdest D1 D2 D3 D4 D5)
      (update_spdest D1 D2 D3 D4 D5).
-comb :
   hweaken_update Dc (update_combdest D1 D2 D3) (update_combdest D1' D2' D3)
      <- hweaken_update Dc D1 D1'
      <- hweaken_update Dc D2 D2'.
-proj :
   hweaken_update Dc (update_projdest D1 D2 D3 D4 D5)
      (update_projdest D1' D2 D3 D4 D5')
      <- hweaken_update Dc D1 D1'
      <- hweaken_oof Dc D5 D5'.
-ub :
   hweaken_update Dh (update_subsume D Dupdate) (update_subsume D Dupdate')
      <- hweaken_update Dh Dupdate Dupdate'.
-rsub :
   hweaken_update Dh (update_rsubsume D Dupdate) (update_rsubsume D Dupdate')
      <- hweaken_update Dh Dupdate Dupdate'.
-add :
   hweaken_codeok Dh (ok_add Dcodeok D D2 D1 Da) (ok_add Dcodeok' D' D2' D1' Da)
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-addptr :
   hweaken_codeok Dh (ok_addptr Dcodeok D Da D2 D1)
      (ok_addptr Dcodeok' D' Da D2' D1')
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-mptr :
   hweaken_codeok Dh (ok_addmptr Dcodeok D Da D2 D1)
      (ok_addmptr Dcodeok' D' Da D2' D1')
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-adsptr :
   hweaken_codeok Dh (ok_addsptr D5 D4 D2 D1) (ok_addsptr D5' D4' D2 D1')
      <- hweaken_oof Dh D1 D1'
      <- hweaken_update Dh D4 D4'
      <- hweaken_codeok Dh D5 D5'.
-and :
   hweaken_codeok Dh (ok_and Dcodeok D D2 D1 Da) (ok_and Dcodeok' D' D2' D1' Da)
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-bz :
   hweaken_codeok Dh (ok_bz Dcodeok D2 D1) (ok_bz Dcodeok' D2' D1')
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-call :
   hweaken_codeok Dh (ok_call Doof D1 D2 D3 Dcodeok)
      (ok_call Doof' D1 D2 D3 Dcodeok')
      <- hweaken_oof Dh Doof Doof'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-cmp :
   hweaken_codeok Dh (ok_cmp Dcodeok D2 D1 Da) (ok_cmp Dcodeok' D2' D1' Da)
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-cmpjcc :
   hweaken_codeok Dh
      (ok_cmpjcc Dcodeok Doof3 D1 D2 D3 Doof12 Doof11 D4 D5 D6 Doofreg Doof2
          Doof1 Da)
      (ok_cmpjcc Dcodeok' Doof3' D1 D2 D3 Doof12' Doof11' D4 D5 D6 Doofreg'
          Doof2' Doof1' Da)
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'
      <- hweaken_oof Dh Doofreg Doofreg'
      <- hweaken_oof Dh Doof11 Doof11'
      <- hweaken_oof Dh Doof12 Doof12'
      <- hweaken_oof Dh Doof3 Doof3'.
-cmpjc2 :
   hweaken_codeok Dh (ok_cmpjcc2 Dcodeok Doof3 D1 D2 D3 Doof2 Doof1 Deq)
      (ok_cmpjcc2 Dcodeok' Doof3' D1 D2 D3 Doof2' Doof1' Deq)
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'
      <- hweaken_oof Dh Doof3 Doof3'.
-fload :
   hweaken_codeok Dh (ok_fload Dcodeok Doof) (ok_fload Dcodeok' Doof')
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_oof Dh Doof Doof'.
-fnop :
   hweaken_codeok Dh (ok_fnop Dcodeok) (ok_fnop Dcodeok')
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-fstore :
   hweaken_codeok Dh (ok_fstore Dcodeok Dupd Dexp)
      (ok_fstore Dcodeok' Dupd' Dexp)
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_update Dh Dupd Dupd'.
-fstfl :
   hweaken_codeok Dh (ok_fstflags Dcodeok) (ok_fstflags Dcodeok')
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-halt : hweaken_codeok X1 (ok_halt D1 D2) (ok_halt D1 D2).
-jal :
   hweaken_codeok Dh (ok_jal Doof Dupd D Dcodeok)
      (ok_jal Doof' Dupd' D Dcodeok')
      <- hweaken_update Dh Dupd Dupd'
      <- hweaken_oof Dh Doof Doof'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-jbox :
   hweaken_codeok Dh (ok_jbox Dcodeok Doof2 D1 D2 D3 D4 Doof1)
      (ok_jbox Dcodeok' Doof2' D1 D2 D3 D4 Doof1')
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-jcc :
   hweaken_codeok Dh (ok_jcc Dcodeok Doof) (ok_jcc Dcodeok' Doof')
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_oof Dh Doof Doof'.
-jmp : hweaken_codeok Dh (ok_jmp D) (ok_jmp D') <- hweaken_oof Dh D D'.
-jnbox :
   hweaken_codeok Dh (ok_jnbox Dcodeok Doof2 D1 D2 D3 D4 Doof1)
      (ok_jnbox Dcodeok' Doof2' D1 D2 D3 D4 Doof1')
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-malloc :
   hweaken_codeok Dh (ok_malloc Dinitok Dupd Dte Dlt Drep Doof Doofgot)
      (ok_malloc Dinitok' Dupd Dte Dlt Drep Doof' Doofgot')
      <- hweaken_oof Dh Doofgot Doofgot'
      <- hweaken_oof Dh Doof Doof'
      <- hweaken_initok Dh Dinitok Dinitok'.
-mlcarr :
   hweaken_codeok Dh (ok_mallocarr Dcodeok D1 D2 D3 Doof2 Doof1 Doofgot)
      (ok_mallocarr Dcodeok' D1 D2 D3 Doof2' Doof1' Doofgot')
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_oof Dh Doof1 Doof1'
      <- hweaken_oof Dh Doof2 Doof2'
      <- hweaken_oof Dh Doofgot Doofgot'.
-mov :
   hweaken_codeok Dh (ok_mov Dcodeok Dupd Doof) (ok_mov Dcodeok' Dupd' Doof')
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_update Dh Dupd Dupd'
      <- hweaken_oof Dh Doof Doof'.
-movsx :
   hweaken_codeok Dh (ok_movsx Dcodeok Dupd Doof Da)
      (ok_movsx Dcodeok' Dupd' Doof' Da)
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_update Dh Dupd Dupd'
      <- hweaken_oof Dh Doof Doof'.
-movzx :
   hweaken_codeok Dh (ok_movzx Dcodeok Dupd Doof Da)
      (ok_movzx Dcodeok' Dupd' Doof' Da)
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_update Dh Dupd Dupd'
      <- hweaken_oof Dh Doof Doof'.
-or :
   hweaken_codeok Dh (ok_or Dcodeok D D2 D1 Da) (ok_or Dcodeok' D' D2' D1' Da)
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-nop :
   hweaken_codeok Dh (ok_nop Dcodeok) (ok_nop Dcodeok')
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-pop :
   hweaken_codeok Dh (ok_pop Dcodeok Dupdate D1 D2 D3 D4)
      (ok_pop Dcodeok' Dupdate' D1 D2 D3 D4)
      <- hweaken_codeok Dh Dcodeok Dcodeok'
      <- hweaken_update Dh Dupdate Dupdate'.
-push :
   hweaken_codeok Dh (ok_push Dcodeok D1 D2 D3 Doof)
      (ok_push Dcodeok' D1 D2 D3 Doof')
      <- hweaken_oof Dh Doof Doof'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-pshrel :
   hweaken_codeok Dh (ok_pushrel Dcodeok D1 D2 D3 Doof)
      (ok_pushrel Dcodeok' D1 D2 D3 Doof')
      <- hweaken_oof Dh Doof Doof'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-ret : hweaken_codeok Dh (ok_ret D1 D2 D3 D4) (ok_ret D1 D2 D3 D4).
-rcl :
   hweaken_codeok Dh (ok_rcl Dcodeok D1 D2 D3 D4)
      (ok_rcl Dcodeok' D1' D2' D3' D4)
      <- hweaken_oof Dh D3 D3'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_update Dh D1 D1'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-rcr :
   hweaken_codeok Dh (ok_rcr Dcodeok D1 D2 D3 D4)
      (ok_rcr Dcodeok' D1' D2' D3' D4)
      <- hweaken_oof Dh D3 D3'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_update Dh D1 D1'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-rol :
   hweaken_codeok Dh (ok_rol Dcodeok D1 D2 D3 D4)
      (ok_rol Dcodeok' D1' D2' D3' D4)
      <- hweaken_oof Dh D3 D3'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_update Dh D1 D1'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-ror :
   hweaken_codeok Dh (ok_ror Dcodeok D1 D2 D3 D4)
      (ok_ror Dcodeok' D1' D2' D3' D4)
      <- hweaken_oof Dh D3 D3'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_update Dh D1 D1'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-alloc :
   hweaken_codeok Dh (ok_salloc Dcodeok D1 D2 D3) (ok_salloc Dcodeok' D1 D2 D3)
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-free :
   hweaken_codeok Dh (ok_sfree Dcodeok D1 D2 D3 D4)
      (ok_sfree Dcodeok' D1 D2 D3 D4)
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-hl :
   hweaken_codeok Dh (ok_shl Dcodeok D1 D2 D3 D4)
      (ok_shl Dcodeok' D1' D2' D3' D4)
      <- hweaken_oof Dh D3 D3'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_update Dh D1 D1'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-ar :
   hweaken_codeok Dh (ok_sar Dcodeok D1 D2 D3 D4)
      (ok_sar Dcodeok' D1' D2' D3' D4)
      <- hweaken_oof Dh D3 D3'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_update Dh D1 D1'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-hr :
   hweaken_codeok Dh (ok_shr Dcodeok D1 D2 D3 D4)
      (ok_shr Dcodeok' D1' D2' D3' D4)
      <- hweaken_oof Dh D3 D3'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_update Dh D1 D1'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-ub :
   hweaken_codeok Dh (ok_sub Dcodeok D D2 D1 Da) (ok_sub Dcodeok' D' D2' D1' Da)
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-ubptr :
   hweaken_codeok Dh (ok_subptr Dcodeok D Da D2 D1)
      (ok_subptr Dcodeok' D' Da D2' D1')
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-mptr :
   hweaken_codeok Dh (ok_submptr Dcodeok D Da D2 D1)
      (ok_submptr Dcodeok' D' Da D2' D1')
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-xor :
   hweaken_codeok Dh (ok_xor Dcodeok D D2 D1 Da) (ok_xor Dcodeok' D' D2' D1' Da)
      <- hweaken_update Dh D D'
      <- hweaken_oof Dh D1 D1'
      <- hweaken_oof Dh D2 D2'
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-coerce :
   hweaken_codeok Dh (ok_coerce Dsub Dcodeok) (ok_coerce Dsub Dcodeok')
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
-unpack :
   hweaken_codeok Dh
      (ok_unpack (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dcodeok t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D1 t x x1) D2)
      (ok_unpack (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dcodeok' t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D1 t x x1) D2)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             hweaken_codeok Dh (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-assert :
   hweaken_codeok Dh (ok_assert (\x:tr P1. Dcodeok x) Doof)
      (ok_assert (\x:tr P1. Dcodeok' x) Doof')
      <- hweaken_oof Dh Doof Doof'
      <- (Pi d:tr P1. hweaken_codeok Dh (Dcodeok d) (Dcodeok' d)).
-vcase1 :
   hweaken_codeok Dh
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T1 (in1 t K2). Dcodeok t x x1)
          Doof)
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T1 (in1 t K2). Dcodeok' t x x1)
          Doof')
      <- hweaken_oof Dh Doof Doof'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:equiv T1 (in1 t K2).
             hweaken_codeok Dh (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-vcase2 :
   hweaken_codeok Dh
      (ok_vcase2 (\t:tp. \x:kof t K1. \x1:equiv T1 (in2 t K2). Dcodeok t x x1)
          Doof)
      (ok_vcase2 (\t:tp. \x:kof t K1. \x1:equiv T1 (in2 t K2). Dcodeok' t x x1)
          Doof')
      <- hweaken_oof Dh Doof Doof'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:equiv T1 (in2 t K2).
             hweaken_codeok Dh (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-vcuous :
   hweaken_codeok Dh (ok_vacuous Doof) (ok_vacuous Doof')
      <- hweaken_oof Dh Doof Doof'.
-ltpair :
   hweaken_codeok Dh
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T1 (pair t1 t2). D2 t1 x t2 x1 x2) D1)
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T1 (pair t1 t2). D2' t1 x t2 x1 x2) D1)
      <- (Pi t1:tp. Pi d1:kof t1 K1. Pi t2:tp. Pi d2:kof t2 K2.
             Pi d:equiv T1 (pair t1 t2).
             hweaken_codeok Dh (D2 t1 d1 t2 d2 d) (D2' t1 d1 t2 d2 d)).
-ltroll :
   hweaken_codeok Dh
      (ok_letroll
          (\t:tp. \x:kof t (K1 (krec (\k:kind. K1 k))).
              \x1:equiv T1 (roll (\k:kind. K1 k) t). D2 t x x1) D1)
      (ok_letroll
          (\t:tp. \x:kof t (K1 (krec (\k:kind. K1 k))).
              \x1:equiv T1 (roll (\k:kind. K1 k) t). D2' t x x1) D1)
      <- (Pi t:tp. Pi d1:kof t (K1 (krec (\k:kind. K1 k))).
             Pi d2:equiv T1 (roll (\k:kind. K1 k) t).
             hweaken_codeok Dh (D2 t d1 d2) (D2' t d1 d2)).
-mov :
   hweaken_initok Dh (ok_init_mov Dinitok Dkof3 Doof Dkof2 Dkof1 Dsub)
      (ok_init_mov Dinitok' Dkof3 Doof' Dkof2 Dkof1 Dsub)
      <- hweaken_initok Dh Dinitok Dinitok'
      <- hweaken_oof Dh Doof Doof'.
-pop :
   hweaken_initok Dh
      (ok_init_pop Dinitok Dztupdate Dkof2' Dzsub Dztlookup Dkof2 Dkof1 Dsub)
      (ok_init_pop Dinitok' Dztupdate Dkof2' Dzsub Dztlookup Dkof2 Dkof1 Dsub)
      <- hweaken_initok Dh Dinitok Dinitok'.
-coerce :
   hweaken_initok Dh (ok_init_coerce Dinitok Dsub)
      (ok_init_coerce Dinitok' Dsub)
      <- hweaken_initok Dh Dinitok Dinitok'.
-done :
   hweaken_initok Dh (ok_init_done Dcodeok D) (ok_init_done Dcodeok' D)
      <- hweaken_codeok Dh Dcodeok Dcodeok'.
hweaken_rof :
   Pi S':htp. Pi S:htp. Pi R:rfile. Pi G:rtp.
      hsubtype S' S -> rof S R G -> rof S' R G -> type.
hweaken_rof* :
   Pi S':htp. Pi S:htp. Pi N1:nat. Pi R:rfile* N1. Pi G:rtp* N1.
      hsubtype S' S -> rof* S R G -> rof* S' R G -> type.
hweaken_rof_nil : hweaken_rof* X1 rof_nil rof_nil.
hweaken_rof_cons :
   hweaken_rof* Dh (rof_cons Drof Dof Dsize) (rof_cons Drof' Dof' Dsize)
      <- hweaken_of Dh Dof Dof'
      <- hweaken_rof* Dh Drof Drof'.
hweaken_rof_ :
   hweaken_rof Dh (rof_ D Dzof) (rof_ D' Dzof')
      <- hweaken_of Dh Dzof Dzof'
      <- hweaken_rof* Dh D D'.
unstrip_pt :
   Pi S':htp. Pi L1:loc. Pi S:htp. Pi V:val. Pi T':tp.
      htpok S' L1 -> strip S' S -> of S V T' -> of S' V T' -> type.
unstrip_pt_ :
   unstrip_pt Dhtpok Dstrip Dof Dof'
      <- strip_hsubtype Dhtpok Dstrip Dhsub
      <- hweaken_of Dhsub Dof Dof'.
hweaken_hof :
   Pi S1':htp. Pi S1:htp. Pi H:heap. Pi S2:htp.
      hsubtype S1' S1 -> hof S1 H S2 -> hof S1' H S2 -> type.
hweaken_hof_nil : hweaken_hof X1 hof_nil hof_nil.
hweaken_hof_cons_hseg :
   hweaken_hof Dh (hof_cons Dhof Dof (sic_hseg Dseg))
      (hof_cons Dhof' Dof' (sic_hseg Dseg))
      <- hweaken_of Dh Dof Dof'
      <- hweaken_hof Dh Dhof Dhof'.
hweaken_hof_cons_cseg :
   hweaken_hof Dh (hof_cons Dhof Dof (sic_cseg Dstrip Dseg))
      (hof_cons Dhof' Dof' (sic_cseg Dstrip' Dseg))
      <- can_strip S1 Dstrip'
      <- strip_preserves_hsubtype Dh Dstrip' Dstrip Dh'
      <- hweaken_of Dh' Dof Dof'
      <- hweaken_hof Dh Dhof Dhof'.
strengthen_htp :
   Pi S2:htp. Pi L':loc. Pi S1:htp. Pi H:heap. Pi L:loc. Pi V:val. Pi S1':htp.
      Pi T':tp. Pi S2':htp. Pi T':tp.
      htpok S2 L' -> hof S1 H S2 -> hlookup H L V -> of S1' V T' -> segof L 
cseg
         -> strip S1 S1' -> hsubtype S2' S2 -> subtype T' T' -> htpok S2' L'
         -> hof S1 H S2' -> htlookup S2' L T' -> type.
strengthen_htp_hit :
   strengthen_htp (htpok_cons Dhtpok Dkof1 Dlt)
      (hof_cons Dhof Dof1 (sic_cseg Dstrip' X1)) hlookup_hit Dof2 Dsegof Dstrip
      (hsubtype_sub Dsegof (meet_elim1 Dkof2)) (meet_elim2 Dkof1)
      (htpok_cons Dhtpok (kof_meet Dkof2 Dkof1) Dlt)
      (hof_cons Dhof (meet_intro_val Dof2' Dof1) (sic_cseg Dstrip' Dsegof))
      htlookup_hit
      <- of_reg Dof2 Dkof2
      <- strip_fun Dstrip Dstrip' Deq
      <- of_resp Deq val_eq_ Dof2 Dof2'.
strengthen_htp_miss :
   strengthen_htp (htpok_cons Dhtpok Dkof1 Dlt) (hof_cons Dhof Dof1 Dsic)
      (hlookup_miss Dhlookup Dlt') Dof2 Dseg Dstrip (hsubtype_cons Dhsub) Dsub
      (htpok_cons Dhtpok' Dkof1 Dlt) (hof_cons Dhof' Dof1 Dsic)
      (htlookup_miss Dhtlookup Dlt')
      <- strengthen_htp Dhtpok Dhof Dhlookup Dof2 Dseg Dstrip Dhsub Dsub Dhtpok'
            Dhof' Dhtlookup.
loc_present : heap -> loc -> type.
loc_present_hit : loc_present (hcons L V1 H1) L.
loc_present_miss :
   loc_present (hcons L' V1 H) L <- loc_lt L L' <- loc_present H L.
can_hlookup :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi S':htp. Pi L:loc. Pi T':tp. Pi V:val.
      htpok S L1 -> hof S H S' -> htlookup S' L T' -> hlookup H L V -> of S V T'
         -> type.
can_hlookup_hit_hseg :
   can_hlookup Dhtpok (hof_cons X1 Dof (sic_hseg X2)) htlookup_hit hlookup_hit
      Dof.
can_hlookup_hit_cseg :
   can_hlookup Dhtpok (hof_cons X1 Dof (sic_cseg Dstrip X2)) htlookup_hit
      hlookup_hit Dof'
      <- unstrip_pt Dhtpok Dstrip Dof Dof'.
can_hlookup_miss :
   can_hlookup Dhtpok (hof_cons Dhof X1 X2) (htlookup_miss Dhtlookup Dlt)
      (hlookup_miss Dhlookup Dlt) Dof
      <- can_hlookup Dhtpok Dhof Dhtlookup Dhlookup Dof.
hlookup_pt :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi S':htp. Pi L:loc. Pi T':tp. Pi V:val.
      htpok S L1 -> hof S H S' -> htlookup S' L T' -> hlookup H L V -> of S V T'
         -> type.
hlookup_pt_contra : false -> Pi S:htp. Pi V:val. Pi T':tp. of S V T' -> type.
hlookup_pt_hit_hseg :
   hlookup_pt Dhtpok (hof_cons X1 Dof (sic_hseg X2)) htlookup_hit hlookup_hit
      Dof.
hlookup_pt_hit_cseg :
   hlookup_pt Dhtpok (hof_cons X1 Dof (sic_cseg Dstrip X2)) htlookup_hit
      hlookup_hit Dof'
      <- unstrip_pt Dhtpok Dstrip Dof Dof'.
hlookup_pt_miss :
   hlookup_pt Dhtpok (hof_cons Dhof X1 X2) (htlookup_miss Dhtlookup X3)
      (hlookup_miss Dhlookup X4) Dof
      <- hlookup_pt Dhtpok Dhof Dhtlookup Dhlookup Dof.
hlookup_pt_hit_miss :
   hlookup_pt X1 (hof_cons X2 X3 X4) htlookup_hit (hlookup_miss X5 D) D'
      <- loc_lt_contradict D Dfalse
      <- hlookup_pt_contra Dfalse S1 V1 T1 D'.
hlookup_pt_miss_hit :
   hlookup_pt X1 (hof_cons X2 X3 X4) (htlookup_miss X5 D) hlookup_hit D'
      <- loc_lt_contradict D Dfalse
      <- hlookup_pt_contra Dfalse S1 V1 T1 D'.
looked_up_loc_present :
   Pi H:heap. Pi L:loc. Pi V1:val. hlookup H L V1 -> loc_present H L -> type.
looked_up_loc_present_hit : looked_up_loc_present hlookup_hit loc_present_hit.
looked_up_loc_present_miss :
   looked_up_loc_present (hlookup_miss D Dlt) (loc_present_miss D' Dlt)
      <- looked_up_loc_present D D'.
htlookup_fun :
   Pi S:htp. Pi L:loc. Pi T':tp. Pi T':tp.
      htlookup S L T' -> htlookup S L T' -> tp_eq T' T' -> type.
htlookup_fun_contra : Pi T':tp. Pi T':tp. false -> tp_eq T' T' -> type.
htlookup_fun_hit : htlookup_fun htlookup_hit htlookup_hit tp_eq_.
htlookup_fun_miss :
   htlookup_fun (htlookup_miss D1 X1) (htlookup_miss D2 X2) D
      <- htlookup_fun D1 D2 D.
htlookup_fun_hit_miss :
   htlookup_fun htlookup_hit (htlookup_miss X1 D) D'
      <- loc_lt_contradict D Dfalse
      <- htlookup_fun_contra Dfalse D'.
htlookup_fun_hit_miss :
   htlookup_fun (htlookup_miss X1 D) htlookup_hit D'
      <- loc_lt_contradict D Dfalse
      <- htlookup_fun_contra Dfalse D'.
hlookup_fun :
   Pi H:heap. Pi L:loc. Pi V:val. Pi V':val.
      hlookup H L V -> hlookup H L V' -> val_eq V V' -> type.
hlookup_fun_contra : Pi V:val. Pi V':val. false -> val_eq V V' -> type.
hlookup_fun_hit : hlookup_fun hlookup_hit hlookup_hit val_eq_.
hlookup_fun_miss :
   hlookup_fun (hlookup_miss D1 X1) (hlookup_miss D2 X2) D
      <- hlookup_fun D1 D2 D.
hlookup_fun_hit_miss :
   hlookup_fun hlookup_hit (hlookup_miss X1 D) D'
      <- loc_lt_contradict D Dfalse
      <- hlookup_fun_contra Dfalse D'.
hlookup_fun_hit_miss :
   hlookup_fun (hlookup_miss X1 D) hlookup_hit D'
      <- loc_lt_contradict D Dfalse
      <- hlookup_fun_contra Dfalse D'.
hlookup_update :
   Pi H:heap. Pi L:loc. Pi V:val. Pi L':loc. Pi V':val. Pi H':heap.
      hlookup H L V -> hupdate H L' V' H' -> segof L cseg -> hlookup H' L V
         -> type.
hlookup_update_hit_miss :
   hlookup_update hlookup_hit (hupdate_miss X1 X2) X3 hlookup_hit.
hlookup_update_miss_hit :
   hlookup_update (hlookup_miss Dlook Dlt) (hupdate_hit X1) X2
      (hlookup_miss Dlook Dlt).
hlookup_update_miss :
   hlookup_update (hlookup_miss Dlook Dlt) (hupdate_miss Dupdate X1) Dsegof
      (hlookup_miss Dlook' Dlt)
      <- hlookup_update Dlook Dupdate Dsegof Dlook'.
hlookup_order :
   Pi L':loc. Pi V1:val. Pi H1:heap. Pi L:loc. Pi V2:val.
      hlookup (hcons L' V1 H1) L V2 -> loc_leq L L' -> type.
hlookup_order_hit : hlookup_order hlookup_hit (loc_leq_ D) <- leq_reflex N1 D.
hlookup_order_miss :
   hlookup_order (hlookup_miss X1 (loc_lt_ Dlt)) (loc_leq_ D)
      <- lt_implies_leq Dlt D.
hlookup_cons :
   Pi H:heap. Pi L:loc. Pi V:val. Pi L':loc. Pi V':val.
      hlookup H L V -> goodheap (hcons L' V' H) -> hlookup (hcons L' V' H) L V
         -> type.
hlookup_cons_ :
   hlookup_cons D (goodheap_ (goodheap_cons (goodheap_cons X1 Dlt) X2))
      (hlookup_miss D Dlt')
      <- hlookup_order D Dleq
      <- loc_leq_lt_trans Dleq Dlt Dlt'.
can_hupdate :
   Pi H:heap. Pi L:loc. Pi V:val. Pi H':heap.
      loc_present H L -> segof L hseg -> hupdate H L V H' -> type.
can_hupdate_hit :
   can_hupdate (hcons L1 V1 H1) L1 V2 (hcons L1 V2 H1) loc_present_hit Dseg
      (hupdate_hit Dseg).
can_hupdate_miss :
   can_hupdate (hcons L2 V2 H1) L1 V1 (hcons L2 V2 H2) (loc_present_miss D Dlt)
      Dseg (hupdate_miss D' Dlt)
      <- can_hupdate H1 L1 V1 H2 D Dseg D'.
hupdate_pt :
   Pi S:htp. Pi H:heap. Pi S':htp. Pi L:loc. Pi T':tp. Pi V:val. Pi H':heap.
      hof S H S' -> htlookup S' L T' -> hupdate H L V H' -> of S V T'
         -> hof S H' S' -> type.
hupdate_pt_contra :
   Pi S:htp. Pi H':heap. Pi S':htp. false -> hof S H' S' -> type.
hupdate_pt_hit :
   hupdate_pt (hof_cons Dhof X1 Dsic) htlookup_hit (hupdate_hit X2) Dof
      (hof_cons Dhof Dof Dsic).
hupdate_pt_miss :
   hupdate_pt (hof_cons Dhof Dof Dsic) (htlookup_miss Dhtlookup X1)
      (hupdate_miss Dhupdate X2) Dof' (hof_cons Dhof' Dof Dsic)
      <- hupdate_pt Dhof Dhtlookup Dhupdate Dof' Dhof'.
hupdate_pt_hit_miss :
   hupdate_pt (hof_cons X1 X2 X3) htlookup_hit (hupdate_miss X4 D) X5 D'
      <- loc_lt_contradict D Dfalse
      <- hupdate_pt_contra Dfalse D'.
hupdate_pt_miss_hit :
   hupdate_pt (hof_cons X1 X2 X3) (htlookup_miss X4 D) (hupdate_hit X5) X6 D'
      <- loc_lt_contradict D Dfalse
      <- hupdate_pt_contra Dfalse D'.
hupdate_top :
   Pi H:heap. Pi L:loc. Pi V:val. Pi V':val.
      segof L hseg -> hupdate (hcons L V H) L V' (hcons L V' H) -> type.
hupdate_top_ : hupdate_top H1 L1 V1 V2 Dsegof (hupdate_hit Dsegof).
hupdate_fun :
   Pi H:heap. Pi L:loc. Pi V:val. Pi H1:heap. Pi H2:heap.
      hupdate H L V H1 -> hupdate H L V H2 -> heap_eq H1 H2 -> type.
hupdate_fun_contra : Pi H:heap. Pi H':heap. false -> heap_eq H H' -> type.
hupdate_fun_hit : hupdate_fun (hupdate_hit X1) (hupdate_hit X2) heap_eq_.
hupdate_fun_miss :
   hupdate_fun (hupdate_miss D1 X1) (hupdate_miss D2 X2) D'
      <- hupdate_fun D1 D2 D
      <- heap_eq_cons val_eq_ D L1 D'.
hupdate_fun_hit_miss :
   hupdate_fun (hupdate_hit X1) (hupdate_miss X2 D) D'
      <- loc_lt_contradict D Dfalse
      <- hupdate_fun_contra Dfalse D'.
hupdate_fun_miss_hit :
   hupdate_fun (hupdate_miss X1 D) (hupdate_hit X2) D'
      <- loc_lt_contradict D Dfalse
      <- hupdate_fun_contra Dfalse D'.
hupdate_preserves_goodheap :
   Pi H:heap. Pi L:loc. Pi L1:loc. Pi V1:val. Pi H1:heap.
      goodheap* H L -> hupdate H L1 V1 H1 -> goodheap* H1 L -> type.
-h :
   hupdate_preserves_goodheap (goodheap_cons Dgood Dloclt) (hupdate_hit X1)
      (goodheap_cons Dgood Dloclt).
-m :
   hupdate_preserves_goodheap (goodheap_cons Dgood Dloclt)
      (hupdate_miss Dhupd X1) (goodheap_cons Dgood1 Dloclt)
      <- hupdate_preserves_goodheap Dgood Dhupd Dgood1.
lt1_implies_hseg : Pi N:nat. lt 1' N -> segof (lc N) hseg -> type.
lt1_implies_hseg_ : lt1_implies_hseg (lt_s lt_z) segof_hseg.
leq2_implies_hseg : Pi N:nat. leq 2' N -> segof (lc N) hseg -> type.
leq2_implies_hseg_ : leq2_implies_hseg (leq_s (leq_s X1)) segof_hseg.
segof_fun :
   Pi L:loc. Pi SEG1:seg. Pi SEG2:seg.
      segof L SEG1 -> segof L SEG2 -> seg_eq SEG1 SEG2 -> type.
- : segof_fun segof_bseg segof_bseg seg_eq_.
- : segof_fun segof_cseg segof_cseg seg_eq_.
- : segof_fun segof_hseg segof_hseg seg_eq_.
nextloc_is_newloc :
   Pi H:heap. Pi L:loc. Pi L1:loc. nextloc H L L1 -> newloc H L -> type.
nextloc_is_newloc_ : nextloc_is_newloc (nextloc_ D) D.
can_nextloc_hlookup :
   Pi S:htp. Pi L:loc. Pi H:heap. Pi L':loc. Pi V1:val. Pi L'':loc.
      htpok S L -> hof S H S -> hlookup H L' V1 -> segof L' cseg
         -> nextloc H L L'' -> type.
can_nextloc_hlookup_hit :
   can_nextloc_hlookup (htpok_cons X1 X2 (loc_lt_ Dlt)) (hof_cons X3 X4 X5)
      hlookup_hit segof_cseg (nextloc_ (newloc_cons Dseg (loc_lt_ Dlt)))
      <- lt1_implies_hseg Dlt Dseg.
can_nextloc_hlookup_miss :
   can_nextloc_hlookup (htpok_cons X1 X2 (loc_lt_ Dlt)) (hof_cons X3 X4 X5)
      (hlookup_miss X6 (loc_lt_ Dlt')) segof_cseg
      (nextloc_ (newloc_cons Dseg (loc_lt_ Dlt)))
      <- lt_trans Dlt' Dlt Dlt''
      <- lt1_implies_hseg Dlt'' Dseg.
can_nextloc_clookup :
   Pi S:htp. Pi L:loc. Pi H:heap. Pi PC1:pc. Pi I1:instseq. Pi L':loc.
      htpok S L -> hof S H S -> clookup H PC1 I1 -> nextloc H L L' -> type.
can_nextloc_clookup_ :
   can_nextloc_clookup Dhtpok Dhof (clookup_ X1 X2 Dlook Dseg) D
      <- can_nextloc_hlookup Dhtpok Dhof Dlook Dseg D.
newloc_hseg : Pi H1:heap. Pi L:loc. newloc H1 L -> segof L hseg -> type.
newloc_hseg_nil : newloc_hseg (newloc_nil D) D.
newloc_hseg_cons : newloc_hseg (newloc_cons D X1) D.
newloc_greater_loc :
   Pi H:heap. Pi L:loc. Pi L1:loc. Pi V1:val.
      newloc H L -> hlookup H L1 V1 -> loc_lt L1 L -> type.
- : newloc_greater_loc (newloc_cons X1 Dloclt) hlookup_hit Dloclt.
- :
   newloc_greater_loc (newloc_cons X1 Dloclt1) (hlookup_miss Dhl Dloclt2)
      Dloclt3
      <- loc_lt_trans Dloclt2 Dloclt1 Dloclt3.
newloc_cdr :
   Pi L':loc. Pi V:val. Pi H:heap. Pi L:loc.
      newloc (hcons L' V H) L -> goodheap (hcons L' V H) -> newloc H L -> type.
newloc_cdr_nil : newloc_cdr (newloc_cons Dseg X1) X2 (newloc_nil Dseg).
newloc_cdr_cons :
   newloc_cdr (newloc_cons Dseg Dlt)
      (goodheap_ (goodheap_cons (goodheap_cons X1 Dlt') X2))
      (newloc_cons Dseg Dlt'')
      <- loc_lt_trans Dlt' Dlt Dlt''.
goodheap_newloc :
   Pi H:heap. Pi L:loc.
      goodheap H -> newloc H L -> Pi V:val. goodheap (hcons L V H) -> type.
goodheap_newloc_nil :
   goodheap_newloc (goodheap_ goodheap_nil) (newloc_nil X1) V1
      (goodheap_ (goodheap_cons goodheap_nil (loc_lt_ Dlt)))
      <- lt_succ N1 Dlt.
goodheap_newloc_cons :
   goodheap_newloc (goodheap_ (goodheap_cons Dgoodheap Dlt))
      (newloc_cons X1 Dlt') V2
      (goodheap_ (goodheap_cons (goodheap_cons Dgoodheap Dlt') (loc_lt_ Dlt'')))
      <- lt_succ N1 Dlt''.
goodheap_newloc' :
   Pi H:heap. Pi L:loc. goodheap H -> newloc H L -> goodheap* H L -> type.
goodheap_newloc'_ :
   goodheap_newloc' Dgoodheap Dnewloc Dgoodheap''
      <- goodheap_newloc Dgoodheap Dnewloc null Dgoodheap'
      <- goodheap_tail' Dgoodheap' Dgoodheap''.
can_hextend :
   Pi H:heap. Pi L:loc. Pi V:val. Pi H':heap. hextend H L V H' -> type.
can_hextend_ : can_hextend H L V (hcons L V H) hextend_.
hextend_pt :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi V:val. Pi T':tp. Pi L:loc. Pi L':loc.
      htpok S L1 -> hof S H S -> of S V T' -> nextloc H L L'
         -> htpok (htpcons L T' S) L' -> hof S (hcons L V H) (htpcons L T' S)
         -> segof L hseg -> type.
hextend_pt_nil :
   hextend_pt X1 hof_nil Dof (nextloc_ (newloc_nil Dseg))
      (htpok_cons htpok_nil Dkof (loc_lt_ Dlt))
      (hof_cons hof_nil Dof (sic_hseg Dseg)) Dseg
      <- of_reg Dof Dkof
      <- lt_succ N1 Dlt.
hextend_pt_cons :
   hextend_pt (htpok_cons Dhtpok Dkof X1) (hof_cons Dhof Dof Dsic) Dof'
      (nextloc_ (newloc_cons Dseg (loc_lt_ Dlt)))
      (htpok_cons (htpok_cons Dhtpok Dkof (loc_lt_ Dlt)) Dkof'
          (loc_lt_ Dltouter))
      (hof_cons (hof_cons Dhof Dof Dsic) Dof' (sic_hseg Dseg)) Dseg
      <- of_reg Dof' Dkof'
      <- lt_succ N1 Dltouter.
hlookup_hextend :
   Pi H:heap. Pi L:loc. Pi V:val. Pi L':loc. Pi V':val. Pi H':heap.
      hlookup H L V -> newloc H L' -> hextend H L' V' H' -> hlookup H' L V
         -> type.
hlookup_hextend_ :
   hlookup_hextend D (newloc_cons X1 Dlt) hextend_ (hlookup_miss D Dlt')
      <- hlookup_order D Dleq
      <- loc_leq_lt_trans Dleq Dlt Dlt'.
asize_fun :
   Pi A:aval. Pi N:nat. Pi N':nat.
      asize A N -> asize A N' -> nat_eq N N' -> type.
-l : asize_fun asize_lit asize_lit nat_eq_.
-p : asize_fun asize_pointer asize_pointer nat_eq_.
- : asize_fun asize_spointer asize_spointer nat_eq_.
-g : asize_fun asize_gotpointer asize_gotpointer nat_eq_.
-j : asize_fun asize_junk asize_junk nat_eq_.
-i : asize_fun asize_instruct asize_instruct nat_eq_.
size_fun :
   Pi V:val. Pi N:nat. Pi N':nat. size V N -> size V N' -> nat_eq N N' -> type.
size_fun_null : size_fun size_null size_null nat_eq_.
size_fun_cons :
   size_fun (size_cons D1) (size_cons D2) D'
      <- size_fun D1 D2 D
      <- nat_eq_inc D D'.
can_asize : Pi A:aval. Pi N:nat. asize A N -> type.
can_asize_lit : can_asize (lit B1) 1' asize_lit.
can_asize_pointer : can_asize (pointer L1 N1) wordsize asize_pointer.
can_asize_spointer : can_asize (spointer N1) wordsize asize_spointer.
can_asize_spointer : can_asize gotpointer wordsize asize_gotpointer.
can_asize_junk : can_asize junk 1' asize_junk.
can_asize_instruct : can_asize (instruct IN N S1) N asize_instruct.
can_size : Pi V:val. Pi N:nat. size V N -> type.
can_size_null : can_size null 0' size_null.
can_size_cons : can_size (;' U1 V) (s N) (size_cons E) <- can_size V N E.
atomval_size :
   Pi V:val. Pi A:aval. Pi N1:nat. Pi N2:nat. Pi N3:nat.
      atomval V A N1 -> size V N2 -> asize A N3 -> sum N1 N2 N3 -> type.
atomval_size_sing :
   atomval_size (atomval_sing Dasize) (size_cons size_null) Dasize Dsum
      <- sum_commute (sum_s sum_z) Dsum.
atomval_size_cons :
   atomval_size (atomval_cons Datomval) (size_cons Dsize) Dasize Dsum'
      <- atomval_size Datomval Dsize Dasize Dsum
      <- sum_shift Dsum Dsum'.
atom_size :
   Pi A:aval. Pi N:nat. Pi V:val. asize A N -> atomval V A 0' -> size V N -> type.
atom_size_ :
   atom_size Dasize Datomval Dsize
      <- atomval_size Datomval Dsize' Dasize' sum_z
      <- asize_fun Dasize' Dasize Deq
      <- size_resp val_eq_ Deq Dsize' Dsize.
atomval_fun1 :
   Pi V:val. Pi A:aval. Pi V':val.
      atomval V A 0' -> atomval V' A 0' -> val_eq V V' -> type.
atomval_fun1* :
   Pi V:val. Pi A:aval. Pi N:nat. Pi V':val. Pi M:nat.
      atomval V A N -> atomval V' A N -> size V M -> size V' M -> val_eq V V'
         -> type.
atomval_fun1_sing :
   atomval_fun1* (atomval_sing X1) (atomval_sing X2) X3 X4 val_eq_.
atomval_fun1_cons :
   atomval_fun1* (atomval_cons D1) (atomval_cons D2) (size_cons D1s)
      (size_cons D2s) D'
      <- atomval_fun1* D1 D2 D1s D2s D
      <- val_eq_cons uval_eq_ D D'.
atomval_fun1_ :
   atomval_fun1 D1 D2 D
      <- can_asize A1 N1 Das
      <- atom_size Das D1 D1s
      <- atom_size Das D2 D2s
      <- atomval_fun1* D1 D2 D1s D2s D.
size_append :
   Pi V1:val. Pi N1:nat. Pi V2:val. Pi N2:nat. Pi V3:val. Pi N3:nat.
      size V1 N1 -> size V2 N2 -> size V3 N3 -> append V1 V2 V3 -> sum N1 N2 N3
         -> type.
size_append_null : size_append size_null D D append_null sum_z.
size_append_cons :
   size_append (size_cons Dsize1) Dsize2 (size_cons Dsize3) (append_cons Dapp)
      (sum_s Dsum)
      <- size_append Dsize1 Dsize2 Dsize3 Dapp Dsum.
size_append' :
   Pi V1:val. Pi N1:nat. Pi V2:val. Pi N2:nat. Pi V3:val. Pi N3:nat.
      size V1 N1 -> size V2 N2 -> size V3 N3 -> append V1 V2 V3 -> sum N1 N2 N3
         -> type.
size_append'_null :
   size_append' size_null D1 D2 append_null D
      <- size_fun D1 D2 Deq
      <- sum_resp nat_eq_ nat_eq_ Deq sum_z D.
size_append'_cons :
   size_append' (size_cons Dsize1) Dsize2 (size_cons Dsize3) (append_cons Dapp)
      (sum_s Dsum)
      <- size_append' Dsize1 Dsize2 Dsize3 Dapp Dsum.
size_append'' :
   Pi V1:val. Pi N1:nat. Pi V2:val. Pi N2:nat. Pi V3:val. Pi N3:nat.
      size V1 N1 -> size V2 N2 -> size V3 N3 -> append V1 V2 V3 -> sum N1 N2 N3
         -> type.
size_append''_null :
   size_append'' size_null D1 D2 append_null D
      <- size_fun D1 D2 Deq
      <- sum_resp nat_eq_ nat_eq_ Deq sum_z D.
size_append''_cons :
   size_append'' (size_cons Dsize1) Dsize2 (size_cons Dsize3) (append_cons Dapp)
      (sum_s Dsum)
      <- size_append'' Dsize1 Dsize2 Dsize3 Dapp Dsum.
size_append''' :
   Pi V1:val. Pi N1:nat. Pi V2:val. Pi N2:nat. Pi V3:val. Pi N3:nat.
      size V1 N1 -> size V2 N2 -> size V3 N3 -> append V1 V2 V3 -> sum N1 N2 N3
         -> type.
size_append'''_null : size_append''' size_null D D append_null sum_z.
size_append'''_cons :
   size_append''' (size_cons Dsize1) Dsize2 (size_cons Dsize3)
      (append_cons Dapp) (sum_s Dsum)
      <- size_append''' Dsize1 Dsize2 Dsize3 Dapp Dsum.
size_append'''' :
   Pi V1:val. Pi N1:nat. Pi V2:val. Pi N2:nat. Pi V3:val. Pi N3:nat.
      size V1 N1 -> size V2 N2 -> size V3 N3 -> append V1 V2 V3 -> sum N1 N2 N3
         -> type.
size_append''''_ :
   size_append'''' Dsize1' Dsize2 Dsize3 Dapp Dsum
      <- size_append'' Dsize1 Dsize2 Dsize3 Dapp Dsum'
      <- sum_fun1 Dsum' Dsum Deq
      <- size_resp val_eq_ Deq Dsize1 Dsize1'.
size_binary_int :
   Pi N:nat. Pi End1:endian. Pi V:val. Pi B:binary N. Pi M:nat. Pi N':nat.
      binary_int End1 V B -> product M bytebits N' -> nat_eq N N' -> size V M
         -> type.
size_binary_null : size_binary_int binary_int_null product_z nat_eq_ size_null.
size_binary_cons_big :
   size_binary_int (binary_int_cons_big Dba Dbi) (product_s Dsum Dprod) nat_eq_
      (size_cons Dsize)
      <- binary_append_length Dba Dsum'
      <- sum_fun2 Dsum' Dsum Deq
      <- size_binary_int Dbi Dprod Deq Dsize.
size_binary_cons_lit :
   size_binary_int (binary_int_cons_lit Dba Dbi) (product_s Dsum Dprod) nat_eq_
      (size_cons Dsize)
      <- sum_commute Dsum Dsum'
      <- binary_append_length Dba Dsum''
      <- sum_fun1 Dsum'' Dsum' Deq
      <- size_binary_int Dbi Dprod Deq Dsize.
false_implies_size : false -> Pi V:val. Pi N:nat. size V N -> type.
cfp : htp -> val -> tp -> type.
cfpelim : htp -> val -> tp -> type.
cfpelim_ : cfpelim S V T' <- reduce T' T' <- kof T' kt <- cfp S V T'.
cfp_annot : cfp S V (annot T' R K) <- cfpelim S V (annot T' R K).
cfp_app : cfp S V (app T1 T2) <- cfpelim S V (app T1 T2).
cfp_pi1 : cfp S V (pi1 T') <- cfpelim S V (pi1 T').
cfp_pi2 : cfp S V (pi2 T') <- cfpelim S V (pi2 T').
cfp_kapp : cfp S V (kapp T' K R) <- cfpelim S V (kapp T' K R).
cfp_case :
   cfp S V (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t))
      <- cfpelim S V (case T' K1 K2 K (\t:tp. T1 t) (\t:tp. T2 t)).
cfp_unroll : cfp S V (unroll T') <- cfpelim S V (unroll T').
cfp_b0 : cfp S1 null b0.
cfp_b1 : cfp S1 (;' (@' (lit B1) 0') null) b1.
cfp_seteq :
   cfp S V (seteq N TN)
      <- tr (pnumeq TN (number B))
      <- product N bytebits N*bytebits
      <- binary_int theend V B.
cfp_ns : cfp S1 (;' U1 null) ns.
cfp_prod : cfp S V (prod T1 T2) <- append V1 V2 V <- cfp S V1 T1 <- cfp S V2 T2.
cfp_exp :
   cfp S V (exp T' TN)
      <- cfp S V T'
      <- tr (pnumeq TN (numlit N))
      <- tp_exp T' N T'
      <- kof T' kt.
cfp_code : cfp S V (code PC G) <- codeval PC V I <- rtpok G <- codeok S G I.
cfp_arrow :
   cfp S V (arrow G)
      <- atomval V (pointer L N) 0'
      <- htlookup S L T'
      <- segof L cseg
      <- sat T' (rti N) kt
      <- rtpok G
      <- subtype T' (prod T' (code (pc_ L N) G)).
cfp_cbox :
   cfp S V (cbox T2 T3)
      <- atomval V (pointer L N) 0'
      <- htlookup S L T'
      <- boxsub T' N (prod T1 T2) (prod T3 T4).
cfp_cmbox :
   cfp S V (cmbox T2 T3)
      <- atomval V (pointer L N) 0'
      <- htlookup S L T'
      <- segof L hseg
      <- boxsub T' N (prod T1 T2) (prod T3 T4)
      <- subtype (prod (prod T1 T2) (prod T3 T4)) T'.
cfp_sptr :
   cfp S V (sptr T') <- atomval V (spointer N) 0' <- cfp S' V' T' <- size V' N.
cfp_forallo :
   cfp S V (forall K R (\t:tp. T' t))
      <- pon R K
      <- (Pi t:tp. kof t K -> sat t R K -> subtype (T' t) (T' t))
      <- (Pi t:tp. kof t K -> sat t R K -> of S V (T' t)).
cfp_forallc :
   cfp S V (forall K R (\t:tp. T' t))
      <- pon R K
      <- (Pi t:tp. kof t K -> sat t R K -> subtype (T' t) (T' t))
      <- (Pi t:tp. kof t K -> sat t R K -> cfp S V (T' t)).
cfp_exists :
   cfp S V (exists K R (\t:tp. T' t))
      <- (Pi t:tp. kof t K -> kof (T' t) kt)
      <- sat T' R K
      <- cfp S V (T' T').
cfp_guardo :
   cfp S V (guard P T')
      <- propok P
      <- (tr P -> subtype T' T')
      <- (tr P -> of S V T').
cfp_guardc :
   cfp S V (guard P T')
      <- propok P
      <- (tr P -> subtype T' T')
      <- (tr P -> cfp S V T').
cfp_assert : cfp S V (assert P T') <- tr P <- cfp S V T'.
cfp_rec :
   cfp S V (rec (\t:tp. T' t))
      <- (Pi t:tp. kof t kt -> kof (T' t) kt)
      <- cfp S V (T' (rec (\t:tp. T' t))).
cfp_meet : cfp S V (meet T1 T2) <- cfp S V T1 <- cfp S V T2.
cfp_join1 : cfp S V (join T1 T2) <- cfp S V T1 <- kof T2 kt.
cfp_join2 : cfp S V (join T1 T2) <- cfp S V T2 <- kof T1 kt.
cfp_gotptr : cfp S V gotptr <- atomval V gotpointer 0'.
cfp_weaken : Pi S:htp. Pi V:val. Pi T':tp. cfp S V T' -> of S V T' -> type.
cfpelim_weaken :
   Pi S:htp. Pi V:val. Pi T':tp. cfpelim S V T' -> of S V T' -> type.
- :
   cfpelim_weaken (cfpelim_ Dc Dkof Dreduce)
      (subsume (reflexeq Dkof Dkof' (equiv_symm Dkof Dequiv)) Dof)
      <- cfp_weaken Dc Dof
      <- sr Dkof Dreduce Dkof'
      <- reduce_is_equiv Dkof Dreduce Dequiv.
-annot : cfp_weaken (cfp_annot Dc) Dof <- cfpelim_weaken Dc Dof.
-app : cfp_weaken (cfp_app Dc) Dof <- cfpelim_weaken Dc Dof.
-pi1 : cfp_weaken (cfp_pi1 Dc) Dof <- cfpelim_weaken Dc Dof.
-pi2 : cfp_weaken (cfp_pi2 Dc) Dof <- cfpelim_weaken Dc Dof.
-kapp : cfp_weaken (cfp_kapp Dc) Dof <- cfpelim_weaken Dc Dof.
-case : cfp_weaken (cfp_case Dc) Dof <- cfpelim_weaken Dc Dof.
-unroll : cfp_weaken (cfp_unroll Dc) Dof <- cfpelim_weaken Dc Dof.
-b0 : cfp_weaken cfp_b0 of_null.
-b1 : cfp_weaken cfp_b1 (of_atom aof_lit (atomval_sing asize_lit)).
-eteq :
   cfp_weaken (cfp_seteq Dbi Dp Dtr)
      (subsume (seteq_sub (tr_numeq_symm Dtr)) (of_seteq Dbi Dp)).
-ns : cfp_weaken cfp_ns of_ns.
-prod :
   cfp_weaken (cfp_prod D2 D1 D) (of_append D2' D1' D)
      <- cfp_weaken D1 D1'
      <- cfp_weaken D2 D2'.
-exp :
   cfp_weaken (cfp_exp Dkof Dte Dtr Dc) (subsume (implode Dkof Dte Dtr) Dof)
      <- cfp_weaken Dc Dof.
-code :
   cfp_weaken (cfp_code Dcodeok Drtpok Dcodeval)
      (of_code Dcodeok Drtpok Dcodeval).
-arrow :
   cfp_weaken (cfp_arrow Dsub Drtpok Dkof Dseg Dlook Datomval)
      (of_atom (aof_function Dsub Drtpok Dkof Dseg Dlook) Datomval).
-cbox :
   cfp_weaken (cfp_cbox Dbsub Dhtlookup Datomval)
      (of_atom (aof_cpointer Dbsub Dhtlookup) Datomval).
-cmbox :
   cfp_weaken (cfp_cmbox Dsub Dbsub Dseg Dhtlookup Datomval)
      (of_atom (aof_chpointer Dsub Dbsub Dseg Dhtlookup) Datomval).
-ptr :
   cfp_weaken (cfp_sptr Dsize Dc Datomval) (of_spointer Dsize Dof Datomval)
      <- cfp_weaken Dc Dof.
-forall :
   cfp_weaken
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1) Dpon)
      (forall_intro
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              subsume (Dsub t d1 d2) (Dof t d1 d2)) Dpon).
-forall :
   cfp_weaken
      (cfp_forallc (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dc t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1) Dpon)
      (forall_intro
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              subsume (Dsub t d1 d2) (Dof t d1 d2)) Dpon)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon -> cfp_weaken (Dc t d1 d2) (Dof t d1 d2)).
-exists :
   cfp_weaken (cfp_exists Dcfp Dkofarg (\t:tp. \x:kof t K1. Dkof t x))
      (subsume (exists_intro Dkofarg (\t:tp. \x:kof t K1. Dkof t x)) Dof)
      <- cfp_weaken Dcfp Dof.
-guard :
   cfp_weaken (cfp_guardo (\x:tr P1. Dof x) (\x:tr P1. Dsub x) Dpropok)
      (guard_intro (\d:tr P1. subsume (Dsub d) (Dof d)) Dpropok).
-guard :
   cfp_weaken (cfp_guardc (\x:tr P1. Dc x) (\x:tr P1. Dsub x) Dpropok)
      (guard_intro (\d:tr P1. subsume (Dsub d) (Dof d)) Dpropok)
      <- (Pi d:tr P1. tr_reg d Dpropok -> cfp_weaken (Dc d) (Dof d)).
-assert :
   cfp_weaken (cfp_assert Dc Dtr) (subsume (assert_intro Dtr) Dof)
      <- cfp_weaken Dc Dof.
-rec :
   cfp_weaken (cfp_rec Dc (\t:tp. \x:kof t kt. Dkof t x))
      (subsume (rec_intro (\t:tp. \x:kof t kt. Dkof t x)) Dof)
      <- cfp_weaken Dc Dof.
-meet :
   cfp_weaken (cfp_meet D2 D1) (meet_intro_val D2' D1')
      <- cfp_weaken D1 D1'
      <- cfp_weaken D2 D2'.
-join1 :
   cfp_weaken (cfp_join1 Dkof D) (subsume (join_intro1 Dkof) D')
      <- cfp_weaken D D'.
-join2 :
   cfp_weaken (cfp_join2 Dkof D) (subsume (join_intro2 Dkof) D')
      <- cfp_weaken D D'.
-gotptr : cfp_weaken (cfp_gotptr D) (of_atom aof_gotpointer D).
cfp_reg : Pi S:htp. Pi V:val. Pi T':tp. cfp S V T' -> kof T' kt -> type.
- : cfp_reg Dc Dkof <- cfp_weaken Dc Dof <- of_reg Dof Dkof.
false_implies_cfp : Pi S:htp. Pi V:val. Pi T':tp. false -> cfp S V T' -> type.
cfp_resp :
   Pi S:htp. Pi S':htp. Pi V:val. Pi V':val. Pi T':tp. Pi T':tp.
      htp_eq S S' -> val_eq V V' -> tp_eq T' T' -> cfp S V T' -> cfp S' V' T'
         -> type.
cfp_resp_ : cfp_resp htp_eq_ val_eq_ tp_eq_ D D.
ns_membership :
   Pi V:val. Pi N:nat. Pi T':tp.
      size V N -> tp_exp ns N T' -> Pi S:htp. cfp S V T' -> type.
ns_membership_null : ns_membership size_null tp_exp_z S1 cfp_b0.
ns_membership_cons :
   ns_membership (size_cons Dsize) (tp_exp_s Dte) S
      (cfp_prod Dc cfp_ns (append_cons append_null))
      <- ns_membership Dsize Dte S Dc.
ns_membership' :
   Pi V:val. Pi N:nat.
      size V N -> Pi S:htp. cfp S V (exp ns (numlit N)) -> type.
- :
   ns_membership' Dsize S (cfp_exp kof_ns Dte tr_numeq_lit Dc)
      <- can_tp_exp ns N T' Dte
      <- ns_membership Dsize Dte S Dc.
cfp_setlt :
   Pi S:htp. Pi V:val. Pi N:nat. Pi BT:tp. Pi N*bytebits:nat.
      Pi B:binary N*bytebits.
      cfp S V (setlt N BT) -> tr (pnumlt (number B) BT) -> binary_int theend V B
         -> product N bytebits N*bytebits -> type.
- :
   cfp_setlt
      (cfp_exists (cfp_assert (cfp_seteq Dbi Dp Dtr1) Dtr2) X1
          (\t:tp. \x:kof t knum. X2 t x))
      (tr_numleq_lt_trans _ _ _ Dtr2 (tr_numleq_refl (tr_numeq_symm Dtr1))) Dbi Dp.
cfp_setgt :
   Pi S:htp. Pi V:val. Pi N:nat. Pi BT:tp. Pi N*bytebits:nat.
      Pi B:binary N*bytebits.
      cfp S V (setgt N BT) -> tr (pnumlt BT (number B)) -> binary_int theend V B
         -> product N bytebits N*bytebits -> type.
- :
   cfp_setgt
      (cfp_exists (cfp_assert (cfp_seteq Dbi Dp Dtr1) Dtr2) X1
          (\t:tp. \x:kof t knum. X2 t x))
      (tr_numlt_leq_trans _ _ _ (tr_numleq_refl Dtr1) Dtr2) Dbi Dp.
cfp_implies_notvar :
   Pi S:htp. Pi V:val. Pi T':tp. cfp S V T' -> notvar T' -> type.
-annot : cfp_implies_notvar (cfp_annot X1) notvar_annot.
-app : cfp_implies_notvar (cfp_app X1) notvar_app.
-pi1 : cfp_implies_notvar (cfp_pi1 X1) notvar_pi1.
-pi2 : cfp_implies_notvar (cfp_pi2 X1) notvar_pi2.
-kapp : cfp_implies_notvar (cfp_kapp X1) notvar_kapp.
-case : cfp_implies_notvar (cfp_case X1) notvar_case.
-unroll : cfp_implies_notvar (cfp_unroll X1) notvar_unroll.
-b0 : cfp_implies_notvar cfp_b0 notvar_b0.
-b1 : cfp_implies_notvar cfp_b1 notvar_b1.
-eteq : cfp_implies_notvar (cfp_seteq X1 X2 X3) notvar_seteq.
-prod : cfp_implies_notvar (cfp_prod X1 X2 X3) notvar_prod.
-exp : cfp_implies_notvar (cfp_exp X1 X2 X3 X4) notvar_exp.
-code : cfp_implies_notvar (cfp_code X1 X2 X3) notvar_code.
-arrow : cfp_implies_notvar (cfp_arrow X1 X2 X3 X4 X5 X6) notvar_arrow.
-cbox : cfp_implies_notvar (cfp_cbox X1 X2 X3) notvar_cbox.
-cmbox : cfp_implies_notvar (cfp_cmbox X1 X2 X3 X4 X5) notvar_cmbox.
-ptr : cfp_implies_notvar (cfp_sptr X1 X2 X3) notvar_sptr.
-forall :
   cfp_implies_notvar
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R1 K1. X1 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. X2 t x x1) X3)
      notvar_forall.
-forall :
   cfp_implies_notvar
      (cfp_forallc (\t:tp. \x:kof t K1. \x1:sat t R1 K1. X1 t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. X2 t x x1) X3)
      notvar_forall.
-exists :
   cfp_implies_notvar (cfp_exists X1 X2 (\t:tp. \x:kof t K1. X3 t x))
      notvar_exists.
-guard :
   cfp_implies_notvar (cfp_guardo (\x:tr P1. X1 x) (\x:tr P1. X2 x) X3)
      notvar_guard.
-guard :
   cfp_implies_notvar (cfp_guardc (\x:tr P1. X1 x) (\x:tr P1. X2 x) X3)
      notvar_guard.
-assert : cfp_implies_notvar (cfp_assert X1 X2) notvar_assert.
-rec : cfp_implies_notvar (cfp_rec X1 (\t:tp. \x:kof t kt. X2 t x)) notvar_rec.
-meet : cfp_implies_notvar (cfp_meet X1 X2) notvar_meet.
-join1 : cfp_implies_notvar (cfp_join1 X1 X2) notvar_join.
-join2 : cfp_implies_notvar (cfp_join2 X1 X2) notvar_join.
-ns : cfp_implies_notvar cfp_ns notvar_ns.
-gotptr : cfp_implies_notvar (cfp_gotptr X1) notvar_gotptr.
can_binary_to_int :
   Pi N:nat. Pi End:endian. Pi M:nat. Pi V:val. Pi B:binary N.
      product M bytebits N -> binary_int End V B -> type.
can_binary_to_int_null :
   can_binary_to_int z null nil$ product_z binary_int_null.
can_binary_to_int_cons_big :
   can_binary_to_int (s N) (;' (@' (lit Bbyte) 0') V) B' (product_s Dsum Dprod)
      (binary_int_cons_big Dba Dbti)
      <- can_binary_append' bytebits Bbyte B B' Dsum Dba
      <- can_binary_to_int N V B Dprod Dbti.
can_binary_to_int_cons_lit :
   can_binary_to_int (s N) (;' (@' (lit Bbyte) 0') V) B' (product_s Dsum Dprod)
      (binary_int_cons_lit Dba Dbti)
      <- sum_commute Dsum Dsum'
      <- can_binary_append' M B Bbyte B' Dsum' Dba
      <- can_binary_to_int N V B Dprod Dbti.
can_int_to_binary :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat. Pi M:nat. Pi End:endian.
      cfp S V T'
         -> Pi B:binary N.
                product M bytebits N -> tp_exp b1 M T' -> binary_int End V B
                   -> type.
can_int_to_binary_z :
   can_int_to_binary End1 cfp_b0 nil$ product_z tp_exp_z binary_int_null.
can_int_to_binary_s_big :
   can_int_to_binary bigend (cfp_prod Dc2 cfp_b1 (append_cons append_null)) B3
      (product_s Dsum Dprod) (tp_exp_s Dexp) (binary_int_cons_big Dappbin Ditb2)
      <- can_int_to_binary bigend Dc2 B2 Dprod Dexp Ditb2
      <- can_binary_append B1 B2 B3 Dsum Dappbin.
can_int_to_binary_s_lit :
   can_int_to_binary littleend (cfp_prod Dc2 cfp_b1 (append_cons append_null))
      B3 (product_s Dsum Dprod) (tp_exp_s Dexp)
      (binary_int_cons_lit Dappbin Ditb2)
      <- can_int_to_binary littleend Dc2 B2 Dprod Dexp Ditb2
      <- sum_commute Dsum Dsum'
      <- can_binary_append B2 B1 B3 Dsum' Dappbin.
can_int_to_binary' :
   Pi S:htp. Pi V:val. Pi M:nat. Pi N:nat. Pi End:endian.
      cfp S V (inti M)
         -> Pi B:binary N. product M bytebits N -> binary_int End V B -> type.
- :
   can_int_to_binary' End (cfp_exp X1 Dte Dtr Dc) B Dprod Dbi
      <- canonize_numeq_lit (tr_numeq_symm Dtr) Deq
      <- tp_exp_resp tp_eq_ Deq tp_eq_ Dte Dte'
      <- can_int_to_binary End Dc B Dprod Dte' Dbi.
binary_int_type :
   Pi N:nat. Pi End1:endian. Pi V:val. Pi B1:binary N. Pi M:nat. Pi T':tp.
      Pi S:htp.
      binary_int End1 V B1 -> tp_exp b1 M T' -> product M bytebits N
         -> cfp S V T' -> type.
binary_int_type_z : binary_int_type binary_int_null tp_exp_z product_z cfp_b0.
binary_int_type_s_big :
   binary_int_type (binary_int_cons_big Dba Dbi) (tp_exp_s Dte)
      (product_s Dsum Dprod) (cfp_prod Dc2 cfp_b1 (append_cons append_null))
      <- binary_append_length Dba Dsum'
      <- sum_fun2 Dsum Dsum' Deq
      <- prod_resp nat_eq_ nat_eq_ Deq Dprod Dprod'
      <- binary_int_type Dbi Dte Dprod' Dc2.
binary_int_type_s_lit :
   binary_int_type (binary_int_cons_lit Dba Dbi) (tp_exp_s Dte)
      (product_s Dsum Dprod) (cfp_prod Dc2 cfp_b1 (append_cons append_null))
      <- sum_commute Dsum Dsum'
      <- binary_append_length Dba Dsum''
      <- sum_fun1 Dsum' Dsum'' Deq
      <- prod_resp nat_eq_ nat_eq_ Deq Dprod Dprod'
      <- binary_int_type Dbi Dte Dprod' Dc2.
binary_int_type' :
   Pi N:nat. Pi End1:endian. Pi V:val. Pi B1:binary N. Pi M:nat. Pi S:htp.
      binary_int End1 V B1 -> product M bytebits N -> cfp S V (inti M) -> type.
- :
   binary_int_type' Dbi Dprod (cfp_exp kof_b1 Dte tr_numeq_lit Dc)
      <- can_tp_exp b1 N2 T1 Dte
      <- binary_int_type Dbi Dte Dprod Dc.
binary_int_fun :
   Pi N1:nat. Pi End:endian. Pi V:val. Pi B:binary N1. Pi N2:nat.
      Pi B':binary N2.
      binary_int End V B -> binary_int End V B' -> binary_eq B B' -> type.
binary_int_fun_cons| :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi B1':binary N2. Pi N3:nat.
      Pi N4:nat. Pi B2:binary N3. Pi B2':binary N4. Pi N5:nat. Pi B3:binary N5.
      Pi N6:nat. Pi B3':binary N6.
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_append B1 B2 B3
         -> binary_append B1' B2' B3' -> binary_eq B3 B3' -> type.
binary_int_fun_null : binary_int_fun binary_int_null binary_int_null binary_eq_.
binary_int_fun_cons_big :
   binary_int_fun (binary_int_cons_big Dba Dbi) (binary_int_cons_big Dba' Dbi')
      D
      <- binary_int_fun Dbi Dbi' Deq
      <- binary_int_fun_cons| binary_eq_ Deq Dba Dba' D.
binary_int_fun_cons_lit :
   binary_int_fun (binary_int_cons_lit Dba Dbi) (binary_int_cons_lit Dba' Dbi')
      D
      <- binary_int_fun Dbi Dbi' Deq
      <- binary_int_fun_cons| Deq binary_eq_ Dba Dba' D.
binary_int_fun_cons|_ :
   binary_int_fun_cons| binary_eq_ binary_eq_ Dba Dba' D
      <- binary_append_fun Dba Dba' D.
binary_int_size :
   Pi N:nat. Pi End1:endian. Pi V:val. Pi B1:binary N. Pi M:nat.
      binary_int End1 V B1 -> product M bytebits N -> size V M -> type.
binary_int_size_null :
   binary_int_size binary_int_null Dprod Dsize
      <- prod_result_zero Dprod Deq
      <- nat_eq_symm Deq Deq'
      <- size_resp val_eq_ Deq' size_null Dsize.
binary_int_size_cons_big :
   binary_int_size (binary_int_cons_big Dba Dbi) Dprod Dsize'
      <- binary_append_length Dba Dsum
      <- sum_nonzero Dsum Deq
      <- prod_resp nat_eq_ nat_eq_ Deq Dprod Dprod'
      <- prod_result_nonzero Dprod' Deq'
      <- prod_resp Deq' nat_eq_ nat_eq_ Dprod (product_s Dsum' Dprod'')
      <- sum_fun2 Dsum' Dsum Deq''
      <- prod_resp nat_eq_ nat_eq_ Deq'' Dprod'' Dprod'''
      <- binary_int_size Dbi Dprod''' Dsize
      <- nat_eq_symm Deq' Deq'''
      <- size_resp val_eq_ Deq''' (size_cons Dsize) Dsize'.
binary_int_size_cons_lit :
   binary_int_size (binary_int_cons_lit Dba Dbi) Dprod Dsize'
      <- binary_append_length Dba Dsumback
      <- sum_commute Dsumback Dsum
      <- sum_nonzero Dsum Deq
      <- prod_resp nat_eq_ nat_eq_ Deq Dprod Dprod'
      <- prod_result_nonzero Dprod' Deq'
      <- prod_resp Deq' nat_eq_ nat_eq_ Dprod (product_s Dsum' Dprod'')
      <- sum_fun2 Dsum' Dsum Deq''
      <- prod_resp nat_eq_ nat_eq_ Deq'' Dprod'' Dprod'''
      <- binary_int_size Dbi Dprod''' Dsize
      <- nat_eq_symm Deq' Deq'''
      <- size_resp val_eq_ Deq''' (size_cons Dsize) Dsize'.
binary_size_resp :
   Pi N:nat. Pi M:nat. Pi N*M:nat. Pi N*M':nat. Pi E:endian. Pi V:val.
      Pi B:binary N*M. Pi B':binary N*M'. Pi N2:nat.
      product N M N*M -> product N M N*M' -> binary_int E V B
         -> binary_int E V B' -> represents N2 B -> represents N2 B' -> type.
- :
   binary_size_resp Dp Dp' Dbi Dbi' Drep Drep'
      <- prod_fun3 Dp Dp' Deq
      <- binary_resp Deq B1 B2 Deq'
      <- binary_int_resp val_eq_ Deq' Dbi Dbi'
      <- represents_resp nat_eq_ Deq' Drep Drep'.
binary_size_resp2 :
   Pi N:nat. Pi M:nat. Pi N*M:nat. Pi N*M':nat. Pi E:endian. Pi V:val.
      product N M N*M -> product N M N*M'
         -> Pi B:binary N*M. Pi B':binary N*M'.
                binary_int E V B -> binary_int E V B' -> type.
- :
   binary_size_resp2 Dp Dp' B B' Dbi Dbi'
      <- prod_fun3 Dp Dp' Deq
      <- binary_resp Deq B B' Deq'
      <- binary_int_resp val_eq_ Deq' Dbi Dbi'.
binary_size_resp3 :
   Pi N:nat. Pi M:nat. Pi N*M:nat. Pi N*M':nat. Pi E:endian. Pi V:val.
      Pi B:binary N*M. Pi B':binary N*M'.
      product N M N*M -> product N M N*M' -> binary_int E V B
         -> binary_int E V B' -> type.
- :
   binary_size_resp3 Dp Dp' Dbi Dbi'
      <- prod_fun3 Dp Dp' Deq
      <- binary_resp Deq B1 B2 Deq'
      <- binary_int_resp val_eq_ Deq' Dbi Dbi'.
tr_pnumeq_number_resp :
   Pi N1:nat. Pi N2:nat. Pi B:binary N1. Pi B':binary N2. Pi BT:tp.
      binary_eq B B' -> tr (pnumeq BT (number B)) -> tr (pnumeq BT (number B'))
         -> type.
- : tr_pnumeq_number_resp binary_eq_ Dtr Dtr.
binary_size_resp4 :
   Pi N:nat. Pi M:nat. Pi N*M:nat. Pi N*M':nat. Pi E:endian. Pi V:val.
      Pi B:binary N*M. Pi B':binary N*M'. Pi BT:tp.
      product N M N*M -> product N M N*M' -> binary_int E V B
         -> binary_int E V B' -> tr (pnumeq BT (number B))
         -> tr (pnumeq BT (number B')) -> type.
- :
   binary_size_resp4 Dp Dp' Dbi Dbi' Dtr Dtr'
      <- prod_fun3 Dp Dp' Deq
      <- binary_resp Deq B1 B2 Deq'
      <- binary_int_resp val_eq_ Deq' Dbi Dbi'
      <- tr_pnumeq_number_resp Deq' Dtr Dtr'.
can_bit_to_flag : Pi F:flag. Pi B:bit. bit_to_flag B F -> type.
can_bit_to_flag_zero : can_bit_to_flag zero bit_to_flag_zero.
can_bit_to_flag_one : can_bit_to_flag one' bit_to_flag_one.
can_determine_zero :
   Pi N1:nat. Pi B:binary N1. Pi F:bit. determine_zero B F -> type.
can_determine_zero| :
   Pi N1:nat. Pi B:binary N1.
      maybe_zero B -> Pi F:bit. determine_zero B F -> type.
can_determine_zero_ :
   can_determine_zero B BIT D
      <- compare_for_zero B Dmz
      <- can_determine_zero| Dmz BIT D.
can_determine_zero|_yes :
   can_determine_zero| (maybe_zero_yes D) one' (determine_zero_yes D).
can_determine_zero|_no :
   can_determine_zero| (maybe_zero_no D) zero (determine_zero_no D).
can_determine_sign :
   Pi N1:nat. Pi B:binary (s N1). Pi F:bit. determine_sign B F -> type.
can_determine_sign_1 : can_determine_sign ($ BIT nil$) BIT determine_sign_1.
can_determine_sign_n :
   can_determine_sign ($ B2 B) B1 (determine_sign_n D)
      <- can_determine_sign B B1 D.
can_determine_conds :
   Pi N1:nat. Pi B:binary (s N1). Pi BITC:bit. Pi BITO:bit. Pi CC:conds.
      determine_conds B BITC BITO CC -> type.
can_determine_conds_ :
   can_determine_conds B Fcarry Foverflow (conds_ Fcarry Fzero Fsign Foverflow)
      (determine_conds_ Ds Dz)
      <- can_determine_zero B Fzero Dz
      <- can_determine_sign B Fsign Ds.
maybe_sat : cond -> rfile -> type.
maybe_sat_yes : maybe_sat Cond R <- cond_sat Cond R.
maybe_sat_no : maybe_sat Cond R <- cond_unsat Cond R.
perhaps_sat : cond -> rfile -> type.
perhaps_sat_yes : perhaps_sat Cond R <- cond_sat Cond R.
perhaps_sat_no : perhaps_sat Cond R <- cond_unsat Cond R.
check_for_sat : Pi Cond:cond. Pi R:rfile. perhaps_sat Cond R -> type.
check_for_sat* :
   Pi R:rfile. Pi FC:bit. Pi FZ:bit. Pi FS:bit. Pi FO:bit. Pi Cond:cond.
      cclookup_carry R FC -> cclookup_zero R FZ -> cclookup_sign R FS
         -> cclookup_overflow R FO -> perhaps_sat Cond R -> type.
check_for_sat_eq_yes :
   check_for_sat* cond_eq X1 D X2 X3 (perhaps_sat_yes (cond_sat_eq D)).
check_for_sat_eq_no :
   check_for_sat* cond_eq X1 D X2 X3
      (perhaps_sat_no (cond_unsat_ (cond_sat_neq D) cond_negate_eq)).
check_for_sat_neq_yes :
   check_for_sat* cond_neq X1 D X2 X3 (perhaps_sat_yes (cond_sat_neq D)).
check_for_sat_neq_no :
   check_for_sat* cond_neq X1 D X2 X3
      (perhaps_sat_no (cond_unsat_ (cond_sat_eq D) cond_negate_neq)).
check_for_sat_lt_yes :
   check_for_sat* cond_lt D X1 X2 X3 (perhaps_sat_yes (cond_sat_lt D)).
check_for_sat_lt_no :
   check_for_sat* cond_lt D X1 X2 X3
      (perhaps_sat_no (cond_unsat_ (cond_sat_gte D) cond_negate_lt)).
check_for_sat_lte_lt :
   check_for_sat* cond_lte D X1 X2 X3 (perhaps_sat_yes (cond_sat_lte_lt D)).
check_for_sat_lte_e :
   check_for_sat* cond_lte X1 D X2 X3 (perhaps_sat_yes (cond_sat_lte_e D)).
check_for_sat_lte_no :
   check_for_sat* cond_lte Dc Dz X1 X2
      (perhaps_sat_no (cond_unsat_ (cond_sat_gt Dz Dc) cond_negate_lte)).
check_for_sat_gt_yes :
   check_for_sat* cond_gt Dc Dz X1 X2 (perhaps_sat_yes (cond_sat_gt Dz Dc)).
check_for_sat_gt_lt :
   check_for_sat* cond_gt D X1 X2 X3
      (perhaps_sat_no (cond_unsat_ (cond_sat_lte_lt D) cond_negate_gt)).
check_for_sat_gt_e :
   check_for_sat* cond_gt X1 D X2 X3
      (perhaps_sat_no (cond_unsat_ (cond_sat_lte_e D) cond_negate_gt)).
check_for_sat_gte_yes :
   check_for_sat* cond_gte D X1 X2 X3 (perhaps_sat_yes (cond_sat_gte D)).
check_for_sat_gte_no :
   check_for_sat* cond_gte D X1 X2 X3
      (perhaps_sat_no (cond_unsat_ (cond_sat_lt D) cond_negate_gte)).
- :
   check_for_sat* cond_slt Dc Dz Ds Do
      (perhaps_sat_yes (cond_sat_slt_nov Do Ds)).
- :
   check_for_sat* cond_slt Dc Dz Ds Do (perhaps_sat_yes (cond_sat_slt_ov Do Ds)).
- :
   check_for_sat* cond_slt Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_sgte_nov Do Ds) cond_negate_slt)).
- :
   check_for_sat* cond_slt Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_sgte_ov Do Ds) cond_negate_slt)).
- :
   check_for_sat* cond_slte Dc Dz Ds Do
      (perhaps_sat_yes (cond_sat_slte_nov Do Ds)).
- :
   check_for_sat* cond_slte Dc Dz Ds Do
      (perhaps_sat_yes (cond_sat_slte_ov Do Ds)).
- : check_for_sat* cond_slte Dc Dz Ds Do (perhaps_sat_yes (cond_sat_slte_e Dz)).
- :
   check_for_sat* cond_slte Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_sgt_nov Do Ds Dz) cond_negate_slte)).
- :
   check_for_sat* cond_slte Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_sgt_ov Do Ds Dz) cond_negate_slte)).
- :
   check_for_sat* cond_sgt Dc Dz Ds Do
      (perhaps_sat_yes (cond_sat_sgt_nov Do Ds Dz)).
- :
   check_for_sat* cond_sgt Dc Dz Ds Do
      (perhaps_sat_yes (cond_sat_sgt_ov Do Ds Dz)).
- :
   check_for_sat* cond_sgt Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_slte_nov Do Ds) cond_negate_sgt)).
- :
   check_for_sat* cond_sgt Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_slte_ov Do Ds) cond_negate_sgt)).
- :
   check_for_sat* cond_sgt Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_slte_e Dz) cond_negate_sgt)).
- :
   check_for_sat* cond_sgte Dc Dz Ds Do
      (perhaps_sat_yes (cond_sat_sgte_nov Do Ds)).
- :
   check_for_sat* cond_sgte Dc Dz Ds Do
      (perhaps_sat_yes (cond_sat_sgte_ov Do Ds)).
- :
   check_for_sat* cond_sgte Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_slt_nov Do Ds) cond_negate_sgte)).
- :
   check_for_sat* cond_sgte Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_slt_ov Do Ds) cond_negate_sgte)).
- : check_for_sat* cond_sign Dc Dz Ds Do (perhaps_sat_yes (cond_sat_sign Ds)).
- :
   check_for_sat* cond_sign Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_nsign Ds) cond_negate_sign)).
- : check_for_sat* cond_nsign Dc Dz Ds Do (perhaps_sat_yes (cond_sat_nsign Ds)).
- :
   check_for_sat* cond_nsign Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_sign Ds) cond_negate_nsign)).
- : check_for_sat* cond_ov Dc Dz Ds Do (perhaps_sat_yes (cond_sat_ov Do)).
- :
   check_for_sat* cond_ov Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_nov Do) cond_negate_ov)).
- : check_for_sat* cond_nov Dc Dz Ds Do (perhaps_sat_yes (cond_sat_nov Do)).
- :
   check_for_sat* cond_nov Dc Dz Ds Do
      (perhaps_sat_no (cond_unsat_ (cond_sat_ov Do) cond_negate_nov)).
check_for_sat_ :
   check_for_sat Cond R D
      <- can_cclookup R Dlook
      <- check_for_sat* Cond (cclookup_carry_ Dlook) (cclookup_zero_ Dlook)
            (cclookup_sign_ Dlook) (cclookup_overflow_ Dlook) D.
check_for_sat' :
   Pi N1:nat. Pi B:binary (s N1). Pi F:bit. Pi F':bit. Pi CC:conds. Pi R':rfile.
      Pi Cond:cond. Pi R:rfile.
      determine_conds B F F' CC -> ccupdate R' CC R -> maybe_sat Cond R -> type.
check_for_sat'* :
   Pi N1:nat. Pi B:binary (s N1). Pi BIT:bit. Pi BIT':bit. Pi FC:bit. Pi FZ:bit.
      Pi FS:bit. Pi FO:bit. Pi R:rfile. Pi Cond:cond.
      determine_conds B BIT BIT' (conds_ FC FZ FS FO) -> cclookup_carry R FC
         -> cclookup_zero R FZ -> cclookup_sign R FS -> cclookup_overflow R FO
         -> maybe_sat Cond R -> type.
check_for_sat'_eq_yes :
   check_for_sat'* cond_eq X1 X2 D X3 X4 (maybe_sat_yes (cond_sat_eq D)).
check_for_sat'_eq_no :
   check_for_sat'* cond_eq X1 X2 D X3 X4
      (maybe_sat_no (cond_unsat_ (cond_sat_neq D) cond_negate_eq)).
check_for_sat'_neq_yes :
   check_for_sat'* cond_neq X1 X2 D X3 X4 (maybe_sat_yes (cond_sat_neq D)).
check_for_sat'_neq_no :
   check_for_sat'* cond_neq X1 X2 D X3 X4
      (maybe_sat_no (cond_unsat_ (cond_sat_eq D) cond_negate_neq)).
check_for_sat'_lt_yes :
   check_for_sat'* cond_lt X1 D X2 X3 X4 (maybe_sat_yes (cond_sat_lt D)).
check_for_sat'_lt_no :
   check_for_sat'* cond_lt X1 D X2 X3 X4
      (maybe_sat_no (cond_unsat_ (cond_sat_gte D) cond_negate_lt)).
check_for_sat'_lte_lt :
   check_for_sat'* cond_lte X1 D X2 X3 X4 (maybe_sat_yes (cond_sat_lte_lt D)).
check_for_sat'_lte_e :
   check_for_sat'* cond_lte X1 X2 D X3 X4 (maybe_sat_yes (cond_sat_lte_e D)).
check_for_sat'_lte_no :
   check_for_sat'* cond_lte X1 Dc Dz X2 X3
      (maybe_sat_no (cond_unsat_ (cond_sat_gt Dz Dc) cond_negate_lte)).
check_for_sat'_gt_yes :
   check_for_sat'* cond_gt X1 Dc Dz X2 X3 (maybe_sat_yes (cond_sat_gt Dz Dc)).
check_for_sat'_gt_lt :
   check_for_sat'* cond_gt X1 D X2 X3 X4
      (maybe_sat_no (cond_unsat_ (cond_sat_lte_lt D) cond_negate_gt)).
check_for_sat'_gt_e :
   check_for_sat'* cond_gt X1 X2 D X3 X4
      (maybe_sat_no (cond_unsat_ (cond_sat_lte_e D) cond_negate_gt)).
check_for_sat'_gte_yes :
   check_for_sat'* cond_gte X1 D X2 X3 X4 (maybe_sat_yes (cond_sat_gte D)).
check_for_sat'_gte_no :
   check_for_sat'* cond_gte X1 D X2 X3 X4
      (maybe_sat_no (cond_unsat_ (cond_sat_lt D) cond_negate_gte)).
- :
   check_for_sat'* cond_slt X1 Dc Dz Ds Do
      (maybe_sat_yes (cond_sat_slt_nov Do Ds)).
- :
   check_for_sat'* cond_slt X1 Dc Dz Ds Do
      (maybe_sat_yes (cond_sat_slt_ov Do Ds)).
- :
   check_for_sat'* cond_slt X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_sgte_nov Do Ds) cond_negate_slt)).
- :
   check_for_sat'* cond_slt X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_sgte_ov Do Ds) cond_negate_slt)).
- :
   check_for_sat'* cond_slte X1 Dc Dz Ds Do
      (maybe_sat_yes (cond_sat_slte_nov Do Ds)).
- :
   check_for_sat'* cond_slte X1 Dc Dz Ds Do
      (maybe_sat_yes (cond_sat_slte_ov Do Ds)).
- :
   check_for_sat'* cond_slte X1 Dc Dz Ds Do (maybe_sat_yes (cond_sat_slte_e Dz)).
- :
   check_for_sat'* cond_slte X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_sgt_nov Do Ds Dz) cond_negate_slte)).
- :
   check_for_sat'* cond_slte X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_sgt_ov Do Ds Dz) cond_negate_slte)).
- :
   check_for_sat'* cond_sgt X1 Dc Dz Ds Do
      (maybe_sat_yes (cond_sat_sgt_nov Do Ds Dz)).
- :
   check_for_sat'* cond_sgt X1 Dc Dz Ds Do
      (maybe_sat_yes (cond_sat_sgt_ov Do Ds Dz)).
- :
   check_for_sat'* cond_sgt X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_slte_nov Do Ds) cond_negate_sgt)).
- :
   check_for_sat'* cond_sgt X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_slte_ov Do Ds) cond_negate_sgt)).
- :
   check_for_sat'* cond_sgt X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_slte_e Dz) cond_negate_sgt)).
- :
   check_for_sat'* cond_sgte X1 Dc Dz Ds Do
      (maybe_sat_yes (cond_sat_sgte_nov Do Ds)).
- :
   check_for_sat'* cond_sgte X1 Dc Dz Ds Do
      (maybe_sat_yes (cond_sat_sgte_ov Do Ds)).
- :
   check_for_sat'* cond_sgte X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_slt_nov Do Ds) cond_negate_sgte)).
- :
   check_for_sat'* cond_sgte X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_slt_ov Do Ds) cond_negate_sgte)).
- : check_for_sat'* cond_sign X1 Dc Dz Ds Do (maybe_sat_yes (cond_sat_sign Ds)).
- :
   check_for_sat'* cond_sign X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_nsign Ds) cond_negate_sign)).
- :
   check_for_sat'* cond_nsign X1 Dc Dz Ds Do (maybe_sat_yes (cond_sat_nsign Ds)).
- :
   check_for_sat'* cond_nsign X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_sign Ds) cond_negate_nsign)).
- : check_for_sat'* cond_ov X1 Dc Dz Ds Do (maybe_sat_yes (cond_sat_ov Do)).
- :
   check_for_sat'* cond_ov X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_nov Do) cond_negate_ov)).
- : check_for_sat'* cond_nov X1 Dc Dz Ds Do (maybe_sat_yes (cond_sat_nov Do)).
- :
   check_for_sat'* cond_nov X1 Dc Dz Ds Do
      (maybe_sat_no (cond_unsat_ (cond_sat_ov Do) cond_negate_nov)).
check_for_sat'_ :
   check_for_sat' Cond (rf V1 (conds_ B4 B5 B6 B7) R1) Ddet ccupdate_ D
      <- check_for_sat'* Cond Ddet (cclookup_carry_ cclookup_)
            (cclookup_zero_ cclookup_) (cclookup_sign_ cclookup_)
            (cclookup_overflow_ cclookup_) D.
cond_holds : Pi N1:nat. cond -> binary N1 -> bit -> type.
cond_holds_eq : cond_holds cond_eq B B1 <- is_zero B.
cond_holds_neq : cond_holds cond_neq B B1 <- is_nonzero B.
cond_holds_lt : cond_holds cond_lt B1 one'.
cond_holds_lte_lt : cond_holds cond_lte B1 one'.
cond_holds_lte_e : cond_holds cond_lte B B1 <- is_zero B.
cond_holds_gt : cond_holds cond_gt B zero <- is_nonzero B.
cond_holds_gte : cond_holds cond_gte B1 zero.
cond_holds_slt : cond_holds cond_slt B1 B2.
cond_holds_slte : cond_holds cond_slte B1 B2.
cond_holds_sgt : cond_holds cond_sgt B1 B2.
cond_holds_sgte : cond_holds cond_sgte B1 B2.
cond_holds_sign : cond_holds cond_sign B1 B2.
cond_holds_nsign : cond_holds cond_nsign B1 B2.
cond_holds_ov : cond_holds cond_ov B1 B2.
cond_holds_nov : cond_holds cond_nov B1 B2.
cond_implication :
   Pi N1:nat. Pi B:binary (s N1). Pi CARRY:bit. Pi OVERFLOW:bit. Pi CC:conds.
      Pi R1:rfile. Pi R:rfile. Pi Cond:cond.
      determine_conds B CARRY OVERFLOW CC -> ccupdate R1 CC R -> cond_sat Cond R
         -> cond_holds Cond B CARRY -> type.
cond_implication_eq_y :
   cond_implication (determine_conds_ X1 (determine_zero_yes Diz)) ccupdate_
      (cond_sat_eq (cclookup_zero_ cclookup_)) (cond_holds_eq Diz).
cond_implication_eq_n :
   cond_implication (determine_conds_ X1 (determine_zero_yes Diz)) ccupdate_
      (cond_sat_eq (cclookup_zero_ cclookup_)) (cond_holds_eq Diz).
cond_implication_neq_y :
   cond_implication (determine_conds_ X1 (determine_zero_no Dinz)) ccupdate_
      (cond_sat_neq (cclookup_zero_ cclookup_)) (cond_holds_neq Dinz).
cond_implication_neq_n :
   cond_implication (determine_conds_ X1 (determine_zero_no Dinz)) ccupdate_
      (cond_sat_neq (cclookup_zero_ cclookup_)) (cond_holds_neq Dinz).
cond_implication_lt :
   cond_implication (determine_conds_ X1 X2) ccupdate_
      (cond_sat_lt (cclookup_carry_ cclookup_)) cond_holds_lt.
cond_implication_lte_lt :
   cond_implication (determine_conds_ X1 X2) ccupdate_
      (cond_sat_lte_lt (cclookup_carry_ cclookup_)) cond_holds_lte_lt.
cond_implication_lte_ey :
   cond_implication (determine_conds_ X1 (determine_zero_yes Diz)) ccupdate_
      (cond_sat_lte_e (cclookup_zero_ cclookup_)) (cond_holds_lte_e Diz).
cond_implication_lte_en :
   cond_implication (determine_conds_ X1 (determine_zero_yes Diz)) ccupdate_
      (cond_sat_lte_e (cclookup_zero_ cclookup_)) (cond_holds_lte_e Diz).
cond_implication_gt :
   cond_implication (determine_conds_ X1 (determine_zero_no Dinz)) ccupdate_
      (cond_sat_gt (cclookup_zero_ cclookup_) (cclookup_carry_ cclookup_))
      (cond_holds_gt Dinz).
cond_implication_gte :
   cond_implication (determine_conds_ X1 X2) ccupdate_
      (cond_sat_gte (cclookup_carry_ cclookup_)) cond_holds_gte.
-lt : cond_implication X1 X2 X3 cond_holds_slt.
-lte : cond_implication X1 X2 X3 cond_holds_slte.
-gt : cond_implication X1 X2 X3 cond_holds_sgt.
-gte : cond_implication X1 X2 X3 cond_holds_sgte.
-gte : cond_implication X1 X2 X3 cond_holds_sign.
-gte : cond_implication X1 X2 X3 cond_holds_nsign.
-gte : cond_implication X1 X2 X3 cond_holds_ov.
-gte : cond_implication X1 X2 X3 cond_holds_nov.
can_cond_tp :
   Pi N:nat. Pi Cond:cond. Pi T1:tp. Pi T2:tp. Pi T3:tp.
      cond_tp N Cond T1 T2 T3 -> type.
can_cond_tp_eq :
   can_cond_tp N1 cond_eq T1 (seteq N1 T1) (join (setlt N1 T1) (setgt N1 T1))
      cond_tp_eq.
can_cond_tp_neq :
   can_cond_tp N1 cond_neq T1 (join (setlt N1 T1) (setgt N1 T1)) (seteq N1 T1)
      cond_tp_neq.
can_cond_tp_lt :
   can_cond_tp N1 cond_lt T1 (setlt N1 T1) (join (seteq N1 T1) (setgt N1 T1))
      cond_tp_lt.
can_cond_tp_lte :
   can_cond_tp N1 cond_lte T1 (join (setlt N1 T1) (seteq N1 T1)) (setgt N1 T1)
      cond_tp_lte.
can_cond_tp_gt :
   can_cond_tp N1 cond_gt T1 (setgt N1 T1) (join (setlt N1 T1) (seteq N1 T1))
      cond_tp_gt.
can_cond_tp_gte :
   can_cond_tp N1 cond_gte T1 (join (seteq N1 T1) (setgt N1 T1)) (setlt N1 T1)
      cond_tp_gte.
can_cond_tp_slt : can_cond_tp N1 cond_slt T1 (inti N1) (inti N1) cond_tp_slt.
can_cond_tp_slte : can_cond_tp N1 cond_slte T1 (inti N1) (inti N1) cond_tp_slte.
can_cond_tp_sgt : can_cond_tp N1 cond_sgt T1 (inti N1) (inti N1) cond_tp_sgt.
can_cond_tp_sgte : can_cond_tp N1 cond_sgte T1 (inti N1) (inti N1) cond_tp_sgte.
can_cond_tp_sgte : can_cond_tp N1 cond_sign T1 (inti N1) (inti N1) cond_tp_sign.
can_cond_tp_sgte :
   can_cond_tp N1 cond_nsign T1 (inti N1) (inti N1) cond_tp_nsign.
can_cond_tp_sgte : can_cond_tp N1 cond_ov T1 (inti N1) (inti N1) cond_tp_ov.
can_cond_tp_sgte : can_cond_tp N1 cond_nov T1 (inti N1) (inti N1) cond_tp_nov.
binary_int_eq_type :
   Pi N*bytebits:nat. Pi B:binary N*bytebits. Pi Bdiff:binary N*bytebits.
      Pi B':binary N*bytebits. Pi B1:bit. Pi V:val. Pi N:nat.
      add B Bdiff B' B1 -> is_zero Bdiff -> binary_int theend V B'
         -> product N bytebits N*bytebits
         -> Pi S:htp. of S V (seteq N (number B)) -> type.
binary_int_eq_type_ :
   binary_int_eq_type Dadd Diz Dbi Dp S (of_seteq Dbi' Dp)
      <- add_ident B Diz Dadd'
      <- add_commute Dadd' Dadd''
      <- add_fun3 Dadd Dadd'' X1 Deq
      <- binary_int_resp val_eq_ Deq Dbi Dbi'.
binary_int_lt_type :
   Pi N*bytebits:nat. Pi B:binary N*bytebits. Pi Bdiff:binary N*bytebits.
      Pi B':binary N*bytebits. Pi V:val. Pi N:nat.
      add B Bdiff B' one' -> binary_int theend V B'
         -> product N bytebits N*bytebits
         -> Pi S:htp. of S V (setlt N (number B)) -> type.
binary_int_lt_type_ :
   binary_int_lt_type Dadd Dbi Dp S (of_setlt Dinz' Dadd''' Dbi Dp)
      <- add_carry_nonzero Dadd X2 Dinz
      <- can_neg_nonzero Bdiff Bdiffneg Dinz Dneg
      <- add_commute Dadd Dadd'
      <- add_invert Dadd' Dneg flipbit_one Dadd''
      <- add_commute Dadd'' Dadd'''
      <- neg_nocarry_nonzero Dneg X1 Dinz'.
binary_int_gt_type :
   Pi N*bytebits:nat. Pi B:binary N*bytebits. Pi Bdiff:binary N*bytebits.
      Pi B':binary N*bytebits. Pi V:val. Pi N:nat.
      add B Bdiff B' zero -> is_nonzero Bdiff -> binary_int theend V B'
         -> product N bytebits N*bytebits
         -> Pi S:htp. of S V (setgt N (number B)) -> type.
binary_int_gt_type_ :
   binary_int_gt_type Dadd Dinz Dbi Dp S (of_setgt Dinz Dadd Dbi Dp).
cond_tp_member :
   Pi N*bytebits:nat. Pi B:binary N*bytebits. Pi Bdiff:binary N*bytebits.
      Pi B':binary N*bytebits. Pi CARRY:bit. Pi Cond:cond. Pi V:val. Pi N:nat.
      Pi Tsat:tp. Pi T1:tp.
      add B Bdiff B' CARRY -> cond_holds Cond Bdiff CARRY
         -> binary_int theend V B' -> cond_tp N Cond (number B) Tsat T1
         -> product N bytebits N*bytebits -> Pi S:htp. of S V Tsat -> type.
cond_tp_member_eq :
   cond_tp_member Dadd (cond_holds_eq Diz) Dbi cond_tp_eq Dp S1 Dof
      <- binary_int_eq_type Dadd Diz Dbi Dp S1 Dof.
cond_tp_member_neq_lt :
   cond_tp_member Dadd (cond_holds_neq Dinz) Dbi cond_tp_neq Dp S1
      (subsume (join_intro1 (kof_setgt _ kof_number)) Dof)
      <- binary_int_lt_type Dadd Dbi Dp S1 Dof.
cond_tp_member_neq_gt :
   cond_tp_member Dadd (cond_holds_neq Dinz) Dbi cond_tp_neq Dp S1
      (subsume (join_intro2 (kof_setlt _ kof_number)) Dof)
      <- binary_int_gt_type Dadd Dinz Dbi Dp S1 Dof.
cond_tp_member_lt :
   cond_tp_member Dadd cond_holds_lt Dbi cond_tp_lt Dp S1 Dof
      <- binary_int_lt_type Dadd Dbi Dp S1 Dof.
cond_tp_member_lte_lt :
   cond_tp_member Dadd cond_holds_lte_lt Dbi cond_tp_lte Dp S1
      (subsume (join_intro1 (kof_seteq kof_number)) Dof)
      <- binary_int_lt_type Dadd Dbi Dp S1 Dof.
cond_tp_member_lte_e :
   cond_tp_member Dadd (cond_holds_lte_e Diz) Dbi cond_tp_lte Dp S1
      (subsume (join_intro2 (kof_setlt _ kof_number)) Dof)
      <- binary_int_eq_type Dadd Diz Dbi Dp S1 Dof.
cond_tp_member_gt :
   cond_tp_member Dadd (cond_holds_gt Dinz) Dbi cond_tp_gt Dp S1 Dof
      <- binary_int_gt_type Dadd Dinz Dbi Dp S1 Dof.
cond_tp_member_gte| :
   Pi N*bytebits:nat. Pi Bdiff:binary N*bytebits. Pi B:binary N*bytebits.
      Pi B':binary N*bytebits. Pi V:val. Pi N:nat.
      maybe_zero Bdiff -> add B Bdiff B' zero -> binary_int theend V B'
         -> product N bytebits N*bytebits
         -> Pi S:htp.
                of S V (join (seteq N (number B)) (setgt N (number B))) -> type.
cond_tp_member_gte :
   cond_tp_member Dadd cond_holds_gte Dbi cond_tp_gte Dp S1 Dof
      <- compare_for_zero B1 Dmz
      <- cond_tp_member_gte| Dmz Dadd Dbi Dp S1 Dof.
cond_tp_member_gte|_e :
   cond_tp_member_gte| (maybe_zero_yes Diz) Dadd Dbi Dp S1
      (subsume (join_intro1 (kof_setgt _ kof_number)) Dof)
      <- binary_int_eq_type Dadd Diz Dbi Dp S1 Dof.
cond_tp_member_gte|_gt :
   cond_tp_member_gte| (maybe_zero_no Dinz) Dadd Dbi Dp S1
      (subsume (join_intro2 (kof_seteq kof_number)) Dof)
      <- binary_int_gt_type Dadd Dinz Dbi Dp S1 Dof.
-lt :
   cond_tp_member X1 X2 Dbi cond_tp_slt Dp S Dof
      <- binary_int_type' Dbi Dp Dc
      <- cfp_weaken Dc Dof.
-lte :
   cond_tp_member X1 X2 Dbi cond_tp_slte Dp S Dof
      <- binary_int_type' Dbi Dp Dc
      <- cfp_weaken Dc Dof.
-gt :
   cond_tp_member X1 X2 Dbi cond_tp_sgt Dp S Dof
      <- binary_int_type' Dbi Dp Dc
      <- cfp_weaken Dc Dof.
-gte :
   cond_tp_member X1 X2 Dbi cond_tp_sgte Dp S Dof
      <- binary_int_type' Dbi Dp Dc
      <- cfp_weaken Dc Dof.
-ign :
   cond_tp_member X1 X2 Dbi cond_tp_sign Dp S Dof
      <- binary_int_type' Dbi Dp Dc
      <- cfp_weaken Dc Dof.
-nsign :
   cond_tp_member X1 X2 Dbi cond_tp_nsign Dp S Dof
      <- binary_int_type' Dbi Dp Dc
      <- cfp_weaken Dc Dof.
-ov :
   cond_tp_member X1 X2 Dbi cond_tp_ov Dp S Dof
      <- binary_int_type' Dbi Dp Dc
      <- cfp_weaken Dc Dof.
-nov :
   cond_tp_member X1 X2 Dbi cond_tp_nov Dp S Dof
      <- binary_int_type' Dbi Dp Dc
      <- cfp_weaken Dc Dof.
negate_cond_tp :
   Pi Cond:cond. Pi Cond':cond. Pi N:nat. Pi BT:tp. Pi Tsat:tp. Pi Tunsat:tp.
      cond_negate Cond Cond' -> cond_tp N Cond BT Tsat Tunsat
         -> cond_tp N Cond' BT Tunsat Tsat -> type.
negate_cond_tp_eq : negate_cond_tp cond_negate_eq cond_tp_eq cond_tp_neq.
negate_cond_tp_neq : negate_cond_tp cond_negate_neq cond_tp_neq cond_tp_eq.
negate_cond_tp_lt : negate_cond_tp cond_negate_lt cond_tp_lt cond_tp_gte.
negate_cond_tp_lte : negate_cond_tp cond_negate_lte cond_tp_lte cond_tp_gt.
negate_cond_tp_gt : negate_cond_tp cond_negate_gt cond_tp_gt cond_tp_lte.
negate_cond_tp_gte : negate_cond_tp cond_negate_gte cond_tp_gte cond_tp_lt.
-lt : negate_cond_tp cond_negate_slt cond_tp_slt cond_tp_sgte.
-lte : negate_cond_tp cond_negate_slte cond_tp_slte cond_tp_sgt.
-gt : negate_cond_tp cond_negate_sgt cond_tp_sgt cond_tp_slte.
-gte : negate_cond_tp cond_negate_sgte cond_tp_sgte cond_tp_slt.
-ign : negate_cond_tp cond_negate_sign cond_tp_sign cond_tp_nsign.
-nsign : negate_cond_tp cond_negate_nsign cond_tp_nsign cond_tp_sign.
-ov : negate_cond_tp cond_negate_ov cond_tp_ov cond_tp_nov.
-nov : negate_cond_tp cond_negate_nov cond_tp_nov cond_tp_ov.
cond_tp_eqv :
   Pi BT1:tp. Pi BT2:tp. Pi N:nat. Pi Cond:cond. Pi Tsat1:tp. Pi Tunsat1:tp.
      Pi Tsat2:tp. Pi Tunsat2:tp.
      tr (pnumeq BT1 BT2) -> cond_tp N Cond BT1 Tsat1 Tunsat1
         -> cond_tp N Cond BT2 Tsat2 Tunsat2 -> subtype Tsat1 Tsat2
         -> subtype Tsat2 Tsat1 -> subtype Tunsat1 Tunsat2
         -> subtype Tunsat2 Tunsat1 -> type.
-eq :
   cond_tp_eqv Dtr cond_tp_eq cond_tp_eq (seteq_sub Dtr)
      (seteq_sub (tr_numeq_symm Dtr))
      (join_sub (setgt_sub _ _ _ D1 Dtr) (setlt_sub _ _ _ D1 Dtr))
      (join_sub (setgt_sub _ _ _ D2 (tr_numeq_symm Dtr))
          (setlt_sub _ _ _ D2 (tr_numeq_symm Dtr)))
      <- tr_reg Dtr (propok_numeq D2 D1).
-neq :
   cond_tp_eqv Dtr cond_tp_neq cond_tp_neq
      (join_sub (setgt_sub _ _ _ D1 Dtr) (setlt_sub _ _ _ D1 Dtr))
      (join_sub (setgt_sub _ _ _ D2 (tr_numeq_symm Dtr))
          (setlt_sub _ _ _ D2 (tr_numeq_symm Dtr))) (seteq_sub Dtr)
      (seteq_sub (tr_numeq_symm Dtr))
      <- tr_reg Dtr (propok_numeq D2 D1).
-lt :
   cond_tp_eqv Dtr cond_tp_lt cond_tp_lt (setlt_sub _ _ _ D1 Dtr)
      (setlt_sub _ _ _ D2 (tr_numeq_symm Dtr))
      (join_sub (setgt_sub _ _ _ D1 Dtr) (seteq_sub Dtr))
      (join_sub (setgt_sub _ _ _ D2 (tr_numeq_symm Dtr))
          (seteq_sub (tr_numeq_symm Dtr)))
      <- tr_reg Dtr (propok_numeq D2 D1).
-lte :
   cond_tp_eqv Dtr cond_tp_lte cond_tp_lte
      (join_sub (seteq_sub Dtr) (setlt_sub _ _ _ D1 Dtr))
      (join_sub (seteq_sub (tr_numeq_symm Dtr))
          (setlt_sub _ _ _ D2 (tr_numeq_symm Dtr))) (setgt_sub _ _ _ D1 Dtr)
      (setgt_sub _ _ _ D2 (tr_numeq_symm Dtr))
      <- tr_reg Dtr (propok_numeq D2 D1).
-gt :
   cond_tp_eqv Dtr cond_tp_gt cond_tp_gt (setgt_sub _ _ _ D1 Dtr)
      (setgt_sub _ _ _ D2 (tr_numeq_symm Dtr))
      (join_sub (seteq_sub Dtr) (setlt_sub _ _ _ D1 Dtr))
      (join_sub (seteq_sub (tr_numeq_symm Dtr))
          (setlt_sub _ _ _ D2 (tr_numeq_symm Dtr)))
      <- tr_reg Dtr (propok_numeq D2 D1).
-gte :
   cond_tp_eqv Dtr cond_tp_gte cond_tp_gte
      (join_sub (setgt_sub _ _ _ D1 Dtr) (seteq_sub Dtr))
      (join_sub (setgt_sub _ _ _ D2 (tr_numeq_symm Dtr))
          (seteq_sub (tr_numeq_symm Dtr))) (setlt_sub _ _ _ D1 Dtr)
      (setlt_sub _ _ _ D2 (tr_numeq_symm Dtr))
      <- tr_reg Dtr (propok_numeq D2 D1).
- : cond_tp_eqv X1 cond_tp_slt cond_tp_slt reflex reflex reflex reflex.
- : cond_tp_eqv X1 cond_tp_slte cond_tp_slte reflex reflex reflex reflex.
- : cond_tp_eqv X1 cond_tp_sgt cond_tp_sgt reflex reflex reflex reflex.
- : cond_tp_eqv X1 cond_tp_sgte cond_tp_sgte reflex reflex reflex reflex.
- : cond_tp_eqv X1 cond_tp_sign cond_tp_sign reflex reflex reflex reflex.
- : cond_tp_eqv X1 cond_tp_nsign cond_tp_nsign reflex reflex reflex reflex.
- : cond_tp_eqv X1 cond_tp_ov cond_tp_ov reflex reflex reflex reflex.
- : cond_tp_eqv X1 cond_tp_nov cond_tp_nov reflex reflex reflex reflex.
sat_cond_tp :
   Pi BT:tp. Pi N:nat. Pi Cond:cond. Pi Tsat:tp. Pi Tunsat:tp.
      kof BT knum -> cond_tp N Cond BT Tsat Tunsat -> sat Tsat (rti N) kt
         -> sat Tunsat (rti N) kt -> type.
-eq :
   sat_cond_tp Dkof cond_tp_eq (sat_seteqi Dkof)
      (sat_joini (sat_setgti _ _ Dkof) (sat_setlti _ _ Dkof)).
-neq :
   sat_cond_tp Dkof cond_tp_neq (sat_joini (sat_setgti _ _ Dkof) (sat_setlti _ _ Dkof))
      (sat_seteqi Dkof).
-lt :
   sat_cond_tp Dkof cond_tp_lt (sat_setlti _ _ Dkof)
      (sat_joini (sat_setgti _ _ Dkof) (sat_seteqi Dkof)).
-lte :
   sat_cond_tp Dkof cond_tp_lte (sat_joini (sat_seteqi Dkof) (sat_setlti _ _ Dkof))
      (sat_setgti _ _ Dkof).
-gt :
   sat_cond_tp Dkof cond_tp_gt (sat_setgti _ _ Dkof)
      (sat_joini (sat_seteqi Dkof) (sat_setlti _ _ Dkof)).
-gte :
   sat_cond_tp Dkof cond_tp_gte (sat_joini (sat_setgti _ _ Dkof) (sat_seteqi Dkof))
      (sat_setlti _ _ Dkof).
sat_cond_tp|sat_expi : Pi N:nat. sat (exp b1 (numlit N)) (rti N) kt -> type.
- :
   sat_cond_tp|sat_expi N (sat_expi _ _ _ _ _ Dp tr_numeq_lit kof_numlit sat_b1i)
      <- prod_ident N Dp.
-lt : sat_cond_tp X1 cond_tp_slt D D <- sat_cond_tp|sat_expi N D.
-lte : sat_cond_tp X1 cond_tp_slte D D <- sat_cond_tp|sat_expi N D.
-gt : sat_cond_tp X1 cond_tp_sgt D D <- sat_cond_tp|sat_expi N D.
-gte : sat_cond_tp X1 cond_tp_sgte D D <- sat_cond_tp|sat_expi N D.
-ign : sat_cond_tp X1 cond_tp_sign D D <- sat_cond_tp|sat_expi N D.
-nsign : sat_cond_tp X1 cond_tp_nsign D D <- sat_cond_tp|sat_expi N D.
-ov : sat_cond_tp X1 cond_tp_ov D D <- sat_cond_tp|sat_expi N D.
-nov : sat_cond_tp X1 cond_tp_nov D D <- sat_cond_tp|sat_expi N D.
subtype_metric : Pi T1:tp. Pi T2:tp. subtype T1 T2 -> nat -> type.
subtype_metric_reflex : subtype_metric reflex z.
subtype_metric_reflexeq : subtype_metric (reflexeq X1 X2 X3) z.
subtype_metric_trans :
   subtype_metric (trans D2 D1) N
      <- subtype_metric D1 N1
      <- subtype_metric D2 N2
      <- sum N2 N1 N.
subtype_metric_seteq_sub : subtype_metric (seteq_sub X1) z.
subtype_metric_prod_sub :
   subtype_metric (prod_sub D2 D1) N
      <- subtype_metric D1 N1
      <- subtype_metric D2 N2
      <- sum N1 N2 N.
subtype_metric_exp_sub : subtype_metric (exp_sub X1 D) N <- subtype_metric D N.
subtype_metric_code_sub : subtype_metric (code_sub X1) z.
subtype_metric_arrow_sub : subtype_metric (arrow_sub X1) z.
subtype_metric_cbox_sub : subtype_metric (cbox_sub X1 X2) z.
subtype_metric_cmbox_sub : subtype_metric (cmbox_sub X1 X2 X3 X4) z.
subtype_metric_sptr_sub : subtype_metric (sptr_sub D) N <- subtype_metric D N.
subtype_metric_forall_sub :
   subtype_metric (forall_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1)) N
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             subtype_metric (D t d1 d2) N).
subtype_metric_exists_sub :
   subtype_metric (exists_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1)) N
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             subtype_metric (D t d1 d2) N).
subtype_metric_guard_sub :
   subtype_metric (guard_sub (\x:tr P1. D x)) N
      <- (Pi d:tr P1. subtype_metric (D d) N).
subtype_metric_assert_sub :
   subtype_metric (assert_sub (\x:tr P1. D x)) N
      <- (Pi d:tr P1. subtype_metric (D d) N).
subtype_metric_join_sub :
   subtype_metric (join_sub D2 D1) N
      <- subtype_metric D1 N1
      <- subtype_metric D2 N2
      <- sum N1 N2 N.
subtype_metric_forall_elim :
   subtype_metric (forall_elim X1 (\t:tp. \x:kof t K1. X2 t x)) z.
subtype_metric_exists_intro :
   subtype_metric (exists_intro X1 (\t:tp. \x:kof t K1. X2 t x)) z.
subtype_metric_gen : subtype_metric (gen X1) 1'.
subtype_metric_cogen : subtype_metric (cogen X1) z.
subtype_metric_guard_elim : subtype_metric (guard_elim X1) z.
subtype_metric_gen_guard : subtype_metric (gen_guard X1) 1'.
subtype_metric_assert_intro : subtype_metric (assert_intro X1) z.
subtype_metric_cogen_assert : subtype_metric (cogen_assert X1) z.
subtype_metric_rec_intro :
   subtype_metric (rec_intro (\t:tp. \x:kof t kt. X1 t x)) z.
subtype_metric_rec_elim :
   subtype_metric (rec_elim (\t:tp. \x:kof t kt. X1 t x)) z.
subtype_metric_nsexp_sub : subtype_metric (nsexp_sub X1) 1'.
subtype_metric_void_sub : subtype_metric (void_sub X1) z.
subtype_metric_raa : subtype_metric (raa X1 X2 X3) z.
subtype_metric_meet_intro :
   subtype_metric (meet_intro D2 D1) N
      <- subtype_metric D1 N1
      <- subtype_metric D2 N2
      <- sum N1 N2 N.
subtype_metric_meet_elim1 : subtype_metric (meet_elim1 X1) z.
subtype_metric_meet_elim2 : subtype_metric (meet_elim2 X1) z.
subtype_metric_join_intro1 : subtype_metric (join_intro1 X1) z.
subtype_metric_join_intro2 : subtype_metric (join_intro2 X1) z.
subtype_metric_join_elim :
   subtype_metric (join_elim D2 D1) N
      <- subtype_metric D1 N1
      <- subtype_metric D2 N2
      <- sum N1 N2 N.
subtype_metric_meet_dist_join : subtype_metric meet_dist_join z.
subtype_metric_meet_dist_prod : subtype_metric (meet_dist_prod X1 X2) 1'.
subtype_metric_meet_dist_prod' : subtype_metric (meet_dist_prod' X1 X2) 1'.
subtype_metric_prod_dist_join1 : subtype_metric prod_dist_join1 z.
subtype_metric_prod_dist_join2 : subtype_metric prod_dist_join2 z.
subtype_metric_prod_dist_void1 : subtype_metric (prod_dist_void1 X1) z.
subtype_metric_prod_dist_void2 : subtype_metric (prod_dist_void2 X1) z.
subtype_metric_meet_dist_cbox : subtype_metric (meet_dist_cbox X1 X2 X3 X4) z.
subtype_metric_meet_dist_cmbox : subtype_metric (meet_dist_cmbox X1 X2 X3 X4) z.
subtype_metric_assert_dist_meet1 : subtype_metric assert_dist_meet1 z.
subtype_metric_assert_dist_meet2 : subtype_metric assert_dist_meet2 z.
subtype_metric_exists_dist_meet1 : subtype_metric exists_dist_meet1 z.
subtype_metric_exists_dist_meet2 : subtype_metric exists_dist_meet2 z.
subtype_metric_cforgetm : subtype_metric cforgetm z.
subtype_metric_rtruncate : subtype_metric (rtruncate X1) z.
subtype_metric_rtruncatem : subtype_metric (rtruncatem X1) z.
subtype_metric_ltruncate : subtype_metric (ltruncate X1) z.
subtype_metric_ltruncatem : subtype_metric (ltruncatem X1) z.
subtype_metric_lassoc : subtype_metric lassoc z.
subtype_metric_rassoc : subtype_metric rassoc z.
subtype_metric_luniti : subtype_metric luniti z.
subtype_metric_lunite : subtype_metric lunite z.
subtype_metric_runiti : subtype_metric runiti z.
subtype_metric_runite : subtype_metric runite z.
subtype_metric_explode : subtype_metric (explode X1 X2 X3) z.
subtype_metric_implode : subtype_metric (implode X1 X2 X3) z.
subtype_metric_partition : subtype_metric (partition X1) z.
subtype_metric_conjoin : subtype_metric (conjoin X1) z.
subtype_metric_seteq_forget : subtype_metric (seteq_forget X1) z.
subtype_metric_codeappend : subtype_metric (codeappend X1) z.
subtype_metric_int_cptr_contra : subtype_metric (int_cptr_contra X1 X2) z.
subtype_metric_seteq_goodnum : subtype_metric seteq_goodnum z.
subtype_metric_exp_goodnum : subtype_metric exp_goodnum z.
subtype_metric_sat_goodnum : subtype_metric (sat_goodnum X1) 1'.
subtype_metric_seteq_meet : subtype_metric seteq_meet z.
subtype_metric_trichotomy : subtype_metric (trichotomy X1) z.
subtype_metric_focus : subtype_metric focus z.
boxsub_metric :
   Pi T':tp. Pi N:nat. Pi T1:tp. Pi T2:tp. boxsub T' N T1 T2 -> nat -> type.
boxsub_metric_base :
   boxsub_metric (boxsub_base X1 X2 D) (s N) <- subtype_metric D N.
boxsub_metric_transl :
   boxsub_metric (boxsub_transl D2 D1) N
      <- boxsub_metric D1 N1
      <- subtype_metric D2 N2
      <- sum N1 N2 N.
boxsub_metric_transr :
   boxsub_metric (boxsub_transr D3 D2 D1) N
      <- boxsub_metric D1 N1
      <- subtype_metric D2 N2
      <- subtype_metric D3 N3
      <- sum N2 N3 N23
      <- sum N1 N23 N.
boxsub_metric_shleft :
   boxsub_metric (boxsub_shleft X1 X2 D) (s N) <- boxsub_metric D N.
boxsub_metric_shright :
   boxsub_metric (boxsub_shright X1 X2 D) (s N) <- boxsub_metric D N.
boxsub_metric_meet :
   boxsub_metric (boxsub_meet D2 D1) N
      <- boxsub_metric D1 N1
      <- boxsub_metric D2 N2
      <- sum N1 N2 N.
of_metric : Pi S:htp. Pi V:val. Pi T':tp. of S V T' -> nat -> type.
of_metric_of_atom : of_metric (of_atom X1 X2) z.
of_metric_of_spointer : of_metric (of_spointer X1 D X2) (s N) <- of_metric D N.
of_metric_of_code : of_metric (of_code X1 X2 X3) z.
of_metric_of_seteq : of_metric (of_seteq X1 X2) z.
of_metric_of_append :
   of_metric (of_append D2 D1 X1) (s N)
      <- of_metric D1 N1
      <- of_metric D2 N2
      <- sum N1 N2 N.
of_metric_of_ns : of_metric of_ns z.
of_metric_of_null : of_metric of_null z.
of_metric_forall_intro :
   of_metric (forall_intro (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1) X1)
      (s N)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1. of_metric (D t d1 d2) N).
of_metric_guard_intro :
   of_metric (guard_intro (\x:tr P1. D x) X1) (s N)
      <- (Pi d:tr P1. of_metric (D d) N).
of_metric_meet_intro_val :
   of_metric (meet_intro_val D2 D1) (s N)
      <- of_metric D1 N1
      <- of_metric D2 N2
      <- sum N1 N2 N.
of_metric_subsume :
   of_metric (subsume D2 D1) (s N)
      <- subtype_metric D2 N1
      <- of_metric D1 N2
      <- sum N1 N2 N.
of_metric_of_big_ns : of_metric (of_big_ns X1 X2) z.
of_metric_of_top : of_metric of_top z.
of_metric_of_size_contra :
   of_metric (of_size_contra X1 X2 D2 D1 X3) (s N)
      <- of_metric D1 N1
      <- boxsub_metric D2 N2
      <- sum N2 N1 N.
cfp_metric : Pi S:htp. Pi V:val. Pi T':tp. cfp S V T' -> nat -> type.
cfpelim_metric : Pi S:htp. Pi V:val. Pi T':tp. cfpelim S V T' -> nat -> type.
cfpelim_metric_ : cfpelim_metric (cfpelim_ D X1 X2) N <- cfp_metric D N.
cfp_metric_annot : cfp_metric (cfp_annot D) N <- cfpelim_metric D N.
cfp_metric_app : cfp_metric (cfp_app D) N <- cfpelim_metric D N.
cfp_metric_pi1 : cfp_metric (cfp_pi1 D) N <- cfpelim_metric D N.
cfp_metric_pi2 : cfp_metric (cfp_pi2 D) N <- cfpelim_metric D N.
cfp_metric_kapp : cfp_metric (cfp_kapp D) N <- cfpelim_metric D N.
cfp_metric_case : cfp_metric (cfp_case D) N <- cfpelim_metric D N.
cfp_metric_unroll : cfp_metric (cfp_unroll D) N <- cfpelim_metric D N.
cfp_metric_b0 : cfp_metric cfp_b0 z.
cfp_metric_b1 : cfp_metric cfp_b1 z.
cfp_metric_seteq : cfp_metric (cfp_seteq X1 X2 X3) z.
cfp_metric_ns : cfp_metric cfp_ns z.
cfp_metric_prod :
   cfp_metric (cfp_prod D2 D1 X1) N
      <- cfp_metric D1 N1
      <- cfp_metric D2 N2
      <- max N1 N2 N.
cfp_metric_exp : cfp_metric (cfp_exp X1 X2 X3 D) N <- cfp_metric D N.
cfp_metric_code : cfp_metric (cfp_code X1 X2 X3) z.
cfp_metric_arrow : cfp_metric (cfp_arrow X1 X2 X3 X4 X5 X6) z.
cfp_metric_cbox : cfp_metric (cfp_cbox X1 X2 X3) z.
cfp_metric_cmbox : cfp_metric (cfp_cmbox X1 X2 X3 X4 X5) z.
cfp_metric_sptr : cfp_metric (cfp_sptr X1 D X2) N <- cfp_metric D N.
cfp_metric_forallo :
   cfp_metric
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1) X1) (s N)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             subtype_metric (Dsub t d1 d2) N1)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1. of_metric (Dof t d1 d2) N2)
      <- sum N1 N2 N.
cfp_metric_forallc :
   cfp_metric
      (cfp_forallc (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dc t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1) X1) (s N)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             subtype_metric (Dsub t d1 d2) N1)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1. cfp_metric (Dc t d1 d2) N2)
      <- sum N1 N2 N.
cfp_metric_exists :
   cfp_metric (cfp_exists D X1 (\t:tp. \x:kof t K1. X2 t x)) N <- cfp_metric D N.
cfp_metric_guardo :
   cfp_metric (cfp_guardo (\x:tr P1. Dof x) (\x:tr P1. Dsub x) X1) (s N)
      <- (Pi d:tr P1. subtype_metric (Dsub d) N1)
      <- (Pi d:tr P1. of_metric (Dof d) N2)
      <- sum N1 N2 N.
cfp_metric_guardc :
   cfp_metric (cfp_guardc (\x:tr P1. Dc x) (\x:tr P1. Dsub x) X1) (s N)
      <- (Pi d:tr P1. subtype_metric (Dsub d) N1)
      <- (Pi d:tr P1. cfp_metric (Dc d) N2)
      <- sum N1 N2 N.
cfp_metric_assert : cfp_metric (cfp_assert D X1) N <- cfp_metric D N.
cfp_metric_rec :
   cfp_metric (cfp_rec D (\t:tp. \x:kof t kt. X1 t x)) N <- cfp_metric D N.
cfp_metric_meet :
   cfp_metric (cfp_meet D2 D1) N
      <- cfp_metric D1 N1
      <- cfp_metric D2 N2
      <- max N1 N2 N.
cfp_metric_join1 : cfp_metric (cfp_join1 X1 D) N <- cfp_metric D N.
cfp_metric_join2 : cfp_metric (cfp_join2 X1 D) N <- cfp_metric D N.
cfp_metric_gotptr : cfp_metric (cfp_gotptr X1) z.
can_subtype_metric :
   Pi T1:tp. Pi T2:tp. Pi N:nat. Pi D:subtype T1 T2. subtype_metric D N -> type.
- : can_subtype_metric reflex subtype_metric_reflex.
- : can_subtype_metric (reflexeq X1 X2 X3) subtype_metric_reflexeq.
- :
   can_subtype_metric (trans D2 D1) (subtype_metric_trans Dsum DM2 DM1)
      <- can_subtype_metric D1 DM1
      <- can_subtype_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- : can_subtype_metric (seteq_sub X1) subtype_metric_seteq_sub.
- :
   can_subtype_metric (prod_sub D2 D1) (subtype_metric_prod_sub Dsum DM2 DM1)
      <- can_subtype_metric D1 DM1
      <- can_subtype_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- :
   can_subtype_metric (exp_sub X1 D) (subtype_metric_exp_sub DM)
      <- can_subtype_metric D DM.
- : can_subtype_metric (code_sub X1) subtype_metric_code_sub.
- : can_subtype_metric (arrow_sub X1) subtype_metric_arrow_sub.
- : can_subtype_metric (cbox_sub X1 X2) subtype_metric_cbox_sub.
- : can_subtype_metric (cmbox_sub X1 X2 X3 X4) subtype_metric_cmbox_sub.
- :
   can_subtype_metric (sptr_sub D) (subtype_metric_sptr_sub DM)
      <- can_subtype_metric D DM.
- :
   can_subtype_metric
      (forall_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1))
      (subtype_metric_forall_sub
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM t d1 d2))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             can_subtype_metric (D t d1 d2) (DM t d1 d2)).
- :
   can_subtype_metric
      (exists_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1))
      (subtype_metric_exists_sub
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM t d1 d2))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             can_subtype_metric (D t d1 d2) (DM t d1 d2)).
- :
   can_subtype_metric (guard_sub (\x:tr P1. D x))
      (subtype_metric_guard_sub (\d:tr P1. DM d))
      <- (Pi d:tr P1. can_subtype_metric (D d) (DM d)).
- :
   can_subtype_metric (assert_sub (\x:tr P1. D x))
      (subtype_metric_assert_sub (\d:tr P1. DM d))
      <- (Pi d:tr P1. can_subtype_metric (D d) (DM d)).
- :
   can_subtype_metric (join_sub D2 D1) (subtype_metric_join_sub Dsum DM2 DM1)
      <- can_subtype_metric D1 DM1
      <- can_subtype_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- :
   can_subtype_metric (forall_elim X1 (\t:tp. \x:kof t K1. X2 t x))
      subtype_metric_forall_elim.
- :
   can_subtype_metric (exists_intro X1 (\t:tp. \x:kof t K1. X2 t x))
      subtype_metric_exists_intro.
- : can_subtype_metric (gen X1) subtype_metric_gen.
- : can_subtype_metric (cogen X1) subtype_metric_cogen.
- : can_subtype_metric (guard_elim X1) subtype_metric_guard_elim.
- : can_subtype_metric (gen_guard X1) subtype_metric_gen_guard.
- : can_subtype_metric (assert_intro X1) subtype_metric_assert_intro.
- : can_subtype_metric (cogen_assert X1) subtype_metric_cogen_assert.
- :
   can_subtype_metric (rec_intro (\t:tp. \x:kof t kt. X1 t x))
      subtype_metric_rec_intro.
- :
   can_subtype_metric (rec_elim (\t:tp. \x:kof t kt. X1 t x))
      subtype_metric_rec_elim.
- : can_subtype_metric (nsexp_sub X1) subtype_metric_nsexp_sub.
- : can_subtype_metric (void_sub X1) subtype_metric_void_sub.
- : can_subtype_metric (raa X1 X2 X3) subtype_metric_raa.
- :
   can_subtype_metric (meet_intro D2 D1)
      (subtype_metric_meet_intro Dsum DM2 DM1)
      <- can_subtype_metric D1 DM1
      <- can_subtype_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- : can_subtype_metric (meet_elim1 X1) subtype_metric_meet_elim1.
- : can_subtype_metric (meet_elim2 X1) subtype_metric_meet_elim2.
- : can_subtype_metric (join_intro1 X1) subtype_metric_join_intro1.
- : can_subtype_metric (join_intro2 X1) subtype_metric_join_intro2.
- :
   can_subtype_metric (join_elim D2 D1) (subtype_metric_join_elim Dsum DM2 DM1)
      <- can_subtype_metric D1 DM1
      <- can_subtype_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- : can_subtype_metric meet_dist_join subtype_metric_meet_dist_join.
- : can_subtype_metric (meet_dist_prod X1 X2) subtype_metric_meet_dist_prod.
- : can_subtype_metric (meet_dist_prod' X1 X2) subtype_metric_meet_dist_prod'.
- : can_subtype_metric prod_dist_join1 subtype_metric_prod_dist_join1.
- : can_subtype_metric prod_dist_join2 subtype_metric_prod_dist_join2.
- : can_subtype_metric (prod_dist_void1 X1) subtype_metric_prod_dist_void1.
- : can_subtype_metric (prod_dist_void2 X1) subtype_metric_prod_dist_void2.
- :
   can_subtype_metric (meet_dist_cbox X1 X2 X3 X4) 
subtype_metric_meet_dist_cbox.
- :
   can_subtype_metric (meet_dist_cmbox X1 X2 X3 X4)
      subtype_metric_meet_dist_cmbox.
- : can_subtype_metric assert_dist_meet1 subtype_metric_assert_dist_meet1.
- : can_subtype_metric assert_dist_meet2 subtype_metric_assert_dist_meet2.
- : can_subtype_metric exists_dist_meet1 subtype_metric_exists_dist_meet1.
- : can_subtype_metric exists_dist_meet2 subtype_metric_exists_dist_meet2.
- : can_subtype_metric cforgetm subtype_metric_cforgetm.
- : can_subtype_metric (rtruncate X1) subtype_metric_rtruncate.
- : can_subtype_metric (rtruncatem X1) subtype_metric_rtruncatem.
- : can_subtype_metric (ltruncate X1) subtype_metric_ltruncate.
- : can_subtype_metric (ltruncatem X1) subtype_metric_ltruncatem.
- : can_subtype_metric lassoc subtype_metric_lassoc.
- : can_subtype_metric rassoc subtype_metric_rassoc.
- : can_subtype_metric luniti subtype_metric_luniti.
- : can_subtype_metric lunite subtype_metric_lunite.
- : can_subtype_metric runiti subtype_metric_runiti.
- : can_subtype_metric runite subtype_metric_runite.
- : can_subtype_metric (explode X1 X2 X3) subtype_metric_explode.
- : can_subtype_metric (implode X1 X2 X3) subtype_metric_implode.
- : can_subtype_metric (partition X1) subtype_metric_partition.
- : can_subtype_metric (conjoin X1) subtype_metric_conjoin.
- : can_subtype_metric (codeappend X1) subtype_metric_codeappend.
- : can_subtype_metric (int_cptr_contra X1 X2) subtype_metric_int_cptr_contra.
- : can_subtype_metric (seteq_forget X1) subtype_metric_seteq_forget.
- : can_subtype_metric seteq_goodnum subtype_metric_seteq_goodnum.
- : can_subtype_metric exp_goodnum subtype_metric_exp_goodnum.
- : can_subtype_metric (sat_goodnum X1) subtype_metric_sat_goodnum.
- : can_subtype_metric seteq_meet subtype_metric_seteq_meet.
- : can_subtype_metric (trichotomy X1) subtype_metric_trichotomy.
- : can_subtype_metric focus subtype_metric_focus.
can_boxsub_metric :
   Pi T':tp. Pi M:nat. Pi T1:tp. Pi T2:tp. Pi N:nat. Pi D:boxsub T' M T1 T2.
      boxsub_metric D N -> type.
- :
   can_boxsub_metric (boxsub_base X1 X2 D) (boxsub_metric_base DM)
      <- can_subtype_metric D DM.
- :
   can_boxsub_metric (boxsub_transl D2 D1) (boxsub_metric_transl Dsum DM2 DM1)
      <- can_boxsub_metric D1 DM1
      <- can_subtype_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- :
   can_boxsub_metric (boxsub_transr D3 D2 D1)
      (boxsub_metric_transr Dsum' Dsum DM3 DM2 DM1)
      <- can_boxsub_metric D1 DM1
      <- can_subtype_metric D2 DM2
      <- can_subtype_metric D3 DM3
      <- can_sum N4 N5 N2 Dsum
      <- can_sum N1 N2 N3 Dsum'.
- :
   can_boxsub_metric (boxsub_shleft X1 X2 D) (boxsub_metric_shleft DM)
      <- can_boxsub_metric D DM.
- :
   can_boxsub_metric (boxsub_shright X1 X2 D) (boxsub_metric_shright DM)
      <- can_boxsub_metric D DM.
- :
   can_boxsub_metric (boxsub_meet D2 D1) (boxsub_metric_meet Dsum DM2 DM1)
      <- can_boxsub_metric D1 DM1
      <- can_boxsub_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
can_of_metric :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat. Pi D:of S V T'. of_metric D N -> type.
- : can_of_metric (of_atom X1 X2) of_metric_of_atom.
- :
   can_of_metric (of_spointer X1 D X2) (of_metric_of_spointer DM)
      <- can_of_metric D DM.
- : can_of_metric (of_code X1 X2 X3) of_metric_of_code.
- : can_of_metric (of_seteq X1 X2) of_metric_of_seteq.
- :
   can_of_metric (of_append D2 D1 X1) (of_metric_of_append Dsum DM2 DM1)
      <- can_of_metric D1 DM1
      <- can_of_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- : can_of_metric of_ns of_metric_of_ns.
- : can_of_metric of_null of_metric_of_null.
- :
   can_of_metric
      (forall_intro (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1) X1)
      (of_metric_forall_intro (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM t d1 d2))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             can_of_metric (D t d1 d2) (DM t d1 d2)).
- :
   can_of_metric (guard_intro (\x:tr P1. D x) X1)
      (of_metric_guard_intro (\d:tr P1. DM d))
      <- (Pi d:tr P1. can_of_metric (D d) (DM d)).
- :
   can_of_metric (meet_intro_val D2 D1) (of_metric_meet_intro_val Dsum DM2 DM1)
      <- can_of_metric D1 DM1
      <- can_of_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- :
   can_of_metric (subsume D1 D2) (of_metric_subsume Dsum DM2 DM1)
      <- can_subtype_metric D1 DM1
      <- can_of_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
- : can_of_metric (of_big_ns X1 X2) of_metric_of_big_ns.
- : can_of_metric of_top of_metric_of_top.
- :
   can_of_metric (of_size_contra X1 X2 D2 D1 X3)
      (of_metric_of_size_contra Dsum DM2 DM1)
      <- can_of_metric D1 DM1
      <- can_boxsub_metric D2 DM2
      <- can_sum N1 N2 N3 Dsum.
can_cfp_metric :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat. Pi D:cfp S V T'.
      cfp_metric D N -> type.
can_cfpelim_metric :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat. Pi D:cfpelim S V T'.
      cfpelim_metric D N -> type.
- :
   can_cfpelim_metric (cfpelim_ D X1 X2) (cfpelim_metric_ DM)
      <- can_cfp_metric D DM.
- :
   can_cfp_metric (cfp_annot D) (cfp_metric_annot DM) <- can_cfpelim_metric D DM.
- : can_cfp_metric (cfp_app D) (cfp_metric_app DM) <- can_cfpelim_metric D DM.
- : can_cfp_metric (cfp_pi1 D) (cfp_metric_pi1 DM) <- can_cfpelim_metric D DM.
- : can_cfp_metric (cfp_pi2 D) (cfp_metric_pi2 DM) <- can_cfpelim_metric D DM.
- : can_cfp_metric (cfp_kapp D) (cfp_metric_kapp DM) <- can_cfpelim_metric D DM.
- : can_cfp_metric (cfp_case D) (cfp_metric_case DM) <- can_cfpelim_metric D DM.
- :
   can_cfp_metric (cfp_unroll D) (cfp_metric_unroll DM)
      <- can_cfpelim_metric D DM.
- : can_cfp_metric cfp_b0 cfp_metric_b0.
- : can_cfp_metric cfp_b1 cfp_metric_b1.
- : can_cfp_metric (cfp_seteq X1 X2 X3) cfp_metric_seteq.
- : can_cfp_metric cfp_ns cfp_metric_ns.
- :
   can_cfp_metric (cfp_prod D2 D1 X1) (cfp_metric_prod Dmax DM2 DM1)
      <- can_cfp_metric D1 DM1
      <- can_cfp_metric D2 DM2
      <- can_max N1 N2 N3 Dmax.
- :
   can_cfp_metric (cfp_exp X1 X2 X3 D) (cfp_metric_exp DM)
      <- can_cfp_metric D DM.
- : can_cfp_metric (cfp_code X1 X2 X3) cfp_metric_code.
- : can_cfp_metric (cfp_arrow X1 X2 X3 X4 X5 X6) cfp_metric_arrow.
- : can_cfp_metric (cfp_cbox X1 X2 X3) cfp_metric_cbox.
- : can_cfp_metric (cfp_cmbox X1 X2 X3 X4 X5) cfp_metric_cmbox.
- :
   can_cfp_metric (cfp_sptr X1 D X2) (cfp_metric_sptr DM) <- can_cfp_metric D DM.
- :
   can_cfp_metric
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1) X1)
      (cfp_metric_forallo Dsum
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM2 t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM1 t d1 d2))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             can_subtype_metric (Dsub t d1 d2) (DM1 t d1 d2))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             can_of_metric (Dof t d1 d2) (DM2 t d1 d2))
      <- can_sum N1 N2 N3 Dsum.
- :
   can_cfp_metric
      (cfp_forallc (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dc t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1) X1)
      (cfp_metric_forallc Dsum
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM2 t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM1 t d1 d2))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             can_subtype_metric (Dsub t d1 d2) (DM1 t d1 d2))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             can_cfp_metric (Dc t d1 d2) (DM2 t d1 d2))
      <- can_sum N1 N2 N3 Dsum.
- :
   can_cfp_metric (cfp_exists D X1 (\t:tp. \x:kof t K1. X2 t x))
      (cfp_metric_exists DM)
      <- can_cfp_metric D DM.
- :
   can_cfp_metric (cfp_guardo (\x:tr P1. Dof x) (\x:tr P1. Dsub x) X1)
      (cfp_metric_guardo Dsum (\d:tr P1. DM2 d) (\d:tr P1. DM1 d))
      <- (Pi d:tr P1. can_subtype_metric (Dsub d) (DM1 d))
      <- (Pi d:tr P1. can_of_metric (Dof d) (DM2 d))
      <- can_sum N1 N2 N3 Dsum.
- :
   can_cfp_metric (cfp_guardc (\x:tr P1. Dc x) (\x:tr P1. Dsub x) X1)
      (cfp_metric_guardc Dsum (\d:tr P1. DM2 d) (\d:tr P1. DM1 d))
      <- (Pi d:tr P1. can_subtype_metric (Dsub d) (DM1 d))
      <- (Pi d:tr P1. can_cfp_metric (Dc d) (DM2 d))
      <- can_sum N1 N2 N3 Dsum.
- :
   can_cfp_metric (cfp_assert D X1) (cfp_metric_assert DM)
      <- can_cfp_metric D DM.
- :
   can_cfp_metric (cfp_rec D (\t:tp. \x:kof t kt. X1 t x)) (cfp_metric_rec DM)
      <- can_cfp_metric D DM.
- :
   can_cfp_metric (cfp_meet D2 D1) (cfp_metric_meet Dmax DM2 DM1)
      <- can_cfp_metric D1 DM1
      <- can_cfp_metric D2 DM2
      <- can_max N1 N2 N3 Dmax.
- :
   can_cfp_metric (cfp_join1 X1 D) (cfp_metric_join1 DM) <- can_cfp_metric D DM.
- :
   can_cfp_metric (cfp_join2 X1 D) (cfp_metric_join2 DM) <- can_cfp_metric D DM.
- : can_cfp_metric (cfp_gotptr X1) cfp_metric_gotptr.
cfp_metric_resp :
      htp_eq S S' -> val_eq V V' -> tp_eq T T'
         -> Pi D:cfp S V T. Pi D':cfp S' V' T'.
                cfp_metric D N -> cfp_metric D' N -> type.
- : cfp_metric_resp htp_eq_ val_eq_ tp_eq_ D D DM DM.
ns_exp_metric :
   Pi N:nat. Pi T':tp. Pi S:htp. Pi V:val.
      tp_exp ns N T' -> Pi D:cfp S V T'. cfp_metric D z -> type.
- : ns_exp_metric tp_exp_z cfp_b0 cfp_metric_b0.
- :
   ns_exp_metric (tp_exp_s Dte) (cfp_prod Dc cfp_ns X1)
      (cfp_metric_prod max_z1 DM cfp_metric_ns)
      <- ns_exp_metric Dte Dc DM.
b1_exp_metric :
   Pi N:nat. Pi T':tp. Pi S:htp. Pi V:val.
      tp_exp b1 N T' -> Pi D:cfp S V T'. cfp_metric D z -> type.
- : b1_exp_metric tp_exp_z cfp_b0 cfp_metric_b0.
- :
   b1_exp_metric (tp_exp_s Dte) (cfp_prod Dc cfp_b1 X1)
      (cfp_metric_prod max_z1 DM cfp_metric_b1)
      <- b1_exp_metric Dte Dc DM.
inti_metric :
   Pi S:htp. Pi V:val. Pi N:nat. Pi D:cfp S V (inti N). cfp_metric D z -> type.
- :
   inti_metric (cfp_exp X1 Dte X2 Dc) (cfp_metric_exp DM)
      <- b1_exp_metric Dte Dc DM.
false_implies_cfp_metric :
   Pi S:htp. Pi V:val. Pi T':tp.
      false -> Pi D:cfp S V T'. cfp_metric D z -> type.
equiv_subrtype :
   Pi G:rtp. Pi G':rtp.
      rtpok G -> rtpok G' -> equivr G G' -> subrtype G G' -> type.
equiv_subrtype* :
   Pi N1:nat. Pi G:rtp* N1. Pi G':rtp* N1.
      rtpok* G -> rtpok* G' -> equivr* G G' -> subrtype* G G' -> type.
-nil : equiv_subrtype* X1 X2 equivr_nil subrtype_nil.
-cons :
   equiv_subrtype* (rtpok_cons Drtpok Dkof) (rtpok_cons Drtpok' Dkof')
      (equivr_cons Dequivr Dequiv)
      (subrtype_cons Drsub (reflexeq Dkof' Dkof Dequiv))
      <- equiv_subrtype* Drtpok Drtpok' Dequivr Drsub.
- :
   equiv_subrtype (rtpok_ Drtpok Dkof) (rtpok_ Drtpok' Dkof')
      (equivr_ Dequivr Dequiv) (subrtype_all Drsub (reflexeq Dkof' Dkof Dequiv))
      <- equiv_subrtype* Drtpok Drtpok' Dequivr Drsub.
cfp_unreduce :
   Pi S:htp. Pi V:val. Pi T2:tp. Pi N:nat. Pi T1:tp. Pi D:cfp S V T2.
      cfp_metric D N -> reduce T1 T2 -> kof T1 kt
         -> Pi D':cfp S V T1. cfp_metric D' N -> type.
-id : cfp_unreduce Dc DM reduce_id X1 Dc DM.
-annot :
   cfp_unreduce Dc DM Dreduce Dkof (cfp_annot (cfpelim_ Dc Dkof Dreduce))
      (cfp_metric_annot (cfpelim_metric_ DM)).
-app :
   cfp_unreduce Dc DM Dreduce Dkof (cfp_app (cfpelim_ Dc Dkof Dreduce))
      (cfp_metric_app (cfpelim_metric_ DM)).
-pi1 :
   cfp_unreduce Dc DM Dreduce Dkof (cfp_pi1 (cfpelim_ Dc Dkof Dreduce))
      (cfp_metric_pi1 (cfpelim_metric_ DM)).
-pi2 :
   cfp_unreduce Dc DM Dreduce Dkof (cfp_pi2 (cfpelim_ Dc Dkof Dreduce))
      (cfp_metric_pi2 (cfpelim_metric_ DM)).
-kapp :
   cfp_unreduce Dc DM Dreduce Dkof (cfp_kapp (cfpelim_ Dc Dkof Dreduce))
      (cfp_metric_kapp (cfpelim_metric_ DM)).
-case :
   cfp_unreduce Dc DM Dreduce Dkof (cfp_case (cfpelim_ Dc Dkof Dreduce))
      (cfp_metric_case (cfpelim_metric_ DM)).
-unroll :
   cfp_unreduce Dc DM Dreduce Dkof (cfp_unroll (cfpelim_ Dc Dkof Dreduce))
      (cfp_metric_unroll (cfpelim_metric_ DM)).
-eteq :
   cfp_unreduce (cfp_seteq Dbi Dp Dtr) cfp_metric_seteq (reduce_seteq Dreduce)
      (kof_seteq Dkof)
      (cfp_seteq Dbi Dp
          (tr_equiv (propok_numeq kof_number Dkof)
              (equivp_numeq equiv_reflex (equiv_symm Dkof Dequiv)) Dtr))
      cfp_metric_seteq
      <- reduce_is_equiv Dkof Dreduce Dequiv.
-prod :
   cfp_unreduce (cfp_prod Dc2 Dc1 Dapp) (cfp_metric_prod Dmax DM2 DM1)
      (reduce_prod Dreduce2 Dreduce1) (kof_prod Dkof2 Dkof1)
      (cfp_prod Dc2' Dc1' Dapp) (cfp_metric_prod Dmax DM2' DM1')
      <- cfp_unreduce Dc1 DM1 Dreduce1 Dkof1 Dc1' DM1'
      <- cfp_unreduce Dc2 DM2 Dreduce2 Dkof2 Dc2' DM2'.
-exp :
   cfp_unreduce (cfp_exp X1 Dte Dtr Dc) (cfp_metric_exp DM)
      (reduce_exp Dreducenum DreduceT) (kof_exp Dkofnum DkofT)
      (cfp_exp DkofT Dte'
          (tr_equiv (propok_numeq kof_numlit Dkofnum)
              (equivp_numeq equiv_reflex (equiv_symm Dkofnum Dequiv)) Dtr) Dc')
      (cfp_metric_exp DM')
      <- can_tp_exp T5 N2 T4 Dte'
      <- reduce_tp_exp DreduceT Dte' Dte DreduceExp
      <- kof_tp_exp DkofT Dte' DkofExp
      <- cfp_unreduce Dc DM DreduceExp DkofExp Dc' DM'
      <- reduce_is_equiv Dkofnum Dreducenum Dequiv.
-code :
   cfp_unreduce (cfp_code Dcodeok X1 Dcodeval) cfp_metric_code
      (reduce_code Dreducer) (kof_code Drtpok)
      (cfp_code (ok_coerce Dsubr Dcodeok) Drtpok Dcodeval) cfp_metric_code
      <- srr Drtpok Dreducer Drtpok'
      <- reduce_is_equivr Drtpok Dreducer Dequivr
      <- equiv_subrtype Drtpok Drtpok' Dequivr Dsubr.
-arrow :
   cfp_unreduce (cfp_arrow Dsub X1 Dkof1 Dseg Dhtlookup Datomval)
      cfp_metric_arrow (reduce_arrow Dreducer) (kof_arrow Drtpok)
      (cfp_arrow (trans (prod_sub (code_sub Dsubr) reflex) Dsub) Drtpok Dkof1
          Dseg Dhtlookup Datomval)
      cfp_metric_arrow
      <- srr Drtpok Dreducer Drtpok'
      <- reduce_is_equivr Drtpok Dreducer Dequivr
      <- equiv_subrtype Drtpok Drtpok' Dequivr Dsubr.
-cbox :
   cfp_unreduce (cfp_cbox Dbsub Dhtlookup Datomval) cfp_metric_cbox
      (reduce_cbox Dreduce3 Dreduce2) (kof_cbox Dkof3' Dkof2')
      (cfp_cbox
          (boxsub_transr
              (prod_sub reflex
                  (reflexeq Dkof3' Dkof3 (equiv_symm Dkof3' Dequiv3)))
              (prod_sub (reflexeq Dkof2' Dkof2 (equiv_symm Dkof2' Dequiv2))
                  reflex)
              Dbsub)
          Dhtlookup Datomval)
      cfp_metric_cbox
      <- boxsub_reg Dbsub X1 (kof_prod Dkof2 X2) (kof_prod X3 Dkof3)
      <- reduce_is_equiv Dkof2' Dreduce2 Dequiv2
      <- reduce_is_equiv Dkof3' Dreduce3 Dequiv3.
-cmbox :
   cfp_unreduce (cfp_cmbox Dsub Dbsub Dseg Dhtlookup Datomval) cfp_metric_cmbox
      (reduce_cmbox Dreduce3 Dreduce2) (kof_cmbox Dkof3' Dkof2')
      (cfp_cmbox
          (trans Dsub
              (prod_sub (prod_sub reflex (reflexeq Dkof3 Dkof3' Dequiv3))
                  (prod_sub (reflexeq Dkof2 Dkof2' Dequiv2) reflex)))
          (boxsub_transr
              (prod_sub reflex
                  (reflexeq Dkof3' Dkof3 (equiv_symm Dkof3' Dequiv3)))
              (prod_sub (reflexeq Dkof2' Dkof2 (equiv_symm Dkof2' Dequiv2))
                  reflex)
              Dbsub)
          Dseg Dhtlookup Datomval)
      cfp_metric_cmbox
      <- boxsub_reg Dbsub X1 (kof_prod Dkof2 X2) (kof_prod X3 Dkof3)
      <- reduce_is_equiv Dkof2' Dreduce2 Dequiv2
      <- reduce_is_equiv Dkof3' Dreduce3 Dequiv3.
-ptr :
   cfp_unreduce (cfp_sptr Dsize Dc Datomval) (cfp_metric_sptr DM)
      (reduce_sptr Dreduce) (kof_sptr Dkof') (cfp_sptr Dsize Dc' Datomval)
      (cfp_metric_sptr DM')
      <- cfp_unreduce Dc DM Dreduce Dkof' Dc' DM'.
-forall :
   cfp_unreduce
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R2 K1. Dof t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R2 K1. Dsub t x x1) Dpon2)
      (cfp_metric_forallo DMsum
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1. DMof t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1. DMsub t d1 d2))
      (reduce_forall Dreduce2 (\t:tp. \x:kof t K1. Dreduce t x))
      (kof_forall (\t:tp. \x:kof t K1. Dkof' t x) Dpon1)
      (cfp_forallo
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              Dof t d1 (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              trans
                 (reflexeq (Dkof' t d1) (Dkof2 t d1)
                     (equiv_symm (Dkof' t d1) (Dequiv t d1)))
                 (Dsub t d1 (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) d2)))
          Dpon1)
      (cfp_metric_forallo DMsum
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              DMof t d1 (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              subtype_metric_trans sum_z subtype_metric_reflexeq
                 (DMsub t d1 (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) d2))))
      <- (Pi t:tp. Pi d:kof t K1.
             reduce_is_equiv (Dkof' t d) (Dreduce t d) (Dequiv t d))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R2 K1.
             sat_reg d2 d1 Dpon2 -> of_reg (Dof t d1 d2) (Dkof1 t d1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R2 K1.
             sat_reg d2 d1 Dpon2
                -> subtype_reg1 (Dkof1 t d1) (Dkof2 t d1) (Dsub t d1 d2))
      <- reduce_is_equivpr Dpon1 Dreduce2 Dequiv2.
-forall :
   cfp_unreduce
      (cfp_forallc (\t:tp. \x:kof t K1. \x1:sat t R2 K1. Dc t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R2 K1. Dsub t x x1) Dpon2)
      (cfp_metric_forallc DMsum
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1. DMc t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1. DMsub t d1 d2))
      (reduce_forall Dreduce2 (\t:tp. \x:kof t K1. Dreduce t x))
      (kof_forall (\t:tp. \x:kof t K1. Dkof' t x) Dpon1)
      (cfp_forallc
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              Dc t d1 (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              trans
                 (reflexeq (Dkof' t d1) (Dkof2 t d1)
                     (equiv_symm (Dkof' t d1) (Dequiv t d1)))
                 (Dsub t d1 (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) d2)))
          Dpon1)
      (cfp_metric_forallc DMsum
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              DMc t d1 (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              subtype_metric_trans sum_z subtype_metric_reflexeq
                 (DMsub t d1 (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) d2))))
      <- (Pi t:tp. Pi d:kof t K1.
             reduce_is_equiv (Dkof' t d) (Dreduce t d) (Dequiv t d))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R2 K1.
             sat_reg d2 d1 Dpon2 -> cfp_reg (Dc t d1 d2) (Dkof1 t d1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R2 K1.
             sat_reg d2 d1 Dpon2
                -> subtype_reg1 (Dkof1 t d1) (Dkof2 t d1) (Dsub t d1 d2))
      <- reduce_is_equivpr Dpon1 Dreduce2 Dequiv2.
-exists :
   cfp_unreduce (cfp_exists Dc Dsatarg (\t:tp. \x:kof t K. X1 t x))
      (cfp_metric_exists DM)
      (reduce_exists Dreduce2 (\t:tp. \x:kof t K. Dreduce t x))
      (kof_exists (\t:tp. \x:kof t K. Dkof' t x) Dpon1)
      (cfp_exists Dc'
          (entailment (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2))
              Dsatarg)
          (\t:tp. \x:kof t K. Dkof' t x))
      (cfp_metric_exists DM')
      <- sat_reg Dsatarg Dkofarg Dpon2
      <- cfp_unreduce Dc DM (Dreduce T' Dkofarg) (Dkof' T' Dkofarg) Dc' DM'
      <- reduce_is_equivpr Dpon1 Dreduce2 Dequiv2.
-guard :
   cfp_unreduce (cfp_guardo (\x:tr P1. Dof x) (\x:tr P1. Dsub x) Dpropok)
      (cfp_metric_guardo DMsum (\d:tr P1. DMof d) (\d:tr P1. DMsub d))
      (reduce_guard Dred2 Dred1) (kof_guard Dkof' Dpropok')
      (cfp_guardo (\d:tr P2. Dof (tr_equiv Dpropok Dequivp d))
          (\d:tr P2.
              trans (reflexeq Dkof' Dkof2 (equiv_symm Dkof' Dequiv))
                 (Dsub (tr_equiv Dpropok Dequivp d))) Dpropok')
      (cfp_metric_guardo DMsum (\d:tr P2. DMof (tr_equiv Dpropok Dequivp d))
          (\d:tr P2.
              subtype_metric_trans sum_z subtype_metric_reflexeq
                 (DMsub (tr_equiv Dpropok Dequivp d))))
      <- reduce_is_equivp Dpropok' Dred1 Dequivp
      <- reduce_is_equiv Dkof' Dred2 Dequiv
      <- (Pi d:tr P1. tr_reg d Dpropok -> of_reg (Dof d) Dkof1)
      <- (Pi d:tr P1. tr_reg d Dpropok -> subtype_reg1 Dkof1 Dkof2 (Dsub d)).
-guard :
   cfp_unreduce (cfp_guardc (\x:tr P1. Dc x) (\x:tr P1. Dsub x) Dpropok)
      (cfp_metric_guardc DMsum (\d:tr P1. DMc d) (\d:tr P1. DMsub d))
      (reduce_guard Dred2 Dred1) (kof_guard Dkof' Dpropok')
      (cfp_guardc (\d:tr P2. Dc (tr_equiv Dpropok Dequivp d))
          (\d:tr P2.
              trans (reflexeq Dkof' Dkof2 (equiv_symm Dkof' Dequiv))
                 (Dsub (tr_equiv Dpropok Dequivp d))) Dpropok')
      (cfp_metric_guardc DMsum (\d:tr P2. DMc (tr_equiv Dpropok Dequivp d))
          (\d:tr P2.
              subtype_metric_trans sum_z subtype_metric_reflexeq
                 (DMsub (tr_equiv Dpropok Dequivp d))))
      <- reduce_is_equivp Dpropok' Dred1 Dequivp
      <- reduce_is_equiv Dkof' Dred2 Dequiv
      <- (Pi d:tr P1. tr_reg d Dpropok -> cfp_reg (Dc d) Dkof1)
      <- (Pi d:tr P1. tr_reg d Dpropok -> subtype_reg1 Dkof1 Dkof2 (Dsub d)).
-assert :
   cfp_unreduce (cfp_assert Dc Dtr) (cfp_metric_assert DM)
      (reduce_assert Dred Dredp) (kof_assert Dkof' Dpropok)
      (cfp_assert Dc' (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) Dtr))
      (cfp_metric_assert DM')
      <- cfp_unreduce Dc DM Dred Dkof' Dc' DM'
      <- reduce_is_equivp Dpropok Dredp Dequivp.
-rec :
   cfp_unreduce (cfp_rec Dc (\t:tp. \x:kof t kt. X1 t x)) (cfp_metric_rec DM)
      (reduce_rec (\t:tp. \x:kof t kt. Dreduce t x))
      (kof_rec (\t:tp. \x:kof t kt. Dkof' t x))
      (cfp_rec Dc' (\t:tp. \x:kof t kt. Dkof' t x)) (cfp_metric_rec DM')
      <- substitute2 (\t:tp. \x:kof t kt. Dreduce t x)
            (kof_rec (\t:tp. \x:kof t kt. Dkof' t x))
            (reduce_rec (\t:tp. \x:kof t kt. Dreduce t x)) Dreduce'
      <- cfp_unreduce Dc DM Dreduce'
            (Dkof' (rec (\t:tp. T2 t)) (kof_rec (\t:tp. \x:kof t kt. Dkof' t x)))
            Dc' DM'.
-meet :
   cfp_unreduce (cfp_meet Dc2 Dc1) (cfp_metric_meet Dmax DM2 DM1)
      (reduce_meet Dreduce2 Dreduce1) (kof_meet Dkof2 Dkof1)
      (cfp_meet Dc2' Dc1') (cfp_metric_meet Dmax DM2' DM1')
      <- cfp_unreduce Dc1 DM1 Dreduce1 Dkof1 Dc1' DM1'
      <- cfp_unreduce Dc2 DM2 Dreduce2 Dkof2 Dc2' DM2'.
-join1 :
   cfp_unreduce (cfp_join1 X1 Dc) (cfp_metric_join1 DM)
      (reduce_join Dreduce2 Dreduce1) (kof_join Dkof2 Dkof1)
      (cfp_join1 Dkof2 Dc') (cfp_metric_join1 DM')
      <- cfp_unreduce Dc DM Dreduce1 Dkof1 Dc' DM'.
-join2 :
   cfp_unreduce (cfp_join2 X1 Dc) (cfp_metric_join2 DM)
      (reduce_join Dreduce2 Dreduce1) (kof_join Dkof2 Dkof1)
      (cfp_join2 Dkof1 Dc') (cfp_metric_join2 DM')
      <- cfp_unreduce Dc DM Dreduce2 Dkof2 Dc' DM'.
cfp_munreduce :
   Pi S:htp. Pi V:val. Pi T2:tp. Pi N:nat. Pi T1:tp. Pi D:cfp S V T2.
      cfp_metric D N -> mreduce T1 T2 -> kof T1 kt
         -> Pi D':cfp S V T1. cfp_metric D' N -> type.
-id : cfp_munreduce Dc DM mreduce_id X1 Dc DM.
-tep :
   cfp_munreduce Dc DM3 (mreduce_step D23 D12) Dkof Dc'' DM1
      <- sr Dkof D12 Dkof'
      <- cfp_munreduce Dc DM3 D23 Dkof' Dc' DM2
      <- cfp_unreduce Dc' DM2 D12 Dkof Dc'' DM1.
cfp_reduce :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi N:nat. Pi T2:tp. Pi D:cfp S V T1.
      cfp_metric D N -> reduce T1 T2
         -> Pi D':cfp S V T2. cfp_metric D' N -> type.
cfpelim_reduce :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi N:nat. Pi T2:tp. Pi D:cfpelim S V T1.
      cfpelim_metric D N -> reduce T1 T2
         -> Pi D':cfp S V T2. cfp_metric D' N -> type.
- :
   cfpelim_reduce (cfpelim_ Dc Dkof Dred1) (cfpelim_metric_ DM) Dred2 Dc'' DM''
      <- diamond Dkof Dred1 Dred2 Dred1' Dred2'
      <- cfp_reduce Dc DM Dred1' Dc' DM'
      <- sr Dkof Dred2 Dkof'
      <- cfp_unreduce Dc' DM' Dred2' Dkof' Dc'' DM''.
-id : cfp_reduce Dc DM reduce_id Dc DM.
-annot :
   cfp_reduce (cfp_annot Dc) (cfp_metric_annot DM) Dred Dc' DM'
      <- cfpelim_reduce Dc DM Dred Dc' DM'.
-app :
   cfp_reduce (cfp_app Dc) (cfp_metric_app DM) Dred Dc' DM'
      <- cfpelim_reduce Dc DM Dred Dc' DM'.
-pi1 :
   cfp_reduce (cfp_pi1 Dc) (cfp_metric_pi1 DM) Dred Dc' DM'
      <- cfpelim_reduce Dc DM Dred Dc' DM'.
-pi2 :
   cfp_reduce (cfp_pi2 Dc) (cfp_metric_pi2 DM) Dred Dc' DM'
      <- cfpelim_reduce Dc DM Dred Dc' DM'.
-kapp :
   cfp_reduce (cfp_kapp Dc) (cfp_metric_kapp DM) Dred Dc' DM'
      <- cfpelim_reduce Dc DM Dred Dc' DM'.
-case :
   cfp_reduce (cfp_case Dc) (cfp_metric_case DM) Dred Dc' DM'
      <- cfpelim_reduce Dc DM Dred Dc' DM'.
-unroll :
   cfp_reduce (cfp_unroll Dc) (cfp_metric_unroll DM) Dred Dc' DM'
      <- cfpelim_reduce Dc DM Dred Dc' DM'.
-eteq :
   cfp_reduce (cfp_seteq Dbi Dp Dtr) cfp_metric_seteq (reduce_seteq Dreduce)
      (cfp_seteq Dbi Dp
          (tr_equiv (propok_numeq kof_number Dkof')
              (equivp_numeq equiv_reflex Dequiv) Dtr)) cfp_metric_seteq
      <- tr_reg Dtr (propok_numeq X1 Dkof)
      <- sr Dkof Dreduce Dkof'
      <- reduce_is_equiv Dkof Dreduce Dequiv.
-prod :
   cfp_reduce (cfp_prod Dc2 Dc1 Dapp) (cfp_metric_prod Dmax DM2 DM1)
      (reduce_prod Dreduce2 Dreduce1) (cfp_prod Dc2' Dc1' Dapp)
      (cfp_metric_prod Dmax DM2' DM1')
      <- cfp_reduce Dc1 DM1 Dreduce1 Dc1' DM1'
      <- cfp_reduce Dc2 DM2 Dreduce2 Dc2' DM2'.
-exp :
   cfp_reduce (cfp_exp Dkof Dte Dtr Dc) (cfp_metric_exp DM)
      (reduce_exp Dreduce2 Dreduce1)
      (cfp_exp Dkof' Dte'
          (tr_equiv (propok_numeq kof_numlit Dkofnum')
              (equivp_numeq equiv_reflex Dequiv) Dtr) Dc')
      (cfp_metric_exp DM')
      <- tr_reg Dtr (propok_numeq X1 Dkofnum)
      <- sr Dkof Dreduce1 Dkof'
      <- sr Dkofnum Dreduce2 Dkofnum'
      <- can_tp_exp T6 N2 T4 Dte'
      <- reduce_tp_exp Dreduce1 Dte Dte' DreduceExp
      <- cfp_reduce Dc DM DreduceExp Dc' DM'
      <- reduce_is_equiv Dkofnum Dreduce2 Dequiv.
-code :
   cfp_reduce (cfp_code Dcodeok Drtpok Dcodeval) cfp_metric_code
      (reduce_code Dreducer)
      (cfp_code (ok_coerce Dsubr Dcodeok) Drtpok' Dcodeval) cfp_metric_code
      <- srr Drtpok Dreducer Drtpok'
      <- reduce_is_equivr Drtpok Dreducer Dequivr
      <- equivr_symm Drtpok Dequivr Dequivr'
      <- equiv_subrtype Drtpok' Drtpok Dequivr' Dsubr.
-arrow :
   cfp_reduce (cfp_arrow Dsub Drtpok Dkof1 Dseg Dhtlookup Datomval)
      cfp_metric_arrow (reduce_arrow Dreducer)
      (cfp_arrow (trans (prod_sub (code_sub Dsubr) reflex) Dsub) Drtpok' Dkof1
          Dseg Dhtlookup Datomval)
      cfp_metric_arrow
      <- srr Drtpok Dreducer Drtpok'
      <- reduce_is_equivr Drtpok Dreducer Dequivr
      <- equivr_symm Drtpok Dequivr Dequivr'
      <- equiv_subrtype Drtpok' Drtpok Dequivr' Dsubr.
-cbox :
   cfp_reduce (cfp_cbox Dbsub Dhtlookup Datomval) cfp_metric_cbox
      (reduce_cbox Dreduce3 Dreduce2)
      (cfp_cbox
          (boxsub_transr (prod_sub reflex (reflexeq Dkof3' Dkof3 Dequiv3))
              (prod_sub (reflexeq Dkof2' Dkof2 Dequiv2) reflex) Dbsub)
          Dhtlookup Datomval)
      cfp_metric_cbox
      <- boxsub_reg Dbsub X1 (kof_prod Dkof2 X2) (kof_prod X3 Dkof3)
      <- sr Dkof2 Dreduce2 Dkof2'
      <- sr Dkof3 Dreduce3 Dkof3'
      <- reduce_is_equiv Dkof2 Dreduce2 Dequiv2
      <- reduce_is_equiv Dkof3 Dreduce3 Dequiv3.
-cmbox :
   cfp_reduce (cfp_cmbox Dsub Dbsub Dseg Dhtlookup Datomval) cfp_metric_cmbox
      (reduce_cmbox Dreduce3 Dreduce2)
      (cfp_cmbox
          (trans Dsub
              (prod_sub
                  (prod_sub reflex
                      (reflexeq Dkof3 Dkof3' (equiv_symm Dkof3 Dequiv3)))
                  (prod_sub (reflexeq Dkof2 Dkof2' (equiv_symm Dkof2 Dequiv2))
                      reflex)))
          (boxsub_transr (prod_sub reflex (reflexeq Dkof3' Dkof3 Dequiv3))
              (prod_sub (reflexeq Dkof2' Dkof2 Dequiv2) reflex) Dbsub) Dseg
          Dhtlookup Datomval)
      cfp_metric_cmbox
      <- boxsub_reg Dbsub X1 (kof_prod Dkof2 X2) (kof_prod X3 Dkof3)
      <- sr Dkof2 Dreduce2 Dkof2'
      <- sr Dkof3 Dreduce3 Dkof3'
      <- reduce_is_equiv Dkof2 Dreduce2 Dequiv2
      <- reduce_is_equiv Dkof3 Dreduce3 Dequiv3.
-ptr :
   cfp_reduce (cfp_sptr Dsize Dc Datomval) (cfp_metric_sptr DM)
      (reduce_sptr Dreduce) (cfp_sptr Dsize Dc' Datomval) (cfp_metric_sptr DM')
      <- cfp_reduce Dc DM Dreduce Dc' DM'.
-forall :
   cfp_reduce
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1) Dpon1)
      (cfp_metric_forallo DMsum
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMof t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMsub t d1 d2))
      (reduce_forall Dreduce2 (\t:tp. \x:kof t K1. Dreduce t x))
      (cfp_forallo
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              Dof t d1
                 (entailment
                     (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2)) d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              trans (reflexeq (Dkof3 t d1) (Dkof2 t d1) (Dequiv t d1))
                 (Dsub t d1
                     (entailment
                         (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2))
                         d2)))
          Dpon2)
      (cfp_metric_forallo DMsum
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              DMof t d1
                 (entailment
                     (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2)) d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              subtype_metric_trans sum_z subtype_metric_reflexeq
                 (DMsub t d1
                     (entailment
                         (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2))
                         d2))))
      <- srpr Dpon1 Dreduce2 Dpon2
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon1 -> of_reg (Dof t d1 d2) (Dkof1 t d1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon1
                -> subtype_reg1 (Dkof1 t d1) (Dkof2 t d1) (Dsub t d1 d2))
      <- (Pi t:tp. Pi d:kof t K1.
             reduce_is_equiv (Dkof2 t d) (Dreduce t d) (Dequiv t d))
      <- (Pi t:tp. Pi d:kof t K1. sr (Dkof2 t d) (Dreduce t d) (Dkof3 t d))
      <- reduce_is_equivpr Dpon1 Dreduce2 Dequiv2.
-forall :
   cfp_reduce
      (cfp_forallc (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dc t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1) Dpon1)
      (cfp_metric_forallc DMsum
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMc t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMsub t d1 d2))
      (reduce_forall Dreduce2 (\t:tp. \x:kof t K1. Dreduce t x))
      (cfp_forallc
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              Dc t d1
                 (entailment
                     (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2)) d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              trans (reflexeq (Dkof3 t d1) (Dkof2 t d1) (Dequiv t d1))
                 (Dsub t d1
                     (entailment
                         (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2))
                         d2)))
          Dpon2)
      (cfp_metric_forallc DMsum
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              DMc t d1
                 (entailment
                     (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2)) d2))
          (\t:tp. \d1:kof t K1. \d2:sat t R2 K1.
              subtype_metric_trans sum_z subtype_metric_reflexeq
                 (DMsub t d1
                     (entailment
                         (entails_equiv Dpon1 Dpon2 (equivpr_symm Dpon1 Dequiv2))
                         d2))))
      <- srpr Dpon1 Dreduce2 Dpon2
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon1 -> cfp_reg (Dc t d1 d2) (Dkof1 t d1))
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon1
                -> subtype_reg1 (Dkof1 t d1) (Dkof2 t d1) (Dsub t d1 d2))
      <- (Pi t:tp. Pi d:kof t K1.
             reduce_is_equiv (Dkof2 t d) (Dreduce t d) (Dequiv t d))
      <- (Pi t:tp. Pi d:kof t K1. sr (Dkof2 t d) (Dreduce t d) (Dkof3 t d))
      <- reduce_is_equivpr Dpon1 Dreduce2 Dequiv2.
-exists :
   cfp_reduce (cfp_exists Dc Dsatarg (\t:tp. \x:kof t K. Dkof t x))
      (cfp_metric_exists DM)
      (reduce_exists Dreduce2 (\t:tp. \x:kof t K. Dreduce t x))
      (cfp_exists Dc' (entailment (entails_equiv Dpon2 Dpon1 Dequiv2) Dsatarg)
          (\t:tp. \x:kof t K. Dkof' t x))
      (cfp_metric_exists DM')
      <- (Pi t:tp. Pi d:kof t K. sr (Dkof t d) (Dreduce t d) (Dkof' t d))
      <- sat_reg Dsatarg Dkofarg Dpon1
      <- srpr Dpon1 Dreduce2 Dpon2
      <- cfp_reduce Dc DM (Dreduce T' Dkofarg) Dc' DM'
      <- reduce_is_equivpr Dpon1 Dreduce2 Dequiv2.
-guard :
   cfp_reduce (cfp_guardo (\x:tr P1. Dof x) (\x:tr P1. Dsub x) Dpropok)
      (cfp_metric_guardo DMsum (\d:tr P1. DMof d) (\d:tr P1. DMsub d))
      (reduce_guard Dred2 Dred1)
      (cfp_guardo
          (\d:tr P2. Dof (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) d))
          (\d:tr P2.
              trans (reflexeq Dkof3 Dkof2 Dequiv)
                 (Dsub (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) d)))
          Dpropok')
      (cfp_metric_guardo DMsum
          (\d:tr P2. DMof (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) d))
          (\d:tr P2.
              subtype_metric_trans sum_z subtype_metric_reflexeq
                 (DMsub (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) d))))
      <- reduce_is_equivp Dpropok Dred1 Dequivp
      <- srp Dpropok Dred1 Dpropok'
      <- (Pi d:tr P1. tr_reg d Dpropok -> of_reg (Dof d) Dkof1)
      <- (Pi d:tr P1. tr_reg d Dpropok -> subtype_reg1 Dkof1 Dkof2 (Dsub d))
      <- reduce_is_equiv Dkof2 Dred2 Dequiv
      <- sr Dkof2 Dred2 Dkof3.
-guard :
   cfp_reduce (cfp_guardc (\x:tr P1. Dc x) (\x:tr P1. Dsub x) Dpropok)
      (cfp_metric_guardc DMsum (\d:tr P1. DMc d) (\d:tr P1. DMsub d))
      (reduce_guard Dred2 Dred1)
      (cfp_guardc
          (\d:tr P2. Dc (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) d))
          (\d:tr P2.
              trans (reflexeq Dkof3 Dkof2 Dequiv)
                 (Dsub (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) d)))
          Dpropok')
      (cfp_metric_guardc DMsum
          (\d:tr P2. DMc (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) d))
          (\d:tr P2.
              subtype_metric_trans sum_z subtype_metric_reflexeq
                 (DMsub (tr_equiv Dpropok (equivp_symm Dpropok Dequivp) d))))
      <- reduce_is_equivp Dpropok Dred1 Dequivp
      <- srp Dpropok Dred1 Dpropok'
      <- (Pi d:tr P1. tr_reg d Dpropok -> cfp_reg (Dc d) Dkof1)
      <- (Pi d:tr P1. tr_reg d Dpropok -> subtype_reg1 Dkof1 Dkof2 (Dsub d))
      <- reduce_is_equiv Dkof2 Dred2 Dequiv
      <- sr Dkof2 Dred2 Dkof3.
-assert :
   cfp_reduce (cfp_assert Dc Dtr) (cfp_metric_assert DM)
      (reduce_assert Dred Dredp)
      (cfp_assert Dc' (tr_equiv Dpropok' Dequivp Dtr)) (cfp_metric_assert DM')
      <- cfp_reduce Dc DM Dred Dc' DM'
      <- tr_reg Dtr Dpropok
      <- reduce_is_equivp Dpropok Dredp Dequivp
      <- srp Dpropok Dredp Dpropok'.
-rec :
   cfp_reduce (cfp_rec Dc (\t:tp. \x:kof t kt. Dkof t x)) (cfp_metric_rec DM)
      (reduce_rec (\t:tp. \x:kof t kt. Dreduce t x))
      (cfp_rec Dc' (\t:tp. \x:kof t kt. Dkof' t x)) (cfp_metric_rec DM')
      <- (Pi t:tp. Pi d:kof t kt. sr (Dkof t d) (Dreduce t d) (Dkof' t d))
      <- substitute2 (\t:tp. \x:kof t kt. Dreduce t x)
            (kof_rec (\t:tp. \x:kof t kt. Dkof t x))
            (reduce_rec (\t:tp. \x:kof t kt. Dreduce t x)) Dreduce'
      <- cfp_reduce Dc DM Dreduce' Dc' DM'.
-meet :
   cfp_reduce (cfp_meet Dc2 Dc1) (cfp_metric_meet Dmax DM2 DM1)
      (reduce_meet Dreduce2 Dreduce1) (cfp_meet Dc2' Dc1')
      (cfp_metric_meet Dmax DM2' DM1')
      <- cfp_reduce Dc1 DM1 Dreduce1 Dc1' DM1'
      <- cfp_reduce Dc2 DM2 Dreduce2 Dc2' DM2'.
-join1 :
   cfp_reduce (cfp_join1 Dkof Dc) (cfp_metric_join1 DM)
      (reduce_join Dreduce2 Dreduce1) (cfp_join1 Dkof' Dc')
      (cfp_metric_join1 DM')
      <- sr Dkof Dreduce2 Dkof'
      <- cfp_reduce Dc DM Dreduce1 Dc' DM'.
-join2 :
   cfp_reduce (cfp_join2 Dkof Dc) (cfp_metric_join2 DM)
      (reduce_join Dreduce2 Dreduce1) (cfp_join2 Dkof' Dc')
      (cfp_metric_join2 DM')
      <- sr Dkof Dreduce1 Dkof'
      <- cfp_reduce Dc DM Dreduce2 Dc' DM'.
cfp_mreduce :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi N:nat. Pi T2:tp. Pi D:cfp S V T1.
      cfp_metric D N -> mreduce T1 T2
         -> Pi D':cfp S V T2. cfp_metric D' N -> type.
-id : cfp_mreduce D DM mreduce_id D DM.
-tep :
   cfp_mreduce D DM (mreduce_step D23 D12) D'' DM''
      <- cfp_reduce D DM D12 D' DM'
      <- cfp_mreduce D' DM' D23 D'' DM''.
cfp_equiv :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi N:nat. Pi T2:tp. Pi D:cfp S V T1.
      cfp_metric D N -> equiv T1 T2 -> kof T2 kt
         -> Pi D':cfp S V T2. cfp_metric D' N -> type.
cfp_equiv_ :
   cfp_equiv Dc DM Dequiv Dkof2 Dc'' DM''
      <- cfp_weaken Dc Dof
      <- of_reg Dof Dkof1
      <- church_rosser Dkof1 Dequiv Dreduce1 Dreduce2 X1
      <- cfp_mreduce Dc DM Dreduce1 Dc' DM'
      <- cfp_munreduce Dc' DM' Dreduce2 Dkof2 Dc'' DM''.
cfp_reduce' :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi T2:tp.
      cfp S V T1 -> reduce T1 T2 -> cfp S V T2 -> type.
- :
   cfp_reduce' Dc Dreduce Dc'
      <- can_cfp_metric Dc DM
      <- cfp_reduce Dc DM Dreduce Dc' X1.
cfp_mreduce' :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi T2:tp.
      cfp S V T1 -> mreduce T1 T2 -> cfp S V T2 -> type.
- :
   cfp_mreduce' Dc Dreduce Dc'
      <- can_cfp_metric Dc DM
      <- cfp_mreduce Dc DM Dreduce Dc' X1.
cf* :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N':nat. Pi N:nat. Pi D:of S V T'.
      of_metric D N -> Pi D':cfp S V T'. cfp_metric D' N' -> leq N' N -> type.
cfsub :
      Pi N:nat. Pi Dc:cfp S V T1.
      cfp_metric Dc Nc
         -> Pi Dsub:subtype T1 T2.
                subtype_metric Dsub Nsub -> sum Nsub Nc N
                   -> Pi Dc':cfp S V T2.
                          cfp_metric Dc' Nc' -> leq Nc' N -> type.
cfsubexp :
      Pi N:nat. Pi Dc:cfp S V T1.
      cfp_metric Dc Nc
         -> Pi Dsub:subtype T T'.
                subtype_metric Dsub Nsub -> sum Nsub Nc N -> tp_exp T Nexp T1
                   -> tp_exp T' Nexp T2
                   -> Pi Dc':cfp S V T2.
                          cfp_metric Dc' Nc' -> leq Nc' N -> type.
val_size* :
   Pi N:nat. Pi D:cfp S V T'.
      cfp_metric D N -> sat T' (rti Nsz) kt -> size V Nsz -> type.
val_size** :
   Pi N:nat. Pi D:cfp S V T'.
      cfp_metric D N -> csat T' (rti Nsz) kt -> size V Nsz -> type.
val_size_elim :
   Pi N:nat. Pi D:cfpelim S V T'.
      cfpelim_metric D N -> csat T' (rti Nsz) kt -> size V Nsz -> type.
sat_tn_good* :
   Pi N:nat. Pi D:cfp S V T.
      cfp_metric D N -> sat T (rtn T') kt -> tr (good T') -> type.
sat_tn_good** :
   Pi N:nat. Pi D:cfp S V T.
      cfp_metric D N -> csat T (rtn T') kt -> tr (good T') -> type.
sat_tn_good_elim :
   Pi N:nat. Pi D:cfpelim S V T.
      cfpelim_metric D N -> csat T (rtn T') kt -> tr (good T') -> type.
val_sizen* :
   Pi N:nat.  Pi D:cfp S V T'.
      cfp_metric D N -> sat T' (rtn TN) kt -> size V Nsz
         -> tr (pnumeq TN (numlit Nsz)) -> type.
cfp_forall_inst* :
   Pi N:nat. Pi D:cfp S V (forall K R (\t:tp. T' t)).
      cfp_metric D (s N) -> sat Targ R K
         -> Pi D':cfp S V (T' Targ). cfp_metric D' N' -> leq N' N -> type.
cfp_guard_inst* :
   Pi S:htp. Pi V:val. Pi P:prop. Pi T':tp. Pi N':nat. Pi N:nat.
      Pi D:cfp S V (guard P T').
      cfp_metric D (s N) -> tr P
         -> Pi D':cfp S V T'. cfp_metric D' N' -> leq N' N -> type.
boxsub_subsume* :
   Pi T':tp. Pi Nsz:nat. Pi T1:tp. Pi T2:tp. Pi Nbsub:nat. Pi S:htp. Pi V:val.
      Pi Nc:nat. Pi V1:val. Pi V2:val. Pi Nc1:nat. Pi Nc2:nat. Pi N:nat.
      Pi Dbsub:boxsub T' Nsz T1 T2.
      boxsub_metric Dbsub Nbsub
         -> Pi Dc:cfp S V T'.
                cfp_metric Dc Nc -> sum Nbsub Nc N -> separate Nsz V V1 V2
                   -> Pi Dc1:cfp S V1 T1.
                          cfp_metric Dc1 Nc1 -> leq Nc1 N
                             -> Pi Dc2:cfp S V2 T2.
                                    cfp_metric Dc2 Nc2 -> leq Nc2 N -> type.
- :
   cfp_forall_inst* N
      (cfp_forallo (\t:tp. \x:kof t K. \x1:sat t R K. Dof t x x1)
          (\t:tp. \x:kof t K. \x1:sat t R K. Dsub t x x1) Dpon)
      (cfp_metric_forallo DMsum
          (\t:tp. \d1:kof t K. \d2:sat t R K. DMof t d1 d2)
          (\t:tp. \d1:kof t K. \d2:sat t R K. DMsub t d1 d2)) Dsat Dc' DMc'
      Dleq3
      <- sat_reg Dsat Dkof X1
      <- employ_sum Nsub Nc N DMsum
      <- cf* Nc (Dof T' Dkof Dsat) (DMof T' Dkof Dsat) Dc DMc Dleq
      <- sum_monotone2' Dleq DMsum' DMsum Dleq1
      <- employ_leq N' N Dleq1
      <- cfsub N' Dc DMc (Dsub T' Dkof Dsat) (DMsub T' Dkof Dsat) DMsum' Dc'
            DMc' Dleq2
      <- leq_trans Dleq2 Dleq1 Dleq3.
- :
   cfp_forall_inst* N
      (cfp_forallc (\t:tp. \x:kof t K. \x1:sat t R K. Dc t x x1)
          (\t:tp. \x:kof t K. \x1:sat t R K. Dsub t x x1) Dpon)
      (cfp_metric_forallc DMsum (\t:tp. \d1:kof t K. \d2:sat t R K. DMc t d1 d2)
          (\t:tp. \d1:kof t K. \d2:sat t R K. DMsub t d1 d2))
      Dsat Dc' DMc' Dleq
      <- sat_reg Dsat Dkof X1
      <- cfsub N (Dc T' Dkof Dsat) (DMc T' Dkof Dsat) (Dsub T' Dkof Dsat)
            (DMsub T' Dkof Dsat) DMsum Dc' DMc' Dleq.
- :
   cfp_guard_inst* N (cfp_guardo (\x:tr P. Dof x) (\x:tr P. Dsub x) Dpropok)
      (cfp_metric_guardo DMsum (\d:tr P. DMof d) (\d:tr P. DMsub d)) Dtr Dc'
      DMc' Dleq3
      <- employ_sum Nsub Nc N DMsum
      <- cf* Nc (Dof Dtr) (DMof Dtr) Dc DMc Dleq
      <- sum_monotone2' Dleq DMsum' DMsum Dleq1
      <- employ_leq N' N Dleq1
      <- cfsub N' Dc DMc (Dsub Dtr) (DMsub Dtr) DMsum' Dc' DMc' Dleq2
      <- leq_trans Dleq2 Dleq1 Dleq3.
- :
   cfp_guard_inst* N (cfp_guardc (\x:tr P. Dc x) (\x:tr P. Dsub x) Dpropok)
      (cfp_metric_guardc DMsum (\d:tr P. DMc d) (\d:tr P. DMsub d)) Dtr Dc' DMc'
      Dleq
      <- cfsub N (Dc Dtr) (DMc Dtr) (Dsub Dtr) (DMsub Dtr) DMsum Dc' DMc' Dleq.
-lit :
   cf* z (of_atom aof_lit (atomval_sing asize_lit)) of_metric_of_atom cfp_b1
      cfp_metric_b1 leq_z.
cf|lit :
   Pi U:uval. Pi V:val. Pi B1:binary bytebits. Pi N1:nat. Pi N':nat.
      atomval (;' U V) (lit B1) (s N1)
         -> Pi S:htp. Pi V1:val. Pi N:nat. Pi D:cfp S V1 b1.
                cfp_metric D N' -> leq N' N -> type.
- : cf|lit (atomval_cons D) S1 V2 N3 Dc DM Dleq <- cf|lit D S1 V2 N3 Dc DM Dleq.
-lit' :
   cf* z (of_atom aof_lit (atomval_cons D)) of_metric_of_atom Dc DM Dleq
      <- cf|lit D S1 (;' (@' (lit B1) 0') (;' U1 V1)) z Dc DM Dleq.
-hptr :
   cf* z (of_atom (aof_chpointer Dsub Dbsub Dseg Dlook) Datom) 
of_metric_of_atom
      (cfp_cmbox Dsub Dbsub Dseg Dlook Datom) cfp_metric_cmbox leq_z.
-ptr :
   cf* z (of_atom (aof_cpointer Dbsub Dlook) Datom) of_metric_of_atom
      (cfp_cbox Dbsub Dlook Datom) cfp_metric_cbox leq_z.
-fun :
   cf* z (of_atom (aof_function Dsub Drtpok Dkof Dseg Dlook) Datomval)
      of_metric_of_atom (cfp_arrow Dsub Drtpok Dkof Dseg Dlook Datomval)
      cfp_metric_arrow leq_z.
-ptr :
   cf* (s N2) (of_spointer Dsize Dof Datomval) (of_metric_of_spointer DM)
      (cfp_sptr Dsize Dc Datomval) (cfp_metric_sptr DM') Dleq'
      <- cf* N2 Dof DM Dc DM' Dleq
      <- leq_succ' Dleq Dleq'.
-gotptr :
   cf* z (of_atom aof_gotpointer Datomval) of_metric_of_atom
      (cfp_gotptr Datomval) cfp_metric_gotptr leq_z.
-code :
   cf* z (of_code Dcodeok Drtpok Dcodeval) of_metric_of_code
      (cfp_code Dcodeok Drtpok Dcodeval) cfp_metric_code leq_z.
-eteq :
   cf* z (of_seteq D Dp) of_metric_of_seteq (cfp_seteq D Dp tr_numeq_bin)
      cfp_metric_seteq leq_z.
-append :
   cf* (s N) (of_append D2 D1 D) (of_metric_of_append Dsum DM2 DM1)
      (cfp_prod D2' D1' D) (cfp_metric_prod Dmax DM2' DM1') Dleq'''
      <- employ_sum N1 N2 N Dsum
      <- employ_sum' N1 N2 N Dsum
      <- cf* N1 D1 DM1 D1' DM1' Dleq1
      <- cf* N2 D2 DM2 D2' DM2' Dleq2
      <- sum_monotone' Dleq1 Dleq2 Dsum' Dsum Dleq
      <- can_max N1' N2' N'' Dmax
      <- max_leq_sum Dmax Dsum' Dleq'
      <- leq_trans Dleq' Dleq Dleq''
      <- leq_succ' Dleq'' Dleq'''.
-ns : cf* z of_ns of_metric_of_ns cfp_ns cfp_metric_ns leq_z.
-null : cf* z of_null of_metric_of_null cfp_b0 cfp_metric_b0 leq_z.
-forall :
   cf* (s N1)
      (forall_intro (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1) Dpon)
      (of_metric_forall_intro (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM t d1 d2))
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. reflex) Dpon)
      (cfp_metric_forallo sum_z
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM t d1 d2)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. subtype_metric_reflex)) Dleq
      <- leq_reflex (s N1) Dleq.
-guard :
   cf* (s N1) (guard_intro (\x:tr P1. Dof x) Dpropok)
      (of_metric_guard_intro (\d:tr P1. DM d))
      (cfp_guardo (\x:tr P1. Dof x) (\d:tr P1. reflex) Dpropok)
      (cfp_metric_guardo sum_z (\d:tr P1. DM d)
          (\x:tr P1. subtype_metric_reflex)) Dleq
      <- leq_reflex (s N1) Dleq.
-meet :
   cf* (s N) (meet_intro_val D2 D1) (of_metric_meet_intro_val Dsum DM2 DM1)
      (cfp_meet D2' D1') (cfp_metric_meet Dmax DM2' DM1') Dleq'''
      <- employ_sum N1 N2 N Dsum
      <- employ_sum' N1 N2 N Dsum
      <- cf* N1 D1 DM1 D1' DM1' Dleq1
      <- cf* N2 D2 DM2 D2' DM2' Dleq2
      <- sum_monotone' Dleq1 Dleq2 Dsum' Dsum Dleq
      <- can_max N1' N2' N'' Dmax
      <- max_leq_sum Dmax Dsum' Dleq'
      <- leq_trans Dleq' Dleq Dleq''
      <- leq_succ' Dleq'' Dleq'''.
-ub :
   cf* (s N3) (subsume Dsub Dof) (of_metric_subsume Dsum DMof DMsub) Dc' DMc'
      Dleq''
      <- employ_sum N1 N2 N3 Dsum
      <- cf* N2 Dof DMof Dc DMc Dleq2
      <- sum_monotone2' Dleq2 Dsum' Dsum Dleq3
      <- employ_leq N3' N3 Dleq3
      <- cfsub N3' Dc DMc Dsub DMsub Dsum' Dc' DMc' Dleq
      <- leq_trans Dleq Dleq3 Dleq'
      <- leq_succ' Dleq' Dleq''.
-big-ns :
   cf* z (of_big_ns Dte Dsize) of_metric_of_big_ns Dc DM leq_z
      <- ns_membership Dsize Dte S1 Dc
      <- ns_exp_metric Dte Dc DM.
-top :
   cf* z of_top of_metric_of_top
      (cfp_exists Dc (sat_true Dkof) (\t:tp. \d:kof t kt. d))
      (cfp_metric_exists DM) leq_z
      <- can_size V N Dsize
      <- can_tp_exp ns N T' Dte
      <- ns_membership Dsize Dte S Dc
      <- ns_exp_metric Dte Dc DM
      <- kof_tp_exp kof_ns Dte Dkof.
-zctra :
   cf* (s N9) (of_size_contra X7 Dlt Dbsub Dof Dsize12)
      (of_metric_of_size_contra DMsum DM2 DM1) Dc' DM'' leq_z
      <- employ_sum N4 N10 N9 DMsum
      <- cf* N10 Dof DM1 Dc DMc DMleq
      <- sum_monotone2' DMleq DMsum' DMsum DMleq'
      <- employ_leq N8 N9 DMleq'
      <- boxsub_subsume* N8 Dbsub DM2 Dc DMc DMsum' Dsep X1 X2 X3 X4 X5 X6
      <- separate_is_append Dsep Dapp
      <- separate_size Dsep Dsize1
      <- can_size V3 N3 Dsize2
      <- size_append' Dsize1 Dsize2 Dsize12 Dapp Dsum
      <- sum_implies_leq Dsum Dleq
      <- lt_leq_contradict Dlt Dleq Dfalse
      <- false_implies_cfp_metric Dfalse Dc' DM''.
-reflex :
   cfsub N1 D DM reflex subtype_metric_reflex sum_z D DM Dleq
      <- leq_reflex N1 Dleq.
-reflexeq :
   cfsub N1 D DM (reflexeq Dkof X1 Dequiv) subtype_metric_reflexeq sum_z D' DM'
      Dleq
      <- cfp_equiv D DM Dequiv Dkof D' DM'
      <- leq_reflex N1 Dleq.
-trans :
   cfsub N D1 DM1 (trans DsubB DsubA) (subtype_metric_trans Dsum123 DMb DMa)
      Dsum D3 DM3 Dleq3'
      <- sum_assoc Dsum123 Dsum Dsum1 Dsum'
      <- employ_sum NsubB N1 N Dsum'
      <- cfsub N1 D1 DM1 DsubA DMa Dsum1 D2 DM2 Dleq2
      <- sum_monotone2' Dleq2 Dsum2 Dsum' Dleq
      <- employ_leq N2 N Dleq
      <- cfsub N2 D2 DM2 DsubB DMb Dsum2 D3 DM3 Dleq3
      <- leq_trans Dleq3 Dleq Dleq3'.
-eteq_sub :
   cfsub z (cfp_seteq Dbi Dp Dtr) cfp_metric_seteq (seteq_sub Dtr')
      subtype_metric_seteq_sub sum_z
      (cfp_seteq Dbi Dp (tr_numeq_trans Dtr (tr_numeq_symm Dtr')))
      cfp_metric_seteq leq_z.
-prod_sub :
   cfsub N (cfp_prod Dc2 Dc1 Dapp) (cfp_metric_prod DMmaxc DMc2 DMc1)
      (prod_sub Dsub2 Dsub1) (subtype_metric_prod_sub DMsums DMsub2 DMsub1)
      DMsum (cfp_prod Dc2' Dc1' Dapp) (cfp_metric_prod DMmax DMc2' DMc1') Dleq
      <- max_implies_leq DMmaxc Dleqc1
      <- sum_implies_leq DMsums Dleqs1
      <- sum_monotone' Dleqs1 Dleqc1 DMsum1 DMsum Dleq1
      <- employ_leq N1 N Dleq1
      <- cfsub N1 Dc1 DMc1 Dsub1 DMsub1 DMsum1 Dc1' DMc1' Dleq1'
      <- max_implies_leq' DMmaxc Dleqc2
      <- sum_implies_leq' DMsums Dleqs2
      <- sum_monotone' Dleqs2 Dleqc2 DMsum2 DMsum Dleq2
      <- employ_leq N2 N Dleq2
      <- cfsub N2 Dc2 DMc2 Dsub2 DMsub2 DMsum2 Dc2' DMc2' Dleq2'
      <- leq_trans Dleq1' Dleq1 Dleq1''
      <- leq_trans Dleq2' Dleq2 Dleq2''
      <- max_idem N DMmaxN
      <- max_monotone' Dleq1'' Dleq2'' DMmax DMmaxN Dleq.
-exp_sub :
   cfsub N5 (cfp_exp Dkof Dte Dtr Dc) (cfp_metric_exp DM) (exp_sub Dtrsub Dsub)
      (subtype_metric_exp_sub DMsub) DMsum
      (cfp_exp Dkof' Dte' (tr_numeq_trans Dtr (tr_numeq_symm Dtrsub)) Dc')
      (cfp_metric_exp DM') Dleq
      <- subtype_reg1 Dkof Dkof' Dsub
      <- cfsubexp N5 Dc DM Dsub DMsub DMsum Dte Dte' Dc' DM' Dleq.
- :
   cfsubexp N2 cfp_b0 cfp_metric_b0 Dsub DMsub DMsum tp_exp_z tp_exp_z cfp_b0
      cfp_metric_b0 leq_z.
- :
   cfsubexp N (cfp_prod Dc2 Dc1 Dapp) (cfp_metric_prod Dmax DM2 DM1) Dsub DMsub
      DMsum (tp_exp_s Dte) (tp_exp_s Dte') (cfp_prod Dc2' Dc1' Dapp)
      (cfp_metric_prod Dmax'' DM2' DM1') Dleq
      <- max_implies_leq Dmax Dleq1
      <- sum_monotone2' Dleq1 DMsum1 DMsum Dleq1'
      <- employ_leq N1 N Dleq1'
      <- cfsub N1 Dc1 DM1 Dsub DMsub DMsum1 Dc1' DM1' Dleq1''
      <- max_implies_leq' Dmax Dleq2
      <- sum_monotone2' Dleq2 DMsum2 DMsum Dleq2'
      <- employ_leq N2 N Dleq2'
      <- cfsubexp N2 Dc2 DM2 Dsub DMsub DMsum2 Dte Dte' Dc2' DM2' Dleq2''
      <- max_sum_distribute Dmax DMsum DMsum1 DMsum2 Dmax'
      <- max_monotone' Dleq1'' Dleq2'' Dmax'' Dmax' Dleq.
-code_sub :
   cfsub z (cfp_code Dok Drtpok D) cfp_metric_code (code_sub Dsub)
      subtype_metric_code_sub sum_z (cfp_code (ok_coerce Dsub Dok) Drtpok' D)
      cfp_metric_code leq_z
      <- subrtype_reg2 Dsub Drtpok' Drtpok.
-box_sub :
   cfsub z (cfp_cbox Dbsub Dhtlookup Datomval) cfp_metric_cbox
      (cbox_sub Dsub3 Dsub2) subtype_metric_cbox_sub sum_z
      (cfp_cbox
          (boxsub_transr (prod_sub reflex Dsub3) (prod_sub Dsub2 reflex) Dbsub)
          Dhtlookup Datomval)
      cfp_metric_cbox leq_z.
-mbox_sub :
   cfsub z (cfp_cmbox Dsubrev Dbsub Dseg Dhtlookup Datomval) cfp_metric_cmbox
      (cmbox_sub Dsubrev3 Dsub3 Dsubrev2 Dsub2) subtype_metric_cmbox_sub sum_z
      (cfp_cmbox
          (trans Dsubrev
              (prod_sub (prod_sub reflex Dsubrev3) (prod_sub Dsubrev2 reflex)))
          (boxsub_transr (prod_sub reflex Dsub3) (prod_sub Dsub2 reflex) Dbsub)
          Dseg Dhtlookup Datomval)
      cfp_metric_cmbox leq_z.
-arrow_sub :
   cfsub z (cfp_arrow Dsub Drtpok Dkof Dseg Dhtlookup Datomval) 
cfp_metric_arrow
      (arrow_sub Drsub) subtype_metric_arrow_sub sum_z
      (cfp_arrow (trans (prod_sub (code_sub Drsub) reflex) Dsub) Drtpok' Dkof
          Dseg Dhtlookup Datomval)
      cfp_metric_arrow leq_z
      <- subrtype_reg2 Drsub Drtpok' Drtpok.
-ptr_sub :
   cfsub N4 (cfp_sptr Dsize Dc Datomval) (cfp_metric_sptr DMc) (sptr_sub Dsub)
      (subtype_metric_sptr_sub DMsub) DMsum (cfp_sptr Dsize Dc' Datomval)
      (cfp_metric_sptr DMc') Dleq
      <- cfsub N4 Dc DMc Dsub DMsub DMsum Dc' DMc' Dleq.
-forall_sub :
   cfsub N2
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub1 t x x1) Dpon)
      (cfp_metric_forallo DMsumc
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMof t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMsubc t d1 d2))
      (forall_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1))
      (subtype_metric_forall_sub
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMsub t d1 d2)) DMsum
      (cfp_forallo (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dof t x x1)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              trans (Dsub t d1 d2) (Dsub1 t d1 d2)) Dpon)
      (cfp_metric_forallo Dsum2'
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMof t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              subtype_metric_trans Dsum1 (DMsub t d1 d2) (DMsubc t d1 d2))) Dleq
      <- sum_inc DMsumc DMsumc'
      <- sum_assoc' Dsum1 Dsum2 DMsumc' DMsum
      <- can_sum N3 N4 N1 Dsum2'
      <- sum_inc Dsum2' Dsum2''
      <- sum_fun3 Dsum2'' Dsum2 Deq
      <- leq_reflex' Deq Dleq.
-forall_sub :
   cfsub N2
      (cfp_forallc (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dc t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub1 t x x1) Dpon)
      (cfp_metric_forallc DMsumc
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMc t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMsubc t d1 d2))
      (forall_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1))
      (subtype_metric_forall_sub
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMsub t d1 d2)) DMsum
      (cfp_forallc (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dc t x x1)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              trans (Dsub t d1 d2) (Dsub1 t d1 d2)) Dpon)
      (cfp_metric_forallc Dsum2'
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMc t d1 d2)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1.
              subtype_metric_trans Dsum1 (DMsub t d1 d2) (DMsubc t d1 d2))) Dleq
      <- sum_inc DMsumc DMsumc'
      <- sum_assoc' Dsum1 Dsum2 DMsumc' DMsum
      <- can_sum N3 N4 N1 Dsum2'
      <- sum_inc Dsum2' Dsum2''
      <- sum_fun3 Dsum2'' Dsum2 Deq
      <- leq_reflex' Deq Dleq.
-exists_sub :
   cfsub N4 (cfp_exists Dc Dsat (\t:tp. \x:kof t K1. Dkofgen t x))
      (cfp_metric_exists DMc)
      (exists_sub (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsub t x x1))
      (subtype_metric_exists_sub
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DMsub t d1 d2)) DMsum
      (cfp_exists Dc' Dsat (\t:tp. \x:kof t K1. Dkofgen' t x))
      (cfp_metric_exists DMc') Dleq
      <- sat_reg Dsat Dkof Dpon
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon
                -> subtype_reg1 (Dkofgen t d1) (Dkofgen' t d1) (Dsub t d1 d2))
      <- cfsub N4 Dc DMc (Dsub T2 Dkof Dsat) (DMsub T2 Dkof Dsat) DMsum Dc' DMc'
            Dleq.
-guard_sub :
   cfsub N2 (cfp_guardo (\x:tr P1. Dof x) (\x:tr P1. Dsub1 x) Dpropok)
      (cfp_metric_guardo DMsumc (\d:tr P1. DMof d) (\d:tr P1. DMsubc d))
      (guard_sub (\x:tr P1. Dsub x))
      (subtype_metric_guard_sub (\d:tr P1. DMsub d)) DMsum
      (cfp_guardo (\x:tr P1. Dof x) (\d:tr P1. trans (Dsub d) (Dsub1 d)) Dpropok)
      (cfp_metric_guardo Dsum2' (\d:tr P1. DMof d)
          (\d:tr P1. subtype_metric_trans Dsum1 (DMsub d) (DMsubc d))) Dleq
      <- sum_inc DMsumc DMsumc'
      <- sum_assoc' Dsum1 Dsum2 DMsumc' DMsum
      <- can_sum N3 N4 N1 Dsum2'
      <- sum_inc Dsum2' Dsum2''
      <- sum_fun3 Dsum2'' Dsum2 Deq
      <- leq_reflex' Deq Dleq.
-guard_sub :
   cfsub N2 (cfp_guardc (\x:tr P1. Dc x) (\x:tr P1. Dsub1 x) Dpropok)
      (cfp_metric_guardc DMsumc (\d:tr P1. DMc d) (\d:tr P1. DMsubc d))
      (guard_sub (\x:tr P1. Dsub x))
      (subtype_metric_guard_sub (\d:tr P1. DMsub d)) DMsum
      (cfp_guardc (\x:tr P1. Dc x) (\d:tr P1. trans (Dsub d) (Dsub1 d)) Dpropok)
      (cfp_metric_guardc Dsum2' (\d:tr P1. DMc d)
          (\d:tr P1. subtype_metric_trans Dsum1 (DMsub d) (DMsubc d))) Dleq
      <- sum_inc DMsumc DMsumc'
      <- sum_assoc' Dsum1 Dsum2 DMsumc' DMsum
      <- can_sum N3 N4 N1 Dsum2'
      <- sum_inc Dsum2' Dsum2''
      <- sum_fun3 Dsum2'' Dsum2 Deq
      <- leq_reflex' Deq Dleq.
-assert_sub :
   cfsub N4 (cfp_assert Dc Dtr) (cfp_metric_assert DMc)
      (assert_sub (\x:tr P1. Dsub x))
      (subtype_metric_assert_sub (\d:tr P1. DMsub d)) DMsum (cfp_assert Dc' Dtr)
      (cfp_metric_assert DMc') Dleq
      <- cfsub N4 Dc DMc (Dsub Dtr) (DMsub Dtr) DMsum Dc' DMc' Dleq.
-join_sub1 :
   cfsub N3 (cfp_join1 Dkof2 Dc) (cfp_metric_join1 DMc) (join_sub Dsub2 Dsub1)
      (subtype_metric_join_sub DMsums DMsub2 DMsub1) DMsum
      (cfp_join1 Dkof2' Dc') (cfp_metric_join1 DMc') Dleq''
      <- sum_implies_leq DMsums Dleq1
      <- sum_monotone1' Dleq1 DMsum' DMsum Dleq
      <- employ_leq N2 N3 Dleq
      <- cfsub N2 Dc DMc Dsub1 DMsub1 DMsum' Dc' DMc' Dleq'
      <- subtype_reg1 Dkof2 Dkof2' Dsub2
      <- leq_trans Dleq' Dleq Dleq''.
-join_sub2 :
   cfsub N3 (cfp_join2 Dkof1 Dc) (cfp_metric_join2 DMc) (join_sub Dsub2 Dsub1)
      (subtype_metric_join_sub DMsums DMsub2 DMsub1) DMsum
      (cfp_join2 Dkof1' Dc') (cfp_metric_join2 DMc') Dleq''
      <- sum_implies_leq' DMsums Dleq2
      <- sum_monotone1' Dleq2 DMsum' DMsum Dleq
      <- employ_leq N2 N3 Dleq
      <- cfsub N2 Dc DMc Dsub2 DMsub2 DMsum' Dc' DMc' Dleq'
      <- subtype_reg1 Dkof1 Dkof1' Dsub1
      <- leq_trans Dleq' Dleq Dleq''.
-forall_elim :
   cfsub (s N2) Dc DM (forall_elim Dsat (\t:tp. \x:kof t K1. X1 t x))
      subtype_metric_forall_elim sum_z Dc' DM' Dleq'
      <- cfp_forall_inst* N2 Dc DM Dsat Dc' DM' Dleq
      <- leq_succ' Dleq Dleq'.
-exists_intro :
   cfsub N1 D DM (exists_intro Dkof (\t:tp. \x:kof t K1. Dkofgen t x))
      subtype_metric_exists_intro sum_z
      (cfp_exists D Dkof (\t:tp. \x:kof t K1. Dkofgen t x))
      (cfp_metric_exists DM) Dleq
      <- leq_reflex N1 Dleq.
-gen :
   cfsub (s N1) D DM (gen Dpon) subtype_metric_gen (sum_s sum_z)
      (cfp_forallc (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. D)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. reflex) Dpon)
      (cfp_metric_forallc sum_z (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. DM)
          (\t:tp. \d1:kof t K1. \d2:sat t R1 K1. subtype_metric_reflex)) Dleq
      <- leq_reflex (s N1) Dleq.
-cogen :
   cfsub N1 (cfp_exists D X1 (\t:tp. \x:kof t K1. X2 t x))
      (cfp_metric_exists DM) (cogen X3) subtype_metric_cogen sum_z D DM Dleq
      <- leq_reflex N1 Dleq.
-guard_elim :
   cfsub (s N2) Dc DM (guard_elim Dtr) subtype_metric_guard_elim sum_z Dc' DM'
      Dleq'
      <- cfp_guard_inst* N2 Dc DM Dtr Dc' DM' Dleq
      <- leq_succ' Dleq Dleq'.
-gen_guard :
   cfsub (s N1) D DM (gen_guard Dpropok) subtype_metric_gen_guard (sum_s sum_z)
      (cfp_guardc (\d:tr P1. D) (\d:tr P1. reflex) Dpropok)
      (cfp_metric_guardc sum_z (\d:tr P1. DM) (\d:tr P1. subtype_metric_reflex))
      Dleq
      <- leq_reflex (s N1) Dleq.
-assert_intro :
   cfsub N1 D DM (assert_intro Dtr) subtype_metric_assert_intro sum_z
      (cfp_assert D Dtr) (cfp_metric_assert DM) Dleq
      <- leq_reflex N1 Dleq.
-cogen_assert :
   cfsub N1 (cfp_assert D X1) (cfp_metric_assert DM) (cogen_assert X2)
      subtype_metric_cogen_assert sum_z D DM Dleq
      <- leq_reflex N1 Dleq.
-rec_intro :
   cfsub N1 Dc DM (rec_intro (\t:tp. \x:kof t kt. Dkof t x))
      subtype_metric_rec_intro sum_z (cfp_rec Dc (\t:tp. \x:kof t kt. Dkof t x))
      (cfp_metric_rec DM) Dleq
      <- leq_reflex N1 Dleq.
-rec_elim :
   cfsub N1 (cfp_rec Dc (\t:tp. \x:kof t kt. X1 t x)) (cfp_metric_rec DM)
      (rec_elim (\t:tp. \x:kof t kt. X2 t x)) subtype_metric_rec_elim sum_z Dc
      DM Dleq
      <- leq_reflex N1 Dleq.
-ns :
   cfsub (s N2) Dc DM (nsexp_sub Dsat) subtype_metric_nsexp_sub (sum_s sum_z)
      (cfp_exp kof_ns Dte Dtr Dc') (cfp_metric_exp DM') leq_z
      <- val_sizen* N2 Dc DM Dsat Dsize Dtr
      <- can_tp_exp ns N1 T1 Dte
      <- ns_membership Dsize Dte S1 Dc'
      <- ns_exp_metric Dte Dc' DM'.
-raa :
   cfsub N1 X1 X2 (raa X3 X4 Dtr) subtype_metric_raa sum_z Dc DM leq_z
      <- canonize Dtr Dtrc
      <- no_canonical_false Dtrc Dfalse
      <- false_implies_cfp_metric Dfalse Dc DM.
-meet_intro :
   cfsub N Dc DMc (meet_intro Dsub2 Dsub1)
      (subtype_metric_meet_intro DMsums DMsub2 DMsub1) DMsum (cfp_meet Dc2 Dc1)
      (cfp_metric_meet DMmax DMc2 DMc1) Dleq
      <- sum_implies_leq DMsums Dleqs1
      <- sum_monotone1' Dleqs1 DMsum1 DMsum Dleq1
      <- employ_leq N1 N Dleq1
      <- cfsub N1 Dc DMc Dsub1 DMsub1 DMsum1 Dc1 DMc1 Dleq1'
      <- sum_implies_leq' DMsums Dleqs2
      <- sum_monotone1' Dleqs2 DMsum2 DMsum Dleq2
      <- employ_leq N2 N Dleq2
      <- cfsub N2 Dc DMc Dsub2 DMsub2 DMsum2 Dc2 DMc2 Dleq2'
      <- leq_trans Dleq1' Dleq1 Dleq1''
      <- leq_trans Dleq2' Dleq2 Dleq2''
      <- max_idem N DMmaxN
      <- max_monotone' Dleq1'' Dleq2'' DMmax DMmaxN Dleq.
-meet_elim1 :
   cfsub N3 (cfp_meet X1 D) (cfp_metric_meet DMmax X2 DM) (meet_elim1 X3)
      subtype_metric_meet_elim1 sum_z D DM Dleq
      <- max_implies_leq DMmax Dleq.
-meet_elim2 :
   cfsub N3 (cfp_meet D X1) (cfp_metric_meet DMmax DM X2) (meet_elim2 X3)
      subtype_metric_meet_elim2 sum_z D DM Dleq
      <- max_implies_leq' DMmax Dleq.
-join_intro1 :
   cfsub N1 D DM (join_intro1 Dkof) subtype_metric_join_intro1 sum_z
      (cfp_join1 Dkof D) (cfp_metric_join1 DM) Dleq
      <- leq_reflex N1 Dleq.
-join_intro2 :
   cfsub N1 D DM (join_intro2 Dkof) subtype_metric_join_intro2 sum_z
      (cfp_join2 Dkof D) (cfp_metric_join2 DM) Dleq
      <- leq_reflex N1 Dleq.
-join_elim1 :
   cfsub N3 (cfp_join1 X1 Dc) (cfp_metric_join1 DMc) (join_elim Dsub2 Dsub1)
      (subtype_metric_join_elim DMsums DMsub2 DMsub1) DMsum Dc' DMc' Dleq'
      <- sum_implies_leq DMsums Dleq1
      <- sum_monotone1' Dleq1 DMsum1 DMsum Dleq1'
      <- employ_leq N2 N3 Dleq1'
      <- cfsub N2 Dc DMc Dsub1 DMsub1 DMsum1 Dc' DMc' Dleq
      <- leq_trans Dleq Dleq1' Dleq'.
-join_elim2 :
   cfsub N3 (cfp_join2 X1 Dc) (cfp_metric_join2 DMc) (join_elim Dsub2 Dsub1)
      (subtype_metric_join_elim DMsums DMsub2 DMsub1) DMsum Dc' DMc' Dleq'
      <- sum_implies_leq' DMsums Dleq2
      <- sum_monotone1' Dleq2 DMsum2 DMsum Dleq2'
      <- employ_leq N2 N3 Dleq2'
      <- cfsub N2 Dc DMc Dsub2 DMsub2 DMsum2 Dc' DMc' Dleq
      <- leq_trans Dleq Dleq2' Dleq'.
-meet_dst_join1 :
   cfsub N1 (cfp_meet (cfp_join1 D2' D1) D)
      (cfp_metric_meet DMmax (cfp_metric_join1 DM2) DM1) meet_dist_join
      subtype_metric_meet_dist_join sum_z
      (cfp_join1 (kof_meet D2' Dkof) (cfp_meet D1 D))
      (cfp_metric_join1 (cfp_metric_meet DMmax DM2 DM1)) Dleq
      <- cfp_weaken D Dof
      <- of_reg Dof Dkof
      <- leq_reflex N1 Dleq.
-meet_dst_join2 :
   cfsub N1 (cfp_meet (cfp_join2 D1' D2) D)
      (cfp_metric_meet DMmax (cfp_metric_join2 DM2) DM1) meet_dist_join
      subtype_metric_meet_dist_join sum_z
      (cfp_join2 (kof_meet D1' D'') (cfp_meet D2 D))
      (cfp_metric_join2 (cfp_metric_meet DMmax DM2 DM1)) Dleq
      <- cfp_weaken D D'
      <- of_reg D' D''
      <- leq_reflex N1 Dleq.
-meet_dist_prod :
   cfsub (s N2) (cfp_meet (cfp_prod D2' D1' Dapp') (cfp_prod D2 D1 Dapp))
      (cfp_metric_meet DMmax (cfp_metric_prod DMmax2 DM22 DM21)
          (cfp_metric_prod DMmax1 DM12 DM11))
      (meet_dist_prod Dsat' Dsat) subtype_metric_meet_dist_prod (sum_s sum_z)
      (cfp_prod (cfp_meet D2'' D2) (cfp_meet D1'' D1) Dapp)
      (cfp_metric_prod DMmax' (cfp_metric_meet DMmax2' DM22' DM12)
          (cfp_metric_meet DMmax1' DM21' DM11)) Dleq'
      <- max_implies_leq DMmax Dleq1
      <- max_implies_leq' DMmax Dleq2
      <- max_implies_leq DMmax1 Dleq11
      <- max_implies_leq' DMmax1 Dleq12
      <- max_implies_leq DMmax2 Dleq21
      <- max_implies_leq' DMmax2 Dleq22
      <- leq_trans Dleq11 Dleq1 Dleq11'
      <- leq_trans Dleq12 Dleq1 Dleq12'
      <- leq_trans Dleq21 Dleq2 Dleq21'
      <- leq_trans Dleq22 Dleq2 Dleq22'
      <- employ_leq N7 N2 Dleq11'
      <- employ_leq N8 N2 Dleq21'
      <- val_sizen* N7 D1 DM11 Dsat Dsize Dtr
      <- val_size* N8 D1' DM21 (entailment (entails_tn Dtr) Dsat') Dsize'
      <- append_is_separate Dapp Dsize Dsep
      <- append_is_separate Dapp' Dsize' Dsep'
      <- separate_fun Dsep' Dsep Deq1 Deq2
      <- cfp_metric_resp htp_eq_ Deq1 tp_eq_ D1' D1'' DM21 DM21'
      <- cfp_metric_resp htp_eq_ Deq2 tp_eq_ D2' D2'' DM22 DM22'
      <- max_idem N2 DMmaxN
      <- max_monotone' Dleq11' Dleq21' DMmax1' DMmaxN Dleq1'
      <- max_monotone' Dleq12' Dleq22' DMmax2' DMmaxN Dleq2'
      <- max_monotone' Dleq1' Dleq2' DMmax' DMmaxN Dleq
      <- leq_succ' Dleq Dleq'.
-meet_dist_prd' :
   cfsub (s N2) (cfp_meet (cfp_prod D2' D1' Dapp') (cfp_prod D2 D1 Dapp))
      (cfp_metric_meet DMmax (cfp_metric_prod DMmax2 DM22 DM21)
          (cfp_metric_prod DMmax1 DM12 DM11))
      (meet_dist_prod' Dsat' Dsat) subtype_metric_meet_dist_prod' (sum_s sum_z)
      (cfp_prod (cfp_meet D2'' D2) (cfp_meet D1'' D1) Dapp)
      (cfp_metric_prod DMmax' (cfp_metric_meet DMmax2' DM22' DM12)
          (cfp_metric_meet DMmax1' DM21' DM11)) Dleq'
      <- max_implies_leq DMmax Dleq1
      <- max_implies_leq' DMmax Dleq2
      <- max_implies_leq DMmax1 Dleq11
      <- max_implies_leq' DMmax1 Dleq12
      <- max_implies_leq DMmax2 Dleq21
      <- max_implies_leq' DMmax2 Dleq22
      <- leq_trans Dleq11 Dleq1 Dleq11'
      <- leq_trans Dleq12 Dleq1 Dleq12'
      <- leq_trans Dleq21 Dleq2 Dleq21'
      <- leq_trans Dleq22 Dleq2 Dleq22'
      <- employ_leq N5 N2 Dleq12'
      <- employ_leq N6 N2 Dleq22'
      <- val_sizen* N5 D2 DM12 Dsat Dsizer Dtr
      <- val_size* N6 D2' DM22 (entailment (entails_tn Dtr) Dsat') Dsizer'
      <- can_size V5 N11 Dsizelr
      <- size_append'' Dsize Dsizer Dsizelr Dapp Dsum
      <- size_append'''' Dsize' Dsizer' Dsizelr Dapp' Dsum
      <- append_is_separate Dapp Dsize Dsep
      <- append_is_separate Dapp' Dsize' Dsep'
      <- separate_fun Dsep' Dsep Deq1 Deq2
      <- cfp_metric_resp htp_eq_ Deq1 tp_eq_ D1' D1'' DM21 DM21'
      <- cfp_metric_resp htp_eq_ Deq2 tp_eq_ D2' D2'' DM22 DM22'
      <- max_idem N2 DMmaxN
      <- max_monotone' Dleq11' Dleq21' DMmax1' DMmaxN Dleq1'
      <- max_monotone' Dleq12' Dleq22' DMmax2' DMmaxN Dleq2'
      <- max_monotone' Dleq1' Dleq2' DMmax' DMmaxN Dleq
      <- leq_succ' Dleq Dleq'.
-prod_dist_j11 :
   cfsub N1 (cfp_prod (cfp_join1 Dkof2 D1) D Dapp)
      (cfp_metric_prod DMmax (cfp_metric_join1 DM2) DM1) prod_dist_join1
      subtype_metric_prod_dist_join1 sum_z
      (cfp_join1 (kof_prod Dkof2 Dkof) (cfp_prod D1 D Dapp))
      (cfp_metric_join1 (cfp_metric_prod DMmax DM2 DM1)) Dleq
      <- cfp_weaken D Dof
      <- of_reg Dof Dkof
      <- leq_reflex N1 Dleq.
-prod_dist_j12 :
   cfsub N1 (cfp_prod (cfp_join2 Dkof1 D2) D Dapp)
      (cfp_metric_prod DMmax (cfp_metric_join2 DM2) DM1) prod_dist_join1
      subtype_metric_prod_dist_join1 sum_z
      (cfp_join2 (kof_prod Dkof1 Dkof) (cfp_prod D2 D Dapp))
      (cfp_metric_join2 (cfp_metric_prod DMmax DM2 DM1)) Dleq
      <- cfp_weaken D Dof
      <- of_reg Dof Dkof
      <- leq_reflex N1 Dleq.
-prod_dist_j21 :
   cfsub N1 (cfp_prod D (cfp_join1 Dkof2 D1) Dapp)
      (cfp_metric_prod DMmax DM2 (cfp_metric_join1 DM1)) prod_dist_join2
      subtype_metric_prod_dist_join2 sum_z
      (cfp_join1 (kof_prod Dkof Dkof2) (cfp_prod D D1 Dapp))
      (cfp_metric_join1 (cfp_metric_prod DMmax DM2 DM1)) Dleq
      <- cfp_weaken D Dof
      <- of_reg Dof Dkof
      <- leq_reflex N1 Dleq.
-prod_dist_j22 :
   cfsub N1 (cfp_prod D (cfp_join2 Dkof1 D2) Dapp)
      (cfp_metric_prod DMmax DM2 (cfp_metric_join2 DM1)) prod_dist_join2
      subtype_metric_prod_dist_join2 sum_z
      (cfp_join2 (kof_prod Dkof Dkof1) (cfp_prod D D2 Dapp))
      (cfp_metric_join2 (cfp_metric_prod DMmax DM2 DM1)) Dleq
      <- cfp_weaken D Dof
      <- of_reg Dof Dkof
      <- leq_reflex N1 Dleq.
prod_dist_void| :
   Pi S1:htp. Pi V1:val. Pi N1:nat. Pi S:htp. Pi V:val. Pi T':tp.
      cfp S1 V1 (void N1) -> Pi D:cfp S V T'. cfp_metric D z -> type.
-prod_dst_void1 :
   cfsub N5 (cfp_prod X1 D X2) X3 (prod_dist_void1 X4) X5 X6 D' DM leq_z
      <- prod_dist_void| D D' DM.
-prod_dst_void2 :
   cfsub N5 (cfp_prod D X1 X2) X3 (prod_dist_void2 X4) X5 X6 D' DM leq_z
      <- prod_dist_void| D D' DM.
-meetdistcbox :
   cfsub N5
      (cfp_meet (cfp_cbox Dbsub2 Dlook2 Datomval2)
          (cfp_cbox Dbsub1 Dlook1 Datomval1)) X1
      (meet_dist_cbox Dsat2b Dsat1b Dsat2a Dsat1a) X2 X3
      (cfp_cbox
          (boxsub_transr (meet_dist_prod Dsat2b Dsat1b)
              (meet_dist_prod' Dsat2a Dsat1a) (boxsub_meet Dbsub2' Dbsub1))
          Dlook1 Datomval1)
      cfp_metric_cbox leq_z
      <- atomval_fun Datomval2 Datomval1 Davaleq
      <- aval_eq_pointer Davaleq Dloceq Dnateq
      <- htlookup_resp htp_eq_ Dloceq tp_eq_ Dlook2 Dlook2'
      <- htlookup_fun Dlook2' Dlook1 Dtpeq
      <- boxsub_resp Dtpeq Dnateq tp_eq_ tp_eq_ Dbsub2 Dbsub2'.
-meetdistcmbox :
   cfsub N5
      (cfp_meet (cfp_cmbox X2 Dbsub2 X3 Dlook2 Datomval2)
          (cfp_cmbox Dsubrev Dbsub1 Dseg Dlook1 Datomval1)) X4
      (meet_dist_cmbox Dsat2b Dsat1b Dsat2a Dsat1a) X5 X6
      (cfp_cmbox
          (trans Dsubrev
              (prod_sub (prod_sub (meet_elim1 Dkof4) (meet_elim1 Dkof3))
                  (prod_sub (meet_elim1 Dkof2) (meet_elim1 Dkof1))))
          (boxsub_transr (meet_dist_prod Dsat2b Dsat1b)
              (meet_dist_prod' Dsat2a Dsat1a) (boxsub_meet Dbsub2' Dbsub1)) Dseg
          Dlook1 Datomval1)
      cfp_metric_cmbox leq_z
      <- atomval_fun Datomval2 Datomval1 Davaleq
      <- aval_eq_pointer Davaleq Dloceq Dnateq
      <- htlookup_resp htp_eq_ Dloceq tp_eq_ Dlook2 Dlook2'
      <- htlookup_fun Dlook2' Dlook1 Dtpeq
      <- boxsub_resp Dtpeq Dnateq tp_eq_ tp_eq_ Dbsub2 Dbsub2'
      <- boxsub_reg Dbsub2 X1 (kof_prod Dkof2 Dkof1) (kof_prod Dkof4 Dkof3).
-assrt_ds_meet1 :
   cfsub N1 (cfp_meet Dc2 (cfp_assert Dc1 Dtr))
      (cfp_metric_meet DMmax DM2 (cfp_metric_assert DM1)) assert_dist_meet1
      subtype_metric_assert_dist_meet1 sum_z (cfp_assert (cfp_meet Dc2 Dc1) Dtr)
      (cfp_metric_assert (cfp_metric_meet DMmax DM2 DM1)) Dleq
      <- leq_reflex N1 Dleq.
-assrt_ds_meet2 :
   cfsub N1 (cfp_meet (cfp_assert Dc2 Dtr) Dc1)
      (cfp_metric_meet DMmax (cfp_metric_assert DM2) DM1) assert_dist_meet2
      subtype_metric_assert_dist_meet2 sum_z (cfp_assert (cfp_meet Dc2 Dc1) Dtr)
      (cfp_metric_assert (cfp_metric_meet DMmax DM2 DM1)) Dleq
      <- leq_reflex N1 Dleq.
-exist_ds_meet1 :
   cfsub N1 (cfp_meet Dc2 (cfp_exists Dc1 Dsat (\t:tp. \x:kof t K1. Dkof1 t x)))
      (cfp_metric_meet DMmax DM2 (cfp_metric_exists DM1)) exists_dist_meet1
      subtype_metric_exists_dist_meet1 sum_z
      (cfp_exists (cfp_meet Dc2 Dc1) Dsat
          (\t:tp. \d:kof t K1. kof_meet Dkof2 (Dkof1 t d)))
      (cfp_metric_exists (cfp_metric_meet DMmax DM2 DM1)) Dleq
      <- cfp_weaken Dc2 Dof2
      <- of_reg Dof2 Dkof2
      <- leq_reflex N1 Dleq.
-exist_ds_meet2 :
   cfsub N1 (cfp_meet (cfp_exists Dc2 Dsat (\t:tp. \x:kof t K1. Dkof2 t x)) Dc1)
      (cfp_metric_meet DMmax (cfp_metric_exists DM2) DM1) exists_dist_meet2
      subtype_metric_exists_dist_meet2 sum_z
      (cfp_exists (cfp_meet Dc2 Dc1) Dsat
          (\t:tp. \d:kof t K1. kof_meet (Dkof2 t d) Dkof1))
      (cfp_metric_exists (cfp_metric_meet DMmax DM2 DM1)) Dleq
      <- cfp_weaken Dc1 Dof1
      <- of_reg Dof1 Dkof1
      <- leq_reflex N1 Dleq.
-cforgetm :
   cfsub N3 (cfp_cmbox X1 Dbsub X2 Dhtlookup Datomval) X3 cforgetm X4 X5
      (cfp_cbox Dbsub Dhtlookup Datomval) cfp_metric_cbox leq_z.
-rtruncate :
   cfsub N3 (cfp_cbox Dbsub Dhtlookup Datomval) X1 (rtruncate X2) X3 X4
      (cfp_cbox (boxsub_transr rassoc reflex Dbsub) Dhtlookup Datomval)
      cfp_metric_cbox leq_z.
-rtruncatem :
   cfsub N3 (cfp_cmbox Dsubrev Dbsub Dseg Dhtlookup Datomval) X1 (rtruncatem X2)
      X3 X4
      (cfp_cmbox (trans Dsubrev (prod_sub lassoc reflex))
          (boxsub_transr rassoc reflex Dbsub) Dseg Dhtlookup Datomval)
      cfp_metric_cmbox leq_z.
-ltruncate :
   cfsub N3 (cfp_cbox Dbsub Dhtlookup Datomval) X1 (ltruncate X2) X3 X4
      (cfp_cbox (boxsub_transr reflex lassoc Dbsub) Dhtlookup Datomval)
      cfp_metric_cbox leq_z.
-ltruncatem :
   cfsub N3 (cfp_cmbox Dsubrev Dbsub Dseg Dhtlookup Datomval) X1 (ltruncatem X2)
      X3 X4
      (cfp_cmbox (trans Dsubrev (prod_sub reflex rassoc))
          (boxsub_transr reflex lassoc Dbsub) Dseg Dhtlookup Datomval)
      cfp_metric_cmbox leq_z.
int_pointer_contra| :
   Pi V:val. Pi L:loc. Pi N:nat. Pi V':val.
      atomval V (pointer L N) 0' -> val_eq V (;' (@' (pointer L N) 0') V') -> type.
- : int_pointer_contra| (atomval_cons X1) val_eq_.
int_pointer_contra|| :
   Pi N1:nat. Pi End1:endian. Pi V:val. Pi B1:binary (s N1).
      Pi B2:binary bytebits. Pi V':val.
      binary_int End1 V B1 -> val_eq V (;' (@' (lit B2) 0') V') -> type.
- : int_pointer_contra|| (binary_int_cons_big X1 X2) val_eq_.
- : int_pointer_contra|| (binary_int_cons_lit X1 X2) val_eq_.
int_pointer_contra||| :
   Pi V:val. Pi L1:loc. Pi N1:nat. Pi V1:val. Pi B1:binary bytebits. Pi V2:val.
      val_eq V (;' (@' (pointer L1 N1) 0') V1) -> val_eq V (;' (@' (lit B1) 0') V2)
         -> false -> type.
int_pointer_contra :
   Pi V:val. Pi L1:loc. Pi N1:nat. Pi N2:nat. Pi End1:endian.
      Pi B1:binary (s N2).
      atomval V (pointer L1 N1) 0' -> binary_int End1 V B1 -> false -> type.
- :
   int_pointer_contra Datomval Dbi Dfalse
      <- int_pointer_contra| Datomval Deq1
      <- int_pointer_contra|| Dbi Deq2
      <- int_pointer_contra||| Deq1 Deq2 Dfalse.
-int_ptr_contra :
   cfsub N6 (cfp_meet (cfp_cbox X2 X3 Datomval) Dc_setlt) X4
      (int_cptr_contra X5 X6) X7 X8 Dc DM leq_z
      <- cfp_setlt Dc_setlt X1 Dbi' Dp
      <- binary_size_resp3 Dp product_wordbits Dbi' Dbi
      <- int_pointer_contra Datomval Dbi Dfalse
      <- false_implies_cfp_metric Dfalse Dc DM.
-lassoc :
   cfsub N1 (cfp_prod (cfp_prod Dc3 Dc2 D23) Dc1 D1_23)
      (cfp_metric_prod DMmax1_23 (cfp_metric_prod DMmax23 DM3 DM2) DM1) lassoc
      subtype_metric_lassoc sum_z (cfp_prod Dc3 (cfp_prod Dc2 Dc1 D12) D12_3)
      (cfp_metric_prod DMmax12_3 DM3 (cfp_metric_prod DMmax12 DM2 DM1)) Dleq
      <- append_assoc' D12 D12_3 D23 D1_23
      <- max_assoc' DMmax12 DMmax12_3 DMmax23 DMmax1_23
      <- leq_reflex N1 Dleq.
-rassoc :
   cfsub N1 (cfp_prod Dc3 (cfp_prod Dc2 Dc1 D12) D12_3)
      (cfp_metric_prod DMmax12_3 DM3 (cfp_metric_prod DMmax12 DM2 DM1)) rassoc
      subtype_metric_rassoc sum_z (cfp_prod (cfp_prod Dc3 Dc2 D23) Dc1 D1_23)
      (cfp_metric_prod DMmax1_23 (cfp_metric_prod DMmax23 DM3 DM2) DM1) Dleq
      <- append_assoc D12 D12_3 D23 D1_23
      <- max_assoc DMmax12 DMmax12_3 DMmax23 DMmax1_23
      <- leq_reflex N1 Dleq.
-luniti :
   cfsub N1 D DM luniti subtype_metric_luniti sum_z
      (cfp_prod D cfp_b0 append_null) (cfp_metric_prod max_z1 DM cfp_metric_b0)
      Dleq
      <- leq_reflex N1 Dleq.
-lunite :
   cfsub N2 (cfp_prod D cfp_b0 append_null)
      (cfp_metric_prod DMmax DM cfp_metric_b0) lunite subtype_metric_lunite
      sum_z D DM Dleq
      <- max_fun max_z1 DMmax Deq
      <- leq_reflex' Deq Dleq.
-runiti :
   cfsub N1 D DM runiti subtype_metric_runiti sum_z (cfp_prod cfp_b0 D Dapp)
      (cfp_metric_prod max_z2 cfp_metric_b0 DM) Dleq
      <- append_ident V Dapp
      <- leq_reflex N1 Dleq.
-runite :
   cfsub N2 (cfp_prod cfp_b0 D Dapp) (cfp_metric_prod DMmax cfp_metric_b0 DM)
      runite subtype_metric_runite sum_z D' DM' Dleq
      <- append_ident V Dapp'
      <- append_fun3 Dapp' Dapp Deq
      <- cfp_metric_resp htp_eq_ Deq tp_eq_ D D' DM DM'
      <- max_fun max_z2 DMmax Deqnat
      <- leq_reflex' Deqnat Dleq.
-codeappend :
   cfsub N3 (cfp_prod X1 (cfp_code Dcodeok Drtpok Dcodeval) Dapp) X2
      (codeappend X3) X4 X5 (cfp_code Dcodeok Drtpok Dcodeval') cfp_metric_code
      leq_z
      <- code_append Dapp Dcodeval Dcodeval'.
-explode :
   cfsub N1 (cfp_exp X1 Dte Dtr Dc) (cfp_metric_exp DM) (explode X2 Dte' Dtr')
      subtype_metric_explode sum_z Dc' DM' Dleq
      <- numeq_numlit_fun Dtr' Dtr Deqnat
      <- tp_exp_resp tp_eq_ Deqnat tp_eq_ Dte' Dte''
      <- tp_exp_fun Dte Dte'' Deq
      <- cfp_metric_resp htp_eq_ val_eq_ Deq Dc Dc' DM DM'
      <- leq_reflex N1 Dleq.
-implode :
   cfsub N1 Dc DM (implode Dkof Dte Dtr) subtype_metric_implode sum_z
      (cfp_exp Dkof Dte Dtr Dc) (cfp_metric_exp DM) Dleq
      <- leq_reflex N1 Dleq.
cfp_partition :
   Pi S:htp. Pi V12:val. Pi T12:tp. Pi M:nat. Pi T':tp. Pi N12:nat. Pi N1:nat.
      Pi N2:nat. Pi V1:val. Pi V2:val. Pi T1:tp. Pi T2:tp. Pi M1:nat. Pi M2:nat.
      Pi D:cfp S V12 T12.
      cfp_metric D M -> tp_exp T' N12 T12 -> sum N1 N2 N12 -> append V1 V2 V12
         -> tp_exp T' N1 T1 -> tp_exp T' N2 T2
         -> Pi D1:cfp S V1 T1. Pi D2:cfp S V2 T2.
                cfp_metric D1 M1 -> cfp_metric D2 M2 -> leq M1 M -> leq M2 M
                   -> type.
- :
   cfp_partition Dc DM Dte sum_z append_null tp_exp_z Dte cfp_b0 Dc
      cfp_metric_b0 DM leq_z Dleq
      <- leq_reflex N1 Dleq.
- :
   cfp_partition (cfp_prod Dc23 Dc1 Dapp1_23) (cfp_metric_prod DMmax DM23 DM1)
      (tp_exp_s Dte23) (sum_s Dsum) Dapp12_3 (tp_exp_s Dte2) Dte3
      (cfp_prod Dc2 Dc1 Dapp12) Dc3 (cfp_metric_prod DMmax' DM2 DM1) DM3 Dleq12
      Dleq3'
      <- cfp_partition Dc23 DM23 Dte23 Dsum Dapp23 Dte2 Dte3 Dc2 Dc3 DM2 DM3
            Dleq2 Dleq3
      <- append_assoc' Dapp12 Dapp12_3 Dapp23 Dapp1_23
      <- max_monotone2' Dleq2 DMmax' DMmax Dleq12
      <- max_implies_leq' DMmax Dleq
      <- leq_trans Dleq3 Dleq Dleq3'.
-partition :
   cfsub N2 (cfp_exp Dkof Dte Dtr Dc) (cfp_metric_exp DM) (partition Dtr')
      subtype_metric_partition sum_z
      (cfp_prod (cfp_exp Dkof Dte2 Dtr2 Dc2) (cfp_exp Dkof Dte1 Dtr1 Dc1)
          Dappend)
      (cfp_metric_prod Dmax' (cfp_metric_exp DM2) (cfp_metric_exp DM1)) Dleq
      <- canonize (tr_numeq_trans Dtr (tr_numeq_symm Dtr'))
            (trc_numeq calculate_numlit (calculate_numadd Dsum Dcalc2 Dcalc1))
      <- cfp_partition Dc DM Dte Dsum Dappend Dte1 Dte2 Dc1 Dc2 DM1 DM2 Dleq1
            Dleq2
      <- calculate_is_numeq Dcalc1 Dtr1
      <- calculate_is_numeq Dcalc2 Dtr2
      <- max_idem N2 Dmax
      <- max_monotone' Dleq1 Dleq2 Dmax' Dmax Dleq.
cfp_conjoin :
   Pi S:htp. Pi V1:val. Pi T1:tp. Pi V2:val. Pi T2:tp. Pi M1:nat. Pi M2:nat.
      Pi T':tp. Pi N1:nat. Pi N2:nat. Pi N12:nat. Pi V12:val. Pi T12:tp.
      Pi M:nat. Pi D1:cfp S V1 T1. Pi D2:cfp S V2 T2.
      cfp_metric D1 M1 -> cfp_metric D2 M2 -> tp_exp T' N1 T1 -> tp_exp T' N2 T2
         -> sum N1 N2 N12 -> append V1 V2 V12 -> tp_exp T' N12 T12
         -> Pi D:cfp S V12 T12. cfp_metric D M -> max M1 M2 M -> type.
- :
   cfp_conjoin cfp_b0 Dc cfp_metric_b0 DM tp_exp_z Dte sum_z append_null Dte Dc
      DM max_z1.
- :
   cfp_conjoin (cfp_prod Dc2 Dc1 Dapp12) Dc3 (cfp_metric_prod DMmax12 DM2 DM1)
      DM3 (tp_exp_s Dte2) Dte3 (sum_s Dsum) Dapp12_3 (tp_exp_s Dte23)
      (cfp_prod Dc23 Dc1 Dapp1_23) (cfp_metric_prod DMmax1_23 DM23 DM1)
      DMmax12_3'
      <- append_assoc Dapp12 Dapp12_3 Dapp23 Dapp1_23
      <- cfp_conjoin Dc2 Dc3 DM2 DM3 Dte2 Dte3 Dsum Dapp23 Dte23 Dc23 DM23
            DMmax23
      <- can_max N5 N7 N4 DMmax1_23
      <- max_assoc' DMmax12' DMmax12_3 DMmax23 DMmax1_23
      <- max_fun DMmax12' DMmax12 Deq
      <- max_resp Deq nat_eq_ nat_eq_ DMmax12_3 DMmax12_3'.
-conjoin :
   cfsub N2
      (cfp_prod (cfp_exp Dkof Dte2 Dtr2 Dc2) (cfp_exp X1 Dte1 Dtr1 Dc1) Dappend)
      (cfp_metric_prod DMmax (cfp_metric_exp DM2) (cfp_metric_exp DM1))
      (conjoin Dtr) subtype_metric_conjoin sum_z (cfp_exp Dkof Dte Dtr' Dc)
      (cfp_metric_exp DM) Dleq
      <- canonize (tr_numeq_trans (tr_numadd_compat _ _ _ _ Dtr2 Dtr1) Dtr)
            (trc_numeq (calculate_numadd Dsum calculate_numlit calculate_numlit)
                Dcalc)
      <- cfp_conjoin Dc1 Dc2 DM1 DM2 Dte1 Dte2 Dsum Dappend Dte Dc DM DMmax'
      <- calculate_is_numeq Dcalc Dtr'
      <- max_fun DMmax' DMmax Deq
      <- leq_reflex' Deq Dleq.
-eteq_forget :
   cfsub N5 (cfp_seteq Dbi Dp X1) X2 (seteq_forget X3) X4 X5 D DM leq_z
      <- binary_int_type' Dbi Dp D
      <- inti_metric D DM.
-eteq_goodnum :
   cfsub z (cfp_seteq Dbi Dp Dtr) cfp_metric_seteq seteq_goodnum
      subtype_metric_seteq_goodnum sum_z
      (cfp_assert (cfp_seteq Dbi Dp Dtr) (tr_numeq_good1 _ _ Dtr))
      (cfp_metric_assert cfp_metric_seteq) leq_z.
-exp_goodnum :
   cfsub N1 (cfp_exp Dkof Dte Dtr Dc) (cfp_metric_exp DM) exp_goodnum
      subtype_metric_exp_goodnum sum_z
      (cfp_assert (cfp_exp Dkof Dte Dtr Dc) (tr_numeq_good1 _ _ Dtr))
      (cfp_metric_assert (cfp_metric_exp DM)) Dleq
      <- leq_reflex N1 Dleq.
-at_goodnum :
   cfsub (s N1) Dc DM (sat_goodnum Dsat) subtype_metric_sat_goodnum
      (sum_s sum_z) (cfp_assert Dc Dtr) (cfp_metric_assert DM) Dleq
      <- sat_tn_good* N1 Dc DM Dsat Dtr
      <- leq_succ N1 Dleq.
-eteq_meet :
   cfsub N6 (cfp_meet (cfp_seteq Dbi2 Dp2 Dtr2) (cfp_seteq Dbi1 Dp1 Dtr1)) X1
      seteq_meet X2 X3
      (cfp_assert (cfp_seteq Dbi1 Dp1 Dtr1)
          (tr_numeq_trans (tr_numeq_symm Dtr2') Dtr1))
      (cfp_metric_assert cfp_metric_seteq) leq_z
      <- binary_int_fun Dbi2 Dbi1 Deq
      <- binary_eq_implies_length_eq B1 B2 Deq Deq'
      <- number_eq_cons Deq' Deq Deq''
      <- prop_eq_cons_tp Deq'' (\t:tp. pnumeq T2 t) Deq'''
      <- tr_resp Deq''' Dtr2 Dtr2'.
cfsub|trichotomy :
   Pi Nsz*bytebits:nat. Pi V:val. Pi Bval:binary Nsz*bytebits. Pi Nsz:nat.
      Pi Nval:nat. Pi BT:tp. Pi N:nat.
      binary_int theend V Bval -> product Nsz bytebits Nsz*bytebits
         -> represents Nval Bval -> tr (pnumeq BT (numlit N)) -> maybe_eq N Nval
         -> leq_gt N Nval
         -> Pi S:htp.
                Pi D:cfp S V
                        (join (setlt Nsz BT)
                            (join (seteq Nsz BT) (setgt Nsz BT))).
                cfp_metric D z -> type.
-trichotomy :
   cfsub N3 Dc X2 (trichotomy Dtr) X3 X4 D DM leq_z
      <- can_product Nsz bytebits Nsz*bytebits Dp
      <- can_int_to_binary' theend Dc Bval Dp Dbi
      <- can_represents1 Bval Nval Drep
      <- canonize Dtr (trc_numeq Dcalc X1)
      <- calculate_is_numeq Dcalc Dtr'
      <- compare_for_nat_eq N Nval Dmeq
      <- dichotomy N Nval Dleqgt
      <- cfsub|trichotomy Dbi Dp Drep Dtr' Dmeq Dleqgt S D DM.
- :
   cfsub|trichotomy Dbi Dp Drep Dtr (maybe_eq_yes Deq) X2 S1
      (cfp_join2 (kof_setlt _ Dkof)
          (cfp_join1 (kof_setgt _ Dkof)
              (cfp_seteq Dbi Dp (tr_numeq_trans (tr_numeq_rep2 Drep') Dtr))))
      (cfp_metric_join2 (cfp_metric_join1 cfp_metric_seteq))
      <- tr_reg Dtr (propok_numeq X1 Dkof)
      <- nat_eq_symm Deq Deq'
      <- represents_resp Deq' binary_eq_ Drep Drep'.
- :
   cfsub|trichotomy Dbi Dp Drep Dtr (maybe_eq_no Dneq) (leq_gt_leq Dleq) S1
      (cfp_join2 (kof_setlt _ Dkof)
          (cfp_join2 (kof_seteq Dkof)
              (cfp_exists
                  (cfp_assert (cfp_seteq Dbi Dp (tr_numeq_rep2 Drep))
                      (tr_numeq_lt_trans _ _ _ (tr_numlt_lit Dlt) Dtr))
                  (sat_true kof_numlit)
                  (\t:tp. \d:kof t knum.
                      kof_assert (kof_seteq d) (propok_numlt _ _ d Dkof)))))
      (cfp_metric_join2
          (cfp_metric_join2
              (cfp_metric_exists (cfp_metric_assert cfp_metric_seteq))))
      <- tr_reg Dtr (propok_numeq X1 Dkof)
      <- leq_neq_implies_lt Dleq Dneq Dlt.
- :
   cfsub|trichotomy Dbi Dp Drep Dtr X2 (leq_gt_gt Dlt) S1
      (cfp_join1 (kof_join (kof_setgt _ Dkof) (kof_seteq Dkof))
          (cfp_exists
              (cfp_assert (cfp_seteq Dbi Dp (tr_numeq_rep2 Drep))
                  (tr_numlt_eq_trans _ _ _ (tr_numeq_symm Dtr) (tr_numlt_lit Dlt)))
              (sat_true kof_numlit)
              (\t:tp. \d:kof t knum.
                  kof_assert (kof_seteq d) (propok_numlt _ _ Dkof d))))
      (cfp_metric_join1 (cfp_metric_exists (cfp_metric_assert cfp_metric_seteq)))
      <- tr_reg Dtr (propok_numeq X1 Dkof).
-focus :
   cfsub N3 Dc X1 focus X2 X3
      (cfp_exists (cfp_seteq Dbi Dp tr_numeq_bin) (sat_true kof_number)
          (\t:tp. \d:kof t knum. kof_seteq d))
      (cfp_metric_exists cfp_metric_seteq) leq_z
      <- can_product Nsz bytebits Nsz*bytebits Dp
      <- can_int_to_binary' theend Dc Bval Dp Dbi.
- :
   val_size* N2 Dc DM Dsat Dsize
      <- cfp_implies_notvar Dc Dnotvar
      <- canonize_sat Dnotvar Dsat Dcsat
      <- val_size** N2 Dc DM Dcsat Dsize.
- :
   val_size_elim N2 (cfpelim_ Dc X1 Dreduce) (cfpelim_metric_ DM) Dcsat Dsize
      <- csat_weaken Dcsat Dsat
      <- srs Dsat Dreduce Dsat'
      <- val_size* N2 Dc DM Dsat' Dsize.
-annot :
   val_size** N2 (cfp_annot Dc) (cfp_metric_annot DM) Dsat Dsize
      <- val_size_elim N2 Dc DM Dsat Dsize.
-app :
   val_size** N2 (cfp_app Dc) (cfp_metric_app DM) Dsat Dsize
      <- val_size_elim N2 Dc DM Dsat Dsize.
-pi1 :
   val_size** N2 (cfp_pi1 Dc) (cfp_metric_pi1 DM) Dsat Dsize
      <- val_size_elim N2 Dc DM Dsat Dsize.
-pi2 :
   val_size** N2 (cfp_pi2 Dc) (cfp_metric_pi2 DM) Dsat Dsize
      <- val_size_elim N2 Dc DM Dsat Dsize.
-kapp :
   val_size** N2 (cfp_kapp Dc) (cfp_metric_kapp DM) Dsat Dsize
      <- val_size_elim N2 Dc DM Dsat Dsize.
-case :
   val_size** N2 (cfp_case Dc) (cfp_metric_case DM) Dsat Dsize
      <- val_size_elim N2 Dc DM Dsat Dsize.
-unroll :
   val_size** N2 (cfp_unroll Dc) (cfp_metric_unroll DM) Dsat Dsize
      <- val_size_elim N2 Dc DM Dsat Dsize.
-b0 :
   val_size** N2 cfp_b0 X1 (csat_b0i Dtr) Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq size_null Dsize.
-b1 :
   val_size** N2 cfp_b1 X1 (csat_b1i Dtr) Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq (size_cons size_null) Dsize.
-eteq :
   val_size** N4 (cfp_seteq Dbi Dp X1) X2 (csat_seteqi Dtr X3) Dsize'
      <- size_binary_int Dbi Dp nat_eq_ Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq Dsize Dsize'.
-ns :
   val_size** N2 cfp_ns X1 (csat_nsi Dtr) Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq (size_cons size_null) Dsize.
-prod :
   val_size** N6 (cfp_prod Dc2 Dc1 Dapp) (cfp_metric_prod DMmax DM2 DM1)
      (csat_prodn Dtr Dsat2 Dsat1) Dsize
      <- employ_max N5 N4 N6 DMmax
      <- employ_max' N5 N4 N6 DMmax
      <- sat_tn_good* N5 Dc1 DM1 Dsat1 Dtrgood1
      <- sat_tn_good* N4 Dc2 DM2 Dsat2 Dtrgood2
      <- canonize (tr_imple (tr_good_numadd _ _ Dtrgood2 Dtrgood1) Dtr)
            (trc_numeq calculate_numlit (calculate_numadd Dsum Dcalc2 Dcalc1))
      <- calculate_is_numeq Dcalc1 Dtr1
      <- calculate_is_numeq Dcalc2 Dtr2
      <- val_size* N5 Dc1 DM1 (incleq _ _ _ Dtr1 Dsat1) Dsize1
      <- val_size* N4 Dc2 DM2 (incleq _ _ _ Dtr2 Dsat2) Dsize2
      <- size_append Dsize1 Dsize2 Dsize Dapp Dsum.
-exp :
   val_size** N2 (cfp_exp X1 Dte Dtr Dc) (cfp_metric_exp DM)
      (csat_expn Dtr' Dtrgood X2 Dsat) Dsize
      <- canonize (tr_imple (tr_good_nummul _ _ Dtrgood (tr_numeq_good1 _ _ Dtr)) Dtr')
            (trc_numeq calculate_numlit (calculate_nummul Dprod Dcalc2 Dcalc1))
      <- canonize Dtr (trc_numeq calculate_numlit Dcalc1')
      <- calculate_fun Dcalc1 Dcalc1' Deq
      <- prod_resp Deq nat_eq_ nat_eq_ Dprod Dprod'
      <- calculate_is_numeq Dcalc2 Dtreq2
      <- sat_tp_expi (entailment (entails_tn Dtreq2) Dsat) Dprod' Dte Dsat'
      <- val_size* N2 Dc DM Dsat' Dsize.
val_size_expz| :
   Pi S:htp. Pi V:val. Pi T':tp. Pi T1:tp. Pi N:nat.
      cfp S V T' -> tp_exp T1 N T' -> nat_eq N 0' -> size V 0' -> type.
- : val_size_expz| cfp_b0 tp_exp_z nat_eq_ size_null.
-expz :
   val_size** N3 (cfp_exp X1 Dte Dtr Dc) X2 (csat_expiz Dtr'' Dtr' X3 X4) Dsize'
      <- canonize (tr_numeq_trans Dtr' (tr_numeq_symm Dtr))
            (trc_numeq calculate_numlit Dcalc)
      <- calculate_fun calculate_numlit Dcalc Deq
      <- val_size_expz| Dc Dte Deq Dsize
      <- canonize_numeq_lit Dtr'' Deq'
      <- size_resp val_eq_ Deq' Dsize Dsize'.
-cbox :
   val_size** N3 (cfp_cbox X1 X2 Datomval) X3 (csat_cboxi Dtr X4 X5) Dsize'
      <- atom_size asize_pointer Datomval Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq Dsize Dsize'.
-cmbox :
   val_size** N3 (cfp_cmbox X1 X2 X3 X4 Datomval) X5 (csat_cmboxi Dtr X6 X7)
      Dsize'
      <- atom_size asize_pointer Datomval Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq Dsize Dsize'.
-arrow :
   val_size** N3 (cfp_arrow X1 X2 X3 X4 X5 Datomval) X6 (csat_arrowi Dtr X7)
      Dsize'
      <- atom_size asize_pointer Datomval Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq Dsize Dsize'.
-ptr :
   val_size** N3 (cfp_sptr X1 X2 Datomval) X3 (csat_sptri Dtr X4) Dsize'
      <- atom_size asize_spointer Datomval Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq Dsize Dsize'.
-forall :
   val_size** (s N3) Dc DM
      (csat_foralli Dsat Dsatarg (\t:tp. \x:kof t K1. X1 t x)) Dsize
      <- cfp_forall_inst* N3 Dc DM Dsatarg Dc' DM' Dleq
      <- employ_leq N2 N3 Dleq
      <- val_size* N2 Dc' DM' Dsat Dsize.
-exists :
   val_size** N2 (cfp_exists Dc Dsatarg (\t:tp. \x:kof t K1. X2 t x))
      (cfp_metric_exists DM)
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsat t x x1) X3) Dsize
      <- sat_reg Dsatarg Dkofarg X1
      <- val_size* N2 Dc DM (Dsat T2 Dkofarg Dsatarg) Dsize.
-guard :
   val_size** (s N3) Dc DM (csat_guardi Dsat Dtr X1) Dsize
      <- cfp_guard_inst* N3 Dc DM Dtr Dc' DM' Dleq
      <- employ_leq N2 N3 Dleq
      <- val_size* N2 Dc' DM' Dsat Dsize.
-assert :
   val_size** N2 (cfp_assert Dc Dtr) (cfp_metric_assert DM)
      (csat_asserti (\x:tr P1. Dsat x) X1) Dsize
      <- val_size* N2 Dc DM (Dsat Dtr) Dsize.
-rec :
   val_size** N2 (cfp_rec Dc (\t:tp. \x:kof t kt. X2 t x)) (cfp_metric_rec DM)
      (csat_reci (\t:tp. \x:kof t kt. Dsat t x)) Dsize
      <- (Pi t:tp. Pi d:kof t kt. sat_reg (Dsat t d) (Dkof t d) (X1 t d))
      <- val_size* N2 Dc DM
            (Dsat (rec (\t:tp. T1 t)) (kof_rec (\t:tp. \x:kof t kt. Dkof t x)))
            Dsize.
-meet1 :
   val_size** N4 (cfp_meet X1 Dc1) (cfp_metric_meet DMmax DM2 DM1)
      (csat_meeti1 X2 Dsat1) Dsize
      <- employ_max' N2 N3 N4 DMmax
      <- val_size* N2 Dc1 DM1 Dsat1 Dsize.
-meet2 :
   val_size** N4 (cfp_meet Dc2 X1) (cfp_metric_meet DMmax DM2 DM1)
      (csat_meeti2 Dsat2 X2) Dsize
      <- employ_max N3 N2 N4 DMmax
      <- val_size* N2 Dc2 DM2 Dsat2 Dsize.
-join1 :
   val_size** N2 (cfp_join1 X1 Dc1) (cfp_metric_join1 DM) (csat_joini X2 Dsat1)
      Dsize
      <- val_size* N2 Dc1 DM Dsat1 Dsize.
-join2 :
   val_size** N2 (cfp_join2 X1 Dc2) (cfp_metric_join2 DM) (csat_joini Dsat2 X2)
      Dsize
      <- val_size* N2 Dc2 DM Dsat2 Dsize.
-gotptr :
   val_size** N2 (cfp_gotptr Datomval) X1 (csat_gotptri Dtr) Dsize'
      <- atom_size asize_gotpointer Datomval Dsize
      <- canonize_numeq_lit Dtr Deq
      <- size_resp val_eq_ Deq Dsize Dsize'.
- :
   sat_tn_good* N1 Dc DM Dsat Dgood
      <- cfp_implies_notvar Dc Dnotvar
      <- canonize_sat Dnotvar Dsat Dcsat
      <- sat_tn_good** N1 Dc DM Dcsat Dgood.
- :
   sat_tn_good_elim N1 (cfpelim_ Dc X1 Dreduce) (cfpelim_metric_ DM) Dcsat Dgood
      <- csat_weaken Dcsat Dsat
      <- srs Dsat Dreduce Dsat'
      <- sat_tn_good* N1 Dc DM Dsat' Dgood.
- :
   sat_tn_good** N1 (cfp_annot D) (cfp_metric_annot DM) Dcsat Dgood
      <- sat_tn_good_elim N1 D DM Dcsat Dgood.
- :
   sat_tn_good** N1 (cfp_app D) (cfp_metric_app DM) Dcsat Dgood
      <- sat_tn_good_elim N1 D DM Dcsat Dgood.
- :
   sat_tn_good** N1 (cfp_pi1 D) (cfp_metric_pi1 DM) Dcsat Dgood
      <- sat_tn_good_elim N1 D DM Dcsat Dgood.
- :
   sat_tn_good** N1 (cfp_pi2 D) (cfp_metric_pi2 DM) Dcsat Dgood
      <- sat_tn_good_elim N1 D DM Dcsat Dgood.
- :
   sat_tn_good** N1 (cfp_kapp D) (cfp_metric_kapp DM) Dcsat Dgood
      <- sat_tn_good_elim N1 D DM Dcsat Dgood.
- :
   sat_tn_good** N1 (cfp_case D) (cfp_metric_case DM) Dcsat Dgood
      <- sat_tn_good_elim N1 D DM Dcsat Dgood.
- :
   sat_tn_good** N1 (cfp_unroll D) (cfp_metric_unroll DM) Dcsat Dgood
      <- sat_tn_good_elim N1 D DM Dcsat Dgood.
- : sat_tn_good** N1 X1 X2 (csat_b0i Dtr) (tr_numeq_good2 _ _ Dtr).
- : sat_tn_good** N1 X1 X2 (csat_b1i Dtr) (tr_numeq_good2 _ _ Dtr).
- : sat_tn_good** N2 X1 X2 (csat_seteqi Dtr X3) (tr_numeq_good2 _ _ Dtr).
- :
   sat_tn_good** N3 (cfp_prod Dc2 Dc1 X1) (cfp_metric_prod DMmax DM2 DM1)
      (csat_prodn Dtr Dsat2 Dsat1)
      (tr_numeq_good2 _ _ (tr_imple (tr_good_numadd _ _ Dtr2 Dtr1) Dtr))
      <- employ_max N2 N1 N3 DMmax
      <- employ_max' N2 N1 N3 DMmax
      <- sat_tn_good* N2 Dc1 DM1 Dsat1 Dtr1
      <- sat_tn_good* N1 Dc2 DM2 Dsat2 Dtr2.
- :
   sat_tn_good** N1 (cfp_exp X1 X2 Dtr X3) X4 (csat_expn Dtr' Dtrgood X5 X6)
      (tr_numeq_good2 _ _
          (tr_imple (tr_good_nummul _ _ Dtrgood (tr_numeq_good1 _ _ Dtr)) Dtr')).
- : sat_tn_good** N1 X1 X2 (csat_expiz Dtr X3 X4 X5) (tr_numeq_good2 _ _ Dtr).
- : sat_tn_good** N1 X1 X2 (csat_arrowi Dtr X3) (tr_numeq_good2 _ _ Dtr).
- : sat_tn_good** N1 X1 X2 (csat_cboxi Dtr X3 X4) (tr_numeq_good2 _ _ Dtr).
- : sat_tn_good** N1 X1 X2 (csat_cmboxi Dtr X3 X4) (tr_numeq_good2 _ _ Dtr).
- : sat_tn_good** N1 X1 X2 (csat_sptri Dtr X3) (tr_numeq_good2 _ _ Dtr).
- :
   sat_tn_good** (s N2) Dc DM
      (csat_foralli Dsat Dsatarg (\t:tp. \x:kof t K1. X1 t x)) Dgood
      <- cfp_forall_inst* N2 Dc DM Dsatarg Dc' DM' Dleq
      <- employ_leq N1 N2 Dleq
      <- sat_tn_good* N1 Dc' DM' Dsat Dgood.
- :
   sat_tn_good** N1 (cfp_exists Dc Dsatarg (\t:tp. \x:kof t K1. X2 t x))
      (cfp_metric_exists DM)
      (csat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dsat t x x1) X3) Dgood
      <- sat_reg Dsatarg Dkofarg X1
      <- sat_tn_good* N1 Dc DM (Dsat T2 Dkofarg Dsatarg) Dgood.
- :
   sat_tn_good** (s N2) Dc DM (csat_guardi Dsat Dtr X1) Dgood
      <- cfp_guard_inst* N2 Dc DM Dtr Dc' DM' Dleq
      <- employ_leq N1 N2 Dleq
      <- sat_tn_good* N1 Dc' DM' Dsat Dgood.
- :
   sat_tn_good** N1 (cfp_assert Dc Dtr) (cfp_metric_assert DM)
      (csat_asserti (\x:tr P1. Dsat x) X1) Dgood
      <- sat_tn_good* N1 Dc DM (Dsat Dtr) Dgood.
- :
   sat_tn_good** N1 (cfp_rec Dc (\t:tp. \x:kof t kt. X2 t x))
      (cfp_metric_rec DM) (csat_reci (\t:tp. \x:kof t kt. Dsat t x)) Dgood
      <- (Pi t:tp. Pi d:kof t kt. sat_reg (Dsat t d) (Dkof t d) (X1 t d))
      <- sat_tn_good* N1 Dc DM
            (Dsat (rec (\t:tp. T1 t)) (kof_rec (\t:tp. \x:kof t kt. Dkof t x)))
            Dgood.
- :
   sat_tn_good** N3 (cfp_meet Dc2 Dc1) (cfp_metric_meet DMmax DM2 DM1)
      (csat_meeti1 X1 Dsat) Dgood
      <- employ_max' N1 N2 N3 DMmax
      <- sat_tn_good* N1 Dc1 DM1 Dsat Dgood.
- :
   sat_tn_good** N3 (cfp_meet Dc2 Dc1) (cfp_metric_meet DMmax DM2 DM1)
      (csat_meeti2 Dsat X1) Dgood
      <- employ_max N2 N1 N3 DMmax
      <- sat_tn_good* N1 Dc2 DM2 Dsat Dgood.
- :
   sat_tn_good** N1 (cfp_join1 X1 Dc) (cfp_metric_join1 DM)
      (csat_joini Dsat2 Dsat1) Dgood
      <- sat_tn_good* N1 Dc DM Dsat1 Dgood.
- :
   sat_tn_good** N1 (cfp_join2 X1 Dc) (cfp_metric_join2 DM)
      (csat_joini Dsat2 Dsat1) Dgood
      <- sat_tn_good* N1 Dc DM Dsat2 Dgood.
- : sat_tn_good** N1 X1 X2 (csat_nsi Dtr) (tr_numeq_good2 _ _ Dtr).
- : sat_tn_good** N1 X1 X2 (csat_gotptri Dtr) (tr_numeq_good2 _ _ Dtr).
- :
   val_sizen* N2 Dc DM Dsat Dsize Dtr
      <- sat_tn_good* N2 Dc DM Dsat Dgood
      <- canonize_good Dgood Dcalc
      <- calculate_is_numeq Dcalc Dtr
      <- val_size* N2 Dc DM (entailment (entails_tn Dtr) Dsat) Dsize.
-base :
   boxsub_subsume* (s N2) (boxsub_base X1 Dsat Dsub) (boxsub_metric_base DMsub)
      Dc DMc (sum_s DMsum) Dsep Dc1 DMc1 DMleq1'' Dc2 DMc2 DMleq2''
      <- cfsub N2 Dc DMc Dsub DMsub DMsum (cfp_prod Dc2 Dc1 Dapp)
            (cfp_metric_prod DMmax DMc2 DMc1) DMleq
      <- max_implies_leq DMmax DMleq1
      <- max_implies_leq' DMmax DMleq2
      <- leq_trans DMleq1 DMleq DMleq1'
      <- leq_trans DMleq2 DMleq DMleq2'
      <- employ_leq N3 N2 DMleq1'
      <- val_size* N3 Dc1 DMc1 Dsat Dsize
      <- append_is_separate Dapp Dsize Dsep
      <- leq_succ' DMleq1' DMleq1''
      <- leq_succ' DMleq2' DMleq2''.
-transl :
   boxsub_subsume* Nall (boxsub_transl Dsub Dbsub)
      (boxsub_metric_transl DMsums DMsub DMbsub) Dc DMc DMsum Dsep Dc1 DMc1
      DMleq1' Dc2 DMc2 DMleq2'
      <- sum_assoc DMsums DMsum DMsum_sub_c DMsum_bsub__sub_c
      <- employ_sum Nbsub N_sub_c Nall DMsum_bsub__sub_c
      <- cfsub N_sub_c Dc DMc Dsub DMsub DMsum_sub_c Dc' DMc' DMleq_c'
      <- sum_monotone2' DMleq_c' DMsum_bsub_c' DMsum_bsub__sub_c DMleq_bsub_c'
      <- employ_leq Nbsub_c' Nall DMleq_bsub_c'
      <- boxsub_subsume* Nbsub_c' Dbsub DMbsub Dc' DMc' DMsum_bsub_c' Dsep Dc1
            DMc1 DMleq1 Dc2 DMc2 DMleq2
      <- leq_trans DMleq1 DMleq_bsub_c' DMleq1'
      <- leq_trans DMleq2 DMleq_bsub_c' DMleq2'.
-transr :
   boxsub_subsume* Nall (boxsub_transr Dsub2 Dsub1 Dbsub)
      (boxsub_metric_transr DMsums DMsums12 DMsub2 DMsub1 DMbsub) Dc DMc DMsum
      Dsep Dc1' DMc1' DMleq1'' Dc2' DMc2' DMleq2''
      <- sum_commute DMsums DMsums'
      <- sum_assoc DMsums' DMsum DMsum_bsub_c DMsum_sub12_bsub_c
      <- employ_sum Nsub12 N_bsub_c Nall DMsum_sub12_bsub_c
      <- boxsub_subsume* N_bsub_c Dbsub DMbsub Dc DMc DMsum_bsub_c Dsep Dc1 DMc1
            DMleq1 Dc2 DMc2 DMleq2
      <- sum_implies_leq DMsums12 DMleqs1
      <- sum_implies_leq' DMsums12 DMleqs2
      <- sum_monotone' DMleqs1 DMleq1 DMsum_subc1 DMsum_sub12_bsub_c DMleq_subc1
      <- sum_monotone' DMleqs2 DMleq2 DMsum_subc2 DMsum_sub12_bsub_c DMleq_subc2
      <- employ_leq Nsubc1 Nall DMleq_subc1
      <- employ_leq Nsubc2 Nall DMleq_subc2
      <- cfsub Nsubc1 Dc1 DMc1 Dsub1 DMsub1 DMsum_subc1 Dc1' DMc1' DMleq1'
      <- cfsub Nsubc2 Dc2 DMc2 Dsub2 DMsub2 DMsum_subc2 Dc2' DMc2' DMleq2'
      <- leq_trans DMleq1' DMleq_subc1 DMleq1''
      <- leq_trans DMleq2' DMleq_subc2 DMleq2''.
-hleft :
   boxsub_subsume* (s N2) (boxsub_shleft Dsum Dsat1b Dbsub)
      (boxsub_metric_shleft DM) Dc DMc (sum_s DMsum) Dsep' Dc1a DMc1a DMleq1a''
      (cfp_prod Dc2 Dc1b Dapp2) (cfp_metric_prod DMmax' DMc2 DMc1b) DMleq'
      <- boxsub_subsume* N2 Dbsub DM Dc DMc DMsum Dsep
            (cfp_prod Dc1b Dc1a Dapp1) (cfp_metric_prod DMmax DMc1b DMc1a)
            DMleq1 Dc2 DMc2 DMleq2
      <- max_implies_leq DMmax DMleq1a
      <- leq_trans DMleq1a DMleq1 DMleq1a'
      <- max_implies_leq' DMmax DMleq1b
      <- leq_trans DMleq1b DMleq1 DMleq1b'
      <- employ_leq N4 N2 DMleq1b'
      <- val_size* N4 Dc1b DMc1b Dsat1b Dsize1b
      <- separate_is_append Dsep Dapp
      <- separate_size Dsep Dsize1
      <- sum_commute Dsum Dsum'
      <- size_append'''' Dsize1a Dsize1b Dsize1 Dapp1 Dsum'
      <- append_assoc Dapp1 Dapp Dapp2 Dapp'
      <- append_is_separate Dapp' Dsize1a Dsep'
      <- can_max N4 N5 N1 DMmax'
      <- max_leq DMleq1b' DMleq2 DMmax' DMleq
      <- leq_succ' DMleq1a' DMleq1a''
      <- leq_succ' DMleq DMleq'.
-right :
   boxsub_subsume* (s N2) (boxsub_shright Dsum Dsat2a Dbsub)
      (boxsub_metric_shright DM) Dc DMc (sum_s DMsum) Dsep'
      (cfp_prod Dc2a Dc1 Dapp1) (cfp_metric_prod DMmax' DMc2a DMc1) DMleq' Dc2b
      DMc2b DMleq2b''
      <- boxsub_subsume* N2 Dbsub DM Dc DMc DMsum Dsep Dc1 DMc1 DMleq1
            (cfp_prod Dc2b Dc2a Dapp2) (cfp_metric_prod DMmax DMc2b DMc2a)
            DMleq2
      <- max_implies_leq DMmax DMleq2a
      <- leq_trans DMleq2a DMleq2 DMleq2a'
      <- max_implies_leq' DMmax DMleq2b
      <- leq_trans DMleq2b DMleq2 DMleq2b'
      <- employ_leq N5 N2 DMleq2a'
      <- val_size* N5 Dc2a DMc2a Dsat2a Dsize2a
      <- separate_is_append Dsep Dapp
      <- separate_size Dsep Dsize1
      <- sum_commute Dsum Dsum'
      <- append_assoc' Dapp1 Dapp' Dapp2 Dapp
      <- size_append Dsize1 Dsize2a Dsize1' Dapp1 Dsum'
      <- append_is_separate Dapp' Dsize1' Dsep'
      <- can_max N4 N5 N1 DMmax'
      <- max_leq DMleq1 DMleq2a' DMmax' DMleq
      <- leq_succ' DMleq2b' DMleq2b''
      <- leq_succ' DMleq DMleq'.
-meet :
   boxsub_subsume* N2 (boxsub_meet Dbsubb Dbsuba)
      (boxsub_metric_meet DMsums DMb DMa) Dc DMc DMsum Dsepa
      (cfp_meet Dc1b' Dc1a) (cfp_metric_meet DMmax1 DMc1b' DMc1a) DMleq1
      (cfp_meet Dc2b' Dc2a) (cfp_metric_meet DMmax2 DMc2b' DMc2a) DMleq2
      <- sum_implies_leq DMsums DMleqa
      <- sum_implies_leq' DMsums DMleqb
      <- sum_monotone1' DMleqa DMsuma DMsum DMleqa'
      <- sum_monotone1' DMleqb DMsumb DMsum DMleqb'
      <- employ_leq N6 N2 DMleqa'
      <- employ_leq N5 N2 DMleqb'
      <- boxsub_subsume* N6 Dbsuba DMa Dc DMc DMsuma Dsepa Dc1a DMc1a DMleq1a
            Dc2a DMc2a DMleq2a
      <- boxsub_subsume* N5 Dbsubb DMb Dc DMc DMsumb Dsepb Dc1b DMc1b DMleq1b
            Dc2b DMc2b DMleq2b
      <- separate_fun Dsepb Dsepa Deq1 Deq2
      <- cfp_metric_resp htp_eq_ Deq1 tp_eq_ Dc1b Dc1b' DMc1b DMc1b'
      <- cfp_metric_resp htp_eq_ Deq2 tp_eq_ Dc2b Dc2b' DMc2b DMc2b'
      <- leq_trans DMleq1a DMleqa' DMleq1a'
      <- leq_trans DMleq1b DMleqb' DMleq1b'
      <- can_max N7 N8 N9 DMmax1
      <- max_leq DMleq1a' DMleq1b' DMmax1 DMleq1
      <- leq_trans DMleq2a DMleqa' DMleq2a'
      <- leq_trans DMleq2b DMleqb' DMleq2b'
      <- can_max N1 N3 N4 DMmax2
      <- max_leq DMleq2a' DMleq2b' DMmax2 DMleq2.
cf : Pi S:htp. Pi V:val. Pi T':tp. of S V T' -> cfp S V T' -> type.
- : cf Dof Dc <- can_of_metric Dof DM <- cf* N2 Dof DM Dc X1 X2.
val_size :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat.
      cfp S V T' -> sat T' (rti N) kt -> size V N -> type.
- :
   val_size Dc Dsat Dsize
      <- can_cfp_metric Dc DM
      <- val_size* N2 Dc DM Dsat Dsize.
cfp_forall_inst :
   Pi S:htp. Pi V:val. Pi K:kind. Pi R:pred. Pi T':tp -> tp. Pi Targ:tp.
      cfp S V (forall K R (\t:tp. T' t)) -> sat Targ R K -> cfp S V (T' Targ)
         -> type.
- :
   cfp_forall_inst Dc Dsat Dc'
      <- can_cfp_metric Dc DM
      <- cfp_forall_inst* N2 Dc DM Dsat Dc' X1 X2.
cfp_guard_inst :
   Pi S:htp. Pi V:val. Pi P:prop. Pi T':tp.
      cfp S V (guard P T') -> tr P -> cfp S V T' -> type.
- :
   cfp_guard_inst Dc Dtr Dc'
      <- can_cfp_metric Dc DM
      <- cfp_guard_inst* N2 Dc DM Dtr Dc' X1 X2.
sat_tn_good :
      cfp S V T -> sat T (rtn T') kt -> tr (good T') -> type.
- :
   sat_tn_good Dc Dsat Dgood
      <- can_cfp_metric Dc DM
      <- sat_tn_good* N1 Dc DM Dsat Dgood.
val_sizen :
      cfp S V T -> sat T (rtn T') kt -> size V N -> tr (pnumeq T' (numlit N))
         -> type.
- :
   val_sizen Dc Dsat Dsize Dtr
      <- sat_tn_good Dc Dsat Dgood
      <- canonize_good Dgood Dcalc
      <- calculate_is_numeq Dcalc Dtr
      <- val_size Dc (entailment (entails_tn Dtr) Dsat) Dsize.
boxsub_subsume :
      boxsub T' N T1 T2 -> of S V T' -> separate N V V1 V2 -> of S V1 T1
         -> of S V2 T2 -> type.
- :
   boxsub_subsume Dbsub Dof Dsep Dof1 Dof2
      <- cf Dof Dc
      <- can_boxsub_metric Dbsub DMbsub
      <- can_cfp_metric Dc DMc
      <- can_sum N2 N3 N6 DMsum
      <- boxsub_subsume* N6 Dbsub DMbsub Dc DMc DMsum Dsep Dc1 X1 X2 Dc2 X3 X4
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc2 Dof2.
unique_tp_size :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat. Pi N':nat.
      cfp S V T' -> sat T' (rti N) kt -> sat T' (rti N') kt -> nat_eq N N'
         -> type.
- :
   unique_tp_size Dc Dsat Dsat' Deq
      <- val_size Dc Dsat Dsize
      <- val_size Dc Dsat' Dsize'
      <- size_fun Dsize Dsize' Deq.
val_size' :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat.
      of S V T' -> sat T' (rti N) kt -> size V N -> type.
- : val_size' Dof Dsat Dsize <- cf Dof Dc <- val_size Dc Dsat Dsize.
val_size_detn :
   Pi S1:htp. Pi V1:val. Pi T':tp. Pi S2:htp. Pi V2:val. Pi T1:tp. Pi N:nat.
      cfp S1 V1 T' -> cfp S2 V2 T' -> sat T' (rtn T1) kt -> size V1 N
         -> size V2 N -> type.
- :
   val_size_detn Dc1 Dc2 Dsat Dsize1 Dsize2
      <- sat_tn_good Dc1 Dsat Dgood
      <- canonize_good Dgood Dcalc
      <- calculate_is_numeq Dcalc Dtr
      <- val_size Dc1 (entailment (entails_tn Dtr) Dsat) Dsize1'
      <- val_size Dc2 (entailment (entails_tn Dtr) Dsat) Dsize2'
      <- size_fun Dsize1' Dsize1 Deq
      <- size_resp val_eq_ Deq Dsize2' Dsize2.
val_size_det* :
   Pi S1:htp. Pi V1:val. Pi T':tp. Pi S2:htp. Pi V2:val. Pi Nsz:nat. Pi N:nat.
      Pi D:cfp S1 V1 T'.
      cfp_metric D N -> cfp S2 V2 T' -> sat T' rtd kt -> size V1 Nsz
         -> size V2 Nsz -> type.
val_size_det** :
   Pi S1:htp. Pi V1:val. Pi T':tp. Pi S2:htp. Pi V2:val. Pi Nsz:nat. Pi N:nat.
      Pi D:cfp S1 V1 T'.
      cfp_metric D N -> cfp S2 V2 T' -> csat T' rtd kt -> size V1 Nsz
         -> size V2 Nsz -> type.
val_size_det_elim :
   Pi S1:htp. Pi V1:val. Pi T':tp. Pi S2:htp. Pi V2:val. Pi Nsz:nat. Pi N:nat.
      Pi D:cfpelim S1 V1 T'.
      cfpelim_metric D N -> cfp S2 V2 T' -> csat T' rtd kt -> size V1 Nsz
         -> size V2 Nsz -> type.
- :
   val_size_det* N2 Dc1 DM Dc2 Dsat Dsize1 Dsize2
      <- cfp_implies_notvar Dc1 Dnotvar
      <- canonize_sat Dnotvar Dsat Dcsat
      <- val_size_det** N2 Dc1 DM Dc2 Dcsat Dsize1 Dsize2.
- :
   val_size_det_elim N2 (cfpelim_ Dc1' X1 Dreduce) (cfpelim_metric_ DM) Dc2
      Dcsat Dsize Dsize'
      <- csat_weaken Dcsat Dsat
      <- cfp_reduce' Dc2 Dreduce Dc2'
      <- srs Dsat Dreduce Dsat'
      <- val_size_det* N2 Dc1' DM Dc2' Dsat' Dsize Dsize'.
-annot :
   val_size_det** N2 (cfp_annot Dc1) (cfp_metric_annot DM) Dc2 Dsat Dsize Dsize'
      <- val_size_det_elim N2 Dc1 DM Dc2 Dsat Dsize Dsize'.
-app :
   val_size_det** N2 (cfp_app Dc1) (cfp_metric_app DM) Dc2 Dsat Dsize Dsize'
      <- val_size_det_elim N2 Dc1 DM Dc2 Dsat Dsize Dsize'.
-pi1 :
   val_size_det** N2 (cfp_pi1 Dc1) (cfp_metric_pi1 DM) Dc2 Dsat Dsize Dsize'
      <- val_size_det_elim N2 Dc1 DM Dc2 Dsat Dsize Dsize'.
-pi2 :
   val_size_det** N2 (cfp_pi2 Dc1) (cfp_metric_pi2 DM) Dc2 Dsat Dsize Dsize'
      <- val_size_det_elim N2 Dc1 DM Dc2 Dsat Dsize Dsize'.
-case :
   val_size_det** N2 (cfp_case Dc1) (cfp_metric_case DM) Dc2 Dsat Dsize Dsize'
      <- val_size_det_elim N2 Dc1 DM Dc2 Dsat Dsize Dsize'.
-kapp :
   val_size_det** N2 (cfp_kapp Dc1) (cfp_metric_kapp DM) Dc2 Dsat Dsize Dsize'
      <- val_size_det_elim N2 Dc1 DM Dc2 Dsat Dsize Dsize'.
-unroll :
   val_size_det** N2 (cfp_unroll Dc1) (cfp_metric_unroll DM) Dc2 Dsat Dsize
      Dsize'
      <- val_size_det_elim N2 Dc1 DM Dc2 Dsat Dsize Dsize'.
-b0 :
   val_size_det** N2 Dc1 X1 Dc2 csat_b0d Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 sat_b0i Dsize1 Dsize2.
-b1 :
   val_size_det** N2 Dc1 X1 Dc2 csat_b1d Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 sat_b1i Dsize1 Dsize2.
-eteq :
   val_size_det** N3 Dc1 X1 Dc2 (csat_seteqd D1) Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 (sat_seteqi D1) Dsize1 Dsize2.
-exp :
   val_size_det** N2 Dc1 X1 Dc2 (csat_expdz D3 D2 D1) Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 (sat_expiz D3 D2 D1) Dsize1 Dsize2.
-arrow :
   val_size_det** N2 Dc1 X1 Dc2 (csat_arrowd D1) Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 (sat_arrowi D1) Dsize1 Dsize2.
-box :
   val_size_det** N2 Dc1 X1 Dc2 (csat_cboxd D2 D1) Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 (sat_cboxi D2 D1) Dsize1 Dsize2.
-mbox :
   val_size_det** N2 Dc1 X1 Dc2 (csat_cmboxd D2 D1) Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 (sat_cmboxi D2 D1) Dsize1 Dsize2.
-ptr :
   val_size_det** N2 Dc1 X1 Dc2 (csat_sptrd D1) Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 (sat_sptri D1) Dsize1 Dsize2.
-exists :
   val_size_det** N2 Dc1 X1 Dc2
      (csat_existsd (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1) Dsize1
      Dsize2
      <- val_size_detn Dc1 Dc2
            (sat_existsi (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D2 t x x1) D1)
            Dsize1 Dsize2.
-join :
   val_size_det** N2 Dc1 X1 Dc2 (csat_joind D2 D1) Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 (sat_joini D2 D1) Dsize1 Dsize2.
-ns :
   val_size_det** N2 Dc1 X1 Dc2 csat_nsd Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 sat_nsi Dsize1 Dsize2.
-gotptr :
   val_size_det** N2 Dc1 X1 Dc2 csat_gotptrd Dsize1 Dsize2
      <- val_size_detn Dc1 Dc2 sat_gotptri Dsize1 Dsize2.
-prod :
   val_size_det** N6 (cfp_prod Dc12 Dc11 Dapp1) (cfp_metric_prod DMmax DM2 DM1)
      (cfp_prod Dc22 Dc21 Dapp2) (csat_prodd Dsat2 Dsat1) Dsize1 Dsize2
      <- can_size V4 N2 Dsize12
      <- size_append'' Dsize11 Dsize12 Dsize1 Dapp1 Dsum
      <- employ_max' N5 N4 N6 DMmax
      <- employ_max N5 N4 N6 DMmax
      <- val_size_det* N5 Dc11 DM1 Dc21 Dsat1 Dsize11 Dsize21
      <- val_size_det* N4 Dc12 DM2 Dc22 Dsat2 Dsize12 Dsize22
      <- size_append Dsize21 Dsize22 Dsize2 Dapp2 Dsum.
-exp :
   val_size_det** N2 (cfp_exp X1 Dte1 Dtr1 Dc1) (cfp_metric_exp DM)
      (cfp_exp X2 Dte2 Dtr2 Dc2) (csat_expd X3 Dsat) Dsize1 Dsize2
      <- numeq_numlit_fun Dtr2 Dtr1 Dnateq
      <- tp_exp_resp tp_eq_ Dnateq tp_eq_ Dte2 Dte2'
      <- tp_exp_fun Dte2' Dte1 Deq
      <- cfp_resp htp_eq_ val_eq_ Deq Dc2 Dc2'
      <- sat_tp_expd Dsat Dte1 Dsat'
      <- val_size_det* N2 Dc1 DM Dc2' Dsat' Dsize1 Dsize2.
-forall :
   val_size_det** (s N3) Dc1 DM Dc2
      (csat_foralld Dsat Dsatarg (\t:tp. \x:kof t K1. X1 t x)) Dsize1 Dsize2
      <- cfp_forall_inst* N3 Dc1 DM Dsatarg Dc1' DM' Dleq
      <- employ_leq N2 N3 Dleq
      <- cfp_forall_inst Dc2 Dsatarg Dc2'
      <- val_size_det* N2 Dc1' DM' Dc2' Dsat Dsize1 Dsize2.
-guard :
   val_size_det** (s N3) Dc1 DM Dc2 (csat_guardd Dsat Dtr X1) Dsize1 Dsize2
      <- cfp_guard_inst* N3 Dc1 DM Dtr Dc1' DM' Dleq
      <- employ_leq N2 N3 Dleq
      <- cfp_guard_inst Dc2 Dtr Dc2'
      <- val_size_det* N2 Dc1' DM' Dc2' Dsat Dsize1 Dsize2.
-assert :
   val_size_det** N2 (cfp_assert Dc1 Dtr) (cfp_metric_assert DM)
      (cfp_assert Dc2 X1) (csat_assertd (\x:tr P1. Dsat x) X2) Dsize1 Dsize2
      <- val_size_det* N2 Dc1 DM Dc2 (Dsat Dtr) Dsize1 Dsize2.
-rec :
   val_size_det** N2 (cfp_rec Dc1 (\t:tp. \x:kof t kt. X1 t x))
      (cfp_metric_rec DM) (cfp_rec Dc2 (\t:tp. \x:kof t kt. X2 t x))
      (csat_recd (\t:tp. \x:kof t kt. Dsat t x)) Dsize1 Dsize2
      <- (Pi t:tp. Pi d:kof t kt. sat_reg (Dsat t d) (Dkof t d) Dpon)
      <- val_size_det* N2 Dc1 DM Dc2
            (Dsat (rec (\t:tp. T1 t)) (kof_rec (\t:tp. \x:kof t kt. Dkof t x)))
            Dsize1 Dsize2.
-meet1 :
   val_size_det** N4 (cfp_meet X1 Dc1) (cfp_metric_meet DMmax DM2 DM1)
      (cfp_meet X2 Dc2) (csat_meetd1 X3 Dsat) Dsize1 Dsize2
      <- employ_max' N2 N3 N4 DMmax
      <- val_size_det* N2 Dc1 DM1 Dc2 Dsat Dsize1 Dsize2.
-meet2 :
   val_size_det** N4 (cfp_meet Dc1 X1) (cfp_metric_meet DMmax DM2 DM1)
      (cfp_meet Dc2 X2) (csat_meetd2 Dsat X3) Dsize1 Dsize2
      <- employ_max N3 N2 N4 DMmax
      <- val_size_det* N2 Dc1 DM2 Dc2 Dsat Dsize1 Dsize2.
val_size_det :
   Pi S1:htp. Pi V1:val. Pi T':tp. Pi S2:htp. Pi V2:val. Pi N:nat.
      cfp S1 V1 T' -> cfp S2 V2 T' -> sat T' rtd kt -> size V1 N -> size V2 N
         -> type.
- :
   val_size_det Dc1 Dc2 Dsat Dsize1 Dsize2
      <- can_cfp_metric Dc1 DM
      <- val_size_det* N2 Dc1 DM Dc2 Dsat Dsize1 Dsize2.
cfb0 : Pi S:htp. Pi V:val. of S V b0 -> val_eq V null -> type.
cfb0| : Pi S:htp. Pi V:val. cfp S V b0 -> val_eq V null -> type.
cfb0_ : cfb0 Dof Deq <- cf Dof Dc <- cfb0| Dc Deq.
cfb0|_ : cfb0| cfp_b0 val_eq_.
cfcmbox :
   Pi S:htp. Pi V:val. Pi T2:tp. Pi T3:tp. Pi L:loc. Pi P:nat. Pi T':tp.
      Pi T1:tp. Pi T4:tp.
      of S V (cmbox T2 T3) -> atomval V (pointer L P) 0' -> htlookup S L T'
         -> boxsub T' P (prod T1 T2) (prod T3 T4)
         -> subtype (prod (prod T1 T2) (prod T3 T4)) T' -> segof L hseg -> type.
- :
   cfcmbox Dof Datomval Dlook' Dbsub' Dsub Dseg'
      <- cf Dof (cfp_cmbox Dsub Dbsub Dseg Dlook Datomval')
      <- atomval_fun Datomval' Datomval Deq
      <- aval_eq_pointer Deq Dloceq Dnateq
      <- boxsub_resp tp_eq_ Dnateq tp_eq_ tp_eq_ Dbsub Dbsub'
      <- htlookup_resp htp_eq_ Dloceq tp_eq_ Dlook Dlook'
      <- segof_resp Dloceq seg_eq_ Dseg Dseg'.
cfcbox :
   Pi S:htp. Pi V:val. Pi T2:tp. Pi T3:tp. Pi L:loc. Pi P:nat. Pi T':tp.
      Pi T1:tp. Pi T4:tp.
      of S V (cbox T2 T3) -> atomval V (pointer L P) 0' -> htlookup S L T'
         -> boxsub T' P (prod T1 T2) (prod T3 T4) -> type.
- :
   cfcbox Dof Datomval Dlook' Dbsub'
      <- cf Dof (cfp_cbox Dbsub Dlook Datomval')
      <- atomval_fun Datomval' Datomval Deq
      <- aval_eq_pointer Deq Dloceq Dnateq
      <- boxsub_resp tp_eq_ Dnateq tp_eq_ tp_eq_ Dbsub Dbsub'
      <- htlookup_resp htp_eq_ Dloceq tp_eq_ Dlook Dlook'.
cfarrow :
      of S V (arrow G) -> atomval V (pointer L N) 0' -> htlookup S L T
         -> subtype T (prod T' (code (pc_ L N) G)) -> sat T' (rti N) kt
         -> rtpok G -> segof L cseg -> type.
cfarrow_| :
      aval_eq (pointer L' N') (pointer L N) -> htlookup S L' T
         -> htlookup S L T -> sat T' (rti N') kt -> sat T' (rti N) kt
         -> segof L' cseg -> segof L cseg
         -> subtype T (prod T' (code (pc_ L' N') G))
         -> subtype T (prod T' (code (pc_ L N) G)) -> type.
cfarrow_ :
   cfarrow Dof Datomval Dhtlookup Dsub Dkof Drtpok Dseg
      <- cf Dof (cfp_arrow Dsub' Drtpok Dkof' Dseg' Dhtlookup' Datomval')
      <- atomval_fun Datomval' Datomval Deq
      <- cfarrow_| Deq Dhtlookup' Dhtlookup Dkof' Dkof Dseg' Dseg Dsub' Dsub.
cfarrow_|_ : cfarrow_| aval_eq_ D1 D1 D2 D2 D3 D3 D4 D4.
cfsptr :
   Pi S:htp. Pi V:val. Pi T':tp. Pi N:nat. Pi S':htp. Pi V':val.
      of S V (sptr T') -> atomval V (spointer N) 0' -> of S' V' T' -> size V' N
         -> type.
cfsptr_| :
   Pi N':nat. Pi N:nat.
      aval_eq (spointer N') (spointer N) -> nat_eq N' N -> type.
cfsptr_ :
   cfsptr Dof Datomval Dof' Dsize'
      <- cf Dof (cfp_sptr Dsize Dc Datomval')
      <- atomval_fun Datomval' Datomval Deq
      <- cfsptr_| Deq Dnateq
      <- size_resp val_eq_ Dnateq Dsize Dsize'
      <- cfp_weaken Dc Dof'.
cfsptr_|_ : cfsptr_| aval_eq_ nat_eq_.
cfprod :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi T2:tp. Pi N:nat. Pi V1:val. Pi V2:val.
      of S V (prod T1 T2) -> sat T1 (rti N) kt -> separate N V V1 V2
         -> cfp S V1 T1 -> cfp S V2 T2 -> type.
cfprod_| :
   Pi V':val. Pi V:val. Pi S:htp. Pi T':tp.
      val_eq V' V -> cfp S V' T' -> cfp S V T' -> type.
cfprod_ :
   cfprod Dof Dsat Dsep Dc1 Dc2
      <- cf Dof (cfp_prod Dc2' Dc1' Dapp)
      <- val_size Dc1' Dsat Dsize
      <- append_is_separate Dapp Dsize Dsep'
      <- separate_fun Dsep' Dsep Deq1 Deq2
      <- cfprod_| Deq1 Dc1' Dc1
      <- cfprod_| Deq2 Dc2' Dc2.
cfprod_|_ : cfprod_| val_eq_ D D.
cfprod' :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi T2:tp. Pi N2:nat. Pi N3:nat. Pi N1:nat.
      Pi V1:val. Pi V2:val.
      of S V (prod T1 T2) -> sat T2 (rti N2) kt -> size V N3 -> sum N1 N2 N3
         -> separate N1 V V1 V2 -> cfp S V1 T1 -> cfp S V2 T2 -> type.
cfprod'_ :
   cfprod' Dof Dsat Dsize Dsum Dsep Dc1 Dc2
      <- cf Dof (cfp_prod Dc2' Dc1' Dapp)
      <- val_size Dc2' Dsat Dsize2
      <- size_append'''' Dsize1 Dsize2 Dsize Dapp Dsum
      <- append_is_separate Dapp Dsize1 Dsep'
      <- separate_fun Dsep' Dsep Deq1 Deq2
      <- cfprod_| Deq1 Dc1' Dc1
      <- cfprod_| Deq2 Dc2' Dc2.
cfprod'' :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi T2:tp. Pi S1:htp. Pi V':val. Pi N2:nat.
      Pi N3:nat. Pi N1:nat. Pi V1:val. Pi V2:val.
      of S V (prod T1 T2) -> sat T2 rtd kt -> of S1 V' T2 -> size V' N2
         -> size V N3 -> sum N1 N2 N3 -> separate N1 V V1 V2 -> cfp S V1 T1
         -> cfp S V2 T2 -> type.
cfprod''_ :
   cfprod'' Dof Dsat Dof' Dsize' Dsize Dsum Dsep Dc1 Dc2
      <- cf Dof (cfp_prod Dc2' Dc1' Dapp)
      <- cf Dof' Dc'
      <- val_size_det Dc' Dc2' Dsat Dsize' Dsize2
      <- size_append'''' Dsize1 Dsize2 Dsize Dapp Dsum
      <- append_is_separate Dapp Dsize1 Dsep'
      <- separate_fun Dsep' Dsep Deq1 Deq2
      <- cfprod_| Deq1 Dc1' Dc1
      <- cfprod_| Deq2 Dc2' Dc2.
cfseteq :
   Pi S:htp. Pi V:val. Pi N:nat. Pi TN:tp. Pi N1:nat. Pi B:binary N1.
      of S V (seteq N TN) -> binary_int theend V B -> tr (pnumeq TN (number B))
         -> type.
- :
   cfseteq Dof Dbi Dtr
      <- cf Dof (cfp_seteq Dbi' X1 Dtr')
      <- binary_int_fun Dbi' Dbi Deq
      <- binary_eq_implies_length_eq B1 B2 Deq Deq'
      <- number_eq_cons Deq' Deq Deq''
      <- pnumeq_eq_cons tp_eq_ Deq'' Deq'''
      <- tr_resp Deq''' Dtr' Dtr.
cfseteq' :
   Pi S:htp. Pi V:val. Pi N1:nat. Pi TN:tp. Pi N2:nat. Pi B:binary N2. Pi N:nat.
      of S V (seteq N1 TN) -> binary_int theend V B -> represents N B
         -> calculate TN N -> type.
- :
   cfseteq' Dof Dbi Drep Dcalc'
      <- cf Dof (cfp_seteq Dbi' X1 Dtr)
      <- binary_int_fun Dbi' Dbi Deq
      <- number_eq_cons' Deq Deq'
      <- pnumeq_eq_cons tp_eq_ Deq' Deq''
      <- tr_resp Deq'' Dtr Dtr'
      <- canonize Dtr' (trc_numeq (calculate_number Drep') Dcalc)
      <- represents_fun1 Drep' Drep Deqn
      <- calculate_resp tp_eq_ Deqn Dcalc Dcalc'.
cfseteqnum :
   Pi S:htp. Pi V:val. Pi Nsz:nat. Pi Nsz*bytebits:nat.
      Pi B:binary Nsz*bytebits.
      of S V (seteq Nsz (number B)) -> product Nsz bytebits Nsz*bytebits
         -> binary_int theend V B -> type.
cfseteqnum_ :
   cfseteqnum Dof Dp Dbi'
      <- cf Dof (cfp_seteq Dbi Dp' Dtr)
      <- prod_fun3 Dp Dp' Deq
      <- nat_eq_symm Deq Deq'
      <- numeq_number_cdr (tr_numeq_symm Dtr) Deq' Deq''
      <- binary_int_resp val_eq_ Deq'' Dbi Dbi'.
cfseteqlit :
   Pi S:htp. Pi V:val. Pi Nsz:nat. Pi N:nat. Pi Nsz*bytebits:nat.
      Pi B:binary Nsz*bytebits.
      of S V (seteq Nsz (numlit N)) -> binary_int theend V B -> represents N B
         -> type.
- :
   cfseteqlit Dof Dbi Drep
      <- cf Dof (cfp_seteq Dbi X1 Dtr)
      <- canonize Dtr (trc_numeq (calculate_number Drep) calculate_numlit).
reduce_inject : tp -> type.
reduce_inject1 : reduce_inject T' <- mreduce T' (in1 T' K).
reduce_inject2 : reduce_inject T' <- mreduce T' (in2 T' K).
reduce_inject_unreduce :
   Pi T':tp. Pi K:kind. Pi T':tp.
      kof T' K -> reduce T' T' -> reduce_inject T' -> reduce_inject T' -> type.
- :
   reduce_inject_unreduce Dkof Dreduce (reduce_inject1 Dmreduce)
      (reduce_inject1 (mreduce_step Dmreduce Dreduce)).
- :
   reduce_inject_unreduce Dkof Dreduce (reduce_inject2 Dmreduce)
      (reduce_inject2 (mreduce_step Dmreduce Dreduce)).
cfp_case_invert :
   Pi S:htp. Pi V:val. Pi T':tp. Pi K1:kind. Pi K2:kind. Pi K3:kind.
      Pi T1:tp -> tp. Pi T2:tp -> tp.
      cfp S V (case T' K1 K2 K3 (\t:tp. T1 t) (\t:tp. T2 t)) -> reduce_inject T'
         -> type.
-id :
   cfp_case_invert (cfp_case (cfpelim_ Dc X1 reduce_id)) D
      <- cfp_case_invert Dc D.
-case :
   cfp_case_invert
      (cfp_case
          (cfpelim_ Dc
              (kof_case (\t:tp. \x:kof t K2. X1 t x)
                  (\t:tp. \x:kof t K1. X2 t x) Dkof')
              (reduce_case (\t:tp. \x:kof t K2. X3 t x)
                  (\t:tp. \x:kof t K1. X4 t x) Dred))) D'
      <- cfp_case_invert Dc D
      <- reduce_inject_unreduce Dkof' Dred D D'.
-beta1 :
   cfp_case_invert
      (cfp_case (cfpelim_ X1 X2 (reduce_sbeta1 (\t:tp. \x:kof t K2. X3 t x) X4)))
      (reduce_inject1 mreduce_id).
-beta2 :
   cfp_case_invert
      (cfp_case (cfpelim_ X1 X2 (reduce_sbeta2 (\t:tp. \x:kof t K3. X3 t x) X4)))
      (reduce_inject2 mreduce_id).
cfcasevoid1 :
   Pi T':tp. Pi K1:kind. Pi K2:kind. Pi S:htp. Pi V:val. Pi K3:kind. Pi K4:kind.
      Pi K5:kind. Pi T1:tp -> tp. Pi N:nat.
      kof T' (ksum K1 K2)
         -> cfp S V (case T' K3 K4 K5 (\t:tp. T1 t) (\t:tp. void N))
         -> Pi T':tp. kof T' K1 -> equiv T' (in1 T' K2) -> type.
cfcasevoid1| :
   Pi T':tp. Pi K1:kind. Pi K2:kind. Pi S:htp. Pi V:val. Pi K3:kind. Pi K4:kind.
      Pi K5:kind. Pi T1:tp -> tp. Pi N:nat.
      kof T' (ksum K1 K2)
         -> cfp S V (case T' K3 K4 K5 (\t:tp. T1 t) (\t:tp. void N))
         -> reduce_inject T'
         -> Pi T':tp. kof T' K1 -> equiv T' (in1 T' K2) -> type.
- :
   cfcasevoid1 Dkof Dc T' Dkof' Dequiv
      <- cfp_case_invert Dc Dredinj
      <- cfcasevoid1| Dkof Dc Dredinj T' Dkof' Dequiv.
-1 :
   cfcasevoid1| Dkof Dc (reduce_inject1 Dmreduce) T' Dkof'' Dequiv'
      <- mreduce_is_equiv Dkof Dmreduce Dequiv
      <- msr Dkof Dmreduce Dkof'
      <- kof_in1_invert Dkof' Dkof'' Deq
      <- tp_eq_cons_kind Deq (\k:kind. in1 T' k) Deq'
      <- equiv_resp tp_eq_ Deq' Dequiv Dequiv'.
cfcasevoid1|2| :
   Pi S1:htp. Pi V1:val. Pi N:nat. Pi K1:kind. Pi T':tp. Pi K2:kind.
      cfp S1 V1 (void N)
         -> Pi T':tp. kof T' K1 -> equiv T' (in1 T' K2) -> type.
-2 :
   cfcasevoid1| X1 Dc (reduce_inject2 Dmreduce) T' D1 D2
      <- msubstitute (\t:tp. case t K3 K4 K (\t1:tp. T' t1) (\t1:tp. void N))
            Dmreduce Dmreduce'
      <- mreduce_trans Dmreduce'
            (mreduce_single
                (reduce_sbeta2 (\t:tp. \d:kof t K4. reduce_id) reduce_id))
            Dmreduce''
      <- cfp_mreduce' Dc Dmreduce'' Dc'
      <- cfcasevoid1|2| Dc' T' D1 D2.
cfcasevoid2 :
   Pi T':tp. Pi K1:kind. Pi K2:kind. Pi S:htp. Pi V:val. Pi K3:kind. Pi K4:kind.
      Pi K5:kind. Pi N:nat. Pi T1:tp -> tp.
      kof T' (ksum K1 K2)
         -> cfp S V (case T' K3 K4 K5 (\t:tp. void N) (\t:tp. T1 t))
         -> Pi T':tp. kof T' K2 -> equiv T' (in2 T' K1) -> type.
cfcasevoid2| :
   Pi T':tp. Pi K1:kind. Pi K2:kind. Pi S:htp. Pi V:val. Pi K3:kind. Pi K4:kind.
      Pi K5:kind. Pi N:nat. Pi T1:tp -> tp.
      kof T' (ksum K1 K2)
         -> cfp S V (case T' K3 K4 K5 (\t:tp. void N) (\t:tp. T1 t))
         -> reduce_inject T'
         -> Pi T':tp. kof T' K2 -> equiv T' (in2 T' K1) -> type.
- :
   cfcasevoid2 Dkof Dc T' Dkof' Dequiv
      <- cfp_case_invert Dc Dredinj
      <- cfcasevoid2| Dkof Dc Dredinj T' Dkof' Dequiv.
-2 :
   cfcasevoid2| Dkof Dc (reduce_inject2 Dmreduce) T' Dkof'' Dequiv'
      <- mreduce_is_equiv Dkof Dmreduce Dequiv
      <- msr Dkof Dmreduce Dkof'
      <- kof_in2_invert Dkof' Dkof'' Deq
      <- tp_eq_cons_kind Deq (\k:kind. in2 T' k) Deq'
      <- equiv_resp tp_eq_ Deq' Dequiv Dequiv'.
cfcasevoid2|1| :
   Pi S1:htp. Pi V1:val. Pi N:nat. Pi K1:kind. Pi T':tp. Pi K2:kind.
      cfp S1 V1 (void N)
         -> Pi T':tp. kof T' K1 -> equiv T' (in2 T' K2) -> type.
-1 :
   cfcasevoid2| X1 Dc (reduce_inject1 Dmreduce) T' D1 D2
      <- msubstitute (\t:tp. case t K3 K4 K (\t1:tp. void N) (\t1:tp. T' t1))
            Dmreduce Dmreduce'
      <- mreduce_trans Dmreduce'
            (mreduce_single
                (reduce_sbeta1 (\t:tp. \d:kof t K3. reduce_id) reduce_id))
            Dmreduce''
      <- cfp_mreduce' Dc Dmreduce'' Dc'
      <- cfcasevoid2|1| Dc' T' D1 D2.
can_resolve :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi S':htp. Pi R:rfile. Pi G:rtp. Pi PC:pc.
      Pi O:operand. Pi O':operand. Pi T':tp. Pi V:val.
      htpok S L1 -> hof S H S' -> hsubtype S' S -> rof S R G
         -> delocalize PC O O' -> oof S G O' T' -> resolve H R PC O V
         -> of S V T' -> type.
-im :
   can_resolve Dhtpok X1 X2 X3 delocalize_im (oof_im Dof Dstrip) resolve_im Dof'
      <- unstrip_pt Dhtpok Dstrip Dof Dof'.
-pcrel+ :
   can_resolve Dhtpok X1 X2 X3 (delocalize_pcrel+ Datomval Dsum)
      (oof_im Dof Dstrip) (resolve_pcrel+ Datomval Dsum) Dof'
      <- unstrip_pt Dhtpok Dstrip Dof Dof'.
-pcrel- :
   can_resolve Dhtpok X1 X2 X3 (delocalize_pcrel- Datomval Dsum)
      (oof_im Dof Dstrip) (resolve_pcrel- Datomval Dsum) Dof'
      <- unstrip_pt Dhtpok Dstrip Dof Dof'.
-rco :
   can_resolve X1 X2 X3 Drof delocalize_rco (oof_rco Dlookt) (resolve_rco Dlook)
      D
      <- can_rlookup Drof Dlookt Dlook D.
-mco :
   can_resolve Dhtpok Dhof Dhsub Drof (delocalize_mco Ddeloc)
      (oof_mco Dsat2 Dsat1 Doof)
      (resolve_mco Dsep23 Dsep' Dsum Dhlookup Datomval Dresolve) Dof2
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dofptr
      <- cf Dofptr (cfp_cbox Dbsub Dhtlookup Datomval)
      <- hweaken_htlookup_cseg Dhsub Dhtlookup Dhtlookup' Dsub
      <- can_hlookup Dhtpok Dhof Dhtlookup' Dhlookup Dof
      <- boxsub_subsume (boxsub_transl Dsub Dbsub) Dof Dsep X2 Dof123
      <- cf (subsume (trans (prod_sub rassoc reflex) rassoc) Dof123)
            (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp1_23)
      <- val_size Dc1 Dsat1 Dsize1
      <- append_is_separate Dapp1_23 Dsize1 Dsep1_23
      <- can_sum P N PN Dsum
      <- separate_compose Dsep Dsep1_23 Dsum X1 Dsep'
      <- val_size Dc2 Dsat2 Dsize2
      <- append_is_separate Dapp23 Dsize2 Dsep23
      <- cfp_weaken Dc2 Dof2.
-imco :
   can_resolve Dhtpok Dhof Dhsub Drof (delocalize_imco Ddeloc2 Ddeloc1)
      (oof_imco Dsat2 Dsat1 Doof2 Doof1)
      (resolve_imco Dsep23 Dsep' Dsum_N'_Nindex' Dprod Drep Dbi Dresolve2
          Dsum_NP Dhlookup Datomval Dresolve1) Dof2
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc1 Doof1 Dresolve1 Dofptr
      <- cf Dofptr (cfp_cbox Dbsub Dhtlookup Datomval)
      <- hweaken_htlookup_cseg Dhsub Dhtlookup Dhtlookup' Dsub
      <- can_hlookup Dhtpok Dhof Dhtlookup' Dhlookup Dof
      <- boxsub_subsume (boxsub_transl Dsub Dbsub) Dof Dsep X2 Dof123
      <- cf (subsume (trans (prod_sub rassoc reflex) rassoc) Dof123)
            (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp1_23)
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc2 Doof2 Dresolve2 Dofindex
      <- cf Dofindex (cfp_seteq Dbi' Dp Dtr)
      <- canonize Dtr (trc_numeq (calculate_number Drep') Dcalc)
      <- binary_size_resp Dp product_wordbits Dbi' Dbi Drep' Drep
      <- can_sum P N N' Dsum_PN
      <- sum_commute Dsum_PN Dsum_NP
      <- can_product Q Nindex Nindex' Dprod
      <- can_sum N' Nindex' N'' Dsum_N'_Nindex'
      <- sum_assoc Dsum_PN Dsum_N'_Nindex' Dsum_N_Nindex' Dsumall
      <- calculate_is_numeq
            (calculate_numadd Dsum_N_Nindex'
                (calculate_nummul Dprod Dcalc calculate_numlit) 
calculate_numlit)
            Dtr'
      <- val_size Dc1 (incleq _ _ _ Dtr' Dsat1) Dsize1
      <- append_is_separate Dapp1_23 Dsize1 Dsep1_23
      <- separate_compose Dsep Dsep1_23 Dsumall X1 Dsep'
      <- val_size Dc2 Dsat2 Dsize2
      <- append_is_separate Dapp23 Dsize2 Dsep23
      <- cfp_weaken Dc2 Dof2.
-co :
   can_resolve Dhtpok Dhof Dhsub Drof (delocalize_mco Ddeloc)
      (oof_zco Dsub Dztlookup Dkof3 Dkof2 Dkof1 Doof)
      (resolve_zco Dsep3 Dsep2 Dsep1 Dsum Dsize Dzlookup Datomval Dresolve) Dof2
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cf Dof (cfp_sptr Dsizeinh Dcinh Datomval)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- cf (subsume Dsub Dzof)
            (cfp_prod (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp123) Dzc Dapp)
      <- can_size Z N3 Dsize
      <- val_size_det Dcinh (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp123)
            (sat_prodd (sat_prodd Dkof3 (incl _ _ Dkof2)) (incl _ _ Dkof1)) Dsizeinh
            Dsize123
      <- size_append'' DsizeZ' Dsize123 Dsize Dapp Dsum
      <- append_is_separate Dapp DsizeZ' Dsep1
      <- val_size Dc1 Dkof1 Dsize1
      <- append_is_separate Dapp123 Dsize1 Dsep2
      <- val_size Dc2 Dkof2 Dsize2
      <- append_is_separate Dapp23 Dsize2 Dsep3
      <- cfp_weaken Dc2 Dof2.
-pco :
   can_resolve X2 Dhof X3 Drof delocalize_spco (oof_spco Dztlookup)
      (resolve_spco Datomval Dsize Dzlookup) (of_spointer Dsize Dzof Datomval)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- can_size Z N Dsize
      <- can_atomval (spointer N) asize_spointer Datomval.
-comb :
   can_resolve Dhtpok Dhof Dhsub Drof (delocalize_combine Ddeloc2 Ddeloc1)
      (oof_combine Doof2 Doof1) (resolve_combine Dappend Dresolve2 Dresolve1)
      (of_append Dof2 Dof1 Dappend)
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- can_append V1 V2 V Dappend.
-proj :
   can_resolve Dhtpok Dhof Dhsub Drof (delocalize_proj Ddeloc)
      (oof_proj Dkof2 Dkof1 Doof) (resolve_proj Dsep2 Dsep1 Dresolve) Dof2
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cf Dof (cfp_prod (cfp_prod X1 Dc2 Dapp23) Dc1 Dapp1_23)
      <- val_size Dc1 Dkof1 Dsize1
      <- val_size Dc2 Dkof2 Dsize2
      <- append_is_separate Dapp1_23 Dsize1 Dsep1
      <- append_is_separate Dapp23 Dsize2 Dsep2
      <- cfp_weaken Dc2 Dof2.
-ub :
   can_resolve Dhtpok Dhof Dhsub Drof Ddeloc (oof_subsume Dsub Doof) Dresolve
      (subsume Dsub Dof)
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof.
-rsub :
   can_resolve Dhtpok Dhof Dhsub Drof Ddeloc (oof_rsubsume Drsub Doof) Dresolve
      Dof
      <- rfile_subsume Drof Drsub Drof'
      <- can_resolve Dhtpok Dhof Dhsub Drof' Ddeloc Doof Dresolve Dof.
resolve_pt :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi S':htp. Pi R:rfile. Pi G:rtp. Pi PC:pc.
      Pi O:operand. Pi O':operand. Pi T':tp. Pi V:val.
      htpok S L1 -> hof S H S' -> hsubtype S' S -> rof S R G
         -> delocalize PC O O' -> oof S G O' T' -> resolve H R PC O V
         -> of S V T' -> type.
-im :
   resolve_pt Dhtpok X1 X2 X3 delocalize_im (oof_im Dof Dstrip) resolve_im Dof'
      <- unstrip_pt Dhtpok Dstrip Dof Dof'.
-pcrel+ :
   resolve_pt Dhtpok X1 X2 X3 (delocalize_pcrel+ Datomval' Dsum')
      (oof_im Dof Dstrip) (resolve_pcrel+ Datomval Dsum) Dof''
      <- sum_fun3 Dsum' Dsum Deq
      <- aval_eq_cons Deq (\n:nat. pointer L n) Davaleq
      <- atomval_resp val_eq_ Davaleq Datomval' Datomval''
      <- atomval_fun1 Datomval'' Datomval Dvaleq
      <- unstrip_pt Dhtpok Dstrip Dof Dof'
      <- of_resp htp_eq_ Dvaleq Dof' Dof''.
-pcrel- :
   resolve_pt Dhtpok X1 X2 X3 (delocalize_pcrel- Datomval' Dsum')
      (oof_im Dof Dstrip) (resolve_pcrel- Datomval Dsum) Dof''
      <- sum_fun2 Dsum' Dsum Deq
      <- aval_eq_cons Deq (\n:nat. pointer L n) Davaleq
      <- atomval_resp val_eq_ Davaleq Datomval' Datomval''
      <- atomval_fun1 Datomval'' Datomval Dvaleq
      <- unstrip_pt Dhtpok Dstrip Dof Dof'
      <- of_resp htp_eq_ Dvaleq Dof' Dof''.
-rco :
   resolve_pt X1 X2 X3 Drof delocalize_rco (oof_rco Dlookt) (resolve_rco Dlook)
      D
      <- rlookup_pt Drof Dlookt Dlook D.
-mco :
   resolve_pt Dhtpok Dhof Dhsub Drof (delocalize_mco Ddeloc)
      (oof_mco Dsat2 Dsat1 Doof)
      (resolve_mco Dsep2 Dsep1 Dsum Dhlookup Datomval Dresolve) Dof2
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dofptr
      <- cfcbox Dofptr Datomval Dhtlookup Dbsub
      <- hweaken_htlookup_cseg Dhsub Dhtlookup Dhtlookup' Dsub
      <- hlookup_pt Dhtpok Dhof Dhtlookup' Dhlookup Dof
      <- boxsub_subsume (boxsub_transl Dsub Dbsub) Dof Dsep X4 Dof123
      <- cf (subsume (trans (prod_sub rassoc reflex) rassoc) Dof123)
            (cfp_prod Dc23 Dc1 Dapp1_23)
      <- val_size Dc1 Dsat1 Dsize1
      <- append_is_separate Dapp1_23 Dsize1 Dsep1_23
      <- separate_compose Dsep Dsep1_23 Dsum X3 Dsep'
      <- separate_fun Dsep' Dsep1 X2 Deq
      <- cfp_resp htp_eq_ Deq tp_eq_ Dc23 Dc23'
      <- cfp_weaken Dc23' Dof23
      <- cfprod Dof23 Dsat2 Dsep2 Dc2 X1
      <- cfp_weaken Dc2 Dof2.
-imco :
   resolve_pt Dhtpok Dhof Dhsub Drof (delocalize_imco Ddeloc2 Ddeloc1)
      (oof_imco Dsat2 Dsat1 Doof2 Doof1)
      (resolve_imco Dsep2 Dsep1 Dsumindex Dprod Drep Dbi Dresolve2 DsumNP
          Dhlookup Datomval Dresolve1) Dof2
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc1 Doof1 Dresolve1 Dofptr
      <- cfcbox Dofptr Datomval Dhtlookup Dbsub
      <- hweaken_htlookup_cseg Dhsub Dhtlookup Dhtlookup' Dsub
      <- hlookup_pt Dhtpok Dhof Dhtlookup' Dhlookup Dof
      <- boxsub_subsume (boxsub_transl Dsub Dbsub) Dof Dsep X4 Dof123
      <- cf (subsume (trans (prod_sub rassoc reflex) rassoc) Dof123)
            (cfp_prod Dc23 Dc1 Dapp1_23)
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc2 Doof2 Dresolve2 Dofindex
      <- cfseteq' Dofindex Dbi Drep Dcalc
      <- sum_commute DsumNP DsumPN
      <- sum_assoc DsumPN Dsumindex Dsumindex' Dsumall
      <- calculate_is_numeq
            (calculate_numadd Dsumindex'
                (calculate_nummul Dprod Dcalc calculate_numlit) 
calculate_numlit)
            Dtr'
      <- val_size Dc1 (incleq _ _ _ Dtr' Dsat1) Dsize1
      <- append_is_separate Dapp1_23 Dsize1 Dsep1_23
      <- separate_compose Dsep Dsep1_23 Dsumall X3 Dsep'
      <- separate_fun Dsep' Dsep1 X2 Deq
      <- cfp_resp htp_eq_ Deq tp_eq_ Dc23 Dc23'
      <- cfp_weaken Dc23' Dof23
      <- cfprod Dof23 Dsat2 Dsep2 Dc2 X1
      <- cfp_weaken Dc2 Dof2.
-co :
   resolve_pt Dhtpok Dhof Dhsub Drof (delocalize_mco Ddeloc)
      (oof_zco Dsub Dztlookup Dkof3 Dkof2 Dkof1 Doof)
      (resolve_zco Dsep3 Dsep2 Dsep1 Dsum Dsize Dzlookup Datomval Dresolve) Dof2
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cfsptr Dof Datomval Dofinh Dsizeinh
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X4
      <- cfprod'' (subsume Dsub Dzof)
            (sat_prodd (sat_prodd Dkof3 (incl _ _ Dkof2)) (incl _ _ Dkof1)) Dofinh
            Dsizeinh Dsize Dsum Dsep1 X3 Dc123
      <- cfp_weaken Dc123 Dof123
      <- cfprod Dof123 Dkof1 Dsep2 X2 Dc23
      <- cfp_weaken Dc23 Dof23
      <- cfprod Dof23 Dkof2 Dsep3 Dc2 X1
      <- cfp_weaken Dc2 Dof2.
-pco :
   resolve_pt X2 Dhof X3 Drof delocalize_spco (oof_spco Dztlookup)
      (resolve_spco Datomval Dsize Dzlookup) (of_spointer Dsize Dzof Datomval)
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X1.
-comb :
   resolve_pt Dhtpok Dhof Dhsub Drof (delocalize_combine Ddeloc2 Ddeloc1)
      (oof_combine Doof2 Doof1) (resolve_combine Dapp Dresolve2 Dresolve1)
      (of_append Dof2 Dof1 Dapp)
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc2 Doof2 Dresolve2 Dof2.
-proj :
   resolve_pt Dhtpok Dhof Dhsub Drof (delocalize_proj Ddeloc)
      (oof_proj Dkof2 Dkof1 Doof) (resolve_proj Dsep2 Dsep1 Dresolve) Dof2
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cfprod Dof Dkof1 Dsep1 X2 Dc23
      <- cfp_weaken Dc23 Dof23
      <- cfprod Dof23 Dkof2 Dsep2 Dc2 X1
      <- cfp_weaken Dc2 Dof2.
-ub :
   resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc (oof_subsume Dsub Doof) Dresolve
      (subsume Dsub Dof)
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof.
-rsub :
   resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc (oof_rsubsume Drsub Doof) Dresolve
      Dof
      <- rfile_subsume Drof Drsub Drof'
      <- resolve_pt Dhtpok Dhof Dhsub Drof' Ddeloc Doof Dresolve Dof.
resolve_pt_mco_zco| :
   Pi L1:loc. Pi N1:nat. Pi N2:nat.
      aval_eq (pointer L1 N1) (spointer N2)
         -> Pi S:htp. Pi V:val. Pi T':tp. of S V T' -> type.
-mzco :
   resolve_pt Dhtpok Dhof Dhsub Drof (delocalize_mco Ddeloc)
      (oof_mco X3 X4 Doof) (resolve_zco X5 X6 X7 X8 X9 X10 Datomval Dresolve) D
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cf Dof (cfp_cbox X1 X2 Datomval')
      <- atomval_fun Datomval' Datomval Davaleq
      <- resolve_pt_mco_zco| Davaleq S V1 T1 D.
-mco :
   resolve_pt Dhtpok Dhof Dhsub Drof (delocalize_mco Ddeloc)
      (oof_zco X3 X4 X5 X6 X7 Doof)
      (resolve_mco X8 X9 X10 X11 Datomval Dresolve) D
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cf Dof (cfp_sptr X1 X2 Datomval')
      <- atomval_fun Datomval Datomval' Davaleq
      <- resolve_pt_mco_zco| Davaleq S V1 T1 D.
resolve_rco_size :
   Pi S:htp. Pi R:rfile. Pi G:rtp. Pi H:heap. Pi PC:pc. Pi REG:reg. Pi V:val.
      rof S R G -> resolve H R PC (rco REG) V -> size V wordsize -> type.
- :
   resolve_rco_size Drof (resolve_rco Drlookup) Dsize
      <- rlookup_size Drof Drlookup Dsize.
propagate_pt :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi S':htp. Pi R:rfile. Pi G:rtp. Pi V:val.
      Pi T':tp. Pi PC:pc. Pi E:dest. Pi E':dest. Pi G':rtp. Pi H':heap.
      Pi R':rfile.
      htpok S L1 -> hof S H S' -> hsubtype S' S -> rof S R G -> of S V T'
         -> delocalize_dest PC E E' -> update S G E' T' G'
         -> propagate H R PC E V H' R' -> hof S H' S' -> rof S R' G' -> type.
-rdest :
   propagate_pt X1 Dhof X2 Drof Dof delocalize_rdest
      (update_rdest Drtupdate Dsat) (propagate_rdest Drupdate X3) Dhof Drof'
      <- cf Dof Dc
      <- val_size Dc Dsat Dsize
      <- rupdate_pt Drof Dof Dsize Drupdate Drtupdate Drof'.
-mdest :
   propagate_pt Dhtpok Dhof Dhsub Drof Dof2' (delocalize_mdest Ddeloc)
      (update_mdest Dsat2 Dsat1 Doof)
      (propagate_mdest Dhupdate Dapp2 Dapp1 Dsize Dsep2 Dsep1 Dsum Dhlookup
          Datomval Dresolve)
      Dhof' Drof
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dofptr
      <- cfcmbox Dofptr Datomval Dhtlookup Dbsub Dsubrev Dseg
      <- hweaken_htlookup_hseg Dhsub Dhtlookup Dseg Dhtlookup'
      <- hlookup_pt Dhtpok Dhof Dhtlookup' Dhlookup Dof
      <- boxsub_subsume Dbsub Dof Dsep Dof0 Dof123
      <- cf (subsume (trans (prod_sub rassoc reflex) rassoc) Dof123)
            (cfp_prod Dc23 Dc1 Dapp1_23)
      <- val_size Dc1 Dsat1 Dsize1
      <- append_is_separate Dapp1_23 Dsize1 Dsep1_23
      <- separate_compose Dsep Dsep1_23 Dsum Dapp01 Dsep'
      <- separate_fun Dsep' Dsep1 Deq01 Deq23
      <- append_resp val_eq_ val_eq_ Deq01 Dapp01 Dapp01'
      <- cfp_resp htp_eq_ Deq23 tp_eq_ Dc23 Dc23'
      <- cfp_weaken Dc23' Dof23
      <- cfprod Dof23 Dsat2 Dsep2 X1 Dc3
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc3 Dof3
      <- hupdate_pt Dhof Dhtlookup' Dhupdate
            (subsume
                (trans Dsubrev
                    (trans
                        (prod_sub (trans lassoc (prod_sub lassoc reflex)) 
reflex)
                        rassoc))
                (of_append (of_append Dof3 Dof2' Dapp1)
                    (of_append Dof1 Dof0 Dapp01') Dapp2))
            Dhof'.
-imdest :
   propagate_pt Dhtpok Dhof Dhsub Drof Dof2' (delocalize_imdest Ddeloc2 Ddeloc1)
      (update_imdest Dsat2 Dsat1 Doof2 Doof1)
      (propagate_imdest Dhupdate Dapp2 Dapp1 Dsize Dsep2 Dsep1 Dsumindex DsumNP
          Dprod Drep Dbi Dresolve2 Dhlookup Datomval Dresolve1)
      Dhof' Drof
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc1 Doof1 Dresolve1 Dofptr
      <- cfcmbox Dofptr Datomval Dhtlookup Dbsub Dsubrev Dseg
      <- hweaken_htlookup_hseg Dhsub Dhtlookup Dseg Dhtlookup'
      <- hlookup_pt Dhtpok Dhof Dhtlookup' Dhlookup Dof
      <- boxsub_subsume Dbsub Dof Dsep Dof0 Dof123
      <- cf (subsume (trans (prod_sub rassoc reflex) rassoc) Dof123)
            (cfp_prod Dc23 Dc1 Dapp1_23)
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc2 Doof2 Dresolve2 Dofindex
      <- cfseteq' Dofindex Dbi Drep Dcalc
      <- sum_commute DsumNP DsumPN
      <- sum_assoc DsumPN Dsumindex Dsumindex' Dsumall
      <- calculate_is_numeq
            (calculate_numadd Dsumindex'
                (calculate_nummul Dprod Dcalc calculate_numlit) 
calculate_numlit)
            Dtr'
      <- val_size Dc1 (incleq _ _ _ Dtr' Dsat1) Dsize1
      <- append_is_separate Dapp1_23 Dsize1 Dsep1_23
      <- separate_compose Dsep Dsep1_23 Dsumall Dapp01 Dsep'
      <- separate_fun Dsep' Dsep1 Deq01 Deq23
      <- append_resp val_eq_ val_eq_ Deq01 Dapp01 Dapp01'
      <- cfp_resp htp_eq_ Deq23 tp_eq_ Dc23 Dc23'
      <- cfp_weaken Dc23' Dof23
      <- cfprod Dof23 Dsat2 Dsep2 X1 Dc3
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc3 Dof3
      <- hupdate_pt Dhof Dhtlookup' Dhupdate
            (subsume
                (trans Dsubrev
                    (trans
                        (prod_sub (trans lassoc (prod_sub lassoc reflex)) 
reflex)
                        rassoc))
                (of_append (of_append Dof3 Dof2' Dapp1)
                    (of_append Dof1 Dof0 Dapp01') Dapp2))
            Dhof'.
-dest :
   propagate_pt Dhtpok Dhof Dhsub Drof Dof2' (delocalize_mdest delocalize_rco)
      (update_zdest Drtupdate Dztupdate Dsub2 Dztlookup Dkof3 Dkof2 Dkof1 Doof
          Dkof2')
      (propagate_zdest Dzupdate Dapp3 Dapp2 Dapp1 Dsize Dsep3 Dsep2 Dsep1 Dsum
          DsizeZ Dzlookup Datomval (resolve_rco Drlookup))
      Dhof Drof''
      <- resolve_pt Dhtpok Dhof Dhsub Drof delocalize_rco Doof
            (resolve_rco Drlookup) Dof
      <- cfsptr Dof Datomval Dofinh Dsizeinh
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X1
      <- cfprod'' (subsume Dsub2 Dzof)
            (sat_prodd (sat_prodd Dkof3 (incl _ _ Dkof2)) (incl _ _ Dkof1)) Dofinh
            Dsizeinh DsizeZ Dsum Dsep1 Dzc Dc123
      <- cfp_weaken Dzc Dzof1
      <- cfp_weaken Dc123 Dof123
      <- cfprod Dof123 Dkof1 Dsep2 Dc1 Dc23
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc23 Dof23
      <- cfprod Dof23 Dkof2 Dsep3 Dc2 Dc3
      <- cfp_weaken Dc3 Dof3
      <- zupdate_pt Drof
            (of_append (of_append (of_append Dof3 Dof2' Dapp1) Dof1 Dapp2) Dzof1
                Dapp3)
            Dztupdate Dzupdate Drof'
      <- zupdate_distinct Dzupdate Drlookup Drlookup'
      <- rupdate_nochange Drlookup' Drupdate
      <- cf Dofinh (cfp_prod (cfp_prod Dcinh3 Dcinh2 Dappinh23) Dcinh1 Dappinh)
      <- val_size Dcinh1 Dkof1 Dsizeinh1
      <- val_size Dcinh2 Dkof2 Dsizeinh2
      <- can_size Vinh3 P Dsizeinh3
      <- can_size Vinh23 MP Dsizeinh23
      <- size_append' Dsizeinh2 Dsizeinh3 Dsizeinh23 Dappinh23 Dsum23
      <- size_append' Dsizeinh1 Dsizeinh23 Dsizeinh Dappinh Dsum123
      <- val_size Dc1 Dkof1 Dsize1
      <- cf Dof2' Dc2'
      <- val_size Dc2' Dkof2' Dsize2'
      <- val_size_det Dcinh3 Dc3 Dkof3 Dsizeinh3 Dsize3
      <- size_append Dsize2' Dsize3 Dsize23 Dapp1 Dsum23
      <- size_append Dsize1 Dsize23 Dsize123 Dapp2 Dsum123
      <- atom_size asize_spointer Datomval Dsize'
      <- rupdate_pt Drof'
            (of_spointer Dsize123
                (of_append (of_append Dof3 Dof2' Dapp1) Dof1 Dapp2) Datomval)
            Dsize' Drupdate Drtupdate Drof''.
-dest2 :
   propagate_pt Dhtpok Dhof Dhsub Drof Dof2' (delocalize_mdest Ddeloc)
      (update_zdest2 Dztupdate Dsub2 Dztlookup Dkof3 Dkof2 Dkof1 Doof Dkof2')
      (propagate_zdest Dzupdate Dapp3 Dapp2 Dapp1 Dsize Dsep3 Dsep2 Dsep1 Dsum
          DsizeZ Dzlookup Datomval Dresolve)
      Dhof Drof'
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cfsptr Dof Datomval Dofinh Dsizeinh
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X1
      <- cfprod'' (subsume Dsub2 Dzof)
            (sat_prodd (sat_prodd Dkof3 (incl _ _ Dkof2)) (incl _ _ Dkof1)) Dofinh
            Dsizeinh DsizeZ Dsum Dsep1 Dzc Dc123
      <- cfp_weaken Dzc Dzof1
      <- cfp_weaken Dc123 Dof123
      <- cfprod Dof123 Dkof1 Dsep2 Dc1 Dc23
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc23 Dof23
      <- cfprod Dof23 Dkof2 Dsep3 Dc2 Dc3
      <- cfp_weaken Dc3 Dof3
      <- zupdate_pt Drof
            (of_append (of_append (of_append Dof3 Dof2' Dapp1) Dof1 Dapp2) Dzof1
                Dapp3)
            Dztupdate Dzupdate Drof'.
-pdest :
   propagate_pt X3 Dhof X4 Drof Dof delocalize_spdest
      (update_spdest Dztupdate Dsub2 Dztlookup Dkof Dsub1)
      (propagate_spdest Dzupdate Dsep Dsum Dsize Dzlookup Datomval) Dhof Drof'
      <- cfsptr (subsume Dsub1 Dof) Datomval Dofinh Dsizeinh
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X2
      <- cfprod'' (subsume Dsub2 Dzof) Dkof Dofinh Dsizeinh Dsize Dsum Dsep X1
            Dcz
      <- cfp_weaken Dcz Dzof'
      <- zupdate_pt Drof Dzof' Dztupdate Dzupdate Drof'.
-comb :
   propagate_pt Dhtpok Dhof Dhsub Drof Dof (delocalize_combdest Ddeloc2 Ddeloc1)
      (update_combdest Dupdate2 Dupdate1 Dkof)
      (propagate_combdest Dpropagate2 Dpropagate1 Dsep) Dhof'' Drof''
      <- cfprod Dof Dkof Dsep Dc1 Dc2
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc2 Dof2
      <- propagate_pt Dhtpok Dhof Dhsub Drof Dof1 Ddeloc1 Dupdate1 Dpropagate1
            Dhof' Drof'
      <- propagate_pt Dhtpok Dhof' Dhsub Drof' Dof2 Ddeloc2 Dupdate2 Dpropagate2
            Dhof'' Drof''.
-proj :
   propagate_pt Dhtpok Dhof Dhsub Drof Dof (delocalize_projdest DdelocE DdelocO)
      (update_projdest Dupdate Dkof2' Dkof2 Dkof1 Doof)
      (propagate_projdest Dpropagate Dapp1_23' Dapp23' Dsep2 Dsep1 Dresolve)
      Dhof' Drof'
      <- resolve_pt Dhtpok Dhof Dhsub Drof DdelocO Doof Dresolve Dof123
      <- cfprod Dof123 Dkof1 Dsep1 Dc1 Dc23
      <- cfp_weaken Dc23 Dof23
      <- cfprod Dof23 Dkof2 Dsep2 X1 Dc3
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof Dhsub Drof
            (of_append (of_append Dof3 Dof Dapp23') Dof1 Dapp1_23') DdelocE
            Dupdate Dpropagate Dhof' Drof'.
-ub :
   propagate_pt Dhtpok Dhof Dhsub Drof Dof Ddeloc (update_subsume Dsub Dupdate)
      Dpropagate Dhof' Drof'
      <- propagate_pt Dhtpok Dhof Dhsub Drof (subsume Dsub Dof) Ddeloc Dupdate
            Dpropagate Dhof' Drof'.
-rsub :
   propagate_pt Dhtpok Dhof Dhsub Drof Dof Ddeloc
      (update_rsubsume Drsub Dupdate) Dpropagate Dhof' Drof''
      <- propagate_pt Dhtpok Dhof Dhsub Drof Dof Ddeloc Dupdate Dpropagate Dhof'
            Drof'
      <- rfile_subsume Drof' Drsub Drof''.
propagate_pt_mdest_zdest| :
   Pi L1:loc. Pi N1:nat. Pi N2:nat.
      aval_eq (pointer L1 N1) (spointer N2)
         -> Pi S:htp. Pi S':htp. Pi H:heap. Pi R:rfile. Pi G:rtp.
                hof S H S' -> rof S R G -> type.
-mz :
   propagate_pt Dhtpok Dhof Dhsub Drof X5 (delocalize_mdest Ddeloc)
      (update_mdest X6 X7 Doof)
      (propagate_zdest X8 X9 X10 X11 X12 X13 X14 X15 X16 X17 X18 Datomval
          Dresolve) D1 D2
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cf Dof (cfp_cmbox X1 X2 X3 X4 Datomval')
      <- atomval_fun Datomval' Datomval Davaleq
      <- propagate_pt_mdest_zdest| Davaleq S S1 H R1 G D1 D2.
-m :
   propagate_pt Dhtpok Dhof Dhsub Drof X3 (delocalize_mdest delocalize_rco)
      (update_zdest X4 X5 X6 X7 X8 X9 X10 Doof X11)
      (propagate_mdest X12 X13 X14 X15 X16 X17 X18 X19 Datomval Dresolve) D1 D2
      <- resolve_pt Dhtpok Dhof Dhsub Drof delocalize_rco Doof Dresolve Dof
      <- cf Dof (cfp_sptr X1 X2 Datomval')
      <- atomval_fun Datomval Datomval' Davaleq
      <- propagate_pt_mdest_zdest| Davaleq S S1 H1 R G1 D1 D2.
-2m :
   propagate_pt Dhtpok Dhof Dhsub Drof X3 (delocalize_mdest Ddeloc)
      (update_zdest2 X4 X5 X6 X7 X8 X9 Doof X10)
      (propagate_mdest X11 X12 X13 X14 X15 X16 X17 X18 Datomval Dresolve) D1 D2
      <- resolve_pt Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cf Dof (cfp_sptr X1 X2 Datomval')
      <- atomval_fun Datomval Datomval' Davaleq
      <- propagate_pt_mdest_zdest| Davaleq S S1 H1 R G1 D1 D2.
can_propagate :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi S':htp. Pi R:rfile. Pi G:rtp. Pi V:val.
      Pi T':tp. Pi PC:pc. Pi E:dest. Pi E':dest. Pi G':rtp. Pi H':heap.
      Pi R':rfile.
      htpok S L1 -> hof S H S' -> hsubtype S' S -> rof S R G -> of S V T'
         -> delocalize_dest PC E E' -> update S G E' T' G'
         -> propagate H R PC E V H' R' -> type.
-rdest :
   can_propagate X1 X2 X3 X4 Dof delocalize_rdest (update_rdest Drtupdate Dkof)
      (propagate_rdest Drupdate Dsize)
      <- cf Dof Dc
      <- val_size Dc Dkof Dsize
      <- updated_reg_ok Drtupdate Dregok
      <- can_rupdate R1 REG1 V1 R2 Dregok Drupdate.
-mdest :
   can_propagate Dhtpok Dhof Dhsub Drof Dof2' (delocalize_mdest Ddeloc)
      (update_mdest Dsat2 Dsat1 Doof)
      (propagate_mdest Dhupdate Dapp01_23' Dapp23' Dsize2' Dsep23 Dsep' Dsum
          Dhlookup Datomval Dresolve)
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dofptr
      <- cf Dofptr (cfp_cmbox Dsubrev Dbsub Dseg Dhtlookup Datomval)
      <- hweaken_htlookup_hseg Dhsub Dhtlookup Dseg Dhtlookup'
      <- can_hlookup Dhtpok Dhof Dhtlookup' Dhlookup Dof
      <- boxsub_subsume Dbsub Dof Dsep Dof0 Dof123
      <- cf (subsume (trans (prod_sub rassoc reflex) rassoc) Dof123)
            (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp1_23)
      <- val_size Dc1 Dsat1 Dsize1
      <- append_is_separate Dapp1_23 Dsize1 Dsep1_23
      <- can_sum P N PN Dsum
      <- separate_compose Dsep Dsep1_23 Dsum Dapp01 Dsep'
      <- val_size Dc2 Dsat2 Dsize2
      <- append_is_separate Dapp23 Dsize2 Dsep23
      <- val_size' Dof2' Dsat2 Dsize2'
      <- can_append V2' V3 V23' Dapp23'
      <- can_append V01 V23' V' Dapp01_23'
      <- looked_up_loc_present Dhlookup Dpresent
      <- can_hupdate H L V' H' Dpresent Dseg Dhupdate.
-imdest :
   can_propagate Dhtpok Dhof Dhsub Drof Dof2'
      (delocalize_imdest Ddeloc2 Ddeloc1)
      (update_imdest Dsat2 Dsat1 Doof2 Doof1)
      (propagate_imdest Dhupdate Dapp01_23' Dapp23' Dsize2' Dsep23 Dsep'
          Dsum_N'_Nindex' Dsum_NP Dprod Drep Dbi Dresolve2 Dhlookup Datomval
          Dresolve1)
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc1 Doof1 Dresolve1 Dofptr
      <- cf Dofptr (cfp_cmbox Dsubrev Dbsub Dseg Dhtlookup Datomval)
      <- hweaken_htlookup_hseg Dhsub Dhtlookup Dseg Dhtlookup'
      <- can_hlookup Dhtpok Dhof Dhtlookup' Dhlookup Dof
      <- boxsub_subsume Dbsub Dof Dsep Dof0 Dof123
      <- cf (subsume (trans (prod_sub rassoc reflex) rassoc) Dof123)
            (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp1_23)
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc2 Doof2 Dresolve2 Dofindex
      <- cf Dofindex (cfp_seteq Dbi' Dp Dtr)
      <- canonize Dtr (trc_numeq (calculate_number Drep') Dcalc)
      <- binary_size_resp Dp product_wordbits Dbi' Dbi Drep' Drep
      <- can_sum P N N' Dsum_PN
      <- sum_commute Dsum_PN Dsum_NP
      <- can_product Q Nindex Nindex' Dprod
      <- can_sum N' Nindex' N'' Dsum_N'_Nindex'
      <- sum_assoc Dsum_PN Dsum_N'_Nindex' Dsum_N_Nindex' Dsumall
      <- calculate_is_numeq
            (calculate_numadd Dsum_N_Nindex'
                (calculate_nummul Dprod Dcalc calculate_numlit) 
calculate_numlit)
            Dtr'
      <- val_size Dc1 (incleq _ _ _ Dtr' Dsat1) Dsize1
      <- append_is_separate Dapp1_23 Dsize1 Dsep1_23
      <- separate_compose Dsep Dsep1_23 Dsumall Dapp01 Dsep'
      <- val_size Dc2 Dsat2 Dsize2
      <- append_is_separate Dapp23 Dsize2 Dsep23
      <- val_size' Dof2' Dsat2 Dsize2'
      <- can_append V2' V3 V23' Dapp23'
      <- can_append V01 V23' V' Dapp01_23'
      <- looked_up_loc_present Dhlookup Dpresent
      <- can_hupdate H L V' H' Dpresent Dseg Dhupdate.
-dest :
   can_propagate Dhtpok Dhof Dhsub Drof Dof2' (delocalize_mdest delocalize_rco)
      (update_zdest X2 Dztupdate Dsub2 Dztlookup Dkof3 Dkof2 Dkof1 Doof Dkof2')
      (propagate_zdest Dzupdate Dapp' Dapp1_23' Dapp23' Dsize' Dsep3 Dsep2 Dsep1
          Dsum Dsize Dzlookup Datomval Dresolve)
      <- can_resolve Dhtpok Dhof Dhsub Drof delocalize_rco Doof Dresolve Dof
      <- cf Dof (cfp_sptr Dsizeinh Dcinh Datomval)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- cf (subsume Dsub2 Dzof)
            (cfp_prod (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp123) Dzc Dapp)
      <- can_size Z N3 Dsize
      <- val_size_det Dcinh (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp123)
            (sat_prodd (sat_prodd Dkof3 (incl _ _ Dkof2)) (incl _ _ Dkof1)) Dsizeinh
            Dsize123
      <- size_append'' DsizeZ1 Dsize123 Dsize Dapp Dsum
      <- append_is_separate Dapp DsizeZ1 Dsep1
      <- val_size Dc1 Dkof1 Dsize1
      <- append_is_separate Dapp123 Dsize1 Dsep2
      <- val_size Dc2 Dkof2 Dsize2
      <- append_is_separate Dapp23 Dsize2 Dsep3
      <- cf Dof2' Dc2'
      <- val_size Dc2' Dkof2' Dsize'
      <- can_append V V3 V23' Dapp23'
      <- can_append V1 V23' V123' Dapp1_23'
      <- can_append Z1 V123' Z' Dapp'
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc2 Dof2
      <- cfp_weaken Dc3 Dof3
      <- cfp_weaken Dzc Dzof1
      <- can_zupdate Drof
            (of_append (of_append (of_append Dof3 Dof2' Dapp23') Dof1 Dapp1_23')
                Dzof1 Dapp')
            Dztupdate Dzupdate.
-dest2 :
   can_propagate Dhtpok Dhof Dhsub Drof Dof2' (delocalize_mdest Ddeloc)
      (update_zdest2 Dztupdate Dsub2 Dztlookup Dkof3 Dkof2 Dkof1 Doof Dkof2')
      (propagate_zdest Dzupdate Dapp' Dapp1_23' Dapp23' Dsize' Dsep3 Dsep2 Dsep1
          Dsum Dsize Dzlookup Datomval Dresolve)
      <- can_resolve Dhtpok Dhof Dhsub Drof Ddeloc Doof Dresolve Dof
      <- cf Dof (cfp_sptr Dsizeinh Dcinh Datomval)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- cf (subsume Dsub2 Dzof)
            (cfp_prod (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp123) Dzc Dapp)
      <- can_size Z N3 Dsize
      <- val_size_det Dcinh (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp123)
            (sat_prodd (sat_prodd Dkof3 (incl _ _ Dkof2)) (incl _ _ Dkof1)) Dsizeinh
            Dsize123
      <- size_append'' DsizeZ1 Dsize123 Dsize Dapp Dsum
      <- append_is_separate Dapp DsizeZ1 Dsep1
      <- val_size Dc1 Dkof1 Dsize1
      <- append_is_separate Dapp123 Dsize1 Dsep2
      <- val_size Dc2 Dkof2 Dsize2
      <- append_is_separate Dapp23 Dsize2 Dsep3
      <- cf Dof2' Dc2'
      <- val_size Dc2' Dkof2' Dsize'
      <- can_append V V3 V23' Dapp23'
      <- can_append V1 V23' V123' Dapp1_23'
      <- can_append Z1 V123' Z' Dapp'
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc2 Dof2
      <- cfp_weaken Dc3 Dof3
      <- cfp_weaken Dzc Dzof1
      <- can_zupdate Drof
            (of_append (of_append (of_append Dof3 Dof2' Dapp23') Dof1 Dapp1_23')
                Dzof1 Dapp')
            Dztupdate Dzupdate.
-pdest :
   can_propagate X2 Dhof Dhsub Drof Dof delocalize_spdest
      (update_spdest Dztupdate Dsub2 Dztlookup Dkof Dsub1)
      (propagate_spdest Dzupdate Dsep Dsum Dsize Dzlookup Datomval)
      <- cf (subsume Dsub1 Dof) (cfp_sptr Dsizeinh Dcinh Datomval)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- can_size Z N3 Dsize
      <- cf (subsume Dsub2 Dzof) (cfp_prod Dcz2 Dcz1 Dapp)
      <- val_size_det Dcinh Dcz2 Dkof Dsizeinh Dsize2
      <- size_append'' Dsize1 Dsize2 Dsize Dapp Dsum
      <- append_is_separate Dapp Dsize1 Dsep
      <- cfp_weaken Dcz2 Dzof2
      <- can_zupdate Drof Dzof2 Dztupdate Dzupdate.
-comb :
   can_propagate Dhtpok Dhof Dhsub Drof Dof
      (delocalize_combdest Ddeloc2 Ddeloc1)
      (update_combdest Dupdate2 Dupdate1 Dkof)
      (propagate_combdest Dpropagate2 Dpropagate1 Dsep)
      <- cf Dof (cfp_prod Dc2 Dc1 Dapp)
      <- val_size Dc1 Dkof Dsize
      <- append_is_separate Dapp Dsize Dsep
      <- cfp_weaken Dc2 Dof2
      <- cfp_weaken Dc1 Dof1
      <- can_propagate Dhtpok Dhof Dhsub Drof Dof1 Ddeloc1 Dupdate1 Dpropagate1
      <- propagate_pt Dhtpok Dhof Dhsub Drof Dof1 Ddeloc1 Dupdate1 Dpropagate1
            Dhof' Drof'
      <- can_propagate Dhtpok Dhof' Dhsub Drof' Dof2 Ddeloc2 Dupdate2
            Dpropagate2.
-proj :
   can_propagate Dhtpok Dhof Dhsub Drof Dof
      (delocalize_projdest DdelocE DdelocO)
      (update_projdest Dupdate Dkof2' Dkof2 Dkof1 Doof)
      (propagate_projdest Dpropagate Dapp1_23' Dapp23' Dsep2 Dsep1 Dresolve)
      <- can_resolve Dhtpok Dhof Dhsub Drof DdelocO Doof Dresolve Dof'
      <- cf Dof' (cfp_prod (cfp_prod Dc3 Dc2 Dapp23) Dc1 Dapp1_23)
      <- val_size Dc1 Dkof1 Dsize1
      <- val_size Dc2 Dkof2 Dsize2
      <- append_is_separate Dapp1_23 Dsize1 Dsep1
      <- append_is_separate Dapp23 Dsize2 Dsep2
      <- can_append V V3 V23' Dapp23'
      <- can_append V1 V23' V123' Dapp1_23'
      <- cfp_weaken Dc3 Dof3
      <- cfp_weaken Dc1 Dof1
      <- can_propagate Dhtpok Dhof Dhsub Drof
            (of_append (of_append Dof3 Dof Dapp23') Dof1 Dapp1_23') DdelocE
            Dupdate Dpropagate.
-ub :
   can_propagate Dhtpok Dhof Dhsub Drof Dof Ddeloc (update_subsume Dsub Dupdate)
      Dpropagate
      <- can_propagate Dhtpok Dhof Dhsub Drof (subsume Dsub Dof) Ddeloc Dupdate
            Dpropagate.
-rsub :
   can_propagate Dhtpok Dhof Dhsub Drof Dof Ddeloc (update_rsubsume X1 Dupdate)
      Dpropagate
      <- can_propagate Dhtpok Dhof Dhsub Drof Dof Ddeloc Dupdate Dpropagate.
hlookup_propagate :
   Pi H:heap. Pi L:loc. Pi V:val. Pi R:rfile. Pi PC:pc. Pi E:dest. Pi V':val.
      Pi H':heap. Pi R':rfile.
      hlookup H L V -> propagate H R PC E V' H' R' -> segof L cseg
         -> hlookup H' L V -> type.
hlookup_propagate_rdest : hlookup_propagate D (propagate_rdest X1 X2) X3 D.
hlookup_propagate_mdest :
   hlookup_propagate D (propagate_mdest Dupd X1 X2 X3 X4 X5 X6 X7 X8 X9) Dseg D'
      <- hlookup_update D Dupd Dseg D'.
hlookup_propagate_imdest :
   hlookup_propagate D
      (propagate_imdest Dupd X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14)
      Dseg D'
      <- hlookup_update D Dupd Dseg D'.
hlookup_propagate_zdest :
   hlookup_propagate D
      (propagate_zdest X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13) X14 D.
hlookup_propagate_spdest :
   hlookup_propagate D (propagate_spdest X1 X2 X3 X4 X5 X6) X7 D.
-combdest :
   hlookup_propagate D (propagate_combdest D2 D1 X1) Dseg D''
      <- hlookup_propagate D D1 Dseg D'
      <- hlookup_propagate D' D2 Dseg D''.
-projdest :
   hlookup_propagate D (propagate_projdest Dprop X1 X2 X3 X4 X5) Dseg D'
      <- hlookup_propagate D Dprop Dseg D'.
delocalize_unlocal :
   Pi S1:htp. Pi G1:rtp. Pi O:operand. Pi T1:tp.
      oof S1 G1 O T1 -> Pi PC:pc. delocalize PC O O -> type.
-im : delocalize_unlocal (oof_im X1 X2) PC1 delocalize_im.
-rco : delocalize_unlocal (oof_rco X1) PC1 delocalize_rco.
-mco :
   delocalize_unlocal (oof_mco X1 X2 D) PC1 (delocalize_mco D')
      <- delocalize_unlocal D PC1 D'.
-imco :
   delocalize_unlocal (oof_imco X1 X2 D2 D1) PC1 (delocalize_imco D2' D1')
      <- delocalize_unlocal D1 PC1 D1'
      <- delocalize_unlocal D2 PC1 D2'.
-co :
   delocalize_unlocal (oof_zco X1 X2 X3 X4 X5 D) PC1 (delocalize_mco D')
      <- delocalize_unlocal D PC1 D'.
-pco : delocalize_unlocal (oof_spco X1) PC1 delocalize_spco.
-comb :
   delocalize_unlocal (oof_combine D2 D1) PC (delocalize_combine D2' D1')
      <- delocalize_unlocal D1 PC D1'
      <- delocalize_unlocal D2 PC D2'.
-proj :
   delocalize_unlocal (oof_proj D3 D2 D1) PC (delocalize_proj D1')
      <- delocalize_unlocal D1 PC D1'.
-ub :
   delocalize_unlocal (oof_subsume X1 D) PC1 D' <- delocalize_unlocal D PC1 D'.
-rsub :
   delocalize_unlocal (oof_rsubsume X1 D) PC1 D' <- delocalize_unlocal D PC1 D'.
delocalize_fun :
   Pi PC:pc. Pi O:operand. Pi O1:operand. Pi O2:operand.
      delocalize PC O O1 -> delocalize PC O O2 -> operand_eq O1 O2 -> type.
-im : delocalize_fun delocalize_im delocalize_im operand_eq_.
-mco :
   delocalize_fun (delocalize_mco D1) (delocalize_mco D2) D'
      <- delocalize_fun D1 D2 D
      <- operand_eq_cons D (\o:operand. mco M o N) D'.
-imco :
   delocalize_fun (delocalize_imco D1 D2) (delocalize_imco D1' D2') D''
      <- delocalize_fun D1 D1' D
      <- delocalize_fun D2 D2' D'
      <- operand_eq_cons2 D D' (\o:operand. \p:operand. imco M p N o Q) D''.
-rco : delocalize_fun delocalize_rco delocalize_rco operand_eq_.
-pco : delocalize_fun delocalize_spco delocalize_spco operand_eq_.
-comb :
   delocalize_fun (delocalize_combine D2 D1) (delocalize_combine D2' D1') Deq
      <- delocalize_fun D1 D1' Deq1
      <- delocalize_fun D2 D2' Deq2
      <- operand_eq_cons2 Deq1 Deq2 (\o:operand. \p:operand. combine o p) Deq.
-proj :
   delocalize_fun (delocalize_proj D) (delocalize_proj D') Deq'
      <- delocalize_fun D D' Deq
      <- operand_eq_cons Deq (\o:operand. proj M o N) Deq'.
-pcrel+ :
   delocalize_fun (delocalize_pcrel+ Datomval Dsum)
      (delocalize_pcrel+ Datomval' Dsum') Dopeq
      <- sum_fun3 Dsum Dsum' Dnateq
      <- aval_eq_cons Dnateq (\n:nat. pointer L n) Davaleq
      <- atomval_resp val_eq_ Davaleq Datomval Datomval''
      <- atomval_fun1 Datomval'' Datomval' Dvaleq
      <- operand_eq_cons_val Dvaleq (\v:val. im v) Dopeq.
-pcrel- :
   delocalize_fun (delocalize_pcrel- Datomval Dsum)
      (delocalize_pcrel- Datomval' Dsum') Dopeq
      <- sum_fun2 Dsum Dsum' Dnateq
      <- aval_eq_cons Dnateq (\n:nat. pointer L n) Davaleq
      <- atomval_resp val_eq_ Davaleq Datomval Datomval''
      <- atomval_fun1 Datomval'' Datomval' Dvaleq
      <- operand_eq_cons_val Dvaleq (\v:val. im v) Dopeq.
resolve_rco_is_rlookup :
   Pi H:heap. Pi R:rfile. Pi PC:pc. Pi REG:reg. Pi V:val.
      resolve H R PC (rco REG) V -> rlookup R REG V -> type.
- : resolve_rco_is_rlookup (resolve_rco D) D.
codeok_nonnull :
   Pi S1:htp. Pi G1:rtp. Pi I:instseq. Pi IN:inst. Pi I':instseq.
      codeok S1 G1 I -> instseq_eq I (; IN I') -> type.
-add : codeok_nonnull (ok_add X1 X2 X3 X4 X5) instseq_eq_.
-addptr : codeok_nonnull (ok_addptr X1 X2 X3 X4 X5) instseq_eq_.
-addmptr : codeok_nonnull (ok_addmptr X1 X2 X3 X4 X5) instseq_eq_.
-addsptr : codeok_nonnull (ok_addsptr X1 X2 X3 X4) instseq_eq_.
-and : codeok_nonnull (ok_and X1 X2 X3 X4 X5) instseq_eq_.
-bz : codeok_nonnull (ok_bz X1 X2 X3) instseq_eq_.
-call : codeok_nonnull (ok_call X1 X2 X3 X4 X5) instseq_eq_.
-cmp : codeok_nonnull (ok_cmp X1 X2 X3 X4) instseq_eq_.
-cmpjcc :
   codeok_nonnull (ok_cmpjcc X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14)
      instseq_eq_.
-cmpjcc2 : codeok_nonnull (ok_cmpjcc2 X1 X2 X3 X4 X5 X6 X7 X8) instseq_eq_.
-fload : codeok_nonnull (ok_fload X1 X2) instseq_eq_.
-fnop : codeok_nonnull (ok_fnop X1) instseq_eq_.
-fstore : codeok_nonnull (ok_fstore X1 X2 X3) instseq_eq_.
-fstflags : codeok_nonnull (ok_fstflags X1) instseq_eq_.
-halt : codeok_nonnull (ok_halt X1 X2) instseq_eq_.
-jal : codeok_nonnull (ok_jal X1 X2 X3 X4) instseq_eq_.
-jbox : codeok_nonnull (ok_jbox X1 X2 X3 X4 X5 X6 X7) instseq_eq_.
-jcc : codeok_nonnull (ok_jcc X1 X2) instseq_eq_.
-jmp : codeok_nonnull (ok_jmp X1) instseq_eq_.
-jnbox : codeok_nonnull (ok_jnbox X1 X2 X3 X4 X5 X6 X7) instseq_eq_.
-malloc : codeok_nonnull (ok_malloc X1 X2 X3 X4 X5 X6 X7) instseq_eq_.
-mallocarr : codeok_nonnull (ok_mallocarr X1 X2 X3 X4 X5 X6 X7) instseq_eq_.
-mov : codeok_nonnull (ok_mov X1 X2 X3) instseq_eq_.
-movsx : codeok_nonnull (ok_movsx X1 X2 X3 X4) instseq_eq_.
-movzx : codeok_nonnull (ok_movzx X1 X2 X3 X4) instseq_eq_.
-nop : codeok_nonnull (ok_nop X1) instseq_eq_.
-or : codeok_nonnull (ok_or X1 X2 X3 X4 X5) instseq_eq_.
-pop : codeok_nonnull (ok_pop X1 X2 X3 X4 X5 X6) instseq_eq_.
-push : codeok_nonnull (ok_push X1 X2 X3 X4 X5) instseq_eq_.
-pushrel : codeok_nonnull (ok_pushrel X1 X2 X3 X4 X5) instseq_eq_.
-ret : codeok_nonnull (ok_ret X1 X2 X3 X4) instseq_eq_.
-rcl : codeok_nonnull (ok_rcl X1 X2 X3 X4 X5) instseq_eq_.
-rcr : codeok_nonnull (ok_rcr X1 X2 X3 X4 X5) instseq_eq_.
-rol : codeok_nonnull (ok_rol X1 X2 X3 X4 X5) instseq_eq_.
-ror : codeok_nonnull (ok_ror X1 X2 X3 X4 X5) instseq_eq_.
-alloc : codeok_nonnull (ok_salloc X1 X2 X3 X4) instseq_eq_.
-free : codeok_nonnull (ok_sfree X1 X2 X3 X4 X5) instseq_eq_.
-hl : codeok_nonnull (ok_shl X1 X2 X3 X4 X5) instseq_eq_.
-ar : codeok_nonnull (ok_sar X1 X2 X3 X4 X5) instseq_eq_.
-hr : codeok_nonnull (ok_shr X1 X2 X3 X4 X5) instseq_eq_.
-ub : codeok_nonnull (ok_sub X1 X2 X3 X4 X5) instseq_eq_.
-ubptr : codeok_nonnull (ok_subptr X1 X2 X3 X4 X5) instseq_eq_.
-ubmptr : codeok_nonnull (ok_submptr X1 X2 X3 X4 X5) instseq_eq_.
-xor : codeok_nonnull (ok_xor X1 X2 X3 X4 X5) instseq_eq_.
-coerce : codeok_nonnull (ok_coerce X1 D) D' <- codeok_nonnull D D'.
-unpack :
   codeok_nonnull
      (ok_unpack (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. X1 t x x1) X2) D'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             codeok_nonnull (D t d1 d2) D').
-assert :
   codeok_nonnull (ok_assert (\x:tr P1. D x) X1) D'
      <- (Pi d:tr P1. codeok_nonnull (D d) D').
-vcase1 :
   codeok_nonnull
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T1 (in1 t K2). D t x x1) X1) D'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:equiv T1 (in1 t K2).
             codeok_nonnull (D t d1 d2) D').
-vcase2 :
   codeok_nonnull
      (ok_vcase2 (\t:tp. \x:kof t K1. \x1:equiv T1 (in2 t K2). D t x x1) X1) D'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:equiv T1 (in2 t K2).
             codeok_nonnull (D t d1 d2) D').
-vacuous : codeok_nonnull (ok_vacuous X1) instseq_eq_.
-letpair :
   codeok_nonnull
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T1 (pair t1 t2). D t1 x t2 x1 x2) X1) D'
      <- (Pi t1:tp. Pi d1:kof t1 K1. Pi t2:tp. Pi d2:kof t2 K2.
             Pi d:equiv T1 (pair t1 t2). codeok_nonnull (D t1 d1 t2 d2 d) D').
-letroll :
   codeok_nonnull
      (ok_letroll
          (\t:tp. \x:kof t (K1 (krec (\k:kind. K1 k))).
              \x1:equiv T1 (roll (\k:kind. K1 k) t). D t x x1) X1) D'
      <- (Pi t:tp. Pi d1:kof t (K1 (krec (\k:kind. K1 k))).
             Pi d2:equiv T1 (roll (\k:kind. K1 k) t).
             codeok_nonnull (D t d1 d2) D').
initok_nonnull :
   Pi S1:htp. Pi G1:rtp. Pi REG1:reg. Pi T1:tp. Pi I:instseq. Pi IN:inst.
      Pi I':instseq. initok S1 G1 REG1 T1 I -> instseq_eq I (; IN I') -> type.
initok_nonnull_mov : initok_nonnull (ok_init_mov X1 X2 X3 X4 X5 X6) instseq_eq_.
initok_nonnull_pop :
   initok_nonnull (ok_init_pop X1 X2 X3 X4 X5 X6 X7 X8) instseq_eq_.
initok_nonnull_coerce :
   initok_nonnull (ok_init_coerce Dinitok X1) D <- initok_nonnull Dinitok D.
initok_nonnull_done :
   initok_nonnull (ok_init_done Dcodeok X1) D <- codeok_nonnull Dcodeok D.
decode_fun :
   Pi H:heap. Pi PC:pc. Pi IN:inst. Pi IN':inst.
      decode H PC IN -> decode H PC IN' -> inst_eq IN IN' -> type.
decode_fun_| :
   Pi IN:inst. Pi N1:nat. Pi S1:string N1. Pi IN':inst. Pi N2:nat.
      Pi S2:string N2.
      aval_eq (instruct IN N1 S1) (instruct IN' N2 S2) -> inst_eq IN IN' -> type.
decode_fun_ :
   decode_fun (decode_ Datomval1 Dapp1 Dsep1 Dlook1)
      (decode_ Datomval2 Dapp2 Dsep2 Dlook2) Dinsteq
      <- hlookup_fun Dlook1 Dlook2 Dvaleq
      <- separate_resp nat_eq_ Dvaleq val_eq_ val_eq_ Dsep1 Dsep1'
      <- separate_fun Dsep1' Dsep2 X3 Dvaleq'
      <- append_resp val_eq_ val_eq_ Dvaleq' Dapp1 Dapp1'
      <- atomval_append_fun Datomval1 Datomval2 Dapp1' Dapp2 X1 X2 Davaleq
      <- decode_fun_| Davaleq Dinsteq.
decode_fun_|_ : decode_fun_| aval_eq_ inst_eq_.
can_decode :
   Pi H:heap. Pi PC:pc. Pi IN':inst. Pi I:instseq. Pi IN:inst.
      clookup H PC (; IN' I) -> decode H PC IN -> delocalize_inst PC IN IN'
         -> type.
can_decode_ :
   can_decode (clookup_ (codeval_cons X1 X2 Ddeloc Datomval Dapp) Dsep Dlook X3)
      (decode_ Datomval Dapp Dsep Dlook) Ddeloc.
decode_clookup_fun :
   Pi H:heap. Pi PC:pc. Pi IN:inst. Pi IN':inst. Pi I1:instseq.
      decode H PC IN -> clookup H PC (; IN' I1) -> delocalize_inst PC IN IN'
         -> type.
decode_clookup_fun_ :
   decode_clookup_fun Ddecode Dclookup Ddeloc'
      <- can_decode Dclookup Ddecode' Ddeloc
      <- decode_fun Ddecode' Ddecode Deq
      <- delocalize_inst_resp Deq inst_eq_ Ddeloc Ddeloc'.
can_advance :
   Pi H:heap. Pi PC:pc. Pi IN:inst. Pi I:instseq. Pi PC':pc.
      clookup H PC (; IN I) -> advance H PC PC' -> clookup H PC' I -> type.
can_advance_ :
   can_advance
      (clookup_ (codeval_cons Dcodeval Dsum X1 Datomval Dapp) Dsep Dlook Dseg)
      (advance_ Dsum Datomval Dapp Dsep Dlook)
      (clookup_ Dcodeval Dsep' Dlook Dseg)
      <- separate_is_append Dsep Dapp'
      <- append_assoc' Dapp1 Dapp2 Dapp Dapp'
      <- atom_size asize_instruct Datomval DsizeV1
      <- separate_size Dsep DsizeV''
      <- sum_commute Dsum Dsum'
      <- size_append DsizeV'' DsizeV1 Dsize Dapp1 Dsum'
      <- append_is_separate Dapp2 Dsize Dsep'.
advance_pl :
   Pi H:heap. Pi PC:pc. Pi IN:inst. Pi I:instseq. Pi PC':pc.
      clookup H PC (; IN I) -> advance H PC PC' -> clookup H PC' I -> type.
advance_pl| :
   Pi IN1:inst. Pi N:nat. Pi S1:string N. Pi IN2:inst. Pi N':nat.
      Pi S2:string N'.
      aval_eq (instruct IN1 N S1) (instruct IN2 N' S2) -> nat_eq N N' -> type.
advance_pl|_ : advance_pl| aval_eq_ nat_eq_.
advance_pl_ :
   advance_pl
      (clookup_ (codeval_cons Dcodeval Dsum' X4 Datomval Dapp2) Dsep Dhlookup
          Dseg)
      (advance_ Dsum Datomval' Dapp2' Dsep' Dhlookup')
      (clookup_ Dcodeval' Dsep''' Dhlookup Dseg)
      <- hlookup_fun Dhlookup' Dhlookup Dveq
      <- separate_resp nat_eq_ Dveq val_eq_ val_eq_ Dsep' Dsep''
      <- separate_is_append Dsep Dapp
      <- append_assoc' Dapp5 Dapp' Dapp2 Dapp
      <- separate_size Dsep Dsize
      <- separate_fun Dsep'' Dsep X3 Dveq2
      <- append_resp val_eq_ val_eq_ Dveq2 Dapp2' Dapp2''
      <- atomval_append_fun Datomval' Datomval Dapp2'' Dapp2 X1 X2 Daeq
      <- advance_pl| Daeq Deq
      <- sum_resp Deq nat_eq_ nat_eq_ Dsum Dsum''
      <- sum_commute Dsum'' Dsum'''
      <- atom_size asize_instruct Datomval Dsize'
      <- size_append Dsize Dsize' Dsize'' Dapp5 Dsum'''
      <- append_is_separate Dapp' Dsize'' Dsep'''
      <- sum_fun3 Dsum' Dsum'' Deq'
      <- pc_eq_cons Deq' L Dpceq
      <- codeval_resp Dpceq val_eq_ instseq_eq_ Dcodeval Dcodeval'.
advance_pt :
   Pi S:htp. Pi L:loc. Pi H:heap. Pi R:rfile. Pi G:rtp. Pi I:instseq. Pi PC:pc.
      Pi IN:inst. Pi PC':pc.
      htpok S L -> hof S H S -> rof S R G -> codeok S G I
         -> clookup H PC (; IN I) -> advance H PC PC'
         -> machineok (mach H L R PC') -> type.
advance_pt_ :
   advance_pt Dhtpok Dhof Drof Dcodeok Dclookup Dadvance
      (machineok_std Dhtpok Dcodeok Dclookup' Drof Dhof)
      <- advance_pl Dclookup Dadvance Dclookup'.
pc_propagate :
   Pi H:heap. Pi PC:pc. Pi I:instseq. Pi PC':pc. Pi R:rfile. Pi O:dest.
      Pi V:val. Pi H':heap. Pi R':rfile.
      clookup H PC I -> advance H PC PC' -> propagate H R PC O V H' R'
         -> clookup H' PC I -> advance H' PC PC' -> type.
pc_propagate_ :
   pc_propagate (clookup_ Dcodeval Dsep1 Dhlookup1 Dseg)
      (advance_ Dsum Datomval Dapp Dsep2 Dhlookup2) Dpropagate
      (clookup_ Dcodeval Dsep1 Dhlookup1' Dseg)
      (advance_ Dsum Datomval Dapp Dsep2 Dhlookup2')
      <- hlookup_propagate Dhlookup1 Dpropagate Dseg Dhlookup1'
      <- hlookup_propagate Dhlookup2 Dpropagate Dseg Dhlookup2'.
pc_hupdate :
   Pi H:heap. Pi PC:pc. Pi I:instseq. Pi PC':pc. Pi L:loc. Pi V:val. Pi H':heap.
      clookup H PC I -> advance H PC PC' -> hupdate H L V H' -> clookup H' PC I
         -> advance H' PC PC' -> type.
pc_hupdate_ :
   pc_hupdate (clookup_ Dcodeval Dsep1 Dhlookup1 Dseg)
      (advance_ Dsum Datomval Dapp Dsep2 Dhlookup2) Dhupdate
      (clookup_ Dcodeval Dsep1 Dhlookup1' Dseg)
      (advance_ Dsum Datomval Dapp Dsep2 Dhlookup2')
      <- hlookup_update Dhlookup1 Dhupdate Dseg Dhlookup1'
      <- hlookup_update Dhlookup2 Dhupdate Dseg Dhlookup2'.
pc_hextend :
   Pi H:heap. Pi PC:pc. Pi I:instseq. Pi PC':pc. Pi L:loc. Pi V:val. Pi H':heap.
      clookup H PC I -> advance H PC PC' -> newloc H L -> hextend H L V H'
         -> clookup H' PC I -> advance H' PC PC' -> type.
pc_hextend_ :
   pc_hextend (clookup_ Dcodeval Dsep1 Dhlookup1 Dseg)
      (advance_ Dsum Datomval Dapp Dsep2 Dhlookup2) Dnewloc Dhextend
      (clookup_ Dcodeval Dsep1 Dhlookup1' Dseg)
      (advance_ Dsum Datomval Dapp Dsep2 Dhlookup2')
      <- hlookup_hextend Dhlookup1 Dnewloc Dhextend Dhlookup1'
      <- hlookup_hextend Dhlookup2 Dnewloc Dhextend Dhlookup2'.
can_jump :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi R:rfile. Pi G:rtp. Pi PC:pc. Pi O:operand.
      Pi O':operand. Pi G':rtp. Pi PC':pc.
      htpok S L1 -> hof S H S -> rof S R G -> delocalize PC O O'
         -> oof S G O' (arrow G') -> jump H R PC O PC' -> type.
can_jump_ :
   can_jump Dhtpok Dhof Drof Ddeloc Doof (jump_ Datomval Dresolve)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc Doof Dresolve Dof
      <- cf Dof (cfp_arrow X1 X2 X3 X4 X5 Datomval).
jump_pt :
   Pi S:htp. Pi L:loc. Pi H:heap. Pi R:rfile. Pi G:rtp. Pi G':rtp. Pi PC:pc.
      Pi O:operand. Pi O':operand. Pi PC':pc.
      htpok S L -> hof S H S -> rof S R G -> rof S R G' -> delocalize PC O O'
         -> oof S G' O' (arrow G) -> jump H R PC O PC'
         -> machineok (mach H L R PC') -> type.
jump_pt_ :
   jump_pt Dhtpok Dhof Drof Drofop Ddeloc Doof (jump_ Datomval Dresolve)
      (machineok_std Dhtpok Dcodeok (clookup_ Dcodeval Dsep Dhlookup Dseg) Drof
          Dhof)
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drofop Ddeloc Doof Dresolve Dof
      <- cfarrow Dof Datomval Dhtlookup Dsub Dkof1 X2 Dseg
      <- can_hlookup Dhtpok Dhof Dhtlookup Dhlookup Dof'
      <- cf (subsume Dsub Dof')
            (cfp_prod (cfp_code Dcodeok X1 Dcodeval) Dc1 Dapp)
      <- val_size Dc1 Dkof1 Dsize
      <- append_is_separate Dapp Dsize Dsep.
clookup_tp :
   Pi S:htp. Pi L':loc. Pi H:heap. Pi G:rtp. Pi L:loc. Pi N:nat. Pi I:instseq.
      Pi V:val. Pi S':htp.
      htpok S L' -> hof S H S -> rtpok G -> clookup H (pc_ L N) I
         -> codeok S G I -> atomval V (pointer L N) 0' -> hsubtype S' S
         -> htpok S' L' -> hof S H S' -> of S' V (arrow G) -> type.
clookup_tp_ :
   clookup_tp Dhtpok Dhof Drtpok (clookup_ Dcodeval Dsep Dhlookup Dseg) Dcodeok
      Datomval Dhsub Dhtpok' Dhof'
      (of_atom (aof_function Dsub Drtpok Dkof Dseg Dhtlookup) Datomval)
      <- can_strip S Dstrip
      <- strip_pt_codeok Dstrip Dcodeok Dcodeok'
      <- separate_is_append Dsep Dapp
      <- separate_size Dsep Dsize
      <- can_tp_exp ns N T' Dte
      <- ns_membership Dsize Dte S' Dc
      <- cfp_weaken Dc Dof1
      <- strengthen_htp Dhtpok Dhof Dhlookup
            (of_append (of_code Dcodeok' Drtpok Dcodeval) Dof1 Dapp) Dseg Dstrip
            Dhsub Dsub Dhtpok' Dhof' Dhtlookup
      <- prod_ident N Dprod
      <- sat_tp_expi sat_nsi Dprod Dte Dkof.
pc_cseg : pc -> type.
pc_cseg_ : pc_cseg (pc_ L N1) <- segof L cseg.
clookup_is_pc_cseg :
   Pi H1:heap. Pi PC:pc. Pi I1:instseq. clookup H1 PC I1 -> pc_cseg PC -> type.
clookup_is_pc_cseg_ :
   clookup_is_pc_cseg (clookup_ X1 X2 X3 Dseg) (pc_cseg_ Dseg).
advance_pc_cseg' :
   Pi H1:heap. Pi PC:pc. Pi PC':pc.
      advance H1 PC PC' -> pc_cseg PC' -> pc_cseg PC -> type.
advance_pc_cseg'_ :
   advance_pc_cseg' (advance_ X1 X2 X3 X4 X5) (pc_cseg_ D) (pc_cseg_ D).
locset_wft : locset -> htp -> type.
locset_wft_ : locset_wft LS S <- locset_wf LS H <- hof S1 H S' <- hsubtype S' S.
locset_eq : locset -> locset -> type.
locset_eq_ : locset_eq LS LS.
locset_eq_cons :
   Pi L1:loc. Pi L2:loc. Pi N1:nat. Pi N2:nat. Pi LS1:locset. Pi LS2:locset.
      loc_eq L1 L2 -> nat_eq N1 N2 -> locset_eq LS1 LS2
         -> locset_eq (loccons L1 N1 LS1) (loccons L2 N2 LS2) -> type.
- : locset_eq_cons loc_eq_ nat_eq_ locset_eq_ locset_eq_.
member_resp :
   Pi L1:loc. Pi L2:loc. Pi N1:nat. Pi N2:nat. Pi LS1:locset. Pi LS2:locset.
      loc_eq L1 L2 -> nat_eq N1 N2 -> locset_eq LS1 LS2 -> member L1 N1 LS1
         -> member L2 N2 LS2 -> type.
- : member_resp loc_eq_ nat_eq_ locset_eq_ D D.
collect_resp :
   Pi M1:machine. Pi M1':machine. Pi M2:machine. Pi M2':machine.
      machine_eq M1 M1' -> machine_eq M2 M2' -> collect M1 M2 -> collect M1' M2'
         -> type.
collect_resp_ : collect_resp machine_eq_ machine_eq_ D D.
heap_unreachable_resp :
   Pi LS:locset. Pi LS':locset. Pi H:heap. Pi H':heap.
      locset_eq LS LS' -> heap_eq H H' -> heap_unreachable LS H
         -> heap_unreachable LS' H' -> type.
heap_unreachable_resp_ : heap_unreachable_resp locset_eq_ heap_eq_ D D.
val_unreachable_resp :
   Pi LS1:locset. Pi LS2:locset. Pi V1:val. Pi V2:val.
      locset_eq LS1 LS2 -> val_eq V1 V2 -> val_unreachable LS1 V1
         -> val_unreachable LS2 V2 -> type.
- : val_unreachable_resp locset_eq_ val_eq_ D D.
htp_collect_ok :
   Pi LS:locset. Pi S:htp. Pi S':htp. Pi L:loc.
      htp_collect LS S S' -> htpok S L -> htpok S' L -> type.
htp_collect_ok* :
   Pi LS:locset. Pi S:htp. Pi S':htp. Pi M:loc. Pi N:loc.
      htp_collect LS S S' -> loc_leq M N -> htpok S M -> htpok S' N -> type.
htp_collect_ok_nil : htp_collect_ok* htp_collect_nil X1 htpok_nil htpok_nil.
htp_collect_ok_keep :
   htp_collect_ok* (htp_collect_keep Dcoll X1) Dleq (htpok_cons Dhtpok Dkof Dlt)
      (htpok_cons Dhtpok' Dkof Dlt')
      <- loc_leq_reflex L1 Dleq'
      <- htp_collect_ok* Dcoll Dleq' Dhtpok Dhtpok'
      <- loc_lt_leq_trans Dlt Dleq Dlt'.
htp_collect_ok_drop :
   htp_collect_ok* (htp_collect_drop Dcoll X1) Dleq (htpok_cons Dhtpok Dkof Dlt)
      Dhtpok'
      <- loc_lt_implies_leq Dlt Dleq'
      <- loc_leq_trans Dleq' Dleq Dleq''
      <- htp_collect_ok* Dcoll Dleq'' Dhtpok Dhtpok'.
htp_collect_ok_ :
   htp_collect_ok Dcoll Dhtpok Dhtpok'
      <- loc_leq_reflex L1 Dleq
      <- htp_collect_ok* Dcoll Dleq Dhtpok Dhtpok'.
loc_neq_contradict : Pi L:loc. loc_neq L L -> false -> type.
loc_neq_contradict_ : loc_neq_contradict (loc_neq_ D) D' <- neq_contradict D D'.
unreachable_member :
   Pi LS:locset. Pi V:val. Pi L:loc. Pi N:nat.
      val_unreachable LS V -> member L N LS -> unreachable L N V -> type.
unreachable_member_hit :
   unreachable_member (val_unreachable_cons X1 D) member_hit D.
unreachable_member_miss :
   unreachable_member (val_unreachable_cons D1 X1) (member_cons D2) D
      <- unreachable_member D1 D2 D.
heap_unreachable_cdr :
   Pi LS:locset. Pi L:loc. Pi V:val. Pi H:heap.
      heap_unreachable LS (hcons L V H) -> heap_unreachable LS H -> type.
heap_unreachable_cdr_cons : heap_unreachable_cdr (heap_unreachable_cons D X1) D.
heap_unreachable_cdr_omit : heap_unreachable_cdr (heap_unreachable_omit D X1) D.
heap_unreachable_cdr_cseg : heap_unreachable_cdr (heap_unreachable_cseg D X1) D.
heap_unreachable_cdr_bseg : heap_unreachable_cdr (heap_unreachable_bseg D X1) D.
unreachable_is_not_bpointer :
   Pi L:loc. Pi N:nat. Pi V:val. unreachable L N V -> not_bpointer L N V -> type.
unreachable_is_not_bpointer_null :
   unreachable_is_not_bpointer unreachable_null not_bpointer_null.
unreachable_is_not_bpointer_cons :
   unreachable_is_not_bpointer (unreachable_cons X1 D) D.
member_contradict :
   Pi L:loc. Pi N1:nat. Pi LS:locset.
      member L N1 LS -> notmember L LS -> false -> type.
member_contradict_hit :
   member_contradict member_hit (notmember_cons X1 D) D'
      <- loc_neq_contradict D D'.
member_contradict_cons :
   member_contradict (member_cons D1) (notmember_cons D2 X1) D
      <- member_contradict D1 D2 D.
cseg_notmember :
   Pi LS:locset. Pi H1:heap. Pi L:loc.
      locset_wf LS H1 -> segof L cseg -> notmember L LS -> type.
cseg_notmember_nil : cseg_notmember locset_wf_nil X1 notmember_nil.
cseg_notmember_cons :
   cseg_notmember (locset_wf_cons D X1 X2 segof_hseg) segof_cseg
      (notmember_cons D' (loc_neq_ (neq_s neq_zs)))
      <- cseg_notmember D segof_cseg D'.
bseg_notmember :
   Pi LS:locset. Pi H1:heap. Pi L:loc.
      locset_wf LS H1 -> segof L bseg -> notmember L LS -> type.
bseg_notmember_nil : bseg_notmember locset_wf_nil X1 notmember_nil.
bseg_notmember_cons :
   bseg_notmember (locset_wf_cons D X1 X2 segof_hseg) segof_bseg
      (notmember_cons D' (loc_neq_ neq_zs))
      <- bseg_notmember D segof_bseg D'.
collect_preserves_strip :
   Pi LS:locset. Pi H1:heap. Pi S1:htp. Pi S2:htp. Pi S:htp.
      locset_wf LS H1 -> htp_collect LS S1 S2 -> strip S1 S -> strip S2 S
         -> type.
collect_preserves_strip| : false -> Pi S:htp. Pi S':htp. strip S S' -> type.
collect_preserves_strip_nil :
   collect_preserves_strip X1 htp_collect_nil strip_nil strip_nil.
collect_preserves_strip_keep_h :
   collect_preserves_strip Dlwf (htp_collect_keep Dcoll X1)
      (strip_hseg Dstrip Dseg) (strip_hseg Dstrip' Dseg)
      <- collect_preserves_strip Dlwf Dcoll Dstrip Dstrip'.
collect_preserves_strip_keep_c :
   collect_preserves_strip Dlwf (htp_collect_keep Dcoll X1)
      (strip_cseg Dstrip Dseg) (strip_cseg Dstrip' Dseg)
      <- collect_preserves_strip Dlwf Dcoll Dstrip Dstrip'.
collect_preserves_strip_keep_b :
   collect_preserves_strip Dlwf (htp_collect_keep Dcoll X1)
      (strip_bseg Dstrip Dseg) (strip_bseg Dstrip' Dseg)
      <- collect_preserves_strip Dlwf Dcoll Dstrip Dstrip'.
collect_preserves_strip_drop_h :
   collect_preserves_strip Dlwf (htp_collect_drop Dcoll X1)
      (strip_hseg Dstrip X2) Dstrip'
      <- collect_preserves_strip Dlwf Dcoll Dstrip Dstrip'.
collect_preserves_strip_drop_c :
   collect_preserves_strip Dlwf (htp_collect_drop X1 Dmem) (strip_cseg X2 Dseg)
      D
      <- cseg_notmember Dlwf Dseg Dnotmem
      <- member_contradict Dmem Dnotmem Dimpossible
      <- collect_preserves_strip| Dimpossible S1 (htpcons L1 T1 S2) D.
collect_preserves_strip_drop_b :
   collect_preserves_strip Dlwf (htp_collect_drop X1 Dmem) (strip_bseg X2 Dseg)
      D
      <- bseg_notmember Dlwf Dseg Dnotmem
      <- member_contradict Dmem Dnotmem Dimpossible
      <- collect_preserves_strip| Dimpossible S1 S2 D.
heap_unreachable_destruct :
   Pi LS:locset. Pi L:loc. Pi V:val. Pi H:heap.
      heap_unreachable LS (hcons L V H) -> notmember L LS -> segof L hseg
         -> heap_unreachable LS H -> val_unreachable LS V -> type.
heap_unreachable_destruct| :
   false
      -> Pi LS:locset. Pi H:heap. Pi V:val.
             heap_unreachable LS H -> val_unreachable LS V -> type.
heap_unreachable_destruct_cons :
   heap_unreachable_destruct (heap_unreachable_cons Dhunr Dvunr) X1 X2 Dhunr
      Dvunr.
heap_unreachable_destruct_omit :
   heap_unreachable_destruct (heap_unreachable_omit X1 Dmem) Dnotmem X2 D1 D2
      <- member_contradict Dmem Dnotmem Dimpossible
      <- heap_unreachable_destruct| Dimpossible LS1 H1 V1 D1 D2.
locset_wft_weaken :
   Pi LS:locset. Pi S1:htp. Pi H1:heap.
      locset_wft LS S1 -> locset_wf LS H1 -> type.
locset_wft_weaken_ : locset_wft_weaken (locset_wft_ X1 X2 D) D.
unreachable_contradict* :
   Pi V:val. Pi L:loc. Pi P:nat. Pi N:nat.
      atomval V (pointer L P) N -> not_pointer L P V N -> false -> type.
unreachable_contradict_sing_p :
   unreachable_contradict* (atomval_sing X1) (not_pointer_pos D) D'
      <- neq_contradict D D'.
unreachable_contradict_sing_o :
   unreachable_contradict* (atomval_sing X1) (not_pointer_offset D) D'
      <- neq_contradict D D'.
unreachable_contradict_sing_nm :
   unreachable_contradict* (atomval_sing X1) (not_pointer_nomatch D) D'
      <- loc_neq_contradict D D'.
unreachable_contradict_sing_c :
   unreachable_contradict* (atomval_sing asize_pointer) (not_pointer_cons D X1)
      D'
      <- lt_contradict D D'.
unreachable_contradict_cons_p :
   unreachable_contradict* (atomval_cons X1) (not_pointer_pos D) D'
      <- neq_contradict D D'.
unreachable_contradict_cons_o :
   unreachable_contradict* (atomval_cons X1) (not_pointer_offset D) D'
      <- neq_contradict D D'.
unreachable_contradict_cons_nm :
   unreachable_contradict* (atomval_cons X1) (not_pointer_nomatch D) D'
      <- loc_neq_contradict D D'.
unreachable_contradict_cons_c :
   unreachable_contradict* (atomval_cons Datomval) (not_pointer_cons X1 Dnb) D'
      <- unreachable_contradict* Datomval Dnb D'.
unreachable_contradict :
   Pi V:val. Pi L:loc. Pi N':nat. Pi N:nat.
      atomval V (pointer L N') 0' -> not_bpointer L N V -> leq N' N -> false
         -> type.
unreachable_contradict_cons_o :
   unreachable_contradict (atomval_cons X1) (not_bpointer_oob Dlt) Dleq D
      <- lt_leq_contradict Dlt Dleq D.
unreachable_contradict_cons_n :
   unreachable_contradict (atomval_cons X1)
      (not_bpointer_nomatch (loc_neq_ Dneq)) X2 D
      <- neq_contradict Dneq D.
unreachable_contradict_cons_c :
   unreachable_contradict (atomval_cons Datomval) (not_bpointer_pointer D) X1 D'
      <- unreachable_contradict* Datomval D D'.
runreachable_contradict :
   Pi L:loc. Pi N:nat. Pi LS:locset. Pi V:val. Pi N':nat. Pi R:rfile.
      Pi REG1:reg.
      member L N LS -> atomval V (pointer L N') 0' -> rfile_unreachable LS R
         -> rlookup R REG1 V -> leq N' N -> false -> type.
runreachable_contradict* :
   Pi L:loc. Pi N:nat. Pi LS:locset. Pi V:val. Pi N':nat. Pi N1:nat.
      Pi R:rfile* N1. Pi N2:nat.
      member L N LS -> atomval V (pointer L N') 0' -> rfile_unreachable* LS R
         -> rlookup* R N2 V -> leq N' N -> false -> type.
runreachable_contradict_hit :
   runreachable_contradict* Dmem Datomval (rfile_unreachable_cons X1 Dvunr)
      rlookup_z Dleq Dimpossible
      <- unreachable_member Dvunr Dmem Dunr
      <- unreachable_is_not_bpointer Dunr Dnb
      <- unreachable_contradict Datomval Dnb Dleq Dimpossible.
runreachable_contradict_miss :
   runreachable_contradict* Dmem Datomval (rfile_unreachable_cons Dunr X1)
      (rlookup_s Dlook) Dleq Dimpossible
      <- runreachable_contradict* Dmem Datomval Dunr Dlook Dleq Dimpossible.
runreachable_contradict_ :
   runreachable_contradict Dmem Datomval (rfile_unreachable_ Dunr X1)
      (rlookup_ Dlook) Dleq Dimpossible
      <- runreachable_contradict* Dmem Datomval Dunr Dlook Dleq Dimpossible.
member_leq :
   Pi LS:locset. Pi H:heap. Pi L:loc. Pi V:val. Pi N:nat. Pi N':nat.
      locset_wf LS H -> hlookup H L V -> size V N -> member L N' LS
         -> nat_eq N N' -> type.
member_leq_hit :
   member_leq (locset_wf_cons X1 Dsize1 Dhlookup1 X2) Dhlookup2 Dsize2
      member_hit Deq
      <- hlookup_fun Dhlookup2 Dhlookup1 Dveq
      <- size_resp Dveq nat_eq_ Dsize2 Dsize2'
      <- size_fun Dsize2' Dsize1 Deq.
member_leq_cons :
   member_leq (locset_wf_cons Dlwf X1 X2 X3) Dhlookup Dsize (member_cons Dmem)
      Deq
      <- member_leq Dlwf Dhlookup Dsize Dmem Deq.
htlookup_collect_ok* :
   Pi LS:locset. Pi H:heap. Pi V:val. Pi L:loc. Pi N:nat. Pi S:htp. Pi S':htp.
      Pi T':tp. Pi V':val. Pi M:nat.
      locset_wf LS H -> val_unreachable LS V -> atomval V (pointer L N) 0'
         -> htp_collect LS S S' -> htlookup S L T' -> hlookup H L V'
         -> size V' M -> leq N M -> htlookup S' L T' -> type.
htlookup_collect_ok*| :
   false -> Pi S:htp. Pi L:loc. Pi T':tp. htlookup S L T' -> type.
htlookup_collect_ok_keep_hit :
   htlookup_collect_ok* X1 X2 Datomval (htp_collect_keep X3 X4) htlookup_hit X5
      X6 X7 htlookup_hit.
htlookup_collect_ok_keep_miss :
   htlookup_collect_ok* Dlwf Dunr Datomval (htp_collect_keep Dcoll X1)
      (htlookup_miss Dlook Dlt) D1 D2 D3 (htlookup_miss Dlook' Dlt)
      <- htlookup_collect_ok* Dlwf Dunr Datomval Dcoll Dlook D1 D2 D3 Dlook'.
htlookup_collect_ok_drop_miss :
   htlookup_collect_ok* Dlwf Dunr Datomval (htp_collect_drop Dcoll X1)
      (htlookup_miss Dlook Dlt) D1 D2 D3 Dlook'
      <- htlookup_collect_ok* Dlwf Dunr Datomval Dcoll Dlook D1 D2 D3 Dlook'.
htlookup_collect_ok_drop_hit :
   htlookup_collect_ok* Dlwf Dunr Datomval (htp_collect_drop X1 Dmember)
      htlookup_hit Dhlookup Dsize Dleq D
      <- unreachable_member Dunr Dmember Dunr'
      <- unreachable_is_not_bpointer Dunr' Dnb
      <- member_leq Dlwf Dhlookup Dsize Dmember Deq
      <- leq_resp nat_eq_ Deq Dleq Dleq'
      <- unreachable_contradict Datomval Dnb Dleq' Dimpossible
      <- htlookup_collect_ok*| Dimpossible S1 L T1 D.
hlookup_size_result : nat -> nat -> type.
hlookup_size_result_good : hlookup_size_result N1 N2 <- leq N1 N2.
hlookup_size_result_bad :
   hlookup_size_result N3 N4
      <- size V N1
      <- of S V T'
      <- boxsub T' N2 T1 T2
      <- lt N1 N2.
hlookup_size :
   Pi S:htp. Pi L:loc. Pi T':tp. Pi M:nat. Pi T1:tp. Pi T2:tp. Pi S':htp.
      Pi H:heap. Pi V:val. Pi N:nat.
      htlookup S L T' -> boxsub T' M T1 T2 -> hof S' H S -> hlookup H L V
         -> size V N -> hlookup_size_result M N -> type.
hlookup_size|hit :
   Pi V:val. Pi N:nat. Pi S:htp. Pi T':tp. Pi M:nat. Pi T1:tp. Pi T2:tp.
      size V N -> of S V T' -> boxsub T' M T1 T2 -> leq_gt M N
         -> hlookup_size_result M N -> type.
-hit :
   hlookup_size htlookup_hit Dbsub (hof_cons X1 Dof X2) hlookup_hit Dsize
      Dresult
      <- can_size V N Dsize
      <- dichotomy M N Dleqgt
      <- hlookup_size|hit Dsize Dof Dbsub Dleqgt Dresult.
-leq :
   hlookup_size|hit X1 X2 X3 (leq_gt_leq Dleq) (hlookup_size_result_good Dleq).
-gt :
   hlookup_size|hit Dsize Dof Dbsub (leq_gt_gt Dlt)
      (hlookup_size_result_bad Dlt Dbsub Dof Dsize).
-miss :
   hlookup_size (htlookup_miss Dhtlookup Dlt) Dsub (hof_cons Dhof X1 X2)
      (hlookup_miss Dhlookup Dlt) Dsize Dleq
      <- hlookup_size Dhtlookup Dsub Dhof Dhlookup Dsize Dleq.
htlookup_collect_ok :
   Pi LS:locset. Pi S:htp. Pi V:val. Pi L:loc. Pi N:nat. Pi S':htp. Pi T':tp.
      Pi T1:tp. Pi T2:tp. Pi T':tp.
      locset_wft LS S -> val_unreachable LS V -> atomval V (pointer L N) 0'
         -> htp_collect LS S S' -> htlookup S L T' -> boxsub T' N T1 T2
         -> kof T' kt -> (htlookup S' L T' -> aof S' (pointer L N) T')
         -> of S' V T' -> type.
htlookup_collect_ok| :
   Pi LS:locset. Pi H:heap. Pi V:val. Pi L:loc. Pi N:nat. Pi S:htp. Pi S':htp.
      Pi T':tp. Pi V':val. Pi M:nat. Pi T':tp.
      locset_wf LS H -> val_unreachable LS V -> atomval V (pointer L N) 0'
         -> htp_collect LS S S' -> htlookup S L T' -> hlookup H L V'
         -> size V' M -> hlookup_size_result N M -> kof T' kt
         -> (htlookup S' L T' -> aof S' (pointer L N) T') -> of S' V T' -> type.
- :
   htlookup_collect_ok (locset_wft_ Dhsub Dhof Dlwf) Dvunr Datomval Dcoll
      Dhtlookup Dbsub Dkof (\x:htlookup S1 L T'. Daof x) Dof
      <- hweaken_htlookup_cseg Dhsub Dhtlookup Dhtlookup' Dsub'
      <- hlookup_size Dhtlookup' (boxsub_transl Dsub' Dbsub) Dhof Dhlookup Dsize
            Dresult
      <- htlookup_collect_ok| Dlwf Dvunr Datomval Dcoll Dhtlookup Dhlookup Dsize
            Dresult Dkof (\x:htlookup S1 L T'. Daof x) Dof.
-good :
   htlookup_collect_ok| Dlwf Dvunr Datomval Dcoll Dhtlookup Dhlookup Dsize
      (hlookup_size_result_good Dleq) X1 (\x:htlookup S2 L1 T1. Daof x)
      (of_atom (Daof Dhtlookup') Datomval)
      <- htlookup_collect_ok* Dlwf Dvunr Datomval Dcoll Dhtlookup Dhlookup Dsize
            Dleq Dhtlookup'.
-bad :
   htlookup_collect_ok| X1 X2 X3 X4 X5 X6 X7
      (hlookup_size_result_bad Dlt Dbsub Dof Dsize) Dkof
      (\x:htlookup S2 L1 T1. X8 x) (of_size_contra Dkof Dlt Dbsub Dof Dsize).
collect_preserves_hlookup :
   Pi LS:locset. Pi H1:heap. Pi L:loc. Pi H:heap. Pi H':heap. Pi V:val.
      locset_wf LS H1 -> segof L cseg -> heap_collect LS H H' -> hlookup H L V
         -> hlookup H' L V -> type.
collect_preserves_hlookup| :
   false -> Pi H:heap. Pi L:loc. Pi V:val. hlookup H L V -> type.
collect_preserves_hlookup_keep_hit :
   collect_preserves_hlookup Dlwf Dseg (heap_collect_keep X1 X2) hlookup_hit
      hlookup_hit.
collect_preserves_hlookup_keep_miss :
   collect_preserves_hlookup Dlwf Dseg (heap_collect_keep Dcoll X1)
      (hlookup_miss Dlook Dlt) (hlookup_miss Dlook' Dlt)
      <- collect_preserves_hlookup Dlwf Dseg Dcoll Dlook Dlook'.
collect_preserves_hlookup_drop_miss :
   collect_preserves_hlookup Dlwf Dseg (heap_collect_drop Dcoll X1)
      (hlookup_miss Dlook Dlt) Dlook'
      <- collect_preserves_hlookup Dlwf Dseg Dcoll Dlook Dlook'.
collect_preserves_hlookup_drop_hit :
   collect_preserves_hlookup Dlwf Dseg (heap_collect_drop X1 Dmember)
      hlookup_hit D
      <- cseg_notmember Dlwf Dseg Dnotmember
      <- member_contradict Dmember Dnotmember Dimpossible
      <- collect_preserves_hlookup| Dimpossible H1 L1 V1 D.
not_pointer_append :
   Pi V1:val. Pi V2:val. Pi V3:val. Pi L:loc. Pi N:nat. Pi M:nat.
      append V1 V2 V3 -> not_pointer L N V3 M -> not_pointer L N V1 M -> type.
not_pointer_append_null : not_pointer_append append_null X1 not_pointer_null.
not_pointer_append_lit :
   not_pointer_append (append_cons X1) not_pointer_lit not_pointer_lit.
not_pointer_append_spointer :
   not_pointer_append (append_cons X1) not_pointer_spointer 
not_pointer_spointer.
not_pointer_append_gotpointer :
   not_pointer_append (append_cons X1) not_pointer_gotpointer
      not_pointer_gotpointer.
not_pointer_append_instruct :
   not_pointer_append (append_cons X1) not_pointer_instruct 
not_pointer_instruct.
not_pointer_append_junk :
   not_pointer_append (append_cons X1) not_pointer_junk not_pointer_junk.
not_pointer_append_pos :
   not_pointer_append (append_cons X1) (not_pointer_pos D) (not_pointer_pos D).
not_pointer_append_offset :
   not_pointer_append (append_cons X1) (not_pointer_offset D)
      (not_pointer_offset D).
not_pointer_append_nomatch :
   not_pointer_append (append_cons X1) (not_pointer_nomatch D)
      (not_pointer_nomatch D).
not_pointer_append_cons :
   not_pointer_append (append_cons Dapp) (not_pointer_cons Dlt Dnb)
      (not_pointer_cons Dlt Dnb')
      <- not_pointer_append Dapp Dnb Dnb'.
not_bpointer_append :
   Pi V1:val. Pi V2:val. Pi V3:val. Pi L:loc. Pi N:nat.
      append V1 V2 V3 -> not_bpointer L N V3 -> not_bpointer L N V1 -> type.
not_bpointer_append_null : not_bpointer_append append_null X1 not_bpointer_null.
not_bpointer_append_lit :
   not_bpointer_append (append_cons X1) not_bpointer_lit not_bpointer_lit.
not_bpointer_append_spointer :
   not_bpointer_append (append_cons X1) not_bpointer_spointer
      not_bpointer_spointer.
not_bpointer_append_gotpointer :
   not_bpointer_append (append_cons X1) not_bpointer_gotpointer
      not_bpointer_gotpointer.
not_bpointer_append_instruct :
   not_bpointer_append (append_cons X1) not_bpointer_instruct
      not_bpointer_instruct.
not_bpointer_append_junk :
   not_bpointer_append (append_cons X1) not_bpointer_junk not_bpointer_junk.
not_bpointer_append_oob :
   not_bpointer_append (append_cons X1) (not_bpointer_oob D)
      (not_bpointer_oob D).
not_bpointer_append_pos :
   not_bpointer_append (append_cons X1) not_bpointer_pos not_bpointer_pos.
not_bpointer_append_nomatch :
   not_bpointer_append (append_cons X1) (not_bpointer_nomatch D)
      (not_bpointer_nomatch D).
not_bpointer_append_cons :
   not_bpointer_append (append_cons Dapp) (not_bpointer_pointer Dnb)
      (not_bpointer_pointer Dnb')
      <- not_pointer_append Dapp Dnb Dnb'.
unreachable_append :
   Pi V1:val. Pi V2:val. Pi V3:val. Pi L:loc. Pi N:nat.
      append V1 V2 V3 -> unreachable L N V3 -> unreachable L N V1
         -> unreachable L N V2 -> type.
unreachable_append_null : unreachable_append append_null D unreachable_null D.
unreachable_append_cons :
   unreachable_append (append_cons Dapp) (unreachable_cons Dunr Dnb)
      (unreachable_cons Dunr1 Dnb') Dunr2
      <- unreachable_append Dapp Dunr Dunr1 Dunr2
      <- not_bpointer_append (append_cons Dapp) Dnb Dnb'.
val_unreachable_append :
   Pi V1:val. Pi V2:val. Pi V3:val. Pi LS:locset.
      append V1 V2 V3 -> val_unreachable LS V3 -> val_unreachable LS V1
         -> val_unreachable LS V2 -> type.
val_unreachable_append_nil :
   val_unreachable_append Dapp val_unreachable_nil val_unreachable_nil
      val_unreachable_nil.
val_unreachable_append_cons :
   val_unreachable_append Dapp (val_unreachable_cons Dvunr Dunr)
      (val_unreachable_cons Dvunr1 Dunr1) (val_unreachable_cons Dvunr2 Dunr2)
      <- unreachable_append Dapp Dunr Dunr1 Dunr2
      <- val_unreachable_append Dapp Dvunr Dvunr1 Dvunr2.
oof_collect_ok :
   Pi LS:locset. Pi H1:heap. Pi S:htp. Pi S':htp. Pi G:rtp. Pi V:operand.
      Pi T':tp.
      locset_wf LS H1 -> htp_collect LS S S' -> oof S G V T' -> oof S' G V T'
         -> type.
oof_collect_ok_im :
   oof_collect_ok Dlwf Dcoll (oof_im Dof Dstrip) (oof_im Dof Dstrip')
      <- collect_preserves_strip Dlwf Dcoll Dstrip Dstrip'.
oof_collect_ok_rco : oof_collect_ok X1 X2 (oof_rco D) (oof_rco D).
oof_collect_ok_mco :
   oof_collect_ok Dlwf Dcoll (oof_mco D1 D2 D) (oof_mco D1 D2 D')
      <- oof_collect_ok Dlwf Dcoll D D'.
oof_collect_ok_imco :
   oof_collect_ok Dlwf Dcoll (oof_imco D1 D2 Doof2 Doof1)
      (oof_imco D1 D2 Doof2' Doof1')
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'.
oof_collect_ok_imco_a :
   oof_collect_ok Dlwf Dcoll (oof_imco_array D1 D2 D3 Doof2 Doof1)
      (oof_imco_array D1 D2 D3 Doof2' Doof1')
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'.
oof_collect_ok_zco :
   oof_collect_ok Dlwf Dcoll (oof_zco D1 D2 D3 D4 D5 D)
      (oof_zco D1 D2 D3 D4 D5 D')
      <- oof_collect_ok Dlwf Dcoll D D'.
oof_collect_ok_spco : oof_collect_ok X1 X2 (oof_spco D) (oof_spco D).
oof_collect_ok_combine :
   oof_collect_ok Dlwf Dcoll (oof_combine D2 D1) (oof_combine D2' D1')
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'.
oof_collect_ok_proj :
   oof_collect_ok Dlwf Dcoll (oof_proj D1 D2 D) (oof_proj D1 D2 D')
      <- oof_collect_ok Dlwf Dcoll D D'.
oof_collect_ok_subsume :
   oof_collect_ok Dlwf Dcoll (oof_subsume Dsub D) (oof_subsume Dsub D')
      <- oof_collect_ok Dlwf Dcoll D D'.
oof_collect_ok_rsubsume :
   oof_collect_ok Dlwf Dcoll (oof_rsubsume Dsub D) (oof_rsubsume Dsub D')
      <- oof_collect_ok Dlwf Dcoll D D'.
update_collect_ok :
   Pi LS:locset. Pi H1:heap. Pi S:htp. Pi S':htp. Pi G:rtp. Pi E:dest. Pi T':tp.
      Pi G':rtp.
      locset_wf LS H1 -> htp_collect LS S S' -> update S G E T' G'
         -> update S' G E T' G' -> type.
update_collect_ok_rdest :
   update_collect_ok X1 X2 (update_rdest D1 D2) (update_rdest D1 D2).
update_collect_ok_mdest :
   update_collect_ok Dlwf Dcoll (update_mdest D1 D2 D) (update_mdest D1 D2 D')
      <- oof_collect_ok Dlwf Dcoll D D'.
update_collect_ok_imdest :
   update_collect_ok Dlwf Dcoll (update_imdest D1 D2 Doof2 Doof1)
      (update_imdest D1 D2 Doof2' Doof1')
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'.
update_collect_ok_imdest_array :
   update_collect_ok Dlwf Dcoll (update_imdest_array D1 D2 D3 Doof2 Doof1)
      (update_imdest_array D1 D2 D3 Doof2' Doof1')
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'.
update_collect_ok_zdest :
   update_collect_ok Dlwf Dcoll (update_zdest D1 D2 D3 D4 D5 D6 D7 Doof D10)
      (update_zdest D1 D2 D3 D4 D5 D6 D7 Doof' D10)
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
update_collect_ok_zdest :
   update_collect_ok Dlwf Dcoll (update_zdest2 D2 D3 D4 D5 D6 D7 Doof D10)
      (update_zdest2 D2 D3 D4 D5 D6 D7 Doof' D10)
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
update_collect_ok_spdest :
   update_collect_ok X1 X2 (update_spdest D1 D2 D3 D4 D5)
      (update_spdest D1 D2 D3 D4 D5).
update_collect_ok_combdest :
   update_collect_ok Dlwf Dcoll (update_combdest D1 D2 D3)
      (update_combdest D1' D2' D3)
      <- update_collect_ok Dlwf Dcoll D1 D1'
      <- update_collect_ok Dlwf Dcoll D2 D2'.
update_collect_ok_projdest :
   update_collect_ok Dlwf Dcoll (update_projdest D1 D2 D3 D4 D5)
      (update_projdest D1' D2 D3 D4 D5')
      <- oof_collect_ok Dlwf Dcoll D5 D5'
      <- update_collect_ok Dlwf Dcoll D1 D1'.
update_collect_ok_subsume :
   update_collect_ok Dlwf Dcoll (update_subsume D Dupdate)
      (update_subsume D Dupdate')
      <- update_collect_ok Dlwf Dcoll Dupdate Dupdate'.
update_collect_ok_rsubsume :
   update_collect_ok Dlwf Dcoll (update_rsubsume D Dupdate)
      (update_rsubsume D Dupdate')
      <- update_collect_ok Dlwf Dcoll Dupdate Dupdate'.
code_collect_ok :
   Pi LS:locset. Pi H1:heap. Pi S:htp. Pi S':htp. Pi G:rtp. Pi I:instseq.
      locset_wf LS H1 -> htp_collect LS S S' -> codeok S G I -> codeok S' G I
         -> type.
init_collect_ok :
   Pi LS:locset. Pi H1:heap. Pi S:htp. Pi S':htp. Pi G:rtp. Pi REG:reg.
      Pi T':tp. Pi I:instseq.
      locset_wf LS H1 -> htp_collect LS S S' -> initok S G REG T' I
         -> initok S' G REG T' I -> type.
-add :
   code_collect_ok Dlwf Dcoll (ok_add Dcodeok D D2 D1 Da)
      (ok_add Dcodeok' D' D2' D1' Da)
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-addptr :
   code_collect_ok Dlwf Dcoll (ok_addptr Dcodeok D Da D2 D1)
      (ok_addptr Dcodeok' D' Da D2' D1')
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-addmptr :
   code_collect_ok Dlwf Dcoll (ok_addmptr Dcodeok D Da D2 D1)
      (ok_addmptr Dcodeok' D' Da D2' D1')
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-addsptr :
   code_collect_ok Dlwf Dcoll (ok_addsptr D5 D4 D2 D1)
      (ok_addsptr D5' D4' D2 D1')
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- update_collect_ok Dlwf Dcoll D4 D4'
      <- code_collect_ok Dlwf Dcoll D5 D5'.
-and :
   code_collect_ok Dlwf Dcoll (ok_and Dcodeok D D2 D1 Da)
      (ok_and Dcodeok' D' D2' D1' Da)
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-bz :
   code_collect_ok Dlwf Dcoll (ok_bz Dcodeok D2 D1) (ok_bz Dcodeok' D2' D1')
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-call :
   code_collect_ok Dlwf Dcoll (ok_call Doof D1 D2 D3 Dcodeok)
      (ok_call Doof' D1 D2 D3 Dcodeok')
      <- oof_collect_ok Dlwf Dcoll Doof Doof'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-cmp :
   code_collect_ok Dlwf Dcoll (ok_cmp Dcodeok D2 D1 Da)
      (ok_cmp Dcodeok' D2' D1' Da)
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-cmpjcc :
   code_collect_ok Dlwf Dcoll
      (ok_cmpjcc Dcodeok Doof3 D1 D2 D3 Doof12 Doof11 D4 D5 D6 Doofreg Doof2
          Doof1 Da)
      (ok_cmpjcc Dcodeok' Doof3' D1 D2 D3 Doof12' Doof11' D4 D5 D6 Doofreg'
          Doof2' Doof1' Da)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'
      <- oof_collect_ok Dlwf Dcoll Doofreg Doofreg'
      <- oof_collect_ok Dlwf Dcoll Doof11 Doof11'
      <- oof_collect_ok Dlwf Dcoll Doof12 Doof12'
      <- oof_collect_ok Dlwf Dcoll Doof3 Doof3'.
-cmpjcc2 :
   code_collect_ok Dlwf Dcoll
      (ok_cmpjcc2 Dcodeok Doof3 D1 D2 D3 Doof2 Doof1 Deq)
      (ok_cmpjcc2 Dcodeok' Doof3' D1 D2 D3 Doof2' Doof1' Deq)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'
      <- oof_collect_ok Dlwf Dcoll Doof3 Doof3'.
-fload :
   code_collect_ok Dlwf Dcoll (ok_fload Dcodeok Doof) (ok_fload Dcodeok' Doof')
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
-fnop :
   code_collect_ok Dlwf Dcoll (ok_fnop Dcodeok) (ok_fnop Dcodeok')
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-fstore :
   code_collect_ok Dlwf Dcoll (ok_fstore Dcodeok Dupd Dexp)
      (ok_fstore Dcodeok' Dupd' Dexp)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- update_collect_ok Dlwf Dcoll Dupd Dupd'.
-fstflags :
   code_collect_ok Dlwf Dcoll (ok_fstflags Dcodeok) (ok_fstflags Dcodeok')
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-halt : code_collect_ok X1 X2 (ok_halt D1 D2) (ok_halt D1 D2).
-jal :
   code_collect_ok Dlwf Dcoll (ok_jal Doof Dupd D Dcodeok)
      (ok_jal Doof' Dupd' D Dcodeok')
      <- update_collect_ok Dlwf Dcoll Dupd Dupd'
      <- oof_collect_ok Dlwf Dcoll Doof Doof'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-jbox :
   code_collect_ok Dlwf Dcoll (ok_jbox Dcodeok Doof2 D1 D2 D3 D4 Doof1)
      (ok_jbox Dcodeok' Doof2' D1 D2 D3 D4 Doof1')
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-jcc :
   code_collect_ok Dlwf Dcoll (ok_jcc Dcodeok Doof) (ok_jcc Dcodeok' Doof')
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
-jmp :
   code_collect_ok Dlwf Dcoll (ok_jmp D) (ok_jmp D')
      <- oof_collect_ok Dlwf Dcoll D D'.
-jnbox :
   code_collect_ok Dlwf Dcoll (ok_jnbox Dcodeok Doof2 D1 D2 D3 D4 Doof1)
      (ok_jnbox Dcodeok' Doof2' D1 D2 D3 D4 Doof1')
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-malloc :
   code_collect_ok Dlwf Dcoll (ok_malloc Dinitok Dupd Dte Dlt Drep Doof Doofgot)
      (ok_malloc Dinitok' Dupd Dte Dlt Drep Doof' Doofgot')
      <- oof_collect_ok Dlwf Dcoll Doofgot Doofgot'
      <- oof_collect_ok Dlwf Dcoll Doof Doof'
      <- init_collect_ok Dlwf Dcoll Dinitok Dinitok'.
-mallocarr :
   code_collect_ok Dlwf Dcoll
      (ok_mallocarr Dcodeok D1 D2 D3 Doof2 Doof1 Doofgot)
      (ok_mallocarr Dcodeok' D1 D2 D3 Doof2' Doof1' Doofgot')
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- oof_collect_ok Dlwf Dcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dcoll Doof2 Doof2'
      <- oof_collect_ok Dlwf Dcoll Doofgot Doofgot'.
-mov :
   code_collect_ok Dlwf Dcoll (ok_mov Dcodeok Dupd Doof)
      (ok_mov Dcodeok' Dupd' Doof')
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- update_collect_ok Dlwf Dcoll Dupd Dupd'
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
-movsx :
   code_collect_ok Dlwf Dcoll (ok_movsx Dcodeok Dupd Doof Da)
      (ok_movsx Dcodeok' Dupd' Doof' Da)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- update_collect_ok Dlwf Dcoll Dupd Dupd'
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
-movzx :
   code_collect_ok Dlwf Dcoll (ok_movzx Dcodeok Dupd Doof Da)
      (ok_movzx Dcodeok' Dupd' Doof' Da)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- update_collect_ok Dlwf Dcoll Dupd Dupd'
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
-nop :
   code_collect_ok Dlwf Dcoll (ok_nop Dcodeok) (ok_nop Dcodeok')
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-or :
   code_collect_ok Dlwf Dcoll (ok_or Dcodeok D D2 D1 Da)
      (ok_or Dcodeok' D' D2' D1' Da)
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-pop :
   code_collect_ok Dlwf Dcoll (ok_pop Dcodeok Dupdate D1 D2 D3 D4)
      (ok_pop Dcodeok' Dupdate' D1 D2 D3 D4)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- update_collect_ok Dlwf Dcoll Dupdate Dupdate'.
-ret : code_collect_ok Dlwf Dcoll (ok_ret D1 D2 D3 D4) (ok_ret D1 D2 D3 D4).
-rcl :
   code_collect_ok Dlwf Dlcoll (ok_rcl Dcodeok Dupd Doof2 Doof1 D1)
      (ok_rcl Dcodeok' Dupd' Doof2' Doof1' D1)
      <- oof_collect_ok Dlwf Dlcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dlcoll Doof2 Doof2'
      <- update_collect_ok Dlwf Dlcoll Dupd Dupd'
      <- code_collect_ok Dlwf Dlcoll Dcodeok Dcodeok'.
-rcr :
   code_collect_ok Dlwf Dlcoll (ok_rcr Dcodeok Dupd Doof2 Doof1 D1)
      (ok_rcr Dcodeok' Dupd' Doof2' Doof1' D1)
      <- oof_collect_ok Dlwf Dlcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dlcoll Doof2 Doof2'
      <- update_collect_ok Dlwf Dlcoll Dupd Dupd'
      <- code_collect_ok Dlwf Dlcoll Dcodeok Dcodeok'.
-rol :
   code_collect_ok Dlwf Dlcoll (ok_rol Dcodeok Dupd Doof2 Doof1 D1)
      (ok_rol Dcodeok' Dupd' Doof2' Doof1' D1)
      <- oof_collect_ok Dlwf Dlcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dlcoll Doof2 Doof2'
      <- update_collect_ok Dlwf Dlcoll Dupd Dupd'
      <- code_collect_ok Dlwf Dlcoll Dcodeok Dcodeok'.
-ror :
   code_collect_ok Dlwf Dlcoll (ok_ror Dcodeok Dupd Doof2 Doof1 D1)
      (ok_ror Dcodeok' Dupd' Doof2' Doof1' D1)
      <- oof_collect_ok Dlwf Dlcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dlcoll Doof2 Doof2'
      <- update_collect_ok Dlwf Dlcoll Dupd Dupd'
      <- code_collect_ok Dlwf Dlcoll Dcodeok Dcodeok'.
-push :
   code_collect_ok Dlwf Dcoll (ok_push Dcodeok D1 D2 D3 Doof)
      (ok_push Dcodeok' D1 D2 D3 Doof')
      <- oof_collect_ok Dlwf Dcoll Doof Doof'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-pushrel :
   code_collect_ok Dlwf Dcoll (ok_pushrel Dcodeok D1 D2 D3 Doof)
      (ok_pushrel Dcodeok' D1 D2 D3 Doof')
      <- oof_collect_ok Dlwf Dcoll Doof Doof'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-alloc :
   code_collect_ok Dlwf Dcoll (ok_salloc Dcodeok D1 D2 D3)
      (ok_salloc Dcodeok' D1 D2 D3)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-free :
   code_collect_ok Dlwf Dcoll (ok_sfree Dcodeok D1 D2 D3 D4)
      (ok_sfree Dcodeok' D1 D2 D3 D4)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-hl :
   code_collect_ok Dlwf Dlcoll (ok_shl Dcodeok Dupd Doof2 Doof1 D1)
      (ok_shl Dcodeok' Dupd' Doof2' Doof1' D1)
      <- oof_collect_ok Dlwf Dlcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dlcoll Doof2 Doof2'
      <- update_collect_ok Dlwf Dlcoll Dupd Dupd'
      <- code_collect_ok Dlwf Dlcoll Dcodeok Dcodeok'.
-ar :
   code_collect_ok Dlwf Dlcoll (ok_sar Dcodeok Dupd Doof2 Doof1 D1)
      (ok_sar Dcodeok' Dupd' Doof2' Doof1' D1)
      <- oof_collect_ok Dlwf Dlcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dlcoll Doof2 Doof2'
      <- update_collect_ok Dlwf Dlcoll Dupd Dupd'
      <- code_collect_ok Dlwf Dlcoll Dcodeok Dcodeok'.
-hr :
   code_collect_ok Dlwf Dlcoll (ok_shr Dcodeok Dupd Doof2 Doof1 D1)
      (ok_shr Dcodeok' Dupd' Doof2' Doof1' D1)
      <- oof_collect_ok Dlwf Dlcoll Doof1 Doof1'
      <- oof_collect_ok Dlwf Dlcoll Doof2 Doof2'
      <- update_collect_ok Dlwf Dlcoll Dupd Dupd'
      <- code_collect_ok Dlwf Dlcoll Dcodeok Dcodeok'.
-ub :
   code_collect_ok Dlwf Dcoll (ok_sub Dcodeok D D2 D1 Da)
      (ok_sub Dcodeok' D' D2' D1' Da)
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-ubptr :
   code_collect_ok Dlwf Dcoll (ok_subptr Dcodeok D Da D2 D1)
      (ok_subptr Dcodeok' D' Da D2' D1')
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-ubmptr :
   code_collect_ok Dlwf Dcoll (ok_submptr Dcodeok D Da D2 D1)
      (ok_submptr Dcodeok' D' Da D2' D1')
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-xor :
   code_collect_ok Dlwf Dcoll (ok_xor Dcodeok D D2 D1 Da)
      (ok_xor Dcodeok' D' D2' D1' Da)
      <- update_collect_ok Dlwf Dcoll D D'
      <- oof_collect_ok Dlwf Dcoll D1 D1'
      <- oof_collect_ok Dlwf Dcoll D2 D2'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-coerce :
   code_collect_ok Dlwf Dcoll (ok_coerce Dsub Dcodeok) (ok_coerce Dsub Dcodeok')
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
-unpack :
   code_collect_ok Dlwf Dcoll
      (ok_unpack (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dcodeok t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D1 t x x1) D2)
      (ok_unpack (\t:tp. \x:kof t K1. \x1:sat t R1 K1. Dcodeok' t x x1)
          (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D1 t x x1) D2)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             code_collect_ok Dlwf Dcoll (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-assert :
   code_collect_ok Dlwf Dcoll (ok_assert (\x:tr P1. Dcodeok x) Doof)
      (ok_assert (\x:tr P1. Dcodeok' x) Doof')
      <- oof_collect_ok Dlwf Dcoll Doof Doof'
      <- (Pi d:tr P1. code_collect_ok Dlwf Dcoll (Dcodeok d) (Dcodeok' d)).
-vcase1 :
   code_collect_ok Dlwf Dcoll
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T1 (in1 t K2). Dcodeok t x x1)
          Doof)
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T1 (in1 t K2). Dcodeok' t x x1)
          Doof')
      <- oof_collect_ok Dlwf Dcoll Doof Doof'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:equiv T1 (in1 t K2).
             code_collect_ok Dlwf Dcoll (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-vcase2 :
   code_collect_ok Dlwf Dcoll
      (ok_vcase2 (\t:tp. \x:kof t K1. \x1:equiv T1 (in2 t K2). Dcodeok t x x1)
          Doof)
      (ok_vcase2 (\t:tp. \x:kof t K1. \x1:equiv T1 (in2 t K2). Dcodeok' t x x1)
          Doof')
      <- oof_collect_ok Dlwf Dcoll Doof Doof'
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:equiv T1 (in2 t K2).
             code_collect_ok Dlwf Dcoll (Dcodeok t d1 d2) (Dcodeok' t d1 d2)).
-vacuous :
   code_collect_ok Dlwf Dcoll (ok_vacuous Doof) (ok_vacuous Doof')
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
-letpair :
   code_collect_ok Dlwf Dcoll
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T1 (pair t1 t2). D2 t1 x t2 x1 x2) D1)
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T1 (pair t1 t2). D2' t1 x t2 x1 x2) D1)
      <- (Pi t1:tp. Pi d1:kof t1 K1. Pi t2:tp. Pi d2:kof t2 K2.
             Pi d:equiv T1 (pair t1 t2).
             code_collect_ok Dlwf Dcoll (D2 t1 d1 t2 d2 d) (D2' t1 d1 t2 d2 d)).
-letroll :
   code_collect_ok Dlwf Dcoll
      (ok_letroll
          (\t:tp. \x:kof t (K1 (krec (\k:kind. K1 k))).
              \x1:equiv T1 (roll (\k:kind. K1 k) t). D2 t x x1) D1)
      (ok_letroll
          (\t:tp. \x:kof t (K1 (krec (\k:kind. K1 k))).
              \x1:equiv T1 (roll (\k:kind. K1 k) t). D2' t x x1) D1)
      <- (Pi t:tp. Pi d1:kof t (K1 (krec (\k:kind. K1 k))).
             Pi d2:equiv T1 (roll (\k:kind. K1 k) t).
             code_collect_ok Dlwf Dcoll (D2 t d1 d2) (D2' t d1 d2)).
-init-mov :
   init_collect_ok Dlwf Dcoll (ok_init_mov Dinitok Dkof3 Doof Dkof2 Dkof1 Dsub)
      (ok_init_mov Dinitok' Dkof3 Doof' Dkof2 Dkof1 Dsub)
      <- init_collect_ok Dlwf Dcoll Dinitok Dinitok'
      <- oof_collect_ok Dlwf Dcoll Doof Doof'.
-init-pop :
   init_collect_ok Dlwf Dcoll
      (ok_init_pop Dinitok Dztupdate Dkof2' Dzsub Dztlookup Dkof2 Dkof1 Dsub)
      (ok_init_pop Dinitok' Dztupdate Dkof2' Dzsub Dztlookup Dkof2 Dkof1 Dsub)
      <- init_collect_ok Dlwf Dcoll Dinitok Dinitok'.
-init-coerce :
   init_collect_ok Dlwf Dcoll (ok_init_coerce Dinitok Dsub)
      (ok_init_coerce Dinitok' Dsub)
      <- init_collect_ok Dlwf Dcoll Dinitok Dinitok'.
-init-done :
   init_collect_ok Dlwf Dcoll (ok_init_done Dcodeok D) (ok_init_done Dcodeok' D)
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'.
of_collect_ok :
   Pi LS:locset. Pi S:htp. Pi V:val. Pi S':htp. Pi T':tp.
      locset_wft LS S -> val_unreachable LS V -> htp_collect LS S S'
         -> of S V T' -> of S' V T' -> type.
-lit :
   of_collect_ok X1 X2 Dcoll (of_atom aof_lit Datomval)
      (of_atom aof_lit Datomval).
-hptr :
   of_collect_ok Dlwf Dunr Dcoll
      (of_atom (aof_chpointer Dsubrev Dbsub Dseg Dhtlookup) Datomval) Dof
      <- of_reg (of_atom (aof_chpointer Dsubrev Dbsub Dseg Dhtlookup) Datomval)
            Dkof
      <- htlookup_collect_ok Dlwf Dunr Datomval Dcoll Dhtlookup Dbsub Dkof
            (\d:htlookup S2 L1 T1. aof_chpointer Dsubrev Dbsub Dseg d) Dof.
-ptr :
   of_collect_ok Dlwf Dunr Dcoll
      (of_atom (aof_cpointer Dbsub Dhtlookup) Datomval) Dof
      <- of_reg (of_atom (aof_cpointer Dbsub Dhtlookup) Datomval) Dkof
      <- htlookup_collect_ok Dlwf Dunr Datomval Dcoll Dhtlookup Dbsub Dkof
            (\d:htlookup S2 L1 T1. aof_cpointer Dbsub d) Dof.
-fun :
   of_collect_ok Dlwf Dunr Dcoll
      (of_atom (aof_function Dsub Drtpok Dsat Dseg Dhtlookup) Datomval) Dof
      <- htlookup_collect_ok Dlwf Dunr Datomval Dcoll Dhtlookup
            (boxsub_base (kof_code Drtpok) Dsat Dsub) (kof_arrow Drtpok)
            (\d:htlookup S2 L1 T1. aof_function Dsub Drtpok Dsat Dseg d) Dof.
-ptr :
   of_collect_ok X1 X2 X3 (of_spointer D1 D2 Datomval)
      (of_spointer D1 D2 Datomval).
-gotptr :
   of_collect_ok X1 X2 X3 (of_atom aof_gotpointer Datomval)
      (of_atom aof_gotpointer Datomval).
-code :
   of_collect_ok Dlwf X1 Dcoll (of_code Dcodeok D1 D2) (of_code Dcodeok' D1 D2)
      <- locset_wft_weaken Dlwf Dlwf'
      <- code_collect_ok Dlwf' Dcoll Dcodeok Dcodeok'.
-append :
   of_collect_ok Dlwf Dunr Dcoll (of_append D2 D1 Dapp) (of_append D2' D1' Dapp)
      <- val_unreachable_append Dapp Dunr Dunr1 Dunr2
      <- of_collect_ok Dlwf Dunr1 Dcoll D1 D1'
      <- of_collect_ok Dlwf Dunr2 Dcoll D2 D2'.
-eteq : of_collect_ok X1 X2 X3 (of_seteq Dbi Dp) (of_seteq Dbi Dp).
-ns : of_collect_ok X1 X2 X3 of_ns of_ns.
-null : of_collect_ok X1 X2 X3 of_null of_null.
-forall :
   of_collect_ok Dlwf Dunr Dcoll
      (forall_intro (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D t x x1) Dpon)
      (forall_intro (\t:tp. \x:kof t K1. \x1:sat t R1 K1. D' t x x1) Dpon)
      <- (Pi t:tp. Pi d1:kof t K1. Pi d2:sat t R1 K1.
             sat_reg d2 d1 Dpon
                -> of_collect_ok Dlwf Dunr Dcoll (D t d1 d2) (D' t d1 d2)).
-guard :
   of_collect_ok Dlwf Dunr Dcoll (guard_intro (\x:tr P1. D x) Dpropok)
      (guard_intro (\x:tr P1. D' x) Dpropok)
      <- (Pi d:tr P1.
             tr_reg d Dpropok -> of_collect_ok Dlwf Dunr Dcoll (D d) (D' d)).
-meet :
   of_collect_ok Dlwf Dunr Dcoll (meet_intro_val D2 D1) (meet_intro_val D2' D1')
      <- of_collect_ok Dlwf Dunr Dcoll D1 D1'
      <- of_collect_ok Dlwf Dunr Dcoll D2 D2'.
-ub :
   of_collect_ok Dlwf Dunr Dcoll (subsume Dsub D) (subsume Dsub D')
      <- of_collect_ok Dlwf Dunr Dcoll D D'.
-big-ns : of_collect_ok X1 X2 X3 (of_big_ns D1 D2) (of_big_ns D1 D2).
-top : of_collect_ok X1 X2 X3 of_top of_top.
-zctra :
   of_collect_ok X1 X2 X3 (of_size_contra D1 D2 D3 D4 D5)
      (of_size_contra D1 D2 D3 D4 D5).
hof_collect_ok :
   Pi LS:locset. Pi S1:htp. Pi H:heap. Pi H':heap. Pi S1':htp. Pi S2:htp.
      Pi S2':htp.
      locset_wft LS S1 -> heap_unreachable LS H -> heap_collect LS H H'
         -> htp_collect LS S1 S1' -> htp_collect LS S2 S2' -> hof S1 H S2
         -> hof S1' H' S2' -> type.
hof_collect_ok| : false -> Pi S:htp. Pi H:heap. Pi S':htp. hof S H S' -> type.
hof_collect_ok_nil :
   hof_collect_ok X1 X2 heap_collect_nil X3 htp_collect_nil hof_nil hof_nil.
hof_collect_ok_conskkh :
   hof_collect_ok Dlwf (heap_unreachable_cons Dunr Dvalunr)
      (heap_collect_keep Dcoll X1) Dcoll1 (htp_collect_keep Dcoll2 X2)
      (hof_cons Dhof Dof (sic_hseg Dseg)) (hof_cons Dhof' Dof' (sic_hseg Dseg))
      <- of_collect_ok Dlwf Dvalunr Dcoll1 Dof Dof'
      <- hof_collect_ok Dlwf Dunr Dcoll Dcoll1 Dcoll2 Dhof Dhof'.
hof_collect_ok_conskkc :
   hof_collect_ok Dlwf (heap_unreachable_cons Dunr Dvalunr)
      (heap_collect_keep Dcoll X1) Dcoll1 (htp_collect_keep Dcoll2 X2)
      (hof_cons Dhof Dof (sic_cseg Dstrip Dseg))
      (hof_cons Dhof' Dof (sic_cseg Dstrip' Dseg))
      <- locset_wft_weaken Dlwf Dlwf'
      <- collect_preserves_strip Dlwf' Dcoll1 Dstrip Dstrip'
      <- hof_collect_ok Dlwf Dunr Dcoll Dcoll1 Dcoll2 Dhof Dhof'.
hof_collect_ok_consdd :
   hof_collect_ok Dlwf (heap_unreachable_cons Dunr X1)
      (heap_collect_drop Dcoll X2) Dcoll1 (htp_collect_drop Dcoll2 X3)
      (hof_cons Dhof X4 X5) Dhof'
      <- hof_collect_ok Dlwf Dunr Dcoll Dcoll1 Dcoll2 Dhof Dhof'.
hof_collect_ok_conskd :
   hof_collect_ok X1 (heap_unreachable_cons X2 X3)
      (heap_collect_keep X4 Dnotmem) X5 (htp_collect_drop X6 Dmem) X7 D
      <- member_contradict Dmem Dnotmem Dimpossible
      <- hof_collect_ok| Dimpossible S1 (hcons L1 V1 H1) S2 D.
hof_collect_ok_consdk :
   hof_collect_ok X1 (heap_unreachable_cons X2 X3) (heap_collect_drop X4 Dmem)
      X5 (htp_collect_keep X6 Dnotmem) X7 D
      <- member_contradict Dmem Dnotmem Dimpossible
      <- hof_collect_ok| Dimpossible S1 H1 (htpcons L1 T1 S2) D.
hof_collect_ok_omitdd :
   hof_collect_ok Dlwf (heap_unreachable_omit Dunr X1)
      (heap_collect_drop Dcoll X2) Dcoll1 (htp_collect_drop Dcoll2 X3)
      (hof_cons Dhof X4 X5) Dhof'
      <- hof_collect_ok Dlwf Dunr Dcoll Dcoll1 Dcoll2 Dhof Dhof'.
hof_collect_ok_omitk* :
   hof_collect_ok X1 (heap_unreachable_omit X2 Dmem)
      (heap_collect_keep X3 Dnotmem) X4 X5 X6 D
      <- member_contradict Dmem Dnotmem Dimpossible
      <- hof_collect_ok| Dimpossible S1 (hcons L1 V1 H1) S2 D.
hof_collect_ok_omit*k :
   hof_collect_ok X1 (heap_unreachable_omit X2 Dmem) X3 X4
      (htp_collect_keep X5 Dnotmem) X6 D
      <- member_contradict Dmem Dnotmem Dimpossible
      <- hof_collect_ok| Dimpossible S1 H1 (htpcons L1 T1 S2) D.
hof_collect_ok_csegkk :
   hof_collect_ok Dlwf (heap_unreachable_cseg Dunr Dseg)
      (heap_collect_keep Dcoll X1) Dcoll1 (htp_collect_keep Dcoll2 X2)
      (hof_cons Dhof Dof (sic_cseg Dstrip X3))
      (hof_cons Dhof' Dof (sic_cseg Dstrip' Dseg))
      <- locset_wft_weaken Dlwf Dlwf'
      <- collect_preserves_strip Dlwf' Dcoll1 Dstrip Dstrip'
      <- hof_collect_ok Dlwf Dunr Dcoll Dcoll1 Dcoll2 Dhof Dhof'.
hof_collect_ok_csegd* :
   hof_collect_ok Dlwf (heap_unreachable_cseg X1 Dseg)
      (heap_collect_drop X2 Dmem) X3 X4 X5 D
      <- locset_wft_weaken Dlwf Dlwf'
      <- cseg_notmember Dlwf' Dseg Dnotmem
      <- member_contradict Dmem Dnotmem Dimpossible
      <- hof_collect_ok| Dimpossible S1 H1 S2 D.
hof_collect_ok_cseg*d :
   hof_collect_ok Dlwf (heap_unreachable_cseg X1 Dseg) X2 X3
      (htp_collect_drop X4 Dmem) X5 D
      <- locset_wft_weaken Dlwf Dlwf'
      <- cseg_notmember Dlwf' Dseg Dnotmem
      <- member_contradict Dmem Dnotmem Dimpossible
      <- hof_collect_ok| Dimpossible S1 H1 S2 D.
rof_collect_ok :
   Pi LS:locset. Pi S:htp. Pi R:rfile. Pi S':htp. Pi G:rtp.
      locset_wft LS S -> rfile_unreachable LS R -> htp_collect LS S S'
         -> rof S R G -> rof S' R G -> type.
rof_collect_ok* :
   Pi LS:locset. Pi S:htp. Pi N1:nat. Pi R:rfile* N1. Pi S':htp. Pi G:rtp* N1.
      locset_wft LS S -> rfile_unreachable* LS R -> htp_collect LS S S'
         -> rof* S R G -> rof* S' R G -> type.
-nil : rof_collect_ok* X1 rfile_unreachable_nil X2 rof_nil rof_nil.
-cons :
   rof_collect_ok* Dlwf (rfile_unreachable_cons Dunr Dvalunr) Dcoll
      (rof_cons Drof Dof Dsize) (rof_cons Drof' Dof' Dsize)
      <- of_collect_ok Dlwf Dvalunr Dcoll Dof Dof'
      <- rof_collect_ok* Dlwf Dunr Dcoll Drof Drof'.
- :
   rof_collect_ok Dlwf (rfile_unreachable_ Dunr Dvalunr) Dcoll (rof_ Drof Dof)
      (rof_ Drof' Dof')
      <- of_collect_ok Dlwf Dvalunr Dcoll Dof Dof'
      <- rof_collect_ok* Dlwf Dunr Dcoll Drof Drof'.
can_htp_collect :
   Pi LS:locset. Pi H:heap. Pi H1:heap. Pi S1:htp. Pi S:htp. Pi S':htp.
      heap_collect LS H H1 -> hof S1 H S -> htp_collect LS S S' -> type.
can_htp_collect_nil : can_htp_collect heap_collect_nil hof_nil htp_collect_nil.
can_htp_collect_keep :
   can_htp_collect (heap_collect_keep Dcoll Dnotmem) (hof_cons Dhof X1 X2)
      (htp_collect_keep Dcoll' Dnotmem)
      <- can_htp_collect Dcoll Dhof Dcoll'.
can_htp_collect_drop :
   can_htp_collect (heap_collect_drop Dcoll Dmem) (hof_cons Dhof X1 X2)
      (htp_collect_drop Dcoll' Dmem)
      <- can_htp_collect Dcoll Dhof Dcoll'.
clookup_collect_ok :
   Pi LS:locset. Pi H1:heap. Pi H:heap. Pi H':heap. Pi PC:pc. Pi I:instseq.
      locset_wf LS H1 -> heap_collect LS H H' -> clookup H PC I
         -> clookup H' PC I -> type.
clookup_collect_ok_ :
   clookup_collect_ok Dlwf Dcoll (clookup_ Dcodeval Dsep Dhlookup Dseg)
      (clookup_ Dcodeval Dsep Dhlookup' Dseg)
      <- collect_preserves_hlookup Dlwf Dseg Dcoll Dhlookup Dhlookup'.
simple_hsegt :
   Pi LS:locset. Pi H:heap. Pi S1:htp. Pi S:htp.
      locset_wf LS H -> hof S1 H S -> locset_wft LS S -> type.
simple_hsegt_ : simple_hsegt Dlwf Dhof (locset_wft_ hsubtype_refl Dhof Dlwf).
cons_hsegt :
   Pi LS:locset. Pi H:heap. Pi L:loc. Pi T':tp. Pi S:htp. Pi L1:loc. Pi S1:htp.
      locset_wf LS H -> htpok (htpcons L T' S) L1 -> hof S1 H (htpcons L T' S)
         -> locset_wft LS S -> type.
cons_hsegt_ :
   cons_hsegt Dlwf Dhtpok Dhof (locset_wft_ (hsubtype_extend Dhtpok) Dhof Dlwf).
collect_ok :
   Pi M:machine. Pi M':machine.
      collect M M' -> machineok M -> machineok M' -> type.
collect_ok_std :
   collect_ok (collect_ Dhcoll Drunr Dhunr Dlwf)
      (machineok_std Dhtpok Dcodeok Dclookup Drof Dhof)
      (machineok_std Dhtpok' Dcodeok' Dclookup' Drof' Dhof')
      <- simple_hsegt Dlwf Dhof Dlwf'
      <- can_htp_collect Dhcoll Dhof Dcoll
      <- htp_collect_ok Dcoll Dhtpok Dhtpok'
      <- hof_collect_ok Dlwf' Dhunr Dhcoll Dcoll Dcoll Dhof Dhof'
      <- rof_collect_ok Dlwf' Drunr Dcoll Drof Drof'
      <- code_collect_ok Dlwf Dcoll Dcodeok Dcodeok'
      <- clookup_collect_ok Dlwf Dhcoll Dclookup Dclookup'.
collect_ok_init| : false -> Pi M:machine. machineok M -> type.
collect_ok_init_keep :
   collect_ok (collect_ (heap_collect_keep Dhcoll_cdr Dnotmem) Drunr Dhunr Dlwf)
      (machineok_init Dhtpok Dinitok Dclookup Datomval Drlookup Drof Dseg
          (hof_cons Dhof_cdr Dof (sic_hseg X1)))
      (machineok_init Dhtpok' Dinitok' Dclookup' Datomval Drlookup Drof' Dseg
          (hof_cons Dhof_cdr' Dof' (sic_hseg Dseg)))
      <- cons_hsegt Dlwf Dhtpok (hof_cons Dhof_cdr Dof (sic_hseg Dseg)) Dlwf'
      <- can_htp_collect Dhcoll_cdr Dhof_cdr Dcoll_cdr
      <- heap_unreachable_destruct Dhunr Dnotmem Dseg Dhunr_cdr Dvunr
      <- hof_collect_ok Dlwf' Dhunr_cdr Dhcoll_cdr Dcoll_cdr Dcoll_cdr Dhof_cdr
            Dhof_cdr'
      <- of_collect_ok Dlwf' Dvunr Dcoll_cdr Dof Dof'
      <- rof_collect_ok Dlwf' Drunr Dcoll_cdr Drof Drof'
      <- init_collect_ok Dlwf Dcoll_cdr Dinitok Dinitok'
      <- htp_collect_ok (htp_collect_keep Dcoll_cdr Dnotmem) Dhtpok Dhtpok'
      <- clookup_collect_ok Dlwf (heap_collect_keep Dhcoll_cdr Dnotmem) Dclookup
            Dclookup'.
collect_ok_init_drop :
   collect_ok (collect_ (heap_collect_drop X1 Dmem) Drunr X2 X3)
      (machineok_init X4 X5 X6 Datomval Drlookup X7 X8 X9) Dmok
      <- runreachable_contradict Dmem Datomval Drunr Drlookup leq_z Dimpossible
      <- collect_ok_init| Dimpossible (mach H1 L1 R PC1) Dmok.
heap_unreachable_empty : Pi H:heap. heap_unreachable locnil H -> type.
heap_unreachable_empty_nil : heap_unreachable_empty hnil heap_unreachable_nil.
heap_unreachable_empty_cons :
   heap_unreachable_empty (hcons L V H)
      (heap_unreachable_cons Dunr val_unreachable_nil)
      <- heap_unreachable_empty H Dunr.
rfile_unreachable_empty : Pi R:rfile. rfile_unreachable locnil R -> type.
rfile_unreachable_empty* :
   Pi N1:nat. Pi R:rfile* N1. rfile_unreachable* locnil R -> type.
rfile_unreachable_empty_nil :
   rfile_unreachable_empty* rfnil rfile_unreachable_nil.
rfile_unreachable_empty_cons :
   rfile_unreachable_empty* (rfcons V R)
      (rfile_unreachable_cons Dunr val_unreachable_nil)
      <- rfile_unreachable_empty* R Dunr.
rfile_unreachable_empty_ :
   rfile_unreachable_empty (rf Z CC1 R)
      (rfile_unreachable_ Dunr val_unreachable_nil)
      <- rfile_unreachable_empty* R Dunr.
heap_collect_empty : Pi H:heap. heap_collect locnil H H -> type.
heap_collect_empty_nil : heap_collect_empty hnil heap_collect_nil.
heap_collect_empty_cons :
   heap_collect_empty (hcons L V H) (heap_collect_keep Dhcoll notmember_nil)
      <- heap_collect_empty H Dhcoll.
htp_collect_empty : Pi S:htp. htp_collect locnil S S -> type.
htp_collect_empty_nil : htp_collect_empty htpnil htp_collect_nil.
htp_collect_empty_cons :
   htp_collect_empty (htpcons L T' H) (htp_collect_keep Dcoll notmember_nil)
      <- htp_collect_empty H Dcoll.
collect_ident : Pi M:machine. collect M M -> type.
collect_ident_ :
   collect_ident (mach H L R PC) (collect_ Dhcoll Drunr Dhunr locset_wf_nil)
      <- heap_unreachable_empty H Dhunr
      <- rfile_unreachable_empty R Drunr
      <- heap_collect_empty H Dhcoll.
collect_newloc :
   Pi LS1:locset. Pi H:heap. Pi H':heap. Pi L:loc.
      heap_collect LS1 H H' -> goodheap H -> newloc H L -> newloc H' L -> type.
collect_newloc_nil :
   collect_newloc heap_collect_nil X1 (newloc_nil Dseg) (newloc_nil Dseg).
collect_newloc_keep :
   collect_newloc (heap_collect_keep X1 X2) X3 (newloc_cons Dseg Dlt)
      (newloc_cons Dseg Dlt).
collect_newloc_drop :
   collect_newloc (heap_collect_drop Dcoll X1) Dgoodheap Dnewloc Dnewloc''
      <- newloc_cdr Dnewloc Dgoodheap Dnewloc'
      <- goodheap_tail Dgoodheap Dgoodheap'
      <- collect_newloc Dcoll Dgoodheap' Dnewloc' Dnewloc''.
collect_nextloc :
   Pi LS1:locset. Pi H:heap. Pi H':heap. Pi L:loc. Pi L':loc.
      heap_collect LS1 H H' -> goodheap H -> nextloc H L L' -> nextloc H' L L'
         -> type.
collect_nextloc_ :
   collect_nextloc Dcoll Dgoodheap (nextloc_ Dnewloc) (nextloc_ Dnewloc')
      <- collect_newloc Dcoll Dgoodheap Dnewloc Dnewloc'.
cons_locset_wf :
   Pi LS:locset. Pi H:heap. Pi L:loc. Pi V:val.
      locset_wf LS H -> goodheap (hcons L V H) -> locset_wf LS (hcons L V H)
         -> type.
cons_locset_wf_nil : cons_locset_wf locset_wf_nil X1 locset_wf_nil.
cons_locset_wf_cons :
   cons_locset_wf (locset_wf_cons Dlwf Dsize Dhlookup Dseg) Dgoodheap
      (locset_wf_cons Dlwf' Dsize Dhlookup' Dseg)
      <- hlookup_cons Dhlookup Dgoodheap Dhlookup'
      <- cons_locset_wf Dlwf Dgoodheap Dlwf'.
unreachable_junk :
   Pi N1:nat. Pi V:val.
      val_exp (;' (@' junk 0') null) N1 V
         -> Pi L:loc. Pi N:nat. unreachable L N V -> type.
unreachable_junk_z : unreachable_junk val_exp_z L1 N1 unreachable_null.
unreachable_junk_s :
   unreachable_junk (val_exp_s (append_cons append_null) Dve) L N
      (unreachable_cons Dunr not_bpointer_junk)
      <- unreachable_junk Dve L N Dunr.
val_unreachable_junk :
   Pi N1:nat. Pi V:val.
      val_exp (;' (@' junk 0') null) N1 V
         -> Pi LS:locset. val_unreachable LS V -> type.
val_unreachable_junk_nil : val_unreachable_junk X1 locnil val_unreachable_nil.
val_unreachable_junk_cons :
   val_unreachable_junk Dve (loccons L N LS) (val_unreachable_cons Dvunr Dunr)
      <- unreachable_junk Dve L N Dunr
      <- val_unreachable_junk Dve LS Dvunr.
goodheap_notmember :
   Pi LS:locset. Pi H:heap. Pi L:loc.
      locset_wf LS H -> goodheap* H L -> notmember L LS -> type.
goodheap_notmember_nil : goodheap_notmember locset_wf_nil X1 notmember_nil.
goodheap_notmember_cons :
   goodheap_notmember (locset_wf_cons Dlwf X1 Dhlookup X2) Dgoodheap
      (notmember_cons Dnotmem (loc_neq_ Dneq'))
      <- goodheap_notmember Dlwf Dgoodheap Dnotmem
      <- goodheap_hlookup Dgoodheap Dhlookup (loc_lt_ Dlt)
      <- lt_implies_neq Dlt Dneq
      <- neq_symm Dneq Dneq'.
collect_hextend :
   Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi H1:heap. Pi L2:loc. Pi N:nat.
      Pi V:val. Pi H2:heap. Pi H':heap.
      collect (mach H L R PC) (mach H1 L R PC) -> goodheap H -> nextloc H L L2
         -> val_exp (;' (@' junk 0') null) N V -> hextend H L V H2
         -> collect (mach H2 L2 R PC) (mach H' L2 R PC) -> hextend H1 L V H'
         -> type.
collect_hextend_ :
   collect_hextend (collect_ Dhcoll Drunr Dhunr Dlwf) Dgoodheap
      (nextloc_ Dnewloc) Dve hextend_
      (collect_ (heap_collect_keep Dhcoll Dnotmem) Drunr
          (heap_unreachable_cons Dhunr Dvunr) Dlwf') hextend_
      <- goodheap_newloc Dgoodheap Dnewloc V1 Dgoodheap'
      <- cons_locset_wf Dlwf Dgoodheap' Dlwf'
      <- val_unreachable_junk Dve LS1 Dvunr
      <- goodheap_tail' Dgoodheap' Dgoodheap''
      <- goodheap_notmember Dlwf Dgoodheap'' Dnotmem.
unreachable_pointer :
   Pi L:loc. Pi L':loc. Pi V:val. Pi N1:nat. Pi N2:nat.
      loc_neq L L' -> atomval V (pointer L' N1) N2
         -> Pi N:nat. unreachable L N V -> type.
unreachable_pointer_cons :
   unreachable_pointer Dneq (atomval_cons Datomval) N3
      (unreachable_cons Dunr (not_bpointer_nomatch Dneq))
      <- unreachable_pointer Dneq Datomval N3 Dunr.
unreachable_pointer_sing :
   unreachable_pointer Dneq (atomval_sing X1) N3
      (unreachable_cons unreachable_null (not_bpointer_nomatch Dneq)).
val_unreachable_pointer :
   Pi L:loc. Pi LS:locset. Pi V:val. Pi N1:nat. Pi N2:nat.
      notmember L LS -> atomval V (pointer L N1) N2 -> val_unreachable LS V
         -> type.
val_unreachable_pointer_nil :
   val_unreachable_pointer notmember_nil X1 val_unreachable_nil.
val_unreachable_pointer_cons :
   val_unreachable_pointer (notmember_cons Dnotmem (loc_neq_ Dneq)) Datomval
      (val_unreachable_cons Dvunr Dunr)
      <- val_unreachable_pointer Dnotmem Datomval Dvunr
      <- neq_symm Dneq Dneq'
      <- unreachable_pointer (loc_neq_ Dneq') Datomval N5 Dunr.
collect_rupdate_pointer* :
   Pi L:loc. Pi LS:locset. Pi V:val. Pi N1:nat. Pi N2:nat. Pi N3:nat.
      Pi R:rfile* N3. Pi N4:nat. Pi R':rfile* N3.
      notmember L LS -> atomval V (pointer L N1) N2 -> rupdate* R N4 V R'
         -> rfile_unreachable* LS R -> rfile_unreachable* LS R' -> type.
collect_rupdate_pointer*_z :
   collect_rupdate_pointer* Dnotmem Datomval rupdate_z
      (rfile_unreachable_cons Drunr X1) (rfile_unreachable_cons Drunr Dunr)
      <- val_unreachable_pointer Dnotmem Datomval Dunr.
collect_rupdate_pointer*_s :
   collect_rupdate_pointer* Dnotmem Datomval (rupdate_s Drupdate)
      (rfile_unreachable_cons Drunr Dunr) (rfile_unreachable_cons Drunr' Dunr)
      <- collect_rupdate_pointer* Dnotmem Datomval Drupdate Drunr Drunr'.
collect_rupdate_pointer :
   Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi H':heap. Pi L':loc. Pi V:val.
      Pi N1:nat. Pi N2:nat. Pi REG1:reg. Pi R':rfile.
      collect (mach H L R PC) (mach H' L R PC) -> goodheap H -> newloc H L'
         -> atomval V (pointer L' N1) N2 -> rupdate R REG1 V R'
         -> collect (mach H L R' PC) (mach H' L R' PC) -> type.
collect_rupdate_pointer_ :
   collect_rupdate_pointer
      (collect_ Dhcoll (rfile_unreachable_ Drunr Dsunr) Dhunr Dlwf) Dgoodheap
      Dnewloc Datomval (rupdate_ Drupdate)
      (collect_ Dhcoll (rfile_unreachable_ Drunr' Dsunr) Dhunr Dlwf)
      <- goodheap_newloc' Dgoodheap Dnewloc Dgoodheap'
      <- goodheap_notmember Dlwf Dgoodheap' Dnotmem
      <- collect_rupdate_pointer* Dnotmem Datomval Drupdate Drunr Drunr'.
collect_pc :
   Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC1:pc. Pi H':heap. Pi L':loc.
      Pi R':rfile. Pi PC2:pc.
      collect (mach H L R PC1) (mach H' L' R' PC2)
         -> Pi PC:pc. collect (mach H L R PC) (mach H' L' R' PC) -> type.
collect_pc_ :
   collect_pc (collect_ Dhcoll Drunr Dhunr Dlwf) PC2
      (collect_ Dhcoll Drunr Dhunr Dlwf).
collect_advance :
   Pi LS:locset. Pi H:heap. Pi H':heap. Pi PC:pc. Pi I:instseq. Pi PC':pc.
      locset_wf LS H -> heap_collect LS H H' -> clookup H PC I
         -> advance H PC PC' -> advance H' PC PC' -> type.
- :
   collect_advance Dlwf Dhcoll Dclook
      (advance_ Dsum Datomval Dappend Dsep Dhlook)
      (advance_ Dsum Datomval Dappend Dsep Dhlook1)
      <- clookup_collect_ok Dlwf Dhcoll Dclook (clookup_ X1 X2 X3 Dcseg)
      <- collect_preserves_hlookup Dlwf Dcseg Dhcoll Dhlook Dhlook1.
goodheap_lesser :
   Pi H:heap. Pi L:loc. Pi L':loc.
      goodheap* H L -> loc_lt L L' -> goodheap* H L' -> type.
- : goodheap_lesser goodheap_nil X1 goodheap_nil.
- :
   goodheap_lesser (goodheap_cons Dgh Dloclt1) Dloclt2
      (goodheap_cons Dgh Dloclt3)
      <- loc_lt_trans Dloclt1 Dloclt2 Dloclt3.
goodheap*_collect :
   Pi H:heap. Pi L:loc. Pi LS:locset. Pi H':heap.
      goodheap* H L -> heap_collect LS H H' -> goodheap* H' L -> type.
- : goodheap*_collect X1 heap_collect_nil goodheap_nil.
- :
   goodheap*_collect (goodheap_cons Dgh Dloclt) (heap_collect_keep Dhc X1)
      (goodheap_cons Dgh1 Dloclt)
      <- goodheap*_collect Dgh Dhc Dgh1.
- :
   goodheap*_collect (goodheap_cons Dgh Dloclt) (heap_collect_drop Dhc X1) Dgh2
      <- goodheap*_collect Dgh Dhc Dgh1
      <- goodheap_lesser Dgh1 Dloclt Dgh2.
goodheap_collect :
   Pi H:heap. Pi LS:locset. Pi H':heap.
      goodheap H -> heap_collect LS H H' -> goodheap H' -> type.
- :
   goodheap_collect (goodheap_ Dgh) Dhc (goodheap_ Dgh1)
      <- goodheap*_collect Dgh Dhc Dgh1.
branch_on_zero :
   Pi N1:nat. Pi B:binary N1. Pi MS:machine. Pi IN:inst. Pi MS1:machine.
      Pi MS2:machine. Pi MS':machine.
      maybe_zero B -> (is_zero B -> perform MS IN MS1)
         -> (is_nonzero B -> perform MS IN MS2) -> perform MS IN MS' -> type.
-zero :
   branch_on_zero (maybe_zero_yes Diz) (\x:is_zero B1. D x)
      (\x:is_nonzero B1. X1 x) (D Diz).
-nzero :
   branch_on_zero (maybe_zero_no Dinz) (\x:is_zero B1. X1 x)
      (\x:is_nonzero B1. D x) (D Dinz).
branch_on_cond :
   Pi Cond:cond. Pi R:rfile. Pi H:heap. Pi L:loc. Pi PC:pc. Pi IN:inst.
      Pi MS1:machine. Pi MS2:machine. Pi MS':machine.
      perhaps_sat Cond R -> (cond_sat Cond R -> perform (mach H L R PC) IN MS1)
         -> (cond_unsat Cond R -> perform (mach H L R PC) IN MS2)
         -> perform (mach H L R PC) IN MS' -> type.
-yes :
   branch_on_cond (perhaps_sat_yes D) (\x:cond_sat F1 R1. F x)
      (\x:cond_unsat F1 R1. X1 x) (F D).
-no :
   branch_on_cond (perhaps_sat_no D) (\x:cond_sat F1 R1. X1 x)
      (\x:cond_unsat F1 R1. F x) (F D).
branch_on_cond' :
   Pi Cond:cond. Pi R:rfile. Pi MS:machine. Pi IN:inst. Pi MS1:machine.
      Pi MS2:machine. Pi MS':machine.
      maybe_sat Cond R -> (cond_sat Cond R -> perform MS IN MS1)
         -> (cond_unsat Cond R -> perform MS IN MS2) -> perform MS IN MS'
         -> type.
-yes :
   branch_on_cond' (maybe_sat_yes D) (\x:cond_sat F1 R1. F x)
      (\x:cond_unsat F1 R1. X1 x) (F D).
-no :
   branch_on_cond' (maybe_sat_no D) (\x:cond_sat F1 R1. X1 x)
      (\x:cond_unsat F1 R1. F x) (F D).
branch_on_box :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi T2:tp. Pi MS:machine. Pi IN:inst.
      Pi MS1:machine. Pi MS2:machine. Pi MS':machine.
      cfp S V (join (setlt wordsize (number 1024_32)) (cbox T1 T2))
         -> (Pi B:binary wordbits. Pi Bdiff:binary wordbits.
                binary_int theend V B -> add B Bdiff 1024_32 zero
                   -> is_nonzero Bdiff -> perform MS IN MS1)
         -> (Pi L:loc. Pi N:nat. atomval V (pointer L N) 0' -> perform MS IN MS2)
         -> perform MS IN MS' -> type.
-nbox :
   branch_on_box (cfp_join1 X1 Dc)
      (\B3:binary wordbits. \Bdiff:binary wordbits. \x:binary_int theend V1 B3.
          \x1:add B3 Bdiff 1024_32 zero. \x2:is_nonzero Bdiff.
          F B3 Bdiff x x1 x2)
      (\L:loc. \N:nat. \x:atomval V1 (pointer L N) 0'. X2 L N x)
      (F B B1 Dbi Dadd Dinz)
      <- cfp_setlt Dc Dtr Dbi' Dp
      <- canonize_numlt Dtr (calculate_number Drep1') (calculate_number Drep2)
            Dlt
      <- binary_size_resp Dp product_wordbits Dbi' Dbi Drep1' Drep1
      <- lt_implies_sum Dlt Dsum
      <- sum_add_corr10 Drep1 Drepdiff Drep2 Dsum Dadd
      <- represents_succ Drepdiff Dinz.
-box :
   branch_on_box (cfp_join2 X1 (cfp_cbox X2 X3 Datomval))
      (\B:binary wordbits. \Bdiff:binary wordbits. \x:binary_int theend V1 B.
          \x1:add B Bdiff 1024_32 zero. \x2:is_nonzero Bdiff. X4 B Bdiff x x1 x2)
      (\L:loc. \N:nat. \x:atomval V1 (pointer L N) 0'. F L N x)
      (F L1 N1 Datomval).
can_product_nonzero :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. product (s N1) (s N2) (s N3) -> type.
- :
   can_product_nonzero N1 N2 N3 (product_s (sum_s Dsum) Dprod)
      <- can_product N1 (s N2) N Dprod
      <- can_sum N2 N N3 Dsum.
boxsub_size :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi S':htp. Pi L:loc. Pi T':tp. Pi P:nat.
      Pi T1:tp. Pi T2:tp. Pi T3:tp. Pi N:nat. Pi P':nat.
      htpok S L1 -> hof S H S' -> htlookup S' L T'
         -> boxsub T' P (prod T1 T2) T3 -> sat T2 (rti N) kt -> sum N P' P
         -> type.
- :
   boxsub_size Dhtpok Dhof Dhtlookup Dbsub Dsat Dsum'
      <- can_hlookup Dhtpok Dhof Dhtlookup X4 Dof
      <- boxsub_subsume Dbsub Dof Dsep Dof' X3
      <- cf Dof' (cfp_prod Dc X2 Dapp)
      <- separate_size Dsep Dsize12
      <- val_size Dc Dsat Dsize2
      <- size_append'' X1 Dsize2 Dsize12 Dapp Dsum
      <- sum_commute Dsum Dsum'.
progress* :
   Pi S:htp. Pi L:loc. Pi H:heap. Pi R:rfile. Pi G:rtp. Pi PC:pc. Pi PC':pc.
      Pi I:instseq. Pi IN:inst. Pi IN':inst. Pi H':heap. Pi L':loc. Pi R':rfile.
      Pi PC'':pc.
      htpok S L -> hof S H S -> rof S R G -> advance H PC PC' -> clookup H PC' I
         -> delocalize_inst PC IN IN' -> codeok S G (; IN' I)
         -> perform (mach H L R PC) IN (mach H' L' R' PC'') -> type.
-add :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_add Ddeloc2 Ddeloc1 Ddeloc)
      (ok_add X2 Dupdate Doof2 Doof1 (leq_s leq_z))
      (step_add Dadvance Dccupdate Dpropagate Dbi Ddc Dadd Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      <- can_product_nonzero N 7' N' Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B1 Dprod Ditb1
      <- can_int_to_binary' theend Dc2 B2 Dprod Ditb2
      <- can_add_wo B1 B2 B3 CARRY OVERFLOW Dadd
      <- can_binary_to_int (s N) V3 B3 Dprod Dbi
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 Ddeloc Dupdate
            Dpropagate
      <- can_determine_conds B3 CARRY OVERFLOW CC Ddc
      <- can_ccupdate R' CC Dccupdate.
-addptr :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_addptr Ddeloc2 Ddeloc1 Ddeloc)
      (ok_addptr X2 Dupdate Dsat Doof2 Doof1)
      (step_addptr Dadvance ccupdate_ Dpropagate Datomval' Dsum Drep Dbi
          Datomval Dresolve2 Dresolve1)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 (cfp_cbox Dbsub Dhtlookup Datomval)
      <- cf Dof2 (cfp_seteq Dbi' Dp Dtr)
      <- canonize Dtr (trc_numeq (calculate_number Drep') Dcalc)
      <- binary_size_resp Dp product_wordbits Dbi' Dbi Drep' Drep
      <- calculate_is_numeq Dcalc Dtr'
      <- can_sum N P P' Dsum
      <- can_atomval (pointer L P') asize_pointer Datomval'
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof
            (of_atom
                (aof_cpointer
                    (boxsub_transr reflex rassoc
                        (boxsub_shright Dsum (incleq _ _ _ Dtr' Dsat)
                            (boxsub_transr rassoc reflex Dbsub))) Dhtlookup)
                Datomval')
            Ddeloc Dupdate Dpropagate.
-addmptr :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_addptr Ddeloc2 Ddeloc1 Ddeloc)
      (ok_addmptr X2 Dupdate Dsat Doof2 Doof1)
      (step_addptr Dadvance ccupdate_ Dpropagate Datomval' Dsum Drep Dbi
          Datomval Dresolve2 Dresolve1)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 (cfp_cmbox Dsubrev Dbsub Dseg Dhtlookup Datomval)
      <- cf Dof2 (cfp_seteq Dbi' Dp Dtr)
      <- canonize Dtr (trc_numeq (calculate_number Drep') Dcalc)
      <- binary_size_resp Dp product_wordbits Dbi' Dbi Drep' Drep
      <- calculate_is_numeq Dcalc Dtr'
      <- can_sum N P P' Dsum
      <- can_atomval (pointer L P') asize_pointer Datomval'
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof
            (of_atom
                (aof_chpointer
                    (trans Dsubrev
                        (trans (trans (prod_sub lassoc reflex) rassoc)
                            (prod_sub reflex lassoc)))
                    (boxsub_transr reflex rassoc
                        (boxsub_shright Dsum (incleq _ _ _ Dtr' Dsat)
                            (boxsub_transr rassoc reflex Dbsub))) Dseg Dhtlookup)
                Datomval')
            Ddeloc Dupdate Dpropagate.
-addsptr :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_addsptr DdelocE DdelocO)
      (ok_addsptr X2 Dupdate Dkof1 Doof)
      (step_addsptr Dadvance ccupdate_ Dpropagate Datomval' Dsum Datomval
          Dresolve)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof Dresolve Dof
      <- cf Dof (cfp_sptr Dsize (cfp_prod Dc2 Dc1 Dappend) Datomval)
      <- val_size Dc1 Dkof1 Dsize1
      <- can_size Vinh2 N1 Dsize2
      <- size_append' Dsize1 Dsize2 Dsize Dappend Dsum
      <- can_atomval (spointer N1) asize_spointer Datomval'
      <- cfp_weaken Dc2 Dof2
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof
            (of_spointer Dsize2 Dof2 Datomval') DdelocE Dupdate Dpropagate.
-and :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_and Ddeloc2 Ddeloc1 Ddeloc)
      (ok_and X2 Dupdate Doof2 Doof1 (leq_s leq_z))
      (step_and Dadvance Dccupdate Dpropagate Dbi Ddc Dand Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      <- can_product_nonzero N 7' N' Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B1 Dprod Ditb1
      <- can_int_to_binary' theend Dc2 B2 Dprod Ditb2
      <- can_and B1 B2 B3 Dand
      <- can_binary_to_int (s N) V3 B3 Dprod Dbi
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 Ddeloc Dupdate
            Dpropagate
      <- can_determine_conds B3 zero zero CC Ddc
      <- can_ccupdate R' CC Dccupdate.
-bz :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_bz Ddeloc2 Ddeloc1)
      (ok_bz X2 Doof2 Doof1) Dperform
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve Dof1
      <- cf Dof1 Dc1
      <- can_int_to_binary' theend Dc1 B product_wordbits Dbi
      <- compare_for_zero B Dmz
      <- can_jump Dhtpok Dhof Drof Ddeloc2 Doof2 Djump
      <- branch_on_zero Dmz
            (\Diz:is_zero B. step_bz_take Djump Diz Dbi Dresolve)
            (\Dinz:is_nonzero B. step_bz_skip Dadvance Dinz Dbi Dresolve)
            Dperform.
-call :
   progress* Dhtpok Dhof Drof Dadvance Dclookup (delocalize_call Ddeloc)
      (ok_call Doof Dztupdate Dztlookup Drtpok Dcodeok)
      (step_call Djump Dzupdate Dapp Datomval Dzlookup Dadvance)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof Dzok
      <- can_atomval (pointer L N) asize_pointer Datomval
      <- can_append V Z Z' Dapp
      <- clookup_tp Dhtpok Dhof Drtpok Dclookup Dcodeok Datomval Dhsub Dhtpok'
            Dhof' Dof
      <- hweaken_hof Dhsub Dhof' Dhof''
      <- hweaken_rof Dhsub Drof Drof'
      <- hweaken_of Dhsub Dzof Dzof'
      <- can_zupdate' Drof' (of_append Dzof' Dof Dapp) Dztupdate Dzupdate Drof''
      <- hweaken_oof Dhsub Doof Doof'
      <- can_jump Dhtpok' Dhof'' Drof'' Ddeloc Doof' Djump.
-cmp :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_cmp Ddeloc2 Ddeloc1)
      (ok_cmp X2 Doof2 Doof1 (leq_s leq_z))
      (step_cmp Dadvance Dccupdate Ddc Dadd Ditb2 Ditb1 Dresolve2 Dresolve1
          Dprod)
      <- can_product_nonzero N 7' N' Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B1 Dprod Ditb1
      <- can_int_to_binary' theend Dc2 B2 Dprod Ditb2
      <- can_add_wo' B2 B3 B1 CARRY OVERFLOW Dadd
      <- can_determine_conds B3 CARRY OVERFLOW CC Ddc
      <- can_ccupdate R CC Dccupdate.
-cmpjcc :
   progress* Dhtpok Dhof Drof Dadvance X2
      (delocalize_cmpjcc Ddeloc3 Ddeloc2 Ddeloc1)
      (ok_cmpjcc X3 Doof3 X4 X5 X6 X7 X8 X9 X10 X11 X12 Doof2 Doof1
          (leq_s leq_z)) Dperform
      <- can_product_nonzero N 7' N' Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 (cfp_seteq Dbi2' Dprod' X1)
      <- binary_size_resp2 Dprod' Dprod B'' B Dbi2' Dbi2
      <- can_int_to_binary' theend Dc1 B' Dprod Dbi1
      <- can_add_wo' B Bdiff B' CARRY OVERFLOW Dadd
      <- can_determine_conds Bdiff CARRY OVERFLOW CC Ddc
      <- can_ccupdate R CC Dccupdate
      <- compare_for_zero Bdiff Dmz
      <- ccupdate_pt Drof Dccupdate Drof'
      <- check_for_sat' Cond R' Ddc Dccupdate Dms
      <- can_jump Dhtpok Dhof Drof' Ddeloc3 Doof3 Djump
      <- branch_on_cond' Dms
            (\Dsat:cond_sat Cond R'.
                step_cmpjcc_take Djump Dsat Dccupdate Ddc Dadd Dbi2 Dbi1
                   Dresolve2 Dresolve1 Dprod)
            (\Dunsat:cond_unsat Cond R'.
                step_cmpjcc_skip Dadvance Dunsat Dccupdate Ddc Dadd Dbi2 Dbi1
                   Dresolve2 Dresolve1 Dprod)
            Dperform.
-cmpjcc2 :
   progress* Dhtpok Dhof Drof Dadvance X2
      (delocalize_cmpjcc Ddeloc3 Ddeloc2 Ddeloc1)
      (ok_cmpjcc2 X3 Doof3 X4 X5 X6 Doof2 Doof1 X7) Dperform
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 (cfp_seteq Dbi2' Dprod' X1)
      <- binary_size_resp2 Dprod' product_wordbits B'' B Dbi2' Dbi2
      <- can_int_to_binary' theend Dc1 B' product_wordbits Dbi1
      <- can_add_wo' B Bdiff B' CARRY OVERFLOW Dadd
      <- can_determine_conds Bdiff CARRY OVERFLOW CC Ddc
      <- can_ccupdate R CC Dccupdate
      <- compare_for_zero Bdiff Dmz
      <- ccupdate_pt Drof Dccupdate Drof'
      <- check_for_sat' Cond R' Ddc Dccupdate Dms
      <- can_jump Dhtpok Dhof Drof' Ddeloc3 Doof3 Djump
      <- branch_on_cond' Dms
            (\Dsat:cond_sat Cond R'.
                step_cmpjcc_take Djump Dsat Dccupdate Ddc Dadd Dbi2 Dbi1
                   Dresolve2 Dresolve1 product_wordbits)
            (\Dunsat:cond_unsat Cond R'.
                step_cmpjcc_skip Dadvance Dunsat Dccupdate Ddc Dadd Dbi2 Dbi1
                   Dresolve2 Dresolve1 product_wordbits)
            Dperform.
-fload :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_fload Ddeloc)
      (ok_fload X2 Doof) (step_fload Dadvance Dresolve)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc Doof Dresolve Dof.
-fnop :
   progress* Dhtpok Dhof Drof Dadvance X1 delocalize_fnop (ok_fnop X2)
      (step_fnop Dadvance).
-fstore :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_fstore Ddeloc)
      (ok_fstore X2 Dupd Dexp) (step_fstore Dadvance Dprop Dvexp)
      <- can_val_exp (;' (@' junk 0') null) N V Dvexp
      <- exp_pt of_ns Dvexp Dexp Dof
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof Ddeloc Dupd Dprop.
-fstflags :
   progress* Dhtpok Dhof Drof Dadvance X1 delocalize_fstflags (ok_fstflags X2)
      (step_fstflags Dadvance ccupdate_).
-halt :
   progress* Dhtpok Dhof Drof X2 X3 delocalize_halt (ok_halt Dsub Dztlookup)
      (step_halt Dzlookup')
      <- can_zlookup Drof Dztlookup Dzlookup Dof X1
      <- cfb0 (subsume Dsub Dof) Deq
      <- zlookup_resp rfile_eq_ Deq Dzlookup Dzlookup'.
-jal :
   progress* Dhtpok Dhof Drof Dadvance Dclookup (delocalize_jal DdelocO DdelocE)
      (ok_jal Doof Dupdate Drtpok Dcodeok)
      (step_jal Djump Dpropagate Datomval Dadvance)
      <- can_atomval (pointer L N) asize_pointer Datomval
      <- clookup_tp Dhtpok Dhof Drtpok Dclookup Dcodeok Datomval Dhsub Dhtpok'
            Dhof' Dof
      <- hweaken_hof Dhsub Dhof' Dhof''
      <- hweaken_rof Dhsub Drof Drof'
      <- hweaken_update Dhsub Dupdate Dupdate'
      <- can_propagate Dhtpok' Dhof'' hsubtype_refl Drof' Dof DdelocE Dupdate'
            Dpropagate
      <- propagate_pt Dhtpok' Dhof'' hsubtype_refl Drof' Dof DdelocE Dupdate'
            Dpropagate Dhof''' Drof''
      <- hweaken_oof Dhsub Doof Doof'
      <- can_jump Dhtpok' Dhof''' Drof'' DdelocO Doof' Djump.
-jbox :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_jbox Ddeloc delocalize_rco)
      (ok_jbox Dcodeok Doof2 Drtupdate2 Drtupdate1 Dsub2 Dsub1 Doof1) Dperform
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof delocalize_rco Doof1
            Dresolve Dof
      <- cf (subsume (join_sub Dsub2 Dsub1) Dof) Dc
      <- can_jump Dhtpok Dhof Drof Ddeloc Doof2 Djump
      <- branch_on_box Dc
            (\b:binary wordbits. \b2:binary wordbits.
                \Dbi:binary_int theend V b. \Dadd:add b b2 1024_32 zero.
                \Dinz:is_nonzero b2.
                step_jbox_skip Dadvance Dinz Dadd Dbi Dresolve)
            (\l:loc. \n:nat. \Datomval:atomval V (pointer l n) 0'.
                step_jbox_take Djump Datomval Dresolve) Dperform.
-jcc :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_jcc Ddeloc)
      (ok_jcc X2 Doof) Dperform
      <- check_for_sat Cond R Dps
      <- can_jump Dhtpok Dhof Drof Ddeloc Doof Djump
      <- branch_on_cond Dps (\Dsat:cond_sat Cond R. step_jcc_take Djump Dsat)
            (\Dunsat:cond_unsat Cond R. step_jcc_skip Dadvance Dunsat) Dperform.
-jmp :
   progress* Dhtpok Dhof Drof X1 X2 (delocalize_jmp Ddeloc) (ok_jmp Doof)
      (step_jmp Djump)
      <- can_jump Dhtpok Dhof Drof Ddeloc Doof Djump.
-jnbox :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_jnbox Ddeloc delocalize_rco)
      (ok_jnbox Dcodeok Doof2 Drtupdate2 Drtupdate1 Dsub2 Dsub1 Doof1) Dperform
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof delocalize_rco Doof1
            Dresolve Dof
      <- cf (subsume (join_sub Dsub2 Dsub1) Dof) Dc
      <- can_jump Dhtpok Dhof Drof Ddeloc Doof2 Djump
      <- branch_on_box Dc
            (\b:binary wordbits. \b2:binary wordbits.
                \Dbi:binary_int theend V b. \Dadd:add b b2 1024_32 zero.
                \Dinz:is_nonzero b2.
                step_jnbox_take Djump Dinz Dadd Dbi Dresolve)
            (\l:loc. \n:nat. \Datomval:atomval V (pointer l n) 0'.
                step_jnbox_skip Dadvance Datomval Dresolve) Dperform.
-malloc :
   progress* Dhtpok Dhof Drof Dadvance Dclookup
      (delocalize_malloc Ddeloc delocalize_rdest Ddelocgot)
      (ok_malloc X1 Drtupdate Dte Dlt Drep Doof Doofgot)
      (step_malloc Dadvance (propagate_rdest Drupdate Dsize) Datomval hextend_
          Dve Dnextloc Dlt Drep Dbi Dresolve Dcollect Dgoodheap Datomvalgot
          Dresolvegot)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddelocgot Doofgot
            Dresolvegot Dofgot
      <- cf Dofgot (cfp_gotptr Datomvalgot)
      <- typed_heap_good Dhtpok Dhof Dgoodheap
      <- collect_ident (mach H L R PC) Dcollect
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc Doof Dresolve Dofn
      <- cfseteqnum Dofn product_wordbits Dbi
      <- can_nextloc_clookup Dhtpok Dhof Dclookup Dnextloc
      <- can_val_exp (;' (@' junk 0') null) N V Dve
      <- can_atomval (pointer L 0') asize_pointer Datomval
      <- atom_size asize_pointer Datomval Dsize
      <- updated_reg_ok Drtupdate Dregok
      <- can_rupdate R REG V' R' Dregok Drupdate.
-mov :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_mov DdelocO DdelocE)
      (ok_mov X2 Dupdate Doof) (step_mov Dadvance Dpropagate Dresolve)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof Dresolve Dof
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof DdelocE Dupdate
            Dpropagate.
-nop :
   progress* Dhtpok Dhof Drof Dadvance X1 delocalize_nop (ok_nop X2)
      (step_nop Dadvance).
-or :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_or Ddeloc2 Ddeloc1 Ddeloc)
      (ok_or X2 Dupdate Doof2 Doof1 (leq_s leq_z))
      (step_or Dadvance Dccupdate Dpropagate Dbi Ddc Dor Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      <- can_product_nonzero N 7' N' Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B1 Dprod Ditb1
      <- can_int_to_binary' theend Dc2 B2 Dprod Ditb2
      <- can_or B1 B2 B3 Dor
      <- can_binary_to_int (s N) V3 B3 Dprod Dbi
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 Ddeloc Dupdate
            Dpropagate
      <- can_determine_conds B3 zero zero CC Ddc
      <- can_ccupdate R' CC Dccupdate.
-pop :
   progress* Dhtpok Dhof Drof Dadvance X2 (delocalize_pop Ddeloc)
      (ok_pop X3 Dupdate Dztupdate Dkof Dsub Dztlookup)
      (step_pop Dadvance Dpropagate Dzupdate Dsep Dzlookup)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- cf (subsume Dsub Dzof) (cfp_prod Dzc' Dc Dapp)
      <- val_size Dc Dkof Dsize
      <- append_is_separate Dapp Dsize Dsep
      <- cfp_weaken Dzc' Dzof'
      <- can_zupdate' Drof Dzof' Dztupdate Dzupdate Drof'
      <- cfp_weaken Dc Dof
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof' Dof Ddeloc Dupdate
            Dpropagate.
-push :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_push Ddeloc)
      (ok_push X2 Dztupdate Dztlookup X3 Doof)
      (step_push Dadvance Dzupdate Dapp Dzlookup Dresolve)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc Doof Dresolve Dof
      <- cf Dof Dc
      <- can_zlookup Drof Dztlookup Dzlookup Dzof Dzok
      <- can_append V Z Z' Dapp
      <- can_zupdate Drof (of_append Dzof Dof Dapp) Dztupdate Dzupdate.
-pushrel :
   progress* Dhtpok Dhof Drof Dadvance X1 (delocalize_pushrel Ddeloc)
      (ok_pushrel X2 Dztupdate Dztlookup X3 Doof)
      (step_pushrel Dadvance ccupdate_ Dzupdate Dapp Dzlookup Dresolve)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc Doof Dresolve Dof
      <- cf Dof Dc
      <- can_zlookup Drof Dztlookup Dzlookup Dzof Dzok
      <- can_append V Z Z' Dapp
      <- can_zupdate Drof (of_append Dzof Dof Dapp) Dztupdate Dzupdate.
-ret :
   progress* Dhtpok Dhof Drof X7 X8 delocalize_ret
      (ok_ret X9 Dsub Dztupdate Dztlookup)
      (step_ret Datomval Dzupdate Dsep Dzlookup)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X6
      <- cf (subsume Dsub Dzof)
            (cfp_prod Dc2 (cfp_arrow X1 X2 X3 X4 X5 Datomval) Dapp)
      <- atom_size asize_pointer Datomval Dsize
      <- append_is_separate Dapp Dsize Dsep
      <- cfp_weaken Dc2 Dzof'
      <- can_zupdate Drof Dzof' Dztupdate Dzupdate.
-rcl :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_rcl DdelocO2 DdelocO1 DdelocE)
      (ok_rcl X2 Dupd Doof2 Doof1 (leq_s leq_z))
      (step_rcl Dadvance ccupdate_ Dpropagate Ditb3 Drol Dcclookup Dlt Drep1
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      <- can_product_nonzero N1 7' N2 Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO1 Doof1 Dresolve1
            Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO2 Doof2 Dresolve2
            Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B4 Dprod Ditb1
      <- cfp_setlt Dc2 Dtr Ditb2' Dp
      <- canonize_numlt Dtr (calculate_number Drep1') calculate_numlit Dlt
      <- binary_size_resp Dp product_bytebits Ditb2' Ditb2 Drep1' Drep1
      <- can_cclookup R Dcclookup
      <- can_rotate_left N3 ($ B3 B4) Drol
      <- can_binary_to_int (s N1) V1 B1 Dprod Ditb3
      <- binary_int_type' Ditb3 Dprod Dcfp3
      <- cfp_weaken Dcfp3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupd
            Dpropagate.
-rcr :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_rcr DdelocO2 DdelocO1 DdelocE)
      (ok_rcr X2 Dupd Doof2 Doof1 (leq_s leq_z))
      (step_rcr Dadvance ccupdate_ Dpropagate Ditb3 Dror Dcclookup Dlt Drep1
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      <- can_product_nonzero N1 7' N2 Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO1 Doof1 Dresolve1
            Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO2 Doof2 Dresolve2
            Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B4 Dprod Ditb1
      <- cfp_setlt Dc2 Dtr Ditb2' Dp
      <- canonize_numlt Dtr (calculate_number Drep1') calculate_numlit Dlt
      <- binary_size_resp Dp product_bytebits Ditb2' Ditb2 Drep1' Drep1
      <- can_cclookup R Dcclookup
      <- can_rotate_right N3 ($ B3 B4) Dror
      <- can_binary_to_int (s N1) V1 B1 Dprod Ditb3
      <- binary_int_type' Ditb3 Dprod Dcfp3
      <- cfp_weaken Dcfp3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupd
            Dpropagate.
-rol :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_rol DdelocO2 DdelocO1 DdelocE)
      (ok_rol X2 Dupd Doof2 Doof1 (leq_s leq_z))
      (step_rol Dadvance ccupdate_ Dpropagate Ditb3 Drol Dcclookup Dlt Drep1
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      <- can_product_nonzero N1 7' N2 Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO1 Doof1 Dresolve1
            Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO2 Doof2 Dresolve2
            Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B2 Dprod Ditb1
      <- cfp_setlt Dc2 Dtr Ditb2' Dp
      <- canonize_numlt Dtr (calculate_number Drep1') calculate_numlit Dlt
      <- binary_size_resp Dp product_bytebits Ditb2' Ditb2 Drep1' Drep1
      <- can_cclookup R Dcclookup
      <- can_rotate_left N3 B2 Drol
      <- can_binary_to_int (s N1) V1 B1 Dprod Ditb3
      <- binary_int_type' Ditb3 Dprod Dcfp3
      <- cfp_weaken Dcfp3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupd
            Dpropagate.
-ror :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_ror DdelocO2 DdelocO1 DdelocE)
      (ok_ror X2 Dupd Doof2 Doof1 (leq_s leq_z))
      (step_ror Dadvance ccupdate_ Dpropagate Ditb3 Dror Dcclookup Dlt Drep1
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      <- can_product_nonzero N1 7' N2 Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO1 Doof1 Dresolve1
            Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO2 Doof2 Dresolve2
            Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B2 Dprod Ditb1
      <- cfp_setlt Dc2 Dtr Ditb2' Dp
      <- canonize_numlt Dtr (calculate_number Drep1') calculate_numlit Dlt
      <- binary_size_resp Dp product_bytebits Ditb2' Ditb2 Drep1' Drep1
      <- can_cclookup R Dcclookup
      <- can_rotate_right N3 B2 Dror
      <- can_binary_to_int (s N1) V1 B1 Dprod Ditb3
      <- binary_int_type' Ditb3 Dprod Dcfp3
      <- cfp_weaken Dcfp3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupd
            Dpropagate.
-alloc :
   progress* Dhtpok Dhof Drof Dadvance X2 delocalize_salloc
      (ok_salloc Dcodeok Dztupdate Dte Dztlookup)
      (step_salloc Dadvance ccupdate_ Dzupdate Dapp Dve Dzlookup)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- can_val_exp (;' (@' junk 0') null) N V Dve
      <- exp_pt of_ns Dve Dte Dof
      <- can_append V Z Z' Dapp
      <- can_zupdate Drof (of_append Dzof Dof Dapp) Dztupdate Dzupdate.
-free :
   progress* Dhtpok Dhof Drof Dadvance X2 delocalize_sfree
      (ok_sfree Dcodeok Dztupdate Dkof1 Dsub Dztlookup)
      (step_sfree Dadvance ccupdate_ Dzupdate Dsep Dzlookup)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- cf (subsume Dsub Dzof) (cfp_prod Dcz2 Dcz1 Dapp)
      <- val_size Dcz1 Dkof1 Dsize
      <- append_is_separate Dapp Dsize Dsep
      <- cfp_weaken Dcz2 Dzof2
      <- can_zupdate Drof Dzof2 Dztupdate Dzupdate.
-hl :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_shl DdelocO2 DdelocO1 DdelocE)
      (ok_shl X2 Dupd Doof2 Doof1 (leq_s leq_z))
      (step_shl Dadvance ccupdate_ Dpropagate Ditb3 Dshl Dcclookup Dlt Drep1
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      <- can_product_nonzero N1 7' N2 Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO1 Doof1 Dresolve1
            Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO2 Doof2 Dresolve2
            Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B3 Dprod Ditb1
      <- cfp_setlt Dc2 Dtr Ditb2' Dp
      <- canonize_numlt Dtr (calculate_number Drep1') calculate_numlit Dlt
      <- binary_size_resp Dp product_bytebits Ditb2' Ditb2 Drep1' Drep1
      <- can_cclookup R Dcclookup
      <- can_shift_left N3 B3 Dshl
      <- can_binary_to_int (s N1) V1 B1 Dprod Ditb3
      <- binary_int_type' Ditb3 Dprod Dcfp3
      <- cfp_weaken Dcfp3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupd
            Dpropagate.
-ar :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_sar DdelocO2 DdelocO1 DdelocE)
      (ok_sar X2 Dupd Doof2 Doof1 (leq_s leq_z))
      (step_sar Dadvance ccupdate_ Dpropagate Ditb3 Dsar Dcclookup Dlt Drep1
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      <- can_product_nonzero N1 7' N2 Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO1 Doof1 Dresolve1
            Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO2 Doof2 Dresolve2
            Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B3 Dprod Ditb1
      <- cfp_setlt Dc2 Dtr Ditb2' Dp
      <- canonize_numlt Dtr (calculate_number Drep1') calculate_numlit Dlt
      <- binary_size_resp Dp product_bytebits Ditb2' Ditb2 Drep1' Drep1
      <- can_cclookup R Dcclookup
      <- can_shift_arith_right N3 B3 Dsar
      <- can_binary_to_int (s N1) V1 B1 Dprod Ditb3
      <- binary_int_type' Ditb3 Dprod Dcfp3
      <- cfp_weaken Dcfp3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupd
            Dpropagate.
-hr :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_shr DdelocO2 DdelocO1 DdelocE)
      (ok_shr X2 Dupd Doof2 Doof1 (leq_s leq_z))
      (step_shr Dadvance ccupdate_ Dpropagate Ditb3 Dshr Dcclookup Dlt Drep1
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      <- can_product_nonzero N1 7' N2 Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO1 Doof1 Dresolve1
            Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO2 Doof2 Dresolve2
            Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B3 Dprod Ditb1
      <- cfp_setlt Dc2 Dtr Ditb2' Dp
      <- canonize_numlt Dtr (calculate_number Drep1') calculate_numlit Dlt
      <- binary_size_resp Dp product_bytebits Ditb2' Ditb2 Drep1' Drep1
      <- can_cclookup R Dcclookup
      <- can_shift_right N3 B3 Dshr
      <- can_binary_to_int (s N1) V1 B1 Dprod Ditb3
      <- binary_int_type' Ditb3 Dprod Dcfp3
      <- cfp_weaken Dcfp3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupd
            Dpropagate.
-ub :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_sub Ddeloc2 Ddeloc1 Ddeloc)
      (ok_sub X2 Dupdate Doof2 Doof1 (leq_s leq_z))
      (step_sub Dadvance Dccupdate Dpropagate Dbi Ddc Dadd Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      <- can_product_nonzero N 7' N' Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B1 Dprod Ditb1
      <- can_int_to_binary' theend Dc2 B2 Dprod Ditb2
      <- can_add_wo' B2 B3 B1 CARRY OVERFLOW Dadd
      <- can_binary_to_int (s N) V3 B3 Dprod Dbi
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 Ddeloc Dupdate
            Dpropagate
      <- can_determine_conds B3 CARRY OVERFLOW CC Ddc
      <- can_ccupdate R' CC Dccupdate.
-ubptr :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_subptr Ddeloc2 Ddeloc1 Ddeloc)
      (ok_subptr X2 Dupdate Dsat Doof2 Doof1)
      (step_subptr Dadvance ccupdate_ Dpropagate Datomval' Dsum Drep Dbi
          Datomval Dresolve2 Dresolve1)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 (cfp_cbox Dbsub Dhtlookup Datomval)
      <- cf Dof2 (cfp_seteq Dbi' Dp Dtr)
      <- canonize Dtr (trc_numeq (calculate_number Drep') Dcalc)
      <- binary_size_resp Dp product_wordbits Dbi' Dbi Drep' Drep
      <- calculate_is_numeq Dcalc Dtr'
      <- boxsub_size Dhtpok Dhof Dhtlookup (boxsub_transr reflex lassoc Dbsub)
            (incleq _ _ _ Dtr' Dsat) Dsum
      <- can_atomval (pointer L P') asize_pointer Datomval'
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof
            (of_atom
                (aof_cpointer
                    (boxsub_transr lassoc reflex
                        (boxsub_shleft Dsum (incleq _ _ _ Dtr' Dsat)
                            (boxsub_transr reflex lassoc Dbsub))) Dhtlookup)
                Datomval')
            Ddeloc Dupdate Dpropagate.
-ubmptr :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_subptr Ddeloc2 Ddeloc1 Ddeloc)
      (ok_submptr X2 Dupdate Dsat Doof2 Doof1)
      (step_subptr Dadvance ccupdate_ Dpropagate Datomval' Dsum Drep Dbi
          Datomval Dresolve2 Dresolve1)
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 (cfp_cmbox Dsubrev Dbsub Dseg Dhtlookup Datomval)
      <- cf Dof2 (cfp_seteq Dbi' Dp Dtr)
      <- canonize Dtr (trc_numeq (calculate_number Drep') Dcalc)
      <- binary_size_resp Dp product_wordbits Dbi' Dbi Drep' Drep
      <- calculate_is_numeq Dcalc Dtr'
      <- boxsub_size Dhtpok Dhof Dhtlookup (boxsub_transr reflex lassoc Dbsub)
            (incleq _ _ _ Dtr' Dsat) Dsum
      <- can_atomval (pointer L P') asize_pointer Datomval'
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof
            (of_atom
                (aof_chpointer
                    (trans Dsubrev
                        (trans (trans (prod_sub reflex rassoc) lassoc)
                            (prod_sub rassoc reflex)))
                    (boxsub_transr lassoc reflex
                        (boxsub_shleft Dsum (incleq _ _ _ Dtr' Dsat)
                            (boxsub_transr reflex lassoc Dbsub))) Dseg Dhtlookup)
                Datomval')
            Ddeloc Dupdate Dpropagate.
-xor :
   progress* Dhtpok Dhof Drof Dadvance X1
      (delocalize_xor Ddeloc2 Ddeloc1 Ddeloc)
      (ok_xor X2 Dupdate Doof2 Doof1 (leq_s leq_z))
      (step_xor Dadvance Dccupdate Dpropagate Dbi Ddc Dxor Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      <- can_product_nonzero N 7' N' Dprod
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof1 Dc1
      <- cf Dof2 Dc2
      <- can_int_to_binary' theend Dc1 B1 Dprod Ditb1
      <- can_int_to_binary' theend Dc2 B2 Dprod Ditb2
      <- can_xor B1 B2 B3 Dxor
      <- can_binary_to_int (s N) V3 B3 Dprod Dbi
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- can_propagate Dhtpok Dhof hsubtype_refl Drof Dof3 Ddeloc Dupdate
            Dpropagate
      <- can_determine_conds B3 zero zero CC Ddc
      <- can_ccupdate R' CC Dccupdate.
-coerce :
   progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc (ok_coerce Dsub Dok) D
      <- rfile_subsume Drof Dsub Drof'
      <- progress* Dhtpok Dhof Drof' Dadvance Dclookup Ddeloc Dok D.
-unpack :
   progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
      (ok_unpack (\t:tp. \x:kof t K. \x1:sat t PR K. Dcodeok t x x1)
          (\t:tp. \x:kof t K. \x1:sat t PR K. Drtupdate t x x1) Drtlookup)
      Dstepsto
      <- can_rlookup Drof Drtlookup Drlookup Dof
      <- cf Dof (cfp_exists Dcfp Dsatarg (\t:tp. \x:kof t K. X2 t x))
      <- cfp_weaken Dcfp Dof'
      <- rupdate_nochange Drlookup Drupdate
      <- rof_reg Drof Drtpok
      <- sat_reg Dsatarg Dkofarg X1
      <- rlookup_size Drof Drlookup Dsize
      <- rupdate_pt Drof Dof' Dsize Drupdate (Drtupdate T' Dkofarg Dsatarg)
            Drof'
      <- progress* Dhtpok Dhof Drof' Dadvance Dclookup Ddeloc
            (Dcodeok T' Dkofarg Dsatarg) Dstepsto.
-assert :
   progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
      (ok_assert (\x:tr P. Dcodeok x) Doof) Dstepsto
      <- delocalize_unlocal Doof PC DdelocO
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof X2 Dof
      <- cf Dof (cfp_assert X1 Dtr)
      <- progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc (Dcodeok Dtr)
            Dstepsto.
-vcase1 :
   progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T' (in1 t K2). Dcodeok t x x1)
          Doof)
      Dstepsto
      <- delocalize_unlocal Doof PC DdelocO
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof X3 Dof
      <- of_reg Dof
            (kof_case (\t:tp. \x:kof t K2. X1 t x) (\t:tp. \x:kof t K1. X2 t x)
                Dkof)
      <- cf Dof Dc
      <- cfcasevoid1 Dkof Dc T' Dkof' Dequiv
      <- progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
            (Dcodeok T' Dkof' Dequiv) Dstepsto.
-vcase2 :
   progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
      (ok_vcase2 (\t:tp. \x:kof t K2. \x1:equiv T' (in2 t K1). Dcodeok t x x1)
          Doof)
      Dstepsto
      <- delocalize_unlocal Doof PC DdelocO
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof X3 Dof
      <- of_reg Dof
            (kof_case (\t:tp. \x:kof t K2. X1 t x) (\t:tp. \x:kof t K1. X2 t x)
                Dkof)
      <- cf Dof Dc
      <- cfcasevoid2 Dkof Dc T' Dkof' Dequiv
      <- progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
            (Dcodeok T' Dkof' Dequiv) Dstepsto.
progress_vacuous| :
   Pi S1:htp. Pi V1:val. Pi N:nat.
      cfp S1 V1 (void N)
         -> Pi M:machine. Pi IN:inst. Pi M':machine. perform M IN M' -> type.
-vacuous :
   progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc (ok_vacuous Doof)
      Dstepsto
      <- delocalize_unlocal Doof PC DdelocO
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof X1 Dof
      <- cf Dof Dc
      <- progress_vacuous| Dc (mach H Lalloc R PC) IN1 (mach H1 L1 R1 PC1)
            Dstepsto.
-letpair :
   progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T' (pair t1 t2). Dcodeok t1 x t2 x1 x2) Dkof) Dstepsto
      <- progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
            (Dcodeok (pi1 T') (kof_pi1 Dkof) (pi2 T') (kof_pi2 Dkof)
                (equiv_symm (kof_pair (kof_pi2 Dkof) (kof_pi1 Dkof)) equiv_peta))
            Dstepsto.
-letroll :
   progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
      (ok_letroll
          (\t:tp. \x:kof t (K (krec (\k:kind. K k))).
              \x1:equiv T' (roll (\k:kind. K k) t). Dcodeok t x x1) Dkof)
      Dstepsto
      <- progress* Dhtpok Dhof Drof Dadvance Dclookup Ddeloc
            (Dcodeok (unroll T') (kof_unroll Dkof)
                (equiv_symm (kof_roll (kof_unroll Dkof)) (equiv_reta Dkof)))
            Dstepsto.
progress_init :
   Pi S:htp. Pi L:loc. Pi V:val. Pi H:heap. Pi T':tp. Pi Lalloc:loc. Pi R:rfile.
      Pi G:rtp. Pi REG:reg. Pi Vptr:val. Pi PC:pc. Pi PC':pc. Pi I:instseq.
      Pi IN:inst. Pi IN':inst. Pi H':heap. Pi Lalloc':loc. Pi R':rfile.
      Pi PC'':pc.
      hof S (hcons L V H) (htpcons L T' S) -> htpok (htpcons L T' S) Lalloc
         -> segof L hseg -> rof S R G -> rlookup R REG Vptr
         -> atomval Vptr (pointer L 0') 0' -> advance (hcons L V H) PC PC'
         -> clookup (hcons L V H) PC' I -> delocalize_inst PC IN IN'
         -> initok S G REG T' (; IN' I)
         -> perform (mach (hcons L V H) Lalloc R PC) IN
               (mach H' Lalloc' R' PC'') -> type.
-mov :
   progress_init (hof_cons Dhof DofVnew Dsic) Dhtpok Dseg Drof Drlookup Datomval
      Dadvance X1 (delocalize_mov Ddeloc (delocalize_mdest delocalize_rco))
      (ok_init_mov X2 Dkof2' Doof Dkof2 Dkof1 Dsub)
      (step_mov Dadvance
          (propagate_mdest Dhupdate Dapp1' Dapp2' Dsize Dsep2 Dsep1 sum_z
              hlookup_hit Datomval (resolve_rco Drlookup))
          Dresolve)
      <- htpcons_hsubtype Dhtpok Dhsub
      <- htpok_cdr Dhtpok Dhtpok'
      <- can_resolve Dhtpok' (hof_cons Dhof DofVnew Dsic) Dhsub Drof Ddeloc Doof
            Dresolve Dof
      <- cf Dof Dc
      <- val_size Dc Dkof2' Dsize
      <- cf (subsume Dsub DofVnew) (cfp_prod (cfp_prod Dc3 Dc2 Dapp2) Dc1 Dapp1)
      <- val_size Dc1 Dkof1 Dsize1
      <- append_is_separate Dapp1 Dsize1 Dsep1
      <- val_size Dc2 Dkof2 Dsize2
      <- append_is_separate Dapp2 Dsize2 Dsep2
      <- can_append V V3 V23' Dapp2'
      <- can_append V1 V23' Vnew' Dapp1'
      <- hupdate_top H L Vnew Vnew' Dseg Dhupdate.
-pop :
   progress_init (hof_cons Dhof DofVnew Dsic) Dhtpok Dseg Drof Drlookup Datomval
      Dadvance X2 (delocalize_pop (delocalize_mdest delocalize_rco))
      (ok_init_pop X3 Dztupdate Dkof2' Dzsub Dztlookup Dkof2 Dkof1 Dsub)
      (step_pop Dadvance
          (propagate_mdest Dhupdate Dapp1' Dapp2' Dsize Dsep2 Dsep1 sum_z
              hlookup_hit Datomval (resolve_rco Drlookup'))
          Dzupdate Dsep Dzlookup)
      <- can_zlookup Drof Dztlookup Dzlookup Dzof X1
      <- cf (subsume Dzsub Dzof) (cfp_prod Dzc' Dc Dapp)
      <- val_size Dc Dkof2' Dsize
      <- append_is_separate Dapp Dsize Dsep
      <- cfp_weaken Dzc' Dzof'
      <- can_zupdate' Drof Dzof' Dztupdate Dzupdate Drof'
      <- zupdate_distinct Dzupdate Drlookup Drlookup'
      <- cf (subsume Dsub DofVnew) (cfp_prod (cfp_prod Dc3 Dc2 Dapp2) Dc1 Dapp1)
      <- val_size Dc1 Dkof1 Dsize1
      <- append_is_separate Dapp1 Dsize1 Dsep1
      <- val_size Dc2 Dkof2 Dsize2
      <- append_is_separate Dapp2 Dsize2 Dsep2
      <- can_append V V3 V23' Dapp2'
      <- can_append V1 V23' Vnew' Dapp1'
      <- hupdate_top H L Vnew Vnew' Dseg Dhupdate.
-coerce :
   progress_init (hof_cons Dhof Dof Dsic) (htpok_cons Dhtpok X1 Dlt) Dseg Drof
      Drlookup Datomval Dadvance Dclookup Ddeloc (ok_init_coerce Dinitok Dsub)
      Dperform
      <- of_reg (subsume Dsub Dof) Dkof
      <- progress_init (hof_cons Dhof (subsume Dsub Dof) Dsic)
            (htpok_cons Dhtpok Dkof Dlt) Dseg Drof Drlookup Datomval Dadvance
            Dclookup Ddeloc Dinitok Dperform.
-done :
   progress_init (hof_cons Dhof DofVnew Dsic) Dhtpok Dseg Drof Drlookup Datomval
      Dadvance Dclookup Ddeloc (ok_init_done Dcodeok Drtupdate) Dperform
      <- htpcons_hsubtype Dhtpok Dhsub
      <- hweaken_hof Dhsub (hof_cons Dhof DofVnew Dsic) Dhof'
      <- hweaken_rof Dhsub Drof Drof'
      <- rupdate_nochange Drlookup Drupdate
      <- of_reg DofVnew Dkof
      <- atom_size asize_pointer Datomval Dsize
      <- rupdate_pt Drof'
            (of_atom
                (aof_hpointer (trans runite lunite) (trans luniti runiti) 
kof_b0
                    Dkof sat_b0i Dseg htlookup_hit)
                Datomval)
            Dsize Drupdate Drtupdate Drof''
      <- hweaken_codeok Dhsub Dcodeok Dcodeok'
      <- progress* Dhtpok Dhof' Drof'' Dadvance Dclookup Ddeloc Dcodeok'
            Dperform.
progress : Pi M:machine. Pi M':machine. machineok M -> stepsto M M' -> type.
-td :
   progress (machineok_std Dhtpok Dcodeok Dclookup Drof Dhof)
      (stepsto_ Dperform Ddecode)
      <- codeok_nonnull Dcodeok Deq
      <- clookup_resp Deq Dclookup Dclookup'
      <- codeok_resp Deq Dcodeok Dcodeok'
      <- can_decode Dclookup' Ddecode Ddeloc
      <- can_advance Dclookup' Dadvance Dclookupnext
      <- progress* Dhtpok Dhof Drof Dadvance Dclookupnext Ddeloc Dcodeok'
            Dperform.
-init :
   progress
      (machineok_init Dhtpok Dinitok Dclookup Datomval Drlookup Drof Dseg Dhof)
      (stepsto_ Dperform Ddecode)
      <- initok_nonnull Dinitok Deq
      <- clookup_resp Deq Dclookup Dclookup'
      <- initok_resp Deq Dinitok Dinitok'
      <- can_decode Dclookup' Ddecode Ddeloc
      <- can_advance Dclookup' Dadvance Dclookupnext
      <- progress_init Dhof Dhtpok Dseg Drof Drlookup Datomval Dadvance
            Dclookupnext Ddeloc Dinitok' Dperform.
elim_union :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi R:rfile. Pi G:rtp. Pi REG:reg. Pi T1:tp.
      Pi T2:tp. Pi G1:rtp. Pi G2:rtp. Pi PC:pc. Pi O:operand. Pi O':operand.
      Pi Tproj:tp. Pi V:val. Pi Tact:tp. Pi N:nat.
      htpok S L1 -> hof S H S -> rof S R G -> oof S G (rco REG) (join T1 T2)
         -> sat (join T1 T2) rtw kt -> rtupdate G REG T1 G1
         -> rtupdate G REG T2 G2 -> delocalize PC O O' -> oof S G2 O' Tproj
         -> resolve H R PC O V -> of S V Tact
         -> subtype (meet Tproj Tact) (void N) -> rof S R G1 -> type.
elim_union| :
   Pi S:htp. Pi L1:loc. Pi H:heap. Pi R:rfile. Pi G:rtp. Pi REG:reg.
      Pi Vreg:val. Pi T1:tp. Pi T2:tp. Pi G1:rtp. Pi G2:rtp. Pi PC:pc.
      Pi O:operand. Pi O':operand. Pi Tproj:tp. Pi V:val. Pi Tact:tp. Pi N:nat.
      htpok S L1 -> hof S H S -> rof S R G -> rlookup R REG Vreg
         -> cfp S Vreg (join T1 T2) -> sat (join T1 T2) rtw kt
         -> rtupdate G REG T1 G1 -> rtupdate G REG T2 G2 -> delocalize PC O O'
         -> oof S G2 O' Tproj -> resolve H R PC O V -> of S V Tact
         -> subtype (meet Tproj Tact) (void N) -> rof S R G1 -> type.
- :
   elim_union Dhtpok Dhof Drof Doofreg Dkof Drtupdate1 Drtupdate2 Ddeloc Doof
      Dresolve Dofact Dsubcontra Drof'
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof delocalize_rco Doofreg
            (resolve_rco Drlookup) Dof
      <- cf Dof Dc
      <- elim_union| Dhtpok Dhof Drof Drlookup Dc Dkof Drtupdate1 Drtupdate2
            Ddeloc Doof Dresolve Dofact Dsubcontra Drof'.
-1 :
   elim_union| X2 X3 Drof Drlookup (cfp_join1 X4 Dc) Dsat Drtupdate1 X5 X6 X7 X8
      X9 X10 Drof'
      <- canonize_sat notvar_join Dsat (csat_joini X1 Dsat1)
      <- cfp_weaken Dc Dof
      <- rupdate_nochange Drlookup Drupdate
      <- val_size Dc Dsat1 Dsize
      <- rupdate_pt Drof Dof Dsize Drupdate Drtupdate1 Drof'.
elim_union|_2| :
   Pi S:htp. Pi V:val. Pi N:nat.
      cfp S V (void N) -> Pi R:rfile. Pi G:rtp. rof S R G -> type.
-2 :
   elim_union| Dhtpok Dhof Drof Drlookup (cfp_join2 X2 Dc) Dsat X3 Drtupdate2
      Ddeloc Doof Dresolve Dofact Dsubcontra Drof''
      <- canonize_sat notvar_join Dsat (csat_joini Dsat2 X1)
      <- cfp_weaken Dc Dof
      <- rupdate_nochange Drlookup Drupdate
      <- val_size Dc Dsat2 Dsize
      <- rupdate_pt Drof Dof Dsize Drupdate Drtupdate2 Drof'
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof' Ddeloc Doof Dresolve Dofproj
      <- cf (subsume Dsubcontra (meet_intro_val Dofact Dofproj)) Dimpossible
      <- elim_union|_2| Dimpossible R G1 Drof''.
preservation* :
   Pi S:htp. Pi L:loc. Pi H:heap. Pi R:rfile. Pi G:rtp. Pi IN':inst.
      Pi I:instseq. Pi PC:pc. Pi IN:inst. Pi H':heap. Pi L':loc. Pi R':rfile.
      Pi PC':pc.
      htpok S L -> hof S H S -> rof S R G -> codeok S G (; IN' I)
         -> perform (mach H L R PC) IN (mach H' L' R' PC')
         -> delocalize_inst PC IN IN' -> clookup H PC (; IN' I)
         -> machineok (mach H' L' R' PC') -> type.
-add :
   preservation* Dhtpok Dhof Drof (ok_add Dcodeok Dupdate Doof2 Doof1 X1)
      (step_add Dadvance Dccupdate Dpropagate Dbi Ddc Dadd Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      (delocalize_add Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-addptr :
   preservation* Dhtpok Dhof Drof (ok_addptr Dcodeok Dupdate Dsat Doof2 Doof1)
      (step_addptr Dadvance Dccupdate Dpropagate Datomval' Dsum Drep Dbi
          Datomval Dresolve2 Dresolve1)
      (delocalize_addptr Ddeloc2 Ddeloc1 Ddeloc) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cfcbox Dof1 Datomval Dhtlookup Dbsub
      <- cfseteq' Dof2 Dbi Drep Dcalc
      <- calculate_is_numeq Dcalc Dtr'
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof
            (of_atom
                (aof_cpointer
                    (boxsub_transr reflex rassoc
                        (boxsub_shright Dsum (incleq _ _ _ Dtr' Dsat)
                            (boxsub_transr rassoc reflex Dbsub))) Dhtlookup)
                Datomval')
            Ddeloc Dupdate Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-addmptr :
   preservation* Dhtpok Dhof Drof (ok_addmptr Dcodeok Dupdate Dsat Doof2 Doof1)
      (step_addptr Dadvance Dccupdate Dpropagate Datomval' Dsum Drep Dbi
          Datomval Dresolve2 Dresolve1)
      (delocalize_addptr Ddeloc2 Ddeloc1 Ddeloc) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cfcmbox Dof1 Datomval Dhtlookup Dbsub Dsubrev Dseg
      <- cfseteq' Dof2 Dbi Drep Dcalc
      <- calculate_is_numeq Dcalc Dtr'
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof
            (of_atom
                (aof_chpointer
                    (trans Dsubrev
                        (trans (trans (prod_sub lassoc reflex) rassoc)
                            (prod_sub reflex lassoc)))
                    (boxsub_transr reflex rassoc
                        (boxsub_shright Dsum (incleq _ _ _ Dtr' Dsat)
                            (boxsub_transr rassoc reflex Dbsub))) Dseg Dhtlookup)
                Datomval')
            Ddeloc Dupdate Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-addsptr :
   preservation* Dhtpok Dhof Drof (ok_addsptr Dcodeok Dupdate Dkof1 Doof)
      (step_addsptr Dadvance Dccupdate Dpropagate Datomval1 Dsum Datomval2
          Dresolve)
      (delocalize_addsptr DdelocE DdelocO) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof DdelocO Doof Dresolve Dof
      <- cfsptr Dof Datomval2 Dofinh Dsize
      <- cf Dofinh (cfp_prod Dc2 Dc1 Dappend)
      <- val_size Dc1 Dkof1 Dsize1
      <- size_append''' Dsize1 Dsize2 Dsize Dappend Dsum
      <- cfp_weaken Dc2 Dof2
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof
            (of_spointer Dsize2 Dof2 Datomval1) DdelocE Dupdate Dpropagate Dhof'
            Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-and :
   preservation* Dhtpok Dhof Drof (ok_and Dcodeok Dupdate Doof2 Doof1 X1)
      (step_and Dadvance Dccupdate Dpropagate Dbi Ddc Dadd Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      (delocalize_and Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-bz_take :
   preservation* Dhtpok Dhof Drof (ok_bz X1 Doof X2)
      (step_bz_take Djump X3 X4 X5) (delocalize_bz Ddeloc X6) X7 Dmok
      <- jump_pt Dhtpok Dhof Drof Drof Ddeloc Doof Djump Dmok.
-bz_skip :
   preservation* Dhtpok Dhof Drof (ok_bz Dcodeok X1 X2)
      (step_bz_skip Dadvance X3 X4 X5) (delocalize_bz X6 X7) Dclookup Dmok
      <- advance_pt Dhtpok Dhof Drof Dcodeok Dclookup Dadvance Dmok.
-call :
   preservation* Dhtpok Dhof Drof
      (ok_call Doof Dztupdate Dztlookup Drtpok Dcodeok)
      (step_call Djump Dzupdate Dapp Datomval Dzlookup Dadvance)
      (delocalize_call Ddeloc) Dclookup Dmok
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X1
      <- advance_pl Dclookup Dadvance Dclookup'
      <- clookup_tp Dhtpok Dhof Drtpok Dclookup' Dcodeok Datomval Dhsub Dhtpok'
            Dhof' Dof
      <- hweaken_hof Dhsub Dhof' Dhof''
      <- hweaken_rof Dhsub Drof Drof'
      <- hweaken_of Dhsub Dzof Dzof'
      <- zupdate_pt Drof' (of_append Dzof' Dof Dapp) Dztupdate Dzupdate Drof''
      <- hweaken_oof Dhsub Doof Doof'
      <- jump_pt Dhtpok' Dhof'' Drof'' Drof'' Ddeloc Doof' Djump Dmok.
-cmp :
   preservation* Dhtpok Dhof Drof (ok_cmp Dcodeok Doof2 Doof1 X1)
      (step_cmp Dadvance Dccupdate Ddc Dadd Ditb2 Ditb1 Dresolve2 Dresolve1
          Dprod)
      (delocalize_cmp Ddeloc2 Ddeloc1) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- ccupdate_pt Drof Dccupdate Drof'
      <- advance_pt Dhtpok Dhof Drof' Dcodeok Dclookup Dadvance Dmok.
-cmpjcc-take :
   preservation* Dhtpok Dhof Drof
      (ok_cmpjcc Dcodeok Doof3 Dsub2 Dsub1 Dct Doof12 Doof11 Drtupdate2
          Drtupdate1 Dkof Doofreg Doof2 Doof1 X4)
      (step_cmpjcc_take Djump Dsat Dccupdate Ddc Dadd Dbi2 Dbi1 Dresolve2
          Dresolve1 Dprod)
      (delocalize_cmpjcc Ddeloc3 Ddeloc2 Ddeloc1) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof2 (cfp_seteq Dbi2'' Dprod' Dtr')
      <- binary_size_resp4 Dprod' Dprod Dbi2'' Dbi2' Dtr' Dtr
      <- binary_int_fun Dbi2 Dbi2' Deq
      <- add_wo_resp Deq binary_eq_ binary_eq_ bit_eq_ bit_eq_ Dadd Dadd'
      <- add_wo_is_add Dadd' Dadd''
      <- cond_implication Ddc Dccupdate Dsat Dholds
      <- can_cond_tp N Cond (number B) Tsat' T3 Dct'
      <- cond_tp_eqv Dtr Dct Dct' X1 Dsubsat X2 X3
      <- cond_tp_member Dadd'' Dholds Dbi1 Dct' Dprod S Dof1
      <- elim_union Dhtpok Dhof Drof Doofreg Dkof Drtupdate1 Drtupdate2 Ddeloc1
            Doof12 Dresolve1 (subsume Dsubsat Dof1) Dsub2 Drof'
      <- ccupdate_pt Drof Dccupdate Drofcc
      <- ccupdate_pt Drof' Dccupdate Drofcc'
      <- jump_pt Dhtpok Dhof Drofcc' Drofcc Ddeloc3 Doof3 Djump Dmok.
-cmpjcc_skip :
   preservation* Dhtpok Dhof Drof
      (ok_cmpjcc Dcodeok Doof3 Dsub2 Dsub1 Dct Doof12 Doof11 Drtupdate2
          Drtupdate1 Dsat Doofreg Doof2 Doof1 X6)
      (step_cmpjcc_skip Dadvance (cond_unsat_ Dcondsat Dcondneg) Dccupdate Ddc
          Dadd Dbi2 Dbi1 Dresolve2 Dresolve1 Dprod)
      (delocalize_cmpjcc Ddeloc3 Ddeloc2 Ddeloc1) Dclookup Dmok
      <- canonize_sat notvar_join Dsat (csat_joini Dsat2 Dsat1)
      <- sat_reg Dsat1 Dkof1 X5
      <- sat_reg Dsat2 Dkof2 X4
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof2 (cfp_seteq Dbi2'' Dprod' Deqv')
      <- binary_size_resp4 Dprod' Dprod Dbi2'' Dbi2' Deqv' Deqv
      <- binary_int_fun Dbi2 Dbi2' Deq
      <- add_wo_resp Deq binary_eq_ binary_eq_ bit_eq_ bit_eq_ Dadd Dadd'
      <- add_wo_is_add Dadd' Dadd''
      <- cond_implication Ddc Dccupdate Dcondsat Dholds
      <- negate_cond_tp Dcondneg Dct Dct'
      <- can_cond_tp N Cond' (number B) Tunsat' T3 Dct''
      <- cond_tp_eqv Deqv Dct' Dct'' X1 Dsubunsat X2 X3
      <- cond_tp_member Dadd'' Dholds Dbi1 Dct'' Dprod S Dof1
      <- elim_union Dhtpok Dhof Drof
            (oof_subsume (join_elim (join_intro1 Dkof1) (join_intro2 Dkof2))
                Doofreg)
            (sat_joini Dsat1 Dsat2) Drtupdate2 Drtupdate1 Ddeloc1 Doof11
            Dresolve1 (subsume Dsubunsat Dof1) Dsub1 Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- advance_pt Dhtpok Dhof Drof'' Dcodeok Dclookup Dadvance Dmok.
-cmpjcc2_take :
   preservation* Dhtpok Dhof Drof
      (ok_cmpjcc2 Dcodeok Doof3 Drtupdate2 Drtupdate1 Dct Doof2 X5 Deq_wordsize)
      (step_cmpjcc_take Djump Dsat Dccupdate Ddc Dadd Dbi2 Dbi1 Dresolve2
          (resolve_rco Drlookup) Dprod)
      (delocalize_cmpjcc Ddeloc3 Ddeloc2 delocalize_rco) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof2 (cfp_seteq Dbi2'' Dprod' Dtr')
      <- binary_size_resp4 Dprod' Dprod Dbi2'' Dbi2' Dtr' Dtr
      <- binary_int_fun Dbi2 Dbi2' Deq
      <- add_wo_resp Deq binary_eq_ binary_eq_ bit_eq_ bit_eq_ Dadd Dadd'
      <- add_wo_is_add Dadd' Dadd''
      <- cond_implication Ddc Dccupdate Dsat Dholds
      <- can_cond_tp N Cond (number B) Tsat' T1 Dct'
      <- cond_tp_eqv Dtr Dct Dct' X2 Dsubsat X3 X4
      <- cond_tp_member Dadd'' Dholds Dbi1 Dct' Dprod S Dof1
      <- rupdate_nochange Drlookup Drupdate
      <- of_reg Dof2 (kof_seteq DkofBT)
      <- sat_cond_tp DkofBT Dct Dkofsat X1
      <- val_size' (subsume Dsubsat Dof1) Dkofsat Dsize'
      <- size_resp val_eq_ Deq_wordsize Dsize' Dsize
      <- rupdate_pt Drof (subsume Dsubsat Dof1) Dsize Drupdate Drtupdate1 Drof'
      <- ccupdate_pt Drof Dccupdate Drofcc
      <- ccupdate_pt Drof' Dccupdate Drofcc'
      <- jump_pt Dhtpok Dhof Drofcc' Drofcc Ddeloc3 Doof3 Djump Dmok.
-cmpjcc2_skip :
   preservation* Dhtpok Dhof Drof
      (ok_cmpjcc2 Dcodeok Doof3 Drtupdate2 Drtupdate1 Dct Doof2 X5 Deq_wordsize)
      (step_cmpjcc_skip Dadvance (cond_unsat_ Dsat Dcondneg) Dccupdate Ddc Dadd
          Dbi2 Dbi1 Dresolve2 (resolve_rco Drlookup) Dprod)
      (delocalize_cmpjcc Ddeloc3 Ddeloc2 delocalize_rco) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cf Dof2 (cfp_seteq Dbi2'' Dprod' Dtr')
      <- binary_size_resp4 Dprod' Dprod Dbi2'' Dbi2' Dtr' Dtr
      <- binary_int_fun Dbi2 Dbi2' Deq
      <- add_wo_resp Deq binary_eq_ binary_eq_ bit_eq_ bit_eq_ Dadd Dadd'
      <- add_wo_is_add Dadd' Dadd''
      <- cond_implication Ddc Dccupdate Dsat Dholds
      <- negate_cond_tp Dcondneg Dct Dct'
      <- can_cond_tp N Cond' (number B) Tunsat' T1 Dct''
      <- cond_tp_eqv Dtr Dct' Dct'' X2 Dsubunsat X3 X4
      <- cond_tp_member Dadd'' Dholds Dbi1 Dct'' Dprod S Dof1
      <- rupdate_nochange Drlookup Drupdate
      <- of_reg Dof2 (kof_seteq DkofBT)
      <- sat_cond_tp DkofBT Dct' Dkofunsat X1
      <- val_size' (subsume Dsubunsat Dof1) Dkofunsat Dsize'
      <- size_resp val_eq_ Deq_wordsize Dsize' Dsize
      <- rupdate_pt Drof (subsume Dsubunsat Dof1) Dsize Drupdate Drtupdate2
            Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- advance_pt Dhtpok Dhof Drof'' Dcodeok Dclookup Dadvance Dmok.
-fload :
   preservation* Dhtpok Dhof Drof (ok_fload Dcodeok X1)
      (step_fload Dadvance Dresolve) (delocalize_fload X2) Dclookup Dmok
      <- advance_pt Dhtpok Dhof Drof Dcodeok Dclookup Dadvance Dmok.
-fnop :
   preservation* Dhtpok Dhof Drof (ok_fnop Dcodeok) (step_fnop Dadvance)
      delocalize_fnop Dclookup Dmok
      <- advance_pt Dhtpok Dhof Drof Dcodeok Dclookup Dadvance Dmok.
-fstore :
   preservation* Dhtpok Dhof Drof (ok_fstore Dcodeok Dupdate Dtexp)
      (step_fstore Dadvance Dpropagate Dvexp) (delocalize_fstore Ddeloc)
      Dclookup Dmok
      <- exp_pt of_ns Dvexp Dtexp Dof
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof Ddeloc Dupdate
            Dpropagate Dhof' Drof'
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof' Dcodeok Dclookup' Dadvance' Dmok.
-fstflags :
   preservation* Dhtpok Dhof Drof (ok_fstflags Dcodeok)
      (step_fstflags Dadvance Dccupdate) delocalize_fstflags Dclookup Dmok
      <- ccupdate_pt Drof Dccupdate Drof'
      <- advance_pt Dhtpok Dhof Drof' Dcodeok Dclookup Dadvance Dmok.
-halt :
   preservation* Dhtpok Dhof Drof Dcodeok (step_halt X1) delocalize_halt
      Dclookup (machineok_std Dhtpok Dcodeok Dclookup Drof Dhof).
-jal :
   preservation* Dhtpok Dhof Drof (ok_jal Doof Dupdate Drtpok Dcodeok)
      (step_jal Djump Dpropagate Datomval Dadvance)
      (delocalize_jal DdelocO DdelocE) Dclookup Dmok
      <- advance_pl Dclookup Dadvance Dclookup'
      <- clookup_tp Dhtpok Dhof Drtpok Dclookup' Dcodeok Datomval Dhsub Dhtpok'
            Dhof' Dof
      <- hweaken_hof Dhsub Dhof' Dhof''
      <- hweaken_rof Dhsub Drof Drof'
      <- hweaken_oof Dhsub Doof Doof'
      <- hweaken_update Dhsub Dupdate Dupdate'
      <- propagate_pt Dhtpok' Dhof'' hsubtype_refl Drof' Dof DdelocE Dupdate'
            Dpropagate Dhof''' Drof''
      <- jump_pt Dhtpok' Dhof''' Drof'' Drof'' DdelocO Doof' Djump Dmok.
preservation_jbox_take| :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi T2:tp. Pi L:loc. Pi N:nat.
      cfp S V (join T1 T2) -> subtype T1 setlt_1024 -> atomval V (pointer L N) 
0'
         -> cfp S V T2 -> type.
- :
   preservation_jbox_take| (cfp_join1 X2 Dc) Dsub Datomval Dc''
      <- cfp_weaken Dc Dof
      <- cf (subsume Dsub Dof) Dc'
      <- cfp_setlt Dc' X1 Dbi' Dp
      <- binary_size_resp3 Dp product_wordbits Dbi' Dbi
      <- int_pointer_contra Datomval Dbi Dfalse
      <- false_implies_cfp Dfalse Dc''.
- : preservation_jbox_take| (cfp_join2 X1 Dc) X2 X3 Dc.
-jbox_take :
   preservation* Dhtpok Dhof Drof
      (ok_jbox Dcodeok Doof2 Drtupdate2 Drtupdate1 Dsub2 Dsub1 Doof1)
      (step_jbox_take Djump Datomval Dresolve)
      (delocalize_jbox Ddeloc delocalize_rco) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof delocalize_rco Doof1 Dresolve
            Dof
      <- cf Dof Dc
      <- preservation_jbox_take| Dc Dsub1 Datomval Dc'
      <- cfp_weaken Dc' Dof'
      <- resolve_rco_is_rlookup Dresolve Drlookup
      <- rupdate_nochange Drlookup Drupdate
      <- resolve_rco_size Drof Dresolve Dsize
      <- rupdate_pt Drof Dof' Dsize Drupdate Drtupdate2 Drof'
      <- jump_pt Dhtpok Dhof Drof' Drof Ddeloc Doof2 Djump Dmok.
preservation_jbox_skip| :
   Pi S:htp. Pi V:val. Pi T1:tp. Pi T2:tp. Pi T3:tp. Pi T4:tp. Pi N:nat.
      Pi End1:endian. Pi B:binary (s N).
      cfp S V (join T1 T2) -> subtype T2 (cbox T3 T4) -> binary_int End1 V B
         -> cfp S V T1 -> type.
- :
   preservation_jbox_skip| (cfp_join2 X3 Dc) Dsub Dbi Dc'
      <- cfp_weaken Dc Dof
      <- cf (subsume Dsub Dof) (cfp_cbox X1 X2 Datomval)
      <- int_pointer_contra Datomval Dbi Dfalse
      <- false_implies_cfp Dfalse Dc'.
- : preservation_jbox_skip| (cfp_join1 X1 Dc) X2 X3 Dc.
-jbox_skip :
   preservation* Dhtpok Dhof Drof
      (ok_jbox Dcodeok Doof2 Drtupdate2 Drtupdate1 Dsub2 Dsub1 Doof1)
      (step_jbox_skip Dadvance X1 X2 Dbi Dresolve)
      (delocalize_jbox Ddeloc delocalize_rco) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof delocalize_rco Doof1 Dresolve
            Dof
      <- cf Dof Dc
      <- preservation_jbox_skip| Dc Dsub2 Dbi Dc'
      <- cfp_weaken Dc' Dof'
      <- resolve_rco_is_rlookup Dresolve Drlookup
      <- rupdate_nochange Drlookup Drupdate
      <- resolve_rco_size Drof Dresolve Dsize
      <- rupdate_pt Drof Dof' Dsize Drupdate Drtupdate1 Drof'
      <- advance_pt Dhtpok Dhof Drof' Dcodeok Dclookup Dadvance Dmok.
-jcc_take :
   preservation* Dhtpok Dhof Drof (ok_jcc X1 Doof) (step_jcc_take Djump X2)
      (delocalize_jcc Ddeloc) X3 Dmok
      <- jump_pt Dhtpok Dhof Drof Drof Ddeloc Doof Djump Dmok.
-jcc_skip :
   preservation* Dhtpok Dhof Drof (ok_jcc Dcodeok X1)
      (step_jcc_skip Dadvance X2) (delocalize_jcc X3) Dclookup Dmok
      <- advance_pt Dhtpok Dhof Drof Dcodeok Dclookup Dadvance Dmok.
-jmp :
   preservation* Dhtpok Dhof Drof (ok_jmp Doof) (step_jmp Djump)
      (delocalize_jmp Ddeloc) X1 Dmok
      <- jump_pt Dhtpok Dhof Drof Drof Ddeloc Doof Djump Dmok.
-jnbox_take :
   preservation* Dhtpok Dhof Drof
      (ok_jnbox Dcodeok Doof2 Drtupdate2 Drtupdate1 Dsub2 Dsub1 Doof1)
      (step_jnbox_take Djump X1 X2 Dbi Dresolve)
      (delocalize_jnbox Ddeloc delocalize_rco) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof delocalize_rco Doof1 Dresolve
            Dof
      <- cf Dof Dc
      <- preservation_jbox_skip| Dc Dsub2 Dbi Dc'
      <- cfp_weaken Dc' Dof'
      <- resolve_rco_is_rlookup Dresolve Drlookup
      <- rupdate_nochange Drlookup Drupdate
      <- resolve_rco_size Drof Dresolve Dsize
      <- rupdate_pt Drof Dof' Dsize Drupdate Drtupdate1 Drof'
      <- jump_pt Dhtpok Dhof Drof' Drof Ddeloc Doof2 Djump Dmok.
-jnbox_skip :
   preservation* Dhtpok Dhof Drof
      (ok_jnbox Dcodeok Doof2 Drtupdate2 Drtupdate1 Dsub2 Dsub1 Doof1)
      (step_jnbox_skip Dadvance Datomval Dresolve)
      (delocalize_jnbox Ddeloc delocalize_rco) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof delocalize_rco Doof1 Dresolve
            Dof
      <- cf Dof Dc
      <- preservation_jbox_take| Dc Dsub1 Datomval Dc'
      <- cfp_weaken Dc' Dof'
      <- resolve_rco_is_rlookup Dresolve Drlookup
      <- rupdate_nochange Drlookup Drupdate
      <- resolve_rco_size Drof Dresolve Dsize
      <- rupdate_pt Drof Dof' Dsize Drupdate Drtupdate2 Drof'
      <- advance_pt Dhtpok Dhof Drof' Dcodeok Dclookup Dadvance Dmok.
-malloc :
   preservation* Dhtpok Dhof Drof
      (ok_malloc Dinitok Drtupdate Dte Dlt Drep' Doof Doof')
      (step_malloc Dadvance (propagate_rdest Drupdate Dsize) Datomval hextend_
          Dve Dnextloc Dlt' Drep Dbi Dresolve (collect_ Dhcoll Drunr Dhunr Dlwf)
          Dgoodheap X1 X2)
      (delocalize_malloc Ddeloc delocalize_rdest Ddeloc1) Dclookup
      (machineok_init Dhtpok' DinitokNew Dclookup'' Datomval Drlookup Drof' Dseg
          Dhof')
      <- simple_hsegt Dlwf Dhof DlwfT
      <- can_htp_collect Dhcoll Dhof Dcoll
      <- htp_collect_ok Dcoll Dhtpok DhtpokNew
      <- hof_collect_ok DlwfT Dhunr Dhcoll Dcoll Dcoll Dhof DhofNew
      <- rof_collect_ok DlwfT Drunr Dcoll Drof DrofNew
      <- init_collect_ok Dlwf Dcoll Dinitok DinitokNew
      <- oof_collect_ok Dlwf Dcoll Doof DoofNew
      <- collect_nextloc Dhcoll Dgoodheap Dnextloc DnextlocNew
      <- collect_advance Dlwf Dhcoll Dclookup Dadvance DadvanceNew
      <- clookup_collect_ok Dlwf Dhcoll Dclookup DclookupNew
      <- resolve_pt DhtpokNew DhofNew hsubtype_refl DrofNew Ddeloc DoofNew
            Dresolve Dofn
      <- cfseteqnum Dofn product_wordbits Dbi'
      <- binary_int_fun Dbi' Dbi Dbineq
      <- represents_resp nat_eq_ Dbineq Drep' Drep''
      <- represents_fun1 Drep'' Drep Dnateq
      <- tp_exp_resp tp_eq_ Dnateq tp_eq_ Dte Dte'
      <- exp_pt of_ns Dve Dte' Dof
      <- ns_membership' Dsize Snew Dc'
      <- cfp_weaken Dc' Dof'
      <- rupdate_pt DrofNew Dof' Dsize Drupdate Drtupdate Drof'
      <- rupdate_rlookup Drlookup Drupdate
      <- nextloc_is_newloc DnextlocNew Dnewloc
      <- hextend_pt DhtpokNew DhofNew Dof DnextlocNew Dhtpok' Dhof' Dseg
      <- pc_hextend DclookupNew DadvanceNew Dnewloc hextend_ Dclookup' Dadvance'
      <- advance_pl Dclookup' Dadvance' Dclookup''.
preservation_mallocarr| :
   Pi S:htp. Pi L:loc. Pi V:val. Pi H:heap. Pi T':tp. Pi V':val. Pi T':tp.
      hof S (hcons L V H) (htpcons L T' S) -> segof L hseg -> of S V' T'
         -> hof S (hcons L V' H) (htpcons L T' S) -> type.
- :
   preservation_mallocarr| (hof_cons Dhof X1 (sic_hseg segof_hseg)) segof_hseg
      Dof (hof_cons Dhof Dof (sic_hseg segof_hseg)).
preservation_mallocarr|| :
   Pi BT:tp. Pi N:nat. Pi B':binary N. Pi B:binary N.
      tr (pnumeq BT (number B')) -> binary_eq B' B -> tr (pnumeq BT (number B))
         -> type.
- : preservation_mallocarr|| D binary_eq_ D.
-mov :
   preservation* Dhtpok Dhof Drof (ok_mov Dcodeok Dupdate Doof)
      (step_mov Dadvance Dpropagate Dresolve) (delocalize_mov DdelocO DdelocE)
      Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof DdelocO Doof Dresolve Dof
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof' Dcodeok Dclookup' Dadvance' Dmok.
-nop :
   preservation* Dhtpok Dhof Drof (ok_nop Dcodeok) (step_nop Dadvance)
      delocalize_nop Dclookup Dmok
      <- advance_pt Dhtpok Dhof Drof Dcodeok Dclookup Dadvance Dmok.
-or :
   preservation* Dhtpok Dhof Drof (ok_or Dcodeok Dupdate Doof2 Doof1 X1)
      (step_or Dadvance Dccupdate Dpropagate Dbi Ddc Dor Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      (delocalize_or Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-pop :
   preservation* Dhtpok Dhof Drof
      (ok_pop Dcodeok Dupdate Dztupdate Dkof Dsub Dztlookup)
      (step_pop Dadvance Dpropagate Dzupdate Dsep Dzlookup)
      (delocalize_pop Ddeloc) Dclookup Dmok
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X1
      <- cfprod (subsume Dsub Dzof) Dkof Dsep Dc Dzc
      <- cfp_weaken Dzc Dzof'
      <- zupdate_pt Drof Dzof' Dztupdate Dzupdate Drof'
      <- cfp_weaken Dc Dof
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof' Dof Ddeloc Dupdate
            Dpropagate Dhof' Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-push :
   preservation* Dhtpok Dhof Drof
      (ok_push Dcodeok Dztupdate Dztlookup Dkof Doof)
      (step_push Dadvance Dzupdate Dapp Dzlookup Dresolve)
      (delocalize_push Ddeloc) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc Doof Dresolve Dof
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X1
      <- zupdate_pt Drof (of_append Dzof Dof Dapp) Dztupdate Dzupdate Drof'
      <- advance_pt Dhtpok Dhof Drof' Dcodeok Dclookup Dadvance Dmok.
-pushrel :
   preservation* Dhtpok Dhof Drof
      (ok_pushrel Dcodeok Dztupdate Dztlookup Dkof Doof)
      (step_pushrel Dadvance Dccupdate Dzupdate Dapp Dzlookup Dresolve)
      (delocalize_pushrel Ddeloc) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc Doof Dresolve Dof
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X1
      <- zupdate_pt Drof (of_append Dzof Dof Dapp) Dztupdate Dzupdate Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- advance_pt Dhtpok Dhof Drof'' Dcodeok Dclookup Dadvance Dmok.
-ret :
   preservation* Dhtpok Dhof Drof (ok_ret Dkof Dsub Dztupdate Dztlookup)
      (step_ret Datomval Dzupdate Dsep Dzlookup) delocalize_ret X4
      (machineok_std Dhtpok Dcodeok (clookup_ Dcodeval Dsep' Dhlookup Dseg)
          Drof' Dhof)
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof Dzok
      <- subtype_reg1 Dzok (kof_prod X3 (kof_arrow Drtpok)) Dsub
      <- cfprod (subsume Dsub Dzof) (sat_arrowi Drtpok) Dsep Dc Dcz
      <- cfp_weaken Dc Dof
      <- cfp_weaken Dcz Dzof'
      <- zupdate_pt Drof Dzof' Dztupdate Dzupdate Drof'
      <- cfarrow Dof Datomval Dhtlookup Dsub' Dkof' X2 Dseg
      <- can_hlookup Dhtpok Dhof Dhtlookup Dhlookup Dof12
      <- cf (subsume Dsub' Dof12)
            (cfp_prod (cfp_code Dcodeok X1 Dcodeval) Dc1 Dapp)
      <- val_size Dc1 Dkof' Dsize
      <- append_is_separate Dapp Dsize Dsep'.
-rcl :
   preservation* Dhtpok Dhof Drof (ok_rcl Dcodeok Dupdate Doof2 Doof1 Dleq)
      (step_rcl Dadvance Dccupdate Dpropagate Ditb3 Drol Dcclookup Dlt Drep
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      (delocalize_rcl Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Ditb3 Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-rcr :
   preservation* Dhtpok Dhof Drof (ok_rcr Dcodeok Dupdate Doof2 Doof1 Dleq)
      (step_rcr Dadvance Dccupdate Dpropagate Ditb3 Drol Dcclookup Dlt Drep
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      (delocalize_rcr Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Ditb3 Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-rol :
   preservation* Dhtpok Dhof Drof (ok_rol Dcodeok Dupdate Doof2 Doof1 Dleq)
      (step_rol Dadvance Dccupdate Dpropagate Ditb3 Drol Dcclookup Dlt Drep
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      (delocalize_rol Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Ditb3 Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-ror :
   preservation* Dhtpok Dhof Drof (ok_ror Dcodeok Dupdate Doof2 Doof1 Dleq)
      (step_ror Dadvance Dccupdate Dpropagate Ditb3 Drol Dcclookup Dlt Drep
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      (delocalize_ror Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Ditb3 Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-alloc :
   preservation* Dhtpok Dhof Drof (ok_salloc Dcodeok Dztupdate Dte Dztlookup)
      (step_salloc Dadvance Dccupdate Dzupdate Dapp Dve Dzlookup)
      delocalize_salloc Dclookup Dmok
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X1
      <- exp_pt of_ns Dve Dte Dof
      <- zupdate_pt Drof (of_append Dzof Dof Dapp) Dztupdate Dzupdate Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- advance_pt Dhtpok Dhof Drof'' Dcodeok Dclookup Dadvance Dmok.
-free :
   preservation* Dhtpok Dhof Drof
      (ok_sfree Dcodeok Dztupdate Dkof1 Dsub Dztlookup)
      (step_sfree Dadvance Dccupdate Dzupdate Dsep Dzlookup) delocalize_sfree
      Dclookup Dmok
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X2
      <- cfprod (subsume Dsub Dzof) Dkof1 Dsep X1 Dc
      <- cfp_weaken Dc Dzof'
      <- zupdate_pt Drof Dzof' Dztupdate Dzupdate Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- advance_pt Dhtpok Dhof Drof'' Dcodeok Dclookup Dadvance Dmok.
-hl :
   preservation* Dhtpok Dhof Drof (ok_shl Dcodeok Dupdate Doof2 Doof1 Dleq)
      (step_shl Dadvance Dccupdate Dpropagate Ditb3 Dshl Dcclookup Dlt Drep
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      (delocalize_shl Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Ditb3 Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-ar :
   preservation* Dhtpok Dhof Drof (ok_sar Dcodeok Dupdate Doof2 Doof1 Dleq)
      (step_sar Dadvance Dccupdate Dpropagate Ditb3 Dsar Dcclookup Dlt Drep
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      (delocalize_sar Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Ditb3 Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-hr :
   preservation* Dhtpok Dhof Drof (ok_shr Dcodeok Dupdate Doof2 Doof1 Dleq)
      (step_shr Dadvance Dccupdate Dpropagate Ditb3 Dshr Dcclookup Dlt Drep
          Ditb2 Ditb1 Dresolve2 Dresolve1 Dprod)
      (delocalize_shr Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Ditb3 Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-ub :
   preservation* Dhtpok Dhof Drof (ok_sub Dcodeok Dupdate Doof2 Doof1 X1)
      (step_sub Dadvance Dccupdate Dpropagate Dbi Ddc Dadd Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      (delocalize_sub Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-ubptr :
   preservation* Dhtpok Dhof Drof (ok_subptr Dcodeok Dupdate Dsat Doof2 Doof1)
      (step_subptr Dadvance Dccupdate Dpropagate Datomval' Dsum Drep Dbi
          Datomval Dresolve2 Dresolve1)
      (delocalize_subptr Ddeloc2 Ddeloc1 Ddeloc) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cfcbox Dof1 Datomval Dhtlookup Dbsub
      <- cfseteq' Dof2 Dbi Drep Dcalc
      <- calculate_is_numeq Dcalc Dtr'
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof
            (of_atom
                (aof_cpointer
                    (boxsub_transr lassoc reflex
                        (boxsub_shleft Dsum (incleq _ _ _ Dtr' Dsat)
                            (boxsub_transr reflex lassoc Dbsub))) Dhtlookup)
                Datomval')
            Ddeloc Dupdate Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-ubmptr :
   preservation* Dhtpok Dhof Drof (ok_submptr Dcodeok Dupdate Dsat Doof2 Doof1)
      (step_subptr Dadvance Dccupdate Dpropagate Datomval' Dsum Drep Dbi
          Datomval Dresolve2 Dresolve1)
      (delocalize_subptr Ddeloc2 Ddeloc1 Ddeloc) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- cfcmbox Dof1 Datomval Dhtlookup Dbsub Dsubrev Dseg
      <- cfseteq' Dof2 Dbi Drep Dcalc
      <- calculate_is_numeq Dcalc Dtr'
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof
            (of_atom
                (aof_chpointer
                    (trans Dsubrev
                        (trans (trans (prod_sub reflex rassoc) lassoc)
                            (prod_sub rassoc reflex)))
                    (boxsub_transr lassoc reflex
                        (boxsub_shleft Dsum (incleq _ _ _ Dtr' Dsat)
                            (boxsub_transr reflex lassoc Dbsub))) Dseg Dhtlookup)
                Datomval')
            Ddeloc Dupdate Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-xor :
   preservation* Dhtpok Dhof Drof (ok_xor Dcodeok Dupdate Doof2 Doof1 X1)
      (step_xor Dadvance Dccupdate Dpropagate Dbi Ddc Dxor Ditb2 Ditb1 Dresolve2
          Dresolve1 Dprod)
      (delocalize_xor Ddeloc2 Ddeloc1 DdelocE) Dclookup Dmok
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc1 Doof1 Dresolve1 Dof1
      <- resolve_pt Dhtpok Dhof hsubtype_refl Drof Ddeloc2 Doof2 Dresolve2 Dof2
      <- binary_int_type' Dbi Dprod Dc3
      <- cfp_weaken Dc3 Dof3
      <- propagate_pt Dhtpok Dhof hsubtype_refl Drof Dof3 DdelocE Dupdate
            Dpropagate Dhof' Drof'
      <- ccupdate_pt Drof' Dccupdate Drof''
      <- pc_propagate Dclookup Dadvance Dpropagate Dclookup' Dadvance'
      <- advance_pt Dhtpok Dhof' Drof'' Dcodeok Dclookup' Dadvance' Dmok.
-coerce :
   preservation* Dhtpok Dhof Drof (ok_coerce Dsub Dcodeok) Dperform Ddeloc
      Dclookup Dmachineok
      <- rfile_subsume Drof Dsub Drof'
      <- preservation* Dhtpok Dhof Drof' Dcodeok Dperform Ddeloc Dclookup
            Dmachineok.
-unpack :
   preservation* Dhtpok Dhof Drof
      (ok_unpack (\t:tp. \x:kof t K. \x1:sat t PR K. Dcodeok t x x1)
          (\t:tp. \x:kof t K. \x1:sat t PR K. Drtupdate t x x1) Drtlookup)
      Dperform Ddeloc Dclookup Dmachineok
      <- can_rlookup Drof Drtlookup Drlookup Dof
      <- cf Dof (cfp_exists Dcfp Dsatarg (\t:tp. \x:kof t K. X2 t x))
      <- cfp_weaken Dcfp Dof'
      <- rupdate_nochange Drlookup Drupdate
      <- rof_reg Drof Drtpok
      <- sat_reg Dsatarg Dkofarg X1
      <- rlookup_size Drof Drlookup Dsize
      <- rupdate_pt Drof Dof' Dsize Drupdate (Drtupdate T' Dkofarg Dsatarg)
            Drof'
      <- preservation* Dhtpok Dhof Drof' (Dcodeok T' Dkofarg Dsatarg) Dperform
            Ddeloc Dclookup Dmachineok.
-assert :
   preservation* Dhtpok Dhof Drof (ok_assert (\x:tr P. Dcodeok x) Doof) Dperform
      Ddeloc Dclookup Dmachineok
      <- delocalize_unlocal Doof PC DdelocO
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof X2 Dof
      <- cf Dof (cfp_assert X1 Dtr)
      <- preservation* Dhtpok Dhof Drof (Dcodeok Dtr) Dperform Ddeloc Dclookup
            Dmachineok.
-vcase1 :
   preservation* Dhtpok Dhof Drof
      (ok_vcase1 (\t:tp. \x:kof t K1. \x1:equiv T' (in1 t K2). Dcodeok t x x1)
          Doof)
      Dperform Ddeloc Dclookup Dmachineok
      <- delocalize_unlocal Doof PC DdelocO
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof X3 Dof
      <- of_reg Dof
            (kof_case (\t:tp. \x:kof t K2. X1 t x) (\t:tp. \x:kof t K1. X2 t x)
                Dkof)
      <- cf Dof Dc
      <- cfcasevoid1 Dkof Dc T' Dkof' Dequiv
      <- preservation* Dhtpok Dhof Drof (Dcodeok T' Dkof' Dequiv) Dperform
            Ddeloc Dclookup Dmachineok.
-vcase2 :
   preservation* Dhtpok Dhof Drof
      (ok_vcase2 (\t:tp. \x:kof t K2. \x1:equiv T' (in2 t K1). Dcodeok t x x1)
          Doof)
      Dperform Ddeloc Dclookup Dmachineok
      <- delocalize_unlocal Doof PC DdelocO
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof X3 Dof
      <- of_reg Dof
            (kof_case (\t:tp. \x:kof t K2. X1 t x) (\t:tp. \x:kof t K1. X2 t x)
                Dkof)
      <- cf Dof Dc
      <- cfcasevoid2 Dkof Dc T' Dkof' Dequiv
      <- preservation* Dhtpok Dhof Drof (Dcodeok T' Dkof' Dequiv) Dperform
            Ddeloc Dclookup Dmachineok.
preservation_vacuous| :
   Pi S1:htp. Pi V1:val. Pi N1:nat.
      cfp S1 V1 (void N1) -> Pi M:machine. machineok M -> type.
-vacuous :
   preservation* Dhtpok Dhof Drof (ok_vacuous Doof) Dperform Ddeloc Dclookup
      Dmachineok
      <- delocalize_unlocal Doof PC DdelocO
      <- can_resolve Dhtpok Dhof hsubtype_refl Drof DdelocO Doof X1 Dof
      <- cf Dof Dc
      <- preservation_vacuous| Dc (mach H1 L1 R1 PC1) Dmachineok.
-letpair :
   preservation* Dhtpok Dhof Drof
      (ok_letpair
          (\t1:tp. \x:kof t1 K1. \t2:tp. \x1:kof t2 K2.
              \x2:equiv T' (pair t1 t2). Dcodeok t1 x t2 x1 x2) Dkof) Dperform
      Ddeloc Dclookup Dmachineok
      <- preservation* Dhtpok Dhof Drof
            (Dcodeok (pi1 T') (kof_pi1 Dkof) (pi2 T') (kof_pi2 Dkof)
                (equiv_symm (kof_pair (kof_pi2 Dkof) (kof_pi1 Dkof)) equiv_peta))
            Dperform Ddeloc Dclookup Dmachineok.
-letroll :
   preservation* Dhtpok Dhof Drof
      (ok_letroll
          (\t:tp. \x:kof t (K (krec (\k:kind. K k))).
              \x1:equiv T' (roll (\k:kind. K k) t). Dcodeok t x x1) Dkof)
      Dperform Ddeloc Dclookup Dmachineok
      <- preservation* Dhtpok Dhof Drof
            (Dcodeok (unroll T') (kof_unroll Dkof)
                (equiv_symm (kof_roll (kof_unroll Dkof)) (equiv_reta Dkof)))
            Dperform Ddeloc Dclookup Dmachineok.
preservation_init :
   Pi S:htp. Pi L:loc. Pi V:val. Pi H:heap. Pi T':tp. Pi Lalloc:loc. Pi R:rfile.
      Pi G:rtp. Pi REG:reg. Pi Vptr:val. Pi PC:pc. Pi IN:inst. Pi H':heap.
      Pi Lalloc':loc. Pi R':rfile. Pi PC':pc. Pi IN':inst. Pi I:instseq.
      hof S (hcons L V H) (htpcons L T' S) -> htpok (htpcons L T' S) Lalloc
         -> rof S R G -> rlookup R REG Vptr -> atomval Vptr (pointer L 0') 0'
         -> perform (mach (hcons L V H) Lalloc R PC) IN (mach H' Lalloc' R' PC')
         -> delocalize_inst PC IN IN' -> initok S G REG T' (; IN' I)
         -> clookup (hcons L V H) PC (; IN' I) -> segof L hseg
         -> machineok (mach H' Lalloc' R' PC') -> type.
preservation_init_mov| :
   Pi L':loc. Pi P:nat. Pi L:loc. Pi H:heap. Pi V':val. Pi V:val.
      aval_eq (pointer L' P) (pointer L 0') -> hlookup H L' V' -> hlookup H L V
         -> val_eq V' V -> nat_eq P 0' -> type.
- :
   preservation_init_mov| aval_eq_ Dlook' Dlook D nat_eq_
      <- hlookup_fun Dlook' Dlook D.
preservation_init_mov|| :
   Pi L':loc. Pi P:nat. Pi L:loc. Pi V:val. Pi H:heap. Pi V':val. Pi H':heap.
      aval_eq (pointer L' P) (pointer L 0') -> hupdate (hcons L V H) L' V' H'
         -> heap_eq (hcons L V' H) H' -> type.
preservation_init_mov||_miss| :
   false -> Pi H:heap. Pi H':heap. heap_eq H H' -> type.
-hit : preservation_init_mov|| aval_eq_ (hupdate_hit X1) heap_eq_.
-miss :
   preservation_init_mov|| aval_eq_ (hupdate_miss X1 Dlt) D
      <- loc_lt_contradict Dlt Dfalse
      <- preservation_init_mov||_miss| Dfalse (hcons N V1 H1) (hcons N V2 H2) D.
-mov :
   preservation_init (hof_cons Dhof DofVnew (sic_hseg X5)) Dhtpok Drof Drlookup
      Datomval
      (step_mov Dadvance
          (propagate_mdest Dhupdate Dapp1' Dapp2' Dsize' Dsep2 Dsep1 Dsum
              Dhlookup Datomval' (resolve_rco Drlookup'))
          Dresolve)
      (delocalize_mov Ddeloc (delocalize_mdest delocalize_rco))
      (ok_init_mov Dinitok Dsat2' Doof Dsat2 Dsat1 Dsub) Dclookup Dseg Dmok
      <- sat_reg Dsat1 Dkof1 X4
      <- sat_reg Dsat2 Dkof2 X3
      <- sat_reg Dsat2' Dkof2' X2
      <- rlookup_fun Drlookup' Drlookup Dveq
      <- atomval_resp Dveq aval_eq_ Datomval' Datomval''
      <- atomval_fun Datomval'' Datomval Daeq
      <- preservation_init_mov| Daeq Dhlookup hlookup_hit Dveq' Dnateq
      <- sum_resp Dnateq nat_eq_ nat_eq_ Dsum Dsum'
      <- sum_fun3 Dsum' sum_z Dnateq'
      <- separate_resp Dnateq' Dveq' val_eq_ val_eq_ Dsep1 Dsep1'
      <- cfprod (subsume Dsub DofVnew) Dsat1 Dsep1' Dc1 Dc23
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc23 Dof23
      <- cfprod Dof23 Dsat2 Dsep2 X1 Dc3
      <- cfp_weaken Dc3 Dof3
      <- htpcons_hsubtype Dhtpok Dhsub
      <- htpok_cdr Dhtpok Dhtpok'
      <- resolve_pt Dhtpok' (hof_cons Dhof DofVnew (sic_hseg Dseg)) Dhsub Drof
            Ddeloc Doof Dresolve Dof
      <- of_reg Dof3 Dkof3
      <- htpok_replace Dhtpok (kof_prod (kof_prod Dkof3 Dkof2') Dkof1) Dhtpok''
      <- preservation_init_mov|| Daeq Dhupdate Dheq
      <- hupdate_resp' Dheq Dhupdate' Dhupdate
      <- pc_hupdate Dclookup Dadvance Dhupdate' Dclookup' Dadvance'
      <- advance_pl Dclookup' Dadvance' Dclookup''
      <- machineok_resp Dheq
            (machineok_init Dhtpok'' Dinitok Dclookup'' Datomval Drlookup Drof
                Dseg
                (hof_cons Dhof
                    (of_append (of_append Dof3 Dof Dapp2') Dof1 Dapp1')
                    (sic_hseg Dseg)))
            Dmok.
-pop :
   preservation_init (hof_cons Dhof DofVnew (sic_hseg X6)) Dhtpok Drof Drlookup
      Datomval
      (step_pop Dadvance
          (propagate_mdest Dhupdate Dapp1' Dapp2' Dsize' Dsep2 Dsep1 Dsum
              Dhlookup Datomval' (resolve_rco Drlookup'))
          Dzupdate Dsep Dzlookup)
      (delocalize_pop (delocalize_mdest delocalize_rco))
      (ok_init_pop Dinitok Dztupdate Dsat2' Dzsub Dztlookup Dsat2 Dsat1 Dsub)
      Dclookup Dseg Dmok
      <- sat_reg Dsat1 Dkof1 X5
      <- sat_reg Dsat2 Dkof2 X4
      <- sat_reg Dsat2' Dkof2' X3
      <- zlookup_pt Drof Dztlookup Dzlookup Dzof X2
      <- cfprod (subsume Dzsub Dzof) Dsat2' Dsep Dc Dzc'
      <- cfp_weaken Dc Dof
      <- cfp_weaken Dzc' Dzof'
      <- zupdate_pt Drof Dzof' Dztupdate Dzupdate Drof'
      <- zupdate_distinct Dzupdate Drlookup Drlookup''
      <- rlookup_fun Drlookup' Drlookup'' Dveq
      <- atomval_resp Dveq aval_eq_ Datomval' Datomval''
      <- atomval_fun Datomval'' Datomval Daeq
      <- preservation_init_mov| Daeq Dhlookup hlookup_hit Dveq' Dnateq
      <- sum_resp Dnateq nat_eq_ nat_eq_ Dsum Dsum'
      <- sum_fun3 Dsum' sum_z Dnateq'
      <- separate_resp Dnateq' Dveq' val_eq_ val_eq_ Dsep1 Dsep1'
      <- cfprod (subsume Dsub DofVnew) Dsat1 Dsep1' Dc1 Dc23
      <- cfp_weaken Dc1 Dof1
      <- cfp_weaken Dc23 Dof23
      <- cfprod Dof23 Dsat2 Dsep2 X1 Dc3
      <- cfp_weaken Dc3 Dof3
      <- of_reg Dof3 Dkof3
      <- htpok_replace Dhtpok (kof_prod (kof_prod Dkof3 Dkof2') Dkof1) Dhtpok''
      <- preservation_init_mov|| Daeq Dhupdate Dheq
      <- hupdate_resp' Dheq Dhupdate' Dhupdate
      <- pc_hupdate Dclookup Dadvance Dhupdate' Dclookup' Dadvance'
      <- advance_pl Dclookup' Dadvance' Dclookup''
      <- machineok_resp Dheq
            (machineok_init Dhtpok'' Dinitok Dclookup'' Datomval Drlookup''
                Drof' Dseg
                (hof_cons Dhof
                    (of_append (of_append Dof3 Dof Dapp2') Dof1 Dapp1')
                    (sic_hseg Dseg)))
            Dmok.
-coerce :
   preservation_init (hof_cons Dhof Dof Dsic) (htpok_cons Dhtpok X1 Dlt) Drof
      Drlookup Datomval Dperform Ddeloc (ok_init_coerce Dinitok Dsub) Dclookup
      Dseg Dmok
      <- of_reg (subsume Dsub Dof) Dkof
      <- preservation_init (hof_cons Dhof (subsume Dsub Dof) Dsic)
            (htpok_cons Dhtpok Dkof Dlt) Drof Drlookup Datomval Dperform Ddeloc
            Dinitok Dclookup Dseg Dmok.
-done :
   preservation_init (hof_cons Dhof DofVnew (sic_hseg X1)) Dhtpok Drof Drlookup
      Datomval Dperform Ddeloc (ok_init_done Dcodeok Drtupdate) Dclookup Dseg
      Dmok
      <- htpcons_hsubtype Dhtpok Dhsub
      <- hweaken_hof Dhsub (hof_cons Dhof DofVnew (sic_hseg Dseg)) Dhof'
      <- hweaken_rof Dhsub Drof Drof'
      <- rupdate_nochange Drlookup Drupdate
      <- of_reg DofVnew Dkof
      <- atom_size asize_pointer Datomval Dsize
      <- rupdate_pt Drof'
            (of_atom
                (aof_hpointer (trans runite lunite) (trans luniti runiti) 
kof_b0
                    Dkof sat_b0i Dseg htlookup_hit)
                Datomval)
            Dsize Drupdate Drtupdate Drof''
      <- hweaken_codeok Dhsub Dcodeok Dcodeok'
      <- preservation* Dhtpok Dhof' Drof'' Dcodeok' Dperform Ddeloc Dclookup
            Dmok.
preservation_init_stack| :
   Pi L1:loc. Pi N1:nat. Pi N2:nat.
      aval_eq (pointer L1 N1) (spointer N2)
         -> Pi M:machine. machineok M -> type.
-mov-stack :
   preservation_init X1 X2 X3 Drlookup Datomval
      (step_mov X4
          (propagate_zdest X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 Datomval'
              (resolve_rco Drlookup')) X16)
      X17 X18 X19 X20 Dmok
      <- rlookup_fun Drlookup' Drlookup Dvaleq
      <- atomval_resp Dvaleq aval_eq_ Datomval' Datomval''
      <- atomval_fun Datomval Datomval'' Davaleq
      <- preservation_init_stack| Davaleq (mach (hcons L V1 H1) L1 R1 PC1) Dmok.
-pop-stack :
   preservation_init X1 X2 X3 Drlookup Datomval
      (step_pop X4
          (propagate_zdest X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 Datomval'
              (resolve_rco Drlookup'))
          Dzupdate X16 X17)
      X18 X19 X20 X21 Dmok
      <- zupdate_distinct2 Dzupdate Drlookup'' Drlookup'
      <- rlookup_fun Drlookup'' Drlookup Dvaleq
      <- atomval_resp Dvaleq aval_eq_ Datomval' Datomval''
      <- atomval_fun Datomval Datomval'' Davaleq
      <- preservation_init_stack| Davaleq (mach (hcons L V1 H1) L1 R1 PC1) Dmok.
preservation :
   Pi M:machine. Pi M':machine.
      machineok M -> stepsto M M' -> machineok M' -> type.
-td :
   preservation (machineok_std Dhtpok Dcodeok Dclookup Drof Dhof)
      (stepsto_ Dperform Ddecode) Dmok
      <- codeok_nonnull Dcodeok Deq
      <- clookup_resp Deq Dclookup Dclookup'
      <- codeok_resp Deq Dcodeok Dcodeok'
      <- decode_clookup_fun Ddecode Dclookup' Ddeloc
      <- preservation* Dhtpok Dhof Drof Dcodeok' Dperform Ddeloc Dclookup' Dmok.
-init :
   preservation
      (machineok_init Dhtpok Dinitok Dclookup Datomval Drlookup Drof Dseg Dhof)
      (stepsto_ Dperform Ddecode) Dmok
      <- initok_nonnull Dinitok Deq
      <- clookup_resp Deq Dclookup Dclookup'
      <- initok_resp Deq Dinitok Dinitok'
      <- decode_clookup_fun Ddecode Dclookup' Ddeloc
      <- preservation_init Dhof Dhtpok Drof Drlookup Datomval Dperform Ddeloc
            Dinitok' Dclookup' Dseg Dmok.
computesto : machine -> machine -> type.
computesto_z : computesto M M.
computesto_s : computesto M1 M3 <- stepsto M1 M2 <- computesto M2 M3.
abstract_safety :
   Pi M:machine. Pi M':machine. Pi M'':machine.
      machineok M -> computesto M M' -> stepsto M' M'' -> type.
abstract_safety_z :
   abstract_safety Dok computesto_z Dstep <- progress Dok Dstep.
abstract_safety_s :
   abstract_safety Dok (computesto_s Dcomp Dstep) Dgood
      <- preservation Dok Dstep Dok'
      <- abstract_safety Dok' Dcomp Dgood.
locmap : type.
locmap_nil : locmap.
locmap_cons : locmap <- locmap <- binary wwb <- loc <- bit.
irfmap : type.
irfmap_nil : irfmap <- binary wwb.
irfmap_cons : irfmap <- irfmap <- binary wwb <- rsection N1.
corresp_info : type.
corresp_info_ : corresp_info <- irfmap <- locmap <- binary wwb <- nat.
iinstseq : type.
icodenil : iinstseq.
icodecons : iinstseq <- iinstseq <- iinst <- nat.
impl_seg : segment -> seg -> type.
impl_reg : nat -> reg -> type.
impl_bytereg : nat -> reg -> type.
impl_uval : corresp_info -> binary bw -> uval -> type.
impl_val : Pi N1:nat. corresp_info -> string N1 -> val -> type.
impl_operea : Pi N:nat. eaddress N -> operand -> type.
impl_oper : Pi N:nat. corresp_info -> oper N -> operand -> type.
impl_dest : Pi N:nat. eaddress N -> dest -> type.
impl_cond : icond -> cond -> type.
impl_inst : corresp_info -> iinstseq -> inst -> type.
impl_instrf : Pi N:nat. runfac N -> reg -> inst -> type.
impl_flag : bit -> flag -> type.
impl_heap : corresp_info -> memory -> heap -> type.
impl_stack : corresp_info -> memory -> binary wwb -> val -> memory -> type.
impl_rfile :
   Pi N:nat. corresp_info -> regs (s N) -> rfile* N -> string ww -> type.
impl_conds : flags -> conds -> type.
impl_pc : corresp_info -> binary wwb -> pc -> type.
impl_machine : corresp_info -> state -> machine -> type.
implements : state -> machine -> type.
lookup_loc : locmap -> loc -> binary wwb -> bit -> type.
lookup_loc_z : lookup_loc (locmap_cons BIT L Baddr LM) L Baddr BIT.
lookup_loc_s :
   lookup_loc (locmap_cons B1 L' Baddr' LM) L Baddr BIT1
      <- loc_lt L L'
      <- lookup_loc LM L Baddr BIT1.
lookup_irfmap : Pi N1:nat. irfmap -> binary wwb -> runfac N1 -> type.
lookup_irfmap_z : lookup_irfmap (irfmap_cons (rsection_runtime IRF) A IM) A IRF.
lookup_irfmap_s :
   lookup_irfmap (irfmap_cons RSECT1 A IM) A1 IRF
      <- binary_neq A A1
      <- lookup_irfmap IM A1 IRF.
lookup_gotptr : irfmap -> binary wwb -> type.
lookup_gotptr_z : lookup_gotptr (irfmap_nil A) A.
lookup_gotptr_s :
   lookup_gotptr (irfmap_cons RSECT1 B1 IM) A <- lookup_gotptr IM A.
impl_reg_ : impl_reg N (rg N) <- lt N esp.
impl_bytereg_ : impl_bytereg N (rg N) <- leq N ebx.
sizeof_iinstseq : iinstseq -> nat -> type.
sizeof_iinstseq_nil : sizeof_iinstseq icodenil 0'.
sizeof_iinstseq_cons :
   sizeof_iinstseq (icodecons N1 I1 IS) (s N) <- sizeof_iinstseq IS N.
idecodeseq :
   Pi N1:nat. Pi N2:nat. string N1 -> iinstseq -> nat -> string N2 -> type.
idecodeseq_nil : idecodeseq S icodenil 0' S.
idecodeseq_cons :
   idecodeseq S (icodecons N1 I IS) N3 S''
      <- idecode S I N1 S'
      <- idecodeseq S' IS N2 S''
      <- sum N1 N2 N3.
impl_uval_lit : impl_uval CI1 B (@' (lit B) 0').
impl_uval_pointer :
   impl_uval (corresp_info_ N2 B3 LM IM1) AB (@' (pointer L M) P)
      <- lookup_loc LM L Lstart B2
      <- represents M B
      <- add Lstart B W B1
      <- implode_word AW W
      <- index P AW S1 (/ AB S2).
impl_uval_pointer_bad :
   impl_uval (corresp_info_ N4 B3 LM IM1) AB (@' (pointer L M) P)
      <- lookup_loc LM L Lstart B2
      <- is_negone Bmax
      <- represents Nmax Bmax
      <- sum Nmax (s N3) M
      <- quotrem M (s Nmax) N2 N
      <- represents N B
      <- add Lstart B W B1
      <- implode_word AW W
      <- index P AW S1 (/ AB S2).
impl_uval_spointer :
   impl_uval (corresp_info_ Nlimit Astart LM1 IM1) AB (@' (spointer N) P)
      <- represents Nptr Bptr
      <- sum N Nptr Nlimit
      <- add Astart Bptr W zero
      <- implode_word AW W
      <- index P AW S1 (/ AB S2).
impl_uval_gotpointer :
   impl_uval (corresp_info_ N2 B1 LM1 IM) AB (@' gotpointer P)
      <- lookup_gotptr IM W
      <- implode_word AW W
      <- index P AW S1 (/ AB S2).
impl_uval_instruct :
   impl_uval CI B (@' (instruct IN N S) P)
      <- idecodeseq S IS N #
      <- index P S S1 (/ B S2)
      <- impl_inst CI IS IN.
impl_uval_junk : impl_uval CI1 B1 (@' junk 0').
impl_val_null : impl_val CI1 # null.
impl_val_cons :
   impl_val CI (/ B S) (;' U V) <- impl_uval CI B U <- impl_val CI S V.
impl_rco : impl_operea (eaddr_reg IREG) (rco REG) <- impl_reg IREG REG.
impl_rclo :
   impl_operea (eaddr_reglow IREG) (proj 1' (rco REG) 0') <- impl_bytereg IREG REG.
impl_rchi :
   impl_operea (eaddr_reghigh IREG) (proj 1' (rco REG) 1')
      <- impl_bytereg IREG REG.
impl_spco : impl_operea (eaddr_reg esp) spco.
impl_mco :
   impl_operea (eaddr_deref IREG 0' N2 B M) (mco M (rco REG) N)
      <- nat_eq M (s N1)
      <- impl_reg IREG REG
      <- represents N B.
impl_imco :
   impl_operea (eaddr_deref Base Scale Index Disp M)
      (imco M (rco Rbase) N (rco Rind) Scale)
      <- nat_eq M (s N1)
      <- impl_reg Base Rbase
      <- impl_reg Index Rind
      <- represents N Disp.
impl_oper_ea : impl_oper CI1 (oper_rm E) O <- impl_operea E O.
impl_oper_im : impl_oper CI (oper_imm W) (im V) <- impl_val CI W V.
impl_oper_pcrel+ :
   impl_oper CI1 (oper_pcrel B) (pcrel+ N)
      <- highbit B zero B1
      <- represents N B.
impl_oper_pcrel- :
   impl_oper CI1 (oper_pcrel B) (pcrel- N)
      <- highbit B one' B2
      <- neg B B' B1
      <- represents N B'.
impl_rdest : impl_dest (eaddr_reg IREG) (rdest REG) <- impl_reg IREG REG.
impl_rldest :
   impl_dest (eaddr_reglow IREG) (projdest 1' (rco REG) (rdest REG) 0')
      <- impl_bytereg IREG REG.
impl_rhdest :
   impl_dest (eaddr_reghigh IREG) (projdest 1' (rco REG) (rdest REG) 1')
      <- impl_bytereg IREG REG.
impl_spdest : impl_dest (eaddr_reg esp) spdest.
impl_mdest :
   impl_dest (eaddr_deref IREG 0' N2 B M) (mdest M (rco REG) N)
      <- nat_eq M (s N1)
      <- impl_reg IREG REG
      <- represents N B.
impl_imdest :
   impl_dest (eaddr_deref Base Scale Index Disp M)
      (imdest M (rco Rbase) N (rco Rind) Scale)
      <- nat_eq M (s N1)
      <- impl_reg Base Rbase
      <- impl_reg Index Rind
      <- represents N Disp.
impl_cond_eq : impl_cond icond_e cond_eq.
impl_cond_neq : impl_cond icond_ne cond_neq.
impl_cond_lt : impl_cond icond_b cond_lt.
impl_cond_lte : impl_cond icond_be cond_lte.
impl_cond_gt : impl_cond icond_a cond_gt.
impl_cond_gte : impl_cond icond_ae cond_gte.
impl_cond_slt : impl_cond icond_l cond_slt.
impl_cond_slte : impl_cond icond_le cond_slte.
impl_cond_sgt : impl_cond icond_g cond_sgt.
impl_cond_sgte : impl_cond icond_ge cond_sgte.
impl_cond_sign : impl_cond icond_s cond_sign.
impl_cond_nsign : impl_cond icond_ns cond_nsign.
impl_cond_ov : impl_cond icond_o cond_ov.
impl_cond_nov : impl_cond icond_no cond_nov.
impl_add :
   impl_inst CI (icodecons N1 (ii_add Nsz EA O) icodenil) (i_add Nsz E O1 O2)
      <- allowed_opsize Nsz
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_addptr :
   impl_inst CI (icodecons N1 (ii_add ww EA O) icodenil) (i_addptr E O1 O2)
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_addsptr :
   impl_inst CI (icodecons N1 (ii_add ww EA (oper_imm W)) icodenil)
      (i_addsptr E O N)
      <- impl_dest EA E
      <- impl_operea EA O
      <- implode_word W B
      <- represents N B.
impl_and :
   impl_inst CI (icodecons N1 (ii_and Nsz EA O) icodenil) (i_and Nsz E O1 O2)
      <- allowed_opsize Nsz
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_bz :
   impl_inst CI (icodecons N1 (ii_jecxz O) icodenil) (i_bz (rco (rg ecx)) O1)
      <- impl_oper CI O O1.
impl_call :
   impl_inst CI (icodecons N1 (ii_call O1) icodenil) (i_call O)
      <- impl_oper CI O1 O.
impl_cmp :
   impl_inst CI (icodecons N1 (ii_cmp Nsz EA O) icodenil) (i_cmp Nsz O1 O2)
      <- allowed_opsize Nsz
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_cmpjcc :
   impl_inst CI
      (icodecons N (ii_cmp Nsz EA O) (icodecons N1 (ii_jcc Icond O'') icodenil))
      (i_cmpjcc Nsz Cond O1 O2 O3)
      <- allowed_opsize Nsz
      <- impl_operea EA O1
      <- impl_oper CI O O2
      <- impl_cond Icond Cond
      <- impl_oper CI O' O3
      <- adjust_plus_op O' N O''.
impl_fload :
   impl_inst CI1 (icodecons N1 (ii_fload Nsz O) icodenil) (i_fload O')
      <- impl_operea O O'.
impl_fnop : impl_inst CI1 (icodecons N1 ii_fnop icodenil) i_fnop.
impl_fstore :
   impl_inst CI1 (icodecons N1 (ii_fstore Nsz E) icodenil) (i_fstore Nsz O)
      <- impl_dest E O.
impl_fstflags : impl_inst CI1 (icodecons N1 ii_fstoreflags icodenil) i_fstflags.
impl_halt : impl_inst CI1 (icodecons N1 ii_ret icodenil) i_halt.
impl_jcc :
   impl_inst CI (icodecons N1 (ii_jcc Icond O) icodenil) (i_jcc Cond O1)
      <- impl_cond Icond Cond
      <- impl_oper CI O O1.
impl_jump :
   impl_inst CI (icodecons N1 (ii_jmp O) icodenil) (i_jmp O')
      <- impl_oper CI O O'.
impl_malloc :
   impl_instrf 0' irf_malloc REG
      (i_malloc (rco REG) (rdest (rg eax)) (rco (rg eax))).
impl_mallocarr :
   impl_instrf 1' irf_mallocarr REG
      (i_mallocarr (rco REG) (rdest (rg eax)) ww (rco (rg eax)) (rco (rg ecx))).
impl_mallocarrb :
   impl_instrf 2' irf_mallocarrb REG
      (i_mallocarr (rco REG) (rdest (rg eax)) 1' (rco (rg eax))
          (proj 1' (rco (rg ecx)) 0')).
impl_mov :
   impl_inst CI (icodecons N1 (ii_mov Nsz E O) icodenil) (i_mov O1 O2)
      <- impl_dest E O1
      <- impl_oper CI O O2.
impl_movsx :
   impl_inst CI (icodecons N1 (ii_movsx Ndsz Nosz E O) icodenil)
      (i_movsx Ndsz O1 O2)
      <- allowed_opsize Ndsz
      <- allowed_opsize Nosz
      <- impl_dest E O1
      <- impl_oper CI O O2.
impl_movzx :
   impl_inst CI (icodecons N1 (ii_movzx Ndsz Nosz E O) icodenil)
      (i_movzx Ndsz O1 O2)
      <- allowed_opsize Ndsz
      <- allowed_opsize Nosz
      <- impl_dest E O1
      <- impl_oper CI O O2.
impl_nop : impl_inst CI1 (icodecons N1 ii_nop icodenil) i_nop.
impl_or :
   impl_inst CI (icodecons N1 (ii_or Nsz EA O) icodenil) (i_or Nsz E O1 O2)
      <- allowed_opsize Nsz
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_pop :
   impl_inst CI1 (icodecons N1 (ii_pop EA) icodenil) (i_pop ww O')
      <- impl_dest EA O'.
impl_push :
   impl_inst CI (icodecons N1 (ii_push O) icodenil) (i_push O')
      <- impl_oper CI O O'.
impl_push_rel :
   impl_inst CI
      (icodecons N1 (ii_call (oper_pcrel Bcall))
          (icodecons N2 (ii_add ww (eaddr_deref esp 0' eax 0_32 ww) (oper_imm W))
              icodenil))
      (i_pushrel OP)
      <- implode_word W B
      <- represents N1 Bcall
      <- add B Bcall B' zero
      <- impl_oper CI (oper_pcrel B') OP.
impl_ret : impl_inst CI1 (icodecons N1 ii_ret icodenil) i_ret.
impl_rol :
   impl_inst CI (icodecons N1 (ii_rol ww EA O) icodenil) (i_rol ww E O1 O2)
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_rcl :
   impl_inst CI (icodecons N1 (ii_rcl ww EA O) icodenil) (i_rcl ww E O1 O2)
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_ror :
   impl_inst CI (icodecons N1 (ii_ror ww EA O) icodenil) (i_ror ww E O1 O2)
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_rcr :
   impl_inst CI (icodecons N1 (ii_rcr ww EA O) icodenil) (i_rcr ww E O1 O2)
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_shl :
   impl_inst CI (icodecons N1 (ii_shl Nsz EA O) icodenil) (i_shl Nsz E O1 O2)
      <- allowed_opsize Nsz
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_shr :
   impl_inst CI (icodecons N1 (ii_shr Nsz EA O) icodenil) (i_shr Nsz E O1 O2)
      <- allowed_opsize Nsz
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_sar :
   impl_inst CI (icodecons N1 (ii_sar Nsz EA O) icodenil) (i_sar Nsz E O1 O2)
      <- allowed_opsize Nsz
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_salloc :
   impl_inst CI
      (icodecons N2 (ii_sub ww (eaddr_reg esp) (oper_imm W))
          (icodecons N3 (ii_push (oper_imm (/ 0f_8 (/ 0f_8 (/ 0f_8 (/ 0f_8 #))))))
              icodenil))
      (i_salloc N)
      <- implode_word W B
      <- represents N Bact
      <- nat_eq N (s N1)
      <- add B 4_32 Bact zero
      <- add Bact B1 overflow_lim zero.
impl_sfree :
   impl_inst CI1
      (icodecons N2 (ii_add ww (eaddr_reg esp) (oper_imm W)) icodenil)
      (i_sfree N)
      <- implode_word W B
      <- represents N B
      <- nat_eq N (s N1).
impl_sub :
   impl_inst CI (icodecons N1 (ii_sub Nsz EA O) icodenil) (i_sub Nsz E O1 O2)
      <- allowed_opsize Nsz
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_subptr :
   impl_inst CI (icodecons N1 (ii_sub ww EA O) icodenil) (i_subptr E O1 O2)
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_xor :
   impl_inst CI (icodecons N1 (ii_xor Nsz EA O) icodenil) (i_xor Nsz E O1 O2)
      <- allowed_opsize Nsz
      <- impl_dest EA E
      <- impl_operea EA O1
      <- impl_oper CI O O2.
impl_runtime :
   impl_inst (corresp_info_ Nlim Astart LM IM)
      (icodecons N1 (ii_call (oper_rm (eaddr_deref IREG 0' eax Dirf ww)))
          icodenil) IN
      <- impl_instrf Nirf IRF REG IN
      <- product ww Nirf Nirf4
      <- represents Nirf4 Dirf
      <- impl_reg IREG REG.
notin_lm : binary wwb -> locmap -> type.
notin_lm_nil : notin_lm B1 locmap_nil.
notin_lm_one :
   notin_lm B (locmap_cons one' L1 B1 LM) <- binary_neq B B1 <- notin_lm B LM.
notin_lm_zero : notin_lm B (locmap_cons zero L1 B1 LM) <- notin_lm B LM.
lm_absent : locmap -> memory -> type.
lm_absent_nil : lm_absent LM1 mnil.
lm_absent_cons :
   lm_absent LM (mcons Astart N1 SECT1 M)
      <- notin_lm Astart LM
      <- lm_absent LM M.
locmap_wf : locmap -> loc -> type.
locmap_wf_nil : locmap_wf locmap_nil L1.
locmap_wf_one :
   locmap_wf (locmap_cons one' L A LM) L1
      <- loc_lt L L1
      <- notin_lm A LM
      <- locmap_wf LM L.
locmap_wf_zero :
   locmap_wf (locmap_cons zero L B1 LM) L1 <- loc_lt L L1 <- locmap_wf LM L.
in_memory : binary wwb -> memory -> type.
in_memory_hit : in_memory A (mcons A N1 SECT1 H1).
in_memory_miss : in_memory A (mcons B1 N1 SECT1 M) <- in_memory A M.
lm_present : locmap -> memory -> type.
lm_present_nil : lm_present locmap_nil H1.
lm_present_one :
   lm_present (locmap_cons one' L1 Astart LM) M
      <- in_memory Astart M
      <- lm_present LM M.
lm_present_zero : lm_present (locmap_cons zero L1 B1 LM) M <- lm_present LM M.
lm_heap_corr : locmap -> heap -> type.
lm_heap_corr_nil : lm_heap_corr locmap_nil hnil.
lm_heap_corr_one :
   lm_heap_corr (locmap_cons one' L A LM) (hcons L V1 H) <- lm_heap_corr LM H.
lm_heap_corr_zero :
   lm_heap_corr (locmap_cons zero L B1 LM) H <- lm_heap_corr LM H.
corresp_info_valid : corresp_info -> loc -> memory -> heap -> type.
corresp_info_valid_ :
   corresp_info_valid (corresp_info_ N1 B1 LM IM1) L M H
      <- locmap_wf LM L
      <- lm_present LM M
      <- lm_heap_corr LM H.
impl_seg_hs : impl_seg hs hseg.
impl_seg_cs : impl_seg cs cseg.
memory_wf : binary wwb -> memory -> type.
memory_wf_nil : memory_wf B1 mnil.
memory_wf_cons :
   memory_wf Aprev (mcons A Nsize SECT1 Mrest)
      <- add Aprev B1 A zero
      <- nat_eq Nsize (s N1)
      <- represents Nsize Bsize
      <- add A Bsize Anext zero
      <- memory_wf Anext Mrest.
impl_heap_nil : impl_heap (corresp_info_ N1 B1 LM IM1) M hnil <- lm_absent LM M.
impl_heap_cons :
   impl_heap (corresp_info_ Nlim Astack LM IM) M1 (hcons L V H)
      <- impl_heap (corresp_info_ Nlim Astack LM IM) M H
      <- goodheap* H L
      <- lookup_loc LM L Astart one'
      <- impl_val (corresp_info_ Nlim Astack LM IM) S V
      <- represents Nsize Bsize
      <- add Astart Bsize Aend zero
      <- segof L SEG
      <- impl_seg SEG' SEG
      <- mextend* M Astart (section_valid SEG' S) M1.
impl_stack_ :
   impl_stack (corresp_info_ Nlimit Astart LM IM) H Wesp V H2
      <- represents Nlimit Blimit
      <- add Blimit overflow_lim B1 zero
      <- add Astart Blimit Aend zero
      <- add Astart B Wesp zero
      <- represents Nsp B
      <- index Nsp S S1 Sstack
      <- impl_val (corresp_info_ Nlimit Astart LM IM) Sstack V
      <- add Atrap overflow_lim Astart zero
      <- represents Noverflow_lim overflow_lim
      <- stack_absent H
      <- notin_lm Atrap LM
      <- notin_lm Astart LM
      <- mextend* H Atrap (section_reserved rsection_trappage) H1
      <- mextend* H1 Astart (section_valid ss S) H2.
impl_rfile_nil : impl_rfile CI (regs_cons W regs_nil) rfnil W.
impl_rfile_cons :
   impl_rfile CI (regs_cons W R) (rfcons V R') Wsp
      <- impl_val CI W V
      <- impl_rfile CI R R' Wsp.
impl_flag_set : impl_flag one' fset.
impl_flag_unset : impl_flag zero fclear.
impl_flag_dks : impl_flag one' fdk.
impl_flag_dku : impl_flag zero fdk.
impl_conds_ : impl_conds (flags_ F1 F2 F3 F4) (conds_ F1 F2 F3 F4).
impl_pc_ :
   impl_pc (corresp_info_ Nlim Astart LM IM) Aeip (pc_ L N)
      <- lookup_loc LM L Cstart B2
      <- represents N B
      <- add Cstart B Aeip B1.
runfac_of : Pi N1:nat. Pi N2:nat. rsection N1 -> runfac N2 -> type.
runfac_of_ : runfac_of (rsection_runtime IRF) IRF.
impl_runfacs :
   Pi N1:nat. nat -> irfmap -> locmap -> memory -> memory -> string N1 -> type.
impl_runfacs_z : impl_runfacs 0' (irfmap_nil B1) LM H H #.
impl_runfacs_s :
   impl_runfacs (s N) (irfmap_cons RSECT Arf IM) LM H H2 Sgot2
      <- runfac_of RSECT IRF
      <- notin_lm Arf LM
      <- impl_runfacs N IM LM H H1 Sgot1
      <- mextend* H1 Arf (section_reserved RSECT) H2
      <- implode_word Wrf Arf
      <- index N2 Sgot2 Sgot1 Wrf.
number_runfacs : nat = 2'.
impl_got_ptr : corresp_info -> memory -> memory -> type.
impl_got_ptr_ :
   impl_got_ptr (corresp_info_ N2 B1 LM IM) H H2
      <- impl_runfacs number_runfacs IM LM H H1 Sgot
      <- lookup_gotptr IM Wgot
      <- notin_lm Wgot LM
      <- mextend* H1 Wgot (section_valid cs Sgot) H2.
impl_ :
   impl_machine CI (state_ H R FR Aeip OR) (mach H' (lc N) (rf Vstack CC R') PC)
      <- impl_heap CI H1 H'
      <- impl_rfile CI R R' Wesp
      <- implode_word Wesp AWesp
      <- impl_stack CI H1 AWesp Vstack H2
      <- impl_conds FR CC
      <- impl_pc CI Aeip PC
      <- impl_got_ptr CI H2 H
      <- memory_wf 0_32 H
      <- corresp_info_valid CI (lc N) H H'.
implements_ : implements ST M <- impl_machine CI ST M.
implements_badpc :
   implements ST1 (mach H L1 R1 (pc_ L N))
      <- impl_heap CI M H
      <- is_negone Bmax
      <- represents Nmax Bmax
      <- lt Nmax N.
implements_stopped : implements stopped M.
eaddress_eq : Pi N1:nat. Pi N2:nat. eaddress N1 -> eaddress N2 -> type.
eaddress_eq_ : eaddress_eq E E.
flags_eq : flags -> flags -> type.
flags_eq_ : flags_eq F F.
icond_eq : icond -> icond -> type.
icond_eq_ : icond_eq IC IC.
iinst_eq : iinst -> iinst -> type.
iinst_eq_ : iinst_eq I I.
iinstseq_eq : iinstseq -> iinstseq -> type.
iinstseq_eq_ : iinstseq_eq IS IS.
section_eq : Pi N1:nat. Pi N2:nat. section N1 -> section N2 -> type.
section_eq_ : section_eq SECT SECT.
segment_eq : segment -> segment -> type.
segment_eq_ : segment_eq SEG SEG.
memory_eq : memory -> memory -> type.
memory_eq_ : memory_eq M M.
runfac_eq : Pi N1:nat. Pi N2:nat. runfac N1 -> runfac N2 -> type.
runfac_eq_ : runfac_eq IRF IRF.
state_eq : state -> state -> type.
state_eq_ : state_eq ST ST.
string_eq : Pi N1:nat. Pi N2:nat. string N1 -> string N2 -> type.
string_eq_ : string_eq S S.
oper_eq : Pi N1:nat. Pi N2:nat. oper N1 -> oper N2 -> type.
oper_eq_ : oper_eq O O.
regs_eq : Pi N:nat. regs N -> regs N -> type.
regs_eq_ : regs_eq R R.
result_flags_eq : result_flags -> result_flags -> type.
result_flags_eq_ : result_flags_eq RF RF.
sectset_eq : sectset -> sectset -> type.
sectset_eq_ : sectset_eq SS SS.
locmap_eq : locmap -> locmap -> type.
locmap_eq_ : locmap_eq LM LM.
string_eq_trans :
   Pi N1:nat. Pi N2:nat. Pi W1:string N1. Pi W2:string N2. Pi N3:nat.
      Pi W3:string N3.
      string_eq W1 W2 -> string_eq W2 W3 -> string_eq W1 W3 -> type.
string_eq_trans_ : string_eq_trans string_eq_ string_eq_ string_eq_.
memory_eq_symm :
   Pi H:memory. Pi H':memory. memory_eq H H' -> memory_eq H' H -> type.
memory_eq_symm_ : memory_eq_symm memory_eq_ memory_eq_.
iinstseq_eq_symm :
   Pi IS1:iinstseq. Pi IS2:iinstseq.
      iinstseq_eq IS1 IS2 -> iinstseq_eq IS2 IS1 -> type.
- : iinstseq_eq_symm iinstseq_eq_ iinstseq_eq_.
string_eq_symm :
   Pi N1:nat. Pi N2:nat. Pi W1:string N1. Pi W2:string N2.
      string_eq W1 W2 -> string_eq W2 W1 -> type.
string_eq_symm_ : string_eq_symm string_eq_ string_eq_.
eaddr_deref_resp' :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi N4:nat. Pi N5:nat. Pi N6:nat.
      Pi B1:binary wwb. Pi B2:binary wwb. Pi M1:nat. Pi M2:nat.
      nat_eq N1 N2 -> nat_eq N3 N4 -> nat_eq N5 N6 -> binary_eq B1 B2
         -> nat_eq M1 M2
         -> eaddress_eq (eaddr_deref N1 N3 N5 B1 M1)
               (eaddr_deref N2 N4 N6 B2 M2) -> type.
eaddr_deref_resp'_ :
   eaddr_deref_resp' nat_eq_ nat_eq_ nat_eq_ binary_eq_ nat_eq_ eaddress_eq_.
eaddr_deref_resp :
   Pi N1:nat. Pi N1':nat. Pi N2:nat. Pi N2':nat. Pi N3:nat. Pi N3':nat.
      Pi B:binary wwb. Pi B':binary wwb. Pi N4:nat. Pi N4':nat.
      nat_eq N1 N1' -> nat_eq N2 N2' -> nat_eq N3 N3' -> binary_eq B B'
         -> nat_eq N4 N4'
         -> eaddress_eq (eaddr_deref N1 N2 N3 B N4)
               (eaddr_deref N1' N2' N3' B' N4') -> type.
- : eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ binary_eq_ nat_eq_ eaddress_eq_.
eaddr_reg_resp :
   Pi N1:nat. Pi N2:nat.
      nat_eq N1 N2 -> eaddress_eq (eaddr_reg N1) (eaddr_reg N2) -> type.
eaddr_reg_resp_ : eaddr_reg_resp nat_eq_ eaddress_eq_.
eaddr_abs_resp :
   Pi N1:nat. Pi N1':nat. Pi N2:nat. Pi N2':nat. Pi B:binary wwb.
      Pi B':binary wwb. Pi N3:nat. Pi N3':nat.
      nat_eq N1 N1' -> nat_eq N2 N2' -> binary_eq B B' -> nat_eq N3 N3'
         -> eaddress_eq (eaddr_abs N1 N2 B N3) (eaddr_abs N1' N2' B' N3')
         -> type.
- : eaddr_abs_resp nat_eq_ nat_eq_ binary_eq_ nat_eq_ eaddress_eq_.
flags_eq_cons :
   Pi BIT1:bit. Pi BIT1':bit. Pi BIT2:bit. Pi BIT2':bit. Pi BIT3:bit.
      Pi BIT3':bit. Pi BIT4:bit. Pi BIT4':bit.
      bit_eq BIT1 BIT1' -> bit_eq BIT2 BIT2' -> bit_eq BIT3 BIT3'
         -> bit_eq BIT4 BIT4'
         -> flags_eq (flags_ BIT1 BIT2 BIT3 BIT4)
               (flags_ BIT1' BIT2' BIT3' BIT4') -> type.
- : flags_eq_cons bit_eq_ bit_eq_ bit_eq_ bit_eq_ flags_eq_.
iinstseq_eq_cons :
   Pi N:nat. Pi N':nat. Pi I:iinst. Pi I':iinst. Pi IS:iinstseq.
      Pi IS':iinstseq.
      nat_eq N N' -> iinst_eq I I' -> iinstseq_eq IS IS'
         -> iinstseq_eq (icodecons N I IS) (icodecons N' I' IS') -> type.
iinstseq_eq_cons_ :
   iinstseq_eq_cons nat_eq_ iinst_eq_ iinstseq_eq_ iinstseq_eq_.
iinst_eq_cons_eaddress :
   Pi N1:nat. Pi E:eaddress N1. Pi E':eaddress N1.
      eaddress_eq E E'
         -> Pi I:eaddress N1 -> iinst. iinst_eq (I E) (I E') -> type.
- : iinst_eq_cons_eaddress eaddress_eq_ (\ea:eaddress N1. I1 ea) iinst_eq_.
iinst_eq_cons_oper :
   Pi N1:nat. Pi O:oper N1. Pi O':oper N1.
      oper_eq O O' -> Pi I:oper N1 -> iinst. iinst_eq (I O) (I O') -> type.
- : iinst_eq_cons_oper oper_eq_ (\o:oper N1. I1 o) iinst_eq_.
iinst_eq_cons :
   Pi N1:nat. Pi E:eaddress N1. Pi E':eaddress N1. Pi N2:nat. Pi O:oper N2.
      Pi O':oper N2.
      eaddress_eq E E' -> oper_eq O O'
         -> Pi I:eaddress N1 -> oper N2 -> iinst.
                iinst_eq (I E O) (I E' O') -> type.
- :
   iinst_eq_cons eaddress_eq_ oper_eq_ (\ea:eaddress N1. \o:oper N2. I1 ea o)
      iinst_eq_.
ii_add_resp :
   Pi N:nat. Pi E:eaddress N. Pi E':eaddress N. Pi O:oper N. Pi O':oper N.
      eaddress_eq E E' -> oper_eq O O'
         -> iinst_eq (ii_add N E O) (ii_add N E' O') -> type.
ii_add_resp_ : ii_add_resp eaddress_eq_ oper_eq_ iinst_eq_.
ii_and_resp :
   Pi N:nat. Pi E:eaddress N. Pi E':eaddress N. Pi O:oper N. Pi O':oper N.
      eaddress_eq E E' -> oper_eq O O'
         -> iinst_eq (ii_and N E O) (ii_and N E' O') -> type.
ii_and_resp_ : ii_and_resp eaddress_eq_ oper_eq_ iinst_eq_.
ii_call_resp :
   Pi O:oper ww. Pi O':oper ww.
      oper_eq O O' -> iinst_eq (ii_call O) (ii_call O') -> type.
ii_call_resp_ : ii_call_resp oper_eq_ iinst_eq_.
ii_cmp_resp :
   Pi N:nat. Pi E:eaddress N. Pi E':eaddress N. Pi O:oper N. Pi O':oper N.
      eaddress_eq E E' -> oper_eq O O'
         -> iinst_eq (ii_cmp N E O) (ii_cmp N E' O') -> type.
ii_cmp_resp_ : ii_cmp_resp eaddress_eq_ oper_eq_ iinst_eq_.
ii_jecxz_resp :
   Pi O:oper ww. Pi O':oper ww.
      oper_eq O O' -> iinst_eq (ii_jecxz O) (ii_jecxz O') -> type.
ii_jecxz_resp_ : ii_jecxz_resp oper_eq_ iinst_eq_.
ii_jcc_resp :
   Pi IC:icond. Pi IC':icond. Pi O:oper ww. Pi O':oper ww.
      icond_eq IC IC' -> oper_eq O O' -> iinst_eq (ii_jcc IC O) (ii_jcc IC' O')
         -> type.
ii_jcc_resp_ : ii_jcc_resp icond_eq_ oper_eq_ iinst_eq_.
ii_jmp_resp :
   Pi O:oper ww. Pi O':oper ww.
      oper_eq O O' -> iinst_eq (ii_jmp O) (ii_jmp O') -> type.
ii_jmp_resp_ : ii_jmp_resp oper_eq_ iinst_eq_.
ii_mov_resp :
   Pi N:nat. Pi E:eaddress N. Pi E':eaddress N. Pi O:oper N. Pi O':oper N.
      eaddress_eq E E' -> oper_eq O O'
         -> iinst_eq (ii_mov N E O) (ii_mov N E' O') -> type.
ii_mov_resp_ : ii_mov_resp eaddress_eq_ oper_eq_ iinst_eq_.
ii_or_resp :
   Pi N:nat. Pi E:eaddress N. Pi E':eaddress N. Pi O:oper N. Pi O':oper N.
      eaddress_eq E E' -> oper_eq O O' -> iinst_eq (ii_or N E O) (ii_or N E' O')
         -> type.
ii_or_resp_ : ii_or_resp eaddress_eq_ oper_eq_ iinst_eq_.
ii_pop_resp :
   Pi E:eaddress ww. Pi E':eaddress ww.
      eaddress_eq E E' -> iinst_eq (ii_pop E) (ii_pop E') -> type.
ii_pop_resp_ : ii_pop_resp eaddress_eq_ iinst_eq_.
ii_push_resp :
   Pi O:oper ww. Pi O':oper ww.
      oper_eq O O' -> iinst_eq (ii_push O) (ii_push O') -> type.
ii_push_resp_ : ii_push_resp oper_eq_ iinst_eq_.
ii_sub_resp :
   Pi N:nat. Pi E:eaddress N. Pi E':eaddress N. Pi O:oper N. Pi O':oper N.
      eaddress_eq E E' -> oper_eq O O'
         -> iinst_eq (ii_sub N E O) (ii_sub N E' O') -> type.
ii_sub_resp_ : ii_sub_resp eaddress_eq_ oper_eq_ iinst_eq_.
ii_xor_resp :
   Pi N:nat. Pi E:eaddress N. Pi E':eaddress N. Pi O:oper N. Pi O':oper N.
      eaddress_eq E E' -> oper_eq O O'
         -> iinst_eq (ii_xor N E O) (ii_xor N E' O') -> type.
ii_xor_resp_ : ii_xor_resp eaddress_eq_ oper_eq_ iinst_eq_.
memory_eq_cons :
   Pi A1:binary wwb. Pi A2:binary wwb. Pi N1:nat. Pi N2:nat.
      Pi SECT1:section N1. Pi SECT2:section N2. Pi M1:memory. Pi M2:memory.
      binary_eq A1 A2 -> nat_eq N1 N2 -> section_eq SECT1 SECT2
         -> memory_eq M1 M2
         -> memory_eq (mcons A1 N1 SECT1 M1) (mcons A2 N2 SECT2 M2) -> type.
- : memory_eq_cons binary_eq_ nat_eq_ section_eq_ memory_eq_ memory_eq_.
section_valid_eq_cons :
   Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S2:string N2.
      string_eq S1 S2
         -> Pi SEG:segment.
                section_eq (section_valid SEG S1) (section_valid SEG S2) -> type.
- : section_valid_eq_cons string_eq_ SEG1 section_eq_.
oper_imm_resp :
   Pi N1:nat. Pi N2:nat. Pi W:string N1. Pi W':string N2.
      string_eq W W' -> oper_eq (oper_imm W) (oper_imm W') -> type.
oper_imm_resp_ : oper_imm_resp string_eq_ oper_eq_.
oper_pcrel_resp :
   Pi B:binary wwb. Pi B':binary wwb.
      binary_eq B B' -> oper_eq (oper_pcrel B) (oper_pcrel B') -> type.
oper_pcrel_resp_ : oper_pcrel_resp binary_eq_ oper_eq_.
oper_rm_resp :
   Pi N1:nat. Pi N2:nat. Pi E:eaddress N1. Pi E':eaddress N2.
      eaddress_eq E E' -> oper_eq (oper_rm E) (oper_rm E') -> type.
oper_rm_resp_ : oper_rm_resp eaddress_eq_ oper_eq_.
regs_eq_cons :
   Pi N1:nat. Pi R1:regs N1. Pi R2:regs N1. Pi S1:string ww. Pi S2:string ww.
      regs_eq R1 R2 -> string_eq S1 S2
         -> regs_eq (regs_cons S1 R1) (regs_cons S2 R2) -> type.
regs_eq_cons_ : regs_eq_cons regs_eq_ string_eq_ regs_eq_.
state_resp :
   Pi H:memory. Pi H':memory. Pi R:regs numregs. Pi R':regs numregs.
      Pi A:binary wwb. Pi A':binary wwb. Pi FR:flags. Pi FR':flags.
      Pi OR:oracle. Pi OR':oracle.
      memory_eq H H' -> regs_eq R R' -> binary_eq A A' -> flags_eq FR FR'
         -> oracle_eq OR OR'
         -> state_eq (state_ H R FR A OR) (state_ H' R' FR' A' OR') -> type.
state_resp_ :
   state_resp memory_eq_ regs_eq_ binary_eq_ flags_eq_ oracle_eq_ state_eq_.
string_eq_cons :
   Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S2:string N2. Pi B1:binary bw.
      Pi B2:binary bw.
      string_eq S1 S2 -> binary_eq B1 B2 -> string_eq (/ B1 S1) (/ B2 S2)
         -> type.
string_eq_cons_ : string_eq_cons string_eq_ binary_eq_ string_eq_.
string_eq_cons4 :
   Pi B1:binary bw. Pi B1':binary bw. Pi B2:binary bw. Pi B2':binary bw.
      Pi B3:binary bw. Pi B3':binary bw. Pi B4:binary bw. Pi B4':binary bw.
      Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi S':string N2.
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3'
         -> binary_eq B4 B4' -> string_eq S S'
         -> string_eq (/ B1 (/ B2 (/ B3 (/ B4 S)))) (/ B1' (/ B2' (/ B3' (/ B4' S'))))
         -> type.
- :
   string_eq_cons4 binary_eq_ binary_eq_ binary_eq_ binary_eq_ string_eq_
      string_eq_.
stringeq_cons_trans :
   Pi N1:nat. Pi N2:nat. Pi B:binary bw. Pi S1:string N1. Pi S:string N2.
      Pi N3:nat. Pi S2:string N3.
      string_eq (/ B S1) S -> string_eq S2 S1 -> string_eq (/ B S2) S -> type.
stringeq_cons_trans_ : stringeq_cons_trans string_eq_ string_eq_ string_eq_.
stringeq_cons_trans' :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi B:binary bw. Pi S1:string N2.
      Pi N3:nat. Pi S2:string N3.
      string_eq S (/ B S1) -> string_eq S1 S2 -> string_eq S (/ B S2) -> type.
stringeq_cons_trans_ : stringeq_cons_trans' string_eq_ string_eq_ string_eq_.
sectset_eq_cons :
   Pi A1:binary wwb. Pi A2:binary wwb. Pi A1':binary wwb. Pi A2':binary wwb.
      Pi SS1:sectset. Pi SS2:sectset.
      binary_eq A1 A2 -> binary_eq A1' A2' -> sectset_eq SS1 SS2
         -> sectset_eq (sectcons A1 A1' SS1) (sectcons A2 A2' SS2) -> type.
- : sectset_eq_cons binary_eq_ binary_eq_ sectset_eq_ sectset_eq_.
string_eq_cdr :
   Pi N:nat. Pi N':nat. Pi S:string N. Pi S':string N'.
      string_eq S S' -> nat_eq N N' -> type.
- : string_eq_cdr string_eq_ nat_eq_.
string_eq_cons' :
   Pi N1:nat. Pi N2:nat. Pi B1:binary bw. Pi S1:string N1. Pi B2:binary bw.
      Pi S2:string N2.
      string_eq (/ B1 S1) (/ B2 S2) -> binary_eq B1 B2 -> string_eq S1 S2
         -> type.
string_eq_cons'_ : string_eq_cons' string_eq_ binary_eq_ string_eq_.
asignextend_resp :
   Pi B1:binary bw. Pi B1':binary bw. Pi B2:binary wwb. Pi B2':binary wwb.
      binary_eq B1 B1' -> binary_eq B2 B2' -> asignextend B1 B2
         -> asignextend B1' B2' -> type.
asignextend_resp_ : asignextend_resp binary_eq_ binary_eq_ D D.
signextend_byte_resp :
   Pi B1:binary bw. Pi B1':binary bw. Pi B2:binary bw. Pi B2':binary bw.
      binary_eq B1 B1' -> binary_eq B2 B2' -> signextend_byte B1 B2
         -> signextend_byte B1' B2' -> type.
signextend_byte_resp_ : signextend_byte_resp binary_eq_ binary_eq_ D D.
decode_modrm_resp :
   Pi B1:binary 2'. Pi B1':binary 2'. Pi B2:binary 3'. Pi B2':binary 3'. Pi N1:nat.
      Pi N2:nat. Pi S:string N1. Pi S':string N2. Pi M:nat. Pi M':nat.
      Pi E:eaddress M. Pi E':eaddress M'. Pi N3:nat. Pi N4:nat. Pi S1:string N3.
      Pi S1':string N4.
      binary_eq B1 B1' -> binary_eq B2 B2' -> string_eq S S' -> nat_eq M M'
         -> eaddress_eq E E' -> string_eq S1 S1' -> decode_modrm B1 B2 S M E S1
         -> decode_modrm B1' B2' S' M' E' S1' -> type.
decode_modrm_resp_ :
   decode_modrm_resp binary_eq_ binary_eq_ string_eq_ nat_eq_ eaddress_eq_
      string_eq_ D D.
decode_modrm_esc_resp :
   Pi B1:binary 2'. Pi B1':binary 2'. Pi B2:binary 3'. Pi B2':binary 3'. Pi N1:nat.
      Pi N2:nat. Pi S:string N1. Pi S':string N2. Pi M:nat. Pi M':nat.
      Pi E:eaddress M. Pi E':eaddress M'. Pi N3:nat. Pi N4:nat. Pi S1:string N3.
      Pi S1':string N4.
      binary_eq B1 B1' -> binary_eq B2 B2' -> string_eq S S' -> nat_eq M M'
         -> eaddress_eq E E' -> string_eq S1 S1'
         -> decode_modrm_esc B1 B2 S M E S1
         -> decode_modrm_esc B1' B2' S' M' E' S1' -> type.
- :
   decode_modrm_esc_resp binary_eq_ binary_eq_ string_eq_ nat_eq_ eaddress_eq_
      string_eq_ D D.
decode_si_resp :
   Pi B1:binary 2'. Pi B1':binary 2'. Pi B2:binary 3'. Pi B2':binary 3'. Pi N1:nat.
      Pi N1':nat. Pi R1:nat. Pi R1':nat.
      binary_eq B1 B1' -> binary_eq B2 B2' -> nat_eq N1 N1' -> nat_eq R1 R1'
         -> decode_si B1 B2 N1 R1 -> decode_si B1' B2' N1' R1' -> type.
- : decode_si_resp binary_eq_ binary_eq_ nat_eq_ nat_eq_ D D.
decode_si_disp_resp :
   Pi N1:nat. Pi N1':nat. Pi N2:nat. Pi N2':nat. Pi B1:binary 3'.
      Pi B1':binary 3'. Pi N3:nat. Pi N4:nat. Pi S:string N3. Pi S':string N4.
      Pi M:nat. Pi M':nat. Pi EA:eaddress M. Pi EA':eaddress M'. Pi N5:nat.
      Pi N6:nat. Pi S1:string N5. Pi S1':string N6.
      nat_eq N1 N1' -> nat_eq N2 N2' -> binary_eq B1 B1' -> string_eq S S'
         -> nat_eq M M' -> eaddress_eq EA EA' -> string_eq S1 S1'
         -> decode_si_disp N1 N2 B1 S M EA S1
         -> decode_si_disp N1' N2' B1' S' M' EA' S1' -> type.
- :
   decode_si_disp_resp nat_eq_ nat_eq_ binary_eq_ string_eq_ nat_eq_
      eaddress_eq_ string_eq_ D D.
decode_reg_resp :
   Pi B:binary 3'. Pi B':binary 3'. Pi N:nat.
      binary_eq B B' -> decode_reg B N -> decode_reg B' N -> type.
decode_reg_resp_ : decode_reg_resp binary_eq_ D D.
decode_reg8_resp :
   Pi B:binary 3'. Pi B':binary 3'. Pi E:eaddress 1'.
      binary_eq B B' -> decode_reg8 B E -> decode_reg8 B' E -> type.
decode_reg8_resp_ : decode_reg8_resp binary_eq_ D D.
idecode*_resp :
   Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S1':string N2. Pi I:iinst.
      Pi I':iinst. Pi N3:nat. Pi N4:nat. Pi S2:string N3. Pi S2':string N4.
      string_eq S1 S1' -> iinst_eq I I' -> string_eq S2 S2' -> idecode* S1 I S2
         -> idecode* S1' I' S2' -> type.
- : idecode*_resp string_eq_ iinst_eq_ string_eq_ D D.
idecodeseq_resp :
   Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S2:string N2. Pi IS1:iinstseq.
      Pi IS2:iinstseq. Pi N3:nat. Pi N4:nat. Pi N5:nat. Pi N6:nat.
      Pi S1':string N5. Pi S2':string N6.
      string_eq S1 S2 -> iinstseq_eq IS1 IS2 -> nat_eq N3 N4
         -> string_eq S1' S2' -> idecodeseq S1 IS1 N3 S1'
         -> idecodeseq S2 IS2 N4 S2' -> type.
idecodeseq_resp_ :
   idecodeseq_resp string_eq_ iinstseq_eq_ nat_eq_ string_eq_ I I.
binop*_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi B1':binary N2. Pi B2:binary N1.
      Pi B2':binary N2. Pi B3:binary N1. Pi B3':binary N2. Pi RF:result_flags.
      Pi RF':result_flags. Pi ALUOP:aluop.
      binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3'
         -> result_flags_eq RF RF' -> binop* ALUOP B1 B2 B3 RF
         -> binop* ALUOP B1' B2' B3' RF' -> type.
- : binop*_resp binary_eq_ binary_eq_ binary_eq_ result_flags_eq_ D D.
binop_resp :
   Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S1':string N2. Pi S2:string N1.
      Pi S2':string N2. Pi S3:string N1. Pi S3':string N2. Pi RF:result_flags.
      Pi RF':result_flags. Pi ALUOP:aluop.
      string_eq S1 S1' -> string_eq S2 S2' -> string_eq S3 S3'
         -> result_flags_eq RF RF' -> binop ALUOP S1 S2 S3 RF
         -> binop ALUOP S1' S2' S3' RF' -> type.
- : binop_resp string_eq_ string_eq_ string_eq_ result_flags_eq_ D D.
shiftop_gt_1_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi B2:binary N2. Pi F1:flags.
      Pi F2:flags. Pi N3:nat. Pi N4:nat. Pi OR1:oracle. Pi OR2:oracle.
      Pi B3:binary N1. Pi B4:binary N2. Pi RF1:result_flags.
      Pi RF2:result_flags. Pi OR3:oracle. Pi OR4:oracle. Pi ALUOP:aluop.
      binary_eq B1 B2 -> flags_eq F1 F2 -> nat_eq N3 N4 -> oracle_eq OR1 OR2
         -> binary_eq B3 B4 -> result_flags_eq RF1 RF2 -> oracle_eq OR3 OR4
         -> shiftop_gt_1 ALUOP B1 F1 N3 OR1 B3 RF1 OR3
         -> shiftop_gt_1 ALUOP B2 F2 N4 OR2 B4 RF2 OR4 -> type.
- :
   shiftop_gt_1_resp binary_eq_ flags_eq_ nat_eq_ oracle_eq_ binary_eq_
      result_flags_eq_ oracle_eq_ D D.
shiftop*_resp :
   Pi N1:nat. Pi N2:nat. Pi B1:binary N1. Pi B2:binary N2. Pi F1:flags.
      Pi F2:flags. Pi B3:binary bw. Pi B4:binary bw. Pi OR1:oracle.
      Pi OR2:oracle. Pi B5:binary N1. Pi B6:binary N2. Pi RF1:result_flags.
      Pi RF2:result_flags. Pi OR3:oracle. Pi OR4:oracle. Pi ALUOP:aluop.
      binary_eq B1 B2 -> flags_eq F1 F2 -> binary_eq B3 B4 -> oracle_eq OR1 OR2
         -> binary_eq B5 B6 -> result_flags_eq RF1 RF2 -> oracle_eq OR3 OR4
         -> shiftop* ALUOP B1 F1 B3 OR1 B5 RF1 OR3
         -> shiftop* ALUOP B2 F2 B4 OR2 B6 RF2 OR4 -> type.
- :
   shiftop*_resp binary_eq_ flags_eq_ binary_eq_ oracle_eq_ binary_eq_
      result_flags_eq_ oracle_eq_ D D.
shiftop_resp :
   Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S2:string N2. Pi F1:flags.
      Pi F2:flags. Pi S3:string 1'. Pi S4:string 1'. Pi OR1:oracle. Pi OR2:oracle.
      Pi S5:string N1. Pi S6:string N2. Pi RF1:result_flags.
      Pi RF2:result_flags. Pi OR3:oracle. Pi OR4:oracle. Pi ALUOP:aluop.
      string_eq S1 S2 -> flags_eq F1 F2 -> string_eq S3 S4 -> oracle_eq OR1 OR2
         -> string_eq S5 S6 -> result_flags_eq RF1 RF2 -> oracle_eq OR3 OR4
         -> shiftop ALUOP S1 F1 S3 OR1 S5 RF1 OR3
         -> shiftop ALUOP S2 F2 S4 OR2 S6 RF2 OR4 -> type.
- :
   shiftop_resp string_eq_ flags_eq_ string_eq_ oracle_eq_ string_eq_
      result_flags_eq_ oracle_eq_ D D.
idecode_resp :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi S':string N2. Pi I:iinst.
      Pi I':iinst. Pi N:nat. Pi N':nat. Pi N3:nat. Pi N4:nat. Pi S1:string N3.
      Pi S1':string N4.
      string_eq S S' -> iinst_eq I I' -> nat_eq N N' -> string_eq S1 S1'
         -> idecode S I N S1 -> idecode S' I' N' S1' -> type.
idecode_resp_ : idecode_resp string_eq_ iinst_eq_ nat_eq_ string_eq_ D D.
impl_rfile_resp :
   Pi N1:nat. Pi R1:regs (s N1). Pi R1':regs (s N1). Pi S1:string ww.
      Pi S1':string ww. Pi CI:corresp_info. Pi R2:rfile* N1.
      regs_eq R1 R1' -> string_eq S1 S1' -> impl_rfile CI R1 R2 S1
         -> impl_rfile CI R1' R2 S1' -> type.
- : impl_rfile_resp regs_eq_ string_eq_ D D.
impl_runfacs_resp :
   Pi N:nat. Pi N':nat. Pi LM:locmap. Pi LM':locmap. Pi M1:memory.
      Pi M1':memory. Pi M2:memory. Pi M2':memory. Pi N1:nat. Pi N2:nat.
      Pi S:string N1. Pi S':string N2. Pi IM:irfmap.
      nat_eq N N' -> locmap_eq LM LM' -> memory_eq M1 M1' -> memory_eq M2 M2'
         -> string_eq S S' -> impl_runfacs N IM LM M1 M2 S
         -> impl_runfacs N' IM LM' M1' M2' S' -> type.
- : impl_runfacs_resp nat_eq_ locmap_eq_ memory_eq_ memory_eq_ string_eq_ D D.
impl_machine_resp :
   Pi ST:state. Pi ST':state. Pi M:machine. Pi M':machine. Pi CI:corresp_info.
      state_eq ST ST' -> machine_eq M M' -> impl_machine CI ST M
         -> impl_machine CI ST' M' -> type.
impl_machine_resp_ : impl_machine_resp state_eq_ machine_eq_ D D.
implements_resp :
   Pi ST:state. Pi ST':state. Pi M:machine. Pi M':machine.
      state_eq ST ST' -> machine_eq M M' -> implements ST M -> implements ST' M'
         -> type.
implements_resp_ : implements_resp state_eq_ machine_eq_ D D.
impl_uval_resp :
   Pi B:binary bw. Pi B':binary bw. Pi U:uval. Pi U':uval. Pi CI:corresp_info.
      binary_eq B B' -> uval_eq U U' -> impl_uval CI B U -> impl_uval CI B' U'
         -> type.
- : impl_uval_resp binary_eq_ uval_eq_ D D.
impl_val_resp :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi S':string N2. Pi V:val. Pi V':val.
      Pi CI:corresp_info.
      string_eq S S' -> val_eq V V' -> impl_val CI S V -> impl_val CI S' V'
         -> type.
impl_val_resp_ : impl_val_resp string_eq_ val_eq_ D D.
impl_inst_resp :
   Pi IS1:iinstseq. Pi IS2:iinstseq. Pi IN1:inst. Pi IN2:inst.
      Pi CI:corresp_info.
      iinstseq_eq IS1 IS2 -> inst_eq IN1 IN2 -> impl_inst CI IS1 IN1
         -> impl_inst CI IS2 IN2 -> type.
impl_inst_resp_ : impl_inst_resp iinstseq_eq_ inst_eq_ D D.
impl_cond_resp :
   Pi IC1:icond. Pi IC2:icond. Pi C:cond.
      icond_eq IC1 IC2 -> impl_cond IC1 C -> impl_cond IC2 C -> type.
impl_cond_resp_ : impl_cond_resp icond_eq_ D D.
lm_present_resp :
   Pi LM1:locmap. Pi LM2:locmap. Pi M1:memory. Pi M2:memory.
      locmap_eq LM1 LM2 -> memory_eq M1 M2 -> lm_present LM1 M1
         -> lm_present LM2 M2 -> type.
- : lm_present_resp locmap_eq_ memory_eq_ D D.
implode_word_resp :
   Pi W1:string ww. Pi W2:string ww. Pi A1:binary wwb. Pi A2:binary wwb.
      string_eq W1 W2 -> binary_eq A1 A2 -> implode_word W1 A1
         -> implode_word W2 A2 -> type.
implode_word_resp_ : implode_word_resp string_eq_ binary_eq_ D D.
index_resp :
   Pi N:nat. Pi N':nat. Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S1':string N2.
      Pi S2:string N. Pi S2':string N'. Pi N3:nat. Pi N4:nat. Pi S3:string N3.
      Pi S3':string N4.
      nat_eq N N' -> string_eq S1 S1' -> string_eq S2 S2' -> string_eq S3 S3'
         -> index N S1 S2 S3 -> index N' S1' S2' S3' -> type.
index_resp_ : index_resp nat_eq_ string_eq_ string_eq_ string_eq_ D D.
string_exp_resp :
   Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S1':string N2. Pi N:nat. Pi N':nat.
      Pi N3:nat. Pi N4:nat. Pi S2:string N3. Pi S2':string N4.
      string_eq S1 S1' -> nat_eq N N' -> string_eq S2 S2' -> string_exp S1 N S2
         -> string_exp S1' N' S2' -> type.
- : string_exp_resp string_eq_ nat_eq_ string_eq_ D D.
load_resp :
   Pi ST:state. Pi ST':state. Pi N1:nat. Pi N2:nat. Pi E:eaddress N1.
      Pi E':eaddress N2. Pi W:string N1. Pi W':string N2.
      state_eq ST ST' -> eaddress_eq E E' -> string_eq W W' -> load ST E W
         -> load ST' E' W' -> type.
load_resp_ : load_resp state_eq_ eaddress_eq_ string_eq_ D D.
memory_collect_resp :
   Pi SS:sectset. Pi SS':sectset. Pi M1:memory. Pi M1':memory. Pi M2:memory.
      Pi M2':memory.
      sectset_eq SS SS' -> memory_eq M1 M1' -> memory_eq M2 M2'
         -> memory_collect SS M1 M2 -> memory_collect SS' M1' M2' -> type.
memory_collect_resp_ :
   memory_collect_resp sectset_eq_ memory_eq_ memory_eq_ D D.
is_valid_addr*_resp :
   Pi H1:memory. Pi H2:memory. Pi A1:binary wwb. Pi A2:binary wwb.
      Pi A1':binary wwb. Pi A2':binary wwb.
      memory_eq H1 H2 -> binary_eq A1 A2 -> binary_eq A1' A2'
         -> is_valid_addr* H1 A1 A1' -> is_valid_addr* H2 A2 A2' -> type.
- : is_valid_addr*_resp memory_eq_ binary_eq_ binary_eq_ D D.
is_valid_addr_resp :
   Pi H1:memory. Pi H2:memory. Pi A1:binary wwb. Pi A2:binary wwb.
      Pi A1':binary wwb. Pi A2':binary wwb.
      memory_eq H1 H2 -> binary_eq A1 A2 -> binary_eq A1' A2'
         -> is_valid_addr H1 A1 A1' -> is_valid_addr H2 A2 A2' -> type.
- : is_valid_addr_resp memory_eq_ binary_eq_ binary_eq_ D D.
is_invalid_addr_resp :
   Pi H1:memory. Pi H2:memory. Pi A1:binary wwb. Pi A2:binary wwb.
      Pi A1':binary wwb. Pi A2':binary wwb.
      memory_eq H1 H2 -> binary_eq A1 A2 -> binary_eq A1' A2'
         -> is_invalid_addr H1 A1 A1' -> is_invalid_addr H2 A2 A2' -> type.
- : is_invalid_addr_resp memory_eq_ binary_eq_ binary_eq_ D D.
get_valid_addr_resp :
   Pi OR1:oracle. Pi OR2:oracle. Pi H1:memory. Pi H2:memory. Pi B1:binary wwb.
      Pi B2:binary wwb. Pi B1':binary wwb. Pi B2':binary wwb. Pi BIT1:bit.
      Pi BIT2:bit. Pi A1:binary wwb. Pi A2:binary wwb. Pi OR1':oracle.
      Pi OR2':oracle.
      oracle_eq OR1 OR2 -> memory_eq H1 H2 -> binary_eq B1 B2
         -> binary_eq B1' B2' -> bit_eq BIT1 BIT2 -> binary_eq A1 A2
         -> oracle_eq OR1' OR2' -> get_valid_addr OR1 H1 B1 B1' BIT1 A1 OR1'
         -> get_valid_addr OR2 H2 B2 B2' BIT2 A2 OR2' -> type.
- :
   get_valid_addr_resp oracle_eq_ memory_eq_ binary_eq_ binary_eq_ bit_eq_
      binary_eq_ oracle_eq_ D D.
mextend*_resp :
   Pi H1:memory. Pi H2:memory. Pi B1:binary wwb. Pi B2:binary wwb. Pi N1:nat.
      Pi N2:nat. Pi SECT1:section N1. Pi SECT2:section N2. Pi H1':memory.
      Pi H2':memory.
      memory_eq H1 H2 -> binary_eq B1 B2 -> section_eq SECT1 SECT2
         -> memory_eq H1' H2' -> mextend* H1 B1 SECT1 H1'
         -> mextend* H2 B2 SECT2 H2' -> type.
- : mextend*_resp memory_eq_ binary_eq_ section_eq_ memory_eq_ D D.
segment_of_resp :
   Pi H1:memory. Pi H2:memory. Pi A1:binary wwb. Pi A2:binary wwb.
      Pi SEG1:segment. Pi SEG2:segment.
      memory_eq H1 H2 -> binary_eq A1 A2 -> segment_eq SEG1 SEG2
         -> segment_of H1 A1 SEG1 -> segment_of H2 A2 SEG2 -> type.
- : segment_of_resp memory_eq_ binary_eq_ segment_eq_ D D.
mload*_resp :
   Pi H1:memory. Pi H2:memory. Pi A1:binary wwb. Pi A2:binary wwb. Pi N1:nat.
      Pi N2:nat. Pi S1:string N1. Pi S2:string N2.
      memory_eq H1 H2 -> binary_eq A1 A2 -> string_eq S1 S2 -> mload* H1 A1 S1
         -> mload* H2 A2 S2 -> type.
- : mload*_resp memory_eq_ binary_eq_ string_eq_ D D.
mload_resp :
   Pi ST1:state. Pi ST2:state. Pi A1:binary wwb. Pi A2:binary wwb. Pi N1:nat.
      Pi N2:nat. Pi S1:string N1. Pi S2:string N2.
      state_eq ST1 ST2 -> binary_eq A1 A2 -> nat_eq N1 N2 -> string_eq S1 S2
         -> mload ST1 A1 N1 S1 -> mload ST2 A2 N2 S2 -> type.
mload_resp_ : mload_resp state_eq_ binary_eq_ nat_eq_ string_eq_ D D.
mstore_resp :
   Pi ST1:state. Pi ST2:state. Pi A1:binary wwb. Pi A2:binary wwb. Pi N1:nat.
      Pi N2:nat. Pi S1:string N1. Pi S2:string N2. Pi ST1':state. Pi ST2':state.
      state_eq ST1 ST2 -> binary_eq A1 A2 -> string_eq S1 S2
         -> state_eq ST1' ST2' -> mstore ST1 A1 S1 ST1' -> mstore ST2 A2 S2 ST2'
         -> type.
mstore_resp_ : mstore_resp state_eq_ binary_eq_ string_eq_ state_eq_ D D.
mextend_resp :
   Pi ST1:state. Pi ST2:state. Pi N1:nat. Pi N2:nat. Pi S1:string N1.
      Pi S2:string N2. Pi ST1':state. Pi ST2':state. Pi A1:binary wwb.
      Pi A2:binary wwb. Pi BIT1:bit. Pi BIT2:bit. Pi SEG:segment.
      state_eq ST1 ST2 -> string_eq S1 S2 -> state_eq ST1' ST2'
         -> binary_eq A1 A2 -> bit_eq BIT1 BIT2
         -> mextend ST1 SEG S1 ST1' A1 BIT1 -> mextend ST2 SEG S2 ST2' A2 BIT2
         -> type.
- : mextend_resp state_eq_ string_eq_ state_eq_ binary_eq_ bit_eq_ D D.
oload_resp :
   Pi ST:state. Pi ST':state. Pi N1:nat. Pi N2:nat. Pi O:oper N1. Pi O':oper N2.
      Pi W:string N1. Pi W':string N2.
      state_eq ST ST' -> oper_eq O O' -> string_eq W W' -> oload ST O W
         -> oload ST' O' W' -> type.
oload_resp_ : oload_resp state_eq_ oper_eq_ string_eq_ D D.
parse_modrm_resp :
   Pi B:binary bw. Pi B':binary bw. Pi B1:binary 2'. Pi B1':binary 2'.
      Pi B2:binary 3'. Pi B2':binary 3'. Pi B3:binary 3'. Pi B3':binary 3'.
      binary_eq B B' -> binary_eq B1 B1' -> binary_eq B2 B2' -> binary_eq B3 B3'
         -> parse_modrm B B1 B2 B3 -> parse_modrm B' B1' B2' B3' -> type.
parse_modrm_resp_ :
   parse_modrm_resp binary_eq_ binary_eq_ binary_eq_ binary_eq_ D D.
getflags_resp :
   Pi ST1:state. Pi ST2:state. Pi RF1:flags. Pi RF2:flags.
      state_eq ST1 ST2 -> flags_eq RF1 RF2 -> getflags ST1 RF1
         -> getflags ST2 RF2 -> type.
- : getflags_resp state_eq_ flags_eq_ D D.
geteip_resp :
   Pi ST:state. Pi ST':state. Pi A:binary wwb. Pi A':binary wwb.
      state_eq ST ST' -> binary_eq A A' -> geteip ST A -> geteip ST' A' -> type.
geteip_resp_ : geteip_resp state_eq_ binary_eq_ D D.
getoracle_resp :
   Pi ST:state. Pi ST':state. Pi OR:oracle. Pi OR':oracle.
      state_eq ST ST' -> oracle_eq OR OR' -> getoracle ST OR
         -> getoracle ST' OR' -> type.
- : getoracle_resp state_eq_ oracle_eq_ D D.
putflags_resp :
   Pi ST:state. Pi ST':state. Pi F:flags. Pi F':flags. Pi ST1:state.
      Pi ST1':state.
      state_eq ST ST' -> flags_eq F F' -> state_eq ST1 ST1' -> putflags ST F ST1
         -> putflags ST' F' ST1' -> type.
putflags_resp_ : putflags_resp state_eq_ flags_eq_ state_eq_ D D.
puteip_resp :
   Pi ST:state. Pi ST':state. Pi A:binary wwb. Pi A':binary wwb. Pi ST1:state.
      Pi ST1':state.
      state_eq ST ST' -> binary_eq A A' -> state_eq ST1 ST1' -> puteip ST A ST1
         -> puteip ST' A' ST1' -> type.
puteip_resp_ : puteip_resp state_eq_ binary_eq_ state_eq_ D D.
putmem_resp :
   Pi ST1:state. Pi ST2:state. Pi M1:memory. Pi M2:memory. Pi ST1':state.
      Pi ST2':state.
      state_eq ST1 ST2 -> memory_eq M1 M2 -> state_eq ST1' ST2'
         -> putmem ST1 M1 ST1' -> putmem ST2 M2 ST2' -> type.
putmem_resp_ : putmem_resp state_eq_ memory_eq_ state_eq_ D D.
putregs_resp :
   Pi ST:state. Pi ST':state. Pi R:regs numregs. Pi R':regs numregs.
      Pi ST1:state. Pi ST1':state.
      state_eq ST ST' -> regs_eq R R' -> state_eq ST1 ST1' -> putregs ST R ST1
         -> putregs ST' R' ST1' -> type.
putregs_resp_ : putregs_resp state_eq_ regs_eq_ state_eq_ D D.
putoracle_resp :
   Pi ST:state. Pi ST':state. Pi OR:oracle. Pi OR':oracle. Pi ST1:state.
      Pi ST1':state.
      state_eq ST ST' -> oracle_eq OR OR' -> state_eq ST1 ST1'
         -> putoracle ST OR ST1 -> putoracle ST' OR' ST1' -> type.
- : putoracle_resp state_eq_ oracle_eq_ state_eq_ D D.
result_flags_of_resp :
   Pi N1:nat. Pi N2:nat. Pi AW:binary (s N1). Pi AW':binary (s N2). Pi CF:bit.
      Pi CF':bit. Pi OF:bit. Pi OF':bit. Pi RF:result_flags.
      Pi RF':result_flags.
      binary_eq AW AW' -> bit_eq CF CF' -> bit_eq OF OF'
         -> result_flags_eq RF RF' -> result_flags_of AW CF OF RF
         -> result_flags_of AW' CF' OF' RF' -> type.
result_flags_of_resp_ :
   result_flags_of_resp binary_eq_ bit_eq_ bit_eq_ result_flags_eq_ D D.
result_flags_resp :
   Pi F1:bit. Pi F1':bit. Pi F2:bit. Pi F2':bit. Pi F3:bit. Pi F3':bit.
      Pi F4:bit. Pi F4':bit.
      bit_eq F1 F1' -> bit_eq F2 F2' -> bit_eq F3 F3' -> bit_eq F4 F4'
         -> result_flags_eq (result_flags_ F1 F2 F3 F4)
               (result_flags_ F1' F2' F3' F4') -> type.
result_flags_resp_ :
   result_flags_resp bit_eq_ bit_eq_ bit_eq_ bit_eq_ result_flags_eq_.
rload_resp :
   Pi ST:state. Pi ST':state. Pi N:nat. Pi N':nat. Pi W:string ww.
      Pi W':string ww.
      state_eq ST ST' -> nat_eq N N' -> string_eq W W' -> rload ST N W
         -> rload ST' N' W' -> type.
rload_resp_ : rload_resp state_eq_ nat_eq_ string_eq_ D D.
rload*_resp :
   Pi N1:nat. Pi R:regs N1. Pi R':regs N1. Pi N:nat. Pi N':nat. Pi W:string ww.
      Pi W':string ww.
      regs_eq R R' -> nat_eq N N' -> string_eq W W' -> rload* R N W
         -> rload* R' N' W' -> type.
rload*_resp_ : rload*_resp regs_eq_ nat_eq_ string_eq_ D D.
rstore_resp :
   Pi ST1:state. Pi ST2:state. Pi REG1:nat. Pi REG2:nat. Pi W1:string ww.
      Pi W2:string ww. Pi ST1':state. Pi ST2':state.
      state_eq ST1 ST2 -> nat_eq REG1 REG2 -> string_eq W1 W2
         -> state_eq ST1' ST2' -> rstore ST1 REG1 W1 ST1'
         -> rstore ST2 REG2 W2 ST2' -> type.
rstore_resp_ : rstore_resp state_eq_ nat_eq_ string_eq_ state_eq_ D D.
rstore*_resp :
   Pi N1:nat. Pi R:regs N1. Pi R':regs N1. Pi N:nat. Pi N':nat. Pi W:string ww.
      Pi W':string ww. Pi R1:regs N1. Pi R1':regs N1.
      regs_eq R R' -> nat_eq N N' -> string_eq W W' -> regs_eq R1 R1'
         -> rstore* R N W R1 -> rstore* R' N' W' R1' -> type.
rstore*_resp_ : rstore*_resp regs_eq_ nat_eq_ string_eq_ regs_eq_ D D.
store_resp :
   Pi ST:state. Pi ST':state. Pi N1:nat. Pi N2:nat. Pi E:eaddress N1.
      Pi E':eaddress N2. Pi W:string N1. Pi W':string N2. Pi ST1:state.
      Pi ST1':state.
      state_eq ST ST' -> eaddress_eq E E' -> string_eq W W' -> state_eq ST1 ST1'
         -> store ST E W ST1 -> store ST' E' W' ST1' -> type.
store_resp_ : store_resp state_eq_ eaddress_eq_ string_eq_ state_eq_ D D.
store_result_flags_resp :
   Pi ST:state. Pi ST':state. Pi RF:result_flags. Pi RF':result_flags.
      Pi ST1:state. Pi ST1':state.
      state_eq ST ST' -> result_flags_eq RF RF' -> state_eq ST1 ST1'
         -> store_result_flags ST RF ST1 -> store_result_flags ST' RF' ST1'
         -> type.
store_result_flags_resp_ :
   store_result_flags_resp state_eq_ result_flags_eq_ state_eq_ D D.
consume_bit_resp :
   Pi OR1:oracle. Pi OR2:oracle. Pi BIT1:bit. Pi BIT2:bit. Pi OR1':oracle.
      Pi OR2':oracle.
      oracle_eq OR1 OR2 -> bit_eq BIT1 BIT2 -> oracle_eq OR1' OR2'
         -> consume_bit OR1 BIT1 OR1' -> consume_bit OR2 BIT2 OR2' -> type.
- : consume_bit_resp oracle_eq_ bit_eq_ oracle_eq_ D D.
consume_resp :
   Pi OR1:oracle. Pi OR2:oracle. Pi N1:nat. Pi N2:nat. Pi B1:binary N1.
      Pi B2:binary N2. Pi OR1':oracle. Pi OR2':oracle.
      oracle_eq OR1 OR2 -> nat_eq N1 N2 -> binary_eq B1 B2
         -> oracle_eq OR1' OR2' -> consume OR1 N1 B1 OR1'
         -> consume OR2 N2 B2 OR2' -> type.
- : consume_resp oracle_eq_ nat_eq_ binary_eq_ oracle_eq_ D D.
consume_string_resp :
   Pi OR1:oracle. Pi OR2:oracle. Pi N1:nat. Pi N2:nat. Pi S1:string N1.
      Pi S2:string N2. Pi OR1':oracle. Pi OR2':oracle.
      oracle_eq OR1 OR2 -> nat_eq N1 N2 -> string_eq S1 S2
         -> oracle_eq OR1' OR2' -> consume_string OR1 N1 S1 OR1'
         -> consume_string OR2 N2 S2 OR2' -> type.
- : consume_string_resp oracle_eq_ nat_eq_ string_eq_ oracle_eq_ D D.
string_resp :
   Pi N1:nat. Pi N2:nat.
      nat_eq N1 N2
         -> Pi W1:string N1. Pi W2:string N2. string_eq W1 W2 -> type.
string_resp_ : string_resp nat_eq_ W W string_eq_.
imember_resp :
   Pi A1:binary wwb. Pi A1':binary wwb. Pi A2:binary wwb. Pi A2':binary wwb.
      Pi SS:sectset. Pi SS':sectset.
      binary_eq A1 A1' -> binary_eq A2 A2' -> sectset_eq SS SS'
         -> imember A1 A2 SS -> imember A1' A2' SS' -> type.
- : imember_resp binary_eq_ binary_eq_ sectset_eq_ D D.
inot_pointer_resp :
   Pi B1:binary wwb. Pi B1':binary wwb. Pi B2:binary wwb. Pi B2':binary wwb.
      Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi S':string N2.
      binary_eq B1 B1' -> binary_eq B2 B2' -> string_eq S S'
         -> inot_pointer B1 B2 S -> inot_pointer B1' B2' S' -> type.
- : inot_pointer_resp binary_eq_ binary_eq_ string_eq_ D D.
string_reachable_resp :
   Pi SS:sectset. Pi SS':sectset. Pi N1:nat. Pi N2:nat. Pi S:string N1.
      Pi S':string N2.
      sectset_eq SS SS' -> string_eq S S' -> string_reachable SS S
         -> string_reachable SS' S' -> type.
string_reachable_resp_ : string_reachable_resp sectset_eq_ string_eq_ D D.
read_sectset_resp :
   Pi M:memory. Pi M':memory. Pi OR:oracle. Pi OR':oracle. Pi SS:sectset.
      Pi SS':sectset. Pi OR1:oracle. Pi OR1':oracle.
      memory_eq M M' -> oracle_eq OR OR' -> sectset_eq SS SS'
         -> oracle_eq OR1 OR1' -> read_sectset M OR SS OR1
         -> read_sectset M' OR' SS' OR1' -> type.
- : read_sectset_resp memory_eq_ oracle_eq_ sectset_eq_ oracle_eq_ D D.
fetch_resp :
   Pi ST1:state. Pi ST2:state. Pi I1:iinst. Pi I2:iinst.
      state_eq ST1 ST2 -> iinst_eq I1 I2 -> fetch ST1 I1 -> fetch ST2 I2 -> type.
fetch_resp_ : fetch_resp state_eq_ iinst_eq_ D D.
next_resp :
   Pi ST1:state. Pi ST2:state. Pi A1:binary wwb. Pi A2:binary wwb.
      state_eq ST1 ST2 -> binary_eq A1 A2 -> next ST1 A1 -> next ST2 A2 -> type.
next_resp_ : next_resp state_eq_ binary_eq_ D D.
transition*_resp :
   Pi I:iinst. Pi I':iinst. Pi ST:state. Pi ST':state. Pi ST1:state.
      Pi ST1':state.
      iinst_eq I I' -> state_eq ST ST' -> state_eq ST1 ST1'
         -> transition* I ST ST1 -> transition* I' ST' ST1' -> type.
transition*_resp_ : transition*_resp iinst_eq_ state_eq_ state_eq_ D D.
transition_runfac_resp :
   Pi N1:nat. Pi N2:nat. Pi IRF:runfac N1. Pi IRF':runfac N2. Pi ST1:state.
      Pi ST1':state. Pi ST2:state. Pi ST2':state.
      runfac_eq IRF IRF' -> state_eq ST1 ST1' -> state_eq ST2 ST2'
         -> transition_runfac IRF ST1 ST2 -> transition_runfac IRF' ST1' ST2'
         -> type.
transition_runfac_resp_ :
   transition_runfac_resp runfac_eq_ state_eq_ state_eq_ D D.
notin_lm_resp :
   Pi A1:binary wwb. Pi A2:binary wwb. Pi LM1:locmap. Pi LM2:locmap.
      binary_eq A1 A2 -> locmap_eq LM1 LM2 -> notin_lm A1 LM1 -> notin_lm A2 LM2
         -> type.
- : notin_lm_resp binary_eq_ locmap_eq_ D D.
impl_seg_resp :
   Pi SEG1:segment. Pi SEG2:segment. Pi SEG1':seg. Pi SEG2':seg.
      segment_eq SEG1 SEG2 -> seg_eq SEG1' SEG2' -> impl_seg SEG1 SEG1'
         -> impl_seg SEG2 SEG2' -> type.
- : impl_seg_resp segment_eq_ seg_eq_ D D.
leq_2 : Pi N:nat. Pi N':nat. leq N N' -> leq (2+ N) (2+ N')
   = \N:nat. \N':nat. \d:leq N N'. leq_s (leq_s d).
leq_3 : Pi N:nat. Pi N':nat. leq N N' -> leq (3+ N) (3+ N')
   = \N:nat. \N':nat. \d:leq N N'. leq_s (leq_2 d).
leq_4 : Pi N:nat. Pi N':nat. leq N N' -> leq (4+ N) (4+ N')
   = \N:nat. \N':nat. \d:leq N N'. leq_s (leq_3 d).
leq_5 : Pi N:nat. Pi N':nat. leq N N' -> leq (5+ N) (5+ N')
   = \N:nat. \N':nat. \d:leq N N'. leq_s (leq_4 d).
leq_6 : Pi N:nat. Pi N':nat. leq N N' -> leq (6+ N) (6+ N')
   = \N:nat. \N':nat. \d:leq N N'. leq_s (leq_5 d).
leq_1s : Pi N1:nat. leq 1' (s N1) = \N1:nat. leq_s leq_z.
sum_2 : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum N1 N2 N3 -> sum (2+ N1) N2 (2+ N3)
   = \N1:nat. \N2:nat. \N3:nat. \d:sum N1 N2 N3. sum_s (sum_s d).
sum_3 : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum N1 N2 N3 -> sum (3+ N1) N2 (3+ N3)
   = \N1:nat. \N2:nat. \N3:nat. \d:sum N1 N2 N3. sum_s (sum_2 d).
sum_4 : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum N1 N2 N3 -> sum (4+ N1) N2 (4+ N3)
   = \N1:nat. \N2:nat. \N3:nat. \d:sum N1 N2 N3. sum_s (sum_3 d).
sum_5 : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum N1 N2 N3 -> sum (5+ N1) N2 (5+ N3)
   = \N1:nat. \N2:nat. \N3:nat. \d:sum N1 N2 N3. sum_s (sum_4 d).
sum_6 : Pi N1:nat. Pi N2:nat. Pi N3:nat. sum N1 N2 N3 -> sum (6+ N1) N2 (6+ N3)
   = \N1:nat. \N2:nat. \N3:nat. \d:sum N1 N2 N3. sum_s (sum_5 d).
index_1 :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi W:string N.
      Pi S':string N2. Pi B:binary bw.
      index N S W S' -> index (1+ N) (/ B S) (/ B W) S'
   = \N1:nat. \N2:nat. \N:nat. \S:string N1. \W:string N. \S':string N2.
        \B:binary bw. \x:index N S W S'. index_s x.
index_2 :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi W:string N.
      Pi S':string N2. Pi B1:binary bw. Pi B2:binary bw.
      index N S W S' -> index (2+ N) (/ B1 (/ B2 S)) (/ B1 (/ B2 W)) S'
   = \N1:nat. \N2:nat. \N:nat. \S:string N1. \W:string N. \S':string N2.
        \B1:binary bw. \B2:binary bw. \d:index N S W S'. index_s (index_1 d).
index_3 :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi W:string N.
      Pi S':string N2. Pi B1:binary bw. Pi B2:binary bw. Pi B3:binary bw.
      index N S W S' -> index (3+ N) (/ B1 (/ B2 (/ B3 S))) (/ B1 (/ B2 (/ B3 W))) S'
   = \N1:nat. \N2:nat. \N:nat. \S:string N1. \W:string N. \S':string N2.
        \B1:binary bw. \B2:binary bw. \B3:binary bw. \d:index N S W S'.
        index_s (index_2 d).
index_4 :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi W:string N.
      Pi S':string N2. Pi B1:binary bw. Pi B2:binary bw. Pi B3:binary bw.
      Pi B4:binary bw.
      index N S W S'
         -> index (4+ N) (/ B1 (/ B2 (/ B3 (/ B4 S)))) (/ B1 (/ B2 (/ B3 (/ B4 W)))) S'
   = \N1:nat. \N2:nat. \N:nat. \S:string N1. \W:string N. \S':string N2.
        \B1:binary bw. \B2:binary bw. \B3:binary bw. \B4:binary bw.
        \d:index N S W S'. index_s (index_3 d).
index_5 :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi W:string N.
      Pi S':string N2. Pi B1:binary bw. Pi B2:binary bw. Pi B3:binary bw.
      Pi B4:binary bw. Pi B5:binary bw.
      index N S W S'
         -> index (5+ N) (/ B1 (/ B2 (/ B3 (/ B4 (/ B5 S)))))
               (/ B1 (/ B2 (/ B3 (/ B4 (/ B5 W))))) S'
   = \N1:nat. \N2:nat. \N:nat. \S:string N1. \W:string N. \S':string N2.
        \B1:binary bw. \B2:binary bw. \B3:binary bw. \B4:binary bw.
        \B5:binary bw. \d:index N S W S'. index_s (index_4 d).
index_6 :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi W:string N.
      Pi S':string N2. Pi B1:binary bw. Pi B2:binary bw. Pi B3:binary bw.
      Pi B4:binary bw. Pi B5:binary bw. Pi B6:binary bw.
      index N S W S'
         -> index (6+ N) (/ B1 (/ B2 (/ B3 (/ B4 (/ B5 (/ B6 S))))))
               (/ B1 (/ B2 (/ B3 (/ B4 (/ B5 (/ B6 W)))))) S'
   = \N1:nat. \N2:nat. \N:nat. \S:string N1. \W:string N. \S':string N2.
        \B1:binary bw. \B2:binary bw. \B3:binary bw. \B4:binary bw.
        \B5:binary bw. \B6:binary bw. \d:index N S W S'. index_s (index_5 d).
represents_0_32 : represents 0' 0_32
   = represents_z
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil)))))))))))))))))))))))))))))))).
represents_1_32 : represents 1' 1_32
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
        (represents_z
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))))))))))))))))))))))))))).
represents_2_32 : represents 2' 2_32
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_001)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))))))))))))))))))))))))))
            (represents_z
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))))))))))))))))))))))))))))))).
represents_3_32 : represents 3' 3_32
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_100)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_001)
                    addbit_110))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))))))))))))))))))))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_010))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                (represents_z
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))))).
represents_4_32 : represents 4' 4_32
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_001)
                    addbit_101)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))))))))))))))))))))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_001)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                    (represents_z
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))))))))))))))))))))))))))))))))).
represents_5_32 : represents 5' 5_32
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_000)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_001)
                        addbit_101)
                    addbit_110))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))))))))))))))))))))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_010))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_001)
                            addbit_110))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_010))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                        (represents_z
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))))))).
represents_6_32 : represents 6' 6_32
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_001)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_000)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))))))))))))))))))))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_001)
                            addbit_101)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_001)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))))
                            (represents_z
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil)))))))))))))))))))))))))))))))))))))).
is_zero_0_32 : is_zero 0_32
   = is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))).
is_one_1_32 : is_one 1_32
   = is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))))))))))))))))))))))))).
add_4_1020_1024 :
   add 4_32
      (zero $ zero $ one' $ one' $ one' $ one' $ one' $ one' $ one' $ one'
          $ zero $ zero $ zero $ zero $ zero $ zero $ zero $ zero $ zero $ zero
          $ zero $ zero $ zero $ zero $ zero $ zero $ zero $ zero $ zero $ zero
          $ zero $ zero $ nil$)
      1024_32 zero
   = add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_001)
        addbit_011)
    addbit_011)
                                        addbit_011)
                                    addbit_011)
                                addbit_011)
                            addbit_011)
                        addbit_011)
                    addbit_110)
                addbit_000)
            addbit_000).
is_nonzero_1024_32 : is_nonzero 1024_32
   = is_nonzero_zero
        (is_nonzero_zero
            (is_nonzero_zero
                (is_nonzero_zero
                    (is_nonzero_zero
                        (is_nonzero_zero
                            (is_nonzero_zero
                                (is_nonzero_zero
                                    (is_nonzero_zero
                                        (is_nonzero_zero is_nonzero_one))))))))).
product_bytebits : product 1' bytebits bytebits
   = product_s
        (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))
        product_z.
product_ww : product 1' ww ww
   = product_s (sum_s (sum_s (sum_s (sum_s sum_z)))) product_z.
lt_ebx_esp : lt ebx esp = lt_s (lt_s (lt_s lt_z)).
sum_upto_gotsize : sum ww ww got_size = sum_s (sum_s (sum_s (sum_s sum_z))).
asts_1 :
   Pi N1:nat. Pi AS:astring. Pi S:string N1. Pi B:binary bw.
      astring_to_string AS S -> astring_to_string (| B AS) (/ B S)
   = \N1:nat. \AS:astring. \S:string N1. \B:binary bw.
        \x:astring_to_string AS S. astring_to_string_cons x.
asts_2 :
   Pi N1:nat. Pi AS:astring. Pi S:string N1. Pi B1:binary bw. Pi B2:binary bw.
      astring_to_string AS S -> astring_to_string (| B1 (| B2 AS)) (/ B1 (/ B2 S))
   = \N1:nat. \AS:astring. \S:string N1. \B1:binary bw. \B2:binary bw.
        \d:astring_to_string AS S.
        astring_to_string_cons (astring_to_string_cons d).
asts_3 :
   Pi N1:nat. Pi AS:astring. Pi S:string N1. Pi B1:binary bw. Pi B2:binary bw.
      Pi B3:binary bw.
      astring_to_string AS S
         -> astring_to_string (| B1 (| B2 (| B3 AS))) (/ B1 (/ B2 (/ B3 S)))
   = \N1:nat. \AS:astring. \S:string N1. \B1:binary bw. \B2:binary bw.
        \B3:binary bw. \d:astring_to_string AS S.
        astring_to_string_cons
           (astring_to_string_cons (astring_to_string_cons d)).
asts_4 :
   Pi N1:nat. Pi AS:astring. Pi S:string N1. Pi B1:binary bw. Pi B2:binary bw.
      Pi B3:binary bw. Pi B4:binary bw.
      astring_to_string AS S
         -> astring_to_string (| B1 (| B2 (| B3 (| B4 AS)))) (/ B1 (/ B2 (/ B3 (/ B4 S))))
   = \N1:nat. \AS:astring. \S:string N1. \B1:binary bw. \B2:binary bw.
        \B3:binary bw. \B4:binary bw. \d:astring_to_string AS S.
        astring_to_string_cons
           (astring_to_string_cons
               (astring_to_string_cons (astring_to_string_cons d))).
asts_5 :
   Pi N1:nat. Pi AS:astring. Pi S:string N1. Pi B1:binary bw. Pi B2:binary bw.
      Pi B3:binary bw. Pi B4:binary bw. Pi B5:binary bw.
      astring_to_string AS S
         -> astring_to_string (| B1 (| B2 (| B3 (| B4 (| B5 AS)))))
               (/ B1 (/ B2 (/ B3 (/ B4 (/ B5 S)))))
   = \N1:nat. \AS:astring. \S:string N1. \B1:binary bw. \B2:binary bw.
        \B3:binary bw. \B4:binary bw. \B5:binary bw. \d:astring_to_string AS S.
        astring_to_string_cons
           (astring_to_string_cons
               (astring_to_string_cons
                   (astring_to_string_cons (astring_to_string_cons d)))).
asts_6 :
   Pi N1:nat. Pi AS:astring. Pi S:string N1. Pi B1:binary bw. Pi B2:binary bw.
      Pi B3:binary bw. Pi B4:binary bw. Pi B5:binary bw. Pi B6:binary bw.
      astring_to_string AS S
         -> astring_to_string (| B1 (| B2 (| B3 (| B4 (| B5 (| B6 AS))))))
               (/ B1 (/ B2 (/ B3 (/ B4 (/ B5 (/ B6 S))))))
   = \N1:nat. \AS:astring. \S:string N1. \B1:binary bw. \B2:binary bw.
        \B3:binary bw. \B4:binary bw. \B5:binary bw. \B6:binary bw.
        \d:astring_to_string AS S.
        astring_to_string_cons
           (astring_to_string_cons
               (astring_to_string_cons
                   (astring_to_string_cons
                       (astring_to_string_cons (astring_to_string_cons d))))).
leq_2+ : Pi N:nat. leq N (2+ N) -> type.
- : leq_2+ N D <- leq_succ N D0 <- leq_succ (s N) D1 <- leq_trans D0 D1 D.
leq_3+ : Pi N:nat. leq N (3+ N) -> type.
- : leq_3+ N D <- leq_succ N D0 <- leq_2+ (s N) D1 <- leq_trans D0 D1 D.
leq_4+ : Pi N:nat. leq N (4+ N) -> type.
- : leq_4+ N D <- leq_succ N D0 <- leq_3+ (s N) D1 <- leq_trans D0 D1 D.
leq_5+ : Pi N:nat. leq N (5+ N) -> type.
- : leq_5+ N D <- leq_succ N D0 <- leq_4+ (s N) D1 <- leq_trans D0 D1 D.
leq_6+ : Pi N:nat. leq N (6+ N) -> type.
- : leq_6+ N D <- leq_succ N D0 <- leq_5+ (s N) D1 <- leq_trans D0 D1 D.
leq_7+ : Pi N:nat. leq N (7+ N) -> type.
- : leq_7+ N D <- leq_succ N D0 <- leq_6+ (s N) D1 <- leq_trans D0 D1 D.
leq_8+ : Pi N:nat. leq N (8+ N) -> type.
- : leq_8+ N D <- leq_succ N D0 <- leq_7+ (s N) D1 <- leq_trans D0 D1 D.
leq_9+ : Pi N:nat. leq N (9+ N) -> type.
- : leq_9+ N D <- leq_succ N D0 <- leq_8+ (s N) D1 <- leq_trans D0 D1 D.
leq_1+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (1+ M) -> type.
- : leq_1+_trans D D'' <- leq_succ N2 D' <- leq_trans D D' D''.
leq_2+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (2+ M) -> type.
- : leq_2+_trans D D'' <- leq_2+ N2 D' <- leq_trans D D' D''.
leq_3+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (3+ M) -> type.
- : leq_3+_trans D D'' <- leq_3+ N2 D' <- leq_trans D D' D''.
leq_4+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (4+ M) -> type.
- : leq_4+_trans D D'' <- leq_4+ N2 D' <- leq_trans D D' D''.
leq_5+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (5+ M) -> type.
- : leq_5+_trans D D'' <- leq_5+ N2 D' <- leq_trans D D' D''.
leq_6+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (6+ M) -> type.
- : leq_6+_trans D D'' <- leq_6+ N2 D' <- leq_trans D D' D''.
leq_7+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (7+ M) -> type.
- : leq_7+_trans D D'' <- leq_7+ N2 D' <- leq_trans D D' D''.
leq_8+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (8+ M) -> type.
- : leq_8+_trans D D'' <- leq_8+ N2 D' <- leq_trans D D' D''.
leq_9+_trans : Pi N:nat. Pi M:nat. leq N M -> leq N (9+ M) -> type.
- : leq_9+_trans D D'' <- leq_9+ N2 D' <- leq_trans D D' D''.
sum_shift4' :
   Pi N1:nat. Pi N2:nat. Pi N3:nat.
      sum (4+ N1) N2 N3 -> sum N1 (4+ N2) N3 -> type.
- :
   sum_shift4' D4 D0
      <- sum_shift' D1 D0
      <- sum_shift' D2 D1
      <- sum_shift' D3 D2
      <- sum_shift' D4 D3.
extract_implement_parts :
   Pi CI:corresp_info. Pi H:memory. Pi R:regs numregs. Pi FR:flags.
      Pi Aeip:binary wwb. Pi OR:oracle. Pi H':heap. Pi N:nat. Pi Vstack:val.
      Pi CC:conds. Pi R':rfile* regcount. Pi PC:pc. Pi H1:memory.
      Pi Wesp:string ww. Pi AWesp:binary wwb. Pi H2:memory.
      impl_machine CI (state_ H R FR Aeip OR)
         (mach H' (lc N) (rf Vstack CC R') PC) -> impl_heap CI H1 H'
         -> impl_rfile CI R R' Wesp -> implode_word Wesp AWesp
         -> impl_stack CI H1 AWesp Vstack H2 -> impl_conds FR CC
         -> impl_pc CI Aeip PC -> impl_got_ptr CI H2 H -> memory_wf 0_32 H
         -> corresp_info_valid CI (lc N) H H' -> type.
extract_implement_parts_ :
   extract_implement_parts
      (impl_ Dciv Dordered Dgot Dipc Diconds Distack Dimp Dirfile Diheap) Diheap
      Dirfile Dimp Distack Diconds Dipc Dgot Dordered Dciv.
extract_stack :
   Pi Nlimit:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi H:memory.
      Pi Wesp:binary wwb. Pi V:val. Pi H2:memory. Pi Blimit:binary wwb.
      Pi B1:binary wwb. Pi Aend:binary wwb. Pi B:binary wwb. Pi Nsp:nat.
      Pi N1:nat. Pi S:string Nlimit. Pi S1:string Nsp. Pi Sstack:string N1.
      Pi Atrap:binary wwb. Pi Noverflow_lim:nat. Pi H1:memory.
      impl_stack (corresp_info_ Nlimit Astart LM IM) H Wesp V H2
         -> represents Nlimit Blimit -> add Blimit overflow_lim B1 zero
         -> add Astart Blimit Aend zero -> add Astart B Wesp zero
         -> represents Nsp B -> index Nsp S S1 Sstack
         -> impl_val (corresp_info_ Nlimit Astart LM IM) Sstack V
         -> add Atrap overflow_lim Astart zero
         -> represents Noverflow_lim overflow_lim -> stack_absent H
         -> notin_lm Atrap LM -> notin_lm Astart LM
         -> mextend* H Atrap (section_reserved rsection_trappage) H1
         -> mextend* H1 Astart (section_valid ss S) H2 -> type.
- :
   extract_stack (impl_stack_ D14 D13 D12 D11 D10 D9 D8 D7 D6 D5 D4 D3 D2 D1) D1
      D2 D3 D4 D5 D6 D7 D8 D9 D10 D11 D12 D13 D14.
extract_got_ptr :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi H:memory.
      Pi H2:memory. Pi N1:nat. Pi H1:memory. Pi Sgot:string N1.
      Pi Wgot:binary wwb.
      impl_got_ptr (corresp_info_ Nlim Astart LM IM) H H2
         -> impl_runfacs number_runfacs IM LM H H1 Sgot -> lookup_gotptr IM Wgot
         -> notin_lm Wgot LM -> mextend* H1 Wgot (section_valid cs Sgot) H2
         -> type.
- : extract_got_ptr (impl_got_ptr_ D4 D3 D2 D1) D1 D2 D3 D4.
extract_impl_pc :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi Aeip:binary wwb. Pi L:loc. Pi N:nat. Pi Cstart:binary wwb. Pi B1:bit.
      Pi B:binary wwb. Pi B2:bit.
      impl_pc (corresp_info_ Nlim Astart LM IM) Aeip (pc_ L N)
         -> lookup_loc LM L Cstart B1 -> represents N B -> add Cstart B Aeip B2
         -> type.
extract_impl_pc_ : extract_impl_pc (impl_pc_ Dadd Drep Dloc) Dloc Drep Dadd.
extract_next :
   Pi ST:state. Pi A':binary wwb. Pi A:binary wwb. Pi H:memory. Pi N1:nat.
      Pi S:string N1. Pi N2:nat. Pi I:iinst. Pi N:nat. Pi S1:string N2.
      Pi B:binary wwb. Pi B1:bit.
      next ST A' -> geteip ST A -> getmem ST H -> mload* H A S
         -> idecode S I N S1 -> represents N B -> add A B A' B1 -> type.
- :
   extract_next (next_ Dadd Drep Didec Dml Dgm Dge) Dge Dgm Dml Didec Drep Dadd.
puteip_geteip :
   Pi ST:state. Pi A:binary wwb. Pi ST':state.
      puteip ST A ST' -> geteip ST' A -> type.
- : puteip_geteip puteip_ geteip_.
getmem_puteip_postpone :
   Pi ST:state. Pi M:memory. Pi A:binary wwb. Pi ST':state.
      getmem ST M -> puteip ST A ST' -> getmem ST' M -> type.
- : getmem_puteip_postpone getmem_ puteip_ getmem_.
rstore_eip :
   Pi ST:state. Pi A:binary wwb. Pi N1:nat. Pi S1:string ww. Pi ST':state.
      geteip ST A -> rstore ST N1 S1 ST' -> geteip ST' A -> type.
- : rstore_eip geteip_ (rstore_ X1 X2 X3) geteip_.
mstore_eip :
   Pi ST:state. Pi A:binary wwb. Pi N1:nat. Pi B1:binary wwb. Pi S1:string N1.
      Pi ST':state. geteip ST A -> mstore ST B1 S1 ST' -> geteip ST' A -> type.
- : mstore_eip geteip_ (mstore_ X1 X2 X3) geteip_.
storeflags_eip :
   Pi ST:state. Pi A:binary wwb. Pi X1:result_flags. Pi ST':state.
      geteip ST A -> store_result_flags ST X1 ST' -> geteip ST' A -> type.
- : storeflags_eip geteip_ (store_result_flags_ putflags_) geteip_.
storeflags_rfile_ind :
   Pi ST:state. Pi R:nat. Pi W:string ww. Pi X1:result_flags. Pi ST':state.
      rload ST R W -> store_result_flags ST X1 ST' -> rload ST' R W -> type.
- :
   storeflags_rfile_ind (rload_ Drl getregs_) (store_result_flags_ putflags_)
      (rload_ Drl getregs_).
puteip_rfile_ind :
   Pi ST:state. Pi R:nat. Pi W:string ww. Pi B1:binary wwb. Pi ST':state.
      rload ST R W -> puteip ST B1 ST' -> rload ST' R W -> type.
- : puteip_rfile_ind (rload_ Drl getregs_) puteip_ (rload_ Drl getregs_).
memory_rfile_ind :
   Pi ST:state. Pi R:nat. Pi W:string ww. Pi N1:nat. Pi B1:binary wwb.
      Pi S1:string N1. Pi ST':state.
      rload ST R W -> mstore ST B1 S1 ST' -> rload ST' R W -> type.
- :
   memory_rfile_ind (rload_ Drl getregs_) (mstore_ putmem_ X1 getmem_)
      (rload_ Drl getregs_).
puteip_mem_ind :
   Pi ST:state. Pi A:binary wwb. Pi N:nat. Pi S:string N. Pi B1:binary wwb.
      Pi ST':state.
      mload ST A N S -> puteip ST B1 ST' -> mload ST' A N S -> type.
- :
   puteip_mem_ind (mload_ Dindex Dml getmem_) puteip_
      (mload_ Dindex Dml getmem_).
rstore_memory_ind :
   Pi ST:state. Pi H:memory. Pi N1:nat. Pi S1:string ww. Pi ST':state.
      getmem ST H -> rstore ST N1 S1 ST' -> getmem ST' H -> type.
- : rstore_memory_ind getmem_ (rstore_ putregs_ X1 getregs_) getmem_.
storeflags_memory_ind :
   Pi ST:state. Pi H:memory. Pi X1:result_flags. Pi ST':state.
      getmem ST H -> store_result_flags ST X1 ST' -> getmem ST' H -> type.
- : storeflags_memory_ind getmem_ (store_result_flags_ putflags_) getmem_.
puteip_memory_ind :
   Pi ST:state. Pi H:memory. Pi B1:binary wwb. Pi ST':state.
      getmem ST H -> puteip ST B1 ST' -> getmem ST' H -> type.
- : puteip_memory_ind getmem_ puteip_ getmem_.
puteip_mstore_ind :
   Pi ST:state. Pi Aeip:binary wwb. Pi ST1:state. Pi N1:nat. Pi A:binary wwb.
      Pi S:string N1. Pi ST2:state. Pi ST3:state.
      puteip ST Aeip ST1 -> mstore ST A S ST2 -> puteip ST2 Aeip ST3
         -> mstore ST1 A S ST3 -> type.
- :
   puteip_mstore_ind puteip_ (mstore_ putmem_ Dmst getmem_) puteip_
      (mstore_ putmem_ Dmst getmem_).
getmem_implies_can_puteip :
   Pi ST:state. Pi H:memory. Pi ST1:state.
      getmem ST H
         -> Pi Aeip:binary wwb. puteip ST Aeip ST1 -> getmem ST1 H -> type.
- : getmem_implies_can_puteip getmem_ B2 puteip_ getmem_.
false_implies_oracle_eq :
   Pi OR:oracle. Pi OR':oracle. false -> oracle_eq OR OR' -> type.
consume_preserves_impl :
   Pi CI:corresp_info. Pi H:memory. Pi R:regs numregs. Pi FR:flags.
      Pi PC:binary wwb. Pi OR1:oracle. Pi H':heap. Pi L:loc. Pi R':rfile.
      Pi PC':pc.
      impl_machine CI (state_ H R FR PC OR1) (mach H' L R' PC')
         -> Pi OR:oracle.
                impl_machine CI (state_ H R FR PC OR) (mach H' L R' PC') -> type.
consume_preserves_impl_ :
   consume_preserves_impl (impl_ D1 D2 D3 D4 D5 D6 D7 D8 D9) OR2
      (impl_ D1 D2 D3 D4 D5 D6 D7 D8 D9).
can_impl_pc :
   Pi CI:corresp_info. Pi Aeip:binary wwb. Pi PC:pc. Pi PC1:pc.
      impl_pc CI Aeip PC -> Pi Aeip1:binary wwb. impl_pc CI Aeip1 PC1 -> type.
- :
   can_impl_pc (impl_pc_ Dadd Drep Dlook) Aeip1 (impl_pc_ Dadd1 Drep1 Dlook)
      <- can_add' B2 B1 Aeip1 B3 Dadd1
      <- can_represents1 B1 N1 Drep1.
can_putflags :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi F:flags. Pi CC:conds. Pi ST':state. Pi R':rfile.
      impl_machine CI ST (mach H L R PC) -> impl_conds F CC -> putflags ST F ST'
         -> ccupdate R CC R' -> impl_machine CI ST' (mach H L R' PC) -> type.
- :
   can_putflags
      (impl_ Dvalid Dmwf Digot Dipc Diconds Distack Dimp Dirfile Diheap)
      Diconds1 putflags_ ccupdate_
      (impl_ Dvalid Dmwf Digot Dipc Diconds1 Distack Dimp Dirfile Diheap).
getflags_fun :
   Pi ST:state. Pi F1:flags. Pi F2:flags.
      getflags ST F1 -> getflags ST F2 -> flags_eq F1 F2 -> type.
- : getflags_fun getflags_ getflags_ flags_eq_.
getoracle_fun :
   Pi ST:state. Pi OR1:oracle. Pi OR2:oracle.
      getoracle ST OR1 -> getoracle ST OR2 -> oracle_eq OR1 OR2 -> type.
- : getoracle_fun getoracle_ getoracle_ oracle_eq_.
consume_bit_fun :
   Pi OR:oracle. Pi BIT:bit. Pi OR1:oracle. Pi BIT':bit. Pi OR1':oracle.
      consume_bit OR BIT OR1 -> consume_bit OR BIT' OR1' -> bit_eq BIT BIT'
         -> oracle_eq OR1 OR1' -> type.
-nil : consume_bit_fun consume_nil consume_nil bit_eq_ oracle_eq_.
-cons : consume_bit_fun consume_cons consume_cons bit_eq_ oracle_eq_.
consume_fun :
   Pi OR:oracle. Pi N:nat. Pi B:binary N. Pi OR1:oracle. Pi B1:binary N.
      Pi OR2:oracle.
      consume OR N B OR1 -> consume OR N B1 OR2 -> binary_eq B B1
         -> oracle_eq OR1 OR2 -> type.
- : consume_fun consume_z consume_z binary_eq_ oracle_eq_.
- :
   consume_fun (consume_s Dconsume Dconsbit) (consume_s Dconsume' Dconsbit')
      Dbineq1 Doreq1
      <- consume_bit_fun Dconsbit Dconsbit' Dbiteq Doreq
      <- consume_resp Doreq nat_eq_ binary_eq_ oracle_eq_ Dconsume Dconsume''
      <- consume_fun Dconsume'' Dconsume' Dbineq Doreq1
      <- binary_eq_cons Dbiteq Dbineq Dbineq1.
consume_string_fun :
   Pi OR:oracle. Pi N:nat. Pi S1:string N. Pi OR1:oracle. Pi S2:string N.
      Pi OR2:oracle.
      consume_string OR N S1 OR1 -> consume_string OR N S2 OR2
         -> string_eq S1 S2 -> oracle_eq OR1 OR2 -> type.
- : consume_string_fun consume_string_z consume_string_z string_eq_ oracle_eq_.
- :
   consume_string_fun (consume_string_s Dcss Dcons)
      (consume_string_s Dcss' Dcons') Dstreq2 Doreq1
      <- consume_fun Dcons Dcons' Dbeq Doreq
      <- consume_string_resp Doreq nat_eq_ string_eq_ oracle_eq_ Dcss Dcss''
      <- consume_string_fun Dcss'' Dcss' Dstreq1 Doreq1
      <- string_eq_cons Dstreq1 Dbeq Dstreq2.
st_consume_fun :
   Pi ST:state. Pi N:nat. Pi B1:binary N. Pi ST1:state. Pi B2:binary N.
      Pi ST1':state.
      st_consume ST N B1 ST1 -> st_consume ST N B2 ST1' -> binary_eq B1 B2
         -> state_eq ST1 ST1' -> type.
st_consume_fun_ :
   st_consume_fun (st_consume_ Dc) (st_consume_ Dc') Dbeq Dsteq
      <- consume_fun Dc Dc' Dbeq Doeq
      <- state_resp memory_eq_ regs_eq_ binary_eq_ flags_eq_ Doeq Dsteq.
putoracle_fun :
   Pi ST:state. Pi OR:oracle. Pi ST1:state. Pi ST1':state.
      putoracle ST OR ST1 -> putoracle ST OR ST1' -> state_eq ST1 ST1' -> type.
- : putoracle_fun putoracle_ putoracle_ state_eq_.
putflags_fun :
   Pi ST:state. Pi F:flags. Pi ST1:state. Pi ST1':state.
      putflags ST F ST1 -> putflags ST F ST1' -> state_eq ST1 ST1' -> type.
putflags_fun_ : putflags_fun putflags_ putflags_ state_eq_.
can_consume_bit :
   Pi BIT:bit. Pi OR':oracle. Pi OR:oracle. consume_bit OR BIT OR' -> type.
-nil : can_consume_bit oracle_nil consume_nil.
-cons : can_consume_bit (oracle_cons BIT OR) consume_cons.
can_consume :
   Pi OR':oracle. Pi OR:oracle. Pi N:nat. Pi B:binary N.
      consume OR N B OR' -> type.
- : can_consume OR1 z nil$ consume_z.
- :
   can_consume OR (s N) ($ B2 B1) (consume_s Dconsume Dconsbit)
      <- can_consume_bit OR Dconsbit
      <- can_consume OR2 N B1 Dconsume.
can_consume_string :
   Pi OR':oracle. Pi OR:oracle. Pi N:nat. Pi S:string N.
      consume_string OR N S OR' -> type.
- : can_consume_string OR1 z # consume_string_z.
- :
   can_consume_string OR (s N) (/ B S) (consume_string_s Dconsst Dcons)
      <- can_consume OR bw B Dcons
      <- can_consume_string OR2 N S Dconsst.
can_st_consume :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi ST':state.
      impl_machine CI ST (mach H L R PC)
         -> Pi N:nat. Pi B:binary N.
                st_consume ST N B ST' -> impl_machine CI ST' (mach H L R PC)
                   -> type.
- :
   can_st_consume Dimach N B (st_consume_ Dconsume)
      (impl_ Dordered Dgot Dipc Dicond Distack Dimp Direg Dicv Diheap)
      <- extract_implement_parts Dimach Diheap Dicv Direg Dimp Distack Dicond
            Dipc Dgot Dordered
      <- can_consume OR2 N B Dconsume.
can_putoracle :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi ST1:state.
      impl_machine CI ST (mach H L R PC)
         -> Pi OR:oracle.
                putoracle ST OR ST1 -> impl_machine CI ST1 (mach H L R PC)
                   -> type.
- :
   can_putoracle Dimach OR putoracle_
      (impl_ Dordered Dgot Dipc Dicond Distack Dimp Direg Dicv Diheap)
      <- extract_implement_parts Dimach Diheap Dicv Direg Dimp Distack Dicond
            Dipc Dgot Dordered.
flags_to_result_flags : flags -> result_flags -> type.
flags_to_result_flags_ :
   flags_to_result_flags (flags_ CF ZF SF OF) (result_flags_ CF ZF SF OF).
false_implies_result_flags_eq :
   false
      -> Pi RF1:result_flags. Pi RF2:result_flags.
             result_flags_eq RF1 RF2 -> type.
can_impl_flag_dk : Pi B:bit. impl_flag B fdk -> type.
-o' : can_impl_flag_dk one' impl_flag_dks.
- : can_impl_flag_dk zero impl_flag_dku.
can_sf :
   Pi N1:nat. Pi B:binary (s N1). Pi SF:bit.
      determine_sign B SF -> alu_sf_of B SF -> type.
can_sf_1 : can_sf determine_sign_1 alu_sf_of_1.
can_sf_n : can_sf (determine_sign_n D) (alu_sf_of_n D') <- can_sf D D'.
can_zf :
   Pi N1:nat. Pi B:binary (s N1). Pi ZF:bit.
      determine_zero B ZF -> alu_zf_of B ZF -> type.
can_zf_yes : can_zf (determine_zero_yes Diz) (alu_zf_of_set Diz).
can_zf_no : can_zf (determine_zero_no Dinz) (alu_zf_of_clear Dinz).
can_impl_flag :
   Pi BIT:bit. Pi F:flag. bit_to_flag BIT F -> impl_flag BIT F -> type.
-zero : can_impl_flag bit_to_flag_zero impl_flag_unset.
-one : can_impl_flag bit_to_flag_one impl_flag_set.
can_resflags :
   Pi N1:nat. Pi B:binary (s N1). Pi CARRY:bit. Pi OVERFLOW:bit. Pi CC:conds.
      Pi RF:result_flags. Pi FR:flags.
      determine_conds B CARRY OVERFLOW CC -> result_flags_of B CARRY OVERFLOW RF
         -> flags_to_result_flags FR RF -> impl_conds FR CC -> type.
can_resflags_ :
   can_resflags (determine_conds_ Dds Ddz) (result_flags_of_ Dsf Dzf)
      flags_to_result_flags_ impl_conds_
      <- can_sf Dds Dsf
      <- can_zf Ddz Dzf.
can_alu_sf_of :
   Pi N1:nat. Pi BIT:bit. Pi B:binary (s N1). alu_sf_of B BIT -> type.
- : can_alu_sf_of ($ BIT nil$) alu_sf_of_1.
- : can_alu_sf_of ($ B2 B) (alu_sf_of_n D) <- can_alu_sf_of B D.
can_alu_zf_of* :
   Pi N1:nat. Pi B:binary (s N1). Pi BIT:bit.
      maybe_zero B -> alu_zf_of B BIT -> type.
- : can_alu_zf_of* (maybe_zero_yes Diz) (alu_zf_of_set Diz).
- : can_alu_zf_of* (maybe_zero_no Dinz) (alu_zf_of_clear Dinz).
can_alu_zf_of :
   Pi N1:nat. Pi BIT:bit. Pi B:binary (s N1). alu_zf_of B BIT -> type.
- :
   can_alu_zf_of B Dazf
      <- compare_for_zero B Dmaybe
      <- can_alu_zf_of* Dmaybe Dazf.
can_resflags_dk :
   Pi N1:nat. Pi RF:result_flags. Pi FR:flags. Pi CC:conds. Pi B:binary (s N1).
      Pi CARRY:bit. Pi OVERFLOW:bit.
      result_flags_of B CARRY OVERFLOW RF -> flags_to_result_flags FR RF
         -> impl_conds FR CC -> type.
- :
   can_resflags_dk B CARRY OVERFLOW (result_flags_of_ Dasf Dazf)
      flags_to_result_flags_ impl_conds_
      <- can_alu_sf_of B Dasf
      <- can_alu_zf_of B Dazf.
maybe_isat : state -> icond -> type.
maybe_isat_yes : maybe_isat ST IC <- icond_sat IC ST.
maybe_isat_no : maybe_isat ST IC <- icond_unsat IC ST.
decide_isat :
   Pi H:memory. Pi R:regs numregs. Pi FR:flags. Pi Aeip:binary wwb.
      Pi OR:oracle. Pi IC:icond. maybe_isat (state_ H R FR Aeip OR) IC -> type.
-e :
   decide_isat H1 R1 (flags_ B1 one' B2 B3) B4 OR1 icond_e
      (maybe_isat_yes (icond_sat_e (load_zf_ getflags_))).
-e :
   decide_isat H1 R1 (flags_ B1 zero B2 B3) B4 OR1 icond_e
      (maybe_isat_no
          (icond_unsat_ (icond_sat_ne (load_zf_ getflags_)) icond_negate_e)).
-ne :
   decide_isat H1 R1 (flags_ B1 zero B2 B3) B4 OR1 icond_ne
      (maybe_isat_yes (icond_sat_ne (load_zf_ getflags_))).
-ne :
   decide_isat H1 R1 (flags_ B1 one' B2 B3) B4 OR1 icond_ne
      (maybe_isat_no
          (icond_unsat_ (icond_sat_e (load_zf_ getflags_)) icond_negate_ne)).
-a :
   decide_isat H1 R1 (flags_ zero zero B1 B2) B3 OR1 icond_a
      (maybe_isat_yes (icond_sat_a (load_zf_ getflags_) (load_cf_ getflags_))).
-a :
   decide_isat H1 R1 (flags_ B1 one' B2 B3) B4 OR1 icond_a
      (maybe_isat_no
          (icond_unsat_ (icond_sat_be_e (load_zf_ getflags_)) icond_negate_a)).
-a :
   decide_isat H1 R1 (flags_ one' B1 B2 B3) B4 OR1 icond_a
      (maybe_isat_no
          (icond_unsat_ (icond_sat_be_b (load_cf_ getflags_)) icond_negate_a)).
-ae :
   decide_isat H1 R1 (flags_ zero B1 B2 B3) B4 OR1 icond_ae
      (maybe_isat_yes (icond_sat_ae (load_cf_ getflags_))).
-ae :
   decide_isat H1 R1 (flags_ one' B1 B2 B3) B4 OR1 icond_ae
      (maybe_isat_no
          (icond_unsat_ (icond_sat_b (load_cf_ getflags_)) icond_negate_ae)).
-b :
   decide_isat H1 R1 (flags_ one' B1 B2 B3) B4 OR1 icond_b
      (maybe_isat_yes (icond_sat_b (load_cf_ getflags_))).
-b :
   decide_isat H1 R1 (flags_ zero B1 B2 B3) B4 OR1 icond_b
      (maybe_isat_no
          (icond_unsat_ (icond_sat_ae (load_cf_ getflags_)) icond_negate_b)).
-be :
   decide_isat H1 R1 (flags_ B1 one' B2 B3) B4 OR1 icond_be
      (maybe_isat_yes (icond_sat_be_e (load_zf_ getflags_))).
-be :
   decide_isat H1 R1 (flags_ one' B1 B2 B3) B4 OR1 icond_be
      (maybe_isat_yes (icond_sat_be_b (load_cf_ getflags_))).
-be :
   decide_isat H1 R1 (flags_ zero zero B1 B2) B3 OR1 icond_be
      (maybe_isat_no
          (icond_unsat_ (icond_sat_a (load_zf_ getflags_) (load_cf_ getflags_))
              icond_negate_be)).
-g :
   decide_isat H1 R1 (flags_ B1 zero zero zero) B2 OR1 icond_g
      (maybe_isat_yes
          (icond_sat_g_nov (load_of_ getflags_) (load_sf_ getflags_)
              (load_zf_ getflags_))).
-g :
   decide_isat H1 R1 (flags_ B1 zero one' one') B2 OR1 icond_g
      (maybe_isat_yes
          (icond_sat_g_ov (load_of_ getflags_) (load_sf_ getflags_)
              (load_zf_ getflags_))).
-g :
   decide_isat H1 R1 (flags_ B1 B2 one' zero) B3 OR1 icond_g
      (maybe_isat_no
          (icond_unsat_
              (icond_sat_le_nov (load_of_ getflags_) (load_sf_ getflags_))
              icond_negate_g)).
-g :
   decide_isat H1 R1 (flags_ B1 B2 zero one') B3 OR1 icond_g
      (maybe_isat_no
          (icond_unsat_
              (icond_sat_le_ov (load_of_ getflags_) (load_sf_ getflags_))
              icond_negate_g)).
-g :
   decide_isat H1 R1 (flags_ B1 one' B2 B3) B4 OR1 icond_g
      (maybe_isat_no
          (icond_unsat_ (icond_sat_le_e (load_zf_ getflags_)) icond_negate_g)).
-ge :
   decide_isat H1 R1 (flags_ B1 B2 zero zero) B3 OR1 icond_ge
      (maybe_isat_yes
          (icond_sat_ge_nov (load_of_ getflags_) (load_sf_ getflags_))).
-ge :
   decide_isat H1 R1 (flags_ B1 B2 one' one') B3 OR1 icond_ge
      (maybe_isat_yes
          (icond_sat_ge_ov (load_of_ getflags_) (load_sf_ getflags_))).
-ge :
   decide_isat H1 R1 (flags_ B1 B2 one' zero) B3 OR1 icond_ge
      (maybe_isat_no
          (icond_unsat_
              (icond_sat_l_nov (load_of_ getflags_) (load_sf_ getflags_))
              icond_negate_ge)).
-ge :
   decide_isat H1 R1 (flags_ B1 B2 zero one') B3 OR1 icond_ge
      (maybe_isat_no
          (icond_unsat_
              (icond_sat_l_ov (load_of_ getflags_) (load_sf_ getflags_))
              icond_negate_ge)).
-l :
   decide_isat H1 R1 (flags_ B1 B2 one' zero) B3 OR1 icond_l
      (maybe_isat_yes
          (icond_sat_l_nov (load_of_ getflags_) (load_sf_ getflags_))).
-l :
   decide_isat H1 R1 (flags_ B1 B2 zero one') B3 OR1 icond_l
      (maybe_isat_yes (icond_sat_l_ov (load_of_ getflags_) (load_sf_ getflags_))).
-l :
   decide_isat H1 R1 (flags_ B1 B2 zero zero) B3 OR1 icond_l
      (maybe_isat_no
          (icond_unsat_
              (icond_sat_ge_nov (load_of_ getflags_) (load_sf_ getflags_))
              icond_negate_l)).
-l :
   decide_isat H1 R1 (flags_ B1 B2 one' one') B3 OR1 icond_l
      (maybe_isat_no
          (icond_unsat_
              (icond_sat_ge_ov (load_of_ getflags_) (load_sf_ getflags_))
              icond_negate_l)).
-le :
   decide_isat H1 R1 (flags_ B1 B2 one' zero) B3 OR1 icond_le
      (maybe_isat_yes
          (icond_sat_le_nov (load_of_ getflags_) (load_sf_ getflags_))).
-le :
   decide_isat H1 R1 (flags_ B1 B2 zero one') B3 OR1 icond_le
      (maybe_isat_yes
          (icond_sat_le_ov (load_of_ getflags_) (load_sf_ getflags_))).
-le :
   decide_isat H1 R1 (flags_ B1 one' B2 B3) B4 OR1 icond_le
      (maybe_isat_yes (icond_sat_le_e (load_zf_ getflags_))).
-le :
   decide_isat H1 R1 (flags_ B1 zero zero zero) B2 OR1 icond_le
      (maybe_isat_no
          (icond_unsat_
              (icond_sat_g_nov (load_of_ getflags_) (load_sf_ getflags_)
                  (load_zf_ getflags_))
              icond_negate_le)).
-le :
   decide_isat H1 R1 (flags_ B1 zero one' one') B2 OR1 icond_le
      (maybe_isat_no
          (icond_unsat_
              (icond_sat_g_ov (load_of_ getflags_) (load_sf_ getflags_)
                  (load_zf_ getflags_))
              icond_negate_le)).
- :
   decide_isat H1 R1 (flags_ B1 B2 one' B3) B4 OR1 icond_s
      (maybe_isat_yes (icond_sat_s (load_sf_ getflags_))).
- :
   decide_isat H1 R1 (flags_ B1 B2 zero B3) B4 OR1 icond_s
      (maybe_isat_no
          (icond_unsat_ (icond_sat_ns (load_sf_ getflags_)) icond_negate_s)).
-ns :
   decide_isat H1 R1 (flags_ B1 B2 zero B3) B4 OR1 icond_ns
      (maybe_isat_yes (icond_sat_ns (load_sf_ getflags_))).
-ns :
   decide_isat H1 R1 (flags_ B1 B2 one' B3) B4 OR1 icond_ns
      (maybe_isat_no
          (icond_unsat_ (icond_sat_s (load_sf_ getflags_)) icond_negate_ns)).
-o' :
   decide_isat H1 R1 (flags_ B1 B2 B3 one') B4 OR1 icond_o
      (maybe_isat_yes (icond_sat_o (load_of_ getflags_))).
-o' :
   decide_isat H1 R1 (flags_ B1 B2 B3 zero) B4 OR1 icond_o
      (maybe_isat_no
          (icond_unsat_ (icond_sat_no (load_of_ getflags_)) icond_negate_o)).
-no :
   decide_isat H1 R1 (flags_ B1 B2 B3 zero) B4 OR1 icond_no
      (maybe_isat_yes (icond_sat_no (load_of_ getflags_))).
-no :
   decide_isat H1 R1 (flags_ B1 B2 B3 one') B4 OR1 icond_no
      (maybe_isat_no
          (icond_unsat_ (icond_sat_o (load_of_ getflags_)) icond_negate_no)).
binary_val_impl_fun :
   Pi V1:val. Pi B1:binary bw. Pi CI:corresp_info. Pi B2:binary bw.
      binary_int theend V1 B1 -> impl_val CI (/ B2 #) V1 -> binary_eq B1 B2
         -> type.
- :
   binary_val_impl_fun (binary_int_cons_lit Dba binary_int_null)
      (impl_val_cons impl_val_null impl_uval_lit) Deq
      <- binary_append_ident'' Dba Deq.
can_impl_binary_value* :
   Pi V:val. Pi B:binary bw.
      binary_int theend V B -> size V 1'
         -> Pi CI:corresp_info. impl_val CI (/ B #) V -> type.
- :
   can_impl_binary_value* (binary_int_cons_lit Dba binary_int_null)
      (size_cons size_null) CI D
      <- binary_append_ident'' Dba Deq
      <- val_lit_eq_cons Deq val_eq_ Deq'
      <- impl_val_resp string_eq_ Deq'
            (impl_val_cons impl_val_null impl_uval_lit) D.
can_impl_binary_value :
   Pi V:val. Pi B:binary bw.
      binary_int theend V B
         -> Pi CI:corresp_info. impl_val CI (/ B #) V -> type.
- :
   can_impl_binary_value Dbi CI Dival
      <- binary_int_size Dbi product_bytebits Dsize
      <- can_impl_binary_value* Dbi Dsize CI Dival.
can_implode_word :
   Pi V1:val. Pi B1:binary wwb. Pi X:corresp_info. Pi W1:string ww.
      binary_int theend V1 B1 -> impl_val X W1 V1 -> implode_word W1 B1 -> type.
- :
   can_implode_word
      (binary_int_cons_lit Dbapp1
          (binary_int_cons_lit Dbapp2
              (binary_int_cons_lit Dbapp3
                  (binary_int_cons_lit Dba binary_int_null))))
      (impl_val_cons
          (impl_val_cons (impl_val_cons (impl_val_cons impl_val_null X1) X2) X3)
          X4)
      (implode_word_ Dbapp1 Dbapp2 Dbapp3')
      <- binary_append_ident'' Dba Deq
      <- binary_append_resp Deq binary_eq_ binary_eq_ Dbapp3 Dbapp3'.
can_explode_word :
   Pi V1:val. Pi B1:binary wwb. Pi W1:string ww.
      binary_int theend V1 B1
         -> Pi CI:corresp_info.
                impl_val CI W1 V1 -> size V1 ww -> implode_word W1 B1 -> type.
- :
   can_explode_word
      (binary_int_cons_lit Dbapp1
          (binary_int_cons_lit Dbapp2
              (binary_int_cons_lit Dbapp3
                  (binary_int_cons_lit Dba binary_int_null)))) CI
      (impl_val_cons
          (impl_val_cons
              (impl_val_cons (impl_val_cons impl_val_null impl_uval_lit)
                  impl_uval_lit)
              impl_uval_lit)
          impl_uval_lit)
      (size_cons (size_cons (size_cons (size_cons size_null))))
      (implode_word_ Dbapp1 Dbapp2 Dbapp3')
      <- binary_append_ident'' Dba Deq
      <- binary_append_resp Deq binary_eq_ binary_eq_ Dbapp3 Dbapp3'.
binary_word_to_word : Pi W:string ww. Pi B:binary wwb. implode_word W B -> type.
- :
   binary_word_to_word B (implode_word_ Dbapp1 Dbapp2 Dbapp3)
      <- can_binary_append'
            (s
                (s
                    (s
                        (s
                            (s
                                (s
                                    (s
                                        
(s (s (s (s (s (s (s (s (s bytebits))))))))))))))))
            B432 B1 B sum_4_bytes Dbapp1
      <- can_binary_append' (s (s (s (s (s (s (s (s bytebits)))))))) B43 B2 B432
            sum_3_bytes Dbapp2
      <- can_binary_append' bytebits B4 B3 B43 sum_2_bytes Dbapp3.
word_to_binary_word : Pi B:binary wwb. Pi W:string ww. implode_word W B -> type.
- :
   word_to_binary_word (/ B1 (/ B2 (/ B3 (/ B4 #))))
      (implode_word_ Dbapp1 Dbapp2 Dbapp3)
      <- can_binary_append B4 B3 B43 sum_2_bytes Dbapp3
      <- can_binary_append B43 B2 B432 sum_3_bytes Dbapp2
      <- can_binary_append B432 B1 B sum_4_bytes Dbapp1.
can_iadd :
   Pi Nsz:nat. Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val.
      Pi B2:binary (s N). Pi V3:val. Pi B3:binary (s N). Pi CARRY:bit.
      Pi OVERFLOW:bit. Pi CC:conds. Pi X:corresp_info. Pi W1:string Nsz.
      Pi W2:string Nsz. Pi W3:string Nsz. Pi RF:result_flags. Pi FR:flags.
      allowed_opsize Nsz -> product Nsz bytebits (s N)
         -> binary_int theend V1 B1 -> binary_int theend V2 B2
         -> binary_int theend V3 B3 -> add_wo B1 B2 B3 CARRY OVERFLOW
         -> determine_conds B3 CARRY OVERFLOW CC -> impl_val X W1 V1
         -> impl_val X W2 V2 -> impl_val X W3 V3 -> binop iadd W1 W2 W3 RF
         -> impl_conds FR CC -> flags_to_result_flags FR RF -> type.
- :
   can_iadd allowed_opsize_4 product_wordbits Dbi1 Dbi2 Dbi3 Dadd Ddet Dival1
      Dival2 Dival3 (binop_4 Dim3 (binop_add Dresfl Dadd) Dim2 Dim1) Diconds Dfl
      <- can_implode_word Dbi1 Dival1 Dim1
      <- can_implode_word Dbi2 Dival2 Dim2
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3
      <- can_resflags Ddet Dresfl Dfl Diconds.
- :
   can_iadd allowed_opsize_1 product_bytebits Dbi1 Dbi2 Dbi3 Dadd Ddet Dival1
      Dival2 Dival3 (binop_1 (binop_add Dresfl Dadd1)) Diconds Dfl
      <- binary_val_impl_fun Dbi1 Dival1 Dbeq1
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- add_wo_resp Dbeq1 Dbeq2 binary_eq_ bit_eq_ bit_eq_ Dadd Dadd1
      <- can_resflags Ddet Dresfl Dfl Diconds
      <- can_impl_binary_value Dbi3 CI Dival3.
can_isub :
   Pi Nsz:nat. Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val.
      Pi B2:binary (s N). Pi V3:val. Pi B3:binary (s N). Pi CARRY:bit.
      Pi OVERFLOW:bit. Pi CC:conds. Pi X:corresp_info. Pi W1:string Nsz.
      Pi W2:string Nsz. Pi W3:string Nsz. Pi RF:result_flags. Pi FR:flags.
      allowed_opsize Nsz -> product Nsz bytebits (s N)
         -> binary_int theend V1 B1 -> binary_int theend V2 B2
         -> binary_int theend V3 B3 -> add_wo B2 B3 B1 CARRY OVERFLOW
         -> determine_conds B3 CARRY OVERFLOW CC -> impl_val X W1 V1
         -> impl_val X W2 V2 -> impl_val X W3 V3 -> binop isub W1 W2 W3 RF
         -> impl_conds FR CC -> flags_to_result_flags FR RF -> type.
- :
   can_isub allowed_opsize_4 product_wordbits Dbi1 Dbi2 Dbi3 Dadd Ddet Dival1
      Dival2 Dival3 (binop_4 Dim3 (binop_sub Dresfl Dadd) Dim2 Dim1) Diconds Dfl
      <- can_implode_word Dbi1 Dival1 Dim1
      <- can_implode_word Dbi2 Dival2 Dim2
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3
      <- can_resflags Ddet Dresfl Dfl Diconds.
- :
   can_isub allowed_opsize_1 product_bytebits Dbi1 Dbi2 Dbi3 Dadd Ddet Dival1
      Dival2 Dival3 (binop_1 (binop_sub Dresfl Dadd1)) Diconds Dfl
      <- binary_val_impl_fun Dbi1 Dival1 Dbeq1
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- add_wo_resp Dbeq2 binary_eq_ Dbeq1 bit_eq_ bit_eq_ Dadd Dadd1
      <- can_resflags Ddet Dresfl Dfl Diconds
      <- can_impl_binary_value Dbi3 CI Dival3.
can_iand :
   Pi Nsz:nat. Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val.
      Pi B2:binary (s N). Pi V3:val. Pi B3:binary (s N). Pi CC:conds.
      Pi X:corresp_info. Pi W1:string Nsz. Pi W2:string Nsz. Pi W3:string Nsz.
      Pi RF:result_flags. Pi FR:flags.
      allowed_opsize Nsz -> product Nsz bytebits (s N)
         -> binary_int theend V1 B1 -> binary_int theend V2 B2
         -> binary_int theend V3 B3 -> and B1 B2 B3
         -> determine_conds B3 zero zero CC -> impl_val X W1 V1
         -> impl_val X W2 V2 -> impl_val X W3 V3 -> binop iand W1 W2 W3 RF
         -> impl_conds FR CC -> flags_to_result_flags FR RF -> type.
- :
   can_iand allowed_opsize_4 product_wordbits Dbi1 Dbi2 Dbi3 Dand Ddet Dival1
      Dival2 Dival3 (binop_4 Dim3 (binop_and Dresfl Dand) Dim2 Dim1) Diconds Dfl
      <- can_implode_word Dbi1 Dival1 Dim1
      <- can_implode_word Dbi2 Dival2 Dim2
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3
      <- can_resflags Ddet Dresfl Dfl Diconds.
- :
   can_iand allowed_opsize_1 product_bytebits Dbi1 Dbi2 Dbi3 Dand Ddet Dival1
      Dival2 Dival3 (binop_1 (binop_and Dresfl Dand1)) Diconds Dfl
      <- binary_val_impl_fun Dbi1 Dival1 Dbeq1
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- and_resp Dbeq1 Dbeq2 binary_eq_ Dand Dand1
      <- can_resflags Ddet Dresfl Dfl Diconds
      <- can_impl_binary_value Dbi3 CI Dival3.
can_ior :
   Pi Nsz:nat. Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val.
      Pi B2:binary (s N). Pi V3:val. Pi B3:binary (s N). Pi CC:conds.
      Pi X:corresp_info. Pi W1:string Nsz. Pi W2:string Nsz. Pi W3:string Nsz.
      Pi RF:result_flags. Pi FR:flags.
      allowed_opsize Nsz -> product Nsz bytebits (s N)
         -> binary_int theend V1 B1 -> binary_int theend V2 B2
         -> binary_int theend V3 B3 -> or B1 B2 B3
         -> determine_conds B3 zero zero CC -> impl_val X W1 V1
         -> impl_val X W2 V2 -> impl_val X W3 V3 -> binop ior W1 W2 W3 RF
         -> impl_conds FR CC -> flags_to_result_flags FR RF -> type.
- :
   can_ior allowed_opsize_4 product_wordbits Dbi1 Dbi2 Dbi3 Dor Ddet Dival1
      Dival2 Dival3 (binop_4 Dim3 (binop_or Dresfl Dor) Dim2 Dim1) Diconds Dfl
      <- can_implode_word Dbi1 Dival1 Dim1
      <- can_implode_word Dbi2 Dival2 Dim2
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3
      <- can_resflags Ddet Dresfl Dfl Diconds.
- :
   can_ior allowed_opsize_1 product_bytebits Dbi1 Dbi2 Dbi3 Dor Ddet Dival1
      Dival2 Dival3 (binop_1 (binop_or Dresfl Dor1)) Diconds Dfl
      <- binary_val_impl_fun Dbi1 Dival1 Dbeq1
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- or_resp Dbeq1 Dbeq2 binary_eq_ Dor Dor1
      <- can_resflags Ddet Dresfl Dfl Diconds
      <- can_impl_binary_value Dbi3 CI Dival3.
can_ixor :
   Pi Nsz:nat. Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val.
      Pi B2:binary (s N). Pi V3:val. Pi B3:binary (s N). Pi CC:conds.
      Pi X:corresp_info. Pi W1:string Nsz. Pi W2:string Nsz. Pi W3:string Nsz.
      Pi RF:result_flags. Pi FR:flags.
      allowed_opsize Nsz -> product Nsz bytebits (s N)
         -> binary_int theend V1 B1 -> binary_int theend V2 B2
         -> binary_int theend V3 B3 -> xor B1 B2 B3
         -> determine_conds B3 zero zero CC -> impl_val X W1 V1
         -> impl_val X W2 V2 -> impl_val X W3 V3 -> binop ixor W1 W2 W3 RF
         -> impl_conds FR CC -> flags_to_result_flags FR RF -> type.
- :
   can_ixor allowed_opsize_4 product_wordbits Dbi1 Dbi2 Dbi3 Dxor Ddet Dival1
      Dival2 Dival3 (binop_4 Dim3 (binop_xor Dresfl Dxor) Dim2 Dim1) Diconds Dfl
      <- can_implode_word Dbi1 Dival1 Dim1
      <- can_implode_word Dbi2 Dival2 Dim2
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3
      <- can_resflags Ddet Dresfl Dfl Diconds.
- :
   can_ixor allowed_opsize_1 product_bytebits Dbi1 Dbi2 Dbi3 Dxor Ddet Dival1
      Dival2 Dival3 (binop_1 (binop_xor Dresfl Dxor1)) Diconds Dfl
      <- binary_val_impl_fun Dbi1 Dival1 Dbeq1
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- xor_resp Dbeq1 Dbeq2 binary_eq_ Dxor Dxor1
      <- can_resflags Ddet Dresfl Dfl Diconds
      <- can_impl_binary_value Dbi3 CI Dival3.
31_5 : binary 5' = one' $ one' $ one' $ one' $ one' $ nil$.
is_negone_31_5 : is_negone (one' $ one' $ one' $ one' $ one' $ nil$)
   = is_negone_cons
        (is_negone_cons (is_negone_cons (is_negone_cons is_negone_sing))).
represents_31_5 : represents 31' 31_5
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_100) addbit_100)
                        addbit_100)
                    addbit_100)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_100)
                                addbit_100)
                            addbit_100)
                        addbit_001)
                    addbit_110))
            (is_one_
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_100)
                                    addbit_100)
                                addbit_100)
                            addbit_000)
                        addbit_010))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_100)
                                        addbit_100)
                                    addbit_001)
                                addbit_101)
                            addbit_110))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil)))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_100)
                                            addbit_100)
                                        addbit_000)
                                    addbit_100)
                                addbit_010))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil)))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_100)
                                                addbit_100)
                                            addbit_000)
                                        addbit_001)
                                    addbit_110))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil)))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_100)
                                                    addbit_100)
                                                addbit_000)
                                            addbit_000)
                                        addbit_010))
                                (is_one_
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil)))))
                                (represents_s
                                    (add_
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_100)
                                                        addbit_001)
                                                    addbit_101)
                                                addbit_101)
                                            addbit_110))
                                    (is_one_
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil)))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_100) addbit_000)
                addbit_100)
            addbit_100)
        addbit_010))
                                        (is_one_
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil)))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_100) addbit_000)
                    addbit_100)
                addbit_001)
            addbit_110))
    (is_one_
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_100) addbit_000)
                        addbit_100)
                    addbit_000)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_100)
                                addbit_000)
                            addbit_001)
                        addbit_101)
                    addbit_110))
            (is_one_
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_100)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_010))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_100)
                                        addbit_000)
                                    addbit_000)
                                addbit_001)
                            addbit_110))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil)))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_100)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_010))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil)))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_001)
                                                addbit_101)
                                            addbit_101)
                                        addbit_101)
                                    addbit_110))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil)))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_100)
                                                addbit_100)
                                            addbit_100)
                                        addbit_010))
                                (is_one_
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil)))))
                                (represents_s
                                    (add_
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_100)
                                                    addbit_100)
                                                addbit_001)
                                            addbit_110))
                                    (is_one_
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil)))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_100)
                addbit_100)
            addbit_000)
        addbit_010))
                                        (is_one_
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil)))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_100)
                    addbit_001)
                addbit_101)
            addbit_110))
    (is_one_
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_100)
                        addbit_000)
                    addbit_100)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_100)
                            addbit_000)
                        addbit_001)
                    addbit_110))
            (is_one_
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_100)
                                addbit_000)
                            addbit_000)
                        addbit_010))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_001)
                                    addbit_101)
                                addbit_101)
                            addbit_110))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil)))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_100)
                                addbit_010))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil)))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_100)
                                        addbit_001)
                                    addbit_110))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil)))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_100)
                                            addbit_000)
                                        addbit_010))
                                (is_one_
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil)))))
                                (represents_s
                                    (add_
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_001)
                                                addbit_101)
                                            addbit_110))
                                    (is_one_
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil)))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_100)
        addbit_010))
                                        (is_one_
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil)))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_001)
            addbit_110))
    (is_one_
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_010))
        (is_one_
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))
        (represents_z
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))))))))))))))))))))))))))))))))).
sum_3_5 : sum 3' 5' 8' = sum_s (sum_s (sum_s sum_z)).
is_zero_3 : is_zero 0_3
   = is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)).
binary_append_1f_8 : binary_append 0_3 31_5 1f_8
   = binary_append_cons
        (binary_append_cons
            (binary_append_cons
                (binary_append_cons (binary_append_cons binary_append_nil)))).
can_and_lt_32 :
   Pi N:nat. Pi B:binary 8'. represents N B -> lt N 32' -> and B 1f_8 B -> type.
- :
   can_and_lt_32 Drep1 Dlt Dand3
      <- lt_succ_implies_leq Dlt Dleq
      <- can_represents Dleq represents_31_5 Drep2
      <- max_and_nodiff is_negone_31_5 B_5 Dand1
      <- can_binary_append 0_3 B_5 B_8 sum_3_5 Dbapp1
      <- represents_append_zero is_zero_3 Drep2 Dbapp1 Drep3
      <- and_append Dand1 Dbapp1 binary_append_1f_8 Dbapp1 Dand2
      <- represents_fun2 Drep3 Drep1 Dbeq
      <- and_resp Dbeq binary_eq_ Dbeq Dand2 Dand3.
can_irol* :
   Pi N1:nat. Pi Nrot:nat. Pi B1:binary (s N1). Pi B2:binary (s N1).
      Pi Brot:binary bytebits. Pi Cout:bit. Pi Oout:bit. Pi OR2:oracle.
      rotate_left Nrot B1 B2 -> represents Nrot Brot -> lt Nrot 32'
         -> Pi Cin:bit. Pi Zin:bit. Pi Sin:bit. Pi Oin:bit. Pi OR1:oracle.
                shiftop* irol B1 (flags_ Cin Zin Sin Oin) Brot OR1 B2
                   (result_flags_ Cout Zin Sin Oout) OR2 -> type.
- :
   can_irol* Drol Drep Dlt B6 B7 B8 B9 OR
      (shiftop*_gt_1 (shiftop_rol_gt_1 Dcons1 Dcons2 Drol) (lt_s lt_z) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR Dcons2
      <- can_consume_bit OR2 Dcons1.
- :
   can_irol* Drol Drep Dlt B6 B7 B8 B9 OR1
      (shiftop*_1 (shiftop_rol_1 Drolwo) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- rol_is_rol_wo Drol Drolwo.
- :
   can_irol* rotate_left_z Drep Dlt B5 B7 B8 B6 OR
      (shiftop*_z Dcons1 Dcons2 Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR Dcons2
      <- can_consume_bit OR2 Dcons1.
can_irol :
   Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val. Pi B2:binary bytebits.
      Pi V3:val. Pi B3:binary (s N). Pi Nrot:nat. Pi R:rfile. Pi Fc:bit.
      Pi Fz:bit. Pi Fs:bit. Pi Fo:bit. Pi FRin:flags. Pi CI:corresp_info.
      Pi W1:string ww. Pi W2:string 1'. Pi W3:string ww. Pi RF:result_flags.
      Pi OR':oracle. Pi FR:flags. Pi Fc':bit. Pi Fo':bit.
      product ww bytebits (s N) -> binary_int theend V1 B1
         -> binary_int theend V2 B2 -> binary_int theend V3 B3
         -> represents Nrot B2 -> lt Nrot 32' -> cclookup R (conds_ Fc Fz Fs Fo)
         -> impl_conds FRin (conds_ Fc Fz Fs Fo) -> rotate_left Nrot B1 B3
         -> Pi OR:oracle.
                impl_val CI W1 V1 -> impl_val CI W2 V2 -> impl_val CI W3 V3
                   -> shiftop irol W1 FRin W2 OR W3 RF OR'
                   -> impl_conds FR (conds_ Fc' Fz Fs Fo')
                   -> flags_to_result_flags FR RF -> type.
- :
   can_irol product_wordbits Dbi1 Dbi2 Dbi3 DrepRot DltRot cclookup_ 
impl_conds_
      Drot OR2 Dival1 Dival2 Dival3 (shiftop_len_4 Dim3 Dshiftop Dim1)
      impl_conds_ flags_to_result_flags_
      <- can_implode_word Dbi1 Dival1 Dim1
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- can_irol* Drot DrepRot' DltRot B6 B7 B8 B9 OR2 Dshiftop
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3.
can_ircl* :
   Pi N1:nat. Pi Nrot:nat. Pi Cin:bit. Pi B1:binary N1. Pi B2:bit.
      Pi B3:binary N1. Pi Brot:binary bytebits. Pi Cout:bit. Pi Oout:bit.
      Pi OR2:oracle.
      rotate_left Nrot ($ Cin B1) ($ B2 B3) -> represents Nrot Brot
         -> lt Nrot 32'
         -> Pi Zin:bit. Pi Sin:bit. Pi Oin:bit. Pi OR1:oracle.
                shiftop* ircl B1 (flags_ Cin Zin Sin Oin) Brot OR1 B3
                   (result_flags_ Cout Zin Sin Oout) OR2 -> type.
- :
   can_ircl* Drol Drep Dlt B8 B9 B10 OR
      (shiftop*_gt_1 (shiftop_rcl_gt_1 Dcons1 Dcons2 Drol) (lt_s lt_z) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR Dcons2
      <- can_consume_bit OR2 Dcons1.
- :
   can_ircl* Drol Drep Dlt B8 B9 B10 OR1
      (shiftop*_1 (shiftop_rcl_1 Drolwo) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- rol_is_rol_wo Drol Drolwo.
- :
   can_ircl* rotate_left_z Drep Dlt B7 B8 B6 OR3
      (shiftop*_z Dcons1 Dcons2 Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR3 Dcons2
      <- can_consume_bit OR2 Dcons1.
can_ircl :
   Pi N:nat. Pi V1:val. Pi B1:binary N. Pi V2:val. Pi B2:binary bytebits.
      Pi V3:val. Pi B3:binary N. Pi Nrot:nat. Pi R:rfile. Pi Fc:bit. Pi Fz:bit.
      Pi Fs:bit. Pi Fo:bit. Pi FRin:flags. Pi B4:bit. Pi CI:corresp_info.
      Pi W1:string ww. Pi W2:string 1'. Pi W3:string ww. Pi RF:result_flags.
      Pi OR':oracle. Pi FR:flags. Pi Fcout:bit. Pi Fo':bit.
      product ww bytebits N -> binary_int theend V1 B1
         -> binary_int theend V2 B2 -> binary_int theend V3 B3
         -> represents Nrot B2 -> lt Nrot 32' -> cclookup R (conds_ Fc Fz Fs Fo)
         -> impl_conds FRin (conds_ Fc Fz Fs Fo)
         -> rotate_left Nrot ($ Fc B1) ($ B4 B3)
         -> Pi OR:oracle.
                impl_val CI W1 V1 -> impl_val CI W2 V2 -> impl_val CI W3 V3
                   -> shiftop ircl W1 FRin W2 OR W3 RF OR'
                   -> impl_conds FR (conds_ Fcout Fz Fs Fo')
                   -> flags_to_result_flags FR RF -> type.
- :
   can_ircl product_wordbits Dbi1 Dbi2 Dbi3 DrepRot DltRot cclookup_ 
impl_conds_
      Drot OR2 Dival1 Dival2 Dival3 (shiftop_len_4 Dim3 Dshiftop Dim1)
      impl_conds_ flags_to_result_flags_
      <- can_implode_word Dbi1 Dival1 Dim1
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- can_ircl* Drot DrepRot' DltRot B8 B9 B10 OR2 Dshiftop
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3.
can_iror* :
   Pi N1:nat. Pi Nrot:nat. Pi B1:binary (s N1). Pi B2:binary (s N1).
      Pi Brot:binary bytebits. Pi Cout:bit. Pi Oout:bit. Pi OR2:oracle.
      rotate_right Nrot B1 B2 -> represents Nrot Brot -> lt Nrot 32'
         -> Pi Cin:bit. Pi Zin:bit. Pi Sin:bit. Pi Oin:bit. Pi OR1:oracle.
                shiftop* iror B1 (flags_ Cin Zin Sin Oin) Brot OR1 B2
                   (result_flags_ Cout Zin Sin Oout) OR2 -> type.
- :
   can_iror* Drol Drep Dlt B6 B7 B8 B9 OR
      (shiftop*_gt_1 (shiftop_ror_gt_1 Dcons2 Dcons1 Drol) (lt_s lt_z) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR Dcons1
      <- can_consume_bit OR2 Dcons2.
- :
   can_iror* Drol Drep Dlt B6 B7 B8 B9 OR1
      (shiftop*_1 (shiftop_ror_1 Drolwo) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- ror_is_ror_wo Drol Drolwo.
- :
   can_iror* rotate_right_z Drep Dlt B5 B7 B8 B6 OR3
      (shiftop*_z Dcons2 Dcons1 Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR3 Dcons1
      <- can_consume_bit OR2 Dcons2.
can_iror :
   Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val. Pi B2:binary bytebits.
      Pi V3:val. Pi B3:binary (s N). Pi Nrot:nat. Pi R:rfile. Pi Fc:bit.
      Pi Fz:bit. Pi Fs:bit. Pi Fo:bit. Pi FRin:flags. Pi CI:corresp_info.
      Pi W1:string ww. Pi W2:string 1'. Pi W3:string ww. Pi RF:result_flags.
      Pi OR':oracle. Pi FR:flags. Pi Fcout:bit. Pi Fo':bit.
      product ww bytebits (s N) -> binary_int theend V1 B1
         -> binary_int theend V2 B2 -> binary_int theend V3 B3
         -> represents Nrot B2 -> lt Nrot 32' -> cclookup R (conds_ Fc Fz Fs Fo)
         -> impl_conds FRin (conds_ Fc Fz Fs Fo) -> rotate_right Nrot B1 B3
         -> Pi OR:oracle.
                impl_val CI W1 V1 -> impl_val CI W2 V2 -> impl_val CI W3 V3
                   -> shiftop iror W1 FRin W2 OR W3 RF OR'
                   -> impl_conds FR (conds_ Fcout Fz Fs Fo')
                   -> flags_to_result_flags FR RF -> type.
- :
   can_iror product_wordbits Dbi1 Dbi2 Dbi3 DrepRot DltRot cclookup_ 
impl_conds_
      Drot OR2 Dival1 Dival2 Dival3 (shiftop_len_4 Dim3 Dshiftop Dim1)
      impl_conds_ flags_to_result_flags_
      <- can_implode_word Dbi1 Dival1 Dim1
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- can_iror* Drot DrepRot' DltRot B6 B7 B8 B9 OR2 Dshiftop
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3.
can_ircr* :
   Pi N1:nat. Pi Nrot:nat. Pi Cin:bit. Pi B1:binary N1. Pi B2:bit.
      Pi B3:binary N1. Pi Brot:binary bytebits. Pi Cout:bit. Pi Oout:bit.
      Pi OR2:oracle.
      rotate_right Nrot ($ Cin B1) ($ B2 B3) -> represents Nrot Brot
         -> lt Nrot 32'
         -> Pi Zin:bit. Pi Sin:bit. Pi Oin:bit. Pi OR1:oracle.
                shiftop* ircr B1 (flags_ Cin Zin Sin Oin) Brot OR1 B3
                   (result_flags_ Cout Zin Sin Oout) OR2 -> type.
- :
   can_ircr* Drol Drep Dlt B8 B9 B10 OR
      (shiftop*_gt_1 (shiftop_rcr_gt_1 Dcons2 Dcons1 Drol) (lt_s lt_z) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR Dcons1
      <- can_consume_bit OR2 Dcons2.
- :
   can_ircr* Drol Drep Dlt B8 B9 B10 OR1
      (shiftop*_1 (shiftop_rcr_1 Drolwo) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- ror_is_ror_wo Drol Drolwo.
- :
   can_ircr* rotate_right_z Drep Dlt B7 B8 B6 OR3
      (shiftop*_z Dcons2 Dcons1 Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR3 Dcons1
      <- can_consume_bit OR2 Dcons2.
can_ircr :
   Pi N:nat. Pi V1:val. Pi B1:binary N. Pi V2:val. Pi B2:binary bytebits.
      Pi V3:val. Pi B3:binary N. Pi Nrot:nat. Pi R:rfile. Pi Fc:bit. Pi Fz:bit.
      Pi Fs:bit. Pi Fo:bit. Pi FRin:flags. Pi B4:bit. Pi CI:corresp_info.
      Pi W1:string ww. Pi W2:string 1'. Pi W3:string ww. Pi RF:result_flags.
      Pi OR':oracle. Pi FR:flags. Pi Fcout:bit. Pi Fo':bit.
      product ww bytebits N -> binary_int theend V1 B1
         -> binary_int theend V2 B2 -> binary_int theend V3 B3
         -> represents Nrot B2 -> lt Nrot 32' -> cclookup R (conds_ Fc Fz Fs Fo)
         -> impl_conds FRin (conds_ Fc Fz Fs Fo)
         -> rotate_right Nrot ($ Fc B1) ($ B4 B3)
         -> Pi OR:oracle.
                impl_val CI W1 V1 -> impl_val CI W2 V2 -> impl_val CI W3 V3
                   -> shiftop ircr W1 FRin W2 OR W3 RF OR'
                   -> impl_conds FR (conds_ Fcout Fz Fs Fo')
                   -> flags_to_result_flags FR RF -> type.
- :
   can_ircr product_wordbits Dbi1 Dbi2 Dbi3 DrepRot DltRot cclookup_ 
impl_conds_
      Drot OR2 Dival1 Dival2 Dival3 (shiftop_len_4 Dim3 Dshiftop Dim1)
      impl_conds_ flags_to_result_flags_
      <- can_implode_word Dbi1 Dival1 Dim1
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- can_ircr* Drot DrepRot' DltRot B8 B9 B10 OR2 Dshiftop
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3.
can_ishl* :
   Pi N1:nat. Pi Nrot:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi B3:bit.
      Pi Brot:binary bytebits. Pi Cout:bit. Pi Oout:bit. Pi OR2:oracle.
      shift_left Nrot B1 B2 B3 -> represents Nrot Brot -> lt Nrot 32'
         -> Pi Cin:bit. Pi Zin:bit. Pi Sin:bit. Pi Oin:bit. Pi OR1:oracle.
                shiftop* ishl B1 (flags_ Cin Zin Sin Oin) Brot OR1 B2
                   (result_flags_ Cout Zin Sin Oout) OR2 -> type.
- :
   can_ishl* Drol Drep Dlt B6 B7 B8 B9 OR
      (shiftop*_gt_1 (shiftop_shl_gt_1 Dcons1 Drol) (lt_s lt_z) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR Dcons1.
- :
   can_ishl* Drol Drep Dlt B6 B7 B8 B9 OR1
      (shiftop*_1 (shiftop_shl_1 Drolwo) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- shl_is_shl_wo Drol Drolwo.
- :
   can_ishl* shift_left_z Drep Dlt B5 B7 B8 B6 OR3
      (shiftop*_z Dcons2 Dcons1 Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR3 Dcons1
      <- can_consume_bit OR2 Dcons2.
can_ishl :
   Pi Nsz:nat. Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val.
      Pi B2:binary bytebits. Pi V3:val. Pi B3:binary (s N). Pi Nrot:nat.
      Pi R:rfile. Pi Fc:bit. Pi Fz:bit. Pi Fs:bit. Pi Fo:bit. Pi FRin:flags.
      Pi B4:bit. Pi CI:corresp_info. Pi W1:string Nsz. Pi W2:string 1'.
      Pi W3:string Nsz. Pi RF:result_flags. Pi OR':oracle. Pi FR:flags.
      Pi Fcout:bit. Pi Fo':bit.
      product Nsz bytebits (s N) -> allowed_opsize Nsz
         -> binary_int theend V1 B1 -> binary_int theend V2 B2
         -> binary_int theend V3 B3 -> represents Nrot B2 -> lt Nrot 32'
         -> cclookup R (conds_ Fc Fz Fs Fo)
         -> impl_conds FRin (conds_ Fc Fz Fs Fo) -> shift_left Nrot B1 B3 B4
         -> Pi OR:oracle.
                impl_val CI W1 V1 -> impl_val CI W2 V2 -> impl_val CI W3 V3
                   -> shiftop ishl W1 FRin W2 OR W3 RF OR'
                   -> impl_conds FR (conds_ Fcout Fz Fs Fo')
                   -> flags_to_result_flags FR RF -> type.
- :
   can_ishl product_wordbits allowed_opsize_4 Dbi1 Dbi2 Dbi3 DrepRot DltRot
      cclookup_ impl_conds_ Drot OR2 Dival1 Dival2 Dival3
      (shiftop_len_4 Dim3 Dshiftop Dim1) impl_conds_ flags_to_result_flags_
      <- can_implode_word Dbi1 Dival1 Dim1
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- can_ishl* Drot DrepRot' DltRot B7 B8 B9 B10 OR2 Dshiftop
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3.
- :
   can_ishl product_bytebits allowed_opsize_1 Dbi1 Dbi2 Dbi3 DrepRot DltRot
      cclookup_ impl_conds_ Drot OR2 Dival1 Dival2 Dival3
      (shiftop_len_1 Dshiftop is_shift_op_ishl) impl_conds_
      flags_to_result_flags_
      <- binary_val_impl_fun Dbi1 Dival1 Dbeq1
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- shift_left_resp nat_eq_ Dbeq1 binary_eq_ bit_eq_ Drot Drot'
      <- can_ishl* Drot' DrepRot' DltRot B7 B8 B9 B10 OR2 Dshiftop
      <- can_impl_binary_value Dbi3 CI Dival3.
can_ishr* :
   Pi N1:nat. Pi Nrot:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi B3:bit.
      Pi Brot:binary bytebits. Pi Cout:bit. Pi Oout:bit. Pi OR2:oracle.
      shift_right Nrot B1 B2 B3 -> represents Nrot Brot -> lt Nrot 32'
         -> Pi Cin:bit. Pi Zin:bit. Pi Sin:bit. Pi Oin:bit. Pi OR1:oracle.
                shiftop* ishr B1 (flags_ Cin Zin Sin Oin) Brot OR1 B2
                   (result_flags_ Cout Zin Sin Oout) OR2 -> type.
- :
   can_ishr* Drol Drep Dlt B6 B7 B8 B9 OR
      (shiftop*_gt_1 (shiftop_shr_gt_1 Dcons1 Drol) (lt_s lt_z) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR Dcons1.
- :
   can_ishr* Drol Drep Dlt B6 B7 B8 B9 OR1
      (shiftop*_1 (shiftop_shr_1 Drolwo) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- shr_is_shr_wo Drol Drolwo.
- :
   can_ishr* shift_right_z Drep Dlt B5 B7 B8 B6 OR3
      (shiftop*_z Dcons2 Dcons1 Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR3 Dcons1
      <- can_consume_bit OR2 Dcons2.
can_ishr :
   Pi Nsz:nat. Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val.
      Pi B2:binary bytebits. Pi V3:val. Pi B3:binary (s N). Pi Nrot:nat.
      Pi R:rfile. Pi Fc:bit. Pi Fz:bit. Pi Fs:bit. Pi Fo:bit. Pi FRin:flags.
      Pi B4:bit. Pi CI:corresp_info. Pi W1:string Nsz. Pi W2:string 1'.
      Pi W3:string Nsz. Pi RF:result_flags. Pi OR':oracle. Pi FR:flags.
      Pi Fcout:bit. Pi Fo':bit.
      product Nsz bytebits (s N) -> allowed_opsize Nsz
         -> binary_int theend V1 B1 -> binary_int theend V2 B2
         -> binary_int theend V3 B3 -> represents Nrot B2 -> lt Nrot 32'
         -> cclookup R (conds_ Fc Fz Fs Fo)
         -> impl_conds FRin (conds_ Fc Fz Fs Fo) -> shift_right Nrot B1 B3 B4
         -> Pi OR:oracle.
                impl_val CI W1 V1 -> impl_val CI W2 V2 -> impl_val CI W3 V3
                   -> shiftop ishr W1 FRin W2 OR W3 RF OR'
                   -> impl_conds FR (conds_ Fcout Fz Fs Fo')
                   -> flags_to_result_flags FR RF -> type.
- :
   can_ishr product_wordbits allowed_opsize_4 Dbi1 Dbi2 Dbi3 DrepRot DltRot
      cclookup_ impl_conds_ Drot OR2 Dival1 Dival2 Dival3
      (shiftop_len_4 Dim3 Dshiftop Dim1) impl_conds_ flags_to_result_flags_
      <- can_implode_word Dbi1 Dival1 Dim1
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- can_ishr* Drot DrepRot' DltRot B7 B8 B9 B10 OR2 Dshiftop
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3.
- :
   can_ishr product_bytebits allowed_opsize_1 Dbi1 Dbi2 Dbi3 DrepRot DltRot
      cclookup_ impl_conds_ Drot OR2 Dival1 Dival2 Dival3
      (shiftop_len_1 Dshiftop is_shift_op_ishr) impl_conds_
      flags_to_result_flags_
      <- binary_val_impl_fun Dbi1 Dival1 Dbeq1
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- shift_right_resp nat_eq_ Dbeq1 binary_eq_ bit_eq_ Drot Drot'
      <- can_ishr* Drot' DrepRot' DltRot B7 B8 B9 B10 OR2 Dshiftop
      <- can_impl_binary_value Dbi3 CI Dival3.
can_isar* :
   Pi N1:nat. Pi Nrot:nat. Pi B1:binary (s N1). Pi B2:binary (s N1). Pi B3:bit.
      Pi Brot:binary bytebits. Pi Cout:bit. Pi Oout:bit. Pi OR2:oracle.
      shift_arith_right Nrot B1 B2 B3 -> represents Nrot Brot -> lt Nrot 32'
         -> Pi Cin:bit. Pi Zin:bit. Pi Sin:bit. Pi Oin:bit. Pi OR1:oracle.
                shiftop* isar B1 (flags_ Cin Zin Sin Oin) Brot OR1 B2
                   (result_flags_ Cout Zin Sin Oout) OR2 -> type.
- :
   can_isar* Drol Drep Dlt B6 B7 B8 B9 OR
      (shiftop*_gt_1 (shiftop_sar_gt_1 Dcons1 Drol) (lt_s lt_z) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR Dcons1.
- :
   can_isar* Drol Drep Dlt B6 B7 B8 B9 OR1
      (shiftop*_1 (shiftop_sar_1 Drolwo) Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- sar_is_sar_wo Drol Drolwo.
- :
   can_isar* shift_arith_right_z Drep Dlt B5 B7 B8 B6 OR3
      (shiftop*_z Dcons2 Dcons1 Drep Dand)
      <- can_and_lt_32 Drep Dlt Dand
      <- can_consume_bit OR3 Dcons1
      <- can_consume_bit OR2 Dcons2.
can_isar :
   Pi Nsz:nat. Pi N:nat. Pi V1:val. Pi B1:binary (s N). Pi V2:val.
      Pi B2:binary bytebits. Pi V3:val. Pi B3:binary (s N). Pi Nrot:nat.
      Pi R:rfile. Pi Fc:bit. Pi Fz:bit. Pi Fs:bit. Pi Fo:bit. Pi FRin:flags.
      Pi B4:bit. Pi CI:corresp_info. Pi W1:string Nsz. Pi W2:string 1'.
      Pi W3:string Nsz. Pi RF:result_flags. Pi OR':oracle. Pi FR:flags.
      Pi Fcout:bit. Pi Fo':bit.
      product Nsz bytebits (s N) -> allowed_opsize Nsz
         -> binary_int theend V1 B1 -> binary_int theend V2 B2
         -> binary_int theend V3 B3 -> represents Nrot B2 -> lt Nrot 32'
         -> cclookup R (conds_ Fc Fz Fs Fo)
         -> impl_conds FRin (conds_ Fc Fz Fs Fo)
         -> shift_arith_right Nrot B1 B3 B4
         -> Pi OR:oracle.
                impl_val CI W1 V1 -> impl_val CI W2 V2 -> impl_val CI W3 V3
                   -> shiftop isar W1 FRin W2 OR W3 RF OR'
                   -> impl_conds FR (conds_ Fcout Fz Fs Fo')
                   -> flags_to_result_flags FR RF -> type.
- :
   can_isar product_wordbits allowed_opsize_4 Dbi1 Dbi2 Dbi3 DrepRot DltRot
      cclookup_ impl_conds_ Drot OR2 Dival1 Dival2 Dival3
      (shiftop_len_4 Dim3 Dshiftop Dim1) impl_conds_ flags_to_result_flags_
      <- can_implode_word Dbi1 Dival1 Dim1
      <- binary_int_size Dbi3 product_wordbits Dsize
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- can_isar* Drot DrepRot' DltRot B7 B8 B9 B10 OR2 Dshiftop
      <- can_explode_word Dbi3 CI Dival3 Dsize Dim3.
- :
   can_isar product_bytebits allowed_opsize_1 Dbi1 Dbi2 Dbi3 DrepRot DltRot
      cclookup_ impl_conds_ Drot OR2 Dival1 Dival2 Dival3
      (shiftop_len_1 Dshiftop is_shift_op_isar) impl_conds_
      flags_to_result_flags_
      <- binary_val_impl_fun Dbi1 Dival1 Dbeq1
      <- binary_val_impl_fun Dbi2 Dival2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 DrepRot DrepRot'
      <- shift_arith_right_resp nat_eq_ Dbeq1 binary_eq_ bit_eq_ Drot Drot'
      <- can_isar* Drot' DrepRot' DltRot B7 B8 B9 B10 OR2 Dshiftop
      <- can_impl_binary_value Dbi3 CI Dival3.
load_cf_fun :
   Pi ST:state. Pi CF:bit. Pi CF':bit.
      load_cf ST CF -> load_cf ST CF' -> bit_eq CF CF' -> type.
load_cf_fun_ : load_cf_fun (load_cf_ getflags_) (load_cf_ getflags_) bit_eq_.
load_zf_fun :
   Pi ST:state. Pi CF:bit. Pi CF':bit.
      load_zf ST CF -> load_zf ST CF' -> bit_eq CF CF' -> type.
load_zf_fun_ : load_zf_fun (load_zf_ getflags_) (load_zf_ getflags_) bit_eq_.
load_sf_fun :
   Pi ST:state. Pi CF:bit. Pi CF':bit.
      load_sf ST CF -> load_sf ST CF' -> bit_eq CF CF' -> type.
load_sf_fun_ : load_sf_fun (load_sf_ getflags_) (load_sf_ getflags_) bit_eq_.
icond_sat_unsat_contra :
   Pi Icond:icond. Pi ST:state.
      icond_sat Icond ST -> icond_unsat Icond ST -> false -> type.
icond_sat_unsat_contra_a :
   icond_sat_unsat_contra (icond_sat_a Dlz Dlc)
      (icond_unsat_ (icond_sat_be_e Dlz') Dineg) Dfalse
      <- load_zf_fun Dlz' Dlz Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
icond_sat_unsat_contra_ae :
   icond_sat_unsat_contra (icond_sat_ae Dlc)
      (icond_unsat_ (icond_sat_b Dlc') Dineg) Dfalse
      <- load_cf_fun Dlc' Dlc Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
icond_sat_unsat_contra_b :
   icond_sat_unsat_contra (icond_sat_b Dlc)
      (icond_unsat_ (icond_sat_ae Dlc') Dineg) Dfalse
      <- load_cf_fun Dlc Dlc' Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
icond_sat_unsat_contra_be_b :
   icond_sat_unsat_contra (icond_sat_be_b Dlc)
      (icond_unsat_ (icond_sat_a Dlz' Dlc') Dineg) Dfalse
      <- load_cf_fun Dlc Dlc' Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
icond_sat_unsat_contra_be_e :
   icond_sat_unsat_contra (icond_sat_be_e Dlz)
      (icond_unsat_ (icond_sat_a Dlz' Dls') Dineg) Dfalse
      <- load_zf_fun Dlz Dlz' Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
icond_sat_unsat_contra_e :
   icond_sat_unsat_contra (icond_sat_e Dlz)
      (icond_unsat_ (icond_sat_ne Dlz') Dineg) Dfalse
      <- load_zf_fun Dlz Dlz' Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
icond_sat_unsat_contra_ne :
   icond_sat_unsat_contra (icond_sat_ne Dlz)
      (icond_unsat_ (icond_sat_e Dlz') Dineg) Dfalse
      <- load_zf_fun Dlz' Dlz Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
icond_sat_unsat_contra_s :
   icond_sat_unsat_contra (icond_sat_s Dls)
      (icond_unsat_ (icond_sat_ns Dls') Dineg) Dfalse
      <- load_sf_fun Dls Dls' Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
icond_sat_unsat_contra_ns :
   icond_sat_unsat_contra (icond_sat_ns Dls)
      (icond_unsat_ (icond_sat_s Dls') Dineg) Dfalse
      <- load_sf_fun Dls' Dls Dfeq
      <- bit_eq_contradict Dfeq Dfalse.
implode_word_fun :
   Pi W:string ww. Pi B:binary wwb. Pi B':binary wwb.
      implode_word W B -> implode_word W B' -> binary_eq B B' -> type.
- :
   implode_word_fun (implode_word_ Dapp1 Dapp2 Dapp3)
      (implode_word_ Dapp1' Dapp2' Dapp3') Dbeq
      <- binary_append_fun Dapp3' Dapp3 Dbeq1
      <- binary_append_resp Dbeq1 binary_eq_ binary_eq_ Dapp2' Dapp2''
      <- binary_append_fun Dapp2'' Dapp2 Dbeq2
      <- binary_append_resp Dbeq2 binary_eq_ binary_eq_ Dapp1' Dapp1''
      <- binary_append_fun Dapp1 Dapp1'' Dbeq.
lookup_loc_fun :
   Pi LM:locmap. Pi L:loc. Pi A1:binary wwb. Pi BIT1:bit. Pi A2:binary wwb.
      Pi BIT2:bit.
      lookup_loc LM L A1 BIT1 -> lookup_loc LM L A2 BIT2 -> binary_eq A1 A2
         -> type.
-z : lookup_loc_fun lookup_loc_z lookup_loc_z binary_eq_.
-s :
   lookup_loc_fun (lookup_loc_s Dlook1 X1) (lookup_loc_s Dlook2 X2) Dbeq
      <- lookup_loc_fun Dlook1 Dlook2 Dbeq.
-z :
   lookup_loc_fun (lookup_loc_s X1 (loc_lt_ Dlt)) lookup_loc_z Dbeq
      <- lt_contradict Dlt Dfalse
      <- false_implies_binary_eq Dfalse wwb B1 B2 Dbeq.
-s :
   lookup_loc_fun lookup_loc_z (lookup_loc_s X1 (loc_lt_ Dlt)) Dbeq
      <- lt_contradict Dlt Dfalse
      <- false_implies_binary_eq Dfalse wwb B1 B2 Dbeq.
lookup_gotptr_fun :
   Pi IM:irfmap. Pi A:binary wwb. Pi A':binary wwb.
      lookup_gotptr IM A -> lookup_gotptr IM A' -> binary_eq A A' -> type.
- : lookup_gotptr_fun lookup_gotptr_z lookup_gotptr_z binary_eq_.
- :
   lookup_gotptr_fun (lookup_gotptr_s Dlook) (lookup_gotptr_s Dlook') Dbeq
      <- lookup_gotptr_fun Dlook Dlook' Dbeq.
notin_lookup_contra :
   Pi B:binary wwb. Pi LM:locmap. Pi L1:loc.
      notin_lm B LM -> lookup_loc LM L1 B one' -> false -> type.
- :
   notin_lookup_contra (notin_lm_one X1 Dneq) lookup_loc_z Dfalse
      <- binary_neq_contradict Dneq Dfalse.
- :
   notin_lookup_contra (notin_lm_zero Dnotin) (lookup_loc_s Dlook X1) Dfalse
      <- notin_lookup_contra Dnotin Dlook Dfalse.
- :
   notin_lookup_contra (notin_lm_one Dnotin X1) (lookup_loc_s Dlook X2) Dfalse
      <- notin_lookup_contra Dnotin Dlook Dfalse.
false_implies_loc_eq : false -> Pi L1:loc. Pi L2:loc. loc_eq L1 L2 -> type.
lookup_loc_fun1 :
   Pi LM:locmap. Pi L1:loc. Pi L2:loc. Pi B:binary wwb. Pi L3:loc.
      locmap_wf LM L1 -> lookup_loc LM L2 B one' -> lookup_loc LM L3 B one'
         -> loc_eq L2 L3 -> type.
-z : lookup_loc_fun1 X1 lookup_loc_z lookup_loc_z loc_eq_.
-s :
   lookup_loc_fun1 (locmap_wf_one Dlwf X1 X2) (lookup_loc_s Dlook1 X3)
      (lookup_loc_s Dlook2 X4) Dloceq
      <- lookup_loc_fun1 Dlwf Dlook1 Dlook2 Dloceq.
-s :
   lookup_loc_fun1 (locmap_wf_zero Dlwf X1) (lookup_loc_s Dlook1 X2)
      (lookup_loc_s Dlook2 X3) Dloceq
      <- lookup_loc_fun1 Dlwf Dlook1 Dlook2 Dloceq.
-s :
   lookup_loc_fun1 (locmap_wf_one X1 Dnotin X2) lookup_loc_z
      (lookup_loc_s Dlook1 Dloclt) Dloceq
      <- notin_lookup_contra Dnotin Dlook1 Dfalse
      <- false_implies_loc_eq Dfalse L1 L2 Dloceq.
-z :
   lookup_loc_fun1 (locmap_wf_one X1 Dnotin X2) (lookup_loc_s Dlook1 Dloclt)
      lookup_loc_z Dloceq
      <- notin_lookup_contra Dnotin Dlook1 Dfalse
      <- false_implies_loc_eq Dfalse L1 L2 Dloceq.
implode_word_fun1 :
   Pi S1:string ww. Pi B:binary wwb. Pi S2:string ww.
      implode_word S1 B -> implode_word S2 B -> string_eq S1 S2 -> type.
- :
   implode_word_fun1 (implode_word_ Dapp1 Dapp2 Dapp3)
      (implode_word_ Dapp1' Dapp2' Dapp3') Dseq4
      <- binary_append'_fun Dapp1 Dapp1' Dbeq1 Dbeq2 X3
      <- binary_append_resp binary_eq_ binary_eq_ Dbeq1 Dapp2 Dapp2''
      <- binary_append'_fun Dapp2'' Dapp2' Dbeq3 Dbeq4 X2
      <- binary_append_resp binary_eq_ binary_eq_ Dbeq3 Dapp3 Dapp3''
      <- binary_append'_fun Dapp3'' Dapp3' Dbeq5 Dbeq6 X1
      <- string_eq_cons string_eq_ Dbeq5 Dseq1
      <- string_eq_cons Dseq1 Dbeq6 Dseq2
      <- string_eq_cons Dseq2 Dbeq4 Dseq3
      <- string_eq_cons Dseq3 Dbeq2 Dseq4.
asignextend_fun :
   Pi B1:binary bw. Pi W1:binary wwb. Pi W2:binary wwb.
      asignextend B1 W1 -> asignextend B1 W2 -> binary_eq W1 W2 -> type.
asignextend_fun_nonneg :
   asignextend_fun asignextend_nonneg asignextend_nonneg binary_eq_.
asignextend_fun_neg :
   asignextend_fun asignextend_neg asignextend_neg binary_eq_.
signextend_byte_fun :
   Pi B1:binary bw. Pi B:binary bw. Pi B':binary bw.
      signextend_byte B1 B -> signextend_byte B1 B' -> binary_eq B B' -> type.
-nonneg :
   signextend_byte_fun signextend_byte_nonneg signextend_byte_nonneg binary_eq_.
-neg : signextend_byte_fun signextend_byte_neg signextend_byte_neg binary_eq_.
alu_zf_of_fun :
   Pi N1:nat. Pi AW:binary (s N1). Pi F:bit. Pi F':bit.
      alu_zf_of AW F -> alu_zf_of AW F' -> bit_eq F F' -> type.
alu_zf_of_fun_act_set :
   alu_zf_of_fun (alu_zf_of_set Diz) (alu_zf_of_set Diz') bit_eq_.
alu_zf_of_fun_act_clear :
   alu_zf_of_fun (alu_zf_of_clear Dinz) (alu_zf_of_clear Dinz') bit_eq_.
alu_zf_of_fun_act_setcl :
   alu_zf_of_fun (alu_zf_of_set Diz) (alu_zf_of_clear Dinz) Dfeq
      <- zero_nonzero_contradict binary_eq_ Diz Dinz Dfalse
      <- false_implies_bit_eq Dfalse one' zero Dfeq.
alu_zf_of_fun_act_clset :
   alu_zf_of_fun (alu_zf_of_clear Dinz) (alu_zf_of_set Diz) Dfeq
      <- zero_nonzero_contradict binary_eq_ Diz Dinz Dfalse
      <- false_implies_bit_eq Dfalse zero one' Dfeq.
alu_sf_of_fun :
   Pi N1:nat. Pi AW:binary (s N1). Pi F:bit. Pi F':bit.
      alu_sf_of AW F -> alu_sf_of AW F' -> bit_eq F F' -> type.
- : alu_sf_of_fun alu_sf_of_1 alu_sf_of_1 bit_eq_.
- :
   alu_sf_of_fun (alu_sf_of_n D) (alu_sf_of_n D') Deq <- alu_sf_of_fun D D' Deq.
result_flags_of_fun :
   Pi N1:nat. Pi AW:binary (s N1). Pi CF:bit. Pi OF:bit. Pi RF:result_flags.
      Pi RF':result_flags.
      result_flags_of AW CF OF RF -> result_flags_of AW CF OF RF'
         -> result_flags_eq RF RF' -> type.
result_flags_of_fun_ :
   result_flags_of_fun (result_flags_of_ Dsf Dzf) (result_flags_of_ Dsf' Dzf')
      Drfeq
      <- alu_sf_of_fun Dsf Dsf' Dfeq1
      <- alu_zf_of_fun Dzf Dzf' Dfeq2
      <- result_flags_resp bit_eq_ Dfeq2 Dfeq1 bit_eq_ Drfeq.
binop*_fun :
   Pi N1:nat. Pi ALUOP:aluop. Pi B1:binary N1. Pi B2:binary N1. Pi B3:binary N1.
      Pi RF:result_flags. Pi B3':binary N1. Pi RF':result_flags.
      binop* ALUOP B1 B2 B3 RF -> binop* ALUOP B1 B2 B3' RF' -> binary_eq B3 B3'
         -> result_flags_eq RF RF' -> type.
- :
   binop*_fun (binop_add Dres Dadd) (binop_add Dres' Dadd') Dbeq1 Dreq
      <- add_wo_fun3 Dadd Dadd' Dbiteq1 Dbiteq2 Dbeq1
      <- result_flags_of_resp Dbeq1 Dbiteq1 Dbiteq2 result_flags_eq_ Dres Dres''
      <- result_flags_of_fun Dres'' Dres' Dreq.
- :
   binop*_fun (binop_sub Dres Dadd) (binop_sub Dres' Dadd') Dbeq1 Dreq
      <- add_wo_commute Dadd Dadd1
      <- add_wo_commute Dadd' Dadd1'
      <- add_wo_fun1 Dadd1 Dadd1' Dbiteq1 Dbiteq2 Dbeq1
      <- result_flags_of_resp Dbeq1 Dbiteq1 Dbiteq2 result_flags_eq_ Dres Dres''
      <- result_flags_of_fun Dres'' Dres' Dreq.
- :
   binop*_fun (binop_and Dres Dand) (binop_and Dres' Dand') Dbeq1 Dreq
      <- and_fun3 Dand Dand' Dbeq1
      <- result_flags_of_resp Dbeq1 bit_eq_ bit_eq_ result_flags_eq_ Dres Dres''
      <- result_flags_of_fun Dres'' Dres' Dreq.
- :
   binop*_fun (binop_or Dres Dor) (binop_or Dres' Dor') Dbeq1 Dreq
      <- or_fun3 Dor Dor' Dbeq1
      <- result_flags_of_resp Dbeq1 bit_eq_ bit_eq_ result_flags_eq_ Dres Dres''
      <- result_flags_of_fun Dres'' Dres' Dreq.
- :
   binop*_fun (binop_xor Dres Dxor) (binop_xor Dres' Dxor') Dbeq1 Dreq
      <- xor_fun3 Dxor Dxor' Dbeq1
      <- result_flags_of_resp Dbeq1 bit_eq_ bit_eq_ result_flags_eq_ Dres Dres''
      <- result_flags_of_fun Dres'' Dres' Dreq.
binop_fun :
   Pi N1:nat. Pi ALUOP:aluop. Pi W1:string N1. Pi W2:string N1. Pi W3:string N1.
      Pi RF:result_flags. Pi W3':string N1. Pi RF':result_flags.
      binop ALUOP W1 W2 W3 RF -> binop ALUOP W1 W2 W3' RF' -> string_eq W3 W3'
         -> result_flags_eq RF RF' -> type.
- :
   binop_fun (binop_4 Dimp3 Dbinop Dimp2 Dimp1)
      (binop_4 Dimp3' Dbinop' Dimp2' Dimp1') Dseq1 Dreq
      <- implode_word_fun Dimp1 Dimp1' Dbeq1
      <- implode_word_fun Dimp2 Dimp2' Dbeq2
      <- binop*_resp Dbeq1 Dbeq2 binary_eq_ result_flags_eq_ Dbinop Dbinop''
      <- binop*_fun Dbinop'' Dbinop' Dbeq3 Dreq
      <- implode_word_resp string_eq_ Dbeq3 Dimp3 Dimp3''
      <- implode_word_fun1 Dimp3'' Dimp3' Dseq1.
- :
   binop_fun (binop_1 Dbinop) (binop_1 Dbinop') Dseq1 Dreq
      <- binop*_fun Dbinop Dbinop' Dbeq Dreq
      <- string_eq_cons string_eq_ Dbeq Dseq1.
shiftop_1_fun :
   Pi N1:nat. Pi OP:aluop. Pi Bin:binary N1. Pi F:flags. Pi Bout:binary N1.
      Pi RF:result_flags. Pi Bout':binary N1. Pi RF':result_flags.
      shiftop_1 OP Bin F Bout RF -> shiftop_1 OP Bin F Bout' RF'
         -> binary_eq Bout Bout' -> result_flags_eq RF RF' -> type.
- :
   shiftop_1_fun (shiftop_rol_1 Drol) (shiftop_rol_1 Drol') Dbeq Drfeq
      <- rol_once_wo_fun Drol Drol' Dbeq Dbiteq1 Dbiteq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_1_fun (shiftop_ror_1 Drol) (shiftop_ror_1 Drol') Dbeq Drfeq
      <- ror_once_wo_fun Drol Drol' Dbeq Dbiteq1 Dbiteq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_1_fun (shiftop_rcl_1 Drol) (shiftop_rcl_1 Drol') Dbeq3 Drfeq
      <- rol_once_wo_fun Drol Drol' Dbeq2 Dbiteq1 Dbiteq2
      <- binary_eq_cons' X1 Dbeq3 Dbeq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_1_fun (shiftop_rcr_1 Dror) (shiftop_rcr_1 Dror') Dbeq3 Drfeq
      <- ror_once_wo_fun Dror Dror' Dbeq2 Dbiteq1 Dbiteq2
      <- binary_eq_cons' X1 Dbeq3 Dbeq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_1_fun (shiftop_shl_1 Drol) (shiftop_shl_1 Drol') Dbeq Drfeq
      <- shl_once_wo_fun Drol Drol' Dbeq Dbiteq1 Dbiteq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_1_fun (shiftop_shr_1 Drol) (shiftop_shr_1 Drol') Dbeq Drfeq
      <- shr_once_wo_fun Drol Drol' Dbeq Dbiteq1 Dbiteq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_1_fun (shiftop_sar_1 Drol) (shiftop_sar_1 Drol') Dbeq Drfeq
      <- sar_once_wo_fun Drol Drol' Dbeq Dbiteq1 Dbiteq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
shiftop_gt_1_fun :
   Pi N1:nat. Pi OP:aluop. Pi Bin:binary N1. Pi F:flags. Pi N:nat. Pi OR:oracle.
      Pi Bout:binary N1. Pi RF:result_flags. Pi OR':oracle. Pi Bout':binary N1.
      Pi RF':result_flags. Pi OR'':oracle.
      shiftop_gt_1 OP Bin F N OR Bout RF OR'
         -> shiftop_gt_1 OP Bin F N OR Bout' RF' OR'' -> binary_eq Bout Bout'
         -> result_flags_eq RF RF' -> oracle_eq OR' OR'' -> type.
- :
   shiftop_gt_1_fun (shiftop_rol_gt_1 Dc1 Dc2 Drol)
      (shiftop_rol_gt_1 Dc1' Dc2' Drol') Dbeq Drfeq Doreq2
      <- rotate_left_fun Drol Drol' Dbeq
      <- consume_bit_fun Dc2 Dc2' Dbiteq1 Doreq1
      <- consume_bit_resp Doreq1 bit_eq_ oracle_eq_ Dc1 Dc1''
      <- consume_bit_fun Dc1'' Dc1' Dbiteq2 Doreq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_gt_1_fun (shiftop_ror_gt_1 Dc1 Dc2 Drol)
      (shiftop_ror_gt_1 Dc1' Dc2' Drol') Dbeq Drfeq Doreq2
      <- rotate_right_fun Drol Drol' Dbeq
      <- consume_bit_fun Dc2 Dc2' Dbiteq1 Doreq1
      <- consume_bit_resp Doreq1 bit_eq_ oracle_eq_ Dc1 Dc1''
      <- consume_bit_fun Dc1'' Dc1' Dbiteq2 Doreq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_gt_1_fun (shiftop_rcl_gt_1 Dc1 Dc2 Drol)
      (shiftop_rcl_gt_1 Dc1' Dc2' Drol') Dbeq3 Drfeq Doreq2
      <- rotate_left_fun Drol Drol' Dbeq2
      <- binary_eq_cons' X1 Dbeq3 Dbeq2
      <- consume_bit_fun Dc2 Dc2' Dbiteq1 Doreq1
      <- consume_bit_resp Doreq1 bit_eq_ oracle_eq_ Dc1 Dc1''
      <- consume_bit_fun Dc1'' Dc1' Dbiteq2 Doreq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_gt_1_fun (shiftop_rcr_gt_1 Dc1 Dc2 Dror)
      (shiftop_rcr_gt_1 Dc1' Dc2' Dror') Dbeq3 Drfeq Doreq2
      <- rotate_right_fun Dror Dror' Dbeq2
      <- binary_eq_cons' X1 Dbeq3 Dbeq2
      <- consume_bit_fun Dc2 Dc2' Dbiteq1 Doreq1
      <- consume_bit_resp Doreq1 bit_eq_ oracle_eq_ Dc1 Dc1''
      <- consume_bit_fun Dc1'' Dc1' Dbiteq2 Doreq2
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_gt_1_fun (shiftop_shl_gt_1 Dc1 Drol) (shiftop_shl_gt_1 Dc1' Drol')
      Dbeq Drfeq Doreq1
      <- shift_left_fun Drol Drol' Dbeq Dbiteq1
      <- consume_bit_fun Dc1 Dc1' Dbiteq2 Doreq1
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_gt_1_fun (shiftop_shr_gt_1 Dc1 Drol) (shiftop_shr_gt_1 Dc1' Drol')
      Dbeq Drfeq Doreq1
      <- shift_right_fun Drol Drol' Dbeq Dbiteq1
      <- consume_bit_fun Dc1 Dc1' Dbiteq2 Doreq1
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
- :
   shiftop_gt_1_fun (shiftop_sar_gt_1 Dc1 Drol) (shiftop_sar_gt_1 Dc1' Drol')
      Dbeq Drfeq Doreq1
      <- shift_arith_right_fun Drol Drol' Dbeq Dbiteq1
      <- consume_bit_fun Dc1 Dc1' Dbiteq2 Doreq1
      <- result_flags_resp Dbiteq1 bit_eq_ bit_eq_ Dbiteq2 Drfeq.
shiftop*_fun :
   Pi N1:nat. Pi OP:aluop. Pi Bin:binary N1. Pi F:flags. Pi B:binary bw.
      Pi OR:oracle. Pi Bout:binary N1. Pi RF:result_flags. Pi OR1:oracle.
      Pi Bout':binary N1. Pi RF':result_flags. Pi OR2:oracle.
      shiftop* OP Bin F B OR Bout RF OR1 -> shiftop* OP Bin F B OR Bout' RF' OR2
         -> binary_eq Bout Bout' -> result_flags_eq RF RF' -> oracle_eq OR1 OR2
         -> type.
- :
   shiftop*_fun (shiftop*_z Dc1 Dc2 X2 X3) (shiftop*_z Dc1' Dc2' X4 X5)
      binary_eq_ result_flags_eq_ Doreq2
      <- consume_bit_fun Dc2 Dc2' Dbiteq1 Doreq1
      <- consume_bit_resp Doreq1 bit_eq_ oracle_eq_ Dc1 Dc1''
      <- consume_bit_fun Dc1'' Dc1' Dbiteq2 Doreq2.
- :
   shiftop*_fun (shiftop*_1 D1 X4 X5) (shiftop*_1 D2 X6 X7) Dbeq Drfeq
      oracle_eq_
      <- shiftop_1_fun D1 D2 Dbeq Drfeq.
- :
   shiftop*_fun (shiftop*_gt_1 D1 X4 Drep1 Dand1)
      (shiftop*_gt_1 D2 X5 Drep2 Dand2) Dbeq Drfeq Doreq
      <- and_fun3 Dand1 Dand2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 Drep1 Drep1'
      <- represents_fun1 Drep1' Drep2 Dnateq1
      <- shiftop_gt_1_resp binary_eq_ flags_eq_ Dnateq1 oracle_eq_ binary_eq_
            result_flags_eq_ oracle_eq_ D1 D1'
      <- shiftop_gt_1_fun D1' D2 Dbeq Drfeq Doreq.
- :
   shiftop*_fun (shiftop*_z X3 X4 Drep1 Dand1) (shiftop*_1 X5 Drep2 Dand2) Dbeq3
      Drfeq Doreq
      <- and_fun3 Dand1 Dand2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 Drep1 Drep1'
      <- represents_fun1 Drep1' Drep2 Dnateq1
      <- lt_resp Dnateq1 nat_eq_ lt_z Dlt
      <- lt_contradict Dlt Dfalse
      <- false_implies_binary_eq Dfalse N1 B5 B6 Dbeq3
      <- false_implies_result_flags_eq Dfalse (result_flags_ B1 B2 B3 B4) X1
            Drfeq
      <- false_implies_oracle_eq Dfalse Doreq.
- :
   shiftop*_fun (shiftop*_1 X3 Drep2 Dand2) (shiftop*_z X4 X5 Drep1 Dand1) Dbeq3
      Drfeq Doreq
      <- and_fun3 Dand1 Dand2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 Drep1 Drep1'
      <- represents_fun1 Drep1' Drep2 Dnateq1
      <- lt_resp Dnateq1 nat_eq_ lt_z Dlt
      <- lt_contradict Dlt Dfalse
      <- false_implies_binary_eq Dfalse N1 B5 B6 Dbeq3
      <- false_implies_result_flags_eq Dfalse X1 (result_flags_ B1 B2 B3 B4)
            Drfeq
      <- false_implies_oracle_eq Dfalse Doreq.
- :
   shiftop*_fun (shiftop*_z X3 X4 Drep1 Dand1)
      (shiftop*_gt_1 X5 Dlt1 Drep2 Dand2) Dbeq3 Drfeq Doreq
      <- and_fun3 Dand1 Dand2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 Drep1 Drep1'
      <- represents_fun1 Drep2 Drep1' Dnateq1
      <- lt_resp nat_eq_ Dnateq1 Dlt1 Dlt2
      <- lt_leq_contradict Dlt2 leq_z Dfalse
      <- false_implies_binary_eq Dfalse N1 B5 B6 Dbeq3
      <- false_implies_result_flags_eq Dfalse (result_flags_ B1 B2 B3 B4) X1
            Drfeq
      <- false_implies_oracle_eq Dfalse Doreq.
- :
   shiftop*_fun (shiftop*_gt_1 X3 Dlt1 Drep2 Dand2)
      (shiftop*_z X4 X5 Drep1 Dand1) Dbeq3 Drfeq Doreq
      <- and_fun3 Dand1 Dand2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 Drep1 Drep1'
      <- represents_fun1 Drep2 Drep1' Dnateq1
      <- lt_resp nat_eq_ Dnateq1 Dlt1 Dlt2
      <- lt_leq_contradict Dlt2 leq_z Dfalse
      <- false_implies_binary_eq Dfalse N1 B5 B6 Dbeq3
      <- false_implies_result_flags_eq Dfalse X1 (result_flags_ B1 B2 B3 B4)
            Drfeq
      <- false_implies_oracle_eq Dfalse Doreq.
- :
   shiftop*_fun (shiftop*_1 X4 Drep1 Dand1) (shiftop*_gt_1 X5 Dlt1 Drep2 Dand2)
      Dbeq3 Drfeq Doreq
      <- and_fun3 Dand1 Dand2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 Drep1 Drep1'
      <- represents_fun1 Drep2 Drep1' Dnateq1
      <- lt_resp nat_eq_ Dnateq1 Dlt1 Dlt2
      <- lt_contradict Dlt2 Dfalse
      <- false_implies_binary_eq Dfalse N1 B1 B2 Dbeq3
      <- false_implies_result_flags_eq Dfalse X1 X2 Drfeq
      <- false_implies_oracle_eq Dfalse Doreq.
- :
   shiftop*_fun (shiftop*_gt_1 X4 Dlt1 Drep2 Dand2) (shiftop*_1 X5 Drep1 Dand1)
      Dbeq3 Drfeq Doreq
      <- and_fun3 Dand1 Dand2 Dbeq2
      <- represents_resp nat_eq_ Dbeq2 Drep1 Drep1'
      <- represents_fun1 Drep2 Drep1' Dnateq1
      <- lt_resp nat_eq_ Dnateq1 Dlt1 Dlt2
      <- lt_contradict Dlt2 Dfalse
      <- false_implies_binary_eq Dfalse N1 B1 B2 Dbeq3
      <- false_implies_result_flags_eq Dfalse X1 X2 Drfeq
      <- false_implies_oracle_eq Dfalse Doreq.
shiftop_fun :
   Pi N1:nat. Pi ALUOP:aluop. Pi W1:string N1. Pi F:flags. Pi W2:string 1'.
      Pi OR1:oracle. Pi W3:string N1. Pi RF:result_flags. Pi OR2:oracle.
      Pi W3':string N1. Pi RF':result_flags. Pi OR2':oracle.
      shiftop ALUOP W1 F W2 OR1 W3 RF OR2
         -> shiftop ALUOP W1 F W2 OR1 W3' RF' OR2' -> string_eq W3 W3'
         -> result_flags_eq RF RF' -> oracle_eq OR2 OR2' -> type.
- :
   shiftop_fun (shiftop_len_4 Dimp2 Dbinop Dimp1)
      (shiftop_len_4 Dimp2' Dbinop' Dimp1') Dseq1 Dreq Doeq
      <- implode_word_fun Dimp1 Dimp1' Dbeq1
      <- shiftop*_resp Dbeq1 flags_eq_ binary_eq_ oracle_eq_ binary_eq_
            result_flags_eq_ oracle_eq_ Dbinop Dbinop''
      <- shiftop*_fun Dbinop'' Dbinop' Dbeq2 Dreq Doeq
      <- implode_word_resp string_eq_ Dbeq2 Dimp2 Dimp2''
      <- implode_word_fun1 Dimp2'' Dimp2' Dseq1.
- :
   shiftop_fun (shiftop_len_1 Dbinop X4) (shiftop_len_1 Dbinop' X5) Dseq1 Dreq
      Doeq
      <- shiftop*_fun Dbinop Dbinop' Dbeq Dreq Doeq
      <- string_eq_cons string_eq_ Dbeq Dseq1.
length : Pi N1:nat. string N1 -> nat -> type.
length_end : length # z.
length_cons : length (/ B1 S) (s N) <- length S N.
string_length_fun :
   Pi N:nat. Pi N':nat. Pi S1:string N. Pi S2:string N'.
      string_eq S1 S2 -> nat_eq N N' -> type.
string_length_fun_ : string_length_fun string_eq_ nat_eq_.
str_val_size_corr :
   Pi N:nat. Pi CI:corresp_info. Pi V:val. Pi S:string N.
      impl_val CI S V -> size V N -> type.
str_val_size_corr_null : str_val_size_corr # impl_val_null size_null.
str_val_size_corr_cons :
   str_val_size_corr (/ B S) (impl_val_cons Dival Duval) (size_cons Dsize)
      <- str_val_size_corr S Dival Dsize.
str_val_size_corr' :
   Pi N1:nat. Pi CI:corresp_info. Pi V:val. Pi N2:nat. Pi S:string N1.
      impl_val CI S V -> size V N2 -> nat_eq N1 N2 -> type.
str_val_size_corr'_null : str_val_size_corr' # impl_val_null size_null nat_eq_.
str_val_size_corr'_cons :
   str_val_size_corr' (/ B S) (impl_val_cons Dival Duval) (size_cons Dsize)
      Dnateq
      <- str_val_size_corr' S Dival Dsize Dnateq'
      <- nat_eq_inc Dnateq' Dnateq.
string_eq_nil : Pi N:nat. Pi S:string N. nat_eq N 0' -> string_eq # S -> type.
string_eq_nil_ : string_eq_nil # nat_eq_ string_eq_.
false_implies_string_eq :
   false
      -> Pi N1:nat. Pi S1:string N1. Pi N2:nat. Pi S2:string N2.
             string_eq S1 S2 -> type.
junk_impl :
   Pi N:nat. Pi V:val. Pi S:string N. Pi CI:corresp_info.
      val_exp (;' (@' junk 0') null) N V -> impl_val CI S V -> type.
junk_impl_z : junk_impl # CI val_exp_z impl_val_null.
junk_impl_s :
   junk_impl (/ B S) CI (val_exp_s (append_cons append_null) Dve)
      (impl_val_cons Dival impl_uval_junk)
      <- junk_impl S CI Dve Dival.
alength : astring -> nat -> type.
alength_end : alength ## z.
alength_cons : alength (| B1 AS) (s N) <- alength AS N.
astring_to_string_length :
   Pi M:nat. Pi AS:astring. Pi S:string M. Pi N:nat.
      astring_to_string AS S -> alength AS N -> nat_eq M N -> type.
astring_to_string_length_z :
   astring_to_string_length astring_to_string_nil alength_end nat_eq_.
astring_to_string_length_s :
   astring_to_string_length (astring_to_string_cons D1) (alength_cons D2) Deq'
      <- astring_to_string_length D1 D2 Deq
      <- nat_eq_inc Deq Deq'.
astring_to_string_null_fun :
   Pi N1:nat. Pi S:string N1. astring_to_string ## S -> string_eq S # -> type.
astring_to_string_null_fun_ :
   astring_to_string_null_fun astring_to_string_nil string_eq_.
astring_to_string_cons_fun :
   Pi N1:nat. Pi B:binary bw. Pi AS:astring. Pi B1:binary bw. Pi S:string N1.
      astring_to_string (| B AS) (/ B1 S) -> binary_eq B1 B
         -> astring_to_string AS S -> type.
astring_to_string_cons_fun_ :
   astring_to_string_cons_fun (astring_to_string_cons Das) binary_eq_ Das.
astring_to_string_cons_fun' :
   Pi N1:nat. Pi B:binary bw. Pi AS:astring. Pi S1:string N1. Pi N2:nat.
      Pi S2:string N2.
      astring_to_string (| B AS) S1 -> string_eq S1 (/ B S2)
         -> astring_to_string AS S2 -> type.
astring_to_string_cons_fun'_ :
   astring_to_string_cons_fun' (astring_to_string_cons Das) string_eq_ Das.
can_index :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi N:nat. Pi V1:val.
      Pi V2:val. Pi N2:nat. Pi S1:string N. Pi S2:string N2.
      impl_val CI S V -> separate N V V1 V2 -> index N S S1 S2
         -> impl_val CI S1 V1 -> impl_val CI S2 V2 -> type.
can_index_z : can_index D separate_z index_z impl_val_null D.
can_index_s :
   can_index (impl_val_cons Dv Duv) (separate_s Dsep) (index_s Dindex)
      (impl_val_cons Dv1 Duv) Dv2
      <- can_index Dv Dsep Dindex Dv1 Dv2.
can_index' :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi V1:val.
      Pi V2:val. Pi N2:nat. Pi N:nat. Pi S1:string N. Pi S2:string N2.
      impl_val CI S V -> append V1 V2 V -> index N S S1 S2 -> impl_val CI S1 V1
         -> impl_val CI S2 V2 -> type.
can_index'_z : can_index' D append_null index_z impl_val_null D.
can_index'_s :
   can_index' (impl_val_cons Dv Duv) (append_cons Dapp) (index_s Dindex)
      (impl_val_cons Dv1 Duv) Dv2
      <- can_index' Dv Dapp Dindex Dv1 Dv2.
can_index'' :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi V1:val.
      Pi V2:val. Pi N2:nat. Pi N:nat. Pi S1:string N. Pi S2:string N2.
      impl_val CI S V -> append V1 V2 V -> index N S S1 S2 -> impl_val CI S1 V1
         -> impl_val CI S2 V2 -> type.
can_index''_z : can_index'' D append_null index_z impl_val_null D.
can_index''_s :
   can_index'' (impl_val_cons Dv Duv) (append_cons Dapp) (index_s Dindex)
      (impl_val_cons Dv1 Duv) Dv2
      <- can_index'' Dv Dapp Dindex Dv1 Dv2.
impl_val_compose :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi V1:val.
      Pi V2:val. Pi N2:nat. Pi N:nat. Pi S1:string N. Pi S2:string N2.
      impl_val CI S V -> append V1 V2 V -> index N S S1 S2 -> impl_val CI S1 V1
         -> impl_val CI S2 V2 -> type.
impl_val_compose_z : impl_val_compose D append_null index_z impl_val_null D.
impl_val_compose_s :
   impl_val_compose (impl_val_cons Dv Duv) (append_cons Dapp) (index_s Dindex)
      (impl_val_cons Dv1 Duv) Dv2
      <- impl_val_compose Dv Dapp Dindex Dv1 Dv2.
index_implies_separate :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi S2:string N2. Pi CI:corresp_info. Pi V:val. Pi V1:val. Pi V2:val.
      index N S S1 S2 -> impl_val CI S V -> separate N V V1 V2
         -> impl_val CI S1 V1 -> impl_val CI S2 V2 -> type.
index_implies_separate_z :
   index_implies_separate index_z D separate_z impl_val_null D.
index_implies_separate_s :
   index_implies_separate (index_s Dindex) (impl_val_cons Dival Diuval)
      (separate_s Dsep) (impl_val_cons Dival1 Diuval) Dival2
      <- index_implies_separate Dindex Dival Dsep Dival1 Dival2.
index_implies_separate' :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi S2:string N2. Pi CI:corresp_info. Pi V:val. Pi V1:val. Pi V2:val.
      index N S S1 S2 -> impl_val CI S V -> separate N V V1 V2
         -> impl_val CI S1 V1 -> impl_val CI S2 V2 -> type.
index_implies_separate'_z :
   index_implies_separate' index_z D separate_z impl_val_null D.
index_implies_separate'_s :
   index_implies_separate' (index_s Dindex) (impl_val_cons Dival Diuval)
      (separate_s Dsep) (impl_val_cons Dival1 Diuval) Dival2
      <- index_implies_separate' Dindex Dival Dsep Dival1 Dival2.
index_cons :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi B:binary bw. Pi S2:string N2. Pi N3:nat. Pi S3:string (s N).
      Pi S':string N3. Pi S4:string N.
      index N S S1 (/ B S2) -> index (s N) S S3 S' -> index N S S4 (/ B S')
         -> type.
index_cons_z : index_cons index_z (index_s index_z) index_z.
index_cons_s :
   index_cons (index_s D1) (index_s D2) (index_s D3) <- index_cons D1 D2 D3.
index_fun :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi S2:string N2. Pi N3:nat. Pi S1':string N. Pi S2':string N3.
      index N S S1 S2 -> index N S S1' S2' -> string_eq S1 S1'
         -> string_eq S2 S2' -> type.
index_fun_z : index_fun index_z index_z string_eq_ string_eq_.
index_fun_s :
   index_fun (index_s D1) (index_s D2) D3' D4
      <- index_fun D1 D2 D3 D4
      <- string_eq_cons D3 binary_eq_ D3'.
index_fun' :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi S2:string N2. Pi N3:nat. Pi N4:nat. Pi N':nat. Pi S':string N3.
      Pi S1':string N'. Pi S2':string N4.
      index N S S1 S2 -> index N' S' S1' S2' -> string_eq S1 S1'
         -> string_eq S2 S2' -> nat_eq N N' -> string_eq S S' -> type.
index_fun'_z :
   index_fun' index_z index_z string_eq_ string_eq_ nat_eq_ string_eq_.
index_fun'_s :
   index_fun' (index_s Di) (index_s Di') string_eq_ string_eq_ nat_eq_ Dseq
      <- index_fun' Di Di' string_eq_ string_eq_ Dneq Dseq'
      <- string_eq_cons Dseq' binary_eq_ Dseq.
index_fun'' :
   Pi N:nat. Pi N':nat. Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi S1:string N.
      Pi S2:string N2. Pi N3:nat. Pi S1':string N'. Pi S2':string N3.
      nat_eq N N' -> index N S S1 S2 -> index N' S S1' S2' -> string_eq S1 S1'
         -> string_eq S2 S2' -> type.
- : index_fun'' nat_eq_ index_z index_z string_eq_ string_eq_.
- :
   index_fun'' nat_eq_ (index_s D) (index_s D') D1' D2
      <- index_fun'' nat_eq_ D D' D1 D2
      <- string_eq_cons D1 binary_eq_ D1'.
index_all : Pi N:nat. Pi S:string N. index N S S # -> type.
index_all_nil : index_all # index_z.
index_all_cons : index_all (/ B S) (index_s D) <- index_all S D.
index_z_fun :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi S1:string 0'. Pi S2:string N2.
      index 0' S S1 S2 -> string_eq S1 # -> string_eq S2 S -> type.
index_z_fun_ : index_z_fun index_z string_eq_ string_eq_.
index_s_fun :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi B:binary bw.
      Pi S1:string N. Pi S2:string N2. Pi N3:nat. Pi S':string N3.
      index (s N) S (/ B S1) S2 -> string_eq (/ B S') S -> index N S' S1 S2
         -> type.
index_s_fun_ : index_s_fun (index_s Dind) string_eq_ Dind.
index_implies_sum :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S1:string N1. Pi S:string N.
      Pi S2:string N2. index N S1 S S2 -> sum N N2 N1 -> type.
index_implies_sum_z : index_implies_sum index_z sum_z.
index_implies_sum_s :
   index_implies_sum (index_s Dindex) (sum_s Dsum)
      <- index_implies_sum Dindex Dsum.
sum_implies_index :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S1:string N1. Pi S2:string N2.
      sum N1 N2 N -> Pi S:string N. index N1 S S1 S2 -> type.
- : sum_implies_index sum_z S1 index_z.
- :
   sum_implies_index (sum_s Dsum) (/ B S) (index_s Dindex)
      <- sum_implies_index Dsum S Dindex.
index_all' :
   Pi M:nat. Pi N:nat. Pi S':string N. Pi S:string M.
      index N S S' # -> nat_eq M N -> string_eq S S' -> type.
index_all'_ :
   index_all' S Dindex Dnateq Dstreq
      <- index_implies_sum Dindex Dsum
      <- sum_commute Dsum Dsum'
      <- sum_fun3 Dsum' sum_z Dnateq
      <- index_all S' Dindex'
      <- index_fun' Dindex Dindex' string_eq_ string_eq_ X1 Dstreq.
index_compose :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S1:string N1. Pi S2:string N3.
      Pi S3:string N2. Pi N4:nat. Pi N5:nat. Pi S4:string N5. Pi S5:string N4.
      Pi N6:nat. Pi S6:string N6.
      index N3 S1 S2 S3 -> index N5 S3 S4 S5 -> sum N3 N5 N6
         -> index N6 S1 S6 S5 -> type.
index_compose_z : index_compose index_z Dindex sum_z Dindex.
index_compose_s :
   index_compose (index_s Dindex1) Dindex (sum_s Dsum) (index_s Dindex')
      <- index_compose Dindex1 Dindex Dsum Dindex'.
index_compose' :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S1:string N1. Pi S2:string N3.
      Pi S3:string N2. Pi N4:nat. Pi N5:nat. Pi S4:string N5. Pi S5:string N4.
      Pi N6:nat. Pi S6:string N6.
      index N3 S1 S2 S3 -> index N5 S3 S4 S5 -> sum N3 N5 N6
         -> index N6 S1 S6 S5 -> index N3 S6 S2 S4 -> type.
index_compose'_z : index_compose' index_z Dindex sum_z Dindex index_z.
index_compose'_s :
   index_compose' (index_s Dindex1) Dindex (sum_s Dsum) (index_s Dindex')
      (index_s Drest)
      <- index_compose' Dindex1 Dindex Dsum Dindex' Drest.
index_compose'' :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S1:string N1. Pi S2:string N3.
      Pi S3:string N2. Pi N4:nat. Pi N5:nat. Pi S4:string N5. Pi S5:string N4.
      Pi N6:nat. Pi S6:string N6.
      index N3 S1 S2 S3 -> index N5 S3 S4 S5 -> sum N5 N3 N6
         -> index N6 S1 S6 S5 -> index N3 S6 S2 S4 -> type.
- :
   index_compose'' D1 D2 D3 D4 D5
      <- sum_commute D3 D3'
      <- index_compose' D1 D2 D3' D4 D5.
index_assoc :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S123:string N1. Pi S1:string N3.
      Pi S23:string N2. Pi N4:nat. Pi N5:nat. Pi S2:string N5. Pi S3:string N4.
      Pi N12:nat. Pi S12:string N12.
      index N3 S123 S1 S23 -> index N5 S23 S2 S3 -> index N12 S123 S12 S3
         -> index N3 S12 S1 S2 -> sum N3 N5 N12 -> type.
index_assoc_z : index_assoc index_z D D index_z sum_z.
index_assoc_s :
   index_assoc (index_s D1_23) D23 (index_s D12_3) (index_s D12) (sum_s Dsum)
      <- index_assoc D1_23 D23 D12_3 D12 Dsum.
index_assoc_sz :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S123:string N1. Pi S1:string N3.
      Pi S23:string N2. Pi N4:nat. Pi N5:nat. Pi S2:string N5. Pi S3:string N4.
      Pi N12:nat. Pi S12:string N12.
      index N3 S123 S1 S23 -> index N5 S23 S2 S3 -> index N12 S123 S12 S3
         -> index N3 S12 S1 S2 -> sum N3 N5 N12 -> type.
index_assoc_sz_z : index_assoc_sz index_z D D index_z sum_z.
index_assoc_sz_s :
   index_assoc_sz (index_s D1_23) D23 (index_s D12_3) (index_s D12) (sum_s Dsum)
      <- index_assoc_sz D1_23 D23 D12_3 D12 Dsum.
index_assoc' :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S123:string N1. Pi S1:string N3.
      Pi S23:string N2. Pi N4:nat. Pi N5:nat. Pi S2:string N5. Pi S3:string N4.
      Pi N12:nat. Pi S12:string N12.
      index N3 S123 S1 S23 -> index N5 S23 S2 S3 -> index N12 S123 S12 S3
         -> index N3 S12 S1 S2 -> sum N3 N5 N12 -> type.
index_assoc'_z : index_assoc' index_z D D index_z sum_z.
index_assoc'_s :
   index_assoc' (index_s D1_23) D23 (index_s D12_3) (index_s D12) (sum_s Dsum)
      <- index_assoc' D1_23 D23 D12_3 D12 Dsum.
index_assoc_sz' :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S123:string N1. Pi S1:string N3.
      Pi S23:string N2. Pi N4:nat. Pi N5:nat. Pi S2:string N5. Pi S3:string N4.
      Pi N12:nat. Pi S12:string N12.
      index N3 S123 S1 S23 -> index N5 S23 S2 S3 -> index N12 S123 S12 S3
         -> index N3 S12 S1 S2 -> sum N3 N5 N12 -> type.
index_assoc_sz'_z : index_assoc_sz' index_z D D index_z sum_z.
index_assoc_sz'_s :
   index_assoc_sz' (index_s D1_23) D23 (index_s D12_3) (index_s D12)
      (sum_s Dsum)
      <- index_assoc_sz' D1_23 D23 D12_3 D12 Dsum.
index_inc :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi B:binary bw. Pi S2:string N2. Pi S1':string (s N).
      index N S S1 (/ B S2) -> index (s N) S S1' S2 -> index N S1' S1 (/ B #)
         -> type.
index_inc_z : index_inc index_z (index_s index_z) index_z.
index_inc_s :
   index_inc (index_s Dindex) (index_s Dindex1) (index_s Dindex2)
      <- index_inc Dindex Dindex1 Dindex2.
index_byte_eq :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi B1:binary bw. Pi S1:string N1.
      Pi B2:binary bw. Pi S2:string N. Pi S3:string N2.
      index (s N) (/ B1 S1) (/ B2 S2) S3 -> binary_eq B2 B1 -> index N S1 S2 S3
         -> type.
index_byte_eq_ : index_byte_eq (index_s Dind) binary_eq_ Dind.
index_leq :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi B:binary bw. Pi S:string N1.
      Pi S1:string N. Pi S2:string N2. Pi M:nat. Pi N':nat. Pi S1':string N'.
      index N (/ B S) S1 S2 -> leq (s M) N -> index N' S S1' S2 -> leq M N'
         -> string_eq S1 (/ B S1') -> type.
index_leq_ : index_leq (index_s Dind) (leq_s Dleq) Dind Dleq string_eq_.
index_leftover :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi B:binary bw. Pi S2:string N2. Pi N3:nat. Pi S1':string (s N).
      Pi S2':string N3.
      index N S S1 (/ B S2) -> index (s N) S S1' S2' -> index N S S1 (/ B S2')
         -> type.
index_leftover_z : index_leftover index_z Dind index_z.
index_leftover_s :
   index_leftover (index_s Dind) (index_s Dind') (index_s Dind'')
      <- index_leftover Dind Dind' Dind''.
index_allbutone :
   Pi N:nat. Pi N1:nat. Pi S:string (s N). Pi S1:string N. Pi B:binary bw.
      Pi S2:string N1. index N S S1 (/ B S2) -> string_eq S2 # -> type.
index_allbutone_z : index_allbutone index_z string_eq_.
index_allbutone_s :
   index_allbutone (index_s Dind) Dseq <- index_allbutone Dind Dseq.
index_shift :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi B1:binary bw. Pi S1:string N1.
      Pi S2:string N3. Pi B2:binary bw. Pi S3:string N2. Pi S4:string N3.
      index N3 (/ B1 S1) S2 (/ B2 S3) -> index N3 S1 S4 S3 -> type.
index_shift_z : index_shift index_z index_z.
index_shift_s :
   index_shift (index_s Dind) (index_s Dind1) <- index_shift Dind Dind1.
index_less :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S1:string N3.
      Pi S2:string N2. Pi N4:nat. Pi N5:nat. Pi S3:string N5. Pi S4:string N4.
      Pi N6:nat. Pi S5:string N6.
      index N3 S S1 S2 -> index N5 S S3 S4 -> sum N3 N6 N5 -> index N3 S3 S1 S5
         -> index N6 S2 S5 S4 -> type.
index_less_z : index_less index_z Dind sum_z index_z Dind.
index_less_s :
   index_less (index_s Dind1) (index_s Dind2) (sum_s Dsum) (index_s Dind3) Dind4
      <- index_less Dind1 Dind2 Dsum Dind3 Dind4.
can_index_lesser :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi S2:string N2. Pi M:nat. Pi M1:nat. Pi S3:string M. Pi S5:string M1.
      Pi N3:nat. Pi S4:string N3.
      index N S S1 S2 -> sum M M1 N -> index M S1 S3 S5 -> index M S S3 S4
         -> index M1 S4 S5 S2 -> type.
can_index_lesser_z : can_index_lesser Dind sum_z index_z index_z Dind.
can_index_lesser_s :
   can_index_lesser (index_s Dind) (sum_s Dsum) (index_s Dind1) (index_s Dind2)
      Dind3
      <- can_index_lesser Dind Dsum Dind1 Dind2 Dind3.
can_index_lesser' :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi S2:string N2. Pi M:nat. Pi M1:nat. Pi S3:string M. Pi S5:string M1.
      Pi N3:nat. Pi S4:string N3.
      index N S S1 S2 -> sum M M1 N -> index M S1 S3 S5 -> index M S S3 S4
         -> index M1 S4 S5 S2 -> type.
- : can_index_lesser' Dind sum_z index_z index_z Dind.
- :
   can_index_lesser' (index_s Dind) (sum_s Dsum) (index_s Dind1) (index_s Dind2)
      Dind3
      <- can_index_lesser' Dind Dsum Dind1 Dind2 Dind3.
can_index_lesser'' :
   Pi N1:nat. Pi N2:nat. Pi N:nat. Pi S:string N1. Pi S1:string N.
      Pi S2:string N2. Pi M:nat. Pi M1:nat. Pi S3:string M. Pi S5:string M1.
      Pi N3:nat. Pi S4:string N3.
      index N S S1 S2 -> sum M M1 N -> index M S1 S3 S5 -> index M S S3 S4
         -> index M1 S4 S5 S2 -> type.
- :
   can_index_lesser'' Dindex1 Dsum1 Dindex2 Dindex3' Dindex4'
      <- can_index_lesser Dindex1 Dsum1 Dindex2' Dindex3 Dindex4
      <- index_fun Dindex2' Dindex2 Dseq1 Dseq2
      <- index_resp nat_eq_ string_eq_ Dseq1 string_eq_ Dindex3 Dindex3'
      <- index_resp nat_eq_ string_eq_ Dseq2 string_eq_ Dindex4 Dindex4'.
string_compose :
   Pi N:nat. Pi M:nat. Pi N1:nat. Pi S1:string N1. Pi S:string N.
      Pi S':string M. index N S1 S S' -> type.
string_compose_z : string_compose # S index_z.
string_compose_s :
   string_compose (/ B S) S2 (index_s Dind) <- string_compose S S2 Dind.
string_exp_fun :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi N:nat. Pi S1:string N2. Pi N3:nat.
      Pi S2:string N3.
      string_exp S N S1 -> string_exp S N S2 -> string_eq S1 S2 -> type.
- : string_exp_fun string_exp_z string_exp_z string_eq_.
- :
   string_exp_fun (string_exp_s Dind1 Dsexp1) (string_exp_s Dind2 Dsexp2) Dseq2
      <- string_exp_fun Dsexp1 Dsexp2 Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dind1 Dind1'
      <- index_fun' Dind1' Dind2 string_eq_ string_eq_ X1 Dseq2.
can_string_exp :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi N:nat. Pi V':val.
      Pi N2:nat. Pi S':string N2.
      impl_val CI S V -> val_exp V N V' -> string_exp S N S'
         -> impl_val CI S' V' -> type.
- : can_string_exp Dival val_exp_z string_exp_z impl_val_null.
- :
   can_string_exp Dival1 (val_exp_s Dapp Dvalexp) (string_exp_s Dindex Dsexp)
      Dival3
      <- can_string_exp Dival1 Dvalexp Dsexp Dival2
      <- can_index'' Dival3 Dapp Dindex Dival1 Dival2.
string_exp_implies_prod :
   Pi Nelem:nat. Pi Nall:nat. Pi S:string Nelem. Pi N:nat. Pi S':string Nall.
      string_exp S N S' -> product N Nelem Nall -> type.
- : string_exp_implies_prod string_exp_z product_z.
- :
   string_exp_implies_prod (string_exp_s Dindex Dsexp) (product_s Dsum Dprod)
      <- string_exp_implies_prod Dsexp Dprod
      <- index_implies_sum Dindex Dsum.
impl_aval : Pi N1:nat. corresp_info -> string N1 -> aval -> type.
impl_aval_lit : impl_aval CI1 (/ B #) (lit B).
impl_aval_pointer :
   impl_aval (corresp_info_ N1 B3 LM IM1) AW (pointer L M)
      <- lookup_loc LM L Lstart B2
      <- represents M B
      <- add Lstart B W B1
      <- implode_word AW W.
impl_aval_pointer_bad :
   impl_aval (corresp_info_ N4 B3 LM IM1) AW (pointer L M)
      <- lookup_loc LM L Lstart B2
      <- is_negone Bmax
      <- represents Nmax Bmax
      <- sum Nmax (s N3) M
      <- quotrem M (s Nmax) N2 N1
      <- represents N1 B
      <- add Lstart B W B1
      <- implode_word AW W.
impl_aval_spointer :
   impl_aval (corresp_info_ Nlimit Astart LM1 IM1) AW (spointer N)
      <- represents Nptr Bptr
      <- sum N Nptr Nlimit
      <- add Astart Bptr W zero
      <- implode_word AW W.
impl_aval_gotpointer :
   impl_aval (corresp_info_ N1 B1 LM1 IM) AW gotpointer
      <- lookup_gotptr IM Wgot
      <- implode_word AW Wgot.
impl_aval_instruct :
   impl_aval CI S (instruct IN N S) <- idecodeseq S IS N # <- impl_inst CI IS IN.
impl_aval_junk : impl_aval CI1 (/ B1 #) junk.
impl_aval_resp :
   Pi N1:nat. Pi N2:nat. Pi W:string N1. Pi W':string N2. Pi A:aval. Pi A':aval.
      Pi CI:corresp_info.
      string_eq W W' -> aval_eq A A' -> impl_aval CI W A -> impl_aval CI W' A'
         -> type.
impl_aval_resp_ : impl_aval_resp string_eq_ aval_eq_ D D.
false_implies_impl_aval :
   Pi N:nat.
      false
         -> Pi CI:corresp_info. Pi S:string N. Pi AV:aval.
                impl_aval CI S AV -> type.
impl_aval_good_pointer :
   Pi N1:nat. Pi B1:binary wwb. Pi LM:locmap. Pi IM1:irfmap. Pi W:string ww.
      Pi L:loc. Pi N:nat. Pi Astart:binary wwb. Pi B2:bit. Pi B:binary wwb.
      Pi AW:binary wwb. Pi B3:bit.
      impl_aval (corresp_info_ N1 B1 LM IM1) W (pointer L N)
         -> lookup_loc LM L Astart B2 -> represents N B -> implode_word W AW
         -> add Astart B AW B3 -> type.
-p :
   impl_aval_good_pointer (impl_aval_pointer Dimp Dadd Drep Dlook) Dlook1 Drep1
      Dimp Dadd1
      <- lookup_loc_fun Dlook Dlook1 Daeq1
      <- represents_fun2 Drep Drep1 Dbeq1
      <- add_resp Daeq1 Dbeq1 binary_eq_ bit_eq_ Dadd Dadd1.
-b :
   impl_aval_good_pointer
      (impl_aval_pointer_bad Dimp Dadd Drep1 Dmod Dsum Drep2 Dino Dlook) Dlook1
      Drep3 Dimp Dadd1
      <- lookup_loc_fun Dlook Dlook1 Daeq1
      <- sum_commute Dsum Dsum'
      <- max_sum_contradict Dino Drep2 Drep3 Dsum' Dfalse
      <- false_implies_binary_eq Dfalse wwb B3 B4 Dbeq1
      <- add_resp Daeq1 Dbeq1 binary_eq_ bit_eq_ Dadd Dadd1.
impl_aval_pointer_fun :
   Pi N1:nat. Pi CI:corresp_info. Pi W1:string N1. Pi L:loc. Pi N:nat.
      Pi N2:nat. Pi W2:string N2.
      impl_aval CI W1 (pointer L N) -> impl_aval CI W2 (pointer L N)
         -> string_eq W1 W2 -> type.
-pp :
   impl_aval_pointer_fun (impl_aval_pointer Dimp Dadd Drep Dlookup)
      (impl_aval_pointer Dimp1 Dadd1 Drep1 Dlookup1) Dseq
      <- lookup_loc_fun Dlookup Dlookup1 Daeq1
      <- represents_fun2 Drep Drep1 Dbeq1
      <- add_resp Daeq1 Dbeq1 binary_eq_ bit_eq_ Dadd Dadd'
      <- add_fun3 Dadd' Dadd1 X1 Daeq2
      <- implode_word_resp string_eq_ Daeq2 Dimp Dimp'
      <- implode_word_fun1 Dimp' Dimp1 Dseq.
-pb :
   impl_aval_pointer_fun (impl_aval_pointer Dimp Dadd Drep Dlookup)
      (impl_aval_pointer_bad Dimp1 Dadd1 Drep1 Dmod Dsum Drep2 Dino Dlookup1)
      Dseq
      <- sum_add_corr9 Drep3 Drep4 Drep Dsum Dadd3
      <- represents_fun2 Drep3 Drep2 Dbeq
      <- add_resp Dbeq binary_eq_ binary_eq_ bit_eq_ Dadd3 Dadd3'
      <- sum_commute Dsum Dsum'
      <- max_sum_contradict Dino Drep2 Drep Dsum' Dfalse
      <- false_implies_string_eq Dfalse ww S1 ww S2 Dseq.
-bp :
   impl_aval_pointer_fun
      (impl_aval_pointer_bad Dimp1 Dadd1 Drep1 Dmod Dsum Drep2 Dino Dlookup1)
      (impl_aval_pointer Dimp Dadd Drep Dlookup) Dseq
      <- sum_add_corr9 Drep3 Drep4 Drep Dsum Dadd3
      <- represents_fun2 Drep3 Drep2 Dbeq
      <- add_resp Dbeq binary_eq_ binary_eq_ bit_eq_ Dadd3 Dadd3'
      <- sum_commute Dsum Dsum'
      <- max_sum_contradict Dino Drep2 Drep Dsum' Dfalse
      <- false_implies_string_eq Dfalse ww S1 ww S2 Dseq.
-bb :
   impl_aval_pointer_fun
      (impl_aval_pointer_bad Dimp Dadd1 Drep1 Dmod Dsum Drep2 Dino Dlookup)
      (impl_aval_pointer_bad Dimp' Dadd1' Drep1' Dmod' Dsum' Drep2' Dino'
          Dlookup') Dseq
      <- lookup_loc_fun Dlookup Dlookup' Daeq1
      <- is_negone_fun Dino Dino' Dbeq1
      <- represents_resp nat_eq_ Dbeq1 Drep2 Drep2''
      <- represents_fun1 Drep2'' Drep2' Dneq1
      <- nat_eq_inc Dneq1 Dneq2
      <- quotrem_resp nat_eq_ Dneq2 nat_eq_ nat_eq_ Dmod Dmod''
      <- quotrem_fun Dmod'' Dmod' X2 Dneq3
      <- represents_resp Dneq3 binary_eq_ Drep1 Drep1''
      <- represents_fun2 Drep1'' Drep1' Dbeq2
      <- add_resp Daeq1 Dbeq2 binary_eq_ bit_eq_ Dadd1 Dadd1''
      <- add_fun3 Dadd1'' Dadd1' X1 Daeq2
      <- implode_word_resp string_eq_ Daeq2 Dimp Dimp''
      <- implode_word_fun1 Dimp'' Dimp' Dseq.
impl_aval_spointer_fun :
   Pi N1:nat. Pi CI:corresp_info. Pi W1:string N1. Pi N:nat. Pi N2:nat.
      Pi W2:string N2.
      impl_aval CI W1 (spointer N) -> impl_aval CI W2 (spointer N)
         -> string_eq W1 W2 -> type.
- :
   impl_aval_spointer_fun (impl_aval_spointer Dimp Dadd Dsum Drep)
      (impl_aval_spointer Dimp1 Dadd1 Dsum1 Drep1) Dseq
      <- sum_commute Dsum Dsum'
      <- sum_commute Dsum1 Dsum1'
      <- sum_fun1 Dsum' Dsum1' Dneq1
      <- represents_resp Dneq1 binary_eq_ Drep Drep'
      <- represents_fun2 Drep' Drep1 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd Dadd'
      <- add_fun3 Dadd' Dadd1 X1 Daeq1
      <- implode_word_resp string_eq_ Daeq1 Dimp Dimp'
      <- implode_word_fun1 Dimp' Dimp1 Dseq.
impl_aval_gotpointer_fun :
   Pi N1:nat. Pi CI:corresp_info. Pi W1:string N1. Pi N2:nat. Pi W2:string N2.
      impl_aval CI W1 gotpointer -> impl_aval CI W2 gotpointer
         -> string_eq W1 W2 -> type.
-g :
   impl_aval_gotpointer_fun (impl_aval_gotpointer Dimp Dlook)
      (impl_aval_gotpointer Dimp1 Dlook1) Dseq
      <- lookup_gotptr_fun Dlook Dlook1 Dbeq
      <- implode_word_resp string_eq_ Dbeq Dimp Dimp'
      <- implode_word_fun1 Dimp' Dimp1 Dseq.
impl_atomval_instruct :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi IN:inst.
      Pi N:nat. Pi S':string N. Pi M:nat. Pi I:iinstseq. Pi S1:string M.
      impl_val CI S V -> atomval V (instruct IN N S') M -> idecodeseq S' I N #
         -> impl_inst CI I IN -> index M S' S1 S -> type.
impl_atomval_instruct_cons :
   impl_atomval_instruct
      (impl_val_cons Dival (impl_uval_instruct Diinst Dindex Didecode))
      (atomval_cons Datomval) Didecode Diinst Dindex''
      <- impl_atomval_instruct Dival Datomval X1 X2 Dindex'
      <- index_cons Dindex Dindex' Dindex''.
impl_atomval_instruct_sing :
   impl_atomval_instruct
      (impl_val_cons impl_val_null (impl_uval_instruct Diinst Dindex Didecode))
      (atomval_sing asize_instruct) Didecode Diinst Dindex''
      <- index_all S Dindex'
      <- index_cons Dindex Dindex' Dindex''.
impl_atomval*_instruct_eq* :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi I:inst. Pi N:nat.
      Pi S1:string N. Pi M:nat. Pi S2:string M.
      impl_val CI S V -> atomval V (instruct I N S1) M -> index M S1 S2 S
         -> type.
impl_atomval*_instruct_eq*_z :
   impl_atomval*_instruct_eq*
      (impl_val_cons Dival (impl_uval_instruct Diinst Dind Didec))
      (atomval_sing asize_instruct) Dind2
      <- index_allbutone Dind Dseq
      <- string_eq_cons Dseq binary_eq_ Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dind Dind1
      <- str_val_size_corr' S Dival size_null Dneq
      <- string_eq_nil S Dneq Dseq2
      <- string_eq_cons Dseq2 binary_eq_ Dseq3
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq3 Dind1 Dind2.
impl_atomval*_instruct_eq*_s :
   impl_atomval*_instruct_eq*
      (impl_val_cons Dival (impl_uval_instruct Diinst Dind Didec))
      (atomval_cons Daval) Dind''
      <- impl_atomval*_instruct_eq* Dival Daval Dind'
      <- index_leftover Dind Dind' Dind''.
impl_atomval*_instruct_eq :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi I:inst. Pi N:nat.
      Pi S1:string N.
      impl_val CI S V -> atomval V (instruct I N S1) 0' -> string_eq S S1 -> type.
impl_atomval*_instruct_eq_ :
   impl_atomval*_instruct_eq Dival Daval Dseq
      <- impl_atomval*_instruct_eq* Dival Daval Dind
      <- index_z_fun Dind X1 Dseq.
impl_atomval*_pointer* :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi L:loc. Pi N:nat.
      Pi M:nat. Pi Nsize:nat. Pi N2:nat. Pi S1:string N2. Pi S2:string M.
      impl_val CI S V -> atomval V (pointer L N) M -> size V Nsize
         -> sum Nsize M wordsize -> impl_aval CI S1 (pointer L N)
         -> index M S1 S2 S -> type.
- :
   impl_atomval*_pointer*
      (impl_val_cons impl_val_null
          (impl_uval_pointer Dindex Dimp Dadd Drep Dlook))
      (atomval_sing asize_pointer) (size_cons size_null) (sum_s sum_z)
      (impl_aval_pointer Dimp Dadd Drep Dlook) Dindex'
      <- index_implies_sum Dindex Dsum
      <- sum_commute Dsum Dsum'
      <- sum_fun1 Dsum' (sum_s sum_z) Dneq
      <- nat_eq_dec Dneq1 Dneq
      <- string_eq_nil S3 Dneq1 Dseq
      <- string_eq_cons Dseq binary_eq_ Dseq1
      <- string_eq_symm Dseq1 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex Dindex'.
-b :
   impl_atomval*_pointer*
      (impl_val_cons impl_val_null
          (impl_uval_pointer_bad Dindex Dimp Dadd Drep1 Dmod Dsums Drep2 Dino
              Dlook))
      (atomval_sing asize_pointer) (size_cons size_null) (sum_s sum_z)
      (impl_aval_pointer_bad Dimp Dadd Drep1 Dmod Dsums Drep2 Dino Dlook)
      Dindex'
      <- index_implies_sum Dindex Dsum
      <- sum_commute Dsum Dsum'
      <- sum_fun1 Dsum' (sum_s sum_z) Dneq
      <- nat_eq_dec Dneq1 Dneq
      <- string_eq_nil S3 Dneq1 Dseq
      <- string_eq_cons Dseq binary_eq_ Dseq1
      <- string_eq_symm Dseq1 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex Dindex'.
- :
   impl_atomval*_pointer*
      (impl_val_cons Dival (impl_uval_pointer Dindex Dimp Dadd Drep Dlook))
      (atomval_cons Datomval) (size_cons Dsize) Dsum Daval1 Dindex3
      <- sum_shift Dsum Dsum1
      <- impl_atomval*_pointer* Dival Datomval Dsize Dsum1 Daval Dindex1
      <- impl_aval_pointer_fun Daval (impl_aval_pointer Dimp Dadd Drep Dlook)
            Dseq
      <- impl_aval_resp Dseq aval_eq_ Daval Daval1
      <- index_resp nat_eq_ Dseq string_eq_ string_eq_ Dindex1 Dindex2
      <- index_cons Dindex Dindex2 Dindex3.
-b :
   impl_atomval*_pointer*
      (impl_val_cons Dival
          (impl_uval_pointer_bad Dindex Dimp Dadd Drep1 Dmod Dsums Drep2 Dino
              Dlook))
      (atomval_cons Datomval) (size_cons Dsize) Dsum Daval1 Dindex3
      <- sum_shift Dsum Dsum1
      <- impl_atomval*_pointer* Dival Datomval Dsize Dsum1 Daval Dindex1
      <- impl_aval_pointer_fun Daval
            (impl_aval_pointer_bad Dimp Dadd Drep1 Dmod Dsums Drep2 Dino Dlook)
            Dseq
      <- impl_aval_resp Dseq aval_eq_ Daval Daval1
      <- index_resp nat_eq_ Dseq string_eq_ string_eq_ Dindex1 Dindex2
      <- index_cons Dindex Dindex2 Dindex3.
impl_atomval*_spointer* :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi N:nat. Pi M:nat.
      Pi Nsize:nat. Pi N2:nat. Pi S1:string N2. Pi S2:string M.
      impl_val CI S V -> atomval V (spointer N) M -> size V Nsize
         -> sum Nsize M wordsize -> impl_aval CI S1 (spointer N)
         -> index M S1 S2 S -> type.
- :
   impl_atomval*_spointer*
      (impl_val_cons impl_val_null
          (impl_uval_spointer Dindex Dimp Dadd Dsumlim Drep))
      (atomval_sing asize_spointer) (size_cons size_null) (sum_s sum_z)
      (impl_aval_spointer Dimp Dadd Dsumlim Drep) Dindex'
      <- index_implies_sum Dindex Dsum
      <- sum_commute Dsum Dsum'
      <- sum_fun1 Dsum' (sum_s sum_z) Dneq
      <- nat_eq_dec Dneq1 Dneq
      <- string_eq_nil S3 Dneq1 Dseq
      <- string_eq_cons Dseq binary_eq_ Dseq1
      <- string_eq_symm Dseq1 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex Dindex'.
- :
   impl_atomval*_spointer*
      (impl_val_cons Dival (impl_uval_spointer Dindex Dimp Dadd Dsumlim Drep))
      (atomval_cons Datomval) (size_cons Dsize) Dsum Daval1 Dindex3
      <- sum_shift Dsum Dsum1
      <- impl_atomval*_spointer* Dival Datomval Dsize Dsum1 Daval Dindex1
      <- impl_aval_spointer_fun Daval
            (impl_aval_spointer Dimp Dadd Dsumlim Drep) Dseq
      <- impl_aval_resp Dseq aval_eq_ Daval Daval1
      <- index_resp nat_eq_ Dseq string_eq_ string_eq_ Dindex1 Dindex2
      <- index_cons Dindex Dindex2 Dindex3.
impl_atomval*_gotpointer* :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi M:nat.
      Pi Nsize:nat. Pi N2:nat. Pi S1:string N2. Pi S2:string M.
      impl_val CI S V -> atomval V gotpointer M -> size V Nsize
         -> sum Nsize M wordsize -> impl_aval CI S1 gotpointer
         -> index M S1 S2 S -> type.
- :
   impl_atomval*_gotpointer*
      (impl_val_cons impl_val_null (impl_uval_gotpointer Dindex Dimp Dlook))
      (atomval_sing asize_gotpointer) (size_cons size_null) (sum_s sum_z)
      (impl_aval_gotpointer Dimp Dlook) Dindex'
      <- index_implies_sum Dindex Dsum
      <- sum_commute Dsum Dsum'
      <- sum_fun1 Dsum' (sum_s sum_z) Dneq
      <- nat_eq_dec Dneq1 Dneq
      <- string_eq_nil S3 Dneq1 Dseq
      <- string_eq_cons Dseq binary_eq_ Dseq1
      <- string_eq_symm Dseq1 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex Dindex'.
- :
   impl_atomval*_gotpointer*
      (impl_val_cons Dival (impl_uval_gotpointer Dindex Dimp Dlook))
      (atomval_cons Datomval) (size_cons Dsize) Dsum Daval1 Dindex3
      <- sum_shift Dsum Dsum1
      <- impl_atomval*_gotpointer* Dival Datomval Dsize Dsum1 Daval Dindex1
      <- impl_aval_gotpointer_fun Daval (impl_aval_gotpointer Dimp Dlook) Dseq
      <- impl_aval_resp Dseq aval_eq_ Daval Daval1
      <- index_resp nat_eq_ Dseq string_eq_ string_eq_ Dindex1 Dindex2
      <- index_cons Dindex Dindex2 Dindex3.
impl_atomval* :
   Pi N1:nat. Pi CI:corresp_info. Pi W:string N1. Pi V:val. Pi A:aval. Pi N:nat.
      impl_val CI W V -> atomval V A 0' -> asize A N -> size V N
         -> impl_aval CI W A -> type.
-lit :
   impl_atomval* (impl_val_cons impl_val_null impl_uval_lit)
      (atomval_sing asize_lit) asize_lit (size_cons size_null) impl_aval_lit.
-instruct :
   impl_atomval* Dival Datomval asize_instruct X1 Diaval
      <- impl_atomval*_instruct_eq Dival Datomval Dseq
      <- string_eq_symm Dseq Dseq1
      <- impl_atomval_instruct Dival Datomval Didecode Diinst Dindex
      <- impl_aval_resp Dseq1 aval_eq_ (impl_aval_instruct Diinst Didecode)
            Diaval.
-pointer :
   impl_atomval* Dival Datomval asize_pointer Dsize Daval'
      <- sum_ident wordsize Dsum
      <- impl_atomval*_pointer* Dival Datomval Dsize Dsum Daval Dindex
      <- index_z_fun Dindex X1 Dseq
      <- string_eq_symm Dseq Dseq1
      <- impl_aval_resp Dseq1 aval_eq_ Daval Daval'.
-pointer :
   impl_atomval* Dival Datomval asize_spointer Dsize Daval'
      <- sum_ident wordsize Dsum
      <- impl_atomval*_spointer* Dival Datomval Dsize Dsum Daval Dindex
      <- index_z_fun Dindex X1 Dseq
      <- string_eq_symm Dseq Dseq1
      <- impl_aval_resp Dseq1 aval_eq_ Daval Daval'.
-gotpointer :
   impl_atomval* Dival Datomval asize_gotpointer Dsize Daval'
      <- sum_ident wordsize Dsum
      <- impl_atomval*_gotpointer* Dival Datomval Dsize Dsum Daval Dindex
      <- index_z_fun Dindex X1 Dseq
      <- string_eq_symm Dseq Dseq1
      <- impl_aval_resp Dseq1 aval_eq_ Daval Daval'.
-junk :
   impl_atomval* (impl_val_cons impl_val_null impl_uval_junk)
      (atomval_sing asize_junk) asize_junk (size_cons size_null) impl_aval_junk.
impl_atomval :
   Pi N1:nat. Pi CI:corresp_info. Pi W:string N1. Pi V:val. Pi A:aval.
      impl_val CI W V -> atomval V A 0' -> impl_aval CI W A -> type.
impl_atomval_lit :
   impl_atomval Dival Datomval D
      <- atom_size asize_lit Datomval Dsize
      <- impl_atomval* Dival Datomval asize_lit Dsize D.
impl_atomval_pointer :
   impl_atomval Dival Datomval D
      <- atom_size asize_pointer Datomval Dsize
      <- impl_atomval* Dival Datomval asize_pointer Dsize D.
impl_atomval_spointer :
   impl_atomval Dival Datomval D
      <- atom_size asize_spointer Datomval Dsize
      <- impl_atomval* Dival Datomval asize_spointer Dsize D.
impl_atomval_gotpointer :
   impl_atomval Dival Datomval D
      <- atom_size asize_gotpointer Datomval Dsize
      <- impl_atomval* Dival Datomval asize_gotpointer Dsize D.
impl_atomval_instruct_ :
   impl_atomval Dival Datomval D
      <- atom_size asize_instruct Datomval Dsize
      <- impl_atomval* Dival Datomval asize_instruct Dsize D.
impl_atomval_junk :
   impl_atomval Dival Datomval D
      <- atom_size asize_junk Datomval Dsize
      <- impl_atomval* Dival Datomval asize_junk Dsize D.
impl_val_binary_int* :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi N:nat. Pi N2:nat.
      Pi B:binary N2. Pi N3:nat. Pi B0:binary bw. Pi S1:string N3. Pi V1:val.
      Pi N4:nat. Pi B1:binary N4.
      impl_val CI S V -> size V (s N) -> binary_int theend V B
         -> string_eq S (/ B0 S1) -> impl_val CI S1 V1
         -> val_eq V (;' (@' (lit B0) 0') V1) -> size V1 N -> binary_int theend V1 B1
         -> binary_append B1 B0 B -> type.
-n :
   impl_val_binary_int* (impl_val_cons impl_val_null impl_uval_lit)
      (size_cons size_null) (binary_int_cons_lit Dbapp binary_int_null)
      string_eq_ impl_val_null val_eq_ size_null binary_int_null Dbapp.
-c :
   impl_val_binary_int* (impl_val_cons Dival impl_uval_lit) (size_cons Dsize)
      (binary_int_cons_lit Dbapp Dbi) Dseq1 (impl_val_cons Dival1 impl_uval_lit)
      Dveq1 (size_cons Dsize1) (binary_int_cons_lit Dbapp1 Dbi1) Dbapp
      <- impl_val_binary_int* Dival Dsize Dbi Dseq Dival1 Dveq Dsize1 Dbi1
            Dbapp1
      <- string_eq_cons Dseq binary_eq_ Dseq1
      <- val_eq_cons uval_eq_ Dveq Dveq1.
impl_val_null_string :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1.
      impl_val CI S null -> string_eq S # -> type.
- : impl_val_null_string impl_val_null string_eq_.
binary_int_null_fun :
   Pi N1:nat. Pi End1:endian. Pi B:binary N1.
      binary_int End1 null B -> binary_eq B nil$ -> type.
- : binary_int_null_fun binary_int_null binary_eq_.
impl_val_binary_int :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val.
      Pi B:binary wordbits. Pi B0:binary bw. Pi B1:binary bw. Pi B2:binary bw.
      Pi B3:binary bw.
      impl_val CI S V -> size V ww -> binary_int theend V B
         -> string_eq S (/ B0 (/ B1 (/ B2 (/ B3 #))))
         -> implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) B -> type.
- :
   impl_val_binary_int Dival Dsize Dbi Dseq13
      (implode_word_ Dbapp1 Dbapp2 Dbapp3')
      <- impl_val_binary_int* Dival Dsize Dbi Dseq1 Dival1 Dveq1 Dsize1 Dbi1
            Dbapp1
      <- impl_val_binary_int* Dival1 Dsize1 Dbi1 Dseq2 Dival2 Dveq2 Dsize2 Dbi2
            Dbapp2
      <- impl_val_binary_int* Dival2 Dsize2 Dbi2 Dseq3 Dival3 Dveq3 Dsize3 Dbi3
            Dbapp3
      <- impl_val_binary_int* Dival3 Dsize3 Dbi3 Dseq4 Dival4 Dveq4 size_null
            Dbi4 Dbapp4
      <- binary_int_null_fun Dbi4 Dbeq
      <- binary_append_resp Dbeq binary_eq_ binary_eq_ Dbapp4 Dbapp5
      <- binary_append_ident''' Dbapp5 Dbeq1
      <- binary_eq_symm Dbeq1 Dbeq2
      <- binary_append_resp Dbeq2 binary_eq_ binary_eq_ Dbapp3 Dbapp3'
      <- impl_val_null_string Dival4 Dseq5
      <- string_eq_cons Dseq5 binary_eq_ Dseq6
      <- string_eq_trans Dseq4 Dseq6 Dseq7
      <- string_eq_cons Dseq7 binary_eq_ Dseq8
      <- string_eq_trans Dseq3 Dseq8 Dseq9
      <- string_eq_cons Dseq9 binary_eq_ Dseq10
      <- string_eq_trans Dseq2 Dseq10 Dseq11
      <- string_eq_cons Dseq11 binary_eq_ Dseq12
      <- string_eq_trans Dseq1 Dseq12 Dseq13.
concat_str_val :
   Pi N1:nat. Pi CI:corresp_info. Pi S1:string N1. Pi V1:val. Pi N2:nat.
      Pi S2:string N2. Pi V2:val. Pi V:val. Pi N:nat. Pi S:string N.
      impl_val CI S1 V1 -> impl_val CI S2 V2 -> separate N1 V V1 V2
         -> sum N1 N2 N -> impl_val CI S V -> index N1 S S1 S2 -> type.
concat_str_val_z :
   concat_str_val impl_val_null Dival separate_z sum_z Dival index_z.
concat_str_val_s :
   concat_str_val (impl_val_cons Dival1 Duval) Dival2 (separate_s Dsep)
      (sum_s Dsum) (impl_val_cons Dival' Duval) (index_s Dind)
      <- concat_str_val Dival1 Dival2 Dsep Dsum Dival' Dind.
impl_atomval_instruct'* :
   Pi CI:corresp_info. Pi I:iinstseq. Pi IN:inst. Pi N:nat. Pi S':string N.
      Pi V:val. Pi M:nat. Pi N1:nat. Pi S1:string M. Pi S:string N1.
      impl_inst CI I IN -> idecodeseq S' I N # -> atomval V (instruct IN N S') M
         -> index M S' S1 S -> impl_val CI S V -> type.
-ing :
   impl_atomval_instruct'* Dimpl Ddecode (atomval_sing asize_instruct) Dindex
      Dival
      <- index_implies_sum Dindex Dsum
      <- sum_commute Dsum Dsum'
      <- sum_fun1 Dsum' (sum_s sum_z) Deqnat
      <- string_resp Deqnat S (/ B #) Deqstr
      <- string_eq_symm Deqstr Deqstr'
      <- index_resp nat_eq_ string_eq_ string_eq_ Deqstr Dindex Dindex'
      <- impl_val_resp Deqstr' val_eq_
            (impl_val_cons impl_val_null
                (impl_uval_instruct Dimpl Dindex' Ddecode)) Dival.
-cons :
   impl_atomval_instruct'* Dimpl Ddecode (atomval_cons Datomval) Dindex Dival'
      <- index_implies_sum Dindex Dsum
      <- atomval_asize Datomval asize_instruct Dlt
      <- lt_succ N4 Dlt'
      <- lt_trans Dlt' Dlt Dlt''
      <- lt_implies_sum Dlt'' Dsum'
      <- sum_fun2 Dsum Dsum' Deqnat
      <- string_resp Deqnat S (/ B S') Deqstr
      <- string_eq_symm Deqstr Deqstr'
      <- index_resp nat_eq_ string_eq_ string_eq_ Deqstr Dindex Dindex'
      <- index_inc Dindex' Dindex'' X1
      <- impl_atomval_instruct'* Dimpl Ddecode Datomval Dindex'' Dival
      <- impl_val_resp Deqstr' val_eq_
            (impl_val_cons Dival (impl_uval_instruct Dimpl Dindex' Ddecode))
            Dival'.
impl_atomval_instruct' :
   Pi CI:corresp_info. Pi I:iinstseq. Pi IN:inst. Pi N:nat. Pi S:string N.
      Pi V:val.
      impl_inst CI I IN -> idecodeseq S I N # -> atomval V (instruct IN N S) 0'
         -> impl_val CI S V -> type.
- :
   impl_atomval_instruct' Dimpl Ddecode Datomval Dival
      <- impl_atomval_instruct'* Dimpl Ddecode Datomval index_z Dival.
impl_val_addr :
   Pi LM:locmap. Pi L:loc. Pi Astart:binary wwb. Pi B1:bit. Pi V:val. Pi M:nat.
      Pi N:nat. Pi B:binary wwb. Pi AW:binary wwb. Pi B2:bit. Pi W:string ww.
      lookup_loc LM L Astart B1 -> atomval V (pointer L M) 0'
         -> asize (pointer L M) N -> size V N -> represents M B
         -> add Astart B AW B2 -> implode_word W AW
         -> Pi Nlimit:nat. Pi Sstart:binary wwb. Pi IM:irfmap.
                impl_val (corresp_info_ Nlimit Sstart LM IM) W V -> type.
- :
   impl_val_addr Dlookup
      (atomval_cons (atomval_cons (atomval_cons (atomval_sing asize_pointer))))
      asize_pointer (size_cons (size_cons (size_cons (size_cons size_null))))
      Drep Dadd Dimp N2 B10 IM1
      (impl_val_cons
          (impl_val_cons
              (impl_val_cons
                  (impl_val_cons impl_val_null
                      (impl_uval_pointer (index_3 index_z) Dimp Dadd Drep
                          Dlookup))
                  (impl_uval_pointer (index_2 index_z) Dimp Dadd Drep Dlookup))
              (impl_uval_pointer (index_s index_z) Dimp Dadd Drep Dlookup))
          (impl_uval_pointer index_z Dimp Dadd Drep Dlookup)).
impl_val_sptr* :
   Pi V:val. Pi N:nat. Pi Nptr:nat. Pi Bptr:binary wwb. Pi Nlimit:nat.
      Pi Astart:binary wwb. Pi W:binary wwb. Pi AW:string ww. Pi Nsz:nat.
      atomval V (spointer N) 0' -> represents Nptr Bptr -> sum N Nptr Nlimit
         -> add Astart Bptr W zero -> implode_word AW W
         -> asize (spointer N) Nsz -> size V Nsz
         -> Pi LM:locmap. Pi IM:irfmap.
                impl_val (corresp_info_ Nlimit Astart LM IM) AW V -> type.
- :
   impl_val_sptr*
      (atomval_cons (atomval_cons (atomval_cons (atomval_sing asize_spointer))))
      Drep Dsum Dadd Dimp asize_spointer
      (size_cons (size_cons (size_cons (size_cons size_null)))) LM IM
      (impl_val_cons
          (impl_val_cons
              (impl_val_cons
                  (impl_val_cons impl_val_null
                      (impl_uval_spointer (index_3 index_z) Dimp Dadd Dsum Drep))
                  (impl_uval_spointer (index_2 index_z) Dimp Dadd Dsum Drep))
              (impl_uval_spointer (index_s index_z) Dimp Dadd Dsum Drep))
          (impl_uval_spointer index_z Dimp Dadd Dsum Drep)).
impl_val_sptr :
   Pi V:val. Pi N:nat. Pi Nptr:nat. Pi Bptr:binary wwb. Pi Nlimit:nat.
      Pi Astart:binary wwb. Pi W:binary wwb. Pi AW:string ww.
      atomval V (spointer N) 0' -> represents Nptr Bptr -> sum N Nptr Nlimit
         -> add Astart Bptr W zero -> implode_word AW W
         -> Pi LM:locmap. Pi IM:irfmap.
                impl_val (corresp_info_ Nlimit Astart LM IM) AW V -> type.
- :
   impl_val_sptr Datomval Drep Dsum Dadd Dimp LM IM Dival
      <- atomval_size Datomval Dsize Dasize Dsumz
      <- sum_fun3 Dsumz sum_z Dnateq1
      <- asize_resp aval_eq_ Dnateq1 Dasize Dasize1
      <- impl_val_sptr* Datomval Drep Dsum Dadd Dimp Dasize1 Dsize LM IM Dival.
impl_val_badaddr :
   Pi LM:locmap. Pi L:loc. Pi Astart:binary wwb. Pi B1:bit. Pi V:val. Pi M:nat.
      Pi N:nat. Pi Bmax:binary wwb. Pi Nmax:nat. Pi N':nat. Pi N1:nat.
      Pi N2:nat. Pi B:binary wwb. Pi AW:binary wwb. Pi B2:bit. Pi W:string ww.
      lookup_loc LM L Astart B1 -> atomval V (pointer L M) 0'
         -> asize (pointer L M) N -> size V N -> is_negone Bmax
         -> represents Nmax Bmax -> sum Nmax (s N') M
         -> quotrem M (s Nmax) N1 N2 -> represents N2 B -> add Astart B AW B2
         -> implode_word W AW
         -> Pi Nlim:nat. Pi Sstart:binary wwb. Pi IM:irfmap.
                impl_val (corresp_info_ Nlim Sstart LM IM) W V -> type.
- :
   impl_val_badaddr Dlook
      (atomval_cons (atomval_cons (atomval_cons (atomval_sing asize_pointer))))
      asize_pointer (size_cons (size_cons (size_cons (size_cons size_null))))
      Dino Drep1 Dsum Dmod Drep2 Dadd Dimp N6 B11 IM1
      (impl_val_cons
          (impl_val_cons
              (impl_val_cons
                  (impl_val_cons impl_val_null
                      (impl_uval_pointer_bad (index_3 index_z) Dimp Dadd Drep2
                          Dmod Dsum Drep1 Dino Dlook))
                  (impl_uval_pointer_bad (index_2 index_z) Dimp Dadd Drep2 Dmod
                      Dsum Drep1 Dino Dlook))
              (impl_uval_pointer_bad (index_s index_z) Dimp Dadd Drep2 Dmod Dsum
                  Drep1 Dino Dlook))
          (impl_uval_pointer_bad index_z Dimp Dadd Drep2 Dmod Dsum Drep1 Dino
              Dlook)).
impl_val_junk :
   Pi N:nat. Pi V:val. Pi CI:corresp_info. Pi S:string N.
      val_exp (;' (@' junk 0') null) N V -> impl_val CI S V -> type.
impl_val_junk_z : impl_val_junk CI # val_exp_z impl_val_null.
impl_val_junk_s :
   impl_val_junk CI (/ B S) (val_exp_s (append_cons Dapp) Dvalexp)
      (impl_val_cons Dival2 impl_uval_junk)
      <- impl_val_junk CI S Dvalexp Dival1
      <- append_fun3 append_null Dapp Dveq
      <- impl_val_resp string_eq_ Dveq Dival1 Dival2.
impl_val_gotptr :
   Pi IM:irfmap. Pi W:binary wwb. Pi AW:string ww. Pi V:val. Pi N:nat.
      lookup_gotptr IM W -> implode_word AW W -> atomval V gotpointer 0'
         -> asize gotpointer N -> size V N
         -> Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap.
                impl_val (corresp_info_ Nlim Sstart LM IM) AW V -> type.
- :
   impl_val_gotptr Dlook Dimp
      (atomval_cons
          (atomval_cons (atomval_cons (atomval_sing asize_gotpointer))))
      asize_gotpointer (size_cons (size_cons (size_cons (size_cons size_null))))
      N1 B6 LM1
      (impl_val_cons
          (impl_val_cons
              (impl_val_cons
                  (impl_val_cons impl_val_null
                      (impl_uval_gotpointer (index_3 index_z) Dimp Dlook))
                  (impl_uval_gotpointer (index_2 index_z) Dimp Dlook))
              (impl_uval_gotpointer (index_1 index_z) Dimp Dlook))
          (impl_uval_gotpointer index_z Dimp Dlook)).
atomval_aval_ptr :
   Pi V:val. Pi L:loc. Pi P:nat. Pi N1:nat. Pi CI:corresp_info. Pi S:string N1.
      atomval V (pointer L P) 0' -> impl_aval CI S (pointer L P)
         -> impl_val CI S V -> type.
- :
   atomval_aval_ptr Datval (impl_aval_pointer Dimp Dadd Drep Dlook) Dival
      <- atom_size asize_pointer Datval Dsize
      <- impl_val_addr Dlook Datval asize_pointer Dsize Drep Dadd Dimp N2 B6 IM1
            Dival.
- :
   atomval_aval_ptr Datval
      (impl_aval_pointer_bad Dimp Dadd Drep Dqr Dsum DrepMax Dino Dlook) Dival
      <- atom_size asize_pointer Datval Dsize
      <- impl_val_badaddr Dlook Datval asize_pointer Dsize Dino DrepMax Dsum Dqr
            Drep Dadd Dimp N6 B7 IM1 Dival.
pointer_size :
   Pi V:val. Pi L1:loc. Pi N1:nat.
      atomval V (pointer L1 N1) 0' -> size V wordsize -> type.
pointer_size| :
   Pi L1:loc. Pi N1:nat. Pi N:nat. Pi V:val.
      asize (pointer L1 N1) N -> size V N -> size V wordsize -> type.
pointer_size_ :
   pointer_size Datomval Dsize
      <- atomval_size Datomval Dsize' Dasize sum_z
      <- pointer_size| Dasize Dsize' Dsize.
pointer_size|_ : pointer_size| asize_pointer D D.
can_rload :
   Pi CI:corresp_info. Pi ST:state. Pi H1:heap. Pi L1:loc. Pi R:rfile.
      Pi PC1:pc. Pi IREG:nat. Pi REG:reg. Pi V:val. Pi W:string ww.
      impl_machine CI ST (mach H1 L1 R PC1) -> impl_reg IREG REG
         -> rlookup R REG V -> rload ST IREG W -> impl_val CI W V -> type.
can_rload* :
   Pi N1:nat. Pi CI:corresp_info. Pi R:regs (s N1). Pi R':rfile* N1.
      Pi S1:string ww. Pi N:nat. Pi V:val. Pi W:string ww.
      impl_rfile CI R R' S1 -> rlookup* R' N V -> rload* R N W
         -> impl_val CI W V -> type.
can_rload*_z : can_rload* (impl_rfile_cons X1 Dival) rlookup_z rload_z Dival.
can_rload*_s :
   can_rload* (impl_rfile_cons Dirfile X1) (rlookup_s Drlookup) (rload_s Drload)
      Dival
      <- can_rload* Dirfile Drlookup Drload Dival.
can_rload_ :
   can_rload (impl_ X1 X2 X3 X4 X5 X6 X7 Dirfile X8) (impl_reg_ X9)
      (rlookup_ Drlookup) (rload_ Drload getregs_) Dival
      <- can_rload* Dirfile Drlookup Drload Dival.
rload_esp :
   Pi N:nat. Pi CI:corresp_info. Pi R:regs (s N). Pi R1:rfile* N.
      Pi W:string ww. impl_rfile CI R R1 W -> rload* R N W -> type.
rload_esp_nil : rload_esp impl_rfile_nil rload_z.
rload_esp_cons :
   rload_esp (impl_rfile_cons Dirfile X1) (rload_s Dload)
      <- rload_esp Dirfile Dload.
can_rstore :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi IREG:nat. Pi REG:reg. Pi V:val. Pi R':rfile. Pi W:string ww.
      Pi ST':state.
      impl_machine CI ST (mach H L R PC) -> impl_reg IREG REG
         -> rupdate R REG V R' -> impl_val CI W V -> rstore ST IREG W ST'
         -> impl_machine CI ST' (mach H L R' PC) -> type.
can_rstore* :
   Pi N1:nat. Pi CI:corresp_info. Pi RS:regs (s N1). Pi RF:rfile* N1.
      Pi Wesp:string ww. Pi N:nat. Pi V:val. Pi RF':rfile* N1. Pi W:string ww.
      Pi RS':regs (s N1).
      impl_rfile CI RS RF Wesp -> rupdate* RF N V RF' -> impl_val CI W V
         -> rstore* RS N W RS' -> impl_rfile CI RS' RF' Wesp -> type.
can_rstore*_z_cons :
   can_rstore* (impl_rfile_cons Dirfile X1) rupdate_z Dimplval rstore_z
      (impl_rfile_cons Dirfile Dimplval).
can_rstore*_s :
   can_rstore* (impl_rfile_cons Dirfile Dimplval') (rupdate_s Drupdate) Dimplval
      (rstore_s Drstore) (impl_rfile_cons Dirfile' Dimplval')
      <- can_rstore* Dirfile Drupdate Dimplval Drstore Dirfile'.
can_rstore_ :
   can_rstore
      (impl_ Dciv Dordered Dgot Dimplpc Diconds Distack Dimp Dirfile Diheap)
      (impl_reg_ X1) (rupdate_ Drupdate) Dimplval
      (rstore_ putregs_ Drstore getregs_)
      (impl_ Dciv Dordered Dgot Dimplpc Diconds Distack Dimp Dirfile' Diheap)
      <- can_rstore* Dirfile Drupdate Dimplval Drstore Dirfile'.
rload*_last :
   Pi N1:nat. Pi R:regs N1. Pi IREG:nat. Pi W:string ww. Pi R1:regs N1.
      rstore* R IREG W R1 -> rload* R1 IREG W -> type.
- : rload*_last rstore_z rload_z.
- : rload*_last (rstore_s Drst) (rload_s Drl) <- rload*_last Drst Drl.
rload_last :
   Pi R:state. Pi IREG:nat. Pi W:string ww. Pi R1:state.
      rstore R IREG W R1 -> rload R1 IREG W -> type.
- :
   rload_last (rstore_ putregs_ Drst getregs_) (rload_ Drl getregs_)
      <- rload*_last Drst Drl.
rstore_esp :
   Pi N:nat. Pi CI:corresp_info. Pi R:regs (s N). Pi RF:rfile* N.
      Pi S:string ww. Pi R1:regs (s N). Pi W:string ww.
      impl_rfile CI R RF S -> rstore* R N W R1 -> impl_rfile CI R1 RF W -> type.
rstore_esp_nil : rstore_esp S2 impl_rfile_nil rstore_z impl_rfile_nil.
rstore_esp_cons :
   rstore_esp W (impl_rfile_cons Dirfile Dival) (rstore_s Dstore)
      (impl_rfile_cons Dirfile1 Dival)
      <- rstore_esp W Dirfile Dstore Dirfile1.
postpone_getmem_rstore :
   Pi ST:state. Pi H:memory. Pi R:nat. Pi W:string ww. Pi ST1:state.
      getmem ST H -> rstore ST R W ST1 -> getmem ST1 H -> type.
- : postpone_getmem_rstore getmem_ (rstore_ putregs_ X1 getregs_) getmem_.
can_store_flags' :
   Pi ST1:state. Pi H:memory. Pi R:regs numregs. Pi FR:flags.
      Pi Aeip:binary wwb. Pi OR:oracle. Pi RF:result_flags.
      store_result_flags (state_ H R FR Aeip OR) RF ST1 -> type.
- :
   can_store_flags' H1 R1 RF1 B5 OR1 (result_flags_ B1 B2 B3 B4)
      (store_result_flags_ putflags_).
can_store_flags :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi CC:conds. Pi R':rfile. Pi FR:flags. Pi RF:result_flags. Pi ST':state.
      impl_machine CI ST (mach H L R PC) -> ccupdate R CC R' -> impl_conds FR CC
         -> flags_to_result_flags FR RF -> store_result_flags ST RF ST'
         -> impl_machine CI ST' (mach H L R' PC) -> type.
can_store_flags_ :
   can_store_flags Dimach Dccupdate Diconds Dfl (store_result_flags_ putflags_)
      (impl_ Dciv Dordered Dgot Dipc Diconds Distack Dimp Dirfile Diheap)
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack X1 Dipc Dgot
            Dordered Dciv.
store_flags_preserves_state :
   Pi H:memory. Pi R:regs numregs. Pi RF1:flags. Pi PC:binary wwb. Pi OR:oracle.
      Pi RF:result_flags. Pi ST:state. Pi FR:flags.
      store_result_flags (state_ H R RF1 PC OR) RF ST
         -> flags_to_result_flags FR RF -> state_eq ST (state_ H R FR PC OR)
         -> type.
store_flags_preserves_state_ :
   store_flags_preserves_state (store_result_flags_ putflags_)
      flags_to_result_flags_ state_eq_.
impl_conds_fun :
   Pi RF:flags. Pi B1:bit. Pi B2:bit. Pi B3:bit. Pi B4:bit.
      impl_conds RF (conds_ B1 B2 B3 B4) -> flags_eq RF (flags_ B1 B2 B3 B4)
         -> type.
- : impl_conds_fun impl_conds_ flags_eq_.
can_getflags :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi CC:conds. Pi FR:flags.
      impl_machine CI ST (mach H L R PC) -> cclookup R CC -> getflags ST FR
         -> impl_conds FR CC -> type.
can_getflags_ :
   can_getflags Dimach cclookup_ getflags_ Diconds
      <- extract_implement_parts Dimach X1 X2 X3 X4 Diconds X5 X6 X7 X8.
can_load_cf :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi B:bit.
      impl_machine CI ST (mach H L R PC) -> cclookup_carry R B -> load_cf ST B
         -> type.
can_load_cf_ :
   can_load_cf Dimach (cclookup_carry_ Dcl) (load_cf_ Dgf1)
      <- can_getflags Dimach Dcl Dgf Diconds
      <- impl_conds_fun Diconds Drfeq
      <- getflags_resp state_eq_ Drfeq Dgf Dgf1.
can_load_zf :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi B:bit.
      impl_machine CI ST (mach H L R PC) -> cclookup_zero R B -> load_zf ST B
         -> type.
can_load_zf_ :
   can_load_zf Dimach (cclookup_zero_ Dcl) (load_zf_ Dgf1)
      <- can_getflags Dimach Dcl Dgf Diconds
      <- impl_conds_fun Diconds Drfeq
      <- getflags_resp state_eq_ Drfeq Dgf Dgf1.
can_load_sf :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi B:bit.
      impl_machine CI ST (mach H L R PC) -> cclookup_sign R B -> load_sf ST B
         -> type.
can_load_sf_ :
   can_load_sf Dimach (cclookup_sign_ Dcl) (load_sf_ Dgf1)
      <- can_getflags Dimach Dcl Dgf Diconds
      <- impl_conds_fun Diconds Drfeq
      <- getflags_resp state_eq_ Drfeq Dgf Dgf1.
can_load_of :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi B:bit.
      impl_machine CI ST (mach H L R PC) -> cclookup_overflow R B
         -> load_of ST B -> type.
can_load_of_ :
   can_load_of Dimach (cclookup_overflow_ Dcl) (load_of_ Dgf1)
      <- can_getflags Dimach Dcl Dgf Diconds
      <- impl_conds_fun Diconds Drfeq
      <- getflags_resp state_eq_ Drfeq Dgf Dgf1.
can_impl_sat :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi Cond:cond. Pi Icond:icond.
      impl_machine CI ST (mach H L R PC) -> cond_sat Cond R
         -> impl_cond Icond Cond -> icond_sat Icond ST -> type.
can_impl_sat_eq :
   can_impl_sat Dimach (cond_sat_eq Dzo) impl_cond_eq (icond_sat_e Dzf)
      <- can_load_zf Dimach Dzo Dzf.
can_impl_sat_neq :
   can_impl_sat Dimach (cond_sat_neq Dzz) impl_cond_neq (icond_sat_ne Dzf)
      <- can_load_zf Dimach Dzz Dzf.
can_impl_sat_lt :
   can_impl_sat Dimach (cond_sat_lt Dco) impl_cond_lt (icond_sat_b Dcf)
      <- can_load_cf Dimach Dco Dcf.
can_impl_sat_lte_lt :
   can_impl_sat Dimach (cond_sat_lte_lt Dco) impl_cond_lte (icond_sat_be_b Dcf)
      <- can_load_cf Dimach Dco Dcf.
can_impl_sat_lte_e :
   can_impl_sat Dimach (cond_sat_lte_e Dzo) impl_cond_lte (icond_sat_be_e Dzf)
      <- can_load_zf Dimach Dzo Dzf.
can_impl_sat_gt :
   can_impl_sat Dimach (cond_sat_gt Dzz Dcz) impl_cond_gt (icond_sat_a Dzf Dcf)
      <- can_load_zf Dimach Dzz Dzf
      <- can_load_cf Dimach Dcz Dcf.
can_impl_sat_gte :
   can_impl_sat Dimach (cond_sat_gte Dco) impl_cond_gte (icond_sat_ae Dcf)
      <- can_load_cf Dimach Dco Dcf.
-lt-nov :
   can_impl_sat Dimach (cond_sat_slt_nov Do Ds) impl_cond_slt
      (icond_sat_l_nov Dof Dsf)
      <- can_load_sf Dimach Ds Dsf
      <- can_load_of Dimach Do Dof.
-lt-ov :
   can_impl_sat Dimach (cond_sat_slt_ov Do Ds) impl_cond_slt
      (icond_sat_l_ov Dof Dsf)
      <- can_load_sf Dimach Ds Dsf
      <- can_load_of Dimach Do Dof.
-lte-nov :
   can_impl_sat Dimach (cond_sat_slte_nov Do Ds) impl_cond_slte
      (icond_sat_le_nov Dof Dsf)
      <- can_load_sf Dimach Ds Dsf
      <- can_load_of Dimach Do Dof.
-lte-ov :
   can_impl_sat Dimach (cond_sat_slte_ov Do Ds) impl_cond_slte
      (icond_sat_le_ov Dof Dsf)
      <- can_load_sf Dimach Ds Dsf
      <- can_load_of Dimach Do Dof.
-lte-e :
   can_impl_sat Dimach (cond_sat_slte_e Dz) impl_cond_slte (icond_sat_le_e Dzf)
      <- can_load_zf Dimach Dz Dzf.
-gt-nov :
   can_impl_sat Dimach (cond_sat_sgt_nov Do Ds Dz) impl_cond_sgt
      (icond_sat_g_nov Dof Dsf Dzf)
      <- can_load_zf Dimach Dz Dzf
      <- can_load_sf Dimach Ds Dsf
      <- can_load_of Dimach Do Dof.
-gt-ov :
   can_impl_sat Dimach (cond_sat_sgt_ov Do Ds Dz) impl_cond_sgt
      (icond_sat_g_ov Dof Dsf Dzf)
      <- can_load_zf Dimach Dz Dzf
      <- can_load_sf Dimach Ds Dsf
      <- can_load_of Dimach Do Dof.
-gte-nov :
   can_impl_sat Dimach (cond_sat_sgte_nov Do Ds) impl_cond_sgte
      (icond_sat_ge_nov Dof Dsf)
      <- can_load_sf Dimach Ds Dsf
      <- can_load_of Dimach Do Dof.
-gte-ov :
   can_impl_sat Dimach (cond_sat_sgte_ov Do Ds) impl_cond_sgte
      (icond_sat_ge_ov Dof Dsf)
      <- can_load_sf Dimach Ds Dsf
      <- can_load_of Dimach Do Dof.
-ign :
   can_impl_sat Dimach (cond_sat_sign Ds) impl_cond_sign (icond_sat_s Dsf)
      <- can_load_sf Dimach Ds Dsf.
-nsign :
   can_impl_sat Dimach (cond_sat_nsign Ds) impl_cond_nsign (icond_sat_ns Dsf)
      <- can_load_sf Dimach Ds Dsf.
-ov :
   can_impl_sat Dimach (cond_sat_ov Do) impl_cond_ov (icond_sat_o Dof)
      <- can_load_of Dimach Do Dof.
-nov :
   can_impl_sat Dimach (cond_sat_nov Do) impl_cond_nov (icond_sat_no Dof)
      <- can_load_of Dimach Do Dof.
neg_cond_impl :
   Pi Icond:icond. Pi Cond:cond. Pi Cond1:cond. Pi Icond1:icond.
      impl_cond Icond Cond -> cond_negate Cond Cond1
         -> icond_negate Icond Icond1 -> impl_cond Icond1 Cond1 -> type.
neg_cond_impl_eq :
   neg_cond_impl impl_cond_eq cond_negate_eq icond_negate_e impl_cond_neq.
neg_cond_impl_neq :
   neg_cond_impl impl_cond_neq cond_negate_neq icond_negate_ne impl_cond_eq.
neg_cond_impl_lt :
   neg_cond_impl impl_cond_lt cond_negate_lt icond_negate_b impl_cond_gte.
neg_cond_impl_lte :
   neg_cond_impl impl_cond_lte cond_negate_lte icond_negate_be impl_cond_gt.
neg_cond_impl_gt :
   neg_cond_impl impl_cond_gt cond_negate_gt icond_negate_a impl_cond_lte.
neg_cond_impl_gte :
   neg_cond_impl impl_cond_gte cond_negate_gte icond_negate_ae impl_cond_lt.
- : neg_cond_impl impl_cond_slt cond_negate_slt icond_negate_l impl_cond_sgte.
- : neg_cond_impl impl_cond_slte cond_negate_slte icond_negate_le impl_cond_sgt.
- : neg_cond_impl impl_cond_sgt cond_negate_sgt icond_negate_g impl_cond_slte.
- : neg_cond_impl impl_cond_sgte cond_negate_sgte icond_negate_ge impl_cond_slt.
- :
   neg_cond_impl impl_cond_sign cond_negate_sign icond_negate_s impl_cond_nsign.
- :
   neg_cond_impl impl_cond_nsign cond_negate_nsign icond_negate_ns
      impl_cond_sign.
- : neg_cond_impl impl_cond_ov cond_negate_ov icond_negate_o impl_cond_nov.
- : neg_cond_impl impl_cond_nov cond_negate_nov icond_negate_no impl_cond_ov.
can_impl_unsat :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi Cond:cond. Pi Icond:icond.
      impl_machine CI ST (mach H L R PC) -> cond_unsat Cond R
         -> impl_cond Icond Cond -> icond_unsat Icond ST -> type.
can_impl_unsat_ :
   can_impl_unsat Dimach (cond_unsat_ Dsat Dneg) Dicond
      (icond_unsat_ Disat Dineg)
      <- neg_cond_impl Dicond Dneg Dineg Dicond1
      <- can_impl_sat Dimach Dsat Dicond1 Disat.
getregs_fun :
   Pi ST:state. Pi R:regs numregs. Pi R':regs numregs.
      getregs ST R -> getregs ST R' -> regs_eq R R' -> type.
getregs_fun_ : getregs_fun getregs_ getregs_ regs_eq_.
putregs_fun :
   Pi ST:state. Pi R:regs numregs. Pi ST1:state. Pi ST1':state.
      putregs ST R ST1 -> putregs ST R ST1' -> state_eq ST1 ST1' -> type.
putregs_fun_ : putregs_fun putregs_ putregs_ state_eq_.
rload*_fun :
   Pi N1:nat. Pi R:regs N1. Pi N:nat. Pi W:string ww. Pi W':string ww.
      rload* R N W -> rload* R N W' -> string_eq W W' -> type.
rload*_fun_z : rload*_fun rload_z rload_z string_eq_.
rload*_fun_s :
   rload*_fun (rload_s Drl) (rload_s Drl') Dseq <- rload*_fun Drl Drl' Dseq.
rload_fun :
   Pi ST:state. Pi IREG:nat. Pi W:string ww. Pi W':string ww.
      rload ST IREG W -> rload ST IREG W' -> string_eq W W' -> type.
rload_fun_ :
   rload_fun (rload_ Drl Dgetr) (rload_ Drl' Dgetr') Dseq
      <- getregs_fun Dgetr Dgetr' Dreq
      <- rload*_resp Dreq nat_eq_ string_eq_ Drl Drl''
      <- rload*_fun Drl'' Drl' Dseq.
rstore*_fun :
   Pi N1:nat. Pi R:regs N1. Pi N:nat. Pi W:string ww. Pi R1:regs N1.
      Pi R1':regs N1.
      rstore* R N W R1 -> rstore* R N W R1' -> regs_eq R1 R1' -> type.
rstore*_fun_z : rstore*_fun rstore_z rstore_z regs_eq_.
rstore*_fun_s :
   rstore*_fun (rstore_s Drst) (rstore_s Drst') Dreq1
      <- rstore*_fun Drst Drst' Dreq
      <- regs_eq_cons Dreq string_eq_ Dreq1.
rstore_fun :
   Pi ST:state. Pi IREG:nat. Pi W:string ww. Pi ST1:state. Pi ST1':state.
      rstore ST IREG W ST1 -> rstore ST IREG W ST1' -> state_eq ST1 ST1' -> type.
rstore_fun_ :
   rstore_fun (rstore_ Dputr Drst Dgetr) (rstore_ Dputr' Drst' Dgetr') Dsteq
      <- getregs_fun Dgetr Dgetr' Dreq
      <- rstore*_resp Dreq nat_eq_ string_eq_ regs_eq_ Drst Drst''
      <- rstore*_fun Drst'' Drst' Dreq1
      <- putregs_resp state_eq_ Dreq1 state_eq_ Dputr Dputr''
      <- putregs_fun Dputr'' Dputr' Dsteq.
store_result_flags_fun :
   Pi ST:state. Pi RF:result_flags. Pi ST1:state. Pi ST1':state.
      store_result_flags ST RF ST1 -> store_result_flags ST RF ST1'
         -> state_eq ST1 ST1' -> type.
store_result_flags_fun_ :
   store_result_flags_fun (store_result_flags_ Dp) (store_result_flags_ Dp')
      Dseq
      <- putflags_fun Dp Dp' Dseq.
false_implies_section_eq :
   false
      -> Pi N1:nat. Pi SECT1:section N1. Pi N2:nat. Pi SECT2:section N2.
             section_eq SECT1 SECT2 -> type.
false_implies_memory_eq :
   Pi H:memory. Pi H':memory. false -> memory_eq H H' -> type.
false_implies_state_eq :
   false -> Pi ST1:state. Pi ST2:state. state_eq ST1 ST2 -> type.
putmem_fun :
   Pi ST:state. Pi H:memory. Pi ST1:state. Pi ST1':state.
      putmem ST H ST1 -> putmem ST H ST1' -> state_eq ST1 ST1' -> type.
putmem_fun_ : putmem_fun putmem_ putmem_ state_eq_.
mload*_fun :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi N2:nat.
      Pi S':string N2. mload* H A S -> mload* H A S' -> string_eq S S' -> type.
-hh :
   mload*_fun (mload_hit Dindex Dlt Drep Dadd)
      (mload_hit Dindex' Dlt' Drep' Dadd') Dseq1
      <- add_commute Dadd Dadd1
      <- add_commute Dadd' Dadd1'
      <- add_fun1 Dadd1 Dadd1' X2 Dbeq
      <- represents_resp nat_eq_ Dbeq Drep Drep''
      <- represents_fun1 Drep'' Drep' Dneq
      <- string_resp Dneq S6 S2 Dseq
      <- index_resp Dneq string_eq_ Dseq string_eq_ Dindex Dindex''
      <- index_fun Dindex'' Dindex' X1 Dseq1.
-mm :
   mload*_fun (mload_miss Dmload X1 X2 X3) (mload_miss Dmload' X4 X5 X6) Dseq
      <- mload*_fun Dmload Dmload' Dseq.
-hm :
   mload*_fun (mload_hit Dindex Dlt Drep Dadd) (mload_miss X2 Dadd1 Dadd2 Drep1)
      Dseq
      <- can_represents1 Astart Nstart Drepstart
      <- sum_add_corr3 Drepstart Drep1 Drepend Dsum1 Dadd2
      <- sum_add_corr3 Drepstart Drep Drepaddr Dsum2 Dadd
      <- sum_add_corr7 Drepend X1 Drepaddr Dsum3 Dadd1
      <- sum_implies_leq Dsum3 Dleq1
      <- sum_leq2 Dsum1 Dsum2 Dleq2 Dleq1
      <- lt_leq_contradict Dlt Dleq2 Dfalse
      <- false_implies_string_eq Dfalse N1 S' N2 S1 Dseq.
-mh :
   mload*_fun (mload_miss X2 Dadd1 Dadd2 Drep1) (mload_hit Dindex Dlt Drep Dadd)
      Dseq
      <- can_represents1 Astart Nstart Drepstart
      <- sum_add_corr3 Drepstart Drep1 Drepend Dsum1 Dadd2
      <- sum_add_corr3 Drepstart Drep Drepaddr Dsum2 Dadd
      <- sum_add_corr7 Drepend X1 Drepaddr Dsum3 Dadd1
      <- sum_implies_leq Dsum3 Dleq1
      <- sum_leq2 Dsum1 Dsum2 Dleq2 Dleq1
      <- lt_leq_contradict Dlt Dleq2 Dfalse
      <- false_implies_string_eq Dfalse N1 S1 N2 S' Dseq.
mload_fun :
   Pi H:state. Pi A:binary wwb. Pi N:nat. Pi S:string N. Pi S':string N.
      mload H A N S -> mload H A N S' -> string_eq S S' -> type.
mload_fun_ :
   mload_fun (mload_ Dindex Dmload getmem_) (mload_ Dindex' Dmload' getmem_)
      Dseq
      <- mload*_fun Dmload Dmload' Deqstr
      <- index_resp nat_eq_ Deqstr string_eq_ string_eq_ Dindex Dindex''
      <- index_fun Dindex'' Dindex' Dseq X1.
stack_section_fun :
   Pi H:memory. Pi A:binary wwb. Pi N:nat. Pi S:string N. Pi A1:binary wwb.
      Pi N1:nat. Pi S1:string N1.
      stack_section H A N S -> stack_section H A1 N1 S1 -> binary_eq A A1
         -> nat_eq N N1 -> string_eq S S1 -> type.
-h :
   stack_section_fun (stack_section_hit X1) (stack_section_hit X2) binary_eq_
      nat_eq_ string_eq_.
-cc :
   stack_section_fun (stack_section_cs Dss) (stack_section_cs Dss1) Dbeq Dneq
      Dseq
      <- stack_section_fun Dss Dss1 Dbeq Dneq Dseq.
-ch :
   stack_section_fun (stack_section_hs Dss) (stack_section_hs Dss1) Dbeq Dneq
      Dseq
      <- stack_section_fun Dss Dss1 Dbeq Dneq Dseq.
-cr :
   stack_section_fun (stack_section_reserved Dss) (stack_section_reserved Dss1)
      Dbeq Dneq Dseq
      <- stack_section_fun Dss Dss1 Dbeq Dneq Dseq.
false_implies_runfac_eq :
   Pi B1:nat. Pi B2:nat.
      false
         -> Pi IRF1:runfac B1. Pi IRF2:runfac B2. runfac_eq IRF1 IRF2 -> type.
runtime_address_fun :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi IRF1:runfac N1. Pi N2:nat.
      Pi IRF2:runfac N2.
      runtime_address H A IRF1 -> runtime_address H A IRF2
         -> runfac_eq IRF1 IRF2 -> type.
-hh : runtime_address_fun runtime_address_hit runtime_address_hit runfac_eq_.
-mm :
   runtime_address_fun (runtime_address_miss Dra X1 X2 X3)
      (runtime_address_miss Dra' X4 X5 X6) Drfeq
      <- runtime_address_fun Dra Dra' Drfeq.
-hm :
   runtime_address_fun runtime_address_hit
      (runtime_address_miss X3 Dadd1 Dadd2 Drep) Drfeq
      <- add_assoc Dadd1 Dadd2 Dadd3 Dadd4
      <- can_zero wwb B3 Diz
      <- add_ident B5 Diz Dadd5
      <- add_commute Dadd4 Dadd4'
      <- add_fun1 Dadd4' Dadd5 X2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd3 Dadd6
      <- add_zero_sum Dadd6 X1 Diz1 Diz
      <- represents_fun1 Drep (represents_z Diz1) Dnateq1
      <- lt_resp nat_eq_ Dnateq1 lt_z Dlt
      <- lt_contradict Dlt Dfalse
      <- false_implies_runfac_eq Dfalse IRF1 IRF2 Drfeq.
-mh :
   runtime_address_fun (runtime_address_miss X3 Dadd1 Dadd2 Drep)
      runtime_address_hit Drfeq
      <- add_assoc Dadd1 Dadd2 Dadd3 Dadd4
      <- can_zero wwb B3 Diz
      <- add_ident B5 Diz Dadd5
      <- add_commute Dadd4 Dadd4'
      <- add_fun1 Dadd4' Dadd5 X2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd3 Dadd6
      <- add_zero_sum Dadd6 X1 Diz1 Diz
      <- represents_fun1 Drep (represents_z Diz1) Dnateq1
      <- lt_resp nat_eq_ Dnateq1 lt_z Dlt
      <- lt_contradict Dlt Dfalse
      <- false_implies_runfac_eq Dfalse IRF1 IRF2 Drfeq.
mstore*_fun :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi H1:memory.
      Pi H1':memory.
      mstore* H A S H1 -> mstore* H A S H1' -> memory_eq H1 H1' -> type.
-hh :
   mstore*_fun (mstore_hit Dnind1 Dnind2 Doind2 Doind1 Dlt Drep Dadd)
      (mstore_hit Dnind1' Dnind2' Doind2' Doind1' Dlt' Drep' Dadd') Dmeq
      <- add_commute Dadd Dadd1
      <- add_commute Dadd' Dadd1'
      <- add_fun1 Dadd1 Dadd1' X4 Dbeq
      <- represents_resp nat_eq_ Dbeq Drep Drep''
      <- represents_fun1 Drep'' Drep' Dneq
      <- string_resp Dneq S3 S7 Dseq1
      <- index_resp Dneq string_eq_ Dseq1 string_eq_ Doind1 Doind1''
      <- index_fun Doind1'' Doind1' Dseq2 Dseq3
      <- index_resp nat_eq_ Dseq3 string_eq_ string_eq_ Doind2 Doind2''
      <- index_fun Doind2'' Doind2' X3 Dseq4
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq4 Dnind2 Dnind2''
      <- index_fun' Dnind2'' Dnind2' string_eq_ string_eq_ X2 Dseq5
      <- string_eq_trans Dseq1 Dseq2 Dseq6
      <- index_fun' Dnind1 Dnind1' Dseq6 Dseq5 X1 Dseq7
      <- section_valid_eq_cons Dseq7 SEG1 Dsecteq
      <- memory_eq_cons binary_eq_ nat_eq_ Dsecteq memory_eq_ Dmeq.
-mm :
   mstore*_fun (mstore_miss Dmst X1 X2 X3) (mstore_miss Dmst' X4 X5 X6) Dmeq
      <- mstore*_fun Dmst Dmst' Dmeq1
      <- memory_eq_cons binary_eq_ nat_eq_ section_eq_ Dmeq1 Dmeq.
-hm :
   mstore*_fun (mstore_hit X2 X3 X4 X5 Dlt Drep Dadd)
      (mstore_miss X6 Dadd1 Dadd2 Drep1) Dmeq1
      <- can_represents1 Astart Nstart Drepstart
      <- sum_add_corr3 Drepstart Drep1 Drepend Dsum1 Dadd2
      <- sum_add_corr3 Drepstart Drep Drepaddr Dsum2 Dadd
      <- sum_add_corr7 Drepend X1 Drepaddr Dsum3 Dadd1
      <- sum_implies_leq Dsum3 Dleq1
      <- sum_leq2 Dsum1 Dsum2 Dleq2 Dleq1
      <- lt_leq_contradict Dlt Dleq2 Dfalse
      <- false_implies_string_eq Dfalse Nsize S1 Nsize S2 Dseq
      <- false_implies_memory_eq Dfalse Dmeq
      <- section_valid_eq_cons Dseq SEG1 Dsecteq
      <- memory_eq_cons binary_eq_ nat_eq_ Dsecteq Dmeq Dmeq1.
-mh :
   mstore*_fun (mstore_miss X2 Dadd1 Dadd2 Drep1)
      (mstore_hit X3 X4 X5 X6 Dlt Drep Dadd) Dmeq1
      <- can_represents1 Astart Nstart Drepstart
      <- sum_add_corr3 Drepstart Drep1 Drepend Dsum1 Dadd2
      <- sum_add_corr3 Drepstart Drep Drepaddr Dsum2 Dadd
      <- sum_add_corr7 Drepend X1 Drepaddr Dsum3 Dadd1
      <- sum_implies_leq Dsum3 Dleq1
      <- sum_leq2 Dsum1 Dsum2 Dleq2 Dleq1
      <- lt_leq_contradict Dlt Dleq2 Dfalse
      <- false_implies_string_eq Dfalse Nsize S1 Nsize S2 Dseq
      <- false_implies_memory_eq Dfalse Dmeq
      <- section_valid_eq_cons Dseq SEG1 Dsecteq
      <- memory_eq_cons binary_eq_ nat_eq_ Dsecteq Dmeq Dmeq1.
mstore_fun :
   Pi N1:nat. Pi ST:state. Pi A:binary wwb. Pi S:string N1. Pi ST1:state.
      Pi ST1':state.
      mstore ST A S ST1 -> mstore ST A S ST1' -> state_eq ST1 ST1' -> type.
mstore_fun_ :
   mstore_fun (mstore_ Dp Dst getmem_) (mstore_ Dp' Dst' getmem_) Dsteq
      <- mstore*_fun Dst Dst' Dmeq
      <- putmem_resp state_eq_ Dmeq state_eq_ Dp Dp''
      <- putmem_fun Dp'' Dp' Dsteq.
mextend*_fun :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi SECT:section N1. Pi H1:memory.
      Pi H2:memory.
      mextend* H A SECT H1 -> mextend* H A SECT H2 -> memory_eq H1 H2 -> type.
-nn : mextend*_fun mextend_nil mextend_nil memory_eq_.
-cc :
   mextend*_fun (mextend_cons D1 X1 X2 X3) (mextend_cons D2 X4 X5 X6) Dmeq'
      <- mextend*_fun D1 D2 Dmeq
      <- memory_eq_cons binary_eq_ nat_eq_ section_eq_ Dmeq Dmeq'.
-bb :
   mextend*_fun (mextend_between D1 X1 X2) (mextend_between D2 X3 X4) 
memory_eq_.
-cb :
   mextend*_fun (mextend_cons X2 Dadd1 Dadd2 Drep1)
      (mextend_between Dadd3 Dadd4 Drep2) Dmeq1
      <- can_represents1 Astart Nstart Drepstart
      <- sum_add_corr3 Drepstart Drep2 Drepend Dsum1 Dadd4
      <- can_represents1 B2 N2 Drepign1
      <- sum_add_corr3 Drepend Drepign1 Drepstart' Dsum2 Dadd3
      <- sum_implies_leq Dsum2 Dleq1
      <- sum_implies_lt Dsum1 Dlt1
      <- lt_leq_trans Dlt1 Dleq1 Dlt2
      <- sum_add_corr3 Drepstart' Drep1 Drepend' Dsum3 Dadd2
      <- sum_add_corr7 Drepend' X1 Drepstart Dsum4 Dadd1
      <- sum_implies_leq Dsum3 Dleq2
      <- sum_implies_leq Dsum4 Dleq3
      <- leq_trans Dleq2 Dleq3 Dleq4
      <- lt_leq_contradict Dlt2 Dleq4 Dfalse
      <- false_implies_binary_eq Dfalse wwb Astart' Astart Dbeq
      <- false_implies_nat_eq Dfalse Nsize' (s Nsize) Dneq
      <- false_implies_section_eq Dfalse Nsize' SECT1 (s Nsize) SECT2 Dsecteq
      <- false_implies_memory_eq Dfalse Dmeq
      <- memory_eq_cons Dbeq Dneq Dsecteq Dmeq Dmeq1.
-bc :
   mextend*_fun (mextend_between Dadd3 Dadd4 Drep2)
      (mextend_cons X2 Dadd1 Dadd2 Drep1) Dmeq1
      <- can_represents1 Astart Nstart Drepstart
      <- sum_add_corr3 Drepstart Drep2 Drepend Dsum1 Dadd4
      <- can_represents1 B2 N2 Drepign1
      <- sum_add_corr3 Drepend Drepign1 Drepstart' Dsum2 Dadd3
      <- sum_implies_leq Dsum2 Dleq1
      <- sum_implies_lt Dsum1 Dlt1
      <- lt_leq_trans Dlt1 Dleq1 Dlt2
      <- sum_add_corr3 Drepstart' Drep1 Drepend' Dsum3 Dadd2
      <- sum_add_corr7 Drepend' X1 Drepstart Dsum4 Dadd1
      <- sum_implies_leq Dsum3 Dleq2
      <- sum_implies_leq Dsum4 Dleq3
      <- leq_trans Dleq2 Dleq3 Dleq4
      <- lt_leq_contradict Dlt2 Dleq4 Dfalse
      <- false_implies_binary_eq Dfalse wwb Astart Astart' Dbeq
      <- false_implies_nat_eq Dfalse (s Nsize) Nsize' Dneq
      <- false_implies_section_eq Dfalse (s Nsize) SECT1 Nsize' SECT2 Dsecteq
      <- false_implies_memory_eq Dfalse Dmeq
      <- memory_eq_cons Dbeq Dneq Dsecteq Dmeq Dmeq1.
is_valid_invalid*_contradict :
   Pi A1:binary wwb. Pi B1:binary wwb. Pi A2:binary wwb. Pi H:memory.
      add A1 B1 A2 zero -> is_valid_addr* H A1 A2 -> is_invalid_addr* H A1 A2
         -> false -> type.
-cc :
   is_valid_invalid*_contradict Daddaddr (is_valid_addr_cons Disv X1 X2 X3)
      (is_invalid_addr_cons Disnv) Dfalse
      <- is_valid_invalid*_contradict Daddaddr Disv Disnv Dfalse.
-bc :
   is_valid_invalid*_contradict Daddaddr (is_valid_addr_between Disv X1)
      (is_invalid_addr_cons Disnv) Dfalse
      <- is_valid_invalid*_contradict Daddaddr Disv Disnv Dfalse.
-ch :
   is_valid_invalid*_contradict Daddaddr
      (is_valid_addr_cons X3 Dadd1 Dadd2 Drep1)
      (is_invalid_addr_hit X4 Dinz1 X5 Dadd3 Dadd4 Drep2) Dfalse
      <- represents_fun2 Drep1 Drep2 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd2 Dadd5
      <- add_fun3 Dadd5 Dadd4 X2 Dbeq2
      <- add_resp Dbeq2 binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd6
      <- add_assoc Dadd6 Dadd3 Dadd7 Dadd8
      <- add_commute Dadd8 Dadd8'
      <- can_zero wwb B1 Diz
      <- add_ident B5 Diz Dadd9
      <- add_fun1 Dadd9 Dadd8' X1 Dbeq3
      <- add_commute Dadd7 Dadd7'
      <- add_nonzero_sum Dadd7' Dinz1 Dinz2
      <- zero_nonzero_contradict Dbeq3 Diz Dinz2 Dfalse.
-bh :
   is_valid_invalid*_contradict Daddaddr (is_valid_addr_between X2 Dadd1)
      (is_invalid_addr_hit Dinz1 X3 Dadd2 X4 X5 X6) Dfalse
      <- add_assoc Dadd1 Dadd2 Dadd3 Dadd4
      <- add_commute Dadd4 Dadd4'
      <- can_zero wwb B1 Diz
      <- add_ident B5 Diz Dadd5
      <- add_fun1 Dadd5 Dadd4' X1 Dbeq1
      <- add_commute Dadd3 Dadd3'
      <- add_nonzero_sum Dadd3' Dinz1 Dinz2
      <- zero_nonzero_contradict Dbeq1 Diz Dinz2 Dfalse.
Dneq10 : binary_neq 1_2 0_2
   = binary_neq_ is_nonzero_one
        (add_ (addc_cons (addc_cons addc_nil addbit_101) addbit_110)).
Dneq20 : binary_neq 2_2 0_2
   = binary_neq_ (is_nonzero_zero is_nonzero_one)
        (add_ (addc_cons (addc_cons addc_nil addbit_110) addbit_000)).
Dneq30 : binary_neq 3_2 0_2
   = binary_neq_ is_nonzero_one
        (add_ (addc_cons (addc_cons addc_nil addbit_011) addbit_110)).
is_aligned_unaligned_contradict :
   Pi B:binary wwb. is_aligned B -> is_unaligned B -> false -> type.
-1 :
   is_aligned_unaligned_contradict (is_aligned_ Dbapp1) (is_unaligned_1 Dbapp2)
      Dfalse
      <- binary_append'_fun Dbapp1 Dbapp2 X1 Dbeq X2
      <- binary_neq_resp binary_eq_ Dbeq Dneq10 Dbneq
      <- binary_neq_contradict Dbneq Dfalse.
-2 :
   is_aligned_unaligned_contradict (is_aligned_ Dbapp1) (is_unaligned_2 Dbapp2)
      Dfalse
      <- binary_append'_fun Dbapp1 Dbapp2 X1 Dbeq X2
      <- binary_neq_resp binary_eq_ Dbeq Dneq20 Dbneq
      <- binary_neq_contradict Dbneq Dfalse.
-3 :
   is_aligned_unaligned_contradict (is_aligned_ Dbapp1) (is_unaligned_3 Dbapp2)
      Dfalse
      <- binary_append'_fun Dbapp1 Dbapp2 X1 Dbeq X2
      <- binary_neq_resp binary_eq_ Dbeq Dneq30 Dbneq
      <- binary_neq_contradict Dbneq Dfalse.
is_valid_invalid_contradict :
   Pi A1:binary wwb. Pi B1:binary wwb. Pi A2:binary wwb. Pi H:memory.
      add A1 B1 A2 zero -> is_valid_addr H A1 A2 -> is_invalid_addr H A1 A2
         -> false -> type.
-ua :
   is_valid_invalid_contradict X1 (is_valid_addr_ X2 Disa)
      (is_invalid_addr_unaligned Disna) Dfalse
      <- is_aligned_unaligned_contradict Disa Disna Dfalse.
- :
   is_valid_invalid_contradict Dadd1 (is_valid_addr_ Disv X1)
      (is_invalid_addr_ Disnv) Dfalse
      <- is_valid_invalid*_contradict Dadd1 Disv Disnv Dfalse.
get_valid_addr_fun :
   Pi OR:oracle. Pi H:memory. Pi S:binary wwb. Pi B:binary wwb. Pi BIT1:bit.
      Pi A1:binary wwb. Pi OR1:oracle. Pi BIT2:bit. Pi A2:binary wwb.
      Pi OR2:oracle.
      get_valid_addr OR H S B BIT1 A1 OR1 -> get_valid_addr OR H S B BIT2 A2 OR2
         -> bit_eq BIT1 BIT2 -> binary_eq A1 A2 -> oracle_eq OR1 OR2 -> type.
-hh :
   get_valid_addr_fun (get_valid_addr_hit Dcons X2 X3)
      (get_valid_addr_hit Dcons' X4 X5) bit_eq_ binary_eq_ Doeq
      <- consume_bit_fun Dcons Dcons' X1 Doeq.
-oo :
   get_valid_addr_fun (get_valid_addr_oracle Dgv Dadd Dcons X3 X4)
      (get_valid_addr_oracle Dgv' Dadd' Dcons' X5 X6) Dbiteq Dbeq Doeq
      <- consume_bit_fun Dcons Dcons' X2 Doeq1
      <- add_fun3 Dadd Dadd' X1 Dbeq1
      <- get_valid_addr_resp Doeq1 memory_eq_ binary_eq_ Dbeq1 bit_eq_
            binary_eq_ oracle_eq_ Dgv Dgv''
      <- get_valid_addr_fun Dgv'' Dgv' Dbiteq Dbeq Doeq.
-ii :
   get_valid_addr_fun (get_valid_addr_invalid Dgv Dadd X2 X3)
      (get_valid_addr_invalid Dgv' Dadd' X4 X5) Dbiteq Dbeq Doeq
      <- add_fun3 Dadd Dadd' X1 Dbeq1
      <- get_valid_addr_resp oracle_eq_ memory_eq_ binary_eq_ Dbeq1 bit_eq_
            binary_eq_ oracle_eq_ Dgv Dgv''
      <- get_valid_addr_fun Dgv'' Dgv' Dbiteq Dbeq Doeq.
-fofo :
   get_valid_addr_fun (get_valid_addr_fail_o X2 Dcons X3 X4)
      (get_valid_addr_fail_o X5 Dcons' X6 X7) bit_eq_ binary_eq_ Doeq
      <- consume_bit_fun Dcons Dcons' X1 Doeq.
-fifi :
   get_valid_addr_fun (get_valid_addr_fail_i X1 X2 X3)
      (get_valid_addr_fail_i X4 X5 X6) bit_eq_ binary_eq_ oracle_eq_.
-hi :
   get_valid_addr_fun (get_valid_addr_hit Dcons Disv Dadd)
      (get_valid_addr_invalid X2 X3 Disnv Dadd1) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse one' B3 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 B2 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ih :
   get_valid_addr_fun (get_valid_addr_invalid X2 X3 Disnv Dadd1)
      (get_valid_addr_hit Dcons Disv Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse B3 one' Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 B2 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-hfo :
   get_valid_addr_fun (get_valid_addr_hit Dcons X1 X2)
      (get_valid_addr_fail_o X3 Dcons' X4 X5) Dbiteq1 Dbeq1 Doeq1
      <- consume_bit_fun Dcons Dcons' Dbiteq Doeq
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse one' zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-foh :
   get_valid_addr_fun (get_valid_addr_fail_o X1 Dcons' X2 X3)
      (get_valid_addr_hit Dcons X4 X5) Dbiteq1 Dbeq1 Doeq1
      <- consume_bit_fun Dcons Dcons' Dbiteq Doeq
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero one' Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-hfi :
   get_valid_addr_fun (get_valid_addr_hit X2 Disv Dadd)
      (get_valid_addr_fail_i X3 Disnv Dadd1) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse one' zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-fih :
   get_valid_addr_fun (get_valid_addr_fail_i X2 Disnv Dadd1)
      (get_valid_addr_hit X3 Disv Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse zero one' Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-io :
   get_valid_addr_fun (get_valid_addr_invalid X2 X3 Disnv Dadd1)
      (get_valid_addr_oracle X4 X5 X6 Disv Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse B3 B4 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 B2 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-oi :
   get_valid_addr_fun (get_valid_addr_oracle X2 X3 X4 Disv Dadd)
      (get_valid_addr_invalid X5 X6 Disnv Dadd1) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse B3 B4 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 B2 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ofo :
   get_valid_addr_fun (get_valid_addr_oracle X2 Dadd X3 X4 X5)
      (get_valid_addr_fail_o Dadd' X6 X7 X8) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse B2 zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-foo :
   get_valid_addr_fun (get_valid_addr_fail_o Dadd' X2 X3 X4)
      (get_valid_addr_oracle X5 Dadd X6 X7 X8) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero B2 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ofi :
   get_valid_addr_fun (get_valid_addr_oracle X2 X3 X4 Disv Dadd)
      (get_valid_addr_fail_i X5 Disnv Dadd1) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse B2 zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-fio :
   get_valid_addr_fun (get_valid_addr_fail_i X2 Disnv Dadd1)
      (get_valid_addr_oracle X3 X4 X5 Disv Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse zero B2 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ifi :
   get_valid_addr_fun (get_valid_addr_invalid X2 Dadd X3 X4)
      (get_valid_addr_fail_i Dadd' X5 X6) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse B2 zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ifo :
   get_valid_addr_fun (get_valid_addr_invalid X2 X3 Disnv Dadd1)
      (get_valid_addr_fail_o X4 X5 Disv Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse B2 zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-foi :
   get_valid_addr_fun (get_valid_addr_fail_o X2 X3 Disv Dadd)
      (get_valid_addr_invalid X4 X5 Disnv Dadd1) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse zero B2 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-fii :
   get_valid_addr_fun (get_valid_addr_fail_i Dadd' X2 X3)
      (get_valid_addr_invalid X4 Dadd X5 X6) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero B2 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-fofi :
   get_valid_addr_fun (get_valid_addr_fail_o X2 X3 Disv Dadd)
      (get_valid_addr_fail_i X4 Disnv Dadd1) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse zero zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-fifo :
   get_valid_addr_fun (get_valid_addr_fail_i X2 Disnv Dadd1)
      (get_valid_addr_fail_o X3 X4 Disv Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd1 Dadd X1 Dbeq
      <- is_invalid_addr_resp memory_eq_ binary_eq_ Dbeq Disnv Disnv1
      <- is_valid_invalid_contradict Dadd Disv Disnv1 Dfalse
      <- false_implies_bit_eq Dfalse zero zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-hov :
   get_valid_addr_fun (get_valid_addr_hit X2 X3 Dadd)
      (get_valid_addr_fail_ov Dadd') Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse one' zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ovh :
   get_valid_addr_fun (get_valid_addr_fail_ov Dadd')
      (get_valid_addr_hit X2 X3 Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero one' Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-iov :
   get_valid_addr_fun (get_valid_addr_invalid X2 X3 X4 Dadd)
      (get_valid_addr_fail_ov Dadd') Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse B2 zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ovi :
   get_valid_addr_fun (get_valid_addr_fail_ov Dadd')
      (get_valid_addr_invalid X2 X3 X4 Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero B2 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-oov :
   get_valid_addr_fun (get_valid_addr_oracle X2 X3 X4 X5 Dadd)
      (get_valid_addr_fail_ov Dadd') Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse B2 zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ovo :
   get_valid_addr_fun (get_valid_addr_fail_ov Dadd')
      (get_valid_addr_oracle X2 X3 X4 X5 Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero B2 Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-fiov :
   get_valid_addr_fun (get_valid_addr_fail_i X2 X3 Dadd)
      (get_valid_addr_fail_ov Dadd') Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ovfi :
   get_valid_addr_fun (get_valid_addr_fail_ov Dadd')
      (get_valid_addr_fail_i X2 X3 Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-foov :
   get_valid_addr_fun (get_valid_addr_fail_o X2 X3 X4 Dadd)
      (get_valid_addr_fail_ov Dadd') Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ovfo :
   get_valid_addr_fun (get_valid_addr_fail_ov Dadd')
      (get_valid_addr_fail_o X2 X3 X4 Dadd) Dbiteq1 Dbeq1 Doeq1
      <- add_fun3 Dadd' Dadd Dbiteq X1
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_bit_eq Dfalse zero zero Dbiteq1
      <- false_implies_binary_eq Dfalse wwb 0_32 0_32 Dbeq1
      <- false_implies_oracle_eq Dfalse Doeq1.
-ovov :
   get_valid_addr_fun (get_valid_addr_fail_ov Dadd)
      (get_valid_addr_fail_ov Dadd') bit_eq_ binary_eq_ oracle_eq_.
mextend_fun :
   Pi N1:nat. Pi ST:state. Pi SEG:segment. Pi S:string N1. Pi ST1:state.
      Pi A1:binary wwb. Pi BIT1:bit. Pi ST2:state. Pi A2:binary wwb.
      Pi BIT2:bit.
      mextend ST SEG S ST1 A1 BIT1 -> mextend ST SEG S ST2 A2 BIT2
         -> state_eq ST1 ST2 -> binary_eq A1 A2 -> bit_eq BIT1 BIT2 -> type.
- :
   mextend_fun (mextend_ Dpo Dpm Dext Dgetvalid getoracle_ getmem_ Drep)
      (mextend_ Dpo' Dpm' Dext' Dgetvalid' getoracle_ getmem_ Drep') Dsteq2 Daeq
      bit_eq_
      <- represents_fun2 Drep Drep' Dbeq
      <- get_valid_addr_resp oracle_eq_ memory_eq_ Dbeq binary_eq_ bit_eq_
            binary_eq_ oracle_eq_ Dgetvalid Dgetvalid''
      <- get_valid_addr_fun Dgetvalid'' Dgetvalid' X1 Daeq Doeq
      <- mextend*_resp memory_eq_ Daeq section_eq_ memory_eq_ Dext Dext''
      <- mextend*_fun Dext'' Dext' Dmeq
      <- putmem_resp state_eq_ Dmeq state_eq_ Dpm Dpm''
      <- putmem_fun Dpm'' Dpm' Dsteq1
      <- putoracle_resp Dsteq1 Doeq state_eq_ Dpo Dpo''
      <- putoracle_fun Dpo'' Dpo' Dsteq2.
-nf :
   mextend_fun (mextend_ Dpo Dpm Dext Dgetvalid getoracle_ getmem_ Drep)
      (mextend_fail_nospace Dgetvalid' getoracle_ getmem_ Drep') Dsteq Daeq
      Dbiteq1
      <- represents_fun2 Drep Drep' Dbeq
      <- get_valid_addr_resp oracle_eq_ memory_eq_ Dbeq binary_eq_ bit_eq_
            binary_eq_ oracle_eq_ Dgetvalid Dgetvalid''
      <- get_valid_addr_fun Dgetvalid'' Dgetvalid' Dbiteq X1 X2
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_state_eq Dfalse ST1 stopped Dsteq
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Daeq
      <- false_implies_bit_eq Dfalse one' zero Dbiteq1.
-fn :
   mextend_fun (mextend_fail_nospace Dgetvalid' getoracle_ getmem_ Drep')
      (mextend_ Dpo Dpm Dext Dgetvalid getoracle_ getmem_ Drep) Dsteq Daeq
      Dbiteq1
      <- represents_fun2 Drep Drep' Dbeq
      <- get_valid_addr_resp oracle_eq_ memory_eq_ Dbeq binary_eq_ bit_eq_
            binary_eq_ oracle_eq_ Dgetvalid Dgetvalid''
      <- get_valid_addr_fun Dgetvalid'' Dgetvalid' Dbiteq X1 X2
      <- bit_eq_contradict Dbiteq Dfalse
      <- false_implies_state_eq Dfalse stopped ST1 Dsteq
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Daeq
      <- false_implies_bit_eq Dfalse zero one' Dbiteq1.
-ff :
   mextend_fun (mextend_fail_nospace Dgetvalid getoracle_ getmem_ Drep)
      (mextend_fail_nospace Dgetvalid' getoracle_ getmem_ Drep') state_eq_ Dbeq1
      bit_eq_
      <- represents_fun2 Drep Drep' Dbeq
      <- get_valid_addr_resp oracle_eq_ memory_eq_ Dbeq binary_eq_ bit_eq_
            binary_eq_ oracle_eq_ Dgetvalid Dgetvalid''
      <- get_valid_addr_fun Dgetvalid'' Dgetvalid' X1 Dbeq1 X2.
- :
   mextend_fun (mextend_fail_toobig X1) (mextend_fail_toobig X2) state_eq_
      binary_eq_ bit_eq_.
- :
   mextend_fun (mextend_fail_toobig X1) (mextend_fail_nospace X2 X3 X4 X5)
      state_eq_ binary_eq_ bit_eq_.
- :
   mextend_fun (mextend_fail_nospace X1 X2 X3 X4) (mextend_fail_toobig X5)
      state_eq_ binary_eq_ bit_eq_.
- :
   mextend_fun (mextend_fail_toobig Dunr) (mextend_ X1 X2 X3 X4 X5 X6 Drep)
      Dsteq Daeq Dbiteq
      <- represents_unrepresentable_contradict Drep Dunr Dfalse
      <- false_implies_state_eq Dfalse stopped ST1 Dsteq
      <- false_implies_binary_eq Dfalse wwb 0_32 B1 Daeq
      <- false_implies_bit_eq Dfalse zero one' Dbiteq.
- :
   mextend_fun (mextend_ X1 X2 X3 X4 X5 X6 Drep) (mextend_fail_toobig Dunr)
      Dsteq Daeq Dbiteq
      <- represents_unrepresentable_contradict Drep Dunr Dfalse
      <- false_implies_state_eq Dfalse ST1 stopped Dsteq
      <- false_implies_binary_eq Dfalse wwb B1 0_32 Daeq
      <- false_implies_bit_eq Dfalse one' zero Dbiteq.
impl_seg_fun1 :
   Pi SEG1:segment. Pi SEG:seg. Pi SEG2:segment.
      impl_seg SEG1 SEG -> impl_seg SEG2 SEG -> segment_eq SEG1 SEG2 -> type.
- : impl_seg_fun1 impl_seg_cs impl_seg_cs segment_eq_.
- : impl_seg_fun1 impl_seg_hs impl_seg_hs segment_eq_.
mextend_mload :
   Pi N1:nat. Pi H:memory. Pi B:binary wwb. Pi SEG:segment. Pi S:string N1.
      Pi H1:memory.
      mextend* H B (section_valid SEG S) H1 -> mload* H1 B S
         -> segment_of H1 B SEG -> type.
-n :
   mextend_mload mextend_nil (mload_hit index_z lt_z (represents_z Diz) Dadd1)
      (segment_of_hit lt_z (represents_z Diz) Dadd1)
      <- can_zero wwb Bzero Diz
      <- add_ident B1 Diz Dadd
      <- add_commute Dadd Dadd1.
-c :
   mextend_mload (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (mload_miss Dmload Dadd1 Dadd2 Drep)
      (segment_of_miss Dsegof Dadd1 Dadd2 Drep)
      <- mextend_mload Dmext Dmload Dsegof.
-b :
   mextend_mload (mextend_between Dadd1 Dadd2 Drep)
      (mload_hit index_z lt_z (represents_z Diz) Dadd4)
      (segment_of_hit lt_z (represents_z Diz) Dadd4)
      <- can_zero wwb Bzero Diz
      <- add_ident B1 Diz Dadd3
      <- add_commute Dadd3 Dadd4.
mload*_weaken :
   Pi N:nat. Pi H:memory. Pi A:binary wwb. Pi SECT:section N. Pi H1:memory.
      Pi N1:nat. Pi A1:binary wwb. Pi S:string N1.
      mextend* H A SECT H1 -> mload* H A1 S -> mload* H1 A1 S -> type.
-c :
   mload*_weaken (mextend_cons X1 X2 X3 X4) (mload_hit Dindex Dlt Drep Dadd)
      (mload_hit Dindex Dlt Drep Dadd).
-b :
   mload*_weaken (mextend_between Dadd1 Dadd2 Drep1)
      (mload_hit Dindex Dlt Drep2 Dadd3)
      (mload_miss (mload_hit Dindex Dlt Drep2 Dadd3) Dadd4 Dadd2 Drep1)
      <- add_assoc Dadd1 Dadd3 X1 Dadd4.
-cm :
   mload*_weaken (mextend_cons Dmext X1 X2 X3)
      (mload_miss Dml Dadd1 Dadd2 Drep1) (mload_miss Dml1 Dadd1 Dadd2 Drep1)
      <- mload*_weaken Dmext Dml Dml1.
-bm :
   mload*_weaken (mextend_between Dadd1 Dadd2 Drep1)
      (mload_miss Dml Dadd3 Dadd4 Drep2)
      (mload_miss (mload_miss Dml Dadd3 Dadd4 Drep2) Dadd6 Dadd2 Drep1)
      <- add_assoc Dadd1 Dadd4 X2 Dadd5
      <- add_assoc Dadd5 Dadd3 X1 Dadd6.
-bc :
   mload*_weaken (mextend_cons Dmext Dadd2 Dadd3 Drep2)
      (mload_miss Dml Dadd4 Dadd5 Drep3) (mload_miss Dml1 Dadd4 Dadd5 Drep3)
      <- mload*_weaken Dmext Dml Dml1.
segment_of_weaken :
   Pi N:nat. Pi H:memory. Pi A:binary wwb. Pi SECT:section N. Pi H1:memory.
      Pi A1:binary wwb. Pi SEG:segment.
      mextend* H A SECT H1 -> segment_of H A1 SEG -> segment_of H1 A1 SEG
         -> type.
-c :
   segment_of_weaken (mextend_cons X1 X2 X3 X4) (segment_of_hit Dlt Drep Dadd)
      (segment_of_hit Dlt Drep Dadd).
-b :
   segment_of_weaken (mextend_between Dadd1 Dadd2 Drep1)
      (segment_of_hit Dlt Drep2 Dadd3)
      (segment_of_miss (segment_of_hit Dlt Drep2 Dadd3) Dadd4 Dadd2 Drep1)
      <- add_assoc Dadd1 Dadd3 X1 Dadd4.
-cm :
   segment_of_weaken (mextend_cons Dmext X1 X2 X3)
      (segment_of_miss Dml Dadd1 Dadd2 Drep1)
      (segment_of_miss Dml1 Dadd1 Dadd2 Drep1)
      <- segment_of_weaken Dmext Dml Dml1.
-bm :
   segment_of_weaken (mextend_between Dadd1 Dadd2 Drep1)
      (segment_of_miss Dml Dadd3 Dadd4 Drep2)
      (segment_of_miss (segment_of_miss Dml Dadd3 Dadd4 Drep2) Dadd6 Dadd2 Drep1)
      <- add_assoc Dadd1 Dadd4 X2 Dadd5
      <- add_assoc Dadd5 Dadd3 X1 Dadd6.
-bc :
   segment_of_weaken (mextend_cons Dmext Dadd2 Dadd3 Drep2)
      (segment_of_miss Dml Dadd4 Dadd5 Drep3)
      (segment_of_miss Dml1 Dadd4 Dadd5 Drep3)
      <- segment_of_weaken Dmext Dml Dml1.
can_mload* :
   Pi Nlim:nat. Pi Wesp:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi M:memory.
      Pi H:heap. Pi L:loc. Pi Lstart:binary wwb. Pi B1:bit. Pi V:val.
      Pi SEG1:seg. Pi SEG:segment. Pi N1:nat. Pi S:string N1.
      impl_heap (corresp_info_ Nlim Wesp LM IM) M H -> lookup_loc LM L Lstart B1
         -> hlookup H L V -> segof L SEG1 -> impl_seg SEG SEG1
         -> mload* M Lstart S -> impl_val (corresp_info_ Nlim Wesp LM IM) S V
         -> segment_of M Lstart SEG -> type.
-hit :
   can_mload* (impl_heap_cons Dmext Diseg Dsegof X1 X2 Dival Dlook X3 X4) Dlook'
      hlookup_hit Dsegof Diseg Dml' Dival Dsegmentof'
      <- lookup_loc_fun Dlook Dlook' Dbeq
      <- mextend_mload Dmext Dml Dsegmentof
      <- mload*_resp memory_eq_ Dbeq string_eq_ Dml Dml'
      <- segment_of_resp memory_eq_ Dbeq segment_eq_ Dsegmentof Dsegmentof'.
-miss :
   can_mload* (impl_heap_cons Dmext X1 X2 X3 X4 X5 X6 X7 Diheap) Dlook
      (hlookup_miss Dhlook X8) Dsegof Diseg Dml' Dival Dsegmentof'
      <- can_mload* Diheap Dlook Dhlook Dsegof Diseg Dml Dival Dsegmentof
      <- mload*_weaken Dmext Dml Dml'
      <- segment_of_weaken Dmext Dsegmentof Dsegmentof'.
mload*_part :
   Pi N1:nat. Pi M:memory. Pi A:binary wwb. Pi S:string N1. Pi N2:nat. Pi N:nat.
      Pi S1:string N. Pi S2:string (s N2). Pi B:binary wwb. Pi A':binary wwb.
      mload* M A S -> index N S S1 S2 -> represents N B -> add A B A' zero
         -> mload* M A' S2 -> type.
-hit :
   mload*_part (mload_hit Dindex Dlt Drep Dadd) Dindex1 Drep1 Dadd1
      (mload_hit Dindex2 Dlt1 Drep2 Dadd3)
      <- add_assoc Dadd Dadd1 Dadd2 Dadd3
      <- index_implies_sum Dindex Dsum1
      <- index_implies_sum Dindex1 Dsum2
      <- sum_commute Dsum1 Dsum1'
      <- sum_commute Dsum2 Dsum2'
      <- sum_assoc Dsum2' Dsum1' Dsum3 Dsum4
      <- sum_commute Dsum3 Dsum3'
      <- index_compose' Dindex Dindex1 Dsum3' Dindex2 Dindex3
      <- sum_add_corr5 Drep Drep1 Drep2 Dsum3' Dadd2
      <- sum_commute Dsum4 Dsum4'
      <- sum_implies_lt Dsum4' Dlt1.
-miss :
   mload*_part (mload_miss Dmload Dadd1 Dadd2 Drep) Dindex1 Drep1 Dadd3
      (mload_miss Dmload1 Dadd5 Dadd2 Drep)
      <- mload*_part Dmload Dindex1 Drep1 Dadd3 Dmload1
      <- add_assoc Dadd1 Dadd3 Dadd4 Dadd5.
postpone_mload_stack :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi CI:corresp_info.
      Pi B1:binary wwb. Pi V1:val. Pi H1:memory.
      mload* H A S -> impl_stack CI H B1 V1 H1 -> mload* H1 A S -> type.
- :
   postpone_mload_stack Dml
      (impl_stack_ Dmext1 Dmext2 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12) Dml2
      <- mload*_weaken Dmext2 Dml Dml1
      <- mload*_weaken Dmext1 Dml1 Dml2.
postpone_mload_runfac :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi N2:nat. Pi N:nat.
      Pi IM:irfmap. Pi LM:locmap. Pi H':memory. Pi S2:string N2.
      mload* H A S -> impl_runfacs N IM LM H H' S2 -> mload* H' A S -> type.
- : postpone_mload_runfac Dml impl_runfacs_z Dml.
- :
   postpone_mload_runfac Dml (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) Dml2
      <- postpone_mload_runfac Dml Dirfs Dml1
      <- mload*_weaken Dmext Dml1 Dml2.
postpone_mload_got :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi CI:corresp_info.
      Pi H1:memory.
      mload* H A S -> impl_got_ptr CI H H1 -> mload* H1 A S -> type.
- :
   postpone_mload_got Dml (impl_got_ptr_ Dmext1 X1 X2 Dirfs) Dml2
      <- postpone_mload_runfac Dml Dirfs Dml1
      <- mload*_weaken Dmext1 Dml1 Dml2.
segment_of_part| :
   false
      -> Pi M:memory. Pi A':binary wwb. Pi SEG:segment.
             segment_of M A' SEG -> type.
segment_of_part :
   Pi M:memory. Pi A:binary wwb. Pi SEG:segment. Pi N1:nat. Pi S:string N1.
      Pi N2:nat. Pi N:nat. Pi S1:string N. Pi S2:string (s N2). Pi B:binary wwb.
      Pi A':binary wwb.
      segment_of M A SEG -> mload* M A S -> index N S S1 S2 -> represents N B
         -> add A B A' zero -> segment_of M A' SEG -> type.
-hit :
   segment_of_part (segment_of_hit X1 X2 X3) (mload_hit Dindex Dlt Drep Dadd)
      Dindex1 Drep1 Dadd1 (segment_of_hit Dlt1 Drep2 Dadd3)
      <- add_assoc Dadd Dadd1 Dadd2 Dadd3
      <- index_implies_sum Dindex Dsum1
      <- index_implies_sum Dindex1 Dsum2
      <- sum_commute Dsum1 Dsum1'
      <- sum_commute Dsum2 Dsum2'
      <- sum_assoc Dsum2' Dsum1' Dsum3 Dsum4
      <- sum_commute Dsum3 Dsum3'
      <- index_compose' Dindex Dindex1 Dsum3' Dindex2 Dindex3
      <- sum_add_corr5 Drep Drep1 Drep2 Dsum3' Dadd2
      <- sum_commute Dsum4 Dsum4'
      <- sum_implies_lt Dsum4' Dlt1.
-miss :
   segment_of_part (segment_of_miss Dsegof Dadd1 Dadd2 Drep)
      (mload_miss Dmload X1 X2 X3) Dindex1 Drep1 Dadd3
      (segment_of_miss Dsegof1 Dadd5 Dadd2 Drep)
      <- segment_of_part Dsegof Dmload Dindex1 Drep1 Dadd3 Dsegof1
      <- add_assoc Dadd1 Dadd3 Dadd4 Dadd5.
-hm :
   segment_of_part (segment_of_hit Dlt Drep1 Dadd1)
      (mload_miss Dmload Dadd2 Dadd3 Drep2) Dindex1 Drep3 Dadd4 Dsegof
      <- add_assoc Dadd3 Dadd2 Dadd5 Dadd6
      <- add_commute Dadd6 Dadd6'
      <- add_commute Dadd1 Dadd1'
      <- add_fun1 Dadd6' Dadd1' X2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd5 Dadd7
      <- sum_add_corr7 Drep2 X1 Drep1 Dsum1 Dadd7
      <- sum_implies_leq Dsum1 Dleq1
      <- lt_leq_contradict Dlt Dleq1 Dfalse
      <- segment_of_part| Dfalse (mcons B1 N1 (section_valid SEG1 S1) H1) B2
            SEG1 Dsegof.
-mh :
   segment_of_part (segment_of_miss Dsegof Dadd1 Dadd2 Drep1)
      (mload_hit Dindex1 Dlt Drep2 Dadd3) Dindex2 Drep3 Dadd4 Dsegof1
      <- add_assoc Dadd2 Dadd1 Dadd5 Dadd6
      <- add_commute Dadd6 Dadd6'
      <- add_commute Dadd3 Dadd3'
      <- add_fun1 Dadd6' Dadd3' X2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd5 Dadd7
      <- sum_add_corr7 Drep1 X1 Drep2 Dsum1 Dadd7
      <- sum_implies_leq Dsum1 Dleq1
      <- lt_leq_contradict Dlt Dleq1 Dfalse
      <- segment_of_part| Dfalse (mcons B1 N1 (section_valid SEG1 S1) H1) B2
            SEG2 Dsegof1.
postpone_segment_of_stack :
   Pi H:memory. Pi A:binary wwb. Pi SEG:segment. Pi CI:corresp_info.
      Pi B1:binary wwb. Pi V1:val. Pi H1:memory.
      segment_of H A SEG -> impl_stack CI H B1 V1 H1 -> segment_of H1 A SEG
         -> type.
- :
   postpone_segment_of_stack Dml
      (impl_stack_ Dmext1 Dmext2 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12) Dml2
      <- segment_of_weaken Dmext2 Dml Dml1
      <- segment_of_weaken Dmext1 Dml1 Dml2.
postpone_segment_of_runfac :
   Pi H:memory. Pi A:binary wwb. Pi SEG:segment. Pi N1:nat. Pi N:nat.
      Pi IM:irfmap. Pi LM:locmap. Pi H':memory. Pi S2:string N1.
      segment_of H A SEG -> impl_runfacs N IM LM H H' S2 -> segment_of H' A SEG
         -> type.
- : postpone_segment_of_runfac Dml impl_runfacs_z Dml.
- :
   postpone_segment_of_runfac Dsegof (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4)
      Dsegof2
      <- postpone_segment_of_runfac Dsegof Dirfs Dsegof1
      <- segment_of_weaken Dmext Dsegof1 Dsegof2.
postpone_segment_of_got :
   Pi H:memory. Pi A:binary wwb. Pi SEG:segment. Pi CI:corresp_info.
      Pi H1:memory.
      segment_of H A SEG -> impl_got_ptr CI H H1 -> segment_of H1 A SEG -> type.
- :
   postpone_segment_of_got Dml (impl_got_ptr_ Dmext1 X1 X2 Dirfs) Dml2
      <- postpone_segment_of_runfac Dml Dirfs Dml1
      <- segment_of_weaken Dmext1 Dml1 Dml2.
can_mload :
   Pi Nlim:nat. Pi Wesp:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L1:loc. Pi R1:rfile. Pi PC1:pc. Pi L:loc. Pi A:binary wwb.
      Pi B1:bit. Pi N:nat. Pi B:binary wwb. Pi A1:binary wwb. Pi V123:val.
      Pi V1:val. Pi V23:val. Pi M:nat. Pi V2:val. Pi V3:val. Pi N1:nat.
      Pi S:string M.
      impl_machine (corresp_info_ Nlim Wesp LM IM) ST (mach H L1 R1 PC1)
         -> lookup_loc LM L A B1 -> represents N B -> add A B A1 zero
         -> hlookup H L V123 -> separate N V123 V1 V23 -> separate M V23 V2 V3
         -> nat_eq M (s N1) -> mload ST A1 M S
         -> impl_val (corresp_info_ Nlim Wesp LM IM) S V2 -> type.
- :
   can_mload (impl_ X4 X5 Digot X6 X7 Distack X8 X9 Dih) Dlookup Drep Dadd
      Dhlook Dsep1 Dsep2 nat_eq_ (mload_ Dindex2' Dml3 getmem_) Dival4
      <- can_mload* Dih Dlookup Dhlook X1 X2 Dml Dival1 X3
      <- can_index Dival1 Dsep1 Dindex1 Dival2 Dival3
      <- can_index Dival3 Dsep2 Dindex2 Dival4 Dival5
      <- index_implies_sum Dindex2 Dsum1
      <- sum_nonzero Dsum1 Dneq
      <- string_resp Dneq S1 S2 Dseq
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq Dindex1 Dindex1'
      <- mload*_part Dml Dindex1' Drep Dadd Dml1
      <- postpone_mload_stack Dml1 Distack Dml2
      <- postpone_mload_got Dml2 Digot Dml3
      <- index_resp nat_eq_ Dseq string_eq_ string_eq_ Dindex2 Dindex2'.
can_zload :
   Pi Nlimit:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi H:memory.
      Pi R:regs numregs. Pi FR:flags. Pi Aeip:binary wwb. Pi OR:oracle.
      Pi H1:heap. Pi L1:loc. Pi R1:rfile. Pi PC1:pc. Pi Z:val. Pi Nsz:nat.
      Pi Njunk:nat. Pi N:nat. Pi V1:val. Pi V2:val. Pi M:nat. Pi V:val.
      Pi V3:val. Pi Nact:nat. Pi Bact:binary wwb. Pi Aload:binary wwb.
      Pi Sout:string (s M).
      impl_machine (corresp_info_ Nlimit Astart LM IM) (state_ H R FR Aeip OR)
         (mach H1 L1 R1 PC1)
         -> zlookup R1 Z -> size Z Nsz -> sum Njunk Nsz Nlimit
         -> separate N Z V1 V2 -> separate (s M) V2 V V3 -> sum Njunk N Nact
         -> represents Nact Bact -> add Astart Bact Aload zero
         -> mload (state_ H R FR Aeip OR) Aload (s M) Sout
         -> impl_val (corresp_info_ Nlimit Astart LM IM) Sout V -> type.
- :
   can_zload Dimach zlookup_ Dsize Dsum1 Dsep1 Dsep2 Dsum2 Drep Dadd
      (mload_ Dindex2' Dml2 getmem_) Dival3
      <- extract_implement_parts Dimach X15 X16 X17 Distack X18 X19 Digot X20
            X21
      <- extract_stack Distack X5 X6 X7 X8 X9 Dindex Dival1 X10 X11 X12 X13 X14
            Dmext1 Dmext2
      <- can_index Dival1 Dsep1 Dindex1 X4 Dival2
      <- can_index Dival2 Dsep2 Dindex2 Dival3 X3
      <- index_implies_sum Dindex2 Dsum3
      <- sum_implies_leq Dsum3 Dleq1
      <- index_implies_sum Dindex1 Dsum4
      <- sum_commute Dsum4 Dsum5
      <- sum_implies_leq Dsum5 Dleq2
      <- leq_trans Dleq1 Dleq2 Dleq3
      <- str_val_size_corr' Sstack Dival1 Dsize Dnateq
      <- leq_resp nat_eq_ Dnateq Dleq3 Dleq4
      <- sum_commute Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq5
      <- leq_trans Dleq4 Dleq5 Dleq6
      <- leq_implies_sum Dsum6 Dleq6
      <- can_sum M N6 N7 Dsum7
      <- sum_fun3 Dsum6 (sum_s Dsum7) Dnateq1
      <- mextend_mload Dmext2 Dml X2
      <- string_resp Dnateq Sstack S8 Dseq
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq Dindex Dindex'
      <- index_implies_sum Dindex' Dsum8
      <- sum_fun1 Dsum8 Dsum1 Dnateq2
      <- string_resp Dnateq2 S7 S5 Dseq1
      <- index_resp Dnateq2 string_eq_ Dseq1 string_eq_ Dindex Dindex''
      <- index_compose' Dindex'' Dindex1 Dsum2 Dindex3 X1
      <- leq_implies_sum Dsum9 Dleq1
      <- can_sum M N4 N1 Dsum10
      <- sum_fun3 Dsum9 (sum_s Dsum10) Dnateq3
      <- string_resp Dnateq3 S3 S1 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex3 Dindex3'
      <- index_resp nat_eq_ Dseq2 string_eq_ string_eq_ Dindex2 Dindex2'
      <- mload*_part Dml Dindex3' Drep Dadd Dml1
      <- postpone_mload_got Dml1 Digot Dml2.
can_lookup_loc :
   Pi N1:nat. Pi B1:binary wwb. Pi LM:locmap. Pi IM1:irfmap. Pi M:memory.
      Pi H:heap. Pi L:loc. Pi V:val. Pi Lstart:binary wwb.
      impl_heap (corresp_info_ N1 B1 LM IM1) M H -> hlookup H L V
         -> lookup_loc LM L Lstart one' -> type.
-h :
   can_lookup_loc (impl_heap_cons X1 X2 X3 X4 X5 X6 Dlookup X7 X8) hlookup_hit
      Dlookup.
-m :
   can_lookup_loc (impl_heap_cons X1 X2 X3 X4 X5 X6 X7 X8 Diheap)
      (hlookup_miss Dhlook X9) Dlookup
      <- can_lookup_loc Diheap Dhlook Dlookup.
hlookup_size_rep :
   Pi N1:nat. Pi B1:binary wwb. Pi LM:locmap. Pi IM1:irfmap. Pi M:memory.
      Pi H:heap. Pi L:loc. Pi Lstart:binary wwb. Pi B2:bit. Pi V:val. Pi N:nat.
      Pi B:binary wwb. Pi Aend:binary wwb.
      impl_heap (corresp_info_ N1 B1 LM IM1) M H -> lookup_loc LM L Lstart B2
         -> hlookup H L V -> size V N -> represents N B
         -> add Lstart B Aend zero -> type.
-h :
   hlookup_size_rep (impl_heap_cons X1 X2 X3 Dadd Drep Dival Dlook X4 X5) Dlook1
      hlookup_hit Dsize Drep Dadd1
      <- str_val_size_corr S1 Dival Dsize
      <- lookup_loc_fun Dlook Dlook1 Daeq
      <- add_resp Daeq binary_eq_ binary_eq_ bit_eq_ Dadd Dadd1.
-m :
   hlookup_size_rep (impl_heap_cons X1 X2 X3 X4 X5 X6 X7 X8 Diheap) Dlook1
      (hlookup_miss Dhlook X9) Dsize Drep Dadd
      <- hlookup_size_rep Diheap Dlook1 Dhlook Dsize Drep Dadd.
wf_memory_load :
   Pi B1:binary wwb. Pi M:memory. Pi N:nat. Pi A:binary wwb. Pi S:string N.
      Pi B:binary wwb. Pi A1:binary wwb.
      memory_wf B1 M -> mload* M A S -> represents N B -> add A B A1 zero
         -> type.
- :
   wf_memory_load (memory_wf_cons Dmwf Dadd1 Drep1 Dnateq1 Dadd2)
      (mload_hit Dindex1 Dlt1 Drep2 Dadd3) Drep4 Dadd12
      <- index_implies_sum Dindex1 Dsum1
      <- sum_add_corr9 Drep3 Drep4 Drep1 Dsum1 Dadd4
      <- represents_fun2 Drep3 Drep2 Dbeq1
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd4 Dadd5
      <- add_commute Dadd5 Dadd6
      <- add_commute Dadd1 Dadd7
      <- add_assoc Dadd6 Dadd7 Dadd8 Dadd9
      <- add_commute Dadd8 Dadd10
      <- add_commute Dadd9 Dadd11
      <- add_fun3 Dadd10 Dadd3 X1 Dbeq2
      <- add_resp Dbeq2 binary_eq_ binary_eq_ bit_eq_ Dadd11 Dadd12.
- :
   wf_memory_load (memory_wf_cons Dmwf Dadd1 Drep1 Dnateq1 Dadd2)
      (mload_miss Dml Dadd3 Dadd4 Drep2) Drep3 Dadd5
      <- wf_memory_load Dmwf Dml Drep3 Dadd5.
mload*_last :
   Pi N:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N. Pi H1:memory.
      Pi N1:nat. Pi S1:string N1. Pi N2:nat. Pi S2:string N2.
      mstore* H A S H1 -> mload* H1 A S1 -> index N S1 S S2 -> type.
- :
   mload*_last (mstore_hit Dindex1 Dindex2 Dindex3 Dindex4 Dlt Drep Dadd)
      (mload_hit Dindex1 Dlt Drep Dadd) Dindex2.
- :
   mload*_last (mstore_miss Dmst Dadd1 Dadd2 Drep)
      (mload_miss Dml Dadd1 Dadd2 Drep) Dindex
      <- mload*_last Dmst Dml Dindex.
mload_last :
   Pi N:nat. Pi ST:state. Pi A:binary wwb. Pi S:string N. Pi ST1:state.
      mstore ST A S ST1 -> mload ST1 A N S -> type.
- :
   mload_last (mstore_ putmem_ Dmst getmem_) (mload_ Dindex Dml getmem_)
      <- mload*_last Dmst Dml Dindex.
can_mstore** :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi SEG:segment. Pi S:string N1.
      Pi H1:memory. Pi N2:nat. Pi M:nat. Pi S1:string M. Pi S23:string N2.
      Pi N3:nat. Pi N:nat. Pi S2:string (s N). Pi S3:string N3. Pi N4:nat.
      Pi S23':string N4. Pi S2':string (s N). Pi N5:nat. Pi S':string N5.
      Pi B:binary wwb. Pi A1:binary wwb. Pi H1n:memory.
      mextend* H A (section_valid SEG S) H1 -> index M S S1 S23
         -> index (s N) S23 S2 S3 -> index (s N) S23' S2' S3
         -> index M S' S1 S23' -> represents M B -> add A B A1 zero
         -> mstore* H1 A1 S2' H1n -> mextend* H A (section_valid SEG S') H1n
         -> type.
-n :
   can_mstore** mextend_nil Dindex1 Dindex2 Dindex3 Dindex4 Drep Dadd
      (mstore_hit Dindex4'' Dindex3 Dindex2 Dindex1 Dlt2 Drep Dadd) Dmext
      <- index_implies_sum Dindex3 Dsum1
      <- can_sum N N3 N23'-1 Dsum2
      <- sum_fun3 Dsum1 (sum_s Dsum2) Dnateq1
      <- string_resp Dnateq1 S23' S23'' Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dindex4 Dindex4'
      <- index_implies_sum Dindex4' Dsum3
      <- sum_commute Dsum3 Dsum3'
      <- can_sum N23'-1 M N123'-1 Dsum4
      <- sum_fun3 Dsum3' (sum_s Dsum4) Dnateq2
      <- index_implies_sum Dindex2 Dsum5
      <- sum_fun3 Dsum5 Dsum1 Dnateq3
      <- string_resp Dnateq3 S23 S23''' Dseq3
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq3 Dindex1 Dindex1'
      <- index_implies_sum Dindex1' Dsum6
      <- nat_eq_symm Dnateq1 Dnateq1'
      <- sum_resp nat_eq_ Dnateq1' nat_eq_ Dsum3 Dsum3''
      <- sum_fun3 Dsum3'' Dsum6 Dnateq4
      <- string_resp Dnateq4 S' S'' Dseq2
      <- index_resp nat_eq_ Dseq2 string_eq_ string_eq_ Dindex4 Dindex4''
      <- string_eq_symm Dseq2 Dseq2'
      <- section_valid_eq_cons Dseq2' SEG1 Dsecteq
      <- mextend*_resp memory_eq_ binary_eq_ Dsecteq memory_eq_ mextend_nil
            Dmext
      <- sum_implies_lt Dsum3 Dlt1
      <- lt_resp nat_eq_ Dnateq4 Dlt1 Dlt2.
-b :
   can_mstore** (mextend_between Dadd1 Dadd2 Drep1) Dindex1 Dindex2 Dindex3
      Dindex4 Drep2 Dadd3
      (mstore_hit Dindex4'' Dindex3 Dindex2 Dindex1 Dlt2 Drep2 Dadd3) Dmext
      <- index_implies_sum Dindex3 Dsum1
      <- can_sum N N3 N23'-1 Dsum2
      <- sum_fun3 Dsum1 (sum_s Dsum2) Dnateq1
      <- string_resp Dnateq1 S23' S23'' Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dindex4 Dindex4'
      <- index_implies_sum Dindex4' Dsum3
      <- sum_commute Dsum3 Dsum3'
      <- can_sum N23'-1 M N123'-1 Dsum4
      <- sum_fun3 Dsum3' (sum_s Dsum4) Dnateq2
      <- index_implies_sum Dindex2 Dsum5
      <- sum_fun3 Dsum5 Dsum1 Dnateq3
      <- string_resp Dnateq3 S23 S23''' Dseq3
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq3 Dindex1 Dindex1'
      <- index_implies_sum Dindex1' Dsum6
      <- nat_eq_symm Dnateq1 Dnateq1'
      <- sum_resp nat_eq_ Dnateq1' nat_eq_ Dsum3 Dsum3''
      <- sum_fun3 Dsum3'' Dsum6 Dnateq4
      <- string_resp Dnateq4 S' S'' Dseq2
      <- index_resp nat_eq_ Dseq2 string_eq_ string_eq_ Dindex4 Dindex4''
      <- string_eq_symm Dseq2 Dseq2'
      <- section_valid_eq_cons Dseq2' SEG1 Dsecteq
      <- mextend*_resp memory_eq_ binary_eq_ Dsecteq memory_eq_
            (mextend_between Dadd1 Dadd2 Drep1) Dmext
      <- sum_implies_lt Dsum3 Dlt1
      <- lt_resp nat_eq_ Dnateq4 Dlt1 Dlt2.
-c :
   can_mstore** (mextend_cons Dmext Dadd1 Dadd2 Drep1) Dindex1 Dindex2 Dindex3
      Dindex4 Drep2 Dadd3 (mstore_miss Dmst Dadd4 Dadd2 Drep1)
      (mextend_cons Dmext1 Dadd1 Dadd2 Drep1)
      <- can_mstore** Dmext Dindex1 Dindex2 Dindex3 Dindex4 Drep2 Dadd3 Dmst
            Dmext1
      <- add_assoc Dadd1 Dadd3 X1 Dadd4.
mstore*_weaken :
   Pi N:nat. Pi H:memory. Pi A:binary wwb. Pi SECT:section N. Pi H1:memory.
      Pi N1:nat. Pi A1:binary wwb. Pi S:string N1. Pi H2:memory. Pi H3:memory.
      mextend* H A SECT H1 -> mstore* H A1 S H2 -> mextend* H2 A SECT H3
         -> mstore* H1 A1 S H3 -> type.
-cch :
   mstore*_weaken (mextend_cons Dmext Dadd4 Dadd5 Drep2)
      (mstore_hit Dindex1 Dindex2 Dindex3 Dindex4 Dlt Drep3 Dadd6)
      (mextend_cons Dmext Dadd4 Dadd5 Drep2)
      (mstore_hit Dindex1 Dindex2 Dindex3 Dindex4 Dlt Drep3 Dadd6).
-bbh :
   mstore*_weaken (mextend_between Dadd3 Dadd4 Drep1)
      (mstore_hit Dindex1 Dindex2 Dindex3 Dindex4 Dlt Drep2 Dadd5)
      (mextend_between Dadd3 Dadd4 Drep1)
      (mstore_miss (mstore_hit Dindex1 Dindex2 Dindex3 Dindex4 Dlt Drep2 Dadd5)
          Dadd6 Dadd4 Drep1)
      <- add_assoc Dadd3 Dadd5 X1 Dadd6.
-ccm :
   mstore*_weaken (mextend_cons Dmext Dadd4 Dadd5 Drep2)
      (mstore_miss Dmst Dadd6 Dadd7 Drep3)
      (mextend_cons Dmext1 Dadd4 Dadd5 Drep2)
      (mstore_miss Dmst1 Dadd6 Dadd7 Drep3)
      <- mstore*_weaken Dmext Dmst Dmext1 Dmst1.
-bbm :
   mstore*_weaken (mextend_between Dadd3 Dadd4 Drep1)
      (mstore_miss Dmst Dadd5 Dadd6 Drep2) (mextend_between Dadd3 Dadd4 Drep1)
      (mstore_miss (mstore_miss Dmst Dadd5 Dadd6 Drep2) Dadd8 Dadd4 Drep1)
      <- add_assoc Dadd3 Dadd6 X2 Dadd7
      <- add_assoc Dadd7 Dadd5 X1 Dadd8.
can_mstore| :
   Pi M:nat. Pi B:binary wwb. Pi Astore:binary wwb. Pi Hc':memory.
      false
         -> Pi N:nat. Pi Astart:binary wwb. Pi Hc:memory. Pi S:string M.
                Pi H':heap. Pi CI:corresp_info.
                represents N B -> add Astart B Astore zero
                   -> mstore* Hc Astore S Hc' -> impl_heap CI Hc' H' -> type.
can_mstore* :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi Hc:memory.
      Pi H:heap. Pi L:loc. Pi Astart:binary wwb. Pi B1:bit. Pi V123:val.
      Pi N:nat. Pi V1:val. Pi V23:val. Pi M:nat. Pi V2:val. Pi V3:val.
      Pi S:string (s M). Pi V2':val. Pi V23':val. Pi V123':val. Pi H':heap.
      Pi B:binary wwb. Pi Astore:binary wwb. Pi Hc':memory.
      impl_heap (corresp_info_ Nlim Sstart LM IM) Hc H
         -> lookup_loc LM L Astart B1 -> hlookup H L V123
         -> separate N V123 V1 V23 -> separate (s M) V23 V2 V3
         -> impl_val (corresp_info_ Nlim Sstart LM IM) S V2'
         -> append V2' V3 V23' -> append V1 V23' V123' -> hupdate H L V123' H'
         -> represents N B -> add Astart B Astore zero
         -> mstore* Hc Astore S Hc'
         -> impl_heap (corresp_info_ Nlim Sstart LM IM) Hc' H' -> type.
-hh :
   can_mstore*
      (impl_heap_cons Dmextend Diseg Dsegof Dadd Drep Dival Dlook Dgoodh Diheap)
      Dlook' hlookup_hit Dsep1 Dsep2 Divaln Dapp1 Dapp2 (hupdate_hit X1) Drep1
      Dadd1 Dmst
      (impl_heap_cons Dmextend3 Diseg Dsegof Dadd Drep Divalalln Dlook Dgoodh
          Diheap)
      <- lookup_loc_fun Dlook Dlook' Dbeq1
      <- mextend*_resp memory_eq_ Dbeq1 section_eq_ memory_eq_ Dmextend
            Dmextend1
      <- can_index Dival Dsep1 Dindex1 Dival1 Dival23
      <- can_index Dival23 Dsep2 Dindex2 Dival2 Dival3
      <- str_val_size_corr S8 Divaln Dsize1
      <- separate_size Dsep2 Dsize2
      <- index_implies_sum Dindex2 Dsum1
      <- append_is_separate Dapp1 Dsize1 Dsep2n
      <- concat_str_val Divaln Dival3 Dsep2n Dsum1 Dival23n Dindex2n
      <- separate_size Dsep1 Dsize3
      <- index_implies_sum Dindex1 Dsum3
      <- append_is_separate Dapp2 Dsize3 Dsep1n
      <- concat_str_val Dival1 Dival23n Dsep1n Dsum3 Divalalln Dindex1n
      <- sum_implies_leq Dsum3 Dleq1
      <- can_represents Dleq1 Drep Drep1
      <- can_represents1 B2 N6 Drep2
      <- sum_add_corr3 Drep2 Drep Drep3 Dsum4 Dadd
      <- can_sum N6 N3 N7 Dsum5
      <- leq_reflex N6 Dleq2
      <- sum_leq Dsum5 Dsum4 Dleq2 Dleq1 Dleq3
      <- can_represents Dleq3 Drep3 Drep4
      <- represents_resp nat_eq_ Dbeq1 Drep2 Drep2'
      <- sum_add_corr Drep2' Drep1 Drep4 Dsum5 Dadd1
      <- can_mstore** Dmextend1 Dindex1 Dindex2 Dindex2n Dindex1n Drep1 Dadd1
            Dmst Dmextend2
      <- binary_eq_symm Dbeq1 Dbeq1'
      <- mextend*_resp memory_eq_ Dbeq1' section_eq_ memory_eq_ Dmextend2
            Dmextend3.
-mm :
   can_mstore*
      (impl_heap_cons Dmextend Diseg Dsegof Dadd0 Drep Dival Dlook Dgood Diheap)
      Dlook' (hlookup_miss Dhlook X1) Dsep1 Dsep2 Divaln Dapp1 Dapp2
      (hupdate_miss Dhupd X2) Drep1 Dadd1 Dmst1
      (impl_heap_cons Dmextend1 Diseg Dsegof Dadd0 Drep Dival Dlook Dgood1
          Diheap1)
      <- can_mstore* Diheap Dlook' Dhlook Dsep1 Dsep2 Divaln Dapp1 Dapp2 Dhupd
            Drep1 Dadd1 Dmst Diheap1
      <- mstore*_weaken Dmextend Dmst Dmextend1 Dmst1
      <- hupdate_preserves_goodheap Dgood Dhupd Dgood1.
-hm :
   can_mstore* X1 X2 hlookup_hit X3 X4 X5 X6 X7 (hupdate_miss X8 (loc_lt_ Dlt))
      Drep Dadd Dmst Diheap
      <- lt_contradict Dlt Dfalse
      <- can_mstore| Dfalse N2 B3 H2 S1 (hcons (lc N3) V1 H3)
            (corresp_info_ N4 B4 LM1 IM1) Drep Dadd Dmst Diheap.
-mh :
   can_mstore* X1 X2 (hlookup_miss X3 (loc_lt_ Dlt)) X4 X5 X6 X7 X8
      (hupdate_hit X9) Drep Dadd Dmst Diheap
      <- lt_contradict Dlt Dfalse
      <- can_mstore| Dfalse N2 B3 H2 S1 (hcons (lc N3) V1 H3)
            (corresp_info_ N4 B4 LM1 IM1) Drep Dadd Dmst Diheap.
postpone_stack_absent :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi H1:memory.
      mstore* H A S H1 -> stack_absent H -> stack_absent H1 -> type.
-hc :
   postpone_stack_absent (mstore_hit X1 X2 X3 X4 X5 X6 X7)
      (stack_absent_cs Dabs) (stack_absent_cs Dabs).
-hh :
   postpone_stack_absent (mstore_hit X1 X2 X3 X4 X5 X6 X7)
      (stack_absent_hs Dabs) (stack_absent_hs Dabs).
-mc :
   postpone_stack_absent (mstore_miss Dmst X1 X2 X3) (stack_absent_cs Dabs)
      (stack_absent_cs Dabs1)
      <- postpone_stack_absent Dmst Dabs Dabs1.
-mh :
   postpone_stack_absent (mstore_miss Dmst X1 X2 X3) (stack_absent_hs Dabs)
      (stack_absent_hs Dabs1)
      <- postpone_stack_absent Dmst Dabs Dabs1.
-mr :
   postpone_stack_absent (mstore_miss Dmst X1 X2 X3)
      (stack_absent_reserved Dabs) (stack_absent_reserved Dabs1)
      <- postpone_stack_absent Dmst Dabs Dabs1.
postpone_mstore_stack :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi H1:memory.
      Pi CI:corresp_info. Pi Wesp:binary wwb. Pi V:val. Pi H2:memory.
      Pi H3:memory.
      mstore* H A S H1 -> impl_stack CI H Wesp V H2 -> mstore* H2 A S H3
         -> impl_stack CI H1 Wesp V H3 -> type.
- :
   postpone_mstore_stack Dmst
      (impl_stack_ Dmext1 Dmext2 Dnotin2 Dnotin1 Dabs Dreptr Daddtr Dival Dindex
          Drep1 Dadd1 Dadd2 Dadd3 Drep2)
      Dmst2
      (impl_stack_ Dmext1' Dmext2' Dnotin2 Dnotin1 Dabs1 Dreptr Daddtr Dival
          Dindex Drep1 Dadd1 Dadd2 Dadd3 Drep2)
      <- mstore*_weaken Dmext2 Dmst Dmext2' Dmst1
      <- mstore*_weaken Dmext1 Dmst1 Dmext1' Dmst2
      <- postpone_stack_absent Dmst Dabs Dabs1.
postpone_mstore_runfac :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi H1:memory.
      Pi N2:nat. Pi N:nat. Pi IM:irfmap. Pi LM:locmap. Pi H':memory.
      Pi S2:string N2. Pi H1':memory.
      mstore* H A S H1 -> impl_runfacs N IM LM H H' S2 -> mstore* H' A S H1'
         -> impl_runfacs N IM LM H1 H1' S2 -> type.
- : postpone_mstore_runfac Dmst impl_runfacs_z Dmst impl_runfacs_z.
- :
   postpone_mstore_runfac Dmst
      (impl_runfacs_s Dindex Dimp Dmext Dirfs Dnotin Drof) Dmst2
      (impl_runfacs_s Dindex Dimp Dmext1 Dirfs1 Dnotin Drof)
      <- postpone_mstore_runfac Dmst Dirfs Dmst1 Dirfs1
      <- mstore*_weaken Dmext Dmst1 Dmext1 Dmst2.
postpone_mstore_got :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi H1:memory.
      Pi CI:corresp_info. Pi H2:memory. Pi H3:memory.
      mstore* H A S H1 -> impl_got_ptr CI H H2 -> mstore* H2 A S H3
         -> impl_got_ptr CI H1 H3 -> type.
- :
   postpone_mstore_got Dmst (impl_got_ptr_ Dmext1 Dnotin1 Dlookg Dirfs) Dmst2
      (impl_got_ptr_ Dmext2 Dnotin1 Dlookg Dirfs1)
      <- postpone_mstore_runfac Dmst Dirfs Dmst1 Dirfs1
      <- mstore*_weaken Dmext1 Dmst1 Dmext2 Dmst2.
mstore_preserves_order :
   Pi B:binary wwb. Pi H:memory. Pi N1:nat. Pi A:binary wwb. Pi S:string N1.
      Pi H1:memory. memory_wf B H -> mstore* H A S H1 -> memory_wf B H1 -> type.
-h :
   mstore_preserves_order (memory_wf_cons Dorder Dadd1 Drep Dneq Dadd2)
      (mstore_hit X1 X2 X3 X4 X5 X6 X7)
      (memory_wf_cons Dorder Dadd1 Drep Dneq Dadd2).
-m :
   mstore_preserves_order (memory_wf_cons Dorder Dadd1 Drep Dneq Dadd2)
      (mstore_miss Dmst X1 X2 X3) (memory_wf_cons Dorder1 Dadd1 Drep Dneq Dadd2)
      <- mstore_preserves_order Dorder Dmst Dorder1.
in_memory_update :
   Pi A:binary wwb. Pi M:memory. Pi N1:nat. Pi B1:binary wwb. Pi S1:string N1.
      Pi M1:memory.
      in_memory A M -> mstore* M B1 S1 M1 -> in_memory A M1 -> type.
- :
   in_memory_update in_memory_hit (mstore_hit X1 X2 X3 X4 X5 X6 X7)
      in_memory_hit.
- : in_memory_update in_memory_hit (mstore_miss X1 X2 X3 X4) in_memory_hit.
- :
   in_memory_update (in_memory_miss Dapm) (mstore_hit X1 X2 X3 X4 X5 X6 X7)
      (in_memory_miss Dapm).
- :
   in_memory_update (in_memory_miss Dapm) (mstore_miss Dmst X1 X2 X3)
      (in_memory_miss Dapm1)
      <- in_memory_update Dapm Dmst Dapm1.
lm_present_update :
   Pi LM:locmap. Pi M:memory. Pi N1:nat. Pi B1:binary wwb. Pi S1:string N1.
      Pi M1:memory.
      lm_present LM M -> mstore* M B1 S1 M1 -> lm_present LM M1 -> type.
- : lm_present_update lm_present_nil X1 lm_present_nil.
- :
   lm_present_update (lm_present_one Dlpm Dpres) Dmst
      (lm_present_one Dlpm1 Dpres1)
      <- in_memory_update Dpres Dmst Dpres1
      <- lm_present_update Dlpm Dmst Dlpm1.
- :
   lm_present_update (lm_present_zero Dlpm) Dmst (lm_present_zero Dlpm1)
      <- lm_present_update Dlpm Dmst Dlpm1.
lm_heap_corr_update :
   Pi LM:locmap. Pi H:heap. Pi L1:loc. Pi V1:val. Pi H1:heap.
      lm_heap_corr LM H -> hupdate H L1 V1 H1 -> lm_heap_corr LM H1 -> type.
- : lm_heap_corr_update lm_heap_corr_nil X1 lm_heap_corr_nil.
- :
   lm_heap_corr_update (lm_heap_corr_one Dlph) (hupdate_hit X1)
      (lm_heap_corr_one Dlph).
- :
   lm_heap_corr_update (lm_heap_corr_one Dlph) (hupdate_miss Dhupd X1)
      (lm_heap_corr_one Dlph1)
      <- lm_heap_corr_update Dlph Dhupd Dlph1.
- :
   lm_heap_corr_update (lm_heap_corr_zero Dlph) Dhupd (lm_heap_corr_zero Dlph1)
      <- lm_heap_corr_update Dlph Dhupd Dlph1.
corresp_info_valid_update :
   Pi CI:corresp_info. Pi L:loc. Pi M:memory. Pi H:heap. Pi N1:nat.
      Pi B1:binary wwb. Pi S1:string N1. Pi M1:memory. Pi L1:loc. Pi V1:val.
      Pi H1:heap.
      corresp_info_valid CI L M H -> mstore* M B1 S1 M1 -> hupdate H L1 V1 H1
         -> corresp_info_valid CI L M1 H1 -> type.
- :
   corresp_info_valid_update (corresp_info_valid_ Dlph Dlpm Dlwf) Dmst Dhupd
      (corresp_info_valid_ Dlph1 Dlpm1 Dlwf)
      <- lm_present_update Dlpm Dmst Dlpm1
      <- lm_heap_corr_update Dlph Dhupd Dlph1.
corresp_info_valid_update' :
   Pi CI:corresp_info. Pi L:loc. Pi M:memory. Pi H:heap. Pi N1:nat.
      Pi B1:binary wwb. Pi S1:string N1. Pi M1:memory.
      corresp_info_valid CI L M H -> mstore* M B1 S1 M1
         -> corresp_info_valid CI L M1 H -> type.
- :
   corresp_info_valid_update' (corresp_info_valid_ Dlph Dlpm Dlwf) Dmst
      (corresp_info_valid_ Dlph Dlpm1 Dlwf)
      <- lm_present_update Dlpm Dmst Dlpm1.
can_mstore :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi Lalloc:loc. Pi R:rfile. Pi PC:pc. Pi L:loc.
      Pi Astart:binary wwb. Pi B1:bit. Pi V123:val. Pi N:nat. Pi V1:val.
      Pi V23:val. Pi M:nat. Pi V2:val. Pi V3:val. Pi S:string (s M). Pi V2':val.
      Pi V23':val. Pi V123':val. Pi H':heap. Pi B:binary wwb.
      Pi Astore:binary wwb. Pi ST':state.
      impl_machine (corresp_info_ Nlim Sstart LM IM) ST (mach H Lalloc R PC)
         -> lookup_loc LM L Astart B1 -> hlookup H L V123
         -> separate N V123 V1 V23 -> separate (s M) V23 V2 V3
         -> impl_val (corresp_info_ Nlim Sstart LM IM) S V2'
         -> append V2' V3 V23' -> append V1 V23' V123' -> hupdate H L V123' H'
         -> represents N B -> add Astart B Astore zero -> mstore ST Astore S ST'
         -> impl_machine (corresp_info_ Nlim Sstart LM IM) ST'
               (mach H' Lalloc R PC) -> type.
- :
   can_mstore Dimach Dlookup Dhlook Dsep1 Dsep2 Divaln Dapp1 Dapp2 Dhupd Drep
      Dadd (mstore_ putmem_ Dmst2 getmem_)
      (impl_ Dicv1 Dorder1 Digot1 Dipc Diconds Distack1 Dimp Dirfile Diheap1)
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Diconds Dipc
            Digot Dorder Dicv
      <- can_mstore* Diheap Dlookup Dhlook Dsep1 Dsep2 Divaln Dapp1 Dapp2 Dhupd
            Drep Dadd Dmst Diheap1
      <- postpone_mstore_stack Dmst Distack Dmst1 Distack1
      <- postpone_mstore_got Dmst1 Digot Dmst2 Digot1
      <- mstore_preserves_order Dorder Dmst2 Dorder1
      <- corresp_info_valid_update Dicv Dmst2 Dhupd Dicv1.
false_implies_mstore* :
   Pi N:nat.
      false
         -> Pi H:memory. Pi A:binary wwb. Pi S:string N. Pi H':memory.
                mstore* H A S H' -> type.
mstore*_last_valid :
   Pi N:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N. Pi H1:memory.
      Pi S1:string N. Pi H2:memory.
      mstore* H A S H1 -> mstore* H A S1 H2 -> mstore* H2 A S H1 -> type.
- :
   mstore*_last_valid
      (mstore_hit Dindex1 Dindex2 Dindex3 Dindex4 Dlt1 Drep1 Dadd1)
      (mstore_hit Dindex5 Dindex6 Dindex7 Dindex8 Dlt2 Drep2 Dadd2)
      (mstore_hit Dindex13 Dindex12 Dindex6 Dindex9 Dlt1 Drep1 Dadd1)
      <- add_commute Dadd1 Dadd1'
      <- add_commute Dadd2 Dadd2'
      <- add_fun1 Dadd2' Dadd1' X1 Dbeq1
      <- represents_resp nat_eq_ Dbeq1 Drep2 Drep2'
      <- represents_fun1 Drep2' Drep1 Dnateq1
      <- string_resp Dnateq1 Sinit2 S1 Dseq1
      <- index_resp Dnateq1 string_eq_ Dseq1 string_eq_ Dindex5 Dindex9
      <- index_resp Dnateq1 string_eq_ Dseq1 string_eq_ Dindex8 Dindex10
      <- index_fun Dindex4 Dindex10 Dseq2 Dseq3
      <- index_resp nat_eq_ Dseq3 string_eq_ string_eq_ Dindex3 Dindex11
      <- index_fun Dindex11 Dindex7 Dseq4 Dseq5
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq5 Dindex2 Dindex12
      <- index_resp nat_eq_ string_eq_ Dseq2 string_eq_ Dindex1 Dindex13.
- :
   mstore*_last_valid (mstore_miss Dmst1 Dadd1 Dadd2 Drep1)
      (mstore_miss Dmst2 Dadd3 Dadd4 Drep2)
      (mstore_miss Dmst3 Dadd1 Dadd2 Drep1)
      <- mstore*_last_valid Dmst1 Dmst2 Dmst3.
- :
   mstore*_last_valid (mstore_miss Dmst1 Dadd1 Dadd2 Drep1)
      (mstore_hit X3 X4 X5 X6 Dlt Drep2 Dadd3) Dmst2
      <- add_assoc Dadd2 Dadd1 Dadd4 Dadd5
      <- add_commute Dadd5 Dadd6
      <- add_commute Dadd3 Dadd7
      <- add_fun1 Dadd6 Dadd7 X2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd4 Dadd8
      <- sum_add_corr7 Drep1 X1 Drep2 Dsum1 Dadd8
      <- sum_implies_leq Dsum1 Dleq1
      <- lt_leq_contradict Dlt Dleq1 Dfalse
      <- false_implies_mstore* Dfalse (mcons B1 N2 (section_valid SEG1 S1) H1)
            B2 S2 (mcons B1 N2 (section_valid SEG1 S3) H2) Dmst2.
- :
   mstore*_last_valid (mstore_hit X3 X4 X5 X6 Dlt Drep2 Dadd3)
      (mstore_miss Dmst1 Dadd1 Dadd2 Drep1) Dmst2
      <- add_assoc Dadd2 Dadd1 Dadd4 Dadd5
      <- add_commute Dadd5 Dadd6
      <- add_commute Dadd3 Dadd7
      <- add_fun1 Dadd6 Dadd7 X2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd4 Dadd8
      <- sum_add_corr7 Drep1 X1 Drep2 Dsum1 Dadd8
      <- sum_implies_leq Dsum1 Dleq1
      <- lt_leq_contradict Dlt Dleq1 Dfalse
      <- false_implies_mstore* Dfalse (mcons B1 N2 (section_valid SEG1 S1) H1)
            B2 S2 (mcons B1 N2 (section_valid SEG1 S3) H2) Dmst2.
mstore_last_valid :
   Pi N:nat. Pi ST:state. Pi A:binary wwb. Pi S:string N. Pi ST1:state.
      Pi S1:string N. Pi ST2:state.
      mstore ST A S ST1 -> mstore ST A S1 ST2 -> mstore ST2 A S ST1 -> type.
- :
   mstore_last_valid (mstore_ putmem_ Dmst1 getmem_)
      (mstore_ putmem_ Dmst2 getmem_) (mstore_ putmem_ Dmst3 getmem_)
      <- mstore*_last_valid Dmst1 Dmst2 Dmst3.
mextend_order :
   Pi N1:nat. Pi M1:memory. Pi B1:binary wwb. Pi SECT1:section N1. Pi M2:memory.
      Pi A:binary wwb.
      mextend* M1 B1 SECT1 M2 -> memory_wf A M2 -> memory_wf A M1 -> type.
-n : mextend_order mextend_nil X1 memory_wf_nil.
-b :
   mextend_order (mextend_between X3 X4 X5)
      (memory_wf_cons (memory_wf_cons Dorder Daddi1 Drepi Dneq Daddi2) Daddo1
          Drepo X6 Daddo2)
      (memory_wf_cons Dorder Daddi1 Drepi Dneq Dadd4)
      <- add_assoc Daddo2 Daddo1 X2 Dadd3
      <- add_assoc Dadd3 Daddi2 X1 Dadd4.
-c :
   mextend_order (mextend_cons Dmext X1 X2 X3)
      (memory_wf_cons Dorder Dadd1 Drep1 Dneq Dadd2)
      (memory_wf_cons Dorder1 Dadd1 Drep1 Dneq Dadd2)
      <- mextend_order Dmext Dorder Dorder1.
impl_runfacs_order :
   Pi N1:nat. Pi N:nat. Pi IM:irfmap. Pi LM:locmap. Pi H1:memory. Pi H2:memory.
      Pi S2:string N1. Pi B:binary wwb.
      impl_runfacs N IM LM H1 H2 S2 -> memory_wf B H2 -> memory_wf B H1 -> type.
- : impl_runfacs_order impl_runfacs_z D D.
- :
   impl_runfacs_order (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) Dmwf1 Dmwf3
      <- mextend_order Dmext Dmwf1 Dmwf2
      <- impl_runfacs_order Dirfs Dmwf2 Dmwf3.
impl_got_ptr_order :
   Pi CI:corresp_info. Pi H1:memory. Pi H2:memory. Pi B:binary wwb.
      impl_got_ptr CI H1 H2 -> memory_wf B H2 -> memory_wf B H1 -> type.
- :
   impl_got_ptr_order (impl_got_ptr_ Dmext1 X1 X2 Dirfs) Dorder1 Dorder3
      <- mextend_order Dmext1 Dorder1 Dorder2
      <- impl_runfacs_order Dirfs Dorder2 Dorder3.
impl_stack_order :
   Pi CI:corresp_info. Pi H1:memory. Pi A:binary wwb. Pi V:val. Pi H2:memory.
      Pi B:binary wwb.
      impl_stack CI H1 A V H2 -> memory_wf B H2 -> memory_wf B H1 -> type.
- :
   impl_stack_order
      (impl_stack_ Dmext1 Dmext2 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12) Dorder1
      Dorder3
      <- mextend_order Dmext1 Dorder1 Dorder2
      <- mextend_order Dmext2 Dorder2 Dorder3.
locmap_extend : locmap -> loc -> binary wwb -> locmap -> type.
locmap_extend_nil :
   locmap_extend locmap_nil L A (locmap_cons one' L A locmap_nil).
locmap_extend_before :
   locmap_extend (locmap_cons BIT L1 A1 LM) L A
      (locmap_cons one' L A (locmap_cons BIT L1 A1 LM))
      <- loc_lt L1 L
      <- notin_lm A (locmap_cons BIT L1 A1 LM).
locmap_extend_cons :
   locmap_extend (locmap_cons BIT L1 A1 LM1) L A (locmap_cons BIT L1 A1 LM2)
      <- binary_neq A1 A
      <- loc_lt L L1
      <- notin_lm A1 LM1
      <- locmap_extend LM1 L A LM2.
notin_lm_extend :
   Pi B:binary wwb. Pi LM1:locmap. Pi L1:loc. Pi A1:binary wwb. Pi LM2:locmap.
      notin_lm B LM1 -> locmap_extend LM1 L1 A1 LM2 -> binary_neq B A1
         -> notin_lm B LM2 -> type.
- :
   notin_lm_extend X1 locmap_extend_nil Dbneq (notin_lm_one notin_lm_nil Dbneq).
- :
   notin_lm_extend Dnotin1 (locmap_extend_before Dnotin2 Dloclt) Dbneq
      (notin_lm_one Dnotin1 Dbneq).
- :
   notin_lm_extend (notin_lm_one Dnotin1 Dbneq1)
      (locmap_extend_cons Dlext X1 X2 Dbneq2) Dbneq3
      (notin_lm_one Dnotin2 Dbneq1)
      <- notin_lm_extend Dnotin1 Dlext Dbneq3 Dnotin2.
- :
   notin_lm_extend (notin_lm_zero Dnotin1)
      (locmap_extend_cons Dlext X1 X2 Dbneq2) Dbneq3 (notin_lm_zero Dnotin2)
      <- notin_lm_extend Dnotin1 Dlext Dbneq3 Dnotin2.
locmap_extend_lookup :
   Pi LM:locmap. Pi L:loc. Pi A:binary wwb. Pi LM1:locmap.
      locmap_extend LM L A LM1 -> lookup_loc LM1 L A one' -> type.
- : locmap_extend_lookup locmap_extend_nil lookup_loc_z.
- : locmap_extend_lookup (locmap_extend_before Dloclt X1) lookup_loc_z.
- :
   locmap_extend_lookup (locmap_extend_cons Dlext Dnotin Dloclt Dbneq)
      (lookup_loc_s Dlook Dloclt)
      <- locmap_extend_lookup Dlext Dlook.
lookup_loc_extend :
   Pi LM:locmap. Pi L:loc. Pi A:binary wwb. Pi BIT:bit. Pi L1:loc.
      Pi A1:binary wwb. Pi LM1:locmap.
      lookup_loc LM L A BIT -> locmap_extend LM L1 A1 LM1
         -> lookup_loc LM1 L A BIT -> type.
- :
   lookup_loc_extend lookup_loc_z (locmap_extend_before Dnotin Dloclt)
      (lookup_loc_s lookup_loc_z Dloclt).
- :
   lookup_loc_extend lookup_loc_z (locmap_extend_cons X1 X2 X3 X4) lookup_loc_z.
- :
   lookup_loc_extend (lookup_loc_s Dlook Dloclt1)
      (locmap_extend_before Dnotin2 Dloclt2)
      (lookup_loc_s (lookup_loc_s Dlook Dloclt1) Dloclt3)
      <- loc_lt_trans Dloclt1 Dloclt2 Dloclt3.
- :
   lookup_loc_extend (lookup_loc_s Dlook Dloclt1)
      (locmap_extend_cons Dlext X1 X2 Dneq) (lookup_loc_s Dlook' Dloclt1)
      <- lookup_loc_extend Dlook Dlext Dlook'.
impl_oper_extend_lm :
   Pi N1:nat. Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi O:oper N1. Pi O':operand. Pi L:loc. Pi A:binary wwb. Pi LM1:locmap.
      impl_oper (corresp_info_ Nlim Astart LM IM) O O'
         -> locmap_extend LM L A LM1
         -> impl_oper (corresp_info_ Nlim Astart LM1 IM) O O' -> type.
impl_inst_extend_lm :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi IS:iinstseq. Pi IN:inst. Pi L:loc. Pi A:binary wwb. Pi LM1:locmap.
      impl_inst (corresp_info_ Nlim Astart LM IM) IS IN
         -> locmap_extend LM L A LM1
         -> impl_inst (corresp_info_ Nlim Astart LM1 IM) IS IN -> type.
impl_uval_extend_lm :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi S:binary bw. Pi V:uval. Pi L:loc. Pi A:binary wwb. Pi LM1:locmap.
      impl_uval (corresp_info_ Nlim Astart LM IM) S V
         -> locmap_extend LM L A LM1
         -> impl_uval (corresp_info_ Nlim Astart LM1 IM) S V -> type.
impl_val_extend_lm :
   Pi N1:nat. Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi S:string N1. Pi V:val. Pi L:loc. Pi A:binary wwb. Pi LM1:locmap.
      impl_val (corresp_info_ Nlim Astart LM IM) S V -> locmap_extend LM L A LM1
         -> impl_val (corresp_info_ Nlim Astart LM1 IM) S V -> type.
- : impl_oper_extend_lm (impl_oper_ea Dioperea) X1 (impl_oper_ea Dioperea).
- :
   impl_oper_extend_lm (impl_oper_im Dival) Dlext (impl_oper_im Dival1)
      <- impl_val_extend_lm Dival Dlext Dival1.
- :
   impl_oper_extend_lm (impl_oper_pcrel+ Drep Dhibit) X1
      (impl_oper_pcrel+ Drep Dhibit).
- :
   impl_oper_extend_lm (impl_oper_pcrel- Drep Dneg Dhibit) X1
      (impl_oper_pcrel- Drep Dneg Dhibit).
- :
   impl_inst_extend_lm (impl_add Dioper Dioperea Didest Dallowed) Dlext
      (impl_add Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_addptr Dioper Dioperea Didest) Dlext
      (impl_addptr Dioper1 Dioperea Didest)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_addsptr Drep Dimp Dioperea Didest) X1
      (impl_addsptr Drep Dimp Dioperea Didest).
- :
   impl_inst_extend_lm (impl_and Dioper Dioperea Didest Dallowed) Dlext
      (impl_and Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_bz Dioper) Dlext (impl_bz Dioper1)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_call Dioper) Dlext (impl_call Dioper1)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_cmp Dioper Dioperea Dallowed) Dlext
      (impl_cmp Dioper1 Dioperea Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm
      (impl_cmpjcc Dad Dioper1 Dicond Dioper2 Dioperea Dallowed) Dlext
      (impl_cmpjcc Dad Dioper1' Dicond Dioper2' Dioperea Dallowed)
      <- impl_oper_extend_lm Dioper1 Dlext Dioper1'
      <- impl_oper_extend_lm Dioper2 Dlext Dioper2'.
- : impl_inst_extend_lm (impl_fload Dioperea) X1 (impl_fload Dioperea).
- : impl_inst_extend_lm impl_fnop X1 impl_fnop.
- : impl_inst_extend_lm (impl_fstore Didest) X1 (impl_fstore Didest).
- : impl_inst_extend_lm impl_fstflags X1 impl_fstflags.
- : impl_inst_extend_lm impl_halt X1 impl_halt.
- :
   impl_inst_extend_lm (impl_jcc Dioper Dicond) Dlext (impl_jcc Dioper1 Dicond)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_jump Dioper) Dlext (impl_jump Dioper1)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_mov Dioper Didest) Dlext (impl_mov Dioper1 Didest)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_movsx Dioper Didest D1 D2) Dlext
      (impl_movsx Dioper1 Didest D1 D2)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_movzx Dioper Didest D1 D2) Dlext
      (impl_movzx Dioper1 Didest D1 D2)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- : impl_inst_extend_lm impl_nop X1 impl_nop.
- :
   impl_inst_extend_lm (impl_or Dioper Dioperea Didest Dallowed) Dlext
      (impl_or Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- : impl_inst_extend_lm (impl_pop D) X1 (impl_pop D).
- :
   impl_inst_extend_lm (impl_push Dioper) Dlext (impl_push Dioper1)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_push_rel Dioper Dadd Drep Dimp) Dlext
      (impl_push_rel Dioper1 Dadd Drep Dimp)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- : impl_inst_extend_lm impl_ret X1 impl_ret.
- :
   impl_inst_extend_lm (impl_rol Dioper Dioperea Didest) Dlext
      (impl_rol Dioper1 Dioperea Didest)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_rcl Dioper Dioperea Didest) Dlext
      (impl_rcl Dioper1 Dioperea Didest)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_ror Dioper Dioperea Didest) Dlext
      (impl_ror Dioper1 Dioperea Didest)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_rcr Dioper Dioperea Didest) Dlext
      (impl_rcr Dioper1 Dioperea Didest)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_shl Dioper Dioperea Didest Dallowed) Dlext
      (impl_shl Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_shr Dioper Dioperea Didest Dallowed) Dlext
      (impl_shr Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_sar Dioper Dioperea Didest Dallowed) Dlext
      (impl_sar Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_salloc Dadd1 Dadd2 Dnateq Drep Dimp) X1
      (impl_salloc Dadd1 Dadd2 Dnateq Drep Dimp).
- :
   impl_inst_extend_lm (impl_sfree Dneq Drep Dimp) X1
      (impl_sfree Dneq Drep Dimp).
- :
   impl_inst_extend_lm (impl_sub Dioper Dioperea Didest Dallowed) Dlext
      (impl_sub Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_subptr Dioper Dioperea Didest) Dlext
      (impl_subptr Dioper1 Dioperea Didest)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
- :
   impl_inst_extend_lm (impl_runtime Direg Drep Dprod Diirf) X1
      (impl_runtime Direg Drep Dprod Diirf).
- :
   impl_inst_extend_lm (impl_xor Dioper Dioperea Didest Dallowed) Dlext
      (impl_xor Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_extend_lm Dioper Dlext Dioper1.
-l : impl_uval_extend_lm impl_uval_lit X1 impl_uval_lit.
-p :
   impl_uval_extend_lm (impl_uval_pointer Dindex Dimp Dadd Drep Dlook) Dlext
      (impl_uval_pointer Dindex Dimp Dadd Drep Dlook1)
      <- lookup_loc_extend Dlook Dlext Dlook1.
-bp :
   impl_uval_extend_lm
      (impl_uval_pointer_bad Dindex Dimp Dadd Drep1 Dmod Dsum Drep2 Dino Dlook)
      Dlext
      (impl_uval_pointer_bad Dindex Dimp Dadd Drep1 Dmod Dsum Drep2 Dino Dlook1)
      <- lookup_loc_extend Dlook Dlext Dlook1.
- :
   impl_uval_extend_lm (impl_uval_spointer Dindex Dimp Dadd Dsum Drep) Dlext
      (impl_uval_spointer Dindex Dimp Dadd Dsum Drep).
-g :
   impl_uval_extend_lm (impl_uval_gotpointer Dindex Dimp Dlook) Dlext
      (impl_uval_gotpointer Dindex Dimp Dlook).
-i :
   impl_uval_extend_lm (impl_uval_instruct Diinst Dindex Didecs) Dlext
      (impl_uval_instruct Diinst1 Dindex Didecs)
      <- impl_inst_extend_lm Diinst Dlext Diinst1.
-j : impl_uval_extend_lm impl_uval_junk Dlext impl_uval_junk.
-n : impl_val_extend_lm impl_val_null X1 impl_val_null.
- :
   impl_val_extend_lm (impl_val_cons Dival Duval) Dlext
      (impl_val_cons Dival1 Duval1)
      <- impl_uval_extend_lm Duval Dlext Duval1
      <- impl_val_extend_lm Dival Dlext Dival1.
is_valid_mextend_preserved :
   Pi H1:memory. Pi B1:binary wwb. Pi B2:binary wwb. Pi N1:nat. Pi H2:memory.
      Pi B3:binary wwb. Pi SECT1:section N1.
      is_valid_addr* H1 B1 B2 -> mextend* H2 B3 SECT1 H1
         -> is_valid_addr* H2 B1 B2 -> type.
- : is_valid_mextend_preserved X1 mextend_nil is_valid_addr_nil.
- :
   is_valid_mextend_preserved (is_valid_addr_between Disv X1)
      (mextend_between X2 X3 X4) Disv.
- :
   is_valid_mextend_preserved (is_valid_addr_cons Disv X1 X2 X3)
      (mextend_between X4 X5 X6) Disv.
- :
   is_valid_mextend_preserved (is_valid_addr_between Disv Dadd)
      (mextend_cons Dmext X1 X2 X3) (is_valid_addr_between Disv1 Dadd)
      <- is_valid_mextend_preserved Disv Dmext Disv1.
- :
   is_valid_mextend_preserved (is_valid_addr_cons Disv Dadd1 Dadd2 Drep)
      (mextend_cons Dmext X1 X2 X3) (is_valid_addr_cons Disv1 Dadd1 Dadd2 Drep)
      <- is_valid_mextend_preserved Disv Dmext Disv1.
notin_lm_extend_lm :
   Pi A:binary wwb. Pi LM1:locmap. Pi A':binary wwb. Pi L:loc. Pi LM2:locmap.
      notin_lm A LM1 -> binary_neq A A' -> locmap_extend LM1 L A' LM2
         -> notin_lm A LM2 -> type.
- :
   notin_lm_extend_lm notin_lm_nil Dbneq locmap_extend_nil
      (notin_lm_one notin_lm_nil Dbneq).
- :
   notin_lm_extend_lm (notin_lm_one Dnotin1 Dbneq1) Dbneq2
      (locmap_extend_before X1 X2)
      (notin_lm_one (notin_lm_one Dnotin1 Dbneq1) Dbneq2).
- :
   notin_lm_extend_lm (notin_lm_zero Dnotin1) Dbneq2
      (locmap_extend_before X1 X2) (notin_lm_one (notin_lm_zero Dnotin1) Dbneq2).
- :
   notin_lm_extend_lm (notin_lm_one Dnotin1 Dbneq1) Dbneq2
      (locmap_extend_cons Dlext X1 X2 X3) (notin_lm_one Dnotin2 Dbneq1)
      <- notin_lm_extend_lm Dnotin1 Dbneq2 Dlext Dnotin2.
- :
   notin_lm_extend_lm (notin_lm_zero Dnotin1) Dbneq2
      (locmap_extend_cons Dlext X1 X2 X3) (notin_lm_zero Dnotin2)
      <- notin_lm_extend_lm Dnotin1 Dbneq2 Dlext Dnotin2.
lm_absent_extend_lm :
   Pi LM:locmap. Pi H:memory. Pi A1:binary wwb. Pi A2:binary wwb.
      Pi B1:binary wwb. Pi Bsz:binary wwb. Pi Nsz:nat. Pi N1:nat. Pi L:loc.
      Pi LM1:locmap.
      lm_absent LM H -> is_valid_addr* H A1 A2 -> memory_wf B1 H
         -> add A1 Bsz A2 zero -> represents Nsz Bsz -> nat_eq Nsz (s N1)
         -> locmap_extend LM L A1 LM1 -> lm_absent LM1 H -> type.
- : lm_absent_extend_lm lm_absent_nil X1 X2 X3 X4 X5 X6 lm_absent_nil.
- :
   lm_absent_extend_lm (lm_absent_cons Dlabs Dnotin)
      (is_valid_addr_between Disv Dadd1)
      (memory_wf_cons Dorder Dadd0 Drep0 nat_eq_ X2) Dadd2
      (represents_s Dadd3 Diso Drep) nat_eq_ Dlext
      (lm_absent_cons Dlabs1 Dnotin1)
      <- add_assoc Dadd2 Dadd1 Dadd4 Dadd5
      <- add_commute Dadd3 Dadd3'
      <- one_is_nonzero Diso Dinz1
      <- add_nonzero_sum Dadd3' Dinz1 Dinz2
      <- add_nonzero_sum Dadd4 Dinz2 Dinz3
      <- can_neg_nonzero B9 B8 Dinz3 Dneg1
      <- add_commute Dadd5 Dadd5'
      <- neg_nocarry_nonzero Dneg1 X1 Dinz4
      <- add_invert Dadd5' Dneg1 flipbit_zero Dadd6
      <- notin_lm_extend_lm Dnotin (binary_neq_ Dinz4 Dadd6) Dlext Dnotin1
      <- lm_absent_extend_lm Dlabs Disv Dorder Dadd2
            (represents_s Dadd3 Diso Drep) nat_eq_ Dlext Dlabs1.
- :
   lm_absent_extend_lm (lm_absent_cons Dlabs Dnotin)
      (is_valid_addr_cons Disv Dadd1 Dadd2 (represents_s Dadd3 Diso Drep1))
      (memory_wf_cons Dorder Dadd0 Drep0 nat_eq_ X1) Dadd4 Drep2 nat_eq_ Dlext
      (lm_absent_cons Dlabs1 Dnotin1)
      <- add_assoc Dadd2 Dadd1 Dadd5 Dadd6
      <- add_commute Dadd3 Dadd3'
      <- one_is_nonzero Diso Dinz1
      <- add_nonzero_sum Dadd3' Dinz1 Dinz2
      <- add_nonzero_sum Dadd5 Dinz2 Dinz3
      <- add_commute Dadd6 Dadd6'
      <- notin_lm_extend_lm Dnotin (binary_neq_ Dinz3 Dadd6') Dlext Dnotin1
      <- lm_absent_extend_lm Dlabs Disv Dorder Dadd4 Drep2 nat_eq_ Dlext Dlabs1.
impl_heap_extend_lm :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi M:memory.
      Pi H:heap. Pi A1:binary wwb. Pi A2:binary wwb. Pi B1:binary wwb.
      Pi Bsz:binary wwb. Pi Nsz:nat. Pi N1:nat. Pi L:loc. Pi LM1:locmap.
      impl_heap (corresp_info_ Nlim Sstart LM IM) M H -> is_valid_addr* M A1 A2
         -> memory_wf B1 M -> add A1 Bsz A2 zero -> represents Nsz Bsz
         -> nat_eq Nsz (s N1) -> locmap_extend LM L A1 LM1
         -> impl_heap (corresp_info_ Nlim Sstart LM1 IM) M H -> type.
-n :
   impl_heap_extend_lm (impl_heap_nil Dlabs) Disv Dorder Dadd Drep Dnateq Dlext
      (impl_heap_nil Dlabs1)
      <- lm_absent_extend_lm Dlabs Disv Dorder Dadd Drep Dnateq Dlext Dlabs1.
-c :
   impl_heap_extend_lm
      (impl_heap_cons Dmext Diseg Dsegof Dadd Drep Dival Dlook Dgh Diheap) Disv
      Dorder Dadd1 Drep1 Dnateq Dlext
      (impl_heap_cons Dmext Diseg Dsegof Dadd Drep Dival1 Dlook1 Dgh Diheap1)
      <- impl_val_extend_lm Dival Dlext Dival1
      <- lookup_loc_extend Dlook Dlext Dlook1
      <- is_valid_mextend_preserved Disv Dmext Disv1
      <- mextend_order Dmext Dorder Dorder1
      <- impl_heap_extend_lm Diheap Disv1 Dorder1 Dadd1 Drep1 Dnateq Dlext
            Diheap1.
memory_wf_greater :
   Pi A1:binary wwb. Pi M:memory. Pi A2:binary wwb. Pi B1:binary wwb.
      memory_wf A1 M -> add A2 B1 A1 zero -> memory_wf A2 M -> type.
-n : memory_wf_greater memory_wf_nil X1 memory_wf_nil.
-c :
   memory_wf_greater (memory_wf_cons Dorder Dadd1 Drep Dneq Dadd2) Dadd3
      (memory_wf_cons Dorder Dadd1 Drep Dneq Dadd4)
      <- add_assoc Dadd3 Dadd2 X1 Dadd4.
is_valid_mextend :
   Pi Ao:binary wwb. Pi M:memory. Pi B1:binary wwb. Pi Astart:binary wwb.
      Pi Aend:binary wwb. Pi Bsz:binary wwb. Pi Nsz:nat. Pi N1:nat.
      Pi M1:memory.
      memory_wf Ao M -> add Ao B1 Astart zero -> is_valid_addr* M Astart Aend
         -> add Astart Bsz Aend zero -> represents Nsz Bsz -> nat_eq Nsz (s N1)
         -> Pi S:string Nsz.
                mextend* M Astart (section_valid hs S) M1 -> memory_wf Ao M1
                   -> type.
- :
   is_valid_mextend Dorder Dadd1 is_valid_addr_nil Dadd2 Drep nat_eq_ S
      mextend_nil (memory_wf_cons memory_wf_nil Dadd2 Drep nat_eq_ Dadd1).
- :
   is_valid_mextend (memory_wf_cons Dorder Dadd0 Drep0 nat_eq_ Dadd0') Dadd1
      (is_valid_addr_between X1 Dadd2) Dadd3 Drep nat_eq_ S
      (mextend_between Dadd2 Dadd3 Drep)
      (memory_wf_cons (memory_wf_cons Dorder Dadd0 Drep0 nat_eq_ Dadd2) Dadd3
          Drep nat_eq_ Dadd1).
- :
   is_valid_mextend (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2) Dadd3
      (is_valid_addr_cons Disv Dadd4 Dadd5 Drep2) Dadd6 Drep3 nat_eq_ S
      (mextend_cons Dmext Dadd4 Dadd5 Drep2)
      (memory_wf_cons Dorder2 Dadd1 Drep1 nat_eq_ Dadd2)
      <- represents_fun2 Drep2 Drep1 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd5 Dadd7
      <- add_fun3 Dadd7 Dadd1 X1 Dbeq2
      <- add_resp Dbeq2 binary_eq_ binary_eq_ bit_eq_ Dadd4 Dadd8
      <- is_valid_mextend Dorder Dadd8 Disv Dadd6 Drep3 nat_eq_ S Dmext Dorder2.
ordered_is_valid :
   Pi Aend:binary wwb. Pi Astart:binary wwb. Pi Bsz:binary wwb. Pi H:memory.
      memory_wf Aend H -> add Astart Bsz Aend zero
         -> is_valid_addr* H Astart Aend -> type.
- : ordered_is_valid mnil memory_wf_nil X1 is_valid_addr_nil.
- :
   ordered_is_valid (mcons Astart1 (s Nsz1-1) SECT1 Mrest)
      (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2) Dadd3
      (is_valid_addr_between Disv Dadd2)
      <- add_assoc Dadd2 Dadd1 X1 Dadd4
      <- memory_wf_greater Dorder Dadd4 Dorder1
      <- ordered_is_valid Mrest Dorder1 Dadd3 Disv.
maybe_valid_addr* : memory -> binary wwb -> binary wwb -> type.
maybe_valid_addr*_yes : maybe_valid_addr* M A B <- is_valid_addr* M A B.
maybe_valid_addr*_no : maybe_valid_addr* M A B <- is_invalid_addr* M A B.
decide_valid*_addr* :
   Pi Nsz1:nat. Pi Bsz1:binary wwb. Pi Astart1:binary wwb. Pi Aend1:binary wwb.
      Pi Astart:binary wwb. Pi Bsz:binary wwb. Pi Aend:binary wwb.
      Pi B1:binary wwb. Pi C1:bit. Pi B2:binary wwb. Pi C2:bit. Pi M:memory.
      represents Nsz1 Bsz1 -> add Astart1 Bsz1 Aend1 zero
         -> add Astart Bsz Aend zero -> add Aend B1 Astart1 C1
         -> add Aend1 B2 Astart C2 -> maybe_valid_addr* M Astart Aend
         -> Pi SECT:section Nsz1.
                maybe_valid_addr* (mcons Astart1 Nsz1 SECT M) Astart Aend
                   -> type.
- :
   decide_valid*_addr* X1 X2 X3 X4 X5 (maybe_valid_addr*_no Disnv) SECT1
      (maybe_valid_addr*_no (is_invalid_addr_cons Disnv)).
- :
   decide_valid*_addr* X1 X2 X3 Dadd2 X4 (maybe_valid_addr*_yes Disv) SECT1
      (maybe_valid_addr*_yes (is_valid_addr_between Disv Dadd2)).
- :
   decide_valid*_addr* Drep Dadd1 X1 X2 Dadd3 (maybe_valid_addr*_yes Disv) SECT1
      (maybe_valid_addr*_yes (is_valid_addr_cons Disv Dadd3 Dadd1 Drep)).
- :
   decide_valid*_addr* Drep Dadd1 Dadd2 Dadd3 Dadd4 (maybe_valid_addr*_yes Disv)
      SECT1
      (maybe_valid_addr*_no
          (is_invalid_addr_hit Dinz2 Dinz4 Dadd5' Dadd6' Dadd1 Drep))
      <- add_carry_nonzero Dadd3 X4 Dinz1
      <- can_neg_nonzero B3 B4 Dinz1 Dneg1
      <- add_commute Dadd3 Dadd3'
      <- add_invert Dadd3' Dneg1 flipbit_one Dadd5
      <- add_commute Dadd5 Dadd5'
      <- neg_nocarry_nonzero Dneg1 X3 Dinz2
      <- add_carry_nonzero Dadd4 X2 Dinz3
      <- can_neg_nonzero B2 B1 Dinz3 Dneg2
      <- add_commute Dadd4 Dadd4'
      <- add_invert Dadd4' Dneg2 flipbit_one Dadd6
      <- add_commute Dadd6 Dadd6'
      <- neg_nocarry_nonzero Dneg2 X1 Dinz4.
decide_valid*_addr :
   Pi B1:binary wwb. Pi M:memory. Pi Astart:binary wwb. Pi Bsz:binary wwb.
      Pi Aend:binary wwb.
      memory_wf B1 M -> add Astart Bsz Aend zero
         -> maybe_valid_addr* M Astart Aend -> type.
- :
   decide_valid*_addr memory_wf_nil X1 (maybe_valid_addr*_yes is_valid_addr_nil).
- :
   decide_valid*_addr (memory_wf_cons Dorder Dadd1 Drep nat_eq_ Dadd2) Dadd3
      Dmaybe1
      <- can_add' Aend B1 Astart1 B2 Dadd4
      <- can_add' Aend1 B3 Astart B4 Dadd5
      <- decide_valid*_addr Dorder Dadd3 Dmaybe
      <- decide_valid*_addr* Drep Dadd1 Dadd3 Dadd4 Dadd5 Dmaybe SECT1 Dmaybe1.
maybe_aligned : binary wwb -> type.
maybe_aligned_yes : maybe_aligned A <- is_aligned A.
maybe_aligned_no : maybe_aligned A <- is_unaligned A.
sum_30_2 : sum 30' 2' wwb
   = sum_s
        (sum_s
            (sum_s
                (sum_s
                    (sum_s
                        (sum_s
                            (sum_s
                                (sum_s
                                    (sum_s
                                        
(sum_s
    (sum_s
        (sum_s
            (sum_s
                (sum_s
                    (sum_s
                        (sum_s
                            (sum_s
                                (sum_s
                                    (sum_s
                                        
(sum_s
    (sum_s
        (sum_s
            (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))))))))))))))))))))))).
decide_aligned* :
   Pi N1:nat. Pi B1:binary N1. Pi B:binary wwb. Pi B2:binary 2'.
      binary_append B1 B2 B -> maybe_aligned B -> type.
- : decide_aligned* 0_2 Dbapp (maybe_aligned_yes (is_aligned_ Dbapp)).
- : decide_aligned* 1_2 Dbapp (maybe_aligned_no (is_unaligned_1 Dbapp)).
- : decide_aligned* 2_2 Dbapp (maybe_aligned_no (is_unaligned_2 Dbapp)).
- : decide_aligned* 3_2 Dbapp (maybe_aligned_no (is_unaligned_3 Dbapp)).
decide_aligned : Pi B:binary wwb. maybe_aligned B -> type.
- :
   decide_aligned B Dmaybe
      <- can_binary_append' 30' B1 B2 B sum_30_2 Dappend
      <- decide_aligned* B2 Dappend Dmaybe.
maybe_valid_addr : memory -> binary wwb -> binary wwb -> type.
maybe_valid_addr_yes : maybe_valid_addr M A B <- is_valid_addr M A B.
maybe_valid_addr_no : maybe_valid_addr M A B <- is_invalid_addr M A B.
decide_valid_addr* :
   Pi M:memory. Pi A:binary wwb. Pi B:binary wwb.
      maybe_valid_addr* M A B -> maybe_aligned A -> maybe_valid_addr M A B
         -> type.
- :
   decide_valid_addr* (maybe_valid_addr*_no Disnv) X1
      (maybe_valid_addr_no (is_invalid_addr_ Disnv)).
- :
   decide_valid_addr* X1 (maybe_aligned_no Disa)
      (maybe_valid_addr_no (is_invalid_addr_unaligned Disa)).
- :
   decide_valid_addr* (maybe_valid_addr*_yes Disv) (maybe_aligned_yes Disa)
      (maybe_valid_addr_yes (is_valid_addr_ Disv Disa)).
decide_valid_addr :
   Pi B1:binary wwb. Pi M:memory. Pi A1:binary wwb. Pi B2:binary wwb.
      Pi A2:binary wwb.
      memory_wf B1 M -> add A1 B2 A2 zero -> maybe_valid_addr M A1 A2 -> type.
- :
   decide_valid_addr Dorder Dadd Dmaybe
      <- decide_valid*_addr Dorder Dadd Dmaybev
      <- decide_aligned B1 Dmaybea
      <- decide_valid_addr* Dmaybev Dmaybea Dmaybe.
can_get_valid_addr :
   Pi Bord:binary wwb. Pi H:memory. Pi Ncurr:nat. Pi Acurr:binary wwb.
      Pi N2p32:nat. Pi Max32:binary wwb. Pi SUCC?:bit. Pi A:binary wwb.
      Pi OR':oracle. Pi OR:oracle.
      memory_wf Bord H -> represents Ncurr Acurr
         -> Pi Nrem:nat.
                sum Ncurr Nrem N2p32 -> is_negone Max32
                   -> represents N2p32 Max32
                   -> Pi Bsz:binary wwb.
                          get_valid_addr OR H Bsz Acurr SUCC? A OR' -> type.
can_get_valid_addr* :
   Pi OR:oracle. Pi BIT:bit. Pi OR1:oracle. Pi Bord:binary wwb. Pi H:memory.
      Pi Ncurr:nat. Pi Acurr:binary 32'. Pi N2p32:nat. Pi Max32:binary wwb.
      Pi Bsz:binary 32'. Pi Aend:binary 32'. Pi C1:bit. Pi Anext:binary 32'.
      Pi C2:bit. Pi SUCC?:bit. Pi A:binary wwb. Pi OR':oracle.
      consume_bit OR BIT OR1 -> memory_wf Bord H -> represents Ncurr Acurr
         -> Pi Nrem:nat.
                sum Ncurr Nrem N2p32 -> is_negone Max32
                   -> represents N2p32 Max32 -> add Acurr Bsz Aend C1
                   -> add Acurr increment Anext C2
                   -> get_valid_addr OR H Bsz Acurr SUCC? A OR' -> type.
can_get_valid_addr** :
   Pi OR:oracle. Pi BIT:bit. Pi OR1:oracle. Pi Bord:binary wwb. Pi H:memory.
      Pi Ncurr:nat. Pi Acurr:binary wwb. Pi N2p32:nat. Pi Max32:binary wwb.
      Pi Bsz:binary wwb. Pi Aend:binary wwb. Pi Anext:binary wwb. Pi C2:bit.
      Pi SUCC?:bit. Pi A:binary wwb. Pi OR':oracle.
      consume_bit OR BIT OR1 -> memory_wf Bord H -> represents Ncurr Acurr
         -> Pi Nrem:nat.
                sum Ncurr Nrem N2p32 -> is_negone Max32
                   -> represents N2p32 Max32 -> add Acurr Bsz Aend zero
                   -> maybe_valid_addr H Acurr Aend
                   -> add Acurr increment Anext C2
                   -> get_valid_addr OR H Bsz Acurr SUCC? A OR' -> type.
- :
   can_get_valid_addr** Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2
      (maybe_valid_addr_yes Disv) Dadd3 (get_valid_addr_hit Dcons Disv Dadd2).
- :
   can_get_valid_addr** Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2
      (maybe_valid_addr_yes Disv) Dadd3
      (get_valid_addr_oracle Dget Dadd3 Dcons Disv Dadd2)
      <- sum_add_corr3 Drep1 represents_4_32 Drep3 Dsum2 Dadd3
      <- represents_max Drep3 Drep2 Dino Dleq
      <- leq_implies_sum Dsum3 Dleq
      <- sum_assoc Dsum2 Dsum3 Dsum4 Dsum5
      <- sum_fun2 Dsum5 Dsum1 Dnateq1
      <- sum_resp nat_eq_ nat_eq_ Dnateq1 Dsum4 Dsum6
      <- employ_sum1 3' Nrem' Nrem Dsum6
      <- can_get_valid_addr OR' Dorder Drep3 Nrem' Dsum3 Dino Drep2 Bsz Dget.
- :
   can_get_valid_addr** Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2
      (maybe_valid_addr_no Disinv) Dadd3
      (get_valid_addr_invalid Dget Dadd3 Disinv Dadd2)
      <- sum_add_corr3 Drep1 represents_4_32 Drep3 Dsum2 Dadd3
      <- represents_max Drep3 Drep2 Dino Dleq
      <- leq_implies_sum Dsum3 Dleq
      <- sum_assoc Dsum2 Dsum3 Dsum4 Dsum5
      <- sum_fun2 Dsum5 Dsum1 Dnateq1
      <- sum_resp nat_eq_ nat_eq_ Dnateq1 Dsum4 Dsum6
      <- employ_sum1 3' Nrem' Nrem Dsum6
      <- can_get_valid_addr OR2 Dorder Drep3 Nrem' Dsum3 Dino Drep2 Bsz Dget.
- :
   can_get_valid_addr** Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2
      (maybe_valid_addr_no Disinv) Dadd3
      (get_valid_addr_fail_i Dadd3 Disinv Dadd2).
- :
   can_get_valid_addr** Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2
      (maybe_valid_addr_yes Disv) Dadd3
      (get_valid_addr_fail_o Dadd3 Dcons Disv Dadd2).
- :
   can_get_valid_addr* Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2 Dadd3
      (get_valid_addr_fail_ov Dadd2).
- :
   can_get_valid_addr* Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2 Dadd3 Dget
      <- decide_valid_addr Dorder Dadd2 Dmaybe
      <- can_get_valid_addr** Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2
            Dmaybe Dadd3 Dget.
- :
   can_get_valid_addr OR Dorder Drep1 Nrem Dsum1 Dino Drep2 Bsz Dget
      <- can_add Acurr Bsz Aend C1 Dadd2
      <- can_add Acurr increment Anext C2 Dadd3
      <- can_consume_bit OR Dcons
      <- can_get_valid_addr* Dcons Dorder Drep1 Nrem Dsum1 Dino Drep2 Dadd2
            Dadd3 Dget.
get_valid_is_valid :
   Pi OR:oracle. Pi H:memory. Pi Bsize:binary wwb. Pi Acurr:binary wwb.
      Pi Astart:binary wwb. Pi OR':oracle. Pi Aend:binary wwb.
      get_valid_addr OR H Bsize Acurr one' Astart OR'
         -> add Astart Bsize Aend zero -> is_valid_addr* H Astart Aend -> type.
- :
   get_valid_is_valid (get_valid_addr_hit X1 (is_valid_addr_ Disv X2) Dadd) Dadd
      Disv.
- :
   get_valid_is_valid (get_valid_addr_oracle Dget X1 X2 X3 X4) Dadd Disv
      <- get_valid_is_valid Dget Dadd Disv.
- :
   get_valid_is_valid (get_valid_addr_invalid Dget X1 X2 X3) Dadd Disv
      <- get_valid_is_valid Dget Dadd Disv.
can_locmap_extend* :
   Pi LM:locmap. Pi L:loc. Pi A:binary wwb. Pi LM1:locmap.
      locmap_wf LM L -> notin_lm A LM -> locmap_extend LM L A LM1 -> type.
- : can_locmap_extend* locmap_wf_nil X1 locmap_extend_nil.
- :
   can_locmap_extend* (locmap_wf_one Dlwf Dnotin1 Dloclt) Dnlm
      (locmap_extend_before Dnlm Dloclt).
- :
   can_locmap_extend* (locmap_wf_zero Dlwf Dloclt) Dnlm
      (locmap_extend_before Dnlm Dloclt).
address_present_not_valid :
   Pi A:binary wwb. Pi M:memory. Pi B1:binary wwb. Pi A1:binary wwb.
      Pi Bsz:binary wwb. Pi A2:binary wwb. Pi Nsz:nat. Pi N1:nat.
      in_memory A M -> memory_wf B1 M -> add A1 Bsz A2 zero
         -> represents Nsz Bsz -> nat_eq Nsz (s N1) -> is_valid_addr* M A1 A2
         -> binary_neq A1 A -> type.
- :
   address_present_not_valid in_memory_hit (memory_wf_cons X2 X3 X4 nat_eq_ X5)
      X6 X7 X8 (is_valid_addr_cons X9 Dadd1 Dadd2 Drep)
      (binary_neq_ Dneg2 Dadd6)
      <- add_assoc Dadd2 Dadd1 Dadd4 Dadd5
      <- represents_succ Drep Dinz2
      <- add_nonzero_sum Dadd4 Dinz2 Dinz3
      <- can_neg_nonzero B1 B2 Dinz3 Dneg1
      <- add_commute Dadd5 Dadd5'
      <- add_invert Dadd5' Dneg1 flipbit_zero Dadd6
      <- neg_nocarry_nonzero Dneg1 X1 Dneg2.
- :
   address_present_not_valid in_memory_hit X1 Dadd1 Drep1 nat_eq_
      (is_valid_addr_between X2 Dadd3) (binary_neq_ Dinz2 Dadd6)
      <- add_assoc Dadd1 Dadd3 Dadd4 Dadd5
      <- represents_succ Drep1 Dinz1
      <- add_nonzero_sum Dadd4 Dinz1 Dinz2
      <- add_commute Dadd5 Dadd6.
- :
   address_present_not_valid (in_memory_miss Dapm)
      (memory_wf_cons Dorder X1 X2 X3 X4) Dadd Drep Dnateq
      (is_valid_addr_cons Disv X5 X6 X7) Dbneq
      <- address_present_not_valid Dapm Dorder Dadd Drep Dnateq Disv Dbneq.
- :
   address_present_not_valid (in_memory_miss Dapm)
      (memory_wf_cons Dorder X1 X2 X3 X4) Dadd Drep Dnateq
      (is_valid_addr_between Disv X5) Dbneq
      <- address_present_not_valid Dapm Dorder Dadd Drep Dnateq Disv Dbneq.
lm_present_valid :
   Pi LM:locmap. Pi M:memory. Pi B1:binary wwb. Pi A1:binary wwb.
      Pi Bsz:binary wwb. Pi A2:binary wwb. Pi Nsz:nat. Pi N1:nat.
      lm_present LM M -> memory_wf B1 M -> add A1 Bsz A2 zero
         -> represents Nsz Bsz -> nat_eq Nsz (s N1) -> is_valid_addr* M A1 A2
         -> notin_lm A1 LM -> type.
- : lm_present_valid lm_present_nil X1 X2 X3 X4 X5 notin_lm_nil.
- :
   lm_present_valid (lm_present_one Dlpm Dapm) Dorder Dadd Drep Dnateq Disv
      (notin_lm_one Dnlm Dbneq)
      <- address_present_not_valid Dapm Dorder Dadd Drep Dnateq Disv Dbneq
      <- lm_present_valid Dlpm Dorder Dadd Drep Dnateq Disv Dnlm.
- :
   lm_present_valid (lm_present_zero Dlpm) Dorder Dadd Drep Dnateq Disv
      (notin_lm_zero Dnlm)
      <- lm_present_valid Dlpm Dorder Dadd Drep Dnateq Disv Dnlm.
can_locmap_extend :
   Pi N1:nat. Pi B1:binary wwb. Pi LM:locmap. Pi IM1:irfmap. Pi Lnew:loc.
      Pi M:memory. Pi H:heap. Pi B2:binary wwb. Pi Astart:binary wwb.
      Pi Bsz:binary wwb. Pi Aend:binary wwb. Pi Nsz:nat. Pi N2:nat. Pi L1:loc.
      Pi LM1:locmap.
      corresp_info_valid (corresp_info_ N1 B1 LM IM1) Lnew M H -> memory_wf B2 M
         -> add Astart Bsz Aend zero -> represents Nsz Bsz -> nat_eq Nsz (s N2)
         -> is_valid_addr* M Astart Aend -> nextloc H Lnew L1
         -> locmap_extend LM Lnew Astart LM1 -> type.
- :
   can_locmap_extend (corresp_info_valid_ Dlph Dlpm Dlwf) Dorder Dadd Drep
      Dnateq Disv (nextloc_ Dnewl) Dlext
      <- lm_present_valid Dlpm Dorder Dadd Drep Dnateq Disv Dnlm
      <- can_locmap_extend* Dlwf Dnlm Dlext.
mextend_is_valid :
   Pi N1:nat. Pi M1:memory. Pi B1:binary wwb. Pi SECT1:section N1. Pi M2:memory.
      Pi A1:binary wwb. Pi A2:binary wwb.
      mextend* M1 B1 SECT1 M2 -> is_valid_addr* M2 A1 A2
         -> is_valid_addr* M1 A1 A2 -> type.
- : mextend_is_valid mextend_nil X1 is_valid_addr_nil.
- :
   mextend_is_valid (mextend_between Dmext X1 X2)
      (is_valid_addr_cons Disv X3 X4 X5) Disv.
- :
   mextend_is_valid (mextend_between Dmext X1 X2)
      (is_valid_addr_between Disv X3) Disv.
- :
   mextend_is_valid (mextend_cons Dmext X1 X2 X3)
      (is_valid_addr_cons Disv Dadd1 Dadd2 Drep)
      (is_valid_addr_cons Disv1 Dadd1 Dadd2 Drep)
      <- mextend_is_valid Dmext Disv Disv1.
- :
   mextend_is_valid (mextend_cons Dmext X1 X2 X3)
      (is_valid_addr_between Disv Dadd) (is_valid_addr_between Disv1 Dadd)
      <- mextend_is_valid Dmext Disv Disv1.
impl_runfacs_is_valid :
   Pi N1:nat. Pi N:nat. Pi IM:irfmap. Pi LM:locmap. Pi H1:memory. Pi H2:memory.
      Pi S2:string N1. Pi A1:binary wwb. Pi A2:binary wwb.
      impl_runfacs N IM LM H1 H2 S2 -> is_valid_addr* H2 A1 A2
         -> is_valid_addr* H1 A1 A2 -> type.
- : impl_runfacs_is_valid impl_runfacs_z D D.
- :
   impl_runfacs_is_valid (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) Disval1
      Disval3
      <- mextend_is_valid Dmext Disval1 Disval2
      <- impl_runfacs_is_valid Dirfs Disval2 Disval3.
impl_got_ptr_is_valid :
   Pi CI:corresp_info. Pi H1:memory. Pi H2:memory. Pi A1:binary wwb.
      Pi A2:binary wwb.
      impl_got_ptr CI H1 H2 -> is_valid_addr* H2 A1 A2
         -> is_valid_addr* H1 A1 A2 -> type.
- :
   impl_got_ptr_is_valid (impl_got_ptr_ Dmext1 X1 X2 Dirfs) Disv1 Disv3
      <- mextend_is_valid Dmext1 Disv1 Disv2
      <- impl_runfacs_is_valid Dirfs Disv2 Disv3.
impl_stack_is_valid :
   Pi CI:corresp_info. Pi H1:memory. Pi B:binary wwb. Pi V:val. Pi H2:memory.
      Pi A1:binary wwb. Pi A2:binary wwb.
      impl_stack CI H1 B V H2 -> is_valid_addr* H2 A1 A2
         -> is_valid_addr* H1 A1 A2 -> type.
- :
   impl_stack_is_valid
      (impl_stack_ Dmext1 Dmext2 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12) Disv1
      Disv3
      <- mextend_is_valid Dmext1 Disv1 Disv2
      <- mextend_is_valid Dmext2 Disv2 Disv3.
mextend_address_present :
   Pi N1:nat. Pi M1:memory. Pi A1:binary wwb. Pi SECT1:section N1. Pi M2:memory.
      mextend* M1 A1 SECT1 M2 -> in_memory A1 M2 -> type.
- : mextend_address_present mextend_nil in_memory_hit.
- : mextend_address_present (mextend_between X1 X2 X3) in_memory_hit.
- :
   mextend_address_present (mextend_cons Dmext X1 X2 X3) (in_memory_miss Dapm)
      <- mextend_address_present Dmext Dapm.
in_memory_mextend :
   Pi A:binary wwb. Pi M:memory. Pi N1:nat. Pi B1:binary wwb.
      Pi SECT1:section N1. Pi M1:memory.
      in_memory A M -> mextend* M B1 SECT1 M1 -> in_memory A M1 -> type.
- :
   in_memory_mextend in_memory_hit (mextend_between X1 X2 X3)
      (in_memory_miss in_memory_hit).
- : in_memory_mextend in_memory_hit (mextend_cons X1 X2 X3 X4) in_memory_hit.
- : in_memory_mextend Dapm (mextend_between X1 X2 X3) (in_memory_miss Dapm).
- :
   in_memory_mextend (in_memory_miss Dapm) (mextend_cons Dmext X1 X2 X3)
      (in_memory_miss Dapm1)
      <- in_memory_mextend Dapm Dmext Dapm1.
in_memory_impl_runfacs :
   Pi A:binary wwb. Pi M:memory. Pi N1:nat. Pi N2:nat. Pi IM1:irfmap.
      Pi LM1:locmap. Pi M1:memory. Pi S1:string N1.
      in_memory A M -> impl_runfacs N2 IM1 LM1 M M1 S1 -> in_memory A M1 -> type.
- : in_memory_impl_runfacs Din impl_runfacs_z Din.
- :
   in_memory_impl_runfacs Din1 (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) Din3
      <- in_memory_impl_runfacs Din1 Dirfs Din2
      <- in_memory_mextend Din2 Dmext Din3.
lm_present_mextend :
   Pi LM:locmap. Pi M:memory. Pi N1:nat. Pi B1:binary wwb. Pi SECT1:section N1.
      Pi M1:memory.
      lm_present LM M -> mextend* M B1 SECT1 M1 -> lm_present LM M1 -> type.
- : lm_present_mextend lm_present_nil X1 lm_present_nil.
- :
   lm_present_mextend (lm_present_one Dlpm Dapm) Dmext
      (lm_present_one Dlpm1 Dapm1)
      <- in_memory_mextend Dapm Dmext Dapm1
      <- lm_present_mextend Dlpm Dmext Dlpm1.
- :
   lm_present_mextend (lm_present_zero Dlpm) Dmext (lm_present_zero Dlpm1)
      <- lm_present_mextend Dlpm Dmext Dlpm1.
false_implies_corr_info_valid :
   false
      -> Pi CI:corresp_info. Pi L:loc. Pi M:memory. Pi H:heap.
             corresp_info_valid CI L M H -> type.
locmap_extend_corr_info_valid :
   Pi LM:locmap. Pi L:loc. Pi A:binary wwb. Pi LM1:locmap. Pi Nlim:nat.
      Pi Astart:binary wwb. Pi IM:irfmap. Pi M:memory. Pi H:heap. Pi N1:nat.
      Pi SECT1:section N1. Pi M1:memory. Pi L':loc.
      locmap_extend LM L A LM1
         -> corresp_info_valid (corresp_info_ Nlim Astart LM IM) L M H
         -> mextend* M A SECT1 M1 -> nextloc H L L'
         -> Pi V:val. Pi Nlim1:nat. Pi Astart1:binary wwb. Pi IM1:irfmap.
                corresp_info_valid (corresp_info_ Nlim1 Astart1 LM1 IM1) L' M1
                   (hcons L V H)
                   -> type.
- :
   locmap_extend_corr_info_valid locmap_extend_nil
      (corresp_info_valid_ X1 X2 X3) Dmext (nextloc_ Dnewl) V N4 B3 IM2
      (corresp_info_valid_ (lm_heap_corr_one lm_heap_corr_nil)
          (lm_present_one lm_present_nil Dapm)
          (locmap_wf_one locmap_wf_nil notin_lm_nil (loc_lt_ Dlt)))
      <- mextend_address_present Dmext Dapm
      <- lt_succ N1 Dlt.
- :
   locmap_extend_corr_info_valid (locmap_extend_before Dnotin Dloclt)
      (corresp_info_valid_ Dlph Dlpm Dlwf) Dmext (nextloc_ Dnewl) V N4 B5 IM2
      (corresp_info_valid_ (lm_heap_corr_one Dlph) (lm_present_one Dlpm1 Dapm)
          (locmap_wf_one Dlwf Dnotin (loc_lt_ Dlt)))
      <- mextend_address_present Dmext Dapm
      <- lm_present_mextend Dlpm Dmext Dlpm1
      <- lt_succ N1 Dlt.
- :
   locmap_extend_corr_info_valid
      (locmap_extend_cons Dlext X1 (loc_lt_ Dlt) Dbneq)
      (corresp_info_valid_ (lm_heap_corr_one Dlph) (lm_present_one Dlpm Dapm)
          (locmap_wf_one Dlwf Dnotin (loc_lt_ Dlt1)))
      Dmext Dnewl V Nlim Sstart IM Dciv
      <- lt_trans Dlt Dlt1 Dlt2
      <- lt_contradict Dlt2 Dfalse
      <- false_implies_corr_info_valid Dfalse
            (corresp_info_ Nlim Sstart (locmap_cons one' (lc N1) B1 LM1) IM) L1
            H1 (hcons (lc N2) V (hcons (lc N1) V1 H2)) Dciv.
- :
   locmap_extend_corr_info_valid
      (locmap_extend_cons Dlext X1 (loc_lt_ Dlt) Dbneq)
      (corresp_info_valid_ (lm_heap_corr_zero Dlph) (lm_present_zero Dlpm)
          (locmap_wf_zero Dlwf (loc_lt_ Dlt1)))
      Dmext Dnewl V Nlim Sstart IM Dciv
      <- lt_trans Dlt Dlt1 Dlt2
      <- lt_contradict Dlt2 Dfalse
      <- false_implies_corr_info_valid Dfalse
            (corresp_info_ Nlim Sstart (locmap_cons zero (lc N1) B1 LM1) IM) L1
            H1 (hcons (lc N2) V H2) Dciv.
mextend_reorder :
   Pi N1:nat. Pi M1:memory. Pi A1:binary wwb. Pi SEG1:section N1. Pi M2:memory.
      Pi N2:nat. Pi A2:binary wwb. Pi SEG2:section N2. Pi M3:memory.
      Pi M4:memory.
      mextend* M1 A1 SEG1 M2 -> mextend* M2 A2 SEG2 M3 -> mextend* M1 A2 SEG2 M4
         -> mextend* M4 A1 SEG1 M3 -> type.
- :
   mextend_reorder mextend_nil (mextend_between Dadd1 Dadd2 Drep) mextend_nil
      (mextend_cons mextend_nil Dadd1 Dadd2 Drep).
- :
   mextend_reorder mextend_nil (mextend_cons mextend_nil Dadd1 Dadd2 Drep)
      mextend_nil (mextend_between Dadd1 Dadd2 Drep).
- :
   mextend_reorder (mextend_between Dadd1 Dadd2 Drep1)
      (mextend_between Dadd3 Dadd4 Drep2) (mextend_between Dadd6 Dadd4 Drep2)
      (mextend_cons (mextend_between Dadd1 Dadd2 Drep1) Dadd3 Dadd4 Drep2)
      <- add_assoc Dadd3 Dadd2 X2 Dadd5
      <- add_assoc Dadd5 Dadd1 X1 Dadd6.
- :
   mextend_reorder (mextend_between Dadd1 Dadd2 Drep1)
      (mextend_cons (mextend_between Dadd3 Dadd4 Drep2) Dadd5 Dadd6 Drep3)
      (mextend_between Dadd3 Dadd4 Drep2) (mextend_between Dadd8 Dadd2 Drep1)
      <- represents_fun2 Drep3 Drep1 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd6 Dadd7
      <- add_fun3 Dadd7 Dadd2 X1 Dbeq2
      <- add_resp Dbeq2 binary_eq_ binary_eq_ bit_eq_ Dadd5 Dadd8.
- :
   mextend_reorder (mextend_between Dadd1 Dadd2 Drep1)
      (mextend_cons (mextend_cons Dmext Dadd3 Dadd4 Drep2) Dadd5 Dadd6 Drep3)
      (mextend_cons Dmext Dadd3 Dadd4 Drep2) (mextend_between Dadd1 Dadd2 Drep1).
- :
   mextend_reorder (mextend_cons Dmext Dadd1 Dadd2 Drep1)
      (mextend_between Dadd3 Dadd4 Drep2) (mextend_between Dadd3 Dadd4 Drep2)
      (mextend_cons (mextend_cons Dmext Dadd1 Dadd2 Drep1) Dadd6 Dadd4 Drep2)
      <- add_assoc Dadd3 Dadd2 X2 Dadd5
      <- add_assoc Dadd5 Dadd1 X1 Dadd6.
- :
   mextend_reorder (mextend_cons Dmext1 Dadd1 Dadd2 Drep1)
      (mextend_cons Dmext2 Dadd3 Dadd4 Drep2)
      (mextend_cons Dmext3 Dadd3 Dadd4 Drep2)
      (mextend_cons Dmext4 Dadd1 Dadd2 Drep1)
      <- mextend_reorder Dmext1 Dmext2 Dmext3 Dmext4.
impl_runfacs_extend_lm_mext :
   Pi N1:nat. Pi N:nat. Pi IM:irfmap. Pi LM:locmap. Pi M1:memory. Pi M2:memory.
      Pi S2:string N1. Pi N2:nat. Pi A:binary wwb. Pi S:string N2.
      Pi M2':memory. Pi B1:binary wwb. Pi A1:binary wwb. Pi Bsz:binary wwb.
      Pi A2:binary wwb. Pi Nsz:nat. Pi N3:nat. Pi L1:loc. Pi LM1:locmap.
      Pi M1':memory.
      impl_runfacs N IM LM M1 M2 S2 -> mextend* M2 A (section_valid hs S) M2'
         -> memory_wf B1 M2 -> add A1 Bsz A2 zero -> represents Nsz Bsz
         -> nat_eq Nsz (s N3) -> is_valid_addr* M2 A1 A2
         -> locmap_extend LM L1 A1 LM1 -> impl_runfacs N IM LM1 M1' M2' S2
         -> mextend* M1 A (section_valid hs S) M1' -> type.
- :
   impl_runfacs_extend_lm_mext impl_runfacs_z Dmext X1 X2 X3 X4 X5 X6
      impl_runfacs_z Dmext.
- :
   impl_runfacs_extend_lm_mext
      (impl_runfacs_s Dindex Dimp Dmext Dirfs Dnotin Drof) Dmext1 Dmwf Dadd1
      Drep1 Dnateq1 Disv Dlext
      (impl_runfacs_s Dindex Dimp Dmext' Dirfs1 Dnotin1 Drof) Dmext1''
      <- mextend_reorder Dmext Dmext1 Dmext1' Dmext'
      <- mextend_order Dmext Dmwf Dmwf1
      <- mextend_is_valid Dmext Disv Disv1
      <- impl_runfacs_extend_lm_mext Dirfs Dmext1' Dmwf1 Dadd1 Drep1 Dnateq1
            Disv1 Dlext Dirfs1 Dmext1''
      <- mextend_address_present Dmext Dapm
      <- address_present_not_valid Dapm Dmwf Dadd1 Drep1 Dnateq1 Disv Dbneq1
      <- binary_neq_symm Dbneq1 Dbneq1'
      <- notin_lm_extend_lm Dnotin Dbneq1' Dlext Dnotin1.
impl_got_extend_lm_mext :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi M1:memory.
      Pi M2:memory. Pi N1:nat. Pi A:binary wwb. Pi S:string N1. Pi M2':memory.
      Pi B1:binary wwb. Pi A1:binary wwb. Pi Bsz:binary wwb. Pi A2:binary wwb.
      Pi Nsz:nat. Pi N2:nat. Pi L1:loc. Pi LM1:locmap. Pi M1':memory.
      impl_got_ptr (corresp_info_ Nlim Sstart LM IM) M1 M2
         -> mextend* M2 A (section_valid hs S) M2' -> memory_wf B1 M2
         -> add A1 Bsz A2 zero -> represents Nsz Bsz -> nat_eq Nsz (s N2)
         -> is_valid_addr* M2 A1 A2 -> locmap_extend LM L1 A1 LM1
         -> impl_got_ptr (corresp_info_ Nlim Sstart LM1 IM) M1' M2'
         -> mextend* M1 A (section_valid hs S) M1' -> type.
- :
   impl_got_extend_lm_mext (impl_got_ptr_ Dmext1 Dnotin1 Dlookg Dirfs) Dmext3
      Dorder2 Daddsz Drepsz Dnateq Disv Dlext
      (impl_got_ptr_ Dmext1' Dnotin1' Dlookg Dirfs') Dmext5
      <- mextend_reorder Dmext1 Dmext3 Dmext4 Dmext1'
      <- mextend_address_present Dmext1 Dapm1
      <- address_present_not_valid Dapm1 Dorder2 Daddsz Drepsz Dnateq Disv
            Dbneq1
      <- binary_neq_symm Dbneq1 Dbneq1'
      <- notin_lm_extend_lm Dnotin1 Dbneq1' Dlext Dnotin1'
      <- mextend_order Dmext1 Dorder2 Dorder1
      <- mextend_is_valid Dmext1 Disv Disv1
      <- impl_runfacs_extend_lm_mext Dirfs Dmext4 Dorder1 Daddsz Drepsz Dnateq
            Disv1 Dlext Dirfs' Dmext5.
impl_pc_extend_lm :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi Aeip:binary wwb. Pi PC:pc. Pi L1:loc. Pi B1:binary wwb. Pi LM1:locmap.
      impl_pc (corresp_info_ Nlim Sstart LM IM) Aeip PC
         -> locmap_extend LM L1 B1 LM1
         -> impl_pc (corresp_info_ Nlim Sstart LM1 IM) Aeip PC -> type.
- :
   impl_pc_extend_lm (impl_pc_ Dadd Drep Dlook) Dlext
      (impl_pc_ Dadd Drep Dlook1)
      <- lookup_loc_extend Dlook Dlext Dlook1.
stack_absent_extend :
   Pi M1:memory. Pi N1:nat. Pi B1:binary wwb. Pi S:string N1. Pi M2:memory.
      stack_absent M1 -> mextend* M1 B1 (section_valid hs S) M2
         -> stack_absent M2 -> type.
- : stack_absent_extend X1 mextend_nil (stack_absent_hs stack_absent_nil).
- :
   stack_absent_extend Dsabs (mextend_between X1 X2 X3) (stack_absent_hs Dsabs).
- :
   stack_absent_extend (stack_absent_hs Dsabs) (mextend_cons Dmext X1 X2 X3)
      (stack_absent_hs Dsabs1)
      <- stack_absent_extend Dsabs Dmext Dsabs1.
- :
   stack_absent_extend (stack_absent_cs Dsabs) (mextend_cons Dmext X1 X2 X3)
      (stack_absent_cs Dsabs1)
      <- stack_absent_extend Dsabs Dmext Dsabs1.
- :
   stack_absent_extend (stack_absent_reserved Dsabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_reserved Dsabs1)
      <- stack_absent_extend Dsabs Dmext Dsabs1.
impl_stack_extend_lm_mext :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi M1:memory.
      Pi Wesp:binary wwb. Pi V:val. Pi M2:memory. Pi N1:nat. Pi A:binary wwb.
      Pi S:string N1. Pi M2':memory. Pi B1:binary wwb. Pi A1:binary wwb.
      Pi Bsz:binary wwb. Pi A2:binary wwb. Pi Nsz:nat. Pi N2:nat. Pi L1:loc.
      Pi LM1:locmap. Pi M1':memory.
      impl_stack (corresp_info_ Nlim Sstart LM IM) M1 Wesp V M2
         -> mextend* M2 A (section_valid hs S) M2' -> memory_wf B1 M2
         -> add A1 Bsz A2 zero -> represents Nsz Bsz -> nat_eq Nsz (s N2)
         -> is_valid_addr* M2 A1 A2 -> locmap_extend LM L1 A1 LM1
         -> impl_stack (corresp_info_ Nlim Sstart LM1 IM) M1' Wesp V M2'
         -> mextend* M1 A (section_valid hs S) M1' -> type.
- :
   impl_stack_extend_lm_mext
      (impl_stack_ Dmext2 Dmext1 Dnotin2 Dnotin1 Dsabs Dreptr Daddtr Dival
          Dindex Drep1 Dadd1 Dadd2 Dadd3 Drep2)
      Dmext3 Dorder2 Daddsz Drepsz Dnateq Disv Dlext
      (impl_stack_ Dmext2' Dmext1' Dnotin2' Dnotin1' Dsabs1 Dreptr Daddtr Dival1
          Dindex Drep1 Dadd1 Dadd2 Dadd3 Drep2)
      Dmext5
      <- impl_val_extend_lm Dival Dlext Dival1
      <- mextend_reorder Dmext2 Dmext3 Dmext4 Dmext2'
      <- mextend_reorder Dmext1 Dmext4 Dmext5 Dmext1'
      <- stack_absent_extend Dsabs Dmext5 Dsabs1
      <- mextend_address_present Dmext2 Dapm2
      <- address_present_not_valid Dapm2 Dorder2 Daddsz Drepsz Dnateq Disv
            Dbneq2
      <- binary_neq_symm Dbneq2 Dbneq2'
      <- notin_lm_extend_lm Dnotin2 Dbneq2' Dlext Dnotin2'
      <- mextend_address_present Dmext1 Dapm1
      <- in_memory_mextend Dapm1 Dmext2 Dapm1'
      <- address_present_not_valid Dapm1' Dorder2 Daddsz Drepsz Dnateq Disv
            Dbneq1
      <- binary_neq_symm Dbneq1 Dbneq1'
      <- notin_lm_extend_lm Dnotin1 Dbneq1' Dlext Dnotin1'.
impl_rfile_extend_lm :
   Pi N1:nat. Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi R:regs (s N1). Pi R':rfile* N1. Pi S:string ww. Pi L1:loc.
      Pi B1:binary wwb. Pi LM1:locmap.
      impl_rfile (corresp_info_ Nlim Sstart LM IM) R R' S
         -> locmap_extend LM L1 B1 LM1
         -> impl_rfile (corresp_info_ Nlim Sstart LM1 IM) R R' S -> type.
- : impl_rfile_extend_lm impl_rfile_nil X1 impl_rfile_nil.
- :
   impl_rfile_extend_lm (impl_rfile_cons Dirf Dival) Dlext
      (impl_rfile_cons Dirf1 Dival1)
      <- impl_val_extend_lm Dival Dlext Dival1
      <- impl_rfile_extend_lm Dirf Dlext Dirf1.
get_valid_failure_addr_zero :
   Pi OR1:oracle. Pi H1:memory. Pi B1:binary wwb. Pi B2:binary wwb.
      Pi B:binary wwb. Pi OR2:oracle.
      get_valid_addr OR1 H1 B1 B2 zero B OR2 -> binary_eq B 0_32 -> type.
- : get_valid_failure_addr_zero (get_valid_addr_fail_ov X1) binary_eq_.
- : get_valid_failure_addr_zero (get_valid_addr_fail_i X1 X2 X3) binary_eq_.
- : get_valid_failure_addr_zero (get_valid_addr_fail_o X1 X2 X3 X4) binary_eq_.
- :
   get_valid_failure_addr_zero (get_valid_addr_invalid Dgv X1 X2 X3) Dbeq
      <- get_valid_failure_addr_zero Dgv Dbeq.
- :
   get_valid_failure_addr_zero (get_valid_addr_oracle Dgv X1 X2 X3 X4) Dbeq
      <- get_valid_failure_addr_zero Dgv Dbeq.
mextend_result :
   Pi N1:nat.
      corresp_info -> state -> machine -> string N1 -> loc -> val -> state
         -> type.
mextend_result_fail :
   mextend_result CI ST M S L V stopped <- mextend ST hs S stopped B1 zero.
mextend_result_success :
   mextend_result (corresp_info_ Nlim Sstart LM IM) ST (mach H (lc N) R1 PC) S L
      V ST1
      <- mextend ST hs S ST1 Astart one'
      <- locmap_extend LM L Astart LM1
      <- impl_machine (corresp_info_ Nlim Sstart LM1 IM) ST1
            (mach (hcons L V H) (lc (s N)) R1 PC).
can_mextend** :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi L':loc. Pi Nsz:nat.
      Pi S:string Nsz. Pi V:val. Pi Bsz:binary wwb. Pi N1:nat. Pi H':heap.
      Pi OR:oracle. Pi M:memory. Pi SUCC?:bit. Pi Astart:binary wwb.
      Pi OR':oracle. Pi ST1:state.
      impl_machine (corresp_info_ Nlim Sstart LM IM) ST (mach H L R PC)
         -> goodheap H -> nextloc H L L'
         -> impl_val (corresp_info_ Nlim Sstart LM IM) S V -> represents Nsz Bsz
         -> nat_eq Nsz (s N1) -> hextend H L V H' -> getoracle ST OR
         -> getmem ST M -> get_valid_addr OR M Bsz 0_32 SUCC? Astart OR'
         -> mextend_result (corresp_info_ Nlim Sstart LM IM) ST (mach H L R PC)
               S L V ST1
         -> type.
- :
   can_mextend** Dimach Dgh Dnl Dival Drep Dnateq hextend_ Dgo Dgm Dgv
      (mextend_result_fail (mextend_fail_nospace Dgv1 Dgo Dgm Drep))
      <- get_valid_failure_addr_zero Dgv Dbeq
      <- get_valid_addr_resp oracle_eq_ memory_eq_ binary_eq_ binary_eq_ 
bit_eq_
            Dbeq oracle_eq_ Dgv Dgv1.
- :
   can_mextend** Dimach Dgh (nextloc_ Dnewl) Dival Drep Dnateq hextend_
      getoracle_ getmem_ Dgv
      (mextend_result_success
          (impl_ Dicv1 Dorder' Digot1 Dipc1 Diconds Distack1 Dimp Dirfile1
              (impl_heap_cons Dmext3 impl_seg_hs Dsegof Dadd Drep Dival1 Dlook
                  Dgh1 Diheap1))
          Dlext (mextend_ putoracle_ putmem_ Dmext1 Dgv getoracle_ getmem_ Drep))
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Diconds Dipc
            Digot Dorder Dicv
      <- get_valid_is_valid Dgv Dadd Disv
      <- can_locmap_extend Dicv Dorder Dadd Drep Dnateq Disv (nextloc_ Dnewl)
            Dlext
      <- add_ident Astart is_zero_0_32 Dadd1
      <- is_valid_mextend Dorder Dadd1 Disv Dadd Drep Dnateq Snew Dmext1 Dorder'
      <- newloc_hseg Dnewl Dsegof
      <- goodheap_newloc' Dgh Dnewl Dgh1
      <- locmap_extend_lookup Dlext Dlook
      <- locmap_extend_corr_info_valid Dlext Dicv Dmext1 (nextloc_ Dnewl) Vnew
            Nlim Sstart IM Dicv1
      <- impl_got_extend_lm_mext Digot Dmext1 Dorder Dadd Drep Dnateq Disv Dlext
            Digot1 Dmext2
      <- impl_pc_extend_lm Dipc Dlext Dipc1
      <- impl_got_ptr_order Digot Dorder Dorder1
      <- impl_got_ptr_is_valid Digot Disv Disv1
      <- impl_stack_extend_lm_mext Distack Dmext2 Dorder1 Dadd Drep Dnateq Disv1
            Dlext Distack1 Dmext3
      <- impl_rfile_extend_lm Dirfile Dlext Dirfile1
      <- impl_val_extend_lm Dival Dlext Dival1
      <- impl_stack_order Distack Dorder1 Dorder2
      <- impl_stack_is_valid Distack Disv1 Disv2
      <- impl_heap_extend_lm Diheap Disv2 Dorder2 Dadd Drep Dnateq Dlext Diheap1.
can_mextend* :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi L':loc. Pi Nsz:nat.
      Pi S:string Nsz. Pi V:val. Pi N1:nat. Pi H':heap. Pi ST1:state.
      impl_machine (corresp_info_ Nlim Sstart LM IM) ST (mach H L R PC)
         -> goodheap H -> nextloc H L L'
         -> impl_val (corresp_info_ Nlim Sstart LM IM) S V -> nat_eq Nsz (s N1)
         -> maybe_representable Nsz wwb -> hextend H L V H'
         -> mextend_result (corresp_info_ Nlim Sstart LM IM) ST (mach H L R PC)
               S L V ST1
         -> type.
- :
   can_mextend* Dimach Dgh Dnextl Dival Dnateq (maybe_representable_yes Drep)
      Dhext Dmextres
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 X6 X7 Dorder X8
      <- can_negone 31' Bnegone Dino
      <- can_represents1 Bnegone N5 Drepn
      <- can_get_valid_addr OR1 Dorder represents_0_32 N5 sum_z Dino Drepn B3
            Dget
      <- can_mextend** Dimach Dgh Dnextl Dival Drep Dnateq Dhext getoracle_
            getmem_ Dget Dmextres.
- :
   can_mextend* Dimach Dgh Dnextl Dival Dnateq (maybe_representable_no Dunr)
      Dhext (mextend_result_fail (mextend_fail_toobig Dunr)).
can_mextend :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi L':loc. Pi Nsz:nat.
      Pi S:string Nsz. Pi V:val. Pi N1:nat. Pi H':heap. Pi ST1:state.
      impl_machine (corresp_info_ Nlim Sstart LM IM) ST (mach H L R PC)
         -> goodheap H -> nextloc H L L'
         -> impl_val (corresp_info_ Nlim Sstart LM IM) S V -> nat_eq Nsz (s N1)
         -> hextend H L V H'
         -> mextend_result (corresp_info_ Nlim Sstart LM IM) ST (mach H L R PC)
               S L V ST1
         -> type.
- :
   can_mextend Dimach Dgh Dnextl Dival Dnateq Dhext Dmextres
      <- decide_representable N2 31' Dmaybe
      <- can_mextend* Dimach Dgh Dnextl Dival Dnateq Dmaybe Dhext Dmextres.
false_implies_memory_wf :
   false -> Pi A:binary wwb. Pi M:memory. memory_wf A M -> type.
valid_extend_order :
   Pi A:binary wwb. Pi M:memory. Pi A1:binary wwb. Pi A2:binary wwb.
      Pi Bsz:binary wwb. Pi Nsz:nat. Pi N1:nat. Pi B1:binary wwb.
      Pi SECT:section Nsz. Pi M1:memory.
      memory_wf A M -> is_valid_addr* M A1 A2 -> add A1 Bsz A2 zero
         -> represents Nsz Bsz -> nat_eq Nsz (s N1) -> add A B1 A1 zero
         -> mextend* M A1 SECT M1 -> memory_wf A M1 -> type.
- :
   valid_extend_order X1 is_valid_addr_nil Dadd1 Drep X2 Dadd2 mextend_nil
      (memory_wf_cons memory_wf_nil Dadd1 Drep nat_eq_ Dadd2).
- :
   valid_extend_order (memory_wf_cons Dorder1 Dadd1 Drep1 Dnateq1 Dadd2)
      (is_valid_addr_between Disv Dadd3) Dadd4 Drep2 X1 Dadd5
      (mextend_between Dadd6 Dadd7 Drep3)
      (memory_wf_cons (memory_wf_cons Dorder1 Dadd1 Drep1 Dnateq1 Dadd3) Dadd4
          Drep2 nat_eq_ Dadd5).
- :
   valid_extend_order (memory_wf_cons Dorder1 Dadd1 Drep1 Dnateq1 Dadd2)
      (is_valid_addr_cons Disv Dadd3 Dadd4 Drep2) Dadd5 Drep3 Dnateq2 Dadd6
      (mextend_cons Dmext Dadd7 Dadd8 Drep4)
      (memory_wf_cons Dorder2 Dadd1 Drep1 Dnateq1 Dadd2)
      <- represents_fun2 Drep1 Drep2 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd1 Dadd9
      <- add_fun3 Dadd4 Dadd9 X1 Dbeq2
      <- add_resp Dbeq2 binary_eq_ binary_eq_ bit_eq_ Dadd3 Dadd10
      <- valid_extend_order Dorder1 Disv Dadd5 Drep3 Dnateq2 Dadd10 Dmext
            Dorder2.
- :
   valid_extend_order Dorder (is_valid_addr_cons Disv Dadd1 Dadd2 Drep1) Dadd3
      Drep2 Dadd4 X5 (mextend_between Dadd5 Dadd6 Drep3) Dorder1
      <- add_assoc Dadd6 Dadd5 Dadd7 Dadd8
      <- add_assoc Dadd8 Dadd2 Dadd9 Dadd10
      <- add_assoc Dadd10 Dadd1 Dadd11 Dadd12
      <- add_commute Dadd12 Dadd13
      <- add_ident B2 is_zero_0_32 Dadd14
      <- add_fun1 Dadd14 Dadd13 X4 Dbeq1
      <- is_zero_resp Dbeq1 is_zero_0_32 Diz1
      <- add_zero_sum Dadd11 Diz2 X3 Diz1
      <- add_zero_sum Dadd9 Diz3 X2 Diz2
      <- add_zero_sum Dadd7 Diz4 X1 Diz3
      <- represents_succ Drep3 Dinz
      <- zero_nonzero_contradict binary_eq_ Diz4 Dinz Dfalse
      <- false_implies_memory_wf Dfalse B1
            (mcons B2 (s N1) SECT1 (mcons B3 N2 SECT2 H1)) Dorder1.
- :
   valid_extend_order Dorder (is_valid_addr_between Disv Dadd1) Dadd2 Drep1
      nat_eq_ Dadd3 (mextend_cons Dmext Dadd4 Dadd5 Drep2) Dorder1
      <- add_assoc Dadd2 Dadd1 Dadd6 Dadd7
      <- add_assoc Dadd7 Dadd5 Dadd8 Dadd9
      <- add_assoc Dadd9 Dadd4 Dadd10 Dadd11
      <- add_commute Dadd11 Dadd12
      <- add_ident B10 is_zero_0_32 Dadd13
      <- add_fun1 Dadd13 Dadd12 X4 Dbeq1
      <- is_zero_resp Dbeq1 is_zero_0_32 Diz1
      <- add_zero_sum Dadd10 Diz2 X3 Diz1
      <- add_zero_sum Dadd8 Diz3 X2 Diz2
      <- add_zero_sum Dadd6 Diz4 X1 Diz3
      <- represents_succ Drep1 Dinz
      <- zero_nonzero_contradict binary_eq_ Diz4 Dinz Dfalse
      <- false_implies_memory_wf Dfalse B1 (mcons B2 N1 SECT1 H1) Dorder1.
is_valid_split :
   Pi M:memory. Pi A1:binary wwb. Pi A2:binary wwb. Pi B1:binary wwb.
      Pi A3:binary wwb. Pi B2:binary wwb.
      is_valid_addr* M A1 A2 -> add A1 B1 A3 zero -> add A3 B2 A2 zero
         -> is_valid_addr* M A1 A3 -> is_valid_addr* M A3 A2 -> type.
- :
   is_valid_split is_valid_addr_nil Dadd1 Dadd2 is_valid_addr_nil
      is_valid_addr_nil.
- :
   is_valid_split (is_valid_addr_between Disv1 Dadd1) Dadd2 Dadd3
      (is_valid_addr_between Disv2 Dadd4) (is_valid_addr_between Disv3 Dadd1)
      <- is_valid_split Disv1 Dadd2 Dadd3 Disv2 Disv3
      <- add_assoc Dadd3 Dadd1 X1 Dadd4.
- :
   is_valid_split (is_valid_addr_cons Disv1 Dadd1 Dadd2 Drep1) Dadd3 Dadd4
      (is_valid_addr_cons Disv2 Dadd1 Dadd2 Drep1)
      (is_valid_addr_cons Disv3 Dadd5 Dadd2 Drep1)
      <- is_valid_split Disv1 Dadd3 Dadd4 Disv2 Disv3
      <- add_assoc Dadd1 Dadd3 X1 Dadd5.
is_valid_postpone :
   Pi M1:memory. Pi A1:binary wwb. Pi A2:binary wwb. Pi Nsz:nat.
      Pi Bsz:binary wwb. Pi A3:binary wwb. Pi A4:binary wwb. Pi B1:binary wwb.
      Pi SECT:section Nsz. Pi M2:memory.
      is_valid_addr* M1 A1 A2 -> represents Nsz Bsz -> add A3 Bsz A4 zero
         -> add A4 B1 A1 zero -> mextend* M1 A3 SECT M2
         -> is_valid_addr* M2 A1 A2 -> type.
- :
   is_valid_postpone is_valid_addr_nil Drep Dadd1 Dadd2 mextend_nil
      (is_valid_addr_cons is_valid_addr_nil Dadd2 Dadd1 Drep).
- :
   is_valid_postpone Disv1 Drep1 Dadd1 Dadd2 (mextend_between Dadd3 Dadd4 Drep2)
      (is_valid_addr_cons Disv1 Dadd2 Dadd1 Drep1).
- :
   is_valid_postpone (is_valid_addr_cons Disv1 Dadd1 Dadd2 Drep1) Drep2 Dadd3
      Dadd4 (mextend_cons Dmext Dadd5 Dadd6 Drep3)
      (is_valid_addr_cons Disv2 Dadd1 Dadd2 Drep1)
      <- is_valid_postpone Disv1 Drep2 Dadd3 Dadd4 Dmext Disv2.
- :
   is_valid_postpone (is_valid_addr_between Disv1 Dadd1) Drep1 Dadd2 Dadd3
      (mextend_cons Dmext Dadd4 Dadd5 Drep2) (is_valid_addr_between Disv2 Dadd1)
      <- is_valid_postpone Disv1 Drep1 Dadd2 Dadd3 Dmext Disv2.
can_zstore :
   Pi Nlimit:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi H:memory.
      Pi R:regs numregs. Pi FR:flags. Pi Aeip:binary wwb. Pi OR:oracle.
      Pi H1:heap. Pi L:loc. Pi R1:rfile. Pi PC:pc. Pi Z:val. Pi Nsz:nat.
      Pi Njunk:nat. Pi N:nat. Pi V1:val. Pi V23:val. Pi M:nat. Pi V2:val.
      Pi V3:val. Pi W:string (s M). Pi V:val. Pi V23':val. Pi Z':val.
      Pi R1':rfile. Pi Nact:nat. Pi Bact:binary wwb. Pi Astore:binary wwb.
      Pi ST1:state.
      impl_machine (corresp_info_ Nlimit Astart LM IM) (state_ H R FR Aeip OR)
         (mach H1 L R1 PC)
         -> zlookup R1 Z -> size Z Nsz -> sum Njunk Nsz Nlimit
         -> separate N Z V1 V23 -> separate (s M) V23 V2 V3
         -> impl_val (corresp_info_ Nlimit Astart LM IM) W V -> append V V3 V23'
         -> append V1 V23' Z' -> zupdate R1 Z' R1' -> sum Njunk N Nact
         -> represents Nact Bact -> add Astart Bact Astore zero
         -> mstore (state_ H R FR Aeip OR) Astore W ST1
         -> impl_machine (corresp_info_ Nlimit Astart LM IM) ST1
               (mach H1 L R1' PC) -> type.
- :
   can_zstore Dimach zlookup_ Dsize Dsum1 Dsep1 Dsep2 Dimplval Dapp2 Dapp1
      zupdate_ Dsum2 Drep3' Dadd4 (mstore_ putmem_ Dmst1 getmem_)
      (impl_ Dicv1 Dorder1 Digot1 Dipc Diconds
          (impl_stack_ Dmext2n Dmext1 Dnotin2 Dnotin1 Dabs Dreptr Daddtr Divaln'
              Dindexn' Drep2 Dadd3 Dadd2 Dadd1 Drep1)
          Dimp Dirfile Diheap)
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Diconds Dipc
            Digot Dorder Dicv
      <- extract_stack Distack Drep1 Dadd1 Dadd2 Dadd3 Drep2 Dindex Dival Daddtr
            Dreptr Dabs Dnotin1 Dnotin2 Dmext1 Dmext2
      <- str_val_size_corr' Sstack Dival Dsize Dnateq1
      <- string_resp Dnateq1 Sstack S12 Dseq1
      <- impl_val_resp Dseq1 val_eq_ Dival Dival'
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dindex Dindex'
      <- can_index Dival' Dsep1 Dindex1 Dival2 Dival3
      <- can_index Dival3 Dsep2 Dindex2 X1 Dival4
      <- can_index'' Dival3n Dapp2 Dindex2n Dimplval Dival4
      <- can_index'' Divaln Dapp1 Dindex1n Dival2 Dival3n
      <- index_implies_sum Dindex2 Dsum3
      <- index_implies_sum Dindex2n Dsum4
      <- sum_fun3 Dsum4 Dsum3 Dnateq2
      <- string_resp Dnateq2 S8 S6 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex1n Dindex1n'
      <- index_implies_sum Dindex1 Dsum5
      <- index_implies_sum Dindex1n' Dsum6
      <- sum_fun3 Dsum6 Dsum5 Dnateq3
      <- nat_eq_symm Dnateq1 Dnateq1'
      <- nat_eq_trans Dnateq3 Dnateq1' Dnateq4
      <- string_resp Dnateq4 S11 Sstackn Dseq3
      <- impl_val_resp Dseq3 val_eq_ Divaln Divaln'
      <- string_compose Sjunk Sstackn Dindexn
      <- index_implies_sum Dindex Dsum7
      <- index_implies_sum Dindexn Dsum8
      <- sum_fun3 Dsum8 Dsum7 Dnateq5
      <- string_resp Dnateq5 S13 S7 Dseq4
      <- index_resp nat_eq_ Dseq4 string_eq_ string_eq_ Dindexn Dindexn'
      <- can_sum Njunk N6 N4 Dsum9
      <- index_compose' Dindex' Dindex1 Dsum9 Dindex1j Dindex3
      <- index_resp nat_eq_ Dseq3 string_eq_ string_eq_ Dindex1n' Dindex1n''
      <- index_compose' Dindexn' Dindex1n'' Dsum9 Dindex1jn Dindex4
      <- index_fun' Dindex3 Dindex4 string_eq_ string_eq_ nat_eq_ Dseq5
      <- index_resp nat_eq_ string_eq_ Dseq5 string_eq_ Dindex1j Dindex1j'
      <- index_implies_sum Dindex1j' Dsum10
      <- sum_implies_leq Dsum10 Dleq1
      <- can_represents Dleq1 Drep1 Drep3
      <- can_represents1 B1 N13 Drep4
      <- sum_add_corr3 Drep4 Drep1 Drep5 Dsum11 Dadd2
      <- leq_reflex N13 Dleq2
      <- can_sum N13 N4 N14 Dsum12
      <- sum_leq Dsum12 Dsum11 Dleq2 Dleq1 Dleq3
      <- can_represents Dleq3 Drep5 Drep6
      <- sum_add_corr Drep4 Drep3 Drep6 Dsum12 Dadd4
      <- index_resp nat_eq_ Dseq2 string_eq_ string_eq_ Dindex2n Dindex2n'
      <- can_mstore** Dmext2 Dindex1j' Dindex2 Dindex2n' Dindex1jn Drep3 Dadd4
            Dmst Dmext2n
      <- postpone_mstore_got Dmst Digot Dmst1 Digot1
      <- mstore_preserves_order Dorder Dmst1 Dorder1
      <- sum_resp nat_eq_ Dnateq1 nat_eq_ Dsum7 Dsum7'
      <- sum_fun1 Dsum1 Dsum7' Dnateq6
      <- sum_resp Dnateq6 nat_eq_ nat_eq_ Dsum2 Dsum2'
      <- sum_fun3 Dsum9 Dsum2' Dnateq7
      <- represents_resp Dnateq7 binary_eq_ Drep3 Drep3'
      <- corresp_info_valid_update' Dicv Dmst1 Dicv1.
mextend_stack_section :
   Pi H:memory. Pi N:nat. Pi Astart:binary wwb. Pi S:string N. Pi H1:memory.
      stack_absent H -> mextend* H Astart (section_valid ss S) H1
         -> stack_section H1 Astart N S -> type.
-h : mextend_stack_section X1 mextend_nil (stack_section_hit stack_absent_nil).
-b :
   mextend_stack_section Dabs (mextend_between X1 X2 X3)
      (stack_section_hit Dabs).
-cc :
   mextend_stack_section (stack_absent_cs Dabs) (mextend_cons Dmext X1 X2 X3)
      (stack_section_cs Dssect)
      <- mextend_stack_section Dabs Dmext Dssect.
-ch :
   mextend_stack_section (stack_absent_hs Dabs) (mextend_cons Dmext X1 X2 X3)
      (stack_section_hs Dssect)
      <- mextend_stack_section Dabs Dmext Dssect.
-cr :
   mextend_stack_section (stack_absent_reserved Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_section_reserved Dssect)
      <- mextend_stack_section Dabs Dmext Dssect.
stack_absent_reserved_extension :
   Pi H:memory. Pi N1:nat. Pi A:binary wwb. Pi RSECT1:rsection N1. Pi H1:memory.
      stack_absent H -> mextend* H A (section_reserved RSECT1) H1
         -> stack_absent H1 -> type.
-n :
   stack_absent_reserved_extension Dabs mextend_nil (stack_absent_reserved Dabs).
-b :
   stack_absent_reserved_extension Dabs (mextend_between X1 X2 X3)
      (stack_absent_reserved Dabs).
-cc :
   stack_absent_reserved_extension (stack_absent_cs Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_cs Dabs1)
      <- stack_absent_reserved_extension Dabs Dmext Dabs1.
-ch :
   stack_absent_reserved_extension (stack_absent_hs Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_hs Dabs1)
      <- stack_absent_reserved_extension Dabs Dmext Dabs1.
-cr :
   stack_absent_reserved_extension (stack_absent_reserved Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_reserved Dabs1)
      <- stack_absent_reserved_extension Dabs Dmext Dabs1.
stack_absent_cs_extension :
   Pi H:memory. Pi N1:nat. Pi A:binary wwb. Pi S1:string N1. Pi H1:memory.
      stack_absent H -> mextend* H A (section_valid cs S1) H1 -> stack_absent H1
         -> type.
-n : stack_absent_cs_extension Dabs mextend_nil (stack_absent_cs Dabs).
-b :
   stack_absent_cs_extension Dabs (mextend_between X1 X2 X3)
      (stack_absent_cs Dabs).
-cc :
   stack_absent_cs_extension (stack_absent_cs Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_cs Dabs1)
      <- stack_absent_cs_extension Dabs Dmext Dabs1.
-ch :
   stack_absent_cs_extension (stack_absent_hs Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_hs Dabs1)
      <- stack_absent_cs_extension Dabs Dmext Dabs1.
-cr :
   stack_absent_cs_extension (stack_absent_reserved Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_reserved Dabs1)
      <- stack_absent_cs_extension Dabs Dmext Dabs1.
stack_section_cs_extension :
   Pi H:memory. Pi Astart:binary wwb. Pi N:nat. Pi S:string N. Pi N1:nat.
      Pi A:binary wwb. Pi S1:string N1. Pi H1:memory.
      stack_section H Astart N S -> mextend* H A (section_valid cs S1) H1
         -> stack_section H1 Astart N S -> type.
-b :
   stack_section_cs_extension Dssect (mextend_between X1 X2 X3)
      (stack_section_cs Dssect).
-h :
   stack_section_cs_extension (stack_section_hit Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_section_hit Dabs1)
      <- stack_absent_cs_extension Dabs Dmext Dabs1.
-cc :
   stack_section_cs_extension (stack_section_cs Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_cs Dssect1)
      <- stack_section_cs_extension Dssect Dmext Dssect1.
-ch :
   stack_section_cs_extension (stack_section_hs Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_hs Dssect1)
      <- stack_section_cs_extension Dssect Dmext Dssect1.
-cr :
   stack_section_cs_extension (stack_section_reserved Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_reserved Dssect1)
      <- stack_section_cs_extension Dssect Dmext Dssect1.
stack_section_reserved_extension :
   Pi H:memory. Pi Astart:binary wwb. Pi N:nat. Pi S:string N. Pi N1:nat.
      Pi A:binary wwb. Pi RSECT1:rsection N1. Pi H1:memory.
      stack_section H Astart N S -> mextend* H A (section_reserved RSECT1) H1
         -> stack_section H1 Astart N S -> type.
-b :
   stack_section_reserved_extension Dssect (mextend_between X1 X2 X3)
      (stack_section_reserved Dssect).
-h :
   stack_section_reserved_extension (stack_section_hit Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_section_hit Dabs1)
      <- stack_absent_reserved_extension Dabs Dmext Dabs1.
-cc :
   stack_section_reserved_extension (stack_section_cs Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_cs Dssect1)
      <- stack_section_reserved_extension Dssect Dmext Dssect1.
-ch :
   stack_section_reserved_extension (stack_section_hs Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_hs Dssect1)
      <- stack_section_reserved_extension Dssect Dmext Dssect1.
-cr :
   stack_section_reserved_extension (stack_section_reserved Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_reserved Dssect1)
      <- stack_section_reserved_extension Dssect Dmext Dssect1.
stack_absent_reserved_extension' :
   Pi H:memory. Pi N1:nat. Pi A:binary wwb. Pi RSECT1:rsection N1. Pi H1:memory.
      stack_absent H -> mextend* H A (section_reserved RSECT1) H1
         -> stack_absent H1 -> type.
-n :
   stack_absent_reserved_extension' Dabs mextend_nil
      (stack_absent_reserved Dabs).
-b :
   stack_absent_reserved_extension' Dabs (mextend_between X1 X2 X3)
      (stack_absent_reserved Dabs).
-cc :
   stack_absent_reserved_extension' (stack_absent_cs Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_cs Dabs1)
      <- stack_absent_reserved_extension' Dabs Dmext Dabs1.
-ch :
   stack_absent_reserved_extension' (stack_absent_hs Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_hs Dabs1)
      <- stack_absent_reserved_extension' Dabs Dmext Dabs1.
-cr :
   stack_absent_reserved_extension' (stack_absent_reserved Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_reserved Dabs1)
      <- stack_absent_reserved_extension' Dabs Dmext Dabs1.
stack_absent_cs_extension' :
   Pi H:memory. Pi N1:nat. Pi A:binary wwb. Pi S1:string N1. Pi H1:memory.
      stack_absent H -> mextend* H A (section_valid cs S1) H1 -> stack_absent H1
         -> type.
-n : stack_absent_cs_extension' Dabs mextend_nil (stack_absent_cs Dabs).
-b :
   stack_absent_cs_extension' Dabs (mextend_between X1 X2 X3)
      (stack_absent_cs Dabs).
-cc :
   stack_absent_cs_extension' (stack_absent_cs Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_cs Dabs1)
      <- stack_absent_cs_extension' Dabs Dmext Dabs1.
-ch :
   stack_absent_cs_extension' (stack_absent_hs Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_hs Dabs1)
      <- stack_absent_cs_extension' Dabs Dmext Dabs1.
-cr :
   stack_absent_cs_extension' (stack_absent_reserved Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_absent_reserved Dabs1)
      <- stack_absent_cs_extension' Dabs Dmext Dabs1.
stack_section_cs_extension' :
   Pi H:memory. Pi Astart:binary wwb. Pi N:nat. Pi S:string N. Pi N1:nat.
      Pi A:binary wwb. Pi S1:string N1. Pi H1:memory.
      stack_section H Astart N S -> mextend* H A (section_valid cs S1) H1
         -> stack_section H1 Astart N S -> type.
-b :
   stack_section_cs_extension' Dssect (mextend_between X1 X2 X3)
      (stack_section_cs Dssect).
-h :
   stack_section_cs_extension' (stack_section_hit Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_section_hit Dabs1)
      <- stack_absent_cs_extension' Dabs Dmext Dabs1.
-cc :
   stack_section_cs_extension' (stack_section_cs Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_cs Dssect1)
      <- stack_section_cs_extension' Dssect Dmext Dssect1.
-ch :
   stack_section_cs_extension' (stack_section_hs Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_hs Dssect1)
      <- stack_section_cs_extension' Dssect Dmext Dssect1.
-cr :
   stack_section_cs_extension' (stack_section_reserved Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_reserved Dssect1)
      <- stack_section_cs_extension' Dssect Dmext Dssect1.
stack_section_reserved_extension' :
   Pi H:memory. Pi Astart:binary wwb. Pi N:nat. Pi S:string N. Pi N1:nat.
      Pi A:binary wwb. Pi RSECT1:rsection N1. Pi H1:memory.
      stack_section H Astart N S -> mextend* H A (section_reserved RSECT1) H1
         -> stack_section H1 Astart N S -> type.
-b :
   stack_section_reserved_extension' Dssect (mextend_between X1 X2 X3)
      (stack_section_reserved Dssect).
-h :
   stack_section_reserved_extension' (stack_section_hit Dabs)
      (mextend_cons Dmext X1 X2 X3) (stack_section_hit Dabs1)
      <- stack_absent_reserved_extension' Dabs Dmext Dabs1.
-cc :
   stack_section_reserved_extension' (stack_section_cs Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_cs Dssect1)
      <- stack_section_reserved_extension' Dssect Dmext Dssect1.
-ch :
   stack_section_reserved_extension' (stack_section_hs Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_hs Dssect1)
      <- stack_section_reserved_extension' Dssect Dmext Dssect1.
-cr :
   stack_section_reserved_extension' (stack_section_reserved Dssect)
      (mextend_cons Dmext X1 X2 X3) (stack_section_reserved Dssect1)
      <- stack_section_reserved_extension' Dssect Dmext Dssect1.
postpone_stack_section_impl_runfacs :
   Pi H:memory. Pi Astart:binary wwb. Pi N:nat. Pi S:string N. Pi N1:nat.
      Pi N2:nat. Pi IM1:irfmap. Pi LM1:locmap. Pi H1:memory. Pi S1:string N1.
      stack_section H Astart N S -> impl_runfacs N2 IM1 LM1 H H1 S1
         -> stack_section H1 Astart N S -> type.
- : postpone_stack_section_impl_runfacs D impl_runfacs_z D.
- :
   postpone_stack_section_impl_runfacs D1
      (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) D3
      <- postpone_stack_section_impl_runfacs D1 Dirfs D2
      <- stack_section_reserved_extension D2 Dmext D3.
postpone_stack_section_got :
   Pi H:memory. Pi Astart:binary wwb. Pi N:nat. Pi S:string N.
      Pi CI:corresp_info. Pi H1:memory.
      stack_section H Astart N S -> impl_got_ptr CI H H1
         -> stack_section H1 Astart N S -> type.
- :
   postpone_stack_section_got Dssect (impl_got_ptr_ Dmext1 Dnotin1 Dlookg Dirfs)
      Dssect2
      <- postpone_stack_section_impl_runfacs Dssect Dirfs Dssect1
      <- stack_section_cs_extension Dssect1 Dmext1 Dssect2.
prepone_stack_section_impl_runfacs :
   Pi H:memory. Pi Astart:binary wwb. Pi N:nat. Pi S:string N. Pi N1:nat.
      Pi N2:nat. Pi IM1:irfmap. Pi LM1:locmap. Pi H1:memory. Pi S1:string N1.
      stack_section H Astart N S -> impl_runfacs N2 IM1 LM1 H H1 S1
         -> stack_section H1 Astart N S -> type.
- : prepone_stack_section_impl_runfacs D impl_runfacs_z D.
- :
   prepone_stack_section_impl_runfacs D1
      (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) D3
      <- stack_section_reserved_extension' D2 Dmext D3
      <- prepone_stack_section_impl_runfacs D1 Dirfs D2.
prepone_stack_section_got :
   Pi H:memory. Pi Astart:binary wwb. Pi N:nat. Pi S:string N.
      Pi CI:corresp_info. Pi H1:memory.
      stack_section H Astart N S -> impl_got_ptr CI H H1
         -> stack_section H1 Astart N S -> type.
- :
   prepone_stack_section_got Dssect (impl_got_ptr_ Dmext1 Dnotin1 Dlookg Dirfs)
      Dssect2
      <- stack_section_cs_extension' Dssect1 Dmext1 Dssect2
      <- prepone_stack_section_impl_runfacs Dssect Dirfs Dssect1.
can_zget :
   Pi Nsize:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi H:memory.
      Pi R:regs numregs. Pi FR:flags. Pi Aeip:binary wwb. Pi OR:oracle.
      Pi M:machine. Pi Wesp:string ww. Pi AWesp:binary wwb.
      Pi Sall:string Nsize. Pi Boffset:binary wwb. Pi Noffset:nat. Pi N1:nat.
      Pi S1:string Noffset. Pi S:string N1.
      impl_machine (corresp_info_ Nsize Astart LM IM) (state_ H R FR Aeip OR) M
         -> rload* R esp Wesp -> implode_word Wesp AWesp
         -> stack_section H Astart Nsize Sall -> add Astart Boffset AWesp zero
         -> represents Noffset Boffset -> index Noffset Sall S1 S -> type.
- :
   can_zget Dimach Drload Dimp Dssect1 Dadd Drep Dindex
      <- extract_implement_parts Dimach X9 Dirfile Dimp Distack X10 X11 Digot
            X12 X13
      <- extract_stack Distack X1 X2 X3 Dadd Drep Dindex X4 X5 X6 Dabs X7 X8
            Dmext1 Dmext2
      <- rload_esp Dirfile Drload
      <- stack_absent_reserved_extension Dabs Dmext1 Dabs1
      <- mextend_stack_section Dabs1 Dmext2 Dssect
      <- postpone_stack_section_got Dssect Digot Dssect1.
can_zget_impl :
   Pi Nsize:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi H:memory.
      Pi R:regs numregs. Pi FR:flags. Pi Aeip:binary wwb. Pi OR:oracle.
      Pi H1:heap. Pi L1:loc. Pi Rabs:rfile. Pi PC1:pc. Pi Z:val.
      Pi Wesp:string ww. Pi AWesp:binary wwb. Pi Sall:string Nsize.
      Pi Boffset:binary wwb. Pi Noffset:nat. Pi N1:nat. Pi S1:string Noffset.
      Pi S:string N1.
      impl_machine (corresp_info_ Nsize Astart LM IM) (state_ H R FR Aeip OR)
         (mach H1 L1 Rabs PC1)
         -> zlookup Rabs Z -> rload* R esp Wesp -> implode_word Wesp AWesp
         -> stack_section H Astart Nsize Sall -> add Astart Boffset AWesp zero
         -> represents Noffset Boffset -> index Noffset Sall S1 S
         -> impl_val (corresp_info_ Nsize Astart LM IM) S Z -> type.
- :
   can_zget_impl Dimach zlookup_ Drload Dimp Dssect1 Dadd Drep Dindex Dival
      <- extract_implement_parts Dimach X8 Dirfile Dimp Distack X9 X10 Digot X11
            X12
      <- extract_stack Distack X1 X2 X3 Dadd Drep Dindex Dival X4 X5 Dabs X6 X7
            Dmext1 Dmext2
      <- rload_esp Dirfile Drload
      <- stack_absent_reserved_extension Dabs Dmext1 Dabs1
      <- mextend_stack_section Dabs1 Dmext2 Dssect
      <- postpone_stack_section_got Dssect Digot Dssect1.
can_zpop :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi Z:val. Pi N:nat. Pi V:val. Pi Z':val. Pi R':rfile. Pi B:binary wwb.
      Pi N1:nat. Pi W:string ww. Pi A:binary wwb. Pi S1:string N.
      Pi A1:binary wwb. Pi M:memory. Pi Astart:binary wwb. Pi Nsz:nat.
      Pi Sstack:string Nsz. Pi Bsz:binary wwb. Pi Aend:binary wwb.
      Pi B1:binary wwb. Pi B2:binary wwb. Pi W1:string ww. Pi ST1:state.
      impl_machine CI ST (mach H L R PC) -> zlookup R Z -> separate N Z V Z'
         -> zupdate R Z' R' -> represents N B -> nat_eq N (s N1)
         -> rload ST esp W -> implode_word W A -> mload ST A N S1
         -> add A B A1 zero -> getmem ST M -> stack_section M Astart Nsz Sstack
         -> represents Nsz Bsz -> add Astart Bsz Aend zero
         -> add Astart B1 A1 zero -> add A1 B2 Aend zero -> implode_word W1 A1
         -> rstore ST esp W1 ST1 -> impl_val CI S1 V
         -> impl_machine CI ST1 (mach H L R' PC) -> type.
- :
   can_zpop Dimach zlookup_ Dsep zupdate_ Drep nat_eq_ (rload_ Drl getregs_)
      Dimp (mload_ Dindex4 Dml3 getmem_) Dadd12 getmem_ Dssect2 Drep1 Dadd2
      Dadd8' Dadd9' Dimp1 (rstore_ putregs_ Drstore getregs_) Dival2
      (impl_ Dicv Dorder Digot Dipc Diconds
          (impl_stack_ Dmext2 Dmext1 Dnotin2 Dnotin1 Dsabs Dreptr Daddtr Dival3
              Dindex5 Drep5 Dadd8' Dadd2 Dadd1 Drep1)
          Dimp1 Dirfile1 Diheap)
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Diconds Dipc
            Digot Dorder Dicv
      <- extract_stack Distack Drep1 Dadd1 Dadd2 Dadd3 Drep2 Dindex1 Dival1
            Daddtr Dreptr Dsabs Dnotin1 Dnotin2 Dmext1 Dmext2
      <- rload_esp Dirfile Drl
      <- mextend_mload Dmext2 Dml1 Dsegof
      <- can_index Dival1 Dsep Dindex2 Dival2 Dival3
      <- index_implies_sum Dindex2 Dsum1
      <- sum_nonzero Dsum1 Dnateq1
      <- string_resp Dnateq1 S9 S3 Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dindex1 Dindex3
      <- mload*_part Dml1 Dindex3 Drep2 Dadd3 Dml2
      <- postpone_mload_got Dml2 Digot Dml3
      <- index_resp nat_eq_ Dseq1 string_eq_ string_eq_ Dindex2 Dindex4
      <- index_implies_sum Dindex1 Dsum2
      <- sum_commute Dsum2 Dsum2'
      <- sum_implies_leq Dsum2' Dleq1
      <- can_represents Dleq1 Drep1 Drep3
      <- sum_commute Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq2
      <- can_represents Dleq2 Drep3 Drep4
      <- sum_add_corr Drep4 Drep Drep3 Dsum1' Dadd4
      <- sum_add_corr Drep3 Drep2 Drep1 Dsum2' Dadd5
      <- add_assoc Dadd4 Dadd5 Dadd6 Dadd7
      <- add_commute Dadd7 Dadd7'
      <- add_commute Dadd2 Dadd2'
      <- add_assoc Dadd7 Dadd2' Dadd8 Dadd9
      <- add_assoc Dadd6 Dadd8 Dadd10 Dadd11
      <- add_commute Dadd10 Dadd10'
      <- add_fun3 Dadd10' Dadd3 X1 Dbeq1
      <- add_commute Dadd11 Dadd11'
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd11' Dadd12
      <- binary_word_to_word B5 Dimp1
      <- stack_absent_reserved_extension Dsabs Dmext1 Dsabs1
      <- mextend_stack_section Dsabs1 Dmext2 Dssect1
      <- postpone_stack_section_got Dssect1 Digot Dssect2
      <- rstore_esp S8 Dirfile Drstore Dirfile1
      <- add_commute Dadd8 Dadd8'
      <- add_commute Dadd9 Dadd9'
      <- index_compose Dindex3 Dindex4 Dsum3 Dindex5
      <- add_commute Dadd6 Dadd6'
      <- sum_add_corr5 Drep2 Drep Drep5 Dsum3 Dadd6'.
mextend_trap :
   Pi Nsz:nat. Pi H1:memory. Pi Atrap:binary wwb. Pi H2:memory.
      Pi Bsz:binary wwb. Pi Bdiff:binary wwb. Pi A:binary wwb.
      Pi Brest:binary wwb.
      mextend* H1 Atrap (section_reserved rsection_trappage) H2
         -> represents Nsz Bsz -> add Atrap Bdiff A zero
         -> add Bdiff Brest Bsz zero -> is_nonzero Brest -> trap_address H2 A
         -> type.
-n :
   mextend_trap mextend_nil Drep1 Dadd1 Dadd2 Dinz
      (trap_address_hit Dlt1 Drep2 Dadd1)
      <- sum_add_corr4 Drep2 Drep3 Drep1 Dsum1 Dadd2
      <- represents_nonzero Dinz Drep3 Dnateq1
      <- sum_resp nat_eq_ Dnateq1 nat_eq_ Dsum1 Dsum2
      <- sum_implies_lt Dsum2 Dlt1.
-b :
   mextend_trap (mextend_between X1 X2 X3) Drep1 Dadd1 Dadd2 Dinz
      (trap_address_hit Dlt1 Drep2 Dadd1)
      <- sum_add_corr4 Drep2 Drep3 Drep1 Dsum1 Dadd2
      <- represents_nonzero Dinz Drep3 Dnateq1
      <- sum_resp nat_eq_ Dnateq1 nat_eq_ Dsum1 Dsum2
      <- sum_implies_lt Dsum2 Dlt1.
-c :
   mextend_trap (mextend_cons Dmext Dadd1 Dadd2 Drep1) Drep2 Dadd3 Dadd4 Dinz
      (trap_address_miss Dtrap Dadd5 Dadd2 Drep1)
      <- mextend_trap Dmext Drep2 Dadd3 Dadd4 Dinz Dtrap
      <- add_assoc Dadd1 Dadd3 X1 Dadd5.
postpone_trap :
   Pi H1:memory. Pi A:binary wwb. Pi N1:nat. Pi B1:binary wwb.
      Pi SECT1:section N1. Pi H2:memory.
      trap_address H1 A -> mextend* H1 B1 SECT1 H2 -> trap_address H2 A -> type.
-c :
   postpone_trap (trap_address_hit Dlt Drep1 Dadd1) (mextend_cons X1 X2 X3 X4)
      (trap_address_hit Dlt Drep1 Dadd1).
-bh :
   postpone_trap (trap_address_hit Dlt Drep1 Dadd1)
      (mextend_between Dadd2 Dadd3 Drep2)
      (trap_address_miss (trap_address_hit Dlt Drep1 Dadd1) Dadd4 Dadd3 Drep2)
      <- add_assoc Dadd2 Dadd1 X1 Dadd4.
-cm :
   postpone_trap (trap_address_miss Dtrap Dadd1 Dadd2 Drep1)
      (mextend_cons Dmext X1 X2 X3) (trap_address_miss Dtrap1 Dadd1 Dadd2 Drep1)
      <- postpone_trap Dtrap Dmext Dtrap1.
-bm :
   postpone_trap (trap_address_miss Dtrap Dadd3 Dadd4 Drep2)
      (mextend_between Dadd1 Dadd2 Drep1)
      (trap_address_miss (trap_address_miss Dtrap Dadd3 Dadd4 Drep2) Dadd6 Dadd2
          Drep1)
      <- add_assoc Dadd1 Dadd4 X2 Dadd5
      <- add_assoc Dadd5 Dadd3 X1 Dadd6.
trap_or_valid_stack : memory -> binary wwb -> type.
trap_or_valid_stack_trap : trap_or_valid_stack M A <- trap_address M A.
trap_or_valid_stack_valid :
   trap_or_valid_stack M A
      <- stack_section M Astart Nsz Sstack
      <- represents Nsz Bsz
      <- add Astart Bsz Aend B3
      <- add Astart B2 A zero
      <- add A B1 Aend zero.
can_decide_trap* :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi H:memory.
      Pi Wesp:binary wwb. Pi V:val. Pi H1:memory. Pi Ainit:binary wwb.
      Pi Bdiff:binary wwb. Pi B1:binary wwb. Pi CARRY:bit. Pi B2:binary wwb.
      impl_stack (corresp_info_ Nlim Astart LM IM) H Wesp V H1
         -> add Ainit Bdiff Wesp zero -> add Astart B1 Ainit CARRY
         -> add Bdiff B2 overflow_lim zero -> trap_or_valid_stack H1 Ainit
         -> type.
-1 :
   can_decide_trap* Distack Dadd1 Dadd2 Dadd3 (trap_or_valid_stack_trap Dtrap1)
      <- add_carry_nonzero Dadd2 Dinz1 Dinz2
      <- can_neg_nonzero Boffs BoffsN Dinz2 Dneg1
      <- add_commute Dadd2 Dadd2'
      <- add_invert Dadd2' Dneg1 flipbit_one Dadd4
      <- add_commute Dadd4 Dadd4'
      <- extract_stack Distack X4 X5 X6 Dadd5 X7 X8 X9 Daddtr Dreptr X10 X11 X12
            Dmext1 Dmext2
      <- add_assoc Dadd4' Dadd5 Dadd6 Dadd7
      <- add_commute Dadd1 Dadd1'
      <- add_commute Dadd7 Dadd7'
      <- add_fun1 Dadd7' Dadd1' X3 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd6 Dadd8
      <- add_assoc Dadd8 Dadd3 Dadd9 Dadd10
      <- add_commute Daddtr Daddtr'
      <- add_assoc Dadd10 Daddtr' Dadd11 Dadd12
      <- add_commute Dadd12 Dadd12'
      <- add_fun1 Dadd12' Dadd4' X2 Dbeq2
      <- add_commute Dadd11 Dadd11'
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd11' Dadd13
      <- add_commute Dadd10 Dadd10'
      <- neg_nocarry_nonzero Dneg1 X1 Dinz3
      <- mextend_trap Dmext1 Dreptr Dadd13 Dadd10' Dinz3 Dtrap
      <- postpone_trap Dtrap Dmext2 Dtrap1.
-0 :
   can_decide_trap* Distack Dadd1 Dadd2 Drep1
      (trap_or_valid_stack_valid Dadd10 Dadd2 Dadd3 Drep2 Dssect)
      <- extract_stack Distack Drep2 X2 Dadd3 Dadd4 Drep3 Dindex X3 X4 X5 Dsabs
            X6 X7 Dmext1 Dmext2
      <- stack_absent_reserved_extension Dsabs Dmext1 Dsabs1
      <- mextend_stack_section Dsabs1 Dmext2 Dssect
      <- index_implies_sum Dindex Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq1
      <- can_represents Dleq1 Drep2 Drep4
      <- sum_add_corr Drep3 Drep4 Drep2 Dsum1 Dadd5
      <- add_commute Dadd5 Dadd5'
      <- add_commute Dadd3 Dadd3'
      <- add_assoc Dadd5' Dadd3' Dadd6 Dadd7
      <- add_commute Dadd6 Dadd6'
      <- add_fun3 Dadd6' Dadd4 X1 Dbeq1
      <- add_commute Dadd7 Dadd7'
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd7' Dadd8
      <- add_assoc Dadd1 Dadd8 Dadd9 Dadd10.
get_stack_store_address :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi H1:memory.
      Pi Wesp:binary wwb. Pi V:val. Pi H2:memory. Pi B:binary wwb.
      Pi B1:binary wwb. Pi Astore:binary wwb. Pi Bdiff:binary wwb. Pi C:bit.
      impl_stack (corresp_info_ Nlim Astart LM IM) H1 Wesp V H2
         -> add B B1 overflow_lim zero -> add Astore B Wesp zero
         -> add Astart Bdiff Astore C -> type.
- :
   get_stack_store_address Distack Dadd1 Dadd7' Dadd8
      <- extract_stack Distack X1 X2 X3 Dadd2 X4 X5 X6 Dadd3 X7 X8 X9 X10 X11
            X12
      <- add_commute Dadd1 Dadd1'
      <- add_commute Dadd3 Dadd3'
      <- add_assoc Dadd1 Dadd3' Dadd4 Dadd5
      <- add_assoc Dadd5 Dadd2 Dadd6 Dadd7
      <- add_commute Dadd7 Dadd7'
      <- can_add' Astart Bdiff Astore C Dadd8.
postpone_trap_or_valid_stack_reserved :
   Pi H1:memory. Pi A:binary wwb. Pi N1:nat. Pi B1:binary wwb.
      Pi RSECT1:rsection N1. Pi H2:memory.
      trap_or_valid_stack H1 A -> mextend* H1 B1 (section_reserved RSECT1) H2
         -> trap_or_valid_stack H2 A -> type.
-t :
   postpone_trap_or_valid_stack_reserved (trap_or_valid_stack_trap Dtrap) Dmext
      (trap_or_valid_stack_trap Dtrap1)
      <- postpone_trap Dtrap Dmext Dtrap1.
-v :
   postpone_trap_or_valid_stack_reserved
      (trap_or_valid_stack_valid Dadd1 Dadd2 Dadd3 Drep Dssect) Dmext
      (trap_or_valid_stack_valid Dadd1 Dadd2 Dadd3 Drep Dssect1)
      <- stack_section_reserved_extension Dssect Dmext Dssect1.
postpone_trap_or_valid_stack_impl_runfacs :
   Pi H1:memory. Pi A:binary wwb. Pi N1:nat. Pi N2:nat. Pi IM1:irfmap.
      Pi LM1:locmap. Pi H2:memory. Pi S1:string N1.
      trap_or_valid_stack H1 A -> impl_runfacs N2 IM1 LM1 H1 H2 S1
         -> trap_or_valid_stack H2 A -> type.
- : postpone_trap_or_valid_stack_impl_runfacs D impl_runfacs_z D.
- :
   postpone_trap_or_valid_stack_impl_runfacs D1
      (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) D3
      <- postpone_trap_or_valid_stack_impl_runfacs D1 Dirfs D2
      <- postpone_trap_or_valid_stack_reserved D2 Dmext D3.
postpone_trap_or_valid_stack_cs :
   Pi H1:memory. Pi A:binary wwb. Pi N1:nat. Pi B1:binary wwb. Pi S1:string N1.
      Pi H2:memory.
      trap_or_valid_stack H1 A -> mextend* H1 B1 (section_valid cs S1) H2
         -> trap_or_valid_stack H2 A -> type.
-t :
   postpone_trap_or_valid_stack_cs (trap_or_valid_stack_trap Dtrap) Dmext
      (trap_or_valid_stack_trap Dtrap1)
      <- postpone_trap Dtrap Dmext Dtrap1.
-v :
   postpone_trap_or_valid_stack_cs
      (trap_or_valid_stack_valid Dadd1 Dadd2 Dadd3 Drep Dssect) Dmext
      (trap_or_valid_stack_valid Dadd1 Dadd2 Dadd3 Drep Dssect1)
      <- stack_section_cs_extension Dssect Dmext Dssect1.
can_decide_trap :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi B:binary wwb. Pi B1:binary wwb. Pi W:string ww. Pi A:binary wwb.
      Pi A1:binary wwb. Pi M:memory.
      impl_machine CI ST (mach H L R PC) -> add B B1 overflow_lim zero
         -> rload ST esp W -> implode_word W A -> add A1 B A zero -> getmem ST M
         -> trap_or_valid_stack M A1 -> type.
- :
   can_decide_trap Dimach Daddov (rload_ Drload getregs_) Dimp Dadd1 getmem_
      Dtrap3
      <- extract_implement_parts Dimach X3 Dirfile Dimp Distack X4 X5 Digot X6
            X7
      <- rload_esp Dirfile Drload
      <- get_stack_store_address Distack Daddov Dadd1 Dadd2
      <- can_decide_trap* Distack Dadd1 Dadd2 Daddov Dtrap1
      <- extract_got_ptr Digot Dirfs X1 X2 Dmext2
      <- postpone_trap_or_valid_stack_impl_runfacs Dtrap1 Dirfs Dtrap2
      <- postpone_trap_or_valid_stack_cs Dtrap2 Dmext2 Dtrap3.
can_zpush :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi Z:val. Pi V:val. Pi Z':val.
      Pi R':rfile. Pi Nsz:nat. Pi S:string Nsz. Pi Wesp:string ww.
      Pi Aesp:binary wwb. Pi Bsz:binary wwb. Pi N1:nat. Pi Anesp:binary wwb.
      Pi B1:binary wwb. Pi Wnesp:string ww. Pi ST1:state. Pi ST2:state.
      impl_machine (corresp_info_ Nlim Astart LM IM) ST (mach H L R PC)
         -> zlookup R Z -> append V Z Z' -> zupdate R Z' R'
         -> impl_val (corresp_info_ Nlim Astart LM IM) S V -> rload ST esp Wesp
         -> implode_word Wesp Aesp -> represents Nsz Bsz -> nat_eq Nsz (s N1)
         -> add Anesp Bsz Aesp zero -> add Astart B1 Anesp zero
         -> implode_word Wnesp Anesp -> rstore ST esp Wnesp ST1
         -> mstore ST1 Anesp S ST2
         -> impl_machine (corresp_info_ Nlim Astart LM IM) ST2 (mach H L R' PC)
         -> type.
- :
   can_zpush Dimach zlookup_ Dappend zupdate_ Dival Drl Dimp1 Drep1 nat_eq_
      Dadd1 Dadd2 Dimp3 (rstore_ putregs_ Drst1 getregs_)
      (mstore_ putmem_ Dmst2 getmem_)
      (impl_ Dicv1 Dorder1 Digot1 Dipc Diconds
          (impl_stack_ Dmext2n Dmext1 Dnotin2 Dnotin1 Dsabs1 Drep4 Dadd6 Dival1n
              Dindex7 Drep8 Dadd2 Dadd4 Dadd3 Drep2)
          Dimp3 Dirfile1 Diheap)
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Diconds Dipc
            Digot Dorder Dicv
      <- extract_stack Distack Drep2 Dadd3 Dadd4 Dadd5 Drep3 Dindex1 Dival1
            Dadd6 Drep4 Dsabs1 Dnotin1 Dnotin2 Dmext1 Dmext2
      <- rload_esp Dirfile Drl1
      <- rload_fun Drl (rload_ Drl1 getregs_) Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp1 Dimp2
      <- implode_word_fun Dimp2 Dimp Dbeq1
      <- binary_word_to_word Anesp Dimp3
      <- rstore_esp S6 Dirfile Drst1 Dirfile1
      <- str_val_size_corr Snew Dival Dsize1
      <- append_is_separate Dappend Dsize1 Dsep
      <- can_sum (s Nsz-1) N4 N5 Dsum1
      <- concat_str_val Dival Dival1 Dsep Dsum1 Dival1n Dindex2
      <- can_represents1 Aesp Nesp Drep5
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd1 Dadd7
      <- sum_add_corr8 Drep6 Drep1 Drep5 Dsum2 Dadd7
      <- sum_add_corr4 Drep7 Drep8 Drep6 Dsum3 Dadd2
      <- sum_add_corr7 Drep7 Drep9 Drep5 Dsum4 Dadd5
      <- sum_assoc Dsum3 Dsum2 Dsum5 Dsum6
      <- sum_fun2 Dsum6 Dsum4 Dnateq1
      <- represents_fun1 Drep9 Drep3 Dnateq2
      <- nat_eq_trans Dnateq1 Dnateq2 Dnateq3
      <- sum_resp nat_eq_ nat_eq_ Dnateq3 Dsum5 Dsum7
      <- can_index_lesser Dindex1 Dsum7 Dindex3 Dindex4 Dindex5
      <- string_compose Sjunkn Snstack Dindex6
      <- index_implies_sum Dindex5 Dsum8
      <- index_implies_sum Dindex2 Dsum9
      <- index_implies_sum Dindex6 Dsum10
      <- index_implies_sum Dindex4 Dsum11
      <- sum_fun3 Dsum9 Dsum8 Dnateq4
      <- sum_resp nat_eq_ Dnateq4 nat_eq_ Dsum10 Dsum12
      <- sum_fun3 Dsum12 Dsum11 Dnateq5
      <- string_resp Dnateq5 S4 S3 Dseq2
      <- index_resp nat_eq_ Dseq2 string_eq_ string_eq_ Dindex6 Dindex7
      <- can_mstore** Dmext2 Dindex4 Dindex5 Dindex2 Dindex7 Drep8 Dadd2 Dmst1
            Dmext2n
      <- postpone_mstore_got Dmst1 Digot Dmst2 Digot1
      <- mstore_preserves_order Dorder Dmst2 Dorder1
      <- corresp_info_valid_update' Dicv Dmst2 Dicv1.
can_zpush' :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi Wesp:string ww.
      Pi Aesp:binary wwb. Pi Nsz:nat. Pi Bsz:binary wwb. Pi N1:nat.
      Pi Anesp:binary wwb. Pi B1:binary wwb. Pi Wnesp:string ww. Pi ST1:state.
      Pi ST2:state.
      impl_machine (corresp_info_ Nlim Astart LM IM) ST (mach H L R PC)
         -> rload ST esp Wesp -> implode_word Wesp Aesp -> represents Nsz Bsz
         -> nat_eq Nsz (s N1) -> add Anesp Bsz Aesp zero
         -> add Astart B1 Anesp zero
         -> Pi S:string Nsz.
                implode_word Wnesp Anesp -> rstore ST esp Wnesp ST1
                   -> mstore ST1 Anesp S ST2 -> type.
- :
   can_zpush' Dimach Drload Dimp1 Drep1 Dnateq Dadd1 Dadd2 S Dimp2 Drstore
      Dmstore
      <- can_val_exp (;' (@' junk 0') null) N2 V2 Dvexp
      <- junk_impl S (corresp_info_ N1 B1 LM1 IM1) Dvexp Dival
      <- can_append V2 V1 V3 Dapp
      <- can_zpush Dimach zlookup_ Dapp zupdate_ Dival Drload Dimp1 Drep1 Dnateq
            Dadd1 Dadd2 Dimp2 Drstore Dmstore X1.
can_zpush_part :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi Hc:memory.
      Pi Rc:regs numregs. Pi RFc:flags. Pi Aeip:binary wwb. Pi OR:oracle.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi Z:val. Pi V:val. Pi Z':val.
      Pi R':rfile. Pi Nsz:nat. Pi Bsz:binary 32'. Pi N1:nat. Pi Wesp:string ww.
      Pi Aesp:binary wwb. Pi B1:binary wwb. Pi Anesp:binary wwb.
      Pi Anesp':binary wwb. Pi Bsz':binary wwb. Pi Wnesp':string ww.
      Pi Rc':regs numregs. Pi Wnesp:string ww. Pi Rc1:regs numregs.
      Pi Hc1:memory.
      impl_machine (corresp_info_ Nlim Astart LM IM) (state_ Hc Rc RFc Aeip OR)
         (mach H L R PC)
         -> zlookup R Z -> append V Z Z' -> zupdate R Z' R'
         -> val_exp (;' (@' junk 0') null) Nsz V -> represents Nsz Bsz
         -> nat_eq Nsz (s N1) -> rload* Rc esp Wesp -> implode_word Wesp Aesp
         -> add Astart B1 Anesp zero -> add Anesp 4_32 Anesp' zero
         -> add Anesp' Bsz' Aesp zero -> add 4_32 Bsz' Bsz zero
         -> implode_word Wnesp' Anesp' -> rstore* Rc esp Wnesp' Rc'
         -> Pi S:string ww.
                implode_word Wnesp Anesp -> rstore* Rc' esp Wnesp Rc1
                   -> mstore* Hc Anesp S Hc1
                   -> impl_machine (corresp_info_ Nlim Astart LM IM)
                         (state_ Hc1 Rc1 RFc Aeip OR) (mach H L R' PC) -> type.
- :
   can_zpush_part Dimach zlookup_ Dapp zupdate_ Dvexp Drepsz nat_eq_ Drl Dimp1
      Dadd1 Dadd2 Dadd3 Dadd4 Dimp2 Drst Sjk Dimp4 Drst1 Dmst2
      (impl_ Dicv1 Dorder1 Digot1 Dipc Diconds
          (impl_stack_ Dmext2n Dmext1 Dnotin2 Dnotin1 Dsabs1 Drep4 Dadd8 Dival3
              Dindex13' Drep10 Dadd1 Dadd6 Dadd5 Drep2)
          Dimp4 Dirfile2 Diheap)
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Diconds Dipc
            Digot Dorder Dicv
      <- extract_stack Distack Drep2 Dadd5 Dadd6 Dadd7 Drep3 Dindex1 Dival1
            Dadd8 Drep4 Dsabs1 Dnotin1 Dnotin2 Dmext1 Dmext2
      <- rstore_esp Wnesp' Dirfile Drst0 Dirfile1
      <- rstore*_fun Drst0 Drst Dregeq
      <- impl_rfile_resp Dregeq string_eq_ Dirfile1 Dirfile1'
      <- rload_esp Dirfile Drl1
      <- rload*_fun Drl Drl1 Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp1 Dimp3
      <- implode_word_fun Dimp3 Dimp Dbeq1
      <- binary_word_to_word Anesp Dimp4
      <- rstore_esp S8 Dirfile1' Drst1 Dirfile2
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd3 Dadd9
      <- sum_add_corr7 represents_4_32 Drep5 Drepsz Dsum1 Dadd4
      <- can_represents1 Anesp' Nnesp' Drep6
      <- sum_add_corr3 Drep6 Drep5 Drep7 Dsum2 Dadd9
      <- sum_add_corr8 Drep8 represents_4_32 Drep6 Dsum3 Dadd2
      <- sum_add_corr8 Drep9 Drep3 Drep7 Dsum4 Dadd7
      <- sum_add_corr7 Drep9 Drep10 Drep8 Dsum5 Dadd1
      <- sum_assoc Dsum5 Dsum3 Dsum6 Dsum7
      <- sum_assoc Dsum7 Dsum2 Dsum8 Dsum9
      <- sum_fun2 Dsum9 Dsum4 Dnateq1
      <- sum_resp nat_eq_ nat_eq_ Dnateq1 Dsum8 Dsum10
      <- sum_implies_index Dsum10 Sjunk Dindex2
      <- can_index_lesser Dindex2 Dsum6 Dindex3 Dindex4 Dindex5
      <- index_implies_sum Dindex5 Dsum11
      <- sum_fun3 Dsum11 Dsum1 Dnateq2
      <- sum_assoc Dsum6 Dsum10 Dsum12 Dsum13
      <- sum_fun3 Dsum12 Dsum11 Dnateq3
      <- sum_resp nat_eq_ Dnateq3 nat_eq_ Dsum13 Dsum14
      <- sum_resp nat_eq_ Dnateq2 nat_eq_ Dsum14 Dsum15
      <- string_resp Dnateq2 Sjk122 S7 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex4 Dindex6
      <- can_index_lesser'' Dindex1 Dsum15 Dindex6 Dindex7 Dindex8
      <- string_eq_symm Dseq2 Dseq3
      <- nat_eq_symm Dnateq2 Dnateq4
      <- index_resp Dnateq4 string_eq_ Dseq3 string_eq_ Dindex8 Dindex9
      <- can_index_lesser'' Dindex9 Dsum11 Dindex5 Dindex10 Dindex11
      <- string_compose Sjk S2 Dindex12
      <- string_compose Sjk11 Snew Dindex13
      <- index_implies_sum Dindex13 Dsum18
      <- sum_commute Dsum18 Dsum19
      <- index_compose Dindex12 Dindex11 Dsum16 Dindex14
      <- sum_fun3 Dsum16 Dsum11 Dnateq5
      <- nat_eq_trans Dnateq5 Dnateq2 Dnateq6
      <- string_resp Dnateq6 S6 Sadded Dseq4
      <- index_resp Dnateq6 string_eq_ Dseq4 string_eq_ Dindex14 Dindex15
      <- index_implies_sum Dindex15 Dsum17
      <- sum_commute Dsum17 Dsum20
      <- sum_assoc Dsum20 Dsum19 Dsum21 Dsum22
      <- sum_commute Dsum21 Dsum23
      <- sum_fun3 Dsum23 Dsum15 Dnateq7
      <- sum_resp nat_eq_ Dnateq7 nat_eq_ Dsum22 Dsum24
      <- index_implies_sum Dindex1 Dsum25
      <- sum_commute Dsum25 Dsum26
      <- sum_fun3 Dsum24 Dsum26 Dnateq8
      <- string_resp Dnateq8 S5 S3 Dseq5
      <- index_resp nat_eq_ Dseq5 string_eq_ string_eq_ Dindex13 Dindex13'
      <- val_exp_size Dvexp (size_cons size_null) Dsize
      <- append_is_separate Dapp Dsize Dsep
      <- junk_impl Sadded (corresp_info_ Nlim Astart LM IM) Dvexp Divaljk
      <- concat_str_val Divaljk Dival1 Dsep Dsum17 Dival2 Dindex16
      <- index_fun' Dindex16 Dindex15 string_eq_ string_eq_ X1 Dseq6
      <- impl_val_resp Dseq6 val_eq_ Dival2 Dival3
      <- can_mstore** Dmext2 Dindex7 Dindex10 Dindex12 Dindex13' Drep10 Dadd1
            Dmst1 Dmext2n
      <- postpone_mstore_got Dmst1 Digot Dmst2 Digot1
      <- mstore_preserves_order Dorder Dmst2 Dorder1
      <- corresp_info_valid_update' Dicv Dmst2 Dicv1.
cant_store_trap_address* :
   Pi H:memory. Pi B:binary wwb. Pi N1:nat. Pi S:string N1. Pi H1:memory.
      trap_address H B -> mstore* H B S H1 -> false -> type.
-m :
   cant_store_trap_address* (trap_address_miss Dtr X1 X2 X3)
      (mstore_miss Dmst X4 X5 X6) Dfalse
      <- cant_store_trap_address* Dtr Dmst Dfalse.
-h :
   cant_store_trap_address* (trap_address_hit Dlt Drep1 Dadd1)
      (mstore_miss X3 Dadd3 Dadd2 Drep2) Dfalse
      <- add_assoc Dadd2 Dadd3 Dadd4 Dadd5
      <- add_commute Dadd5 Dadd5'
      <- add_commute Dadd1 Dadd1'
      <- add_fun1 Dadd1' Dadd5' X2 Dbeq1
      <- represents_resp nat_eq_ Dbeq1 Drep1 Drep1'
      <- sum_add_corr4 Drep2' X1 Drep1' Dsum1 Dadd4
      <- represents_fun1 Drep2' Drep2 Dnateq1
      <- sum_resp Dnateq1 nat_eq_ nat_eq_ Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq1
      <- lt_leq_contradict Dlt Dleq1 Dfalse.
-mh :
   cant_store_trap_address* (trap_address_miss X3 Dadd1 Dadd2 Drep1)
      (mstore_hit X4 X5 X6 X7 Dlt Drep2 Dadd3) Dfalse
      <- add_assoc Dadd2 Dadd1 Dadd4 Dadd5
      <- add_commute Dadd5 Dadd5'
      <- add_commute Dadd3 Dadd3'
      <- add_fun1 Dadd3' Dadd5' X2 Dbeq1
      <- represents_resp nat_eq_ Dbeq1 Drep2 Drep2'
      <- sum_add_corr4 Drep1' X1 Drep2' Dsum1 Dadd4
      <- represents_fun1 Drep1' Drep1 Dnateq1
      <- sum_resp Dnateq1 nat_eq_ nat_eq_ Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq1
      <- lt_leq_contradict Dlt Dleq1 Dfalse.
cant_store_trap_address :
   Pi ST:state. Pi H:memory. Pi A:binary wwb. Pi N1:nat. Pi S:string N1.
      Pi ST1:state.
      getmem ST H -> trap_address H A -> mstore ST A S ST1 -> false -> type.
- :
   cant_store_trap_address getmem_ Dtrap (mstore_ putmem_ Dmst getmem_) Dfalse
      <- cant_store_trap_address* Dtrap Dmst Dfalse.
stack_absent_valid :
   Pi H:memory. Pi A:binary wwb.
      stack_absent H -> segment_of H A ss -> false -> type.
- :
   stack_absent_valid (stack_absent_cs Dabs) (segment_of_miss Dsegof X1 X2 X3)
      Dfalse
      <- stack_absent_valid Dabs Dsegof Dfalse.
- :
   stack_absent_valid (stack_absent_hs Dabs) (segment_of_miss Dsegof X1 X2 X3)
      Dfalse
      <- stack_absent_valid Dabs Dsegof Dfalse.
- :
   stack_absent_valid (stack_absent_reserved Dabs)
      (segment_of_miss Dsegof X1 X2 X3) Dfalse
      <- stack_absent_valid Dabs Dsegof Dfalse.
cant_load_stack_end* :
   Pi H:memory. Pi A:binary wwb. Pi N:nat. Pi S:string N. Pi B:binary wwb.
      Pi A1:binary wwb.
      stack_section H A N S -> represents N B -> add A B A1 zero
         -> segment_of H A1 ss -> false -> type.
-mh :
   cant_load_stack_end* (stack_section_hs Dssect) Drep Dadd
      (segment_of_miss Dml X1 X2 X3) Dfalse
      <- cant_load_stack_end* Dssect Drep Dadd Dml Dfalse.
-mc :
   cant_load_stack_end* (stack_section_cs Dssect) Drep Dadd
      (segment_of_miss Dml X1 X2 X3) Dfalse
      <- cant_load_stack_end* Dssect Drep Dadd Dml Dfalse.
-mr :
   cant_load_stack_end* (stack_section_reserved Dssect) Drep Dadd
      (segment_of_miss Dml X1 X2 X3) Dfalse
      <- cant_load_stack_end* Dssect Drep Dadd Dml Dfalse.
-ms :
   cant_load_stack_end* (stack_section_hit Dabs) Drep1 Dadd1
      (segment_of_miss Dsseg Dadd2 Dadd3 Drep2) Dfalse
      <- stack_absent_valid Dabs Dsseg Dfalse.
-hh :
   cant_load_stack_end* (stack_section_hit X2) Drep1 Dadd1
      (segment_of_hit Dlt Drep2 Dadd2) Dfalse
      <- add_commute Dadd1 Dadd1'
      <- add_commute Dadd2 Dadd2'
      <- add_fun1 Dadd1' Dadd2' X1 Dbeq
      <- represents_resp nat_eq_ Dbeq Drep1 Drep1'
      <- represents_fun1 Drep1' Drep2 Dnateq
      <- lt_resp nat_eq_ Dnateq Dlt Dlt1
      <- lt_contradict Dlt1 Dfalse.
locmap_wf_lesser :
   Pi LM:locmap. Pi L1:loc. Pi L:loc. Pi A:binary wwb. Pi BIT:bit.
      locmap_wf LM L1 -> lookup_loc LM L A BIT -> loc_lt L L1 -> type.
- : locmap_wf_lesser (locmap_wf_one X1 X2 Dloclt) lookup_loc_z Dloclt.
- : locmap_wf_lesser (locmap_wf_zero X1 Dloclt) lookup_loc_z Dloclt.
- :
   locmap_wf_lesser (locmap_wf_one Dlwf X1 Dloclt1) (lookup_loc_s Dlook Dloclt2)
      Dloclt3
      <- loc_lt_trans Dloclt2 Dloclt1 Dloclt3.
- :
   locmap_wf_lesser (locmap_wf_zero Dlwf Dloclt1) (lookup_loc_s Dlook Dloclt2)
      Dloclt3
      <- loc_lt_trans Dloclt2 Dloclt1 Dloclt3.
stack_section_valid :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi M:memory.
      Pi Sstart':binary wwb. Pi Nlim':nat. Pi Sstack:string Nlim'.
      impl_machine (corresp_info_ Nlim Sstart LM IM) ST (mach H L R PC)
         -> getmem ST M -> stack_section M Sstart' Nlim' Sstack
         -> binary_eq Sstart' Sstart -> nat_eq Nlim' Nlim -> type.
- :
   stack_section_valid Dimach getmem_ Dssect1 Dbeq Dneq
      <- extract_implement_parts Dimach X13 X14 X15 Distack X16 X17 Digot X18
            X19
      <- extract_stack Distack X2 X3 X4 X5 X6 X7 X8 X9 X10 Dsabs X11 X12 Dmext1
            Dmext2
      <- stack_absent_reserved_extension Dsabs Dmext1 Dsabs1
      <- mextend_stack_section Dsabs1 Dmext2 Dssect2
      <- postpone_stack_section_got Dssect2 Digot Dssect3
      <- stack_section_fun Dssect1 Dssect3 Dbeq Dneq X1.
mextend_runtime_address :
   Pi N1:nat. Pi M:memory. Pi A:binary wwb. Pi N2:nat. Pi IRF:runfac N2.
      Pi M1:memory.
      mextend* M A (section_reserved (rsection_runtime IRF)) M1
         -> runtime_address M1 A IRF -> type.
- : mextend_runtime_address mextend_nil runtime_address_hit.
- : mextend_runtime_address (mextend_between X1 X2 X3) runtime_address_hit.
- :
   mextend_runtime_address (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (runtime_address_miss Dra Dadd1 Dadd2 Drep)
      <- mextend_runtime_address Dmext Dra.
postpone_runtime_address :
   Pi N1:nat. Pi M:memory. Pi A:binary wwb. Pi IRF:runfac N1. Pi N2:nat.
      Pi B1:binary wwb. Pi SECT1:section N2. Pi M1:memory.
      runtime_address M A IRF -> mextend* M B1 SECT1 M1
         -> runtime_address M1 A IRF -> type.
- :
   postpone_runtime_address runtime_address_hit
      (mextend_between Dadd1 Dadd2 Drep)
      (runtime_address_miss runtime_address_hit Dadd1 Dadd2 Drep).
- :
   postpone_runtime_address (runtime_address_miss Dra Dadd1 Dadd2 Drep1)
      (mextend_between Dadd3 Dadd4 Drep2)
      (runtime_address_miss (runtime_address_miss Dra Dadd1 Dadd2 Drep1) Dadd6
          Dadd4 Drep2)
      <- add_assoc Dadd3 Dadd2 X2 Dadd5
      <- add_assoc Dadd5 Dadd1 X1 Dadd6.
- :
   postpone_runtime_address runtime_address_hit
      (mextend_cons Dmext Dadd1 Dadd2 Drep) runtime_address_hit.
- :
   postpone_runtime_address (runtime_address_miss Drad Dadd1 Dadd2 Drep)
      (mextend_cons Dmext X1 X2 X3)
      (runtime_address_miss Drad1 Dadd1 Dadd2 Drep)
      <- postpone_runtime_address Drad Dmext Drad1.
postpone_runtime_address_impl_runfacs :
   Pi N1:nat. Pi N2:nat. Pi IM1:irfmap. Pi LM1:locmap. Pi M1:memory.
      Pi M2:memory. Pi S1:string N1. Pi N3:nat. Pi A:binary wwb.
      Pi IRF:runfac N3.
      impl_runfacs N2 IM1 LM1 M1 M2 S1 -> runtime_address M1 A IRF
         -> runtime_address M2 A IRF -> type.
- : postpone_runtime_address_impl_runfacs impl_runfacs_z D D.
- :
   postpone_runtime_address_impl_runfacs
      (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) D1 D3
      <- postpone_runtime_address_impl_runfacs Dirfs D1 D2
      <- postpone_runtime_address D2 Dmext D3.
impl_runfacs_str_len :
   Pi Nlen:nat. Pi N:nat. Pi IM:irfmap. Pi LM:locmap. Pi H1:memory.
      Pi H2:memory. Pi S:string Nlen. Pi N1:nat.
      impl_runfacs N IM LM H1 H2 S -> product N ww N1 -> nat_eq Nlen N1 -> type.
- : impl_runfacs_str_len impl_runfacs_z product_z nat_eq_.
- :
   impl_runfacs_str_len (impl_runfacs_s Dindex X1 X2 Dirfs X3 X4)
      (product_s Dsum2 Dprod1) nat_eq_
      <- impl_runfacs_str_len Dirfs Dprod1 Dnateq1
      <- string_resp Dnateq1 S4 S2 Dseq1
      <- index_resp Dnateq1 string_eq_ Dseq1 string_eq_ Dindex Dindex1
      <- index_implies_sum Dindex1 Dsum1
      <- sum_commute Dsum1 Dsum2.
lookup_runfac* :
   Pi N1:nat. Pi N:nat. Pi IM:irfmap. Pi LM:locmap. Pi H1:memory. Pi H2:memory.
      Pi S2:string N1. Pi Nprev:nat. Pi Nirf:nat. Pi Nirfss:nat.
      Pi Wirf:binary wwb. Pi IRF:runfac Nirf. Pi Sirf:string ww. Pi N2:nat.
      Pi S1:string Nirfss. Pi Sirf1:string N2. Pi N3:nat. Pi S3:string N3.
      impl_runfacs N IM LM H1 H2 S2 -> sum (s Nprev) Nirf N
         -> product Nirf ww Nirfss -> runtime_address H2 Wirf IRF
         -> implode_word Sirf Wirf -> index Nirfss S2 S1 Sirf1
         -> index ww Sirf1 Sirf S3 -> type.
- :
   lookup_runfac* (impl_runfacs_s Dindex1 Dimp Dmext Dirfs Dnotin runfac_of_)
      (sum_s sum_z) Dprod Drad Dimp Dindex2 Dindex3
      <- mextend_runtime_address Dmext Drad
      <- impl_runfacs_str_len Dirfs Dprod Dnateq1
      <- string_resp Dnateq1 S3 S4 Dseq1
      <- index_resp Dnateq1 string_eq_ Dseq1 string_eq_ Dindex1 Dindex2
      <- index_all S1 Dindex3.
- :
   lookup_runfac* (impl_runfacs_s Dindex1 Dimp Dmext Dirfs Dnotin Drof)
      (sum_s Dsum) Dprod Drad2 Dimp2 Dindex4 Dindex6
      <- lookup_runfac* Dirfs Dsum Dprod Drad1 Dimp2 Dindex2 Dindex3
      <- postpone_runtime_address Drad1 Dmext Drad2
      <- can_index_lesser' Dindex1 X3 Dindex2 Dindex4 Dindex5
      <- can_index_lesser' Dindex5 X1 Dindex3 Dindex6 X2.
lookup_runfac :
   Pi Nlim:nat. Pi Sstart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi IREG:nat. Pi Sgot:string ww.
      Pi Wgot:binary wwb. Pi Nirf:nat. Pi IRF:runfac Nirf. Pi REG:reg.
      Pi INST:inst. Pi Nirf4:nat. Pi Dirf:binary wwb. Pi Sirf:string ww.
      Pi Wirf:binary wwb. Pi M:memory.
      impl_machine (corresp_info_ Nlim Sstart LM IM) ST (mach H L R PC)
         -> oload ST (oper_rm (eaddr_reg IREG)) Sgot -> implode_word Sgot Wgot
         -> lookup_gotptr IM Wgot -> impl_instrf Nirf IRF REG INST
         -> product Nirf ww Nirf4 -> represents Nirf4 Dirf
         -> oload ST (oper_rm (eaddr_deref IREG 0' eax Dirf ww)) Sirf
         -> implode_word Sirf Wirf -> getmem ST M -> runtime_address M Wirf IRF
         -> type.
- :
   lookup_runfac Dimach (oload_rm (load_reg Drl)) Dimp Dlookg impl_malloc Dprod
      Drep1
      (oload_rm (load_deref_z (mload_ Dindex4 Dmload getmem_) Dadd3 Dimp Drl))
      Dimp1 getmem_ Drad1
      <- extract_implement_parts Dimach X4 X5 X6 X7 X8 X9 Digot X10 X11
      <- extract_got_ptr Digot Dirfs Dlookg1 X3 Dmext1
      <- lookup_runfac* Dirfs (sum_2 sum_z) Dprod1 Drad Dimp1 Dindex1 Dindex2
      <- postpone_runtime_address Drad Dmext1 Drad1
      <- lookup_gotptr_fun Dlookg1 Dlookg Dbeq
      <- mextend*_resp memory_eq_ Dbeq section_eq_ memory_eq_ Dmext1 Dmext2
      <- mextend_mload Dmext2 Dmload X2
      <- prod_fun3 Dprod1 product_z Dnateq1
      <- string_resp Dnateq1 S6 S5 Dseq1
      <- index_resp Dnateq1 string_eq_ Dseq1 string_eq_ Dindex1 Dindex3
      <- index_z_fun Dindex3 X1 Dseq2
      <- index_resp nat_eq_ Dseq2 string_eq_ string_eq_ Dindex2 Dindex4
      <- prod_fun3 Dprod product_z Dnateq2
      <- represents_resp Dnateq2 binary_eq_ Drep1 Drep2
      <- represents_fun2 (represents_z is_zero_0_32) Drep2 Dbeq1
      <- add_ident B1 is_zero_0_32 Dadd1
      <- add_commute Dadd1 Dadd2
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd2 Dadd3.
- :
   lookup_runfac Dimach (oload_rm (load_reg Drl)) Dimp Dlookg impl_mallocarr
      Dprod Drep1
      (oload_rm (load_deref_z (mload_ Dindex4 Dmload1 getmem_) Dadd8 Dimp Drl))
      Dimp1 getmem_ Drad1
      <- extract_implement_parts Dimach X3 X4 X5 X6 X7 X8 Digot Dmwf X9
      <- extract_got_ptr Digot Dirfs Dlookg1 X2 Dmext1
      <- lookup_runfac* Dirfs (sum_s sum_z) Dprod1 Drad Dimp1 Dindex1 Dindex2
      <- postpone_runtime_address Drad Dmext1 Drad1
      <- lookup_gotptr_fun Dlookg1 Dlookg Dbeq
      <- mextend*_resp memory_eq_ Dbeq section_eq_ memory_eq_ Dmext1 Dmext2
      <- mextend_mload Dmext2 Dmload X1
      <- wf_memory_load Dmwf Dmload Drep2 Dadd1
      <- prod_fun3 Dprod1 product_ww Dnateq1
      <- string_resp Dnateq1 S7 S6 Dseq1
      <- index_implies_sum Dindex2 Dsum2
      <- sum_nonzero Dsum2 Dnateq3
      <- string_resp Dnateq3 S1 S2 Dseq2
      <- index_resp Dnateq1 string_eq_ Dseq1 Dseq2 Dindex1 Dindex3
      <- prod_fun3 Dprod product_ww Dnateq2
      <- represents_resp Dnateq2 binary_eq_ Drep1 Drep3
      <- represents_fun2 Drep3 represents_4_32 Dbeq1
      <- index_implies_sum Dindex3 Dsum1
      <- sum_add_corr9 Drep4 Drep5 Drep2 Dsum1 Dadd2
      <- add_commute Dadd1 Dadd3
      <- add_commute Dadd2 Dadd4
      <- add_assoc Dadd4 Dadd3 Dadd5 Dadd6
      <- add_commute Dadd5 Dadd7
      <- mload*_part Dmload Dindex3 Drep4 Dadd7 Dmload1
      <- represents_fun2 Drep4 Drep3 Dbeq2
      <- add_resp binary_eq_ Dbeq2 binary_eq_ bit_eq_ Dadd7 Dadd8
      <- index_resp nat_eq_ Dseq2 string_eq_ string_eq_ Dindex2 Dindex4.
ordered_less_stack_sect :
   Pi A:binary wwb. Pi H:memory. Pi A1:binary wwb. Pi N1:nat. Pi S1:string N1.
      Pi B1:binary wwb.
      memory_wf A H -> stack_section H A1 N1 S1 -> add A B1 A1 zero -> type.
- :
   ordered_less_stack_sect (memory_wf_cons Dorder Dadd1 Drep1 Dnateq1 Dadd2)
      (stack_section_hit Dsabs) Dadd2.
- :
   ordered_less_stack_sect (memory_wf_cons Dorder Dadd1 Drep1 Dnateq1 Dadd2)
      (stack_section_cs Dssect) Dadd5
      <- ordered_less_stack_sect Dorder Dssect Dadd3
      <- add_assoc Dadd2 Dadd1 X2 Dadd4
      <- add_assoc Dadd4 Dadd3 X1 Dadd5.
- :
   ordered_less_stack_sect (memory_wf_cons Dorder Dadd1 Drep1 Dnateq1 Dadd2)
      (stack_section_hs Dssect) Dadd5
      <- ordered_less_stack_sect Dorder Dssect Dadd3
      <- add_assoc Dadd2 Dadd1 X2 Dadd4
      <- add_assoc Dadd4 Dadd3 X1 Dadd5.
- :
   ordered_less_stack_sect (memory_wf_cons Dorder Dadd1 Drep1 Dnateq1 Dadd2)
      (stack_section_reserved Dssect) Dadd5
      <- ordered_less_stack_sect Dorder Dssect Dadd3
      <- add_assoc Dadd2 Dadd1 X2 Dadd4
      <- add_assoc Dadd4 Dadd3 X1 Dadd5.
memory_wf_stack_seg_indep| :
   Pi N:nat.
      false
         -> Pi Hc:memory. Pi Afresh:binary wwb. Pi S:string N. Pi SEG:segment.
                mload* Hc Afresh S -> segment_of Hc Afresh SEG -> type.
memory_wf_stack_seg_indep :
   Pi B1:binary wwb. Pi Hc:memory. Pi Astart:binary wwb. Pi Nlim:nat.
      Pi S:string Nlim. Pi Blim:binary wwb. Pi Aend:binary wwb.
      Pi B2:binary wwb. Pi Astore:binary wwb. Pi B:binary wwb. Pi N:nat.
      Pi N1:nat. Pi Afresh:binary wwb. Pi S1:string N1. Pi SEG:segment.
      Pi SEG1:seg. Pi N2:nat. Pi S2:string N2. Pi Hc':memory.
      memory_wf B1 Hc -> stack_section Hc Astart Nlim S -> represents Nlim Blim
         -> add Astart Blim Aend zero -> add Astart B2 Astore zero
         -> add Astore B Aend zero -> represents (s N) B -> mload* Hc Afresh S1
         -> segment_of Hc Afresh SEG -> impl_seg SEG SEG1
         -> mstore* Hc Astore S2 Hc' -> mload* Hc' Afresh S1
         -> segment_of Hc' Afresh SEG -> type.
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      Dssect Drep2 Dadd3 Dadd4 Dadd5 Drep3 (mload_miss Dml Dadd6 Dadd7 Drep4)
      (segment_of_miss Dsegof Dadd8 Dadd9 Drep5) Diseg
      (mstore_hit X1 X2 X3 X4 X5 X6 X7) (mload_miss Dml Dadd6 Dadd7 Drep4)
      (segment_of_miss Dsegof Dadd8 Dadd9 Drep5).
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      Dssect Drep2 Dadd3 Dadd4 Dadd5 Drep3 (mload_hit Dindex Dadd6 Dadd7 Drep4)
      (segment_of_hit Dadd8 Dadd9 Drep5) Diseg
      (mstore_miss Dmst Dadd10 Dadd11 Drep6)
      (mload_hit Dindex Dadd6 Dadd7 Drep4) (segment_of_hit Dadd8 Dadd9 Drep5).
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      (stack_section_hs Dssect) Drep2 Dadd3 Dadd4 Dadd5 Drep3
      (mload_miss Dml Dadd6 Dadd7 Drep4)
      (segment_of_miss Dsegof Dadd8 Dadd9 Drep5) Diseg
      (mstore_miss Dmst Dadd10 Dadd11 Drep6) (mload_miss Dml1 Dadd6 Dadd7 Drep4)
      (segment_of_miss Dsegof1 Dadd8 Dadd9 Drep5)
      <- memory_wf_stack_seg_indep Dorder Dssect Drep2 Dadd3 Dadd4 Dadd5 Drep3
            Dml Dsegof Diseg Dmst Dml1 Dsegof1.
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      (stack_section_reserved Dssect) Drep2 Dadd3 Dadd4 Dadd5 Drep3
      (mload_miss Dml Dadd6 Dadd7 Drep4)
      (segment_of_miss Dsegof Dadd8 Dadd9 Drep5) Diseg
      (mstore_miss Dmst Dadd10 Dadd11 Drep6) (mload_miss Dml1 Dadd6 Dadd7 Drep4)
      (segment_of_miss Dsegof1 Dadd8 Dadd9 Drep5)
      <- memory_wf_stack_seg_indep Dorder Dssect Drep2 Dadd3 Dadd4 Dadd5 Drep3
            Dml Dsegof Diseg Dmst Dml1 Dsegof1.
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      (stack_section_cs Dssect) Drep2 Dadd3 Dadd4 Dadd5 Drep3
      (mload_miss Dml Dadd6 Dadd7 Drep4)
      (segment_of_miss Dsegof Dadd8 Dadd9 Drep5) Diseg
      (mstore_miss Dmst Dadd10 Dadd11 Drep6) (mload_miss Dml1 Dadd6 Dadd7 Drep4)
      (segment_of_miss Dsegof1 Dadd8 Dadd9 Drep5)
      <- memory_wf_stack_seg_indep Dorder Dssect Drep2 Dadd3 Dadd4 Dadd5 Drep3
            Dml Dsegof Diseg Dmst Dml1 Dsegof1.
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      (stack_section_cs Dssect) Drep2 Dadd3 Dadd4 Dadd5 Drep3 Dml Dsegof Diseg
      (mstore_hit X5 X6 X7 X8 Dlt Drep6 Dadd10) Dml1 Dsegof1
      <- lt_implies_sum Dlt Dsum1
      <- sum_commute Dsum1 Dsum2
      <- sum_implies_leq Dsum2 Dleq1
      <- can_represents Dleq1 Drep1 Drep7
      <- sum_add_corr Drep6 Drep7 Drep1 Dsum1 Dadd11
      <- add_commute Dadd1 Dadd12
      <- add_commute Dadd11 Dadd13
      <- add_assoc Dadd13 Dadd12 Dadd14 Dadd15
      <- add_commute Dadd14 Dadd16
      <- add_fun3 Dadd16 Dadd10 X4 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd15 Dadd17
      <- add_commute Dadd17 Dadd18
      <- ordered_less_stack_sect Dorder Dssect Dadd19
      <- add_assoc Dadd18 Dadd19 Dadd20 Dadd21
      <- add_assoc Dadd21 Dadd4 Dadd22 Dadd23
      <- add_commute Dadd23 Dadd24
      <- add_ident B8 is_zero_0_32 Dadd25
      <- add_fun1 Dadd25 Dadd24 X3 Dbeq2
      <- is_zero_resp Dbeq2 is_zero_0_32 Diz1
      <- add_zero_sum Dadd22 Diz2 X2 Diz1
      <- add_zero_sum Dadd20 Diz3 X1 Diz2
      <- represents_succ Drep7 Dinz
      <- zero_nonzero_contradict binary_eq_ Diz3 Dinz Dfalse
      <- memory_wf_stack_seg_indep| Dfalse
            (mcons B1 (s N2) (section_valid cs S1) H1) B2 S2 SEG1 Dml1 Dsegof1.
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      (stack_section_hs Dssect) Drep2 Dadd3 Dadd4 Dadd5 Drep3 Dml Dsegof Diseg
      (mstore_hit X5 X6 X7 X8 Dlt Drep6 Dadd10) Dml1 Dsegof1
      <- lt_implies_sum Dlt Dsum1
      <- sum_commute Dsum1 Dsum2
      <- sum_implies_leq Dsum2 Dleq1
      <- can_represents Dleq1 Drep1 Drep7
      <- sum_add_corr Drep6 Drep7 Drep1 Dsum1 Dadd11
      <- add_commute Dadd1 Dadd12
      <- add_commute Dadd11 Dadd13
      <- add_assoc Dadd13 Dadd12 Dadd14 Dadd15
      <- add_commute Dadd14 Dadd16
      <- add_fun3 Dadd16 Dadd10 X4 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd15 Dadd17
      <- add_commute Dadd17 Dadd18
      <- ordered_less_stack_sect Dorder Dssect Dadd19
      <- add_assoc Dadd18 Dadd19 Dadd20 Dadd21
      <- add_assoc Dadd21 Dadd4 Dadd22 Dadd23
      <- add_commute Dadd23 Dadd24
      <- add_ident B8 is_zero_0_32 Dadd25
      <- add_fun1 Dadd25 Dadd24 X3 Dbeq2
      <- is_zero_resp Dbeq2 is_zero_0_32 Diz1
      <- add_zero_sum Dadd22 Diz2 X2 Diz1
      <- add_zero_sum Dadd20 Diz3 X1 Diz2
      <- represents_succ Drep7 Dinz
      <- zero_nonzero_contradict binary_eq_ Diz3 Dinz Dfalse
      <- memory_wf_stack_seg_indep| Dfalse
            (mcons B1 (s N2) (section_valid hs S1) H1) B2 S2 SEG1 Dml1 Dsegof1.
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      (stack_section_hit Dsabs) Drep2 Dadd3 Dadd4 Dadd5 Drep3 Dml Dsegof Diseg
      (mstore_miss Dmst Dadd10 Dadd11 Drep6) Dml1 Dsegof1
      <- represents_fun2 Drep6 Drep2 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd11 Dadd12
      <- add_fun3 Dadd12 Dadd3 X3 Dbeq2
      <- add_resp Dbeq2 binary_eq_ binary_eq_ bit_eq_ Dadd10 Dadd13
      <- add_assoc Dadd13 Dadd5 Dadd14 Dadd15
      <- add_commute Dadd15 Dadd16
      <- add_ident B6 is_zero_0_32 Dadd17
      <- add_fun1 Dadd17 Dadd16 X2 Dbeq3
      <- is_zero_resp Dbeq3 is_zero_0_32 Diz1
      <- add_zero_sum Dadd14 X1 Diz2 Diz1
      <- represents_succ Drep3 Dinz
      <- zero_nonzero_contradict binary_eq_ Diz2 Dinz Dfalse
      <- memory_wf_stack_seg_indep| Dfalse
            (mcons B1 (s N2) (section_valid ss S1) H1) B2 S2 SEG1 Dml1 Dsegof1.
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      Dssect Drep2 Dadd3 Dadd4 Dadd5 Drep3 (mload_hit Dindex Dlt1 Drep4 Dadd6)
      (segment_of_miss Dsegof Dadd7 Dadd8 Drep5) Diseg Dmst Dml1 Dsegof1
      <- lt_implies_sum Dlt1 Dsum1
      <- sum_commute Dsum1 Dsum2
      <- sum_implies_leq Dsum2 Dleq1
      <- can_represents Dleq1 Drep5 Drep6
      <- sum_add_corr Drep4 Drep6 Drep5 Dsum1 Dadd9
      <- add_assoc Dadd8 Dadd7 Dadd10 Dadd11
      <- add_commute Dadd11 Dadd12
      <- add_commute Dadd6 Dadd13
      <- add_fun1 Dadd13 Dadd12 X3 Dbeq1
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd9 Dadd14
      <- add_assoc Dadd14 Dadd10 Dadd15 Dadd16
      <- add_commute Dadd16 Dadd17
      <- add_ident B5 is_zero_0_32 Dadd18
      <- add_fun1 Dadd18 Dadd17 X2 Dbeq2
      <- is_zero_resp Dbeq2 is_zero_0_32 Diz1
      <- add_zero_sum Dadd15 Diz2 X1 Diz1
      <- represents_succ Drep6 Dinz
      <- zero_nonzero_contradict binary_eq_ Diz2 Dinz Dfalse
      <- memory_wf_stack_seg_indep| Dfalse H1 B1 S1 SEG1 Dml1 Dsegof1.
- :
   memory_wf_stack_seg_indep (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      Dssect Drep2 Dadd3 Dadd4 Dadd5 Drep3 (mload_miss Dml Dadd7 Dadd8 Drep5)
      (segment_of_hit Dlt1 Drep4 Dadd6) Diseg Dmst Dml1 Dsegof1
      <- lt_implies_sum Dlt1 Dsum1
      <- sum_commute Dsum1 Dsum2
      <- sum_implies_leq Dsum2 Dleq1
      <- can_represents Dleq1 Drep5 Drep6
      <- sum_add_corr Drep4 Drep6 Drep5 Dsum1 Dadd9
      <- add_assoc Dadd8 Dadd7 Dadd10 Dadd11
      <- add_commute Dadd11 Dadd12
      <- add_commute Dadd6 Dadd13
      <- add_fun1 Dadd13 Dadd12 X3 Dbeq1
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd9 Dadd14
      <- add_assoc Dadd14 Dadd10 Dadd15 Dadd16
      <- add_commute Dadd16 Dadd17
      <- add_ident B5 is_zero_0_32 Dadd18
      <- add_fun1 Dadd18 Dadd17 X2 Dbeq2
      <- is_zero_resp Dbeq2 is_zero_0_32 Diz1
      <- add_zero_sum Dadd15 Diz2 X1 Diz1
      <- represents_succ Drep6 Dinz
      <- zero_nonzero_contradict binary_eq_ Diz2 Dinz Dfalse
      <- memory_wf_stack_seg_indep| Dfalse H1 B1 S1 SEG1 Dml1 Dsegof1.
stack_store_seg_indep :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi Hc:memory. Pi N1:nat.
      Pi A1:binary wwb. Pi S:string N1. Pi SEG:segment. Pi SEG1:seg.
      Pi Wesp:string ww. Pi Aesp:binary wwb. Pi Nsz:nat. Pi Bsz:binary wwb.
      Pi N2:nat. Pi Anesp:binary wwb. Pi B1:binary wwb. Pi Wnesp:string ww.
      Pi ST1:state. Pi N3:nat. Pi Snew:string N3. Pi ST2:state. Pi Hc':memory.
      impl_machine (corresp_info_ Nlim Astart LM IM) ST (mach H L R PC)
         -> getmem ST Hc -> mload* Hc A1 S -> segment_of Hc A1 SEG
         -> impl_seg SEG SEG1 -> rload ST esp Wesp -> implode_word Wesp Aesp
         -> represents Nsz Bsz -> nat_eq Nsz (s N2) -> add Anesp Bsz Aesp zero
         -> add Astart B1 Anesp zero -> implode_word Wnesp Anesp
         -> rstore ST esp Wnesp ST1 -> mstore ST1 Anesp Snew ST2
         -> getmem ST2 Hc' -> mload* Hc' A1 S -> segment_of Hc' A1 SEG -> type.
- :
   stack_store_seg_indep Dimach getmem_ Dml Dsegof Diseg
      (rload_ Drload1 getregs_) Dimp1 Drep1 Dnateq Dadd1 Dadd2 Dimp2
      (rstore_ putregs_ Drstore1 getregs_) (mstore_ putmem_ Dmst getmem_)
      getmem_ Dml1 Dsegof1
      <- extract_implement_parts Dimach X8 Dirfile Dimp1' Distack X9 X10 Digot
            Dorder X11
      <- extract_stack Distack Drep2 X2 Dadd3 Dadd4 Drep3 Dindex1 X3 X4 X5 Dabs
            X6 X7 Dmext1 Dmext2
      <- rload_esp Dirfile Drload1'
      <- stack_absent_reserved_extension Dabs Dmext1 Dabs1
      <- mextend_stack_section Dabs1 Dmext2 Dssect1
      <- postpone_stack_section_got Dssect1 Digot Dssect2
      <- index_implies_sum Dindex1 Dsum1
      <- sum_commute Dsum1 Dsum2
      <- sum_implies_leq Dsum2 Dleq
      <- can_represents Dleq Drep2 Drep4
      <- sum_add_corr Drep3 Drep4 Drep2 Dsum1 Dadd5
      <- add_commute Dadd5 Dadd6
      <- add_commute Dadd3 Dadd7
      <- add_assoc Dadd6 Dadd7 Dadd8 Dadd9
      <- add_commute Dadd8 Dadd10
      <- add_fun3 Dadd10 Dadd4 X1 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd9 Dadd11
      <- add_commute Dadd11 Dadd12
      <- rload*_fun Drload1' Drload1 Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp1' Dimp1''
      <- implode_word_fun Dimp1 Dimp1'' Dbeq2
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd1 Dadd13
      <- add_assoc Dadd13 Dadd12 Dadd14 Dadd15
      <- represents_resp Dnateq binary_eq_ Drep1 Drep5
      <- represents_succ Drep5 Dinz1
      <- add_nonzero_sum Dadd14 Dinz1 Dinz2
      <- can_represents1 B2 N4 Drep6
      <- represents_nonzero Dinz2 Drep6 Dnateq1
      <- represents_resp Dnateq1 binary_eq_ Drep6 Drep7
      <- memory_wf_stack_seg_indep Dorder Dssect2 Drep2 Dadd3 Dadd2 Dadd15 Drep7
            Dml Dsegof Diseg Dmst Dml1 Dsegof1.
impl_pointer_add* :
   Pi CI:corresp_info. Pi S1:string ww. Pi L:loc. Pi P:nat. Pi N:nat. Pi P':nat.
      Pi B:binary (s 31'). Pi Bmax:binary wwb. Pi Nmax:nat. Pi W1:binary wwb.
      Pi W2:binary (s 31'). Pi B1:bit. Pi B2:bit. Pi S2:string ww.
      impl_aval CI S1 (pointer L P) -> sum N P P' -> represents N B
         -> is_negone Bmax -> represents Nmax Bmax -> leq_gt P' Nmax
         -> implode_word S1 W1 -> add_wo W1 B W2 B1 B2 -> implode_word S2 W2
         -> impl_aval CI S2 (pointer L P') -> type.
- :
   impl_pointer_add* (impl_aval_pointer DimpP DaddP DrepP Dlook) Dsum DrepN Dino
      DrepMax (leq_gt_leq Dleq) DimpP Daddwo DimpP'
      (impl_aval_pointer DimpP' Dadd7 DrepP' Dlook)
      <- can_represents Dleq DrepMax DrepP'
      <- can_add Baddr Bn Bnaddr B1 Dadd2
      <- add_assoc* DaddP Dadd2 Dadd3 Dadd4 X2
      <- sum_add_corr DrepN DrepP DrepP' Dsum Dadd5
      <- add_commute Dadd5 Dadd6
      <- add_fun3 Dadd3 Dadd6 X1 Dbeq2
      <- add_resp binary_eq_ Dbeq2 binary_eq_ bit_eq_ Dadd4 Dadd7
      <- binary_word_to_word Bnaddr DimpP'
      <- add_is_add_wo Dadd2 Daddwo.
- :
   impl_pointer_add* (impl_aval_pointer DimpP DaddP DrepP Dlook) Dsum DrepN Dino
      DrepMax (leq_gt_gt Dlt) DimpP Daddwo DimpP'
      (impl_aval_pointer_bad DimpP' DaddP' DrepP' Dqr DsumP' DrepMax Dino Dlook)
      <- can_add Bn Bp Bp' BIT Dadd
      <- add_overflow_result DrepN DrepP Dadd Dino DrepMax Dsum Dlt Dadd1
      <- sum_add_corr_carry_rep DrepN DrepP Dsum Dadd1 Dino DrepMax DrepP'
            DsumP'
      <- sum_ident (s Nmax) Dsum1
      <- sum_shift' Dsum2 DsumP'
      <- sum_commute Dsum2 Dsum3
      <- represents_max DrepP' DrepMax Dino Dleq
      <- lt_succ Nmax DltMax
      <- leq_lt_trans Dleq DltMax Dlt1
      <- quotrem_sumprod (product_s Dsum1 product_z) Dsum3 Dlt1 Dqr
      <- can_add Baddr Bn Bnaddr B1 Dadd2
      <- add_assoc* DaddP Dadd2 Dadd3 Dadd4 X2
      <- add_commute Dadd3 Dadd5
      <- add_fun3 Dadd5 Dadd X1 Dbeq
      <- add_resp binary_eq_ Dbeq binary_eq_ bit_eq_ Dadd4 DaddP'
      <- binary_word_to_word Bnaddr DimpP'
      <- add_is_add_wo Dadd2 Daddwo.
- :
   impl_pointer_add*
      (impl_aval_pointer_bad Dimpaddr DaddBact DrepNact Dqr Dsummax Drepmax Dino
          Dlook)
      Dsum1 DrepN Dino1 Drepmax' Dleqgt Dimpaddr Daddwo DimpNaddr
      (impl_aval_pointer_bad DimpNaddr DaddBnact' DrepNnact' Dqr3 Dsum6 Drepmax
          Dino Dlook)
      <- sum_commute Dsum1 Dsum2
      <- sum_assoc Dsummax Dsum2 Dsum3 Dsum4
      <- can_sum N4 N N'-1 Dsum5
      <- sum_fun3 Dsum3 (sum_s Dsum5) Dnateq1
      <- sum_resp nat_eq_ Dnateq1 nat_eq_ Dsum4 Dsum6
      <- sum_commute Dsum1 Dsum7
      <- represents_max DrepN Drepmax Dino Dleq1
      <- lt_succ Nmax Dlt1
      <- leq_lt_trans Dleq1 Dlt1 Dlt2
      <- sum_ident N Dsum8
      <- quotrem_add_upto_divisor Dlt2 quotrem_z Dsum8 Dqr1
      <- rem_sum nat_eq_ Dsum7 Dqr Dqr1 Dsum9 Dqr2 Dqr3
      <- represents_max DrepNact Drepmax Dino Dleq2
      <- leq_lt_trans Dleq2 Dlt1 Dlt3
      <- sum_ident Nact Dsum10
      <- quotrem_add_upto_divisor Dlt3 quotrem_z Dsum10 Dqr4
      <- rem_is_lt Dqr3 nat_eq_ Dlt4
      <- lt_succ_implies_leq Dlt4 Dleq3
      <- can_represents Dleq3 Drepmax DrepNnact'
      <- sum_add_corr_rem Dsum9 Dino Drepmax Dqr4 Dqr1 Dqr2 DrepNact DrepN
            DrepNnact' DaddB
      <- can_add Baddr B Bnaddr B1 DaddBnaddr
      <- add_assoc* DaddBact DaddBnaddr DaddB' DaddBnact X2
      <- add_fun3 DaddB' DaddB X1 Dbeq
      <- add_resp binary_eq_ Dbeq binary_eq_ bit_eq_ DaddBnact DaddBnact'
      <- binary_word_to_word Bnaddr DimpNaddr
      <- add_is_add_wo DaddBnaddr Daddwo.
impl_pointer_add :
   Pi CI:corresp_info. Pi S1:string ww. Pi L:loc. Pi P:nat. Pi N:nat. Pi P':nat.
      Pi B:binary (s 31'). Pi W1:binary wwb. Pi W2:binary (s 31'). Pi B1:bit.
      Pi B2:bit. Pi S2:string ww.
      impl_aval CI S1 (pointer L P) -> sum N P P' -> represents N B
         -> implode_word S1 W1 -> add_wo W1 B W2 B1 B2 -> implode_word S2 W2
         -> impl_aval CI S2 (pointer L P') -> type.
- :
   impl_pointer_add Daval Dsum Drep2 Dimp1 Daddwo Dimp2 Daval1
      <- can_negone 31' Bmax Dino
      <- can_represents1 Bmax Nmax Drepmax
      <- dichotomy P1 Nmax Dleqgt
      <- impl_pointer_add* Daval Dsum Drep2 Dino Drepmax Dleqgt Dimp1 Daddwo
            Dimp2 Daval1.
impl_pointer_sub* :
   Pi CI:corresp_info. Pi S1:string ww. Pi L:loc. Pi P:nat. Pi N:nat. Pi P':nat.
      Pi B:binary (s 31'). Pi Bmax:binary wwb. Pi Nmax:nat. Pi W1:binary wwb.
      Pi W2:binary (s 31'). Pi B1:bit. Pi B2:bit. Pi S2:string ww.
      impl_aval CI S1 (pointer L P) -> sum N P' P -> represents N B
         -> is_negone Bmax -> represents Nmax Bmax -> leq_gt P' Nmax
         -> implode_word S1 W1 -> add_wo W2 B W1 B1 B2 -> implode_word S2 W2
         -> impl_aval CI S2 (pointer L P') -> type.
- :
   impl_pointer_sub* (impl_aval_pointer DimpAddr DaddAddr1 DrepP Dlook) Dsum
      DrepN Dino Drepmax (leq_gt_leq Dleq) DimpAddr Daddwo DimpNaddr
      (impl_aval_pointer DimpNaddr Dadd6 DrepP' Dlook)
      <- can_represents Dleq Drepmax DrepP'
      <- sum_add_corr DrepN DrepP' DrepP Dsum Dadd1
      <- add_commute DaddAddr1 Dadd2
      <- add_assoc* Dadd1 Dadd2 Dadd3 Dadd4 X1
      <- add_commute Dadd4 Dadd5
      <- add_is_add_wo Dadd5 Daddwo
      <- binary_word_to_word Bnaddr DimpNaddr
      <- add_commute Dadd3 Dadd6.
- :
   impl_pointer_sub* (impl_aval_pointer DimpAddr DaddAddr1 DrepP Dlook) Dsum
      DrepN Dino Drepmax (leq_gt_gt Dlt) DimpAddr Daddwo2 DimpNaddr Daval
      <- represents_max DrepP Drepmax Dino Dleq1
      <- sum_commute Dsum Dsum1
      <- sum_implies_leq Dsum1 Dleq2
      <- leq_trans Dleq2 Dleq1 Dleq3
      <- lt_leq_trans Dlt Dleq3 Dlt1
      <- lt_contradict Dlt1 Dfalse
      <- can_add_wo' B B2 Baddr B3 B4 Daddwo1
      <- add_wo_commute Daddwo1 Daddwo2
      <- binary_word_to_word B2 DimpNaddr
      <- false_implies_impl_aval Dfalse (corresp_info_ N1 B1 LM IM1) S1
            (pointer L P') Daval.
- :
   impl_pointer_sub*
      (impl_aval_pointer_bad DimpAddr DaddAddr1 DrepP Dqr Dsummax Drepmax' Dino'
          Dlook)
      Dsum DrepN Dino Drepmax (leq_gt_leq Dleq) DimpAddr Daddwo DimpNaddr
      (impl_aval_pointer DimpNaddr Dadd6 DrepP' Dlook)
      <- can_represents Dleq Drepmax DrepP'
      <- represents_max DrepN Drepmax' Dino' Dleq1
      <- lt_succ Nmax' Dlt1
      <- leq_lt_trans Dleq1 Dlt1 Dlt2
      <- sum_ident N Dsum1
      <- quotrem_add_upto_divisor Dlt2 quotrem_z Dsum1 Dqr1
      <- represents_max DrepP' Drepmax' Dino' Dleq2
      <- leq_lt_trans Dleq2 Dlt1 Dlt3
      <- sum_ident P' Dsum2
      <- quotrem_add_upto_divisor Dlt3 quotrem_z Dsum2 Dqr2
      <- sum_add_corr_rem Dsum Dino' Drepmax' Dqr1 Dqr2 Dqr DrepN DrepP' DrepP
            Dadd1
      <- add_commute DaddAddr1 Dadd2
      <- add_assoc* Dadd1 Dadd2 Dadd3 Dadd4 X1
      <- add_commute Dadd4 Dadd5
      <- add_is_add_wo Dadd5 Daddwo
      <- binary_word_to_word Bnaddr DimpNaddr
      <- add_commute Dadd3 Dadd6.
- :
   impl_pointer_sub*
      (impl_aval_pointer_bad DimpAddr DaddAddr1 DrepP Dqr Dsummax Drepmax' Dino'
          Dlook)
      Dsum DrepN Dino Drepmax (leq_gt_gt Dlt) DimpAddr Daddwo DimpNaddr
      (impl_aval_pointer_bad DimpNaddr Dadd6 DrepPr1' Dqr2 Dsum1 Drepmax Dino
          Dlook)
      <- lt_implies_sum Dlt Dsum1
      <- represents_max DrepN Drepmax Dino Dleq1
      <- lt_succ Nmax Dlt1
      <- leq_lt_trans Dleq1 Dlt1 Dlt2
      <- sum_ident N Dsum2
      <- quotrem_add_upto_divisor Dlt2 quotrem_z Dsum2 Dqr1
      <- can_quotrem P' (s Nmax) nat_eq_ Pq1' Pr1' Dqr2
      <- rem_is_lt Dqr2 nat_eq_ Dlt3
      <- lt_succ_implies_leq Dlt3 Dleq2
      <- can_represents Dleq2 Drepmax DrepPr1'
      <- rem_sum nat_eq_ Dsum Dqr1 Dqr2 Dsum3 Dqr3 Dqr4
      <- is_negone_fun Dino' Dino Dbeq1
      <- represents_resp nat_eq_ Dbeq1 Drepmax' Drepmax1
      <- represents_fun1 Drepmax1 Drepmax Dnateq1
      <- nat_eq_inc Dnateq1 Dnateq2
      <- quotrem_resp nat_eq_ Dnateq2 nat_eq_ nat_eq_ Dqr Dqr5
      <- quotrem_fun Dqr4 Dqr5 X2 Dnateq3
      <- quotrem_resp nat_eq_ nat_eq_ nat_eq_ Dnateq3 Dqr3 Dqr6
      <- sum_ident Pr1' Dsum4
      <- quotrem_add_upto_divisor Dlt3 quotrem_z Dsum4 Dqr7
      <- sum_add_corr_rem Dsum3 Dino Drepmax Dqr1 Dqr7 Dqr6 DrepN DrepPr1' DrepP
            Dadd1
      <- add_commute DaddAddr1 Dadd2
      <- add_assoc* Dadd1 Dadd2 Dadd3 Dadd4 X1
      <- add_commute Dadd4 Dadd5
      <- add_is_add_wo Dadd5 Daddwo
      <- binary_word_to_word Bnaddr DimpNaddr
      <- add_commute Dadd3 Dadd6.
impl_pointer_sub :
   Pi CI:corresp_info. Pi S1:string ww. Pi L:loc. Pi P:nat. Pi N:nat. Pi P':nat.
      Pi B:binary (s 31'). Pi W1:binary wwb. Pi W2:binary (s 31'). Pi B1:bit.
      Pi B2:bit. Pi S2:string ww.
      impl_aval CI S1 (pointer L P) -> sum N P' P -> represents N B
         -> implode_word S1 W1 -> add_wo W2 B W1 B1 B2 -> implode_word S2 W2
         -> impl_aval CI S2 (pointer L P') -> type.
- :
   impl_pointer_sub Daval Dsum Drep2 Dimp1 Daddwo Dimp2 Daval1
      <- can_negone 31' Bmax Dino
      <- can_represents1 Bmax Nmax Drepmax
      <- dichotomy P1 Nmax Dleqgt
      <- impl_pointer_sub* Daval Dsum Drep2 Dino Drepmax Dleqgt Dimp1 Daddwo
            Dimp2 Daval1.
si_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi Scale:nat. Pi Index:nat. Pi Base:binary 3'.
      Pi Size:nat. Pi EA:eaddress Size.
      index N3 S S'' S' -> decode_si_disp Scale Index Base S'' Size EA #
         -> decode_si_disp Scale Index Base S Size EA S' -> type.
- : si_append index_z decode_si_disp_0 decode_si_disp_0.
- : si_append index_z decode_si_disp_1 decode_si_disp_1.
- : si_append index_z decode_si_disp_2 decode_si_disp_2.
- : si_append index_z decode_si_disp_3 decode_si_disp_3.
- : si_append index_z decode_si_disp_4 decode_si_disp_4.
- : si_append (index_4 index_z) (decode_si_disp_5 D) (decode_si_disp_5 D).
- : si_append index_z decode_si_disp_6 decode_si_disp_6.
- : si_append index_z decode_si_disp_7 decode_si_disp_7.
disp_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi Mod:binary 2'. Pi RM:binary 3'. Pi Size:nat.
      Pi EA:eaddress Size.
      index N3 S S'' S' -> decode_modrm Mod RM S'' Size EA #
         -> decode_modrm Mod RM S Size EA S' -> type.
- : disp_append index_z decode_modrm_00 decode_modrm_00.
- : disp_append index_z decode_modrm_01 decode_modrm_01.
- : disp_append index_z decode_modrm_02 decode_modrm_02.
- : disp_append index_z decode_modrm_03 decode_modrm_03.
- :
   disp_append (index_s Dindex) (decode_modrm_04 D3 D2 D1)
      (decode_modrm_04 D3' D2 D1)
      <- si_append Dindex D3 D3'.
- : disp_append (index_4 index_z) (decode_modrm_05 D) (decode_modrm_05 D).
- : disp_append index_z decode_modrm_06 decode_modrm_06.
- : disp_append index_z decode_modrm_07 decode_modrm_07.
- : disp_append (index_s index_z) (decode_modrm_10 D) (decode_modrm_10 D).
- : disp_append (index_s index_z) (decode_modrm_11 D) (decode_modrm_11 D).
- : disp_append (index_s index_z) (decode_modrm_12 D) (decode_modrm_12 D).
- : disp_append (index_s index_z) (decode_modrm_13 D) (decode_modrm_13 D).
- :
   disp_append (index_2 index_z) (decode_modrm_14 D4 D3 D2 D1)
      (decode_modrm_14 D4 D3 D2 D1).
- : disp_append (index_s index_z) (decode_modrm_15 D) (decode_modrm_15 D).
- : disp_append (index_s index_z) (decode_modrm_16 D) (decode_modrm_16 D).
- : disp_append (index_s index_z) (decode_modrm_17 D) (decode_modrm_17 D).
- : disp_append (index_4 index_z) (decode_modrm_20 D) (decode_modrm_20 D).
- : disp_append (index_4 index_z) (decode_modrm_21 D) (decode_modrm_21 D).
- : disp_append (index_4 index_z) (decode_modrm_22 D) (decode_modrm_22 D).
- : disp_append (index_4 index_z) (decode_modrm_23 D) (decode_modrm_23 D).
- :
   disp_append (index_5 index_z) (decode_modrm_24 D4 D3 D2 D1)
      (decode_modrm_24 D4 D3 D2 D1).
- : disp_append (index_4 index_z) (decode_modrm_25 D) (decode_modrm_25 D).
- : disp_append (index_4 index_z) (decode_modrm_26 D) (decode_modrm_26 D).
- : disp_append (index_4 index_z) (decode_modrm_27 D) (decode_modrm_27 D).
- : disp_append index_z decode_modrm_30 decode_modrm_30.
- : disp_append index_z decode_modrm_31 decode_modrm_31.
- : disp_append index_z decode_modrm_32 decode_modrm_32.
- : disp_append index_z decode_modrm_33 decode_modrm_33.
- : disp_append index_z decode_modrm_34 decode_modrm_34.
- : disp_append index_z decode_modrm_35 decode_modrm_35.
- : disp_append index_z decode_modrm_36 decode_modrm_36.
- : disp_append index_z decode_modrm_37 decode_modrm_37.
- : disp_append index_z decode_modrm_30_8 decode_modrm_30_8.
- : disp_append index_z decode_modrm_31_8 decode_modrm_31_8.
- : disp_append index_z decode_modrm_32_8 decode_modrm_32_8.
- : disp_append index_z decode_modrm_33_8 decode_modrm_33_8.
- : disp_append index_z decode_modrm_34_8 decode_modrm_34_8.
- : disp_append index_z decode_modrm_35_8 decode_modrm_35_8.
- : disp_append index_z decode_modrm_36_8 decode_modrm_36_8.
- : disp_append index_z decode_modrm_37_8 decode_modrm_37_8.
disp_esc_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi Mod:binary 2'. Pi RM:binary 3'. Pi Size:nat.
      Pi EA:eaddress Size.
      index N3 S S'' S' -> decode_modrm_esc Mod RM S'' Size EA #
         -> decode_modrm_esc Mod RM S Size EA S' -> type.
- : disp_esc_append index_z decode_modrm_esc_00 decode_modrm_esc_00.
- : disp_esc_append index_z decode_modrm_esc_01 decode_modrm_esc_01.
- : disp_esc_append index_z decode_modrm_esc_02 decode_modrm_esc_02.
- : disp_esc_append index_z decode_modrm_esc_03 decode_modrm_esc_03.
- :
   disp_esc_append (index_s Dindex) (decode_modrm_esc_04 D3 D2 D1)
      (decode_modrm_esc_04 D3' D2 D1)
      <- si_append Dindex D3 D3'.
- :
   disp_esc_append (index_4 index_z) (decode_modrm_esc_05 D)
      (decode_modrm_esc_05 D).
- : disp_esc_append index_z decode_modrm_esc_06 decode_modrm_esc_06.
- : disp_esc_append index_z decode_modrm_esc_07 decode_modrm_esc_07.
- :
   disp_esc_append (index_s index_z) (decode_modrm_esc_10 D)
      (decode_modrm_esc_10 D).
- :
   disp_esc_append (index_s index_z) (decode_modrm_esc_11 D)
      (decode_modrm_esc_11 D).
- :
   disp_esc_append (index_s index_z) (decode_modrm_esc_12 D)
      (decode_modrm_esc_12 D).
- :
   disp_esc_append (index_s index_z) (decode_modrm_esc_13 D)
      (decode_modrm_esc_13 D).
- :
   disp_esc_append (index_2 index_z) (decode_modrm_esc_14 D4 D3 D2 D1)
      (decode_modrm_esc_14 D4 D3 D2 D1).
- :
   disp_esc_append (index_s index_z) (decode_modrm_esc_15 D)
      (decode_modrm_esc_15 D).
- :
   disp_esc_append (index_s index_z) (decode_modrm_esc_16 D)
      (decode_modrm_esc_16 D).
- :
   disp_esc_append (index_s index_z) (decode_modrm_esc_17 D)
      (decode_modrm_esc_17 D).
- :
   disp_esc_append (index_4 index_z) (decode_modrm_esc_20 D)
      (decode_modrm_esc_20 D).
- :
   disp_esc_append (index_4 index_z) (decode_modrm_esc_21 D)
      (decode_modrm_esc_21 D).
- :
   disp_esc_append (index_4 index_z) (decode_modrm_esc_22 D)
      (decode_modrm_esc_22 D).
- :
   disp_esc_append (index_4 index_z) (decode_modrm_esc_23 D)
      (decode_modrm_esc_23 D).
- :
   disp_esc_append (index_5 index_z) (decode_modrm_esc_24 D4 D3 D2 D1)
      (decode_modrm_esc_24 D4 D3 D2 D1).
- :
   disp_esc_append (index_4 index_z) (decode_modrm_esc_25 D)
      (decode_modrm_esc_25 D).
- :
   disp_esc_append (index_4 index_z) (decode_modrm_esc_26 D)
      (decode_modrm_esc_26 D).
- :
   disp_esc_append (index_4 index_z) (decode_modrm_esc_27 D)
      (decode_modrm_esc_27 D).
max_disp_size : nat = 5'.
max_imm_size : nat = 4'.
max_extension_size : nat = 9'.
max_opcode_size : nat = 7'.
max_inst_size : nat = 16'.
max_inst_size-1 : nat = 15'.
max_inst_size-2 : nat = 14'.
si_size :
   Pi N1:nat. Pi N2:nat. Pi Scale:nat. Pi Index:nat. Pi Base:binary 3'.
      Pi S:string N1. Pi Size:nat. Pi EA:eaddress Size. Pi S':string N2.
      Pi N:nat. Pi S'':string N.
      decode_si_disp Scale Index Base S Size EA S' -> index N S S'' S'
         -> decode_si_disp Scale Index Base S'' Size EA # -> leq N 4' -> type.
- : si_size decode_si_disp_0 index_z decode_si_disp_0 leq_z.
- : si_size decode_si_disp_1 index_z decode_si_disp_1 leq_z.
- : si_size decode_si_disp_2 index_z decode_si_disp_2 leq_z.
- : si_size decode_si_disp_3 index_z decode_si_disp_3 leq_z.
- : si_size decode_si_disp_4 index_z decode_si_disp_4 leq_z.
- :
   si_size (decode_si_disp_5 D) (index_4 index_z) (decode_si_disp_5 D)
      (leq_4 leq_z).
- : si_size decode_si_disp_6 index_z decode_si_disp_6 leq_z.
- : si_size decode_si_disp_7 index_z decode_si_disp_7 leq_z.
disp_size :
   Pi N1:nat. Pi N2:nat. Pi Mod:binary 2'. Pi RM:binary 3'. Pi S:string N1.
      Pi Size:nat. Pi EA:eaddress Size. Pi S':string N2. Pi N:nat.
      Pi S'':string N.
      decode_modrm Mod RM S Size EA S' -> index N S S'' S'
         -> decode_modrm Mod RM S'' Size EA # -> leq N 5' -> type.
- : disp_size decode_modrm_00 index_z decode_modrm_00 leq_z.
- : disp_size decode_modrm_01 index_z decode_modrm_01 leq_z.
- : disp_size decode_modrm_02 index_z decode_modrm_02 leq_z.
- : disp_size decode_modrm_03 index_z decode_modrm_03 leq_z.
- :
   disp_size (decode_modrm_04 D3 D2 D1) (index_s Dindex)
      (decode_modrm_04 D3' D2 D1) (leq_s Dleq)
      <- si_size D3 Dindex D3' Dleq.
- :
   disp_size (decode_modrm_05 D) (index_4 index_z) (decode_modrm_05 D)
      (leq_4 leq_z).
- : disp_size decode_modrm_06 index_z decode_modrm_06 leq_z.
- : disp_size decode_modrm_07 index_z decode_modrm_07 leq_z.
- :
   disp_size (decode_modrm_10 D) (index_s index_z) (decode_modrm_10 D)
      (leq_s leq_z).
- :
   disp_size (decode_modrm_11 D) (index_s index_z) (decode_modrm_11 D)
      (leq_s leq_z).
- :
   disp_size (decode_modrm_12 D) (index_s index_z) (decode_modrm_12 D)
      (leq_s leq_z).
- :
   disp_size (decode_modrm_13 D) (index_s index_z) (decode_modrm_13 D)
      (leq_s leq_z).
- :
   disp_size (decode_modrm_14 D4 D3 D2 D1) (index_2 index_z)
      (decode_modrm_14 D4 D3 D2 D1) (leq_2 leq_z).
- :
   disp_size (decode_modrm_15 D) (index_s index_z) (decode_modrm_15 D)
      (leq_s leq_z).
- :
   disp_size (decode_modrm_16 D) (index_s index_z) (decode_modrm_16 D)
      (leq_s leq_z).
- :
   disp_size (decode_modrm_17 D) (index_s index_z) (decode_modrm_17 D)
      (leq_s leq_z).
- :
   disp_size (decode_modrm_20 D) (index_4 index_z) (decode_modrm_20 D)
      (leq_4 leq_z).
- :
   disp_size (decode_modrm_21 D) (index_4 index_z) (decode_modrm_21 D)
      (leq_4 leq_z).
- :
   disp_size (decode_modrm_22 D) (index_4 index_z) (decode_modrm_22 D)
      (leq_4 leq_z).
- :
   disp_size (decode_modrm_23 D) (index_4 index_z) (decode_modrm_23 D)
      (leq_4 leq_z).
- :
   disp_size (decode_modrm_24 D4 D3 D2 D1) (index_5 index_z)
      (decode_modrm_24 D4 D3 D2 D1) (leq_5 leq_z).
- :
   disp_size (decode_modrm_25 D) (index_4 index_z) (decode_modrm_25 D)
      (leq_4 leq_z).
- :
   disp_size (decode_modrm_26 D) (index_4 index_z) (decode_modrm_26 D)
      (leq_4 leq_z).
- :
   disp_size (decode_modrm_27 D) (index_4 index_z) (decode_modrm_27 D)
      (leq_4 leq_z).
- : disp_size decode_modrm_30 index_z decode_modrm_30 leq_z.
- : disp_size decode_modrm_31 index_z decode_modrm_31 leq_z.
- : disp_size decode_modrm_32 index_z decode_modrm_32 leq_z.
- : disp_size decode_modrm_33 index_z decode_modrm_33 leq_z.
- : disp_size decode_modrm_34 index_z decode_modrm_34 leq_z.
- : disp_size decode_modrm_35 index_z decode_modrm_35 leq_z.
- : disp_size decode_modrm_36 index_z decode_modrm_36 leq_z.
- : disp_size decode_modrm_37 index_z decode_modrm_37 leq_z.
- : disp_size decode_modrm_30_8 index_z decode_modrm_30_8 leq_z.
- : disp_size decode_modrm_31_8 index_z decode_modrm_31_8 leq_z.
- : disp_size decode_modrm_32_8 index_z decode_modrm_32_8 leq_z.
- : disp_size decode_modrm_33_8 index_z decode_modrm_33_8 leq_z.
- : disp_size decode_modrm_34_8 index_z decode_modrm_34_8 leq_z.
- : disp_size decode_modrm_35_8 index_z decode_modrm_35_8 leq_z.
- : disp_size decode_modrm_36_8 index_z decode_modrm_36_8 leq_z.
- : disp_size decode_modrm_37_8 index_z decode_modrm_37_8 leq_z.
disp_esc_size :
   Pi N1:nat. Pi N2:nat. Pi Mod:binary 2'. Pi RM:binary 3'. Pi S:string N1.
      Pi Size:nat. Pi EA:eaddress Size. Pi S':string N2. Pi N:nat.
      Pi S'':string N.
      decode_modrm_esc Mod RM S Size EA S' -> index N S S'' S'
         -> decode_modrm_esc Mod RM S'' Size EA # -> leq N 5' -> type.
- : disp_esc_size decode_modrm_esc_00 index_z decode_modrm_esc_00 leq_z.
- : disp_esc_size decode_modrm_esc_01 index_z decode_modrm_esc_01 leq_z.
- : disp_esc_size decode_modrm_esc_02 index_z decode_modrm_esc_02 leq_z.
- : disp_esc_size decode_modrm_esc_03 index_z decode_modrm_esc_03 leq_z.
- :
   disp_esc_size (decode_modrm_esc_04 D3 D2 D1) (index_s Dindex)
      (decode_modrm_esc_04 D3' D2 D1) (leq_s Dleq)
      <- si_size D3 Dindex D3' Dleq.
- :
   disp_esc_size (decode_modrm_esc_05 D) (index_4 index_z)
      (decode_modrm_esc_05 D) (leq_4 leq_z).
- : disp_esc_size decode_modrm_esc_06 index_z decode_modrm_esc_06 leq_z.
- : disp_esc_size decode_modrm_esc_07 index_z decode_modrm_esc_07 leq_z.
- :
   disp_esc_size (decode_modrm_esc_10 D) (index_s index_z)
      (decode_modrm_esc_10 D) (leq_s leq_z).
- :
   disp_esc_size (decode_modrm_esc_11 D) (index_s index_z)
      (decode_modrm_esc_11 D) (leq_s leq_z).
- :
   disp_esc_size (decode_modrm_esc_12 D) (index_s index_z)
      (decode_modrm_esc_12 D) (leq_s leq_z).
- :
   disp_esc_size (decode_modrm_esc_13 D) (index_s index_z)
      (decode_modrm_esc_13 D) (leq_s leq_z).
- :
   disp_esc_size (decode_modrm_esc_14 D4 D3 D2 D1) (index_2 index_z)
      (decode_modrm_esc_14 D4 D3 D2 D1) (leq_2 leq_z).
- :
   disp_esc_size (decode_modrm_esc_15 D) (index_s index_z)
      (decode_modrm_esc_15 D) (leq_s leq_z).
- :
   disp_esc_size (decode_modrm_esc_16 D) (index_s index_z)
      (decode_modrm_esc_16 D) (leq_s leq_z).
- :
   disp_esc_size (decode_modrm_esc_17 D) (index_s index_z)
      (decode_modrm_esc_17 D) (leq_s leq_z).
- :
   disp_esc_size (decode_modrm_esc_20 D) (index_4 index_z)
      (decode_modrm_esc_20 D) (leq_4 leq_z).
- :
   disp_esc_size (decode_modrm_esc_21 D) (index_4 index_z)
      (decode_modrm_esc_21 D) (leq_4 leq_z).
- :
   disp_esc_size (decode_modrm_esc_22 D) (index_4 index_z)
      (decode_modrm_esc_22 D) (leq_4 leq_z).
- :
   disp_esc_size (decode_modrm_esc_23 D) (index_4 index_z)
      (decode_modrm_esc_23 D) (leq_4 leq_z).
- :
   disp_esc_size (decode_modrm_esc_24 D4 D3 D2 D1) (index_5 index_z)
      (decode_modrm_esc_24 D4 D3 D2 D1) (leq_5 leq_z).
- :
   disp_esc_size (decode_modrm_esc_25 D) (index_4 index_z)
      (decode_modrm_esc_25 D) (leq_4 leq_z).
- :
   disp_esc_size (decode_modrm_esc_26 D) (index_4 index_z)
      (decode_modrm_esc_26 D) (leq_4 leq_z).
- :
   disp_esc_size (decode_modrm_esc_27 D) (index_4 index_z)
      (decode_modrm_esc_27 D) (leq_4 leq_z).
inst_size_eax :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I' S'
         -> index N S S'' S'
         -> idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> leq N max_inst_size-1 -> type.
- : inst_size_eax idecode_eax_ (index_4 index_z) idecode_eax_ (leq_4 leq_z).
inst_size_al :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I' S'
         -> index N S S'' S'
         -> idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S''
               I' #
         -> leq N max_inst_size-1 -> type.
- : inst_size_al idecode_al_ (index_s index_z) idecode_al_ (leq_s leq_z).
inst_size_mi :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi S:string N1. Pi I':iinst.
      Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_mi B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I' S'
         -> index N S S'' S'
         -> idecode_mi B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_mi (idecode_mi_ D D1) (index_s Dindex') (idecode_mi_ D'' D1) Dleq'
      <- disp_size D Dindex D' Dleq
      <- index_compose'' Dindex (index_4 index_z) (sum_4 sum_z) Dindex'
            Dindex_append
      <- leq_5+_trans (leq_5 Dleq) Dleq'
      <- disp_append Dindex_append D' D''.
inst_size_mi8 :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi S:string N1. Pi I':iinst.
      Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_mi8 B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I'
         S'
         -> index N S S'' S'
         -> idecode_mi8 B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_mi8 (idecode_mi8_ D D1) (index_s Dindex') (idecode_mi8_ D'' D1)
      Dleq'
      <- disp_size D Dindex D' Dleq
      <- index_compose'' Dindex (index_s index_z) (sum_s sum_z) Dindex'
            Dindex_append
      <- leq_8+_trans (leq_2 Dleq) Dleq'
      <- disp_append Dindex_append D' D''.
inst_size_mi_oper8 :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper 1' -> iinst. Pi S:string N1. Pi I':iinst.
      Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_mi_oper8 B (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S
         I' S'
         -> index N S S'' S'
         -> idecode_mi_oper8 B
               (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_mi_oper8 (idecode_mi_oper8_ D D1) (index_s Dindex')
      (idecode_mi_oper8_ D'' D1) Dleq'
      <- disp_size D Dindex D' Dleq
      <- index_compose'' Dindex (index_s index_z) (sum_s sum_z) Dindex'
            Dindex_append
      <- leq_8+_trans (leq_2 Dleq) Dleq'
      <- disp_append Dindex_append D' D''.
inst_size_mi8_oper8 :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper 1' -> iinst. Pi S:string N1. Pi I':iinst.
      Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_mi8_oper8 B (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S
         I' S'
         -> index N S S'' S'
         -> idecode_mi8_oper8 B
               (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_mi8_oper8 (idecode_mi8_oper8_ D D1) (index_s Dindex')
      (idecode_mi8_oper8_ D'' D1) Dleq'
      <- disp_size D Dindex D' Dleq
      <- index_compose'' Dindex (index_s index_z) (sum_s sum_z) Dindex'
            Dindex_append
      <- leq_8+_trans (leq_2 Dleq) Dleq'
      <- disp_append Dindex_append D' D''.
inst_size_mib :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi S:string N1. Pi I':iinst.
      Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_mib B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I'
         S'
         -> index N S S'' S'
         -> idecode_mib B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_mib (idecode_mib_ D1 D D2) (index_s Dindex')
      (idecode_mib_ D1 D'' D2) Dleq'
      <- disp_size D Dindex D' Dleq
      <- index_compose'' Dindex (index_s index_z) (sum_s sum_z) Dindex'
            Dindex_append
      <- leq_8+_trans (leq_2 Dleq) Dleq'
      <- disp_append Dindex_append D' D''.
inst_size_mr :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I' S'
         -> index N S S'' S'
         -> idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S''
               I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_mr (idecode_mr_ D1 D D2) (index_s Dindex) (idecode_mr_ D1 D' D2)
      Dleq'
      <- disp_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_mr8 :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I' S'
         -> index N S S'' S'
         -> idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_mr8 (idecode_mr8_ D1 D D2) (index_s Dindex) (idecode_mr8_ D1 D' D2)
      Dleq'
      <- disp_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_rm :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I' S'
         -> index N S S'' S'
         -> idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S''
               I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_rm (idecode_rm_ D1 D D2) (index_s Dindex) (idecode_rm_ D1 D' D2)
      Dleq'
      <- disp_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_rm_oper8 :
   Pi N1:nat. Pi N2:nat.
      Pi I:Pi n:nat. Pi n1:nat. eaddress n -> oper n1 -> iinst. Pi S:string N1.
      Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_rm_oper8
         (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz.
             I Ndsz Nosz ea o) S I' S'
         -> index N S S'' S'
         -> idecode_rm_oper8
               (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz.
                   I Ndsz Nosz ea o) S'' I' 
#
         -> leq N max_inst_size-2 -> type.
- :
   inst_size_rm_oper8 (idecode_rm_oper8_ D1 D D2) (index_s Dindex)
      (idecode_rm_oper8_ D1 D' D2) Dleq'
      <- disp_size D Dindex D' Dleq
      <- leq_8+_trans (leq_s Dleq) Dleq'.
inst_size_rm8 :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I' S'
         -> index N S S'' S'
         -> idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_rm8 (idecode_rm8_ D1 D D2) (index_s Dindex) (idecode_rm8_ D1 D' D2)
      Dleq'
      <- disp_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_nr :
   Pi N1:nat. Pi N2:nat. Pi I:oper ww -> iinst. Pi S:string N1. Pi I':iinst.
      Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_nr (\o:oper ww. I o) S I' S' -> index N S S'' S'
         -> idecode_nr (\o:oper ww. I o) S'' I' # -> leq N max_inst_size-1
         -> type.
- :
   inst_size_nr (idecode_nr_ D1 D2) (index_4 index_z) (idecode_nr_ D1 D2)
      (leq_4 leq_z).
inst_size_nai :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'. Pi I:oper ww -> iinst. Pi S:string N1.
      Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_nai B (\o:oper ww. I o) S I' S' -> index N S S'' S'
         -> idecode_nai B (\o:oper ww. I o) S'' I' # -> leq N max_inst_size-1
         -> type.
- :
   inst_size_nai (idecode_nai_ D D1) (index_s Dindex) (idecode_nai_ D' D1) Dleq'
      <- disp_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_sh :
   Pi N1:nat. Pi N2:nat. Pi I:oper ww -> iinst. Pi S:string N1. Pi I':iinst.
      Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_sh (\o:oper ww. I o) S I' S' -> index N S S'' S'
         -> idecode_sh (\o:oper ww. I o) S'' I' # -> leq N max_inst_size-1
         -> type.
- :
   inst_size_sh (idecode_sh_ D1 D2) (index_s index_z) (idecode_sh_ D1 D2)
      (leq_s leq_z).
inst_size_m :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'. Pi I:eaddress ww -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_m B (\ea:eaddress ww. I ea) S I' S' -> index N S S'' S'
         -> idecode_m B (\ea:eaddress ww. I ea) S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_m (idecode_m_ D D1) (index_s Dindex) (idecode_m_ D' D1) Dleq'
      <- disp_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_m16fp :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'. Pi I:eaddress 2' -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_m16fp B (\ea:eaddress 2'. I ea) S I' S' -> index N S S'' S'
         -> idecode_m16fp B (\ea:eaddress 2'. I ea) S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_m16fp (idecode_m16fp_ D D1) (index_s Dindex) (idecode_m16fp_ D' D1)
      Dleq'
      <- disp_esc_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_m32fp :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'. Pi I:eaddress ww -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_m32fp B (\ea:eaddress ww. I ea) S I' S' -> index N S S'' S'
         -> idecode_m32fp B (\ea:eaddress ww. I ea) S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_m32fp (idecode_m32fp_ D D1) (index_s Dindex) (idecode_m32fp_ D' D1)
      Dleq'
      <- disp_esc_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_m64fp :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'. Pi I:eaddress dw -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_m64fp B (\ea:eaddress dw. I ea) S I' S' -> index N S S'' S'
         -> idecode_m64fp B (\ea:eaddress dw. I ea) S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_m64fp (idecode_m64fp_ D D1) (index_s Dindex) (idecode_m64fp_ D' D1)
      Dleq'
      <- disp_esc_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_m80fp :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'. Pi I:eaddress 10' -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_m80fp B (\ea:eaddress 10'. I ea) S I' S' -> index N S S'' S'
         -> idecode_m80fp B (\ea:eaddress 10'. I ea) S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_m80fp (idecode_m80fp_ D D1) (index_s Dindex) (idecode_m80fp_ D' D1)
      Dleq'
      <- disp_esc_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_m8 :
   Pi N1:nat. Pi N2:nat. Pi B:binary 3'. Pi I:eaddress 1' -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_m8 B (\ea:eaddress 1'. I ea) S I' S' -> index N S S'' S'
         -> idecode_m8 B (\ea:eaddress 1'. I ea) S'' I' #
         -> leq N max_inst_size-1 -> type.
- :
   inst_size_m8 (idecode_m8_ D D1) (index_s Dindex) (idecode_m8_ D' D1) Dleq'
      <- disp_size D Dindex D' Dleq
      <- leq_9+_trans (leq_s Dleq) Dleq'.
inst_size_r :
   Pi N1:nat. Pi N2:nat. Pi B:binary 5'. Pi I:eaddress ww -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_r B (\ea:eaddress ww. I ea) S I' S' -> index N S S'' S'
         -> idecode_r B (\ea:eaddress ww. I ea) S'' I' # -> leq N max_inst_size
         -> leq 1' N -> type.
- :
   inst_size_r (idecode_r_ D1 D2) (index_s index_z) (idecode_r_ D1 D2) leq_1s
      leq_1s.
inst_size_r' :
   Pi N1:nat. Pi N2:nat. Pi B:binary 5'. Pi I:eaddress ww -> iinst.
      Pi S:string N1. Pi I':iinst. Pi S':string N2. Pi N:nat. Pi S'':string N.
      idecode_r B (\ea:eaddress ww. I ea) S I' S' -> index N S S'' S'
         -> idecode_r B (\ea:eaddress ww. I ea) S'' I' #
         -> leq N max_inst_size-1 -> leq 1' N -> type.
- :
   inst_size_r' (idecode_r_ D1 D2) (index_s index_z) (idecode_r_ D1 D2) leq_1s
      leq_1s.
inst_size* :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi I:iinst. Pi S':string N2. Pi N:nat.
      Pi S'':string N.
      idecode* S I S' -> index N S S'' S' -> idecode* S'' I #
         -> leq N max_inst_size -> leq 1' N -> type.
- :
   inst_size* (idecode_add_eax D) (index_s D1) (idecode_add_eax D2) (leq_s D3)
      leq_1s
      <- inst_size_eax D D1 D2 D3.
- :
   inst_size* (idecode_add_al D) (index_s D1) (idecode_add_al D2) (leq_s D3)
      leq_1s
      <- inst_size_al D D1 D2 D3.
- :
   inst_size* (idecode_add_mi D) (index_s D1) (idecode_add_mi D2) (leq_s D3)
      leq_1s
      <- inst_size_mi D D1 D2 D3.
- :
   inst_size* (idecode_add_mi8 D) (index_s D1) (idecode_add_mi8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8 D D1 D2 D3.
- :
   inst_size* (idecode_add_mib D) (index_s D1) (idecode_add_mib D2) (leq_s D3)
      leq_1s
      <- inst_size_mib D D1 D2 D3.
- :
   inst_size* (idecode_add_mr D) (index_s D1) (idecode_add_mr D2) (leq_s D3)
      leq_1s
      <- inst_size_mr D D1 D2 D3.
- :
   inst_size* (idecode_add_mr8 D) (index_s D1) (idecode_add_mr8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mr8 D D1 D2 D3.
- :
   inst_size* (idecode_add_rm D) (index_s D1) (idecode_add_rm D2) (leq_s D3)
      leq_1s
      <- inst_size_rm D D1 D2 D3.
- :
   inst_size* (idecode_add_rm8 D) (index_s D1) (idecode_add_rm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_rm8 D D1 D2 D3.
- :
   inst_size* (idecode_and_eax D) (index_s D1) (idecode_and_eax D2) (leq_s D3)
      leq_1s
      <- inst_size_eax D D1 D2 D3.
- :
   inst_size* (idecode_and_al D) (index_s D1) (idecode_and_al D2) (leq_s D3)
      leq_1s
      <- inst_size_al D D1 D2 D3.
- :
   inst_size* (idecode_and_mi D) (index_s D1) (idecode_and_mi D2) (leq_s D3)
      leq_1s
      <- inst_size_mi D D1 D2 D3.
- :
   inst_size* (idecode_and_mi8 D) (index_s D1) (idecode_and_mi8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8 D D1 D2 D3.
- :
   inst_size* (idecode_and_mib D) (index_s D1) (idecode_and_mib D2) (leq_s D3)
      leq_1s
      <- inst_size_mib D D1 D2 D3.
- :
   inst_size* (idecode_and_mr D) (index_s D1) (idecode_and_mr D2) (leq_s D3)
      leq_1s
      <- inst_size_mr D D1 D2 D3.
- :
   inst_size* (idecode_and_mr8 D) (index_s D1) (idecode_and_mr8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mr8 D D1 D2 D3.
- :
   inst_size* (idecode_and_rm D) (index_s D1) (idecode_and_rm D2) (leq_s D3)
      leq_1s
      <- inst_size_rm D D1 D2 D3.
- :
   inst_size* (idecode_and_rm8 D) (index_s D1) (idecode_and_rm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_rm8 D D1 D2 D3.
- :
   inst_size* (idecode_call_nr D) (index_s D1) (idecode_call_nr D2) (leq_s D3)
      leq_1s
      <- inst_size_nr D D1 D2 D3.
- :
   inst_size* (idecode_call_nai D) (index_s D1) (idecode_call_nai D2) (leq_s D3)
      leq_1s
      <- inst_size_nai D D1 D2 D3.
- :
   inst_size* (idecode_cmp_eax D) (index_s D1) (idecode_cmp_eax D2) (leq_s D3)
      leq_1s
      <- inst_size_eax D D1 D2 D3.
- :
   inst_size* (idecode_cmp_al D) (index_s D1) (idecode_cmp_al D2) (leq_s D3)
      leq_1s
      <- inst_size_al D D1 D2 D3.
- :
   inst_size* (idecode_cmp_mi D) (index_s D1) (idecode_cmp_mi D2) (leq_s D3)
      leq_1s
      <- inst_size_mi D D1 D2 D3.
- :
   inst_size* (idecode_cmp_mi8 D) (index_s D1) (idecode_cmp_mi8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8 D D1 D2 D3.
- :
   inst_size* (idecode_cmp_mib D) (index_s D1) (idecode_cmp_mib D2) (leq_s D3)
      leq_1s
      <- inst_size_mib D D1 D2 D3.
- :
   inst_size* (idecode_cmp_mr D) (index_s D1) (idecode_cmp_mr D2) (leq_s D3)
      leq_1s
      <- inst_size_mr D D1 D2 D3.
- :
   inst_size* (idecode_cmp_mr8 D) (index_s D1) (idecode_cmp_mr8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mr8 D D1 D2 D3.
- :
   inst_size* (idecode_cmp_rm D) (index_s D1) (idecode_cmp_rm D2) (leq_s D3)
      leq_1s
      <- inst_size_rm D D1 D2 D3.
- :
   inst_size* (idecode_cmp_rm8 D) (index_s D1) (idecode_cmp_rm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_rm8 D D1 D2 D3.
- :
   inst_size* idecode_f2xm1 (index_2 index_z) idecode_f2xm1 (leq_2 leq_z) 
leq_1s.
- : inst_size* idecode_fabs (index_2 index_z) idecode_fabs (leq_2 leq_z) leq_1s.
- :
   inst_size* (idecode_fadd32 D) (index_s D1) (idecode_fadd32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fadd64 D) (index_s D1) (idecode_fadd64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fadd_rt D) (index_s D1) (idecode_fadd_rt D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fadd_tr D) (index_s D1) (idecode_fadd_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_faddp_tr D) (index_s D1) (idecode_faddp_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fiadd32 D) (index_s D1) (idecode_fiadd32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fiadd64 D) (index_s D1) (idecode_fiadd64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- : inst_size* idecode_fchs (index_2 index_z) idecode_fchs (leq_2 leq_z) leq_1s.
- :
   inst_size* idecode_fclex (index_3 index_z) idecode_fclex (leq_3 leq_z) 
leq_1s.
- :
   inst_size* idecode_fnclex (index_2 index_z) idecode_fnclex (leq_2 leq_z)
      leq_1s.
- :
   inst_size* (idecode_fcmov1 D) (index_2 index_z) (idecode_fcmov1 D)
      (leq_s leq_1s) leq_1s.
- :
   inst_size* (idecode_fcmov2 D) (index_2 index_z) (idecode_fcmov2 D)
      (leq_s leq_1s) leq_1s.
- :
   inst_size* (idecode_fcom_tr D) (index_s D1) (idecode_fcom_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fcomp_tr D) (index_s D1) (idecode_fcomp_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* idecode_fcompp (index_2 index_z) idecode_fcompp (leq_2 leq_z)
      leq_1s.
- :
   inst_size* (idecode_fcomi D) (index_2 index_z) (idecode_fcomi D)
      (leq_s leq_1s) leq_1s.
- :
   inst_size* (idecode_fcomip D) (index_2 index_z) (idecode_fcomip D)
      (leq_s leq_1s) leq_1s.
- :
   inst_size* (idecode_fucomi D) (index_2 index_z) (idecode_fucomi D)
      (leq_s leq_1s) leq_1s.
- :
   inst_size* (idecode_fucomip D) (index_2 index_z) (idecode_fucomip D)
      (leq_s leq_1s) leq_1s.
- : inst_size* idecode_fcos (index_2 index_z) idecode_fcos (leq_2 leq_z) leq_1s.
- :
   inst_size* idecode_fdecstp (index_2 index_z) idecode_fdecstp (leq_2 leq_z)
      leq_1s.
- :
   inst_size* (idecode_fdiv32 D) (index_s D1) (idecode_fdiv32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fdiv64 D) (index_s D1) (idecode_fdiv64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fdiv_rt D) (index_s D1) (idecode_fdiv_rt D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fdiv_tr D) (index_s D1) (idecode_fdiv_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fdivp_tr D) (index_s D1) (idecode_fdivp_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fidiv32 D) (index_s D1) (idecode_fidiv32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fidiv64 D) (index_s D1) (idecode_fidiv64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fdivr32 D) (index_s D1) (idecode_fdivr32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fdivr64 D) (index_s D1) (idecode_fdivr64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fdivr_rt D) (index_s D1) (idecode_fdivr_rt D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fdivr_tr D) (index_s D1) (idecode_fdivr_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fdivrp_tr D) (index_s D1) (idecode_fdivrp_tr D2)
      (leq_s D3) leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fidivr32 D) (index_s D1) (idecode_fidivr32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fidivr64 D) (index_s D1) (idecode_fidivr64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_ffree D) (index_2 index_z) (idecode_ffree D)
      (leq_s leq_1s) leq_1s.
- :
   inst_size* (idecode_ficom16 D) (index_s D1) (idecode_ficom16 D2) (leq_s D3)
      leq_1s
      <- inst_size_m16fp D D1 D2 D3.
- :
   inst_size* (idecode_ficom32 D) (index_s D1) (idecode_ficom32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_ficomp16 D) (index_s D1) (idecode_ficomp16 D2) (leq_s D3)
      leq_1s
      <- inst_size_m16fp D D1 D2 D3.
- :
   inst_size* (idecode_ficomp32 D) (index_s D1) (idecode_ficomp32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fild16 D) (index_s D1) (idecode_fild16 D2) (leq_s D3)
      leq_1s
      <- inst_size_m16fp D D1 D2 D3.
- :
   inst_size* (idecode_fild32 D) (index_s D1) (idecode_fild32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fild64 D) (index_s D1) (idecode_fild64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* idecode_fincstp (index_2 index_z) idecode_fincstp (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_finit (index_3 index_z) idecode_finit (leq_3 leq_z) 
leq_1s.
- :
   inst_size* idecode_fninit (index_2 index_z) idecode_fninit (leq_2 leq_z)
      leq_1s.
- :
   inst_size* (idecode_fist16 D) (index_s D1) (idecode_fist16 D2) (leq_s D3)
      leq_1s
      <- inst_size_m16fp D D1 D2 D3.
- :
   inst_size* (idecode_fist32 D) (index_s D1) (idecode_fist32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fistp16 D) (index_s D1) (idecode_fistp16 D2) (leq_s D3)
      leq_1s
      <- inst_size_m16fp D D1 D2 D3.
- :
   inst_size* (idecode_fistp32 D) (index_s D1) (idecode_fistp32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fistp64 D) (index_s D1) (idecode_fistp64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fisttp16 D) (index_s D1) (idecode_fisttp16 D2) (leq_s D3)
      leq_1s
      <- inst_size_m16fp D D1 D2 D3.
- :
   inst_size* (idecode_fisttp32 D) (index_s D1) (idecode_fisttp32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fisttp64 D) (index_s D1) (idecode_fisttp64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fld32 D) (index_s D1) (idecode_fld32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fld64 D) (index_s D1) (idecode_fld64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fld80 D) (index_s D1) (idecode_fld80 D2) (leq_s D3)
      leq_1s
      <- inst_size_m80fp D D1 D2 D3.
- :
   inst_size* (idecode_fld_t D) (index_s D1) (idecode_fld_t D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- : inst_size* idecode_fld1 (index_2 index_z) idecode_fld1 (leq_2 leq_z) leq_1s.
- :
   inst_size* idecode_fldl2t (index_2 index_z) idecode_fldl2t (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_fldl2e (index_2 index_z) idecode_fldl2e (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_fldpi (index_2 index_z) idecode_fldpi (leq_2 leq_z) 
leq_1s.
- :
   inst_size* idecode_fldlg2 (index_2 index_z) idecode_fldlg2 (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_fldln2 (index_2 index_z) idecode_fldln2 (leq_2 leq_z)
      leq_1s.
- : inst_size* idecode_fldz (index_2 index_z) idecode_fldz (leq_2 leq_z) leq_1s.
- :
   inst_size* (idecode_fmul32 D) (index_s D1) (idecode_fmul32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fmul64 D) (index_s D1) (idecode_fmul64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fmul_rt D) (index_s D1) (idecode_fmul_rt D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fmul_tr D) (index_s D1) (idecode_fmul_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fmulp_tr D) (index_s D1) (idecode_fmulp_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fimul32 D) (index_s D1) (idecode_fimul32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fimul64 D) (index_s D1) (idecode_fimul64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- : inst_size* idecode_fnop (index_2 index_z) idecode_fnop (leq_2 leq_z) leq_1s.
- :
   inst_size* idecode_fpatan (index_2 index_z) idecode_fpatan (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_fprem (index_2 index_z) idecode_fprem (leq_2 leq_z) 
leq_1s.
- :
   inst_size* idecode_fprem1 (index_2 index_z) idecode_fprem1 (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_fptan (index_2 index_z) idecode_fptan (leq_2 leq_z) 
leq_1s.
- :
   inst_size* idecode_frndint (index_2 index_z) idecode_frndint (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_fscale (index_2 index_z) idecode_fscale (leq_2 leq_z)
      leq_1s.
- : inst_size* idecode_fsin (index_2 index_z) idecode_fsin (leq_2 leq_z) leq_1s.
- :
   inst_size* idecode_fsincos (index_2 index_z) idecode_fsincos (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_fsqrt (index_2 index_z) idecode_fsqrt (leq_2 leq_z) 
leq_1s.
- :
   inst_size* (idecode_fst32 D) (index_s D1) (idecode_fst32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fst64 D) (index_s D1) (idecode_fst64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fst_t D) (index_s D1) (idecode_fst_t D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fstp32 D) (index_s D1) (idecode_fstp32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fstp64 D) (index_s D1) (idecode_fstp64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fstp80 D) (index_s D1) (idecode_fstp80 D2) (leq_s D3)
      leq_1s
      <- inst_size_m80fp D D1 D2 D3.
- :
   inst_size* (idecode_fstp_t D) (index_s D1) (idecode_fstp_t D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fsub32 D) (index_s D1) (idecode_fsub32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fsub64 D) (index_s D1) (idecode_fsub64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fsub_rt D) (index_s D1) (idecode_fsub_rt D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fsub_tr D) (index_s D1) (idecode_fsub_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fsubp_tr D) (index_s D1) (idecode_fsubp_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fisub32 D) (index_s D1) (idecode_fisub32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fisub64 D) (index_s D1) (idecode_fisub64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fsubr32 D) (index_s D1) (idecode_fsubr32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fsubr64 D) (index_s D1) (idecode_fsubr64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- :
   inst_size* (idecode_fsubr_rt D) (index_s D1) (idecode_fsubr_rt D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fsubr_tr D) (index_s D1) (idecode_fsubr_tr D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fsubrp_tr D) (index_s D1) (idecode_fsubrp_tr D2)
      (leq_s D3) leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fisubr32 D) (index_s D1) (idecode_fisubr32 D2) (leq_s D3)
      leq_1s
      <- inst_size_m32fp D D1 D2 D3.
- :
   inst_size* (idecode_fisubr64 D) (index_s D1) (idecode_fisubr64 D2) (leq_s D3)
      leq_1s
      <- inst_size_m64fp D D1 D2 D3.
- : inst_size* idecode_ftst (index_2 index_z) idecode_ftst (leq_2 leq_z) leq_1s.
- :
   inst_size* (idecode_fucom D) (index_s D1) (idecode_fucom D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* (idecode_fucomp D) (index_s D1) (idecode_fucomp D2) (leq_s D3)
      leq_1s
      <- inst_size_r' D D1 D2 D3 D4.
- :
   inst_size* idecode_fucompp (index_2 index_z) idecode_fucompp (leq_2 leq_z)
      leq_1s.
- : inst_size* idecode_fxam (index_2 index_z) idecode_fxam (leq_2 leq_z) leq_1s.
- :
   inst_size* (idecode_fxch D) (index_2 index_z) (idecode_fxch D) (leq_s leq_1s)
      leq_1s.
- :
   inst_size* idecode_fxtract (index_2 index_z) idecode_fxtract (leq_2 leq_z)
      leq_1s.
- :
   inst_size* idecode_fyl2x (index_2 index_z) idecode_fyl2x (leq_2 leq_z) 
leq_1s.
- :
   inst_size* idecode_fyl2xp1 (index_2 index_z) idecode_fyl2xp1 (leq_2 leq_z)
      leq_1s.
- :
   inst_size* (idecode_jcc D1 D2 D3 D4) (index_6 index_z)
      (idecode_jcc D1 D2 D3 D4) (leq_6 leq_z) leq_1s.
- :
   inst_size* (idecode_jcc_sh D1 D2 D3 D4) (index_2 index_z)
      (idecode_jcc_sh D1 D2 D3 D4) (leq_2 leq_z) leq_1s.
- :
   inst_size* (idecode_jecxz D) (index_s D1) (idecode_jecxz D2) (leq_s D3)
      leq_1s
      <- inst_size_sh D D1 D2 D3.
- :
   inst_size* (idecode_jmp_nr D) (index_s D1) (idecode_jmp_nr D2) (leq_s D3)
      leq_1s
      <- inst_size_nr D D1 D2 D3.
- :
   inst_size* (idecode_jmp_nai D) (index_s D1) (idecode_jmp_nai D2) (leq_s D3)
      leq_1s
      <- inst_size_nai D D1 D2 D3.
- :
   inst_size* (idecode_jmp_sh D) (index_s D1) (idecode_jmp_sh D2) (leq_s D3)
      leq_1s
      <- inst_size_sh D D1 D2 D3.
- :
   inst_size* (idecode_mov_mi D) (index_s D1) (idecode_mov_mi D2) (leq_s D3)
      leq_1s
      <- inst_size_mi D D1 D2 D3.
- :
   inst_size* (idecode_mov_mi8 D) (index_s D1) (idecode_mov_mi8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8 D D1 D2 D3.
- :
   inst_size* (idecode_mov_mr D) (index_s D1) (idecode_mov_mr D2) (leq_s D3)
      leq_1s
      <- inst_size_mr D D1 D2 D3.
- :
   inst_size* (idecode_mov_mr8 D) (index_s D1) (idecode_mov_mr8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mr8 D D1 D2 D3.
- :
   inst_size* (idecode_mov_ri D1 D2) (index_5 index_z) (idecode_mov_ri D1 D2)
      (leq_5 leq_z) leq_1s.
- :
   inst_size* (idecode_mov_ri8 D1 D2) (index_2 index_z) (idecode_mov_ri8 D1 D2)
      (leq_2 leq_z) leq_1s.
- :
   inst_size* (idecode_mov_rm D) (index_s D1) (idecode_mov_rm D2) (leq_s D3)
      leq_1s
      <- inst_size_rm D D1 D2 D3.
- :
   inst_size* (idecode_mov_rm8 D) (index_s D1) (idecode_mov_rm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_rm8 D D1 D2 D3.
- :
   inst_size* (idecode_movsx D) (index_2 D1) (idecode_movsx D2) (leq_2 D3)
      leq_1s
      <- inst_size_rm_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_movzx D) (index_2 D1) (idecode_movzx D2) (leq_2 D3)
      leq_1s
      <- inst_size_rm_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_or_eax D) (index_s D1) (idecode_or_eax D2) (leq_s D3)
      leq_1s
      <- inst_size_eax D D1 D2 D3.
- :
   inst_size* (idecode_or_al D) (index_s D1) (idecode_or_al D2) (leq_s D3)
      leq_1s
      <- inst_size_al D D1 D2 D3.
- :
   inst_size* (idecode_or_mi D) (index_s D1) (idecode_or_mi D2) (leq_s D3)
      leq_1s
      <- inst_size_mi D D1 D2 D3.
- :
   inst_size* (idecode_or_mi8 D) (index_s D1) (idecode_or_mi8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8 D D1 D2 D3.
- :
   inst_size* (idecode_or_mib D) (index_s D1) (idecode_or_mib D2) (leq_s D3)
      leq_1s
      <- inst_size_mib D D1 D2 D3.
- :
   inst_size* (idecode_or_mr D) (index_s D1) (idecode_or_mr D2) (leq_s D3)
      leq_1s
      <- inst_size_mr D D1 D2 D3.
- :
   inst_size* (idecode_or_mr8 D) (index_s D1) (idecode_or_mr8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mr8 D D1 D2 D3.
- :
   inst_size* (idecode_or_rm D) (index_s D1) (idecode_or_rm D2) (leq_s D3)
      leq_1s
      <- inst_size_rm D D1 D2 D3.
- :
   inst_size* (idecode_or_rm8 D) (index_s D1) (idecode_or_rm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_rm8 D D1 D2 D3.
- : inst_size* idecode_nop (index_s index_z) idecode_nop leq_1s leq_1s.
- :
   inst_size* (idecode_pop_m D) (index_s D1) (idecode_pop_m D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_pop_r D) D1 (idecode_pop_r D2) D3 D4
      <- inst_size_r D D1 D2 D3 D4.
- :
   inst_size* idecode_push_i (index_5 index_z) idecode_push_i (leq_5 leq_z)
      leq_1s.
- :
   inst_size* idecode_push_ib (index_2 index_z) idecode_push_ib (leq_2 leq_z)
      leq_1s.
- :
   inst_size* (idecode_push_m D) (index_s D1) (idecode_push_m D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_push_r D) D1 (idecode_push_r D2) D3 D4
      <- inst_size_r D D1 D2 D3 D4.
- :
   inst_size* (idecode_rcl_one D) (index_s D1) (idecode_rcl_one D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_rcl_cl D) (index_s D1) (idecode_rcl_cl D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_rcl_imm D) (index_s D1) (idecode_rcl_imm D2) (leq_s D3)
      leq_1s
      <- inst_size_mi_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_rcr_one D) (index_s D1) (idecode_rcr_one D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_rcr_cl D) (index_s D1) (idecode_rcr_cl D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_rcr_imm D) (index_s D1) (idecode_rcr_imm D2) (leq_s D3)
      leq_1s
      <- inst_size_mi_oper8 D D1 D2 D3.
- : inst_size* idecode_ret (index_s index_z) idecode_ret leq_1s leq_1s.
- :
   inst_size* (idecode_rol_one D) (index_s D1) (idecode_rol_one D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_rol_cl D) (index_s D1) (idecode_rol_cl D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_rol_imm D) (index_s D1) (idecode_rol_imm D2) (leq_s D3)
      leq_1s
      <- inst_size_mi_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_ror_one D) (index_s D1) (idecode_ror_one D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_ror_cl D) (index_s D1) (idecode_ror_cl D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_ror_imm D) (index_s D1) (idecode_ror_imm D2) (leq_s D3)
      leq_1s
      <- inst_size_mi_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_sar_one8 D) (index_s D1) (idecode_sar_one8 D2) (leq_s D3)
      leq_1s
      <- inst_size_m8 D D1 D2 D3.
- :
   inst_size* (idecode_sar_cl8 D) (index_s D1) (idecode_sar_cl8 D2) (leq_s D3)
      leq_1s
      <- inst_size_m8 D D1 D2 D3.
- :
   inst_size* (idecode_sar_imm8 D) (index_s D1) (idecode_sar_imm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_sar_one D) (index_s D1) (idecode_sar_one D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_sar_cl D) (index_s D1) (idecode_sar_cl D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_sar_imm D) (index_s D1) (idecode_sar_imm D2) (leq_s D3)
      leq_1s
      <- inst_size_mi_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_shl_one8 D) (index_s D1) (idecode_shl_one8 D2) (leq_s D3)
      leq_1s
      <- inst_size_m8 D D1 D2 D3.
- :
   inst_size* (idecode_shl_cl8 D) (index_s D1) (idecode_shl_cl8 D2) (leq_s D3)
      leq_1s
      <- inst_size_m8 D D1 D2 D3.
- :
   inst_size* (idecode_shl_imm8 D) (index_s D1) (idecode_shl_imm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_shl_one D) (index_s D1) (idecode_shl_one D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_shl_cl D) (index_s D1) (idecode_shl_cl D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_shl_imm D) (index_s D1) (idecode_shl_imm D2) (leq_s D3)
      leq_1s
      <- inst_size_mi_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_shr_one8 D) (index_s D1) (idecode_shr_one8 D2) (leq_s D3)
      leq_1s
      <- inst_size_m8 D D1 D2 D3.
- :
   inst_size* (idecode_shr_cl8 D) (index_s D1) (idecode_shr_cl8 D2) (leq_s D3)
      leq_1s
      <- inst_size_m8 D D1 D2 D3.
- :
   inst_size* (idecode_shr_imm8 D) (index_s D1) (idecode_shr_imm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_shr_one D) (index_s D1) (idecode_shr_one D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_shr_cl D) (index_s D1) (idecode_shr_cl D2) (leq_s D3)
      leq_1s
      <- inst_size_m D D1 D2 D3.
- :
   inst_size* (idecode_shr_imm D) (index_s D1) (idecode_shr_imm D2) (leq_s D3)
      leq_1s
      <- inst_size_mi_oper8 D D1 D2 D3.
- :
   inst_size* (idecode_sub_eax D) (index_s D1) (idecode_sub_eax D2) (leq_s D3)
      leq_1s
      <- inst_size_eax D D1 D2 D3.
- :
   inst_size* (idecode_sub_al D) (index_s D1) (idecode_sub_al D2) (leq_s D3)
      leq_1s
      <- inst_size_al D D1 D2 D3.
- :
   inst_size* (idecode_sub_mi D) (index_s D1) (idecode_sub_mi D2) (leq_s D3)
      leq_1s
      <- inst_size_mi D D1 D2 D3.
- :
   inst_size* (idecode_sub_mi8 D) (index_s D1) (idecode_sub_mi8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8 D D1 D2 D3.
- :
   inst_size* (idecode_sub_mib D) (index_s D1) (idecode_sub_mib D2) (leq_s D3)
      leq_1s
      <- inst_size_mib D D1 D2 D3.
- :
   inst_size* (idecode_sub_mr D) (index_s D1) (idecode_sub_mr D2) (leq_s D3)
      leq_1s
      <- inst_size_mr D D1 D2 D3.
- :
   inst_size* (idecode_sub_mr8 D) (index_s D1) (idecode_sub_mr8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mr8 D D1 D2 D3.
- :
   inst_size* (idecode_sub_rm D) (index_s D1) (idecode_sub_rm D2) (leq_s D3)
      leq_1s
      <- inst_size_rm D D1 D2 D3.
- :
   inst_size* (idecode_sub_rm8 D) (index_s D1) (idecode_sub_rm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_rm8 D D1 D2 D3.
- :
   inst_size* (idecode_xor_eax D) (index_s D1) (idecode_xor_eax D2) (leq_s D3)
      leq_1s
      <- inst_size_eax D D1 D2 D3.
- :
   inst_size* (idecode_xor_al D) (index_s D1) (idecode_xor_al D2) (leq_s D3)
      leq_1s
      <- inst_size_al D D1 D2 D3.
- :
   inst_size* (idecode_xor_mi D) (index_s D1) (idecode_xor_mi D2) (leq_s D3)
      leq_1s
      <- inst_size_mi D D1 D2 D3.
- :
   inst_size* (idecode_xor_mi8 D) (index_s D1) (idecode_xor_mi8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mi8 D D1 D2 D3.
- :
   inst_size* (idecode_xor_mib D) (index_s D1) (idecode_xor_mib D2) (leq_s D3)
      leq_1s
      <- inst_size_mib D D1 D2 D3.
- :
   inst_size* (idecode_xor_mr D) (index_s D1) (idecode_xor_mr D2) (leq_s D3)
      leq_1s
      <- inst_size_mr D D1 D2 D3.
- :
   inst_size* (idecode_xor_mr8 D) (index_s D1) (idecode_xor_mr8 D2) (leq_s D3)
      leq_1s
      <- inst_size_mr8 D D1 D2 D3.
- :
   inst_size* (idecode_xor_rm D) (index_s D1) (idecode_xor_rm D2) (leq_s D3)
      leq_1s
      <- inst_size_rm D D1 D2 D3.
- :
   inst_size* (idecode_xor_rm8 D) (index_s D1) (idecode_xor_rm8 D2) (leq_s D3)
      leq_1s
      <- inst_size_rm8 D D1 D2 D3.
inst_size :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi I1:iinst. Pi N:nat. Pi S':string N2.
      Pi S1:string N.
      idecode S I1 N S' -> leq N max_inst_size -> sum N N2 N1 -> index N S S1 S'
         -> type.
- :
   inst_size (idecode_ Dsum Ddecode) Dleq' Dsum Dindex'
      <- inst_size* Ddecode Dindex X1 Dleq X2
      <- index_implies_sum Dindex Dsum'
      <- sum_fun1 Dsum' Dsum Deq
      <- leq_resp Deq nat_eq_ Dleq Dleq'
      <- string_resp Deq S2 S3 Deqstr
      <- index_resp Deq string_eq_ Deqstr string_eq_ Dindex Dindex'.
idecode_eax_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi I':iinst.
      index N3 S S'' S'
         -> idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I' S'
         -> type.
- : idecode_eax_append (index_4 index_z) idecode_eax_ idecode_eax_.
idecode_al_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi I':iinst.
      index N3 S S'' S'
         -> idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S''
               I' #
         -> idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I' S'
         -> type.
- : idecode_al_append (index_s index_z) idecode_al_ idecode_al_.
idecode_mi_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi I':iinst.
      index N3 S S'' S'
         -> idecode_mi B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> idecode_mi B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I' S'
         -> type.
- :
   idecode_mi_append (index_s Dindex12_3) (idecode_mi_ D1 D2)
      (idecode_mi_ D1''' D2)
      <- disp_size D1 Dindex12 D1' X2
      <- index_assoc' Dindex1_23 Dindex23 Dindex12_3 Dindex12 Dsum
      <- disp_append Dindex1_23 D1' D1''
      <- index_fun' Dindex23 (index_4 index_z) string_eq_ string_eq_ X1 Deq
      <- decode_modrm_resp binary_eq_ binary_eq_ string_eq_ nat_eq_ 
eaddress_eq_
            Deq D1'' D1'''.
idecode_mi8_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi I':iinst.
      index N3 S S'' S'
         -> idecode_mi8 B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> idecode_mi8 B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S I' S'
         -> type.
- :
   idecode_mi8_append (index_s Dindex12_3) (idecode_mi8_ D1 D2)
      (idecode_mi8_ D1''' D2)
      <- disp_size D1 Dindex12 D1' X2
      <- index_assoc' Dindex1_23 Dindex23 Dindex12_3 Dindex12 Dsum
      <- disp_append Dindex1_23 D1' D1''
      <- index_fun' Dindex23 (index_s index_z) string_eq_ string_eq_ X1 Deq
      <- decode_modrm_resp binary_eq_ binary_eq_ string_eq_ nat_eq_ 
eaddress_eq_
            Deq D1'' D1'''.
idecode_mi_oper8_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper 1' -> iinst. Pi I':iinst.
      index N3 S S'' S'
         -> idecode_mi_oper8 B
               (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S'' I' #
         -> idecode_mi_oper8 B
               (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S I' S'
         -> type.
- :
   idecode_mi_oper8_append (index_s Dindex12_3) (idecode_mi_oper8_ D1 D2)
      (idecode_mi_oper8_ D1''' D2)
      <- disp_size D1 Dindex12 D1' X2
      <- index_assoc' Dindex1_23 Dindex23 Dindex12_3 Dindex12 Dsum
      <- disp_append Dindex1_23 D1' D1''
      <- index_fun' Dindex23 (index_s index_z) string_eq_ string_eq_ X1 Deq
      <- decode_modrm_resp binary_eq_ binary_eq_ string_eq_ nat_eq_ 
eaddress_eq_
            Deq D1'' D1'''.
idecode_mi8_oper8_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper 1' -> iinst. Pi I':iinst.
      index N3 S S'' S'
         -> idecode_mi8_oper8 B
               (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S'' I' #
         -> idecode_mi8_oper8 B
               (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S I' S'
         -> type.
- :
   idecode_mi8_oper8_append (index_s Dindex12_3) (idecode_mi8_oper8_ D1 D2)
      (idecode_mi8_oper8_ D1''' D2)
      <- disp_size D1 Dindex12 D1' X2
      <- index_assoc' Dindex1_23 Dindex23 Dindex12_3 Dindex12 Dsum
      <- disp_append Dindex1_23 D1' D1''
      <- index_fun' Dindex23 (index_s index_z) string_eq_ string_eq_ X1 Deq
      <- decode_modrm_resp binary_eq_ binary_eq_ string_eq_ nat_eq_ 
eaddress_eq_
            Deq D1'' D1'''.
idecode_mib_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi I':iinst.
      index N3 S S'' S'
         -> idecode_mib B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> idecode_mib B (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S I' S'
         -> type.
- :
   idecode_mib_append (index_s Dindex12_3) (idecode_mib_ D0 D1 D2)
      (idecode_mib_ D0 D1''' D2)
      <- disp_size D1 Dindex12 D1' X2
      <- index_assoc' Dindex1_23 Dindex23 Dindex12_3 Dindex12 Dsum
      <- disp_append Dindex1_23 D1' D1''
      <- index_fun' Dindex23 (index_s index_z) string_eq_ string_eq_ X1 Deq
      <- decode_modrm_resp binary_eq_ binary_eq_ string_eq_ nat_eq_ 
eaddress_eq_
            Deq D1'' D1'''.
idecode_mr_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi I':iinst.
      index N3 S S'' S'
         -> idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S''
               I' #
         -> idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I' S'
         -> type.
- :
   idecode_mr_append (index_s Dindex) (idecode_mr_ D1 D2 D3)
      (idecode_mr_ D1 D2' D3)
      <- disp_append Dindex D2 D2'.
idecode_mr8_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi I':iinst.
      index N3 S S'' S'
         -> idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I' S'
         -> type.
- :
   idecode_mr8_append (index_s Dindex) (idecode_mr8_ D1 D2 D3)
      (idecode_mr8_ D1 D2' D3)
      <- disp_append Dindex D2 D2'.
idecode_rm_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi I':iinst.
      index N3 S S'' S'
         -> idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S''
               I' #
         -> idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I' S'
         -> type.
- :
   idecode_rm_append (index_s Dindex) (idecode_rm_ D1 D2 D3)
      (idecode_rm_ D1 D2' D3)
      <- disp_append Dindex D2 D2'.
idecode_rm_oper8_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:Pi n:nat. Pi n1:nat. eaddress n -> oper n1 -> iinst.
      Pi I':iinst.
      index N3 S S'' S'
         -> idecode_rm_oper8
               (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz.
                   I Ndsz Nosz ea o) S'' I' 
#
         -> idecode_rm_oper8
               (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz.
                   I Ndsz Nosz ea o) S I' S'
         -> type.
- :
   idecode_rm_oper8_append (index_s Dindex) (idecode_rm_oper8_ D1 D2 D3)
      (idecode_rm_oper8_ D1 D2' D3)
      <- disp_append Dindex D2 D2'.
idecode_rm8_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi I':iinst.
      index N3 S S'' S'
         -> idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S'' I' #
         -> idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I' S'
         -> type.
- :
   idecode_rm8_append (index_s Dindex) (idecode_rm8_ D1 D2 D3)
      (idecode_rm8_ D1 D2' D3)
      <- disp_append Dindex D2 D2'.
idecode_nr_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:oper ww -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_nr (\o:oper ww. I o) S'' I' #
         -> idecode_nr (\o:oper ww. I o) S I' S' -> type.
- : idecode_nr_append (index_4 index_z) (idecode_nr_ D1 D2) (idecode_nr_ D1 D2).
idecode_nai_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'. Pi I:oper ww -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_nai B (\o:oper ww. I o) S'' I' #
         -> idecode_nai B (\o:oper ww. I o) S I' S' -> type.
- :
   idecode_nai_append (index_s Dindex) (idecode_nai_ D1 D2)
      (idecode_nai_ D1' D2)
      <- disp_append Dindex D1 D1'.
idecode_sh_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:oper ww -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_sh (\o:oper ww. I o) S'' I' #
         -> idecode_sh (\o:oper ww. I o) S I' S' -> type.
- : idecode_sh_append (index_s index_z) (idecode_sh_ D1 D2) (idecode_sh_ D1 D2).
idecode_m_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'. Pi I:eaddress ww -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_m B (\ea:eaddress ww. I ea) S'' I' #
         -> idecode_m B (\ea:eaddress ww. I ea) S I' S' -> type.
- :
   idecode_m_append (index_s Dindex) (idecode_m_ D1 D2) (idecode_m_ D1' D2)
      <- disp_append Dindex D1 D1'.
idecode_m16fp_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'. Pi I:eaddress 2' -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_m16fp B (\ea:eaddress 2'. I ea) S'' I' #
         -> idecode_m16fp B (\ea:eaddress 2'. I ea) S I' S' -> type.
- :
   idecode_m16fp_append (index_s Dindex) (idecode_m16fp_ D1 D2)
      (idecode_m16fp_ D1' D2)
      <- disp_esc_append Dindex D1 D1'.
idecode_m32fp_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'. Pi I:eaddress ww -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_m32fp B (\ea:eaddress ww. I ea) S'' I' #
         -> idecode_m32fp B (\ea:eaddress ww. I ea) S I' S' -> type.
- :
   idecode_m32fp_append (index_s Dindex) (idecode_m32fp_ D1 D2)
      (idecode_m32fp_ D1' D2)
      <- disp_esc_append Dindex D1 D1'.
idecode_m64fp_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'. Pi I:eaddress dw -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_m64fp B (\ea:eaddress dw. I ea) S'' I' #
         -> idecode_m64fp B (\ea:eaddress dw. I ea) S I' S' -> type.
- :
   idecode_m64fp_append (index_s Dindex) (idecode_m64fp_ D1 D2)
      (idecode_m64fp_ D1' D2)
      <- disp_esc_append Dindex D1 D1'.
idecode_m80fp_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'. Pi I:eaddress 10' -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_m80fp B (\ea:eaddress 10'. I ea) S'' I' #
         -> idecode_m80fp B (\ea:eaddress 10'. I ea) S I' S' -> type.
- :
   idecode_m80fp_append (index_s Dindex) (idecode_m80fp_ D1 D2)
      (idecode_m80fp_ D1' D2)
      <- disp_esc_append Dindex D1 D1'.
idecode_m8_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 3'. Pi I:eaddress 1' -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_m8 B (\ea:eaddress 1'. I ea) S'' I' #
         -> idecode_m8 B (\ea:eaddress 1'. I ea) S I' S' -> type.
- :
   idecode_m8_append (index_s Dindex) (idecode_m8_ D1 D2) (idecode_m8_ D1' D2)
      <- disp_append Dindex D1 D1'.
idecode_r_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi B:binary 5'. Pi I:eaddress ww -> iinst. Pi I':iinst.
      index N3 S S'' S' -> idecode_r B (\ea:eaddress ww. I ea) S'' I' #
         -> idecode_r B (\ea:eaddress ww. I ea) S I' S' -> type.
- : idecode_r_append (index_s index_z) (idecode_r_ D1 D2) (idecode_r_ D1 D2).
idecode*_append :
   Pi N1:nat. Pi N2:nat. Pi N3:nat. Pi S:string N1. Pi S'':string N3.
      Pi S':string N2. Pi I:iinst.
      index N3 S S'' S' -> idecode* S'' I # -> idecode* S I S' -> type.
- :
   idecode*_append (index_s D1) (idecode_add_eax D2) (idecode_add_eax D3)
      <- idecode_eax_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_add_al D2) (idecode_add_al D3)
      <- idecode_al_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_add_mi D2) (idecode_add_mi D3)
      <- idecode_mi_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_add_mi8 D2) (idecode_add_mi8 D3)
      <- idecode_mi8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_add_mib D2) (idecode_add_mib D3)
      <- idecode_mib_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_add_mr D2) (idecode_add_mr D3)
      <- idecode_mr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_add_mr8 D2) (idecode_add_mr8 D3)
      <- idecode_mr8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_add_rm D2) (idecode_add_rm D3)
      <- idecode_rm_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_add_rm8 D2) (idecode_add_rm8 D3)
      <- idecode_rm8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_eax D2) (idecode_and_eax D3)
      <- idecode_eax_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_al D2) (idecode_and_al D3)
      <- idecode_al_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_mi D2) (idecode_and_mi D3)
      <- idecode_mi_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_mi8 D2) (idecode_and_mi8 D3)
      <- idecode_mi8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_mib D2) (idecode_and_mib D3)
      <- idecode_mib_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_mr D2) (idecode_and_mr D3)
      <- idecode_mr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_mr8 D2) (idecode_and_mr8 D3)
      <- idecode_mr8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_rm D2) (idecode_and_rm D3)
      <- idecode_rm_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_and_rm8 D2) (idecode_and_rm8 D3)
      <- idecode_rm8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_call_nr D2) (idecode_call_nr D3)
      <- idecode_nr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_call_nai D2) (idecode_call_nai D3)
      <- idecode_nai_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_eax D2) (idecode_cmp_eax D3)
      <- idecode_eax_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_al D2) (idecode_cmp_al D3)
      <- idecode_al_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_mi D2) (idecode_cmp_mi D3)
      <- idecode_mi_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_mi8 D2) (idecode_cmp_mi8 D3)
      <- idecode_mi8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_mib D2) (idecode_cmp_mib D3)
      <- idecode_mib_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_mr D2) (idecode_cmp_mr D3)
      <- idecode_mr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_mr8 D2) (idecode_cmp_mr8 D3)
      <- idecode_mr8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_rm D2) (idecode_cmp_rm D3)
      <- idecode_rm_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_cmp_rm8 D2) (idecode_cmp_rm8 D3)
      <- idecode_rm8_append D1 D2 D3.
- : idecode*_append (index_2 index_z) idecode_f2xm1 idecode_f2xm1.
- : idecode*_append (index_2 index_z) idecode_fabs idecode_fabs.
- :
   idecode*_append (index_s D1) (idecode_fadd32 D2) (idecode_fadd32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fadd64 D2) (idecode_fadd64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fadd_rt D2) (idecode_fadd_rt D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fadd_tr D2) (idecode_fadd_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_faddp_tr D2) (idecode_faddp_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fiadd32 D2) (idecode_fiadd32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fiadd64 D2) (idecode_fiadd64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- : idecode*_append (index_2 index_z) idecode_fchs idecode_fchs.
- : idecode*_append (index_3 index_z) idecode_fclex idecode_fclex.
- : idecode*_append (index_2 index_z) idecode_fnclex idecode_fnclex.
- :
   idecode*_append (index_2 index_z) (idecode_fcmov1 parse_35_)
      (idecode_fcmov1 parse_35_).
- :
   idecode*_append (index_2 index_z) (idecode_fcmov2 parse_35_)
      (idecode_fcmov2 parse_35_).
- :
   idecode*_append (index_s D1) (idecode_fcom_tr D2) (idecode_fcom_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fcomp_tr D2) (idecode_fcomp_tr D3)
      <- idecode_r_append D1 D2 D3.
- : idecode*_append (index_2 index_z) idecode_fcompp idecode_fcompp.
- :
   idecode*_append (index_2 index_z) (idecode_fcomi parse_53_)
      (idecode_fcomi parse_53_).
- :
   idecode*_append (index_2 index_z) (idecode_fcomip parse_53_)
      (idecode_fcomip parse_53_).
- :
   idecode*_append (index_2 index_z) (idecode_fucomi parse_53_)
      (idecode_fucomi parse_53_).
- :
   idecode*_append (index_2 index_z) (idecode_fucomip parse_53_)
      (idecode_fucomip parse_53_).
- : idecode*_append (index_2 index_z) idecode_fcos idecode_fcos.
- : idecode*_append (index_2 index_z) idecode_fdecstp idecode_fdecstp.
- :
   idecode*_append (index_s D1) (idecode_fdiv32 D2) (idecode_fdiv32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdiv64 D2) (idecode_fdiv64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdiv_rt D2) (idecode_fdiv_rt D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdiv_tr D2) (idecode_fdiv_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdivp_tr D2) (idecode_fdivp_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fidiv32 D2) (idecode_fidiv32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fidiv64 D2) (idecode_fidiv64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdivr32 D2) (idecode_fdivr32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdivr64 D2) (idecode_fdivr64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdivr_rt D2) (idecode_fdivr_rt D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdivr_tr D2) (idecode_fdivr_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fdivrp_tr D2) (idecode_fdivrp_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fidivr32 D2) (idecode_fidivr32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fidivr64 D2) (idecode_fidivr64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_2 index_z) (idecode_ffree parse_53_)
      (idecode_ffree parse_53_).
- :
   idecode*_append (index_s D1) (idecode_ficom16 D2) (idecode_ficom16 D3)
      <- idecode_m16fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_ficom32 D2) (idecode_ficom32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_ficomp16 D2) (idecode_ficomp16 D3)
      <- idecode_m16fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_ficomp32 D2) (idecode_ficomp32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fild16 D2) (idecode_fild16 D3)
      <- idecode_m16fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fild32 D2) (idecode_fild32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fild64 D2) (idecode_fild64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- : idecode*_append (index_2 index_z) idecode_fincstp idecode_fincstp.
- : idecode*_append (index_3 index_z) idecode_finit idecode_finit.
- : idecode*_append (index_2 index_z) idecode_fninit idecode_fninit.
- :
   idecode*_append (index_s D1) (idecode_fist16 D2) (idecode_fist16 D3)
      <- idecode_m16fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fist32 D2) (idecode_fist32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fistp16 D2) (idecode_fistp16 D3)
      <- idecode_m16fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fistp32 D2) (idecode_fistp32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fistp64 D2) (idecode_fistp64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fisttp16 D2) (idecode_fisttp16 D3)
      <- idecode_m16fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fisttp32 D2) (idecode_fisttp32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fisttp64 D2) (idecode_fisttp64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fld32 D2) (idecode_fld32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fld64 D2) (idecode_fld64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fld80 D2) (idecode_fld80 D3)
      <- idecode_m80fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fld_t D2) (idecode_fld_t D3)
      <- idecode_r_append D1 D2 D3.
- : idecode*_append (index_2 index_z) idecode_fld1 idecode_fld1.
- : idecode*_append (index_2 index_z) idecode_fldl2t idecode_fldl2t.
- : idecode*_append (index_2 index_z) idecode_fldl2e idecode_fldl2e.
- : idecode*_append (index_2 index_z) idecode_fldpi idecode_fldpi.
- : idecode*_append (index_2 index_z) idecode_fldlg2 idecode_fldlg2.
- : idecode*_append (index_2 index_z) idecode_fldln2 idecode_fldln2.
- : idecode*_append (index_2 index_z) idecode_fldz idecode_fldz.
- :
   idecode*_append (index_s D1) (idecode_fmul32 D2) (idecode_fmul32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fmul64 D2) (idecode_fmul64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fmul_rt D2) (idecode_fmul_rt D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fmul_tr D2) (idecode_fmul_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fmulp_tr D2) (idecode_fmulp_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fimul32 D2) (idecode_fimul32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fimul64 D2) (idecode_fimul64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- : idecode*_append (index_2 index_z) idecode_fnop idecode_fnop.
- : idecode*_append (index_2 index_z) idecode_fpatan idecode_fpatan.
- : idecode*_append (index_2 index_z) idecode_fprem idecode_fprem.
- : idecode*_append (index_2 index_z) idecode_fprem1 idecode_fprem1.
- : idecode*_append (index_2 index_z) idecode_fptan idecode_fptan.
- : idecode*_append (index_2 index_z) idecode_frndint idecode_frndint.
- : idecode*_append (index_2 index_z) idecode_fscale idecode_fscale.
- : idecode*_append (index_2 index_z) idecode_fsin idecode_fsin.
- : idecode*_append (index_2 index_z) idecode_fsincos idecode_fsincos.
- : idecode*_append (index_2 index_z) idecode_fsqrt idecode_fsqrt.
- :
   idecode*_append (index_s D1) (idecode_fst32 D2) (idecode_fst32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fst64 D2) (idecode_fst64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fst_t D2) (idecode_fst_t D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fstp32 D2) (idecode_fstp32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fstp64 D2) (idecode_fstp64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fstp80 D2) (idecode_fstp80 D3)
      <- idecode_m80fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fstp_t D2) (idecode_fstp_t D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsub32 D2) (idecode_fsub32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsub64 D2) (idecode_fsub64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsub_rt D2) (idecode_fsub_rt D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsub_tr D2) (idecode_fsub_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsubp_tr D2) (idecode_fsubp_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fisub32 D2) (idecode_fisub32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fisub64 D2) (idecode_fisub64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsubr32 D2) (idecode_fsubr32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsubr64 D2) (idecode_fsubr64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsubr_rt D2) (idecode_fsubr_rt D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsubr_tr D2) (idecode_fsubr_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fsubrp_tr D2) (idecode_fsubrp_tr D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fisubr32 D2) (idecode_fisubr32 D3)
      <- idecode_m32fp_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fisubr64 D2) (idecode_fisubr64 D3)
      <- idecode_m64fp_append D1 D2 D3.
- : idecode*_append (index_2 index_z) idecode_ftst idecode_ftst.
- :
   idecode*_append (index_s D1) (idecode_fucom D2) (idecode_fucom D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_fucomp D2) (idecode_fucomp D3)
      <- idecode_r_append D1 D2 D3.
- : idecode*_append (index_2 index_z) idecode_fucompp idecode_fucompp.
- : idecode*_append (index_2 index_z) idecode_fxam idecode_fxam.
- :
   idecode*_append (index_2 index_z) (idecode_fxch parse_53_)
      (idecode_fxch parse_53_).
- : idecode*_append (index_2 index_z) idecode_fxtract idecode_fxtract.
- : idecode*_append (index_2 index_z) idecode_fyl2x idecode_fyl2x.
- : idecode*_append (index_2 index_z) idecode_fyl2xp1 idecode_fyl2xp1.
- :
   idecode*_append (index_6 index_z) (idecode_jcc D1 D2 D3 D4)
      (idecode_jcc D1 D2 D3 D4).
- :
   idecode*_append (index_2 index_z) (idecode_jcc_sh D1 D2 D3 D4)
      (idecode_jcc_sh D1 D2 D3 D4).
- :
   idecode*_append (index_s D1) (idecode_jecxz D2) (idecode_jecxz D3)
      <- idecode_sh_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_jmp_nr D2) (idecode_jmp_nr D3)
      <- idecode_nr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_jmp_nai D2) (idecode_jmp_nai D3)
      <- idecode_nai_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_jmp_sh D2) (idecode_jmp_sh D3)
      <- idecode_sh_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_mov_mi D2) (idecode_mov_mi D3)
      <- idecode_mi_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_mov_mi8 D2) (idecode_mov_mi8 D3)
      <- idecode_mi8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_mov_mr D2) (idecode_mov_mr D3)
      <- idecode_mr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_mov_mr8 D2) (idecode_mov_mr8 D3)
      <- idecode_mr8_append D1 D2 D3.
- :
   idecode*_append (index_5 index_z) (idecode_mov_ri D1 D2)
      (idecode_mov_ri D1 D2).
- :
   idecode*_append (index_2 index_z) (idecode_mov_ri8 D1 D2)
      (idecode_mov_ri8 D1 D2).
- :
   idecode*_append (index_s D1) (idecode_mov_rm D2) (idecode_mov_rm D3)
      <- idecode_rm_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_mov_rm8 D2) (idecode_mov_rm8 D3)
      <- idecode_rm8_append D1 D2 D3.
- :
   idecode*_append (index_2 D1) (idecode_movsx D2) (idecode_movsx D3)
      <- idecode_rm_oper8_append D1 D2 D3.
- :
   idecode*_append (index_2 D1) (idecode_movzx D2) (idecode_movzx D3)
      <- idecode_rm_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_eax D2) (idecode_or_eax D3)
      <- idecode_eax_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_al D2) (idecode_or_al D3)
      <- idecode_al_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_mi D2) (idecode_or_mi D3)
      <- idecode_mi_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_mi8 D2) (idecode_or_mi8 D3)
      <- idecode_mi8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_mib D2) (idecode_or_mib D3)
      <- idecode_mib_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_mr D2) (idecode_or_mr D3)
      <- idecode_mr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_mr8 D2) (idecode_or_mr8 D3)
      <- idecode_mr8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_rm D2) (idecode_or_rm D3)
      <- idecode_rm_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_or_rm8 D2) (idecode_or_rm8 D3)
      <- idecode_rm8_append D1 D2 D3.
- : idecode*_append (index_s index_z) idecode_nop idecode_nop.
- :
   idecode*_append (index_s D1) (idecode_pop_m D2) (idecode_pop_m D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append D1 (idecode_pop_r D2) (idecode_pop_r D3)
      <- idecode_r_append D1 D2 D3.
- : idecode*_append (index_5 index_z) idecode_push_i idecode_push_i.
- : idecode*_append (index_2 index_z) idecode_push_ib idecode_push_ib.
- :
   idecode*_append (index_s D1) (idecode_push_m D2) (idecode_push_m D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append D1 (idecode_push_r D2) (idecode_push_r D3)
      <- idecode_r_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_rcl_one D2) (idecode_rcl_one D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_rcl_cl D2) (idecode_rcl_cl D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_rcl_imm D2) (idecode_rcl_imm D3)
      <- idecode_mi_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_rcr_one D2) (idecode_rcr_one D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_rcr_cl D2) (idecode_rcr_cl D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_rcr_imm D2) (idecode_rcr_imm D3)
      <- idecode_mi_oper8_append D1 D2 D3.
- : idecode*_append (index_s index_z) idecode_ret idecode_ret.
- :
   idecode*_append (index_s D1) (idecode_rol_one D2) (idecode_rol_one D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_rol_cl D2) (idecode_rol_cl D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_rol_imm D2) (idecode_rol_imm D3)
      <- idecode_mi_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_ror_one D2) (idecode_ror_one D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_ror_cl D2) (idecode_ror_cl D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_ror_imm D2) (idecode_ror_imm D3)
      <- idecode_mi_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sar_one8 D2) (idecode_sar_one8 D3)
      <- idecode_m8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sar_cl8 D2) (idecode_sar_cl8 D3)
      <- idecode_m8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sar_imm8 D2) (idecode_sar_imm8 D3)
      <- idecode_mi8_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sar_one D2) (idecode_sar_one D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sar_cl D2) (idecode_sar_cl D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sar_imm D2) (idecode_sar_imm D3)
      <- idecode_mi_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shl_one8 D2) (idecode_shl_one8 D3)
      <- idecode_m8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shl_cl8 D2) (idecode_shl_cl8 D3)
      <- idecode_m8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shl_imm8 D2) (idecode_shl_imm8 D3)
      <- idecode_mi8_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shl_one D2) (idecode_shl_one D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shl_cl D2) (idecode_shl_cl D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shl_imm D2) (idecode_shl_imm D3)
      <- idecode_mi_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shr_one8 D2) (idecode_shr_one8 D3)
      <- idecode_m8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shr_cl8 D2) (idecode_shr_cl8 D3)
      <- idecode_m8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shr_imm8 D2) (idecode_shr_imm8 D3)
      <- idecode_mi8_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shr_one D2) (idecode_shr_one D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shr_cl D2) (idecode_shr_cl D3)
      <- idecode_m_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_shr_imm D2) (idecode_shr_imm D3)
      <- idecode_mi_oper8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_eax D2) (idecode_sub_eax D3)
      <- idecode_eax_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_al D2) (idecode_sub_al D3)
      <- idecode_al_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_mi D2) (idecode_sub_mi D3)
      <- idecode_mi_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_mi8 D2) (idecode_sub_mi8 D3)
      <- idecode_mi8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_mib D2) (idecode_sub_mib D3)
      <- idecode_mib_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_mr D2) (idecode_sub_mr D3)
      <- idecode_mr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_mr8 D2) (idecode_sub_mr8 D3)
      <- idecode_mr8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_rm D2) (idecode_sub_rm D3)
      <- idecode_rm_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_sub_rm8 D2) (idecode_sub_rm8 D3)
      <- idecode_rm8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_eax D2) (idecode_xor_eax D3)
      <- idecode_eax_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_al D2) (idecode_xor_al D3)
      <- idecode_al_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_mi D2) (idecode_xor_mi D3)
      <- idecode_mi_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_mi8 D2) (idecode_xor_mi8 D3)
      <- idecode_mi8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_mib D2) (idecode_xor_mib D3)
      <- idecode_mib_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_mr D2) (idecode_xor_mr D3)
      <- idecode_mr_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_mr8 D2) (idecode_xor_mr8 D3)
      <- idecode_mr8_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_rm D2) (idecode_xor_rm D3)
      <- idecode_rm_append D1 D2 D3.
- :
   idecode*_append (index_s D1) (idecode_xor_rm8 D2) (idecode_xor_rm8 D3)
      <- idecode_rm8_append D1 D2 D3.
parse_modrm_fun :
   Pi B:binary bw. Pi B1:binary 2'. Pi B2:binary 3'. Pi B3:binary 3'.
      Pi B1':binary 2'. Pi B2':binary 3'. Pi B3':binary 3'.
      parse_modrm B B1 B2 B3 -> parse_modrm B B1' B2' B3' -> binary_eq B1 B1'
         -> binary_eq B2 B2' -> binary_eq B3 B3' -> type.
parse_modrm_fun_ :
   parse_modrm_fun parse_modrm_ parse_modrm_ binary_eq_ binary_eq_ binary_eq_.
decode_si_fun :
   Pi Bs:binary 2'. Pi Bi:binary 3'. Pi S:nat. Pi I:nat. Pi S':nat. Pi I':nat.
      decode_si Bs Bi S I -> decode_si Bs Bi S' I' -> nat_eq S S' -> nat_eq I I'
         -> type.
-00 : decode_si_fun decode_si_00 decode_si_00 nat_eq_ nat_eq_.
-01 : decode_si_fun decode_si_01 decode_si_01 nat_eq_ nat_eq_.
-02 : decode_si_fun decode_si_02 decode_si_02 nat_eq_ nat_eq_.
-03 : decode_si_fun decode_si_03 decode_si_03 nat_eq_ nat_eq_.
-04 : decode_si_fun decode_si_04 decode_si_04 nat_eq_ nat_eq_.
-05 : decode_si_fun decode_si_05 decode_si_05 nat_eq_ nat_eq_.
-06 : decode_si_fun decode_si_06 decode_si_06 nat_eq_ nat_eq_.
-07 : decode_si_fun decode_si_07 decode_si_07 nat_eq_ nat_eq_.
-10 : decode_si_fun decode_si_10 decode_si_10 nat_eq_ nat_eq_.
-11 : decode_si_fun decode_si_11 decode_si_11 nat_eq_ nat_eq_.
-12 : decode_si_fun decode_si_12 decode_si_12 nat_eq_ nat_eq_.
-13 : decode_si_fun decode_si_13 decode_si_13 nat_eq_ nat_eq_.
-14 : decode_si_fun decode_si_14 decode_si_14 nat_eq_ nat_eq_.
-15 : decode_si_fun decode_si_15 decode_si_15 nat_eq_ nat_eq_.
-16 : decode_si_fun decode_si_16 decode_si_16 nat_eq_ nat_eq_.
-17 : decode_si_fun decode_si_17 decode_si_17 nat_eq_ nat_eq_.
-20 : decode_si_fun decode_si_20 decode_si_20 nat_eq_ nat_eq_.
-21 : decode_si_fun decode_si_21 decode_si_21 nat_eq_ nat_eq_.
-22 : decode_si_fun decode_si_22 decode_si_22 nat_eq_ nat_eq_.
-23 : decode_si_fun decode_si_23 decode_si_23 nat_eq_ nat_eq_.
-24 : decode_si_fun decode_si_24 decode_si_24 nat_eq_ nat_eq_.
-25 : decode_si_fun decode_si_25 decode_si_25 nat_eq_ nat_eq_.
-26 : decode_si_fun decode_si_26 decode_si_26 nat_eq_ nat_eq_.
-27 : decode_si_fun decode_si_27 decode_si_27 nat_eq_ nat_eq_.
-30 : decode_si_fun decode_si_30 decode_si_30 nat_eq_ nat_eq_.
-31 : decode_si_fun decode_si_31 decode_si_31 nat_eq_ nat_eq_.
-32 : decode_si_fun decode_si_32 decode_si_32 nat_eq_ nat_eq_.
-33 : decode_si_fun decode_si_33 decode_si_33 nat_eq_ nat_eq_.
-34 : decode_si_fun decode_si_34 decode_si_34 nat_eq_ nat_eq_.
-35 : decode_si_fun decode_si_35 decode_si_35 nat_eq_ nat_eq_.
-36 : decode_si_fun decode_si_36 decode_si_36 nat_eq_ nat_eq_.
-37 : decode_si_fun decode_si_37 decode_si_37 nat_eq_ nat_eq_.
decode_reg_fun :
   Pi B:binary 3'. Pi R:nat. Pi R':nat.
      decode_reg B R -> decode_reg B R' -> nat_eq R R' -> type.
decode_reg_fun_0 : decode_reg_fun decode_reg_0 decode_reg_0 nat_eq_.
decode_reg_fun_1 : decode_reg_fun decode_reg_1 decode_reg_1 nat_eq_.
decode_reg_fun_2 : decode_reg_fun decode_reg_2 decode_reg_2 nat_eq_.
decode_reg_fun_3 : decode_reg_fun decode_reg_3 decode_reg_3 nat_eq_.
decode_reg_fun_4 : decode_reg_fun decode_reg_4 decode_reg_4 nat_eq_.
decode_reg_fun_5 : decode_reg_fun decode_reg_5 decode_reg_5 nat_eq_.
decode_reg_fun_6 : decode_reg_fun decode_reg_6 decode_reg_6 nat_eq_.
decode_reg_fun_7 : decode_reg_fun decode_reg_7 decode_reg_7 nat_eq_.
decode_reg8_fun :
   Pi B:binary 3'. Pi E:eaddress 1'. Pi E':eaddress 1'.
      decode_reg8 B E -> decode_reg8 B E' -> eaddress_eq E E' -> type.
decode_reg8_fun_0 : decode_reg8_fun decode_reg8_0 decode_reg8_0 eaddress_eq_.
decode_reg8_fun_1 : decode_reg8_fun decode_reg8_1 decode_reg8_1 eaddress_eq_.
decode_reg8_fun_2 : decode_reg8_fun decode_reg8_2 decode_reg8_2 eaddress_eq_.
decode_reg8_fun_3 : decode_reg8_fun decode_reg8_3 decode_reg8_3 eaddress_eq_.
decode_reg8_fun_4 : decode_reg8_fun decode_reg8_4 decode_reg8_4 eaddress_eq_.
decode_reg8_fun_5 : decode_reg8_fun decode_reg8_5 decode_reg8_5 eaddress_eq_.
decode_reg8_fun_6 : decode_reg8_fun decode_reg8_6 decode_reg8_6 eaddress_eq_.
decode_reg8_fun_7 : decode_reg8_fun decode_reg8_7 decode_reg8_7 eaddress_eq_.
decode_cond_fun :
   Pi B:binary 4'. Pi IC:icond. Pi IC':icond.
      decode_cond B IC -> decode_cond B IC' -> icond_eq IC IC' -> type.
decode_cond_fun_e : decode_cond_fun decode_cond_e decode_cond_e icond_eq_.
decode_cond_fun_ne : decode_cond_fun decode_cond_ne decode_cond_ne icond_eq_.
decode_cond_fun_a : decode_cond_fun decode_cond_a decode_cond_a icond_eq_.
decode_cond_fun_ae : decode_cond_fun decode_cond_ae decode_cond_ae icond_eq_.
decode_cond_fun_b : decode_cond_fun decode_cond_b decode_cond_b icond_eq_.
decode_cond_fun_be : decode_cond_fun decode_cond_be decode_cond_be icond_eq_.
decode_cond_fun_g : decode_cond_fun decode_cond_g decode_cond_g icond_eq_.
decode_cond_fun_ge : decode_cond_fun decode_cond_ge decode_cond_ge icond_eq_.
decode_cond_fun_l : decode_cond_fun decode_cond_l decode_cond_l icond_eq_.
decode_cond_fun_le : decode_cond_fun decode_cond_le decode_cond_le icond_eq_.
decode_cond_fun_s : decode_cond_fun decode_cond_s decode_cond_s icond_eq_.
decode_cond_fun_ns : decode_cond_fun decode_cond_ns decode_cond_ns icond_eq_.
decode_cond_fun_o : decode_cond_fun decode_cond_o decode_cond_o icond_eq_.
decode_cond_fun_no : decode_cond_fun decode_cond_no decode_cond_no icond_eq_.
decode_si_disp_fun :
   Pi N1:nat. Pi N2:nat. Pi Scale:nat. Pi Index:nat. Pi Base:binary 3'.
      Pi S:string N1. Pi M:nat. Pi E1:eaddress M. Pi S1:string N2. Pi N3:nat.
      Pi E2:eaddress M. Pi S2:string N3.
      decode_si_disp Scale Index Base S M E1 S1
         -> decode_si_disp Scale Index Base S M E2 S2 -> eaddress_eq E1 E2
         -> string_eq S1 S2 -> type.
- :
   decode_si_disp_fun decode_si_disp_0 decode_si_disp_0 eaddress_eq_ string_eq_.
- :
   decode_si_disp_fun decode_si_disp_1 decode_si_disp_1 eaddress_eq_ string_eq_.
- :
   decode_si_disp_fun decode_si_disp_2 decode_si_disp_2 eaddress_eq_ string_eq_.
- :
   decode_si_disp_fun decode_si_disp_3 decode_si_disp_3 eaddress_eq_ string_eq_.
- :
   decode_si_disp_fun decode_si_disp_4 decode_si_disp_4 eaddress_eq_ string_eq_.
- :
   decode_si_disp_fun (decode_si_disp_5 Dimp1) (decode_si_disp_5 Dimp2) Deeq
      string_eq_
      <- implode_word_fun Dimp1 Dimp2 Dbeq
      <- eaddr_abs_resp nat_eq_ nat_eq_ Dbeq nat_eq_ Deeq.
- :
   decode_si_disp_fun decode_si_disp_6 decode_si_disp_6 eaddress_eq_ string_eq_.
- :
   decode_si_disp_fun decode_si_disp_7 decode_si_disp_7 eaddress_eq_ string_eq_.
decode_modrm_fun :
   Pi N1:nat. Pi N2:nat. Pi Mod:binary 2'. Pi RM:binary 3'. Pi S:string N1.
      Pi M:nat. Pi E1:eaddress M. Pi S1:string N2. Pi N3:nat. Pi E2:eaddress M.
      Pi S2:string N3.
      decode_modrm Mod RM S M E1 S1 -> decode_modrm Mod RM S M E2 S2
         -> eaddress_eq E1 E2 -> string_eq S1 S2 -> type.
- : decode_modrm_fun decode_modrm_00 decode_modrm_00 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_01 decode_modrm_01 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_02 decode_modrm_02 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_03 decode_modrm_03 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun (decode_modrm_04 Dsi_disp1 Dsi1 Dpar1)
      (decode_modrm_04 Dsi_disp2 Dsi2 Dpar2) Deq_ee Deq_str
      <- parse_modrm_fun Dpar1 Dpar2 Deq_scalef Deq_idxf Deq_basef
      <- decode_si_resp Deq_scalef Deq_idxf nat_eq_ nat_eq_ Dsi1 Dsi1'
      <- decode_si_fun Dsi1' Dsi2 Deq_scale Deq_idx
      <- decode_si_disp_resp Deq_scale Deq_idx Deq_basef string_eq_ nat_eq_
            eaddress_eq_ string_eq_ Dsi_disp1 Dsi_disp1'
      <- decode_si_disp_fun Dsi_disp1' Dsi_disp2 Deq_ee Deq_str.
- :
   decode_modrm_fun (decode_modrm_05 Dimp1) (decode_modrm_05 Dimp2) Deeq
      string_eq_
      <- implode_word_fun Dimp1 Dimp2 Dbeq1
      <- eaddr_abs_resp nat_eq_ nat_eq_ Dbeq1 nat_eq_ Deeq.
- : decode_modrm_fun decode_modrm_06 decode_modrm_06 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_07 decode_modrm_07 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun (decode_modrm_10 Dsext1) (decode_modrm_10 Dsext2) Deq'
      string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_11 Dsext1) (decode_modrm_11 Dsext2) Deq'
      string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_12 Dsext1) (decode_modrm_12 Dsext2) Deq'
      string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_13 Dsext1) (decode_modrm_13 Dsext2) Deq'
      string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_14 Dsext1 Dreg1 Dsi1 Dpar1)
      (decode_modrm_14 Dsext2 Dreg2 Dsi2 Dpar2) Deq_ee string_eq_
      <- parse_modrm_fun Dpar1 Dpar2 Deq_scalef Deq_idxf Deq_basef
      <- decode_si_resp Deq_scalef Deq_idxf nat_eq_ nat_eq_ Dsi1 Dsi1'
      <- decode_si_fun Dsi1' Dsi2 Deq_scale Deq_idx
      <- decode_reg_resp Deq_basef Dreg1 Dreg1'
      <- decode_reg_fun Dreg1' Dreg2 Deq_base
      <- asignextend_fun Dsext1 Dsext2 Deq_disp
      <- eaddr_deref_resp Deq_base Deq_scale Deq_idx Deq_disp nat_eq_ Deq_ee.
- :
   decode_modrm_fun (decode_modrm_15 Dsext1) (decode_modrm_15 Dsext2) Deq'
      string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_16 Dsext1) (decode_modrm_16 Dsext2) Deq'
      string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_17 Dsext1) (decode_modrm_17 Dsext2) Deq'
      string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_20 Dimplode1) (decode_modrm_20 Dimplode2) Deq'
      string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_21 Dimplode1) (decode_modrm_21 Dimplode2) Deq'
      string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_22 Dimplode1) (decode_modrm_22 Dimplode2) Deq'
      string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_23 Dimplode1) (decode_modrm_23 Dimplode2) Deq'
      string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_24 Dimplode1 Dreg1 Dsi1 Dpar1)
      (decode_modrm_24 Dimplode2 Dreg2 Dsi2 Dpar2) Deq_ee string_eq_
      <- parse_modrm_fun Dpar1 Dpar2 Deq_scalef Deq_idxf Deq_basef
      <- decode_si_resp Deq_scalef Deq_idxf nat_eq_ nat_eq_ Dsi1 Dsi1'
      <- decode_si_fun Dsi1' Dsi2 Deq_scale Deq_idx
      <- decode_reg_resp Deq_basef Dreg1 Dreg1'
      <- decode_reg_fun Dreg1' Dreg2 Deq_base
      <- implode_word_fun Dimplode1 Dimplode2 Deq_disp
      <- eaddr_deref_resp Deq_base Deq_scale Deq_idx Deq_disp nat_eq_ Deq_ee.
- :
   decode_modrm_fun (decode_modrm_25 Dimplode1) (decode_modrm_25 Dimplode2) Deq'
      string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_26 Dimplode1) (decode_modrm_26 Dimplode2) Deq'
      string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_fun (decode_modrm_27 Dimplode1) (decode_modrm_27 Dimplode2) Deq'
      string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- : decode_modrm_fun decode_modrm_30 decode_modrm_30 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_31 decode_modrm_31 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_32 decode_modrm_32 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_33 decode_modrm_33 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_34 decode_modrm_34 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_35 decode_modrm_35 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_36 decode_modrm_36 eaddress_eq_ string_eq_.
- : decode_modrm_fun decode_modrm_37 decode_modrm_37 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun decode_modrm_30_8 decode_modrm_30_8 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun decode_modrm_31_8 decode_modrm_31_8 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun decode_modrm_32_8 decode_modrm_32_8 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun decode_modrm_33_8 decode_modrm_33_8 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun decode_modrm_34_8 decode_modrm_34_8 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun decode_modrm_35_8 decode_modrm_35_8 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun decode_modrm_36_8 decode_modrm_36_8 eaddress_eq_ string_eq_.
- :
   decode_modrm_fun decode_modrm_37_8 decode_modrm_37_8 eaddress_eq_ string_eq_.
decode_modrm_esc_fun :
   Pi N1:nat. Pi N2:nat. Pi Mod:binary 2'. Pi RM:binary 3'. Pi S:string N1.
      Pi M:nat. Pi E1:eaddress M. Pi S1:string N2. Pi N3:nat. Pi E2:eaddress M.
      Pi S2:string N3.
      decode_modrm_esc Mod RM S M E1 S1 -> decode_modrm_esc Mod RM S M E2 S2
         -> eaddress_eq E1 E2 -> string_eq S1 S2 -> type.
- :
   decode_modrm_esc_fun decode_modrm_esc_00 decode_modrm_esc_00 eaddress_eq_
      string_eq_.
- :
   decode_modrm_esc_fun decode_modrm_esc_01 decode_modrm_esc_01 eaddress_eq_
      string_eq_.
- :
   decode_modrm_esc_fun decode_modrm_esc_02 decode_modrm_esc_02 eaddress_eq_
      string_eq_.
- :
   decode_modrm_esc_fun decode_modrm_esc_03 decode_modrm_esc_03 eaddress_eq_
      string_eq_.
- :
   decode_modrm_esc_fun (decode_modrm_esc_04 Dsi_disp1 Dsi1 Dpar1)
      (decode_modrm_esc_04 Dsi_disp2 Dsi2 Dpar2) Deq_ee Deq_str
      <- parse_modrm_fun Dpar1 Dpar2 Deq_scalef Deq_idxf Deq_basef
      <- decode_si_resp Deq_scalef Deq_idxf nat_eq_ nat_eq_ Dsi1 Dsi1'
      <- decode_si_fun Dsi1' Dsi2 Deq_scale Deq_idx
      <- decode_si_disp_resp Deq_scale Deq_idx Deq_basef string_eq_ nat_eq_
            eaddress_eq_ string_eq_ Dsi_disp1 Dsi_disp1'
      <- decode_si_disp_fun Dsi_disp1' Dsi_disp2 Deq_ee Deq_str.
- :
   decode_modrm_esc_fun (decode_modrm_esc_05 Dimp1) (decode_modrm_esc_05 Dimp2)
      Deeq string_eq_
      <- implode_word_fun Dimp1 Dimp2 Dbeq1
      <- eaddr_abs_resp nat_eq_ nat_eq_ Dbeq1 nat_eq_ Deeq.
- :
   decode_modrm_esc_fun decode_modrm_esc_06 decode_modrm_esc_06 eaddress_eq_
      string_eq_.
- :
   decode_modrm_esc_fun decode_modrm_esc_07 decode_modrm_esc_07 eaddress_eq_
      string_eq_.
- :
   decode_modrm_esc_fun (decode_modrm_esc_10 Dsext1)
      (decode_modrm_esc_10 Dsext2) Deq' string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_11 Dsext1)
      (decode_modrm_esc_11 Dsext2) Deq' string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_12 Dsext1)
      (decode_modrm_esc_12 Dsext2) Deq' string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_13 Dsext1)
      (decode_modrm_esc_13 Dsext2) Deq' string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_14 Dsext1 Dreg1 Dsi1 Dpar1)
      (decode_modrm_esc_14 Dsext2 Dreg2 Dsi2 Dpar2) Deq_ee string_eq_
      <- parse_modrm_fun Dpar1 Dpar2 Deq_scalef Deq_idxf Deq_basef
      <- decode_si_resp Deq_scalef Deq_idxf nat_eq_ nat_eq_ Dsi1 Dsi1'
      <- decode_si_fun Dsi1' Dsi2 Deq_scale Deq_idx
      <- decode_reg_resp Deq_basef Dreg1 Dreg1'
      <- decode_reg_fun Dreg1' Dreg2 Deq_base
      <- asignextend_fun Dsext1 Dsext2 Deq_disp
      <- eaddr_deref_resp Deq_base Deq_scale Deq_idx Deq_disp nat_eq_ Deq_ee.
- :
   decode_modrm_esc_fun (decode_modrm_esc_15 Dsext1)
      (decode_modrm_esc_15 Dsext2) Deq' string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_16 Dsext1)
      (decode_modrm_esc_16 Dsext2) Deq' string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_17 Dsext1)
      (decode_modrm_esc_17 Dsext2) Deq' string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_20 Dimplode1)
      (decode_modrm_esc_20 Dimplode2) Deq' string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_21 Dimplode1)
      (decode_modrm_esc_21 Dimplode2) Deq' string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_22 Dimplode1)
      (decode_modrm_esc_22 Dimplode2) Deq' string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_23 Dimplode1)
      (decode_modrm_esc_23 Dimplode2) Deq' string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_24 Dimplode1 Dreg1 Dsi1 Dpar1)
      (decode_modrm_esc_24 Dimplode2 Dreg2 Dsi2 Dpar2) Deq_ee string_eq_
      <- parse_modrm_fun Dpar1 Dpar2 Deq_scalef Deq_idxf Deq_basef
      <- decode_si_resp Deq_scalef Deq_idxf nat_eq_ nat_eq_ Dsi1 Dsi1'
      <- decode_si_fun Dsi1' Dsi2 Deq_scale Deq_idx
      <- decode_reg_resp Deq_basef Dreg1 Dreg1'
      <- decode_reg_fun Dreg1' Dreg2 Deq_base
      <- implode_word_fun Dimplode1 Dimplode2 Deq_disp
      <- eaddr_deref_resp Deq_base Deq_scale Deq_idx Deq_disp nat_eq_ Deq_ee.
- :
   decode_modrm_esc_fun (decode_modrm_esc_25 Dimplode1)
      (decode_modrm_esc_25 Dimplode2) Deq' string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_26 Dimplode1)
      (decode_modrm_esc_26 Dimplode2) Deq' string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
- :
   decode_modrm_esc_fun (decode_modrm_esc_27 Dimplode1)
      (decode_modrm_esc_27 Dimplode2) Deq' string_eq_
      <- implode_word_fun Dimplode1 Dimplode2 Deq
      <- eaddr_deref_resp nat_eq_ nat_eq_ nat_eq_ Deq nat_eq_ Deq'.
idecode_eax_fun :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi I2:iinst.
      Pi S2:string N3.
      idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1 S1
         -> idecode_eax (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- : idecode_eax_fun idecode_eax_ idecode_eax_ iinst_eq_ string_eq_.
idecode_al_fun :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi I2:iinst.
      Pi S2:string N3.
      idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1 S1
         -> idecode_al (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- : idecode_al_fun idecode_al_ idecode_al_ iinst_eq_ string_eq_.
idecode_mi_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi S:string N1. Pi I1:iinst.
      Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'. Pi I2:iinst. Pi S2:string N3.
      idecode_mi B1 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1
         S1
         -> idecode_mi B2 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_mi_fun (idecode_mi_ Dmodrm1 parse_modrm_)
      (idecode_mi_ Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr1
      <- string_eq_cons' Deqstr1 Deq1 Deqstr2
      <- string_eq_cons' Deqstr2 Deq2 Deqstr3
      <- string_eq_cons' Deqstr3 Deq3 Deqstr4
      <- string_eq_cons' Deqstr4 Deq4 Deqstr
      <- string_eq_cons4 Deq1 Deq2 Deq3 Deq4 string_eq_ Deq
      <- oper_imm_resp Deq Deq_oper
      <- iinst_eq_cons Deq_ee Deq_oper
            (\ea:eaddress ww. \o:oper (s (s (s (s 0')))). I ww ea o) Deq_inst.
idecode_mi8_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi S:string N1. Pi I1:iinst.
      Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'. Pi I2:iinst. Pi S2:string N3.
      idecode_mi8 B1 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1
         S1
         -> idecode_mi8 B2 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_mi8_fun (idecode_mi8_ Dmodrm1 parse_modrm_)
      (idecode_mi8_ Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr1
      <- string_eq_cons' Deqstr1 Deq1 Deqstr
      <- string_eq_cons string_eq_ Deq1 Deq
      <- oper_imm_resp Deq Deq_oper
      <- iinst_eq_cons Deq_ee Deq_oper (\ea:eaddress 1'. \o:oper (s 0'). I 1' ea o)
            Deq_inst.
idecode_mi_oper8_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper 1' -> iinst. Pi S:string N1. Pi I1:iinst.
      Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'. Pi I2:iinst. Pi S2:string N3.
      idecode_mi_oper8 B1 (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S
         I1 S1
         -> idecode_mi_oper8 B2
               (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_mi_oper8_fun (idecode_mi_oper8_ Dmodrm1 parse_modrm_)
      (idecode_mi_oper8_ Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr1
      <- string_eq_cons' Deqstr1 Deq1 Deqstr
      <- string_eq_cons string_eq_ Deq1 Deq
      <- oper_imm_resp Deq Deq_oper
      <- iinst_eq_cons Deq_ee Deq_oper
            (\ea:eaddress ww. \o:oper (s 0'). I ww ea o) Deq_inst.
idecode_mi8_oper8_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper 1' -> iinst. Pi S:string N1. Pi I1:iinst.
      Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'. Pi I2:iinst. Pi S2:string N3.
      idecode_mi8_oper8 B1 (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S
         I1 S1
         -> idecode_mi8_oper8 B2
               (\Nsz:nat. \ea:eaddress Nsz. \o:oper 1'. I Nsz ea o) S I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_mi8_oper8_fun (idecode_mi8_oper8_ Dmodrm1 parse_modrm_)
      (idecode_mi8_oper8_ Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr1
      <- string_eq_cons' Deqstr1 Deq1 Deqstr
      <- string_eq_cons string_eq_ Deq1 Deq
      <- oper_imm_resp Deq Deq_oper
      <- iinst_eq_cons Deq_ee Deq_oper (\ea:eaddress 1'. \o:oper (s 0'). I 1' ea o)
            Deq_inst.
idecode_mib_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'.
      Pi I:Pi n:nat. eaddress n -> oper n -> iinst. Pi S:string N1. Pi I1:iinst.
      Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'. Pi I2:iinst. Pi S2:string N3.
      idecode_mib B1 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1
         S1
         -> idecode_mib B2 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o)
               S I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_mib_fun (idecode_mib_ Dsext1 Dmodrm1 parse_modrm_)
      (idecode_mib_ Dsext2 Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr1
      <- string_eq_cons' Deqstr1 Deq1 Deqstr
      <- signextend_byte_resp Deq1 binary_eq_ Dsext1 Dsext1'
      <- signextend_byte_fun Dsext1' Dsext2 Deq_sext
      <- string_eq_cons4 Deq1 Deq_sext Deq_sext Deq_sext string_eq_ Deq
      <- oper_imm_resp Deq Deq_oper
      <- iinst_eq_cons Deq_ee Deq_oper
            (\ea:eaddress ww. \o:oper (s (s (s (s 0')))). I ww ea o) Deq_inst.
idecode_mr_fun :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi I2:iinst.
      Pi S2:string N3.
      idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1 S1
         -> idecode_mr (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_mr_fun (idecode_mr_ Dreg1 Dmodrm1 parse_modrm_)
      (idecode_mr_ Dreg2 Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr
      <- decode_reg_fun Dreg1 Dreg2 Deq_reg
      <- eaddr_reg_resp Deq_reg Deq_ee_reg
      <- oper_rm_resp Deq_ee_reg Deq_oper
      <- iinst_eq_cons Deq_ee Deq_oper (\ea:eaddress ww. \o:oper ww. I ww ea o)
            Deq_inst.
idecode_mr8_fun :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi I2:iinst.
      Pi S2:string N3.
      idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1 S1
         -> idecode_mr8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_mr8_fun (idecode_mr8_ Dreg1 Dmodrm1 parse_modrm_)
      (idecode_mr8_ Dreg2 Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr
      <- decode_reg8_fun Dreg1 Dreg2 Deq_ee_reg
      <- oper_rm_resp Deq_ee_reg Deq_oper
      <- iinst_eq_cons Deq_ee Deq_oper (\ea:eaddress 1'. \o:oper 1'. I 1' ea o)
            Deq_inst.
idecode_rm_fun :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi I2:iinst.
      Pi S2:string N3.
      idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1 S1
         -> idecode_rm (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_rm_fun (idecode_rm_ Dreg1 Dmodrm1 parse_modrm_)
      (idecode_rm_ Dreg2 Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr
      <- decode_reg_fun Dreg1 Dreg2 Deq_reg
      <- eaddr_reg_resp Deq_reg Deq_ee_reg
      <- oper_rm_resp Deq_ee Deq_oper
      <- iinst_eq_cons Deq_ee_reg Deq_oper
            (\ea:eaddress ww. \o:oper ww. I ww ea o) Deq_inst.
idecode_rm_oper8_fun :
   Pi N1:nat. Pi N2:nat.
      Pi I:Pi n:nat. Pi n1:nat. eaddress n -> oper n1 -> iinst. Pi S:string N1.
      Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi I2:iinst. Pi S2:string N3.
      idecode_rm_oper8
         (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz.
             I Ndsz Nosz ea o) S I1 S1
         -> idecode_rm_oper8
               (\Ndsz:nat. \Nosz:nat. \ea:eaddress Ndsz. \o:oper Nosz.
                   I Ndsz Nosz ea o) S I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_rm_oper8_fun (idecode_rm_oper8_ Dreg1 Dmodrm1 parse_modrm_)
      (idecode_rm_oper8_ Dreg2 Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr
      <- decode_reg_fun Dreg1 Dreg2 Deq_reg
      <- eaddr_reg_resp Deq_reg Deq_ee_reg
      <- oper_rm_resp Deq_ee Deq_oper
      <- iinst_eq_cons Deq_ee_reg Deq_oper
            (\ea:eaddress ww. \o:oper 1'. I ww 1' ea o) Deq_inst.
idecode_rm8_fun :
   Pi N1:nat. Pi N2:nat. Pi I:Pi n:nat. eaddress n -> oper n -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi I2:iinst.
      Pi S2:string N3.
      idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S I1 S1
         -> idecode_rm8 (\Nsz:nat. \ea:eaddress Nsz. \o:oper Nsz. I Nsz ea o) S
               I2 S2
         -> iinst_eq I1 I2 -> string_eq S1 S2 -> type.
- :
   idecode_rm8_fun (idecode_rm8_ Dreg1 Dmodrm1 parse_modrm_)
      (idecode_rm8_ Dreg2 Dmodrm2 parse_modrm_) Deq_inst Deqstr
      <- decode_modrm_fun Dmodrm1 Dmodrm2 Deq_ee Deqstr
      <- decode_reg8_fun Dreg1 Dreg2 Deq_ee_reg
      <- oper_rm_resp Deq_ee Deq_oper
      <- iinst_eq_cons Deq_ee_reg Deq_oper (\ea:eaddress 1'. \o:oper 1'. I 1' ea o)
            Deq_inst.
idecode_nr_fun :
   Pi N1:nat. Pi N2:nat. Pi I:oper ww -> iinst. Pi S:string N1. Pi I1:iinst.
      Pi S1:string N2. Pi N3:nat. Pi I2:iinst. Pi S2:string N3.
      idecode_nr (\o:oper ww. I o) S I1 S1
         -> idecode_nr (\o:oper ww. I o) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_nr_fun (idecode_nr_ Dadd1 Dimp1) (idecode_nr_ Dadd2 Dimp2) Deq_inst
      string_eq_
      <- implode_word_fun Dimp1 Dimp2 Deq_bin
      <- add_resp Deq_bin binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd1'
      <- add_fun3 Dadd1' Dadd2 X1 Deq_bin'
      <- oper_pcrel_resp Deq_bin' Deq_oper
      <- iinst_eq_cons_oper Deq_oper (\o:oper ww. I o) Deq_inst.
idecode_nai_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'. Pi I:oper ww -> iinst. Pi S:string N1.
      Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'. Pi I2:iinst.
      Pi S2:string N3.
      idecode_nai B1 (\o:oper ww. I o) S I1 S1
         -> idecode_nai B2 (\o:oper ww. I o) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_nai_fun (idecode_nai_ Dmodrm1 Dpar1) (idecode_nai_ Dmodrm2 Dpar2)
      Deq_inst Deqstr
      <- parse_modrm_fun Dpar1 Dpar2 Deq_mod Deq_regf Deq_rm
      <- decode_modrm_resp Deq_mod Deq_rm string_eq_ nat_eq_ eaddress_eq_
            string_eq_ Dmodrm1 Dmodrm1'
      <- decode_modrm_fun Dmodrm1' Dmodrm2 Deq_ee Deqstr
      <- oper_rm_resp Deq_ee Deq_oper
      <- iinst_eq_cons_oper Deq_oper (\o:oper ww. I o) Deq_inst.
idecode_sh_fun :
   Pi N1:nat. Pi N2:nat. Pi I:oper ww -> iinst. Pi S:string N1. Pi I1:iinst.
      Pi S1:string N2. Pi N3:nat. Pi I2:iinst. Pi S2:string N3.
      idecode_sh (\o:oper ww. I o) S I1 S1
         -> idecode_sh (\o:oper ww. I o) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_sh_fun (idecode_sh_ Dadd1 Dsext1) (idecode_sh_ Dadd2 Dsext2) Deq_inst
      string_eq_
      <- asignextend_fun Dsext1 Dsext2 Deq_bin
      <- add_resp Deq_bin binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd1'
      <- add_fun3 Dadd1' Dadd2 X1 Deq_bin'
      <- oper_pcrel_resp Deq_bin' Deq_oper
      <- iinst_eq_cons_oper Deq_oper (\o:oper ww. I o) Deq_inst.
idecode_m_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'. Pi I:eaddress ww -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'.
      Pi I2:iinst. Pi S2:string N3.
      idecode_m B1 (\ea:eaddress ww. I ea) S I1 S1
         -> idecode_m B2 (\ea:eaddress ww. I ea) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_m_fun (idecode_m_ Dmodrm1 Dpar1) (idecode_m_ Dmodrm2 Dpar2) Deq_inst
      Deqstr
      <- parse_modrm_fun Dpar1 Dpar2 Deq_mod Deq_regf Deq_rm
      <- decode_modrm_resp Deq_mod Deq_rm string_eq_ nat_eq_ eaddress_eq_
            string_eq_ Dmodrm1 Dmodrm1'
      <- decode_modrm_fun Dmodrm1' Dmodrm2 Deq_ee Deqstr
      <- iinst_eq_cons_eaddress Deq_ee (\ea:eaddress ww. I ea) Deq_inst.
idecode_m16fp_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'. Pi I:eaddress 2' -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'.
      Pi I2:iinst. Pi S2:string N3.
      idecode_m16fp B1 (\ea:eaddress 2'. I ea) S I1 S1
         -> idecode_m16fp B2 (\ea:eaddress 2'. I ea) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_m16fp_fun (idecode_m16fp_ Dmodrm1 Dpar1)
      (idecode_m16fp_ Dmodrm2 Dpar2) Deq_inst Deqstr
      <- parse_modrm_fun Dpar1 Dpar2 Deq_mod Deq_regf Deq_rm
      <- decode_modrm_esc_resp Deq_mod Deq_rm string_eq_ nat_eq_ eaddress_eq_
            string_eq_ Dmodrm1 Dmodrm1'
      <- decode_modrm_esc_fun Dmodrm1' Dmodrm2 Deq_ee Deqstr
      <- iinst_eq_cons_eaddress Deq_ee (\ea:eaddress 2'. I ea) Deq_inst.
idecode_m32fp_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'. Pi I:eaddress ww -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'.
      Pi I2:iinst. Pi S2:string N3.
      idecode_m32fp B1 (\ea:eaddress ww. I ea) S I1 S1
         -> idecode_m32fp B2 (\ea:eaddress ww. I ea) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_m32fp_fun (idecode_m32fp_ Dmodrm1 Dpar1)
      (idecode_m32fp_ Dmodrm2 Dpar2) Deq_inst Deqstr
      <- parse_modrm_fun Dpar1 Dpar2 Deq_mod Deq_regf Deq_rm
      <- decode_modrm_esc_resp Deq_mod Deq_rm string_eq_ nat_eq_ eaddress_eq_
            string_eq_ Dmodrm1 Dmodrm1'
      <- decode_modrm_esc_fun Dmodrm1' Dmodrm2 Deq_ee Deqstr
      <- iinst_eq_cons_eaddress Deq_ee (\ea:eaddress ww. I ea) Deq_inst.
idecode_m64fp_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'. Pi I:eaddress dw -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'.
      Pi I2:iinst. Pi S2:string N3.
      idecode_m64fp B1 (\ea:eaddress dw. I ea) S I1 S1
         -> idecode_m64fp B2 (\ea:eaddress dw. I ea) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_m64fp_fun (idecode_m64fp_ Dmodrm1 Dpar1)
      (idecode_m64fp_ Dmodrm2 Dpar2) Deq_inst Deqstr
      <- parse_modrm_fun Dpar1 Dpar2 Deq_mod Deq_regf Deq_rm
      <- decode_modrm_esc_resp Deq_mod Deq_rm string_eq_ nat_eq_ eaddress_eq_
            string_eq_ Dmodrm1 Dmodrm1'
      <- decode_modrm_esc_fun Dmodrm1' Dmodrm2 Deq_ee Deqstr
      <- iinst_eq_cons_eaddress Deq_ee (\ea:eaddress dw. I ea) Deq_inst.
idecode_m80fp_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'. Pi I:eaddress 10' -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'.
      Pi I2:iinst. Pi S2:string N3.
      idecode_m80fp B1 (\ea:eaddress 10'. I ea) S I1 S1
         -> idecode_m80fp B2 (\ea:eaddress 10'. I ea) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_m80fp_fun (idecode_m80fp_ Dmodrm1 Dpar1)
      (idecode_m80fp_ Dmodrm2 Dpar2) Deq_inst Deqstr
      <- parse_modrm_fun Dpar1 Dpar2 Deq_mod Deq_regf Deq_rm
      <- decode_modrm_esc_resp Deq_mod Deq_rm string_eq_ nat_eq_ eaddress_eq_
            string_eq_ Dmodrm1 Dmodrm1'
      <- decode_modrm_esc_fun Dmodrm1' Dmodrm2 Deq_ee Deqstr
      <- iinst_eq_cons_eaddress Deq_ee (\ea:eaddress 10'. I ea) Deq_inst.
idecode_m8_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 3'. Pi I:eaddress 1' -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi B2:binary 3'.
      Pi I2:iinst. Pi S2:string N3.
      idecode_m8 B1 (\ea:eaddress 1'. I ea) S I1 S1
         -> idecode_m8 B2 (\ea:eaddress 1'. I ea) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_m8_fun (idecode_m8_ Dmodrm1 Dpar1) (idecode_m8_ Dmodrm2 Dpar2)
      Deq_inst Deqstr
      <- parse_modrm_fun Dpar1 Dpar2 Deq_mod Deq_regf Deq_rm
      <- decode_modrm_resp Deq_mod Deq_rm string_eq_ nat_eq_ eaddress_eq_
            string_eq_ Dmodrm1 Dmodrm1'
      <- decode_modrm_fun Dmodrm1' Dmodrm2 Deq_ee Deqstr
      <- iinst_eq_cons_eaddress Deq_ee (\ea:eaddress 1'. I ea) Deq_inst.
idecode_r_fun :
   Pi N1:nat. Pi N2:nat. Pi B1:binary 5'. Pi I:eaddress ww -> iinst.
      Pi S:string N1. Pi I1:iinst. Pi S1:string N2. Pi N3:nat. Pi B2:binary 5'.
      Pi I2:iinst. Pi S2:string N3.
      idecode_r B1 (\ea:eaddress ww. I ea) S I1 S1
         -> idecode_r B2 (\ea:eaddress ww. I ea) S I2 S2 -> iinst_eq I1 I2
         -> string_eq S1 S2 -> type.
- :
   idecode_r_fun (idecode_r_ Dreg1 parse_53_) (idecode_r_ Dreg2 parse_53_)
      Deq_inst string_eq_
      <- decode_reg_fun Dreg1 Dreg2 Deq_reg
      <- eaddr_reg_resp Deq_reg Deq_ee
      <- iinst_eq_cons_eaddress Deq_ee (\ea:eaddress ww. I ea) Deq_inst.
idecode*_fun :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi I1:iinst. Pi S1:string N2.
      Pi N3:nat. Pi I2:iinst. Pi S2:string N3.
      idecode* S I1 S1 -> idecode* S I2 S2 -> iinst_eq I1 I2 -> string_eq S1 S2
         -> type.
- :
   idecode*_fun (idecode_add_eax D) (idecode_add_eax D') D1 D2
      <- idecode_eax_fun D D' D1 D2.
- :
   idecode*_fun (idecode_add_al D) (idecode_add_al D') D1 D2
      <- idecode_al_fun D D' D1 D2.
- :
   idecode*_fun (idecode_add_mi D) (idecode_add_mi D') D1 D2
      <- idecode_mi_fun D D' D1 D2.
- :
   idecode*_fun (idecode_add_mi8 D) (idecode_add_mi8 D') D1 D2
      <- idecode_mi8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_add_mib D) (idecode_add_mib D') D1 D2
      <- idecode_mib_fun D D' D1 D2.
- :
   idecode*_fun (idecode_add_mr D) (idecode_add_mr D') D1 D2
      <- idecode_mr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_add_mr8 D) (idecode_add_mr8 D') D1 D2
      <- idecode_mr8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_add_rm D) (idecode_add_rm D') D1 D2
      <- idecode_rm_fun D D' D1 D2.
- :
   idecode*_fun (idecode_add_rm8 D) (idecode_add_rm8 D') D1 D2
      <- idecode_rm8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_eax D) (idecode_and_eax D') D1 D2
      <- idecode_eax_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_al D) (idecode_and_al D') D1 D2
      <- idecode_al_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_mi D) (idecode_and_mi D') D1 D2
      <- idecode_mi_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_mi8 D) (idecode_and_mi8 D') D1 D2
      <- idecode_mi8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_mib D) (idecode_and_mib D') D1 D2
      <- idecode_mib_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_mr D) (idecode_and_mr D') D1 D2
      <- idecode_mr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_mr8 D) (idecode_and_mr8 D') D1 D2
      <- idecode_mr8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_rm D) (idecode_and_rm D') D1 D2
      <- idecode_rm_fun D D' D1 D2.
- :
   idecode*_fun (idecode_and_rm8 D) (idecode_and_rm8 D') D1 D2
      <- idecode_rm8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_call_nr D) (idecode_call_nr D') D1 D2
      <- idecode_nr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_call_nai D) (idecode_call_nai D') D1 D2
      <- idecode_nai_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_eax D) (idecode_cmp_eax D') D1 D2
      <- idecode_eax_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_al D) (idecode_cmp_al D') D1 D2
      <- idecode_al_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_mi D) (idecode_cmp_mi D') D1 D2
      <- idecode_mi_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_mi8 D) (idecode_cmp_mi8 D') D1 D2
      <- idecode_mi8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_mib D) (idecode_cmp_mib D') D1 D2
      <- idecode_mib_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_mr D) (idecode_cmp_mr D') D1 D2
      <- idecode_mr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_mr8 D) (idecode_cmp_mr8 D') D1 D2
      <- idecode_mr8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_rm D) (idecode_cmp_rm D') D1 D2
      <- idecode_rm_fun D D' D1 D2.
- :
   idecode*_fun (idecode_cmp_rm8 D) (idecode_cmp_rm8 D') D1 D2
      <- idecode_rm8_fun D D' D1 D2.
- : idecode*_fun idecode_f2xm1 idecode_f2xm1 iinst_eq_ string_eq_.
- : idecode*_fun idecode_fabs idecode_fabs iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fadd32 D) (idecode_fadd32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fadd64 D) (idecode_fadd64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fadd_rt D) (idecode_fadd_rt D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fadd_tr D) (idecode_fadd_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_faddp_tr D) (idecode_faddp_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fiadd32 D) (idecode_fiadd32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fiadd64 D) (idecode_fiadd64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- : idecode*_fun idecode_fchs idecode_fchs iinst_eq_ string_eq_.
- : idecode*_fun idecode_fclex idecode_fclex iinst_eq_ string_eq_.
- : idecode*_fun idecode_fnclex idecode_fnclex iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fcmov1 parse_35_) (idecode_fcmov1 parse_35_) iinst_eq_
      string_eq_.
- :
   idecode*_fun (idecode_fcmov2 parse_35_) (idecode_fcmov2 parse_35_) iinst_eq_
      string_eq_.
- :
   idecode*_fun (idecode_fcom_tr D) (idecode_fcom_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fcomp_tr D) (idecode_fcomp_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- : idecode*_fun idecode_fcompp idecode_fcompp iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fcomi parse_53_) (idecode_fcomi parse_53_) iinst_eq_
      string_eq_.
- :
   idecode*_fun (idecode_fcomip parse_53_) (idecode_fcomip parse_53_) iinst_eq_
      string_eq_.
- :
   idecode*_fun (idecode_fucomi parse_53_) (idecode_fucomi parse_53_) iinst_eq_
      string_eq_.
- :
   idecode*_fun (idecode_fucomip parse_53_) (idecode_fucomip parse_53_)
      iinst_eq_ string_eq_.
- : idecode*_fun idecode_fcos idecode_fcos iinst_eq_ string_eq_.
- : idecode*_fun idecode_fdecstp idecode_fdecstp iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fdiv32 D) (idecode_fdiv32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdiv64 D) (idecode_fdiv64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdiv_rt D) (idecode_fdiv_rt D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdiv_tr D) (idecode_fdiv_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdivp_tr D) (idecode_fdivp_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fidiv32 D) (idecode_fidiv32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fidiv64 D) (idecode_fidiv64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdivr32 D) (idecode_fdivr32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdivr64 D) (idecode_fdivr64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdivr_rt D) (idecode_fdivr_rt D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdivr_tr D) (idecode_fdivr_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fdivrp_tr D) (idecode_fdivrp_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fidivr32 D) (idecode_fidivr32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fidivr64 D) (idecode_fidivr64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_ffree parse_53_) (idecode_ffree parse_53_) iinst_eq_
      string_eq_.
- :
   idecode*_fun (idecode_ficom16 D) (idecode_ficom16 D') D1 D2
      <- idecode_m16fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_ficom32 D) (idecode_ficom32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_ficomp16 D) (idecode_ficomp16 D') D1 D2
      <- idecode_m16fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_ficomp32 D) (idecode_ficomp32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fild16 D) (idecode_fild16 D') D1 D2
      <- idecode_m16fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fild32 D) (idecode_fild32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fild64 D) (idecode_fild64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- : idecode*_fun idecode_fincstp idecode_fincstp iinst_eq_ string_eq_.
- : idecode*_fun idecode_finit idecode_finit iinst_eq_ string_eq_.
- : idecode*_fun idecode_fninit idecode_fninit iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fist16 D) (idecode_fist16 D') D1 D2
      <- idecode_m16fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fist32 D) (idecode_fist32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fistp16 D) (idecode_fistp16 D') D1 D2
      <- idecode_m16fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fistp32 D) (idecode_fistp32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fistp64 D) (idecode_fistp64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fisttp16 D) (idecode_fisttp16 D') D1 D2
      <- idecode_m16fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fisttp32 D) (idecode_fisttp32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fisttp64 D) (idecode_fisttp64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fld32 D) (idecode_fld32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fld64 D) (idecode_fld64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fld80 D) (idecode_fld80 D') D1 D2
      <- idecode_m80fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fld_t D) (idecode_fld_t D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- : idecode*_fun idecode_fld1 idecode_fld1 iinst_eq_ string_eq_.
- : idecode*_fun idecode_fldl2t idecode_fldl2t iinst_eq_ string_eq_.
- : idecode*_fun idecode_fldl2e idecode_fldl2e iinst_eq_ string_eq_.
- : idecode*_fun idecode_fldpi idecode_fldpi iinst_eq_ string_eq_.
- : idecode*_fun idecode_fldlg2 idecode_fldlg2 iinst_eq_ string_eq_.
- : idecode*_fun idecode_fldln2 idecode_fldln2 iinst_eq_ string_eq_.
- : idecode*_fun idecode_fldz idecode_fldz iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fmul32 D) (idecode_fmul32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fmul64 D) (idecode_fmul64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fmul_rt D) (idecode_fmul_rt D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fmul_tr D) (idecode_fmul_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fmulp_tr D) (idecode_fmulp_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fimul32 D) (idecode_fimul32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fimul64 D) (idecode_fimul64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- : idecode*_fun idecode_fnop idecode_fnop iinst_eq_ string_eq_.
- : idecode*_fun idecode_fpatan idecode_fpatan iinst_eq_ string_eq_.
- : idecode*_fun idecode_fprem idecode_fprem iinst_eq_ string_eq_.
- : idecode*_fun idecode_fprem1 idecode_fprem1 iinst_eq_ string_eq_.
- : idecode*_fun idecode_fptan idecode_fptan iinst_eq_ string_eq_.
- : idecode*_fun idecode_frndint idecode_frndint iinst_eq_ string_eq_.
- : idecode*_fun idecode_fscale idecode_fscale iinst_eq_ string_eq_.
- : idecode*_fun idecode_fsin idecode_fsin iinst_eq_ string_eq_.
- : idecode*_fun idecode_fsincos idecode_fsincos iinst_eq_ string_eq_.
- : idecode*_fun idecode_fsqrt idecode_fsqrt iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fst32 D) (idecode_fst32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fst64 D) (idecode_fst64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fst_t D) (idecode_fst_t D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fstp32 D) (idecode_fstp32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fstp64 D) (idecode_fstp64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fstp80 D) (idecode_fstp80 D') D1 D2
      <- idecode_m80fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fstp_t D) (idecode_fstp_t D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsub32 D) (idecode_fsub32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsub64 D) (idecode_fsub64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsub_rt D) (idecode_fsub_rt D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsub_tr D) (idecode_fsub_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsubp_tr D) (idecode_fsubp_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fisub32 D) (idecode_fisub32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fisub64 D) (idecode_fisub64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsubr32 D) (idecode_fsubr32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsubr64 D) (idecode_fsubr64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsubr_rt D) (idecode_fsubr_rt D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsubr_tr D) (idecode_fsubr_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fsubrp_tr D) (idecode_fsubrp_tr D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fisubr32 D) (idecode_fisubr32 D') D1 D2
      <- idecode_m32fp_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fisubr64 D) (idecode_fisubr64 D') D1 D2
      <- idecode_m64fp_fun D D' D1 D2.
- : idecode*_fun idecode_ftst idecode_ftst iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fucom D) (idecode_fucom D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_fucomp D) (idecode_fucomp D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- : idecode*_fun idecode_fucompp idecode_fucompp iinst_eq_ string_eq_.
- : idecode*_fun idecode_fxam idecode_fxam iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_fxch parse_53_) (idecode_fxch parse_53_) iinst_eq_
      string_eq_.
- : idecode*_fun idecode_fxtract idecode_fxtract iinst_eq_ string_eq_.
- : idecode*_fun idecode_fyl2x idecode_fyl2x iinst_eq_ string_eq_.
- : idecode*_fun idecode_fyl2xp1 idecode_fyl2xp1 iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_jcc Dadd1 Dimp1 Dcond1 parse_44_)
      (idecode_jcc Dadd2 Dimp2 Dcond2 parse_44_) Deq string_eq_
      <- decode_cond_fun Dcond1 Dcond2 Deq_cond
      <- implode_word_fun Dimp1 Dimp2 Deq_bin
      <- add_resp Deq_bin binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd1'
      <- add_fun3 Dadd1' Dadd2 X1 Deq_bin'
      <- oper_pcrel_resp Deq_bin' Deq_oper
      <- ii_jcc_resp Deq_cond Deq_oper Deq.
- :
   idecode*_fun (idecode_jcc_sh Dadd1 Dsext1 Dcond1 parse_44_)
      (idecode_jcc_sh Dadd2 Dsext2 Dcond2 parse_44_) Deq string_eq_
      <- decode_cond_fun Dcond1 Dcond2 Deq_cond
      <- asignextend_fun Dsext1 Dsext2 Deq_bin
      <- add_resp Deq_bin binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd1'
      <- add_fun3 Dadd1' Dadd2 X1 Deq_bin'
      <- oper_pcrel_resp Deq_bin' Deq_oper
      <- ii_jcc_resp Deq_cond Deq_oper Deq.
- :
   idecode*_fun (idecode_jecxz D) (idecode_jecxz D') D1 D2
      <- idecode_sh_fun D D' D1 D2.
- :
   idecode*_fun (idecode_jmp_nr D) (idecode_jmp_nr D') D1 D2
      <- idecode_nr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_jmp_nai D) (idecode_jmp_nai D') D1 D2
      <- idecode_nai_fun D D' D1 D2.
- :
   idecode*_fun (idecode_jmp_sh D) (idecode_jmp_sh D') D1 D2
      <- idecode_sh_fun D D' D1 D2.
- :
   idecode*_fun (idecode_mov_mi D) (idecode_mov_mi D') D1 D2
      <- idecode_mi_fun D D' D1 D2.
- :
   idecode*_fun (idecode_mov_mi8 D) (idecode_mov_mi8 D') D1 D2
      <- idecode_mi8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_mov_mr D) (idecode_mov_mr D') D1 D2
      <- idecode_mr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_mov_mr8 D) (idecode_mov_mr8 D') D1 D2
      <- idecode_mr8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_mov_ri Dreg1 parse_53_)
      (idecode_mov_ri Dreg2 parse_53_) Deq_inst string_eq_
      <- decode_reg_fun Dreg1 Dreg2 Deq_reg
      <- eaddr_reg_resp Deq_reg Deq_ee
      <- ii_mov_resp Deq_ee oper_eq_ Deq_inst.
- :
   idecode*_fun (idecode_mov_ri8 Dreg1 parse_53_)
      (idecode_mov_ri8 Dreg2 parse_53_) Deq_inst string_eq_
      <- decode_reg8_fun Dreg1 Dreg2 Deq_ee
      <- ii_mov_resp Deq_ee oper_eq_ Deq_inst.
- :
   idecode*_fun (idecode_mov_rm D) (idecode_mov_rm D') D1 D2
      <- idecode_rm_fun D D' D1 D2.
- :
   idecode*_fun (idecode_mov_rm8 D) (idecode_mov_rm8 D') D1 D2
      <- idecode_rm8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_movsx D) (idecode_movsx D') D1 D2
      <- idecode_rm_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_movzx D) (idecode_movzx D') D1 D2
      <- idecode_rm_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_eax D) (idecode_or_eax D') D1 D2
      <- idecode_eax_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_al D) (idecode_or_al D') D1 D2
      <- idecode_al_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_mi D) (idecode_or_mi D') D1 D2
      <- idecode_mi_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_mi8 D) (idecode_or_mi8 D') D1 D2
      <- idecode_mi8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_mib D) (idecode_or_mib D') D1 D2
      <- idecode_mib_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_mr D) (idecode_or_mr D') D1 D2
      <- idecode_mr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_mr8 D) (idecode_or_mr8 D') D1 D2
      <- idecode_mr8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_rm D) (idecode_or_rm D') D1 D2
      <- idecode_rm_fun D D' D1 D2.
- :
   idecode*_fun (idecode_or_rm8 D) (idecode_or_rm8 D') D1 D2
      <- idecode_rm8_fun D D' D1 D2.
- : idecode*_fun idecode_nop idecode_nop iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_pop_m D) (idecode_pop_m D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_pop_r D) (idecode_pop_r D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- : idecode*_fun idecode_push_i idecode_push_i iinst_eq_ string_eq_.
- : idecode*_fun idecode_push_ib idecode_push_ib iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_push_m D) (idecode_push_m D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_push_r D) (idecode_push_r D') D1 D2
      <- idecode_r_fun D D' D1 D2.
- :
   idecode*_fun (idecode_rcl_one D) (idecode_rcl_one D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_rcl_cl D) (idecode_rcl_cl D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_rcl_imm D) (idecode_rcl_imm D') D1 D2
      <- idecode_mi_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_rcr_one D) (idecode_rcr_one D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_rcr_cl D) (idecode_rcr_cl D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_rcr_imm D) (idecode_rcr_imm D') D1 D2
      <- idecode_mi_oper8_fun D D' D1 D2.
- : idecode*_fun idecode_ret idecode_ret iinst_eq_ string_eq_.
- :
   idecode*_fun (idecode_rol_one D) (idecode_rol_one D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_rol_cl D) (idecode_rol_cl D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_rol_imm D) (idecode_rol_imm D') D1 D2
      <- idecode_mi_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_ror_one D) (idecode_ror_one D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_ror_cl D) (idecode_ror_cl D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_ror_imm D) (idecode_ror_imm D') D1 D2
      <- idecode_mi_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sar_one8 D) (idecode_sar_one8 D') D1 D2
      <- idecode_m8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sar_cl8 D) (idecode_sar_cl8 D') D1 D2
      <- idecode_m8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sar_imm8 D) (idecode_sar_imm8 D') D1 D2
      <- idecode_mi8_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sar_one D) (idecode_sar_one D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sar_cl D) (idecode_sar_cl D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sar_imm D) (idecode_sar_imm D') D1 D2
      <- idecode_mi_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shl_one8 D) (idecode_shl_one8 D') D1 D2
      <- idecode_m8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shl_cl8 D) (idecode_shl_cl8 D') D1 D2
      <- idecode_m8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shl_imm8 D) (idecode_shl_imm8 D') D1 D2
      <- idecode_mi8_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shl_one D) (idecode_shl_one D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shl_cl D) (idecode_shl_cl D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shl_imm D) (idecode_shl_imm D') D1 D2
      <- idecode_mi_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shr_one8 D) (idecode_shr_one8 D') D1 D2
      <- idecode_m8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shr_cl8 D) (idecode_shr_cl8 D') D1 D2
      <- idecode_m8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shr_imm8 D) (idecode_shr_imm8 D') D1 D2
      <- idecode_mi8_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shr_one D) (idecode_shr_one D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shr_cl D) (idecode_shr_cl D') D1 D2
      <- idecode_m_fun D D' D1 D2.
- :
   idecode*_fun (idecode_shr_imm D) (idecode_shr_imm D') D1 D2
      <- idecode_mi_oper8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_eax D) (idecode_sub_eax D') D1 D2
      <- idecode_eax_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_al D) (idecode_sub_al D') D1 D2
      <- idecode_al_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_mi D) (idecode_sub_mi D') D1 D2
      <- idecode_mi_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_mi8 D) (idecode_sub_mi8 D') D1 D2
      <- idecode_mi8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_mib D) (idecode_sub_mib D') D1 D2
      <- idecode_mib_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_mr D) (idecode_sub_mr D') D1 D2
      <- idecode_mr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_mr8 D) (idecode_sub_mr8 D') D1 D2
      <- idecode_mr8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_rm D) (idecode_sub_rm D') D1 D2
      <- idecode_rm_fun D D' D1 D2.
- :
   idecode*_fun (idecode_sub_rm8 D) (idecode_sub_rm8 D') D1 D2
      <- idecode_rm8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_eax D) (idecode_xor_eax D') D1 D2
      <- idecode_eax_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_al D) (idecode_xor_al D') D1 D2
      <- idecode_al_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_mi D) (idecode_xor_mi D') D1 D2
      <- idecode_mi_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_mi8 D) (idecode_xor_mi8 D') D1 D2
      <- idecode_mi8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_mib D) (idecode_xor_mib D') D1 D2
      <- idecode_mib_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_mr D) (idecode_xor_mr D') D1 D2
      <- idecode_mr_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_mr8 D) (idecode_xor_mr8 D') D1 D2
      <- idecode_mr8_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_rm D) (idecode_xor_rm D') D1 D2
      <- idecode_rm_fun D D' D1 D2.
- :
   idecode*_fun (idecode_xor_rm8 D) (idecode_xor_rm8 D') D1 D2
      <- idecode_rm8_fun D D' D1 D2.
idecode_fun :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi I:iinst. Pi N:nat. Pi S1:string N2.
      Pi N3:nat. Pi I':iinst. Pi N':nat. Pi S1':string N3.
      idecode S I N S1 -> idecode S I' N' S1' -> iinst_eq I I' -> nat_eq N N'
         -> string_eq S1 S1' -> type.
- :
   idecode_fun (idecode_ Dsum1 Ddecode1) (idecode_ Dsum2 Ddecode2) Deq_inst Deq'
      Deq_str
      <- idecode*_fun Ddecode1 Ddecode2 Deq_inst Deq_str
      <- string_eq_cdr Deq_str Deq
      <- sum_resp nat_eq_ Deq nat_eq_ Dsum1 Dsum1'
      <- sum_fun1 Dsum1' Dsum2 Deq'.
idecodeseq_fun :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi IS:iinstseq. Pi N:nat.
      Pi S1:string N2. Pi N3:nat. Pi IS1:iinstseq. Pi N4:nat. Pi S2:string N3.
      Pi M:nat. Pi M1:nat.
      idecodeseq S IS N S1 -> idecodeseq S IS1 N4 S2 -> sizeof_iinstseq IS M
         -> sizeof_iinstseq IS1 M1 -> nat_eq M M1 -> iinstseq_eq IS IS1
         -> nat_eq N N4 -> string_eq S1 S2 -> type.
idecodeseq_fun_nil :
   idecodeseq_fun idecodeseq_nil idecodeseq_nil X1 X2 nat_eq_ iinstseq_eq_
      nat_eq_ string_eq_.
idecodeseq_fun_cons :
   idecodeseq_fun (idecodeseq_cons Dsum Diseq Didec)
      (idecodeseq_cons Dsum1 Diseq1 Didec1) (sizeof_iinstseq_cons Dsize1)
      (sizeof_iinstseq_cons Dsize2) Dsizeeq Diiseq1 Dneq2 Dseq1
      <- idecode_fun Didec Didec1 Diieq Dneq Dseq
      <- idecodeseq_resp Dseq iinstseq_eq_ nat_eq_ string_eq_ Diseq Diseq2
      <- nat_eq_dec Dsizeeq1 Dsizeeq
      <- idecodeseq_fun Diseq2 Diseq1 Dsize1 Dsize2 Dsizeeq1 Diiseq Dneq1 Dseq1
      <- sum_resp Dneq Dneq1 nat_eq_ Dsum Dsum2
      <- sum_fun3 Dsum2 Dsum1 Dneq2
      <- iinstseq_eq_cons Dneq Diieq Diiseq Diiseq1.
decode_modrm_trunc :
   Pi P:nat. Pi M:nat. Pi Bmod:binary 2'. Pi Brm:binary 3'. Pi S:string P.
      Pi Size:nat. Pi EA:eaddress Size. Pi S1:string M. Pi N:nat. Pi N':nat.
      Pi N1:nat. Pi S':string N'. Pi S2:string N1. Pi N2:nat. Pi S3:string N.
      Pi S'':string N2.
      decode_modrm Bmod Brm S Size EA S1 -> sum N M P -> leq N N'
         -> index N' S S' S2 -> index N S' S3 S''
         -> decode_modrm Bmod Brm S' Size EA S'' -> type.
- :
   decode_modrm_trunc D Dsum1_23 Dleq Dindex12_3 Dindex12 D''
      <- disp_size D Dindex1_23 D' X2
      <- index_implies_sum Dindex1_23 Dsum1_23'
      <- sum_fun1 Dsum1_23 Dsum1_23' Deq
      <- leq_resp Deq nat_eq_ Dleq Dleq'
      <- index_assoc' Dindex1_23' Dindex_23 Dindex12_3 Dindex12 Dsum
      <- index_fun'' Deq Dindex1_23' Dindex1_23 Deqs X1
      <- index_resp Deq string_eq_ Deqs string_eq_ Dindex12 Dindex12'
      <- disp_append Dindex12' D' D''.
idecode_index :
   Pi M:nat. Pi N':nat. Pi S:string M. Pi I:iinst. Pi N:nat. Pi S':string N'.
      Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S2:string N2. Pi N3:nat.
      Pi S2':string N3.
      idecode S I N S' -> index M S1 S S2 -> sum N N' M -> idecode S1 I N S2'
         -> index N' S2' S' S2 -> type.
- :
   idecode_index (idecode_ Dsum12 Ddecode) Dindex12_3 X3
      (idecode_ Dsum1_23' Ddecode'') Dindex23
      <- inst_size* Ddecode Dindex12 Ddecode' X1 X2
      <- index_implies_sum Dindex12 Dsum12'
      <- sum_fun1 Dsum12' Dsum12 Deq
      <- index_assoc_sz' Dindex1_23 Dindex23 Dindex12_3 Dindex12 Dsum12'
      <- idecode*_append Dindex1_23 Ddecode' Ddecode''
      <- index_implies_sum Dindex1_23 Dsum1_23
      <- sum_resp Deq nat_eq_ nat_eq_ Dsum1_23 Dsum1_23'.
idecode_index' :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi I:iinst. Pi N:nat. Pi S2:string N2.
      Pi S1:string N.
      idecode S I N S2 -> index N S S1 S2 -> idecode S1 I N # -> type.
- :
   idecode_index' (idecode_ Dsum Ddecode) Dindex' (idecode_ Dsumid Ddecode'')
      <- inst_size* Ddecode Dindex Ddecode' X1 X2
      <- index_implies_sum Dindex Dsum'
      <- sum_fun1 Dsum' Dsum Deq
      <- string_resp Deq S1 S2 Deqs
      <- index_resp Deq string_eq_ Deqs string_eq_ Dindex Dindex'
      <- idecode*_resp Deqs iinst_eq_ string_eq_ Ddecode' Ddecode''
      <- sum_ident N1 Dsumid.
idecodeseq_index :
   Pi M:nat. Pi N':nat. Pi S:string M. Pi I:iinstseq. Pi N:nat. Pi S':string N'.
      Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi S2:string N2. Pi N3:nat.
      Pi S2':string N3.
      idecodeseq S I N S' -> index M S1 S S2 -> sum N N' M
         -> idecodeseq S1 I N S2' -> index N' S2' S' S2 -> type.
-n : idecodeseq_index idecodeseq_nil Dind sum_z idecodeseq_nil Dind.
-c :
   idecodeseq_index (idecodeseq_cons Dsum Didecs Didec) Dind Dsum1
      (idecodeseq_cons Dsum Didecs' Didec') Dind2
      <- sum_assoc Dsum Dsum1 Dsum2 Dsum3
      <- idecode_index' Didec Dindex Didec1
      <- index_implies_sum Dindex Dsum4
      <- sum_fun2 Dsum3 Dsum4 Dnateq1
      <- sum_resp nat_eq_ nat_eq_ Dnateq1 Dsum2 Dsum5
      <- idecode_index Didec Dind Dsum4 Didec' Dind1
      <- idecodeseq_index Didecs Dind1 Dsum5 Didecs' Dind2.
idecode_idecodeseq :
   Pi N1:nat. Pi S:string N1. Pi I:iinst. Pi N:nat.
      idecode S I N # -> idecodeseq S (icodecons N I icodenil) N # -> type.
idecode_idecodeseq_ :
   idecode_idecodeseq Didec (idecodeseq_cons Dsum idecodeseq_nil Didec)
      <- sum_ident N1 Dsum.
idecode_nonnull :
   Pi N1:nat. Pi N2:nat. Pi S1:string N1. Pi I1:iinst. Pi N:nat.
      Pi S2:string N2. Pi N':nat. idecode S1 I1 N S2 -> nat_eq N (s N') -> type.
idecode_nonnull| : Pi N:nat. Pi N':nat. leq 1' N -> nat_eq N (s N') -> type.
- : idecode_nonnull| (leq_s leq_z) nat_eq_.
- :
   idecode_nonnull (idecode_ Dsum Ddecode) Deqsucc
      <- inst_size* Ddecode Dindex X1 X2 Dleq
      <- index_implies_sum Dindex Dsum'
      <- sum_fun1 Dsum' Dsum Deq
      <- leq_resp nat_eq_ Deq Dleq Dleq'
      <- idecode_nonnull| Dleq' Deqsucc.
idecodeseq_nonnull :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi N3:nat. Pi I:iinst. Pi IS:iinstseq.
      Pi N:nat. Pi S1:string N2. Pi N':nat. Pi N4:nat. Pi S1':string N4.
      Pi N5:nat.
      idecodeseq S (icodecons N3 I IS) N S1 -> nat_eq N (s N')
         -> idecode S I N3 S1' -> idecodeseq S1' IS N5 S1 -> sum N3 N5 N -> type.
- :
   idecodeseq_nonnull (idecodeseq_cons Dsum Didecs Didec) Dnateq2 Didec Didecs
      Dsum
      <- idecode_nonnull Didec Dnateq1
      <- sum_resp Dnateq1 nat_eq_ nat_eq_ Dsum Dsum1
      <- sum_nonzero Dsum1 Dnateq2.
max_inst_seq_num : nat = 2'.
max_inst_seq_size : nat
   = s
        (s
            (s
                (s
                    (s
                        (s
                            (s
                                (s
                                    (s
                                        
(s
    (s
        (s
            (s
                (s
                    (s
                        (s
                            (s
                                (s
                                    (s
                                        
(s (s (s (s (s (s (s (s (s (s (s (s (s z))))))))))))))))))))))))))))))).
Dprod_max_inst_seq :
   product max_inst_seq_num max_inst_size
      (s
          (s
              (s
                  (s
                      (s
                          (s
                              (s
                                  (s
                                      (s
                                          
(s
    (s
        (s
            (s
                (s
                    (s
                        (s
                            (s
                                (s
                                    (s
                                        
(s (s (s (s (s (s (s (s (s (s (s (s (s z))))))))))))))))))))))))))))))))
   = product_s
        (sum_s
            (sum_s
                (sum_s
                    (sum_s
                        (sum_s
                            (sum_s
                                (sum_s
                                    (sum_s
                                        
(sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))))))))))
        (product_s
            (sum_s
                (sum_s
                    (sum_s
                        (sum_s
                            (sum_s
                                (sum_s
                                    (sum_s
                                        
(sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s (sum_s sum_z))))))))))))))))
            product_z).
leq_1_instn : leq 1' max_inst_seq_num = leq_s leq_z.
leq_2_instn : leq 2' max_inst_seq_num = leq_s (leq_s leq_z).
max_inst_seq_size_8 : binary 8'
   = zero $ zero $ zero $ zero $ zero $ one' $ zero $ zero $ nil$.
represents_max_inst_seq_size_8 :
   represents max_inst_seq_size
      (zero $ zero $ zero $ zero $ zero $ one' $ zero $ zero $ nil$)
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_001)
                                addbit_101)
                            addbit_101)
                        addbit_101)
                    addbit_101)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_100)
                            addbit_100)
                        addbit_100)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_100)
                                addbit_100)
                            addbit_001)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_100)
                                        addbit_100)
                                    addbit_100)
                                addbit_000)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_100)
                                            addbit_100)
                                        addbit_001)
                                    addbit_101)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_100)
        addbit_100)
    addbit_000)
                                        addbit_100)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_100)
            addbit_100)
        addbit_000)
    addbit_001)
                                        addbit_110))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_100)
                addbit_100)
            addbit_000)
        addbit_000)
    addbit_010))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_001)
                addbit_101)
            addbit_101)
        addbit_110))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_000)
                    addbit_100)
                addbit_100)
            addbit_010))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_000)
                        addbit_100)
                    addbit_001)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_000)
                            addbit_100)
                        addbit_000)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_000)
                                addbit_001)
                            addbit_101)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_100)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_100)
                                            addbit_000)
                                        addbit_000)
                                    addbit_001)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_100)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_001)
            addbit_101)
        addbit_101)
    addbit_101)
                                        addbit_110))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_100)
            addbit_100)
        addbit_100)
    addbit_010))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_100)
                addbit_100)
            addbit_001)
        addbit_110))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_100)
                addbit_000)
            addbit_010))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_001)
                    addbit_101)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_000)
                        addbit_100)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_000)
                            addbit_001)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_000)
                                addbit_000)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_001)
                                        addbit_101)
                                    addbit_101)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_100)
                                        addbit_100)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_100)
    addbit_001)
                                        addbit_110))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_100)
        addbit_000)
    addbit_010))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_001)
            addbit_101)
        addbit_110))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_100)
            addbit_010))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_001)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_z
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil)))))))))))))))))))))))))))))))))))))))).
max_inst_seq_size_32 : binary 32'
   = zero $ zero $ zero $ zero $ zero $ one' $ zero $ zero $ 0_24.
binary_append_max_inst_seq_size_32 :
   binary_append 0_24 max_inst_seq_size_8
      ($ zero ($ zero ($ zero ($ zero ($ zero ($ one' ($ zero ($ zero 0_24))))))))
   = binary_append_cons
        (binary_append_cons
            (binary_append_cons
                (binary_append_cons
                    (binary_append_cons
                        (binary_append_cons
                            (binary_append_cons
                                (binary_append_cons binary_append_nil))))))).
is_zero_0_24 : is_zero 0_24
   = is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))))))))))))))))).
max_inst_size_8 : binary 8'
   = zero $ zero $ zero $ zero $ one' $ zero $ zero $ zero $ nil$.
represents_max_inst_size_8 :
   represents max_inst_size
      (zero $ zero $ zero $ zero $ one' $ zero $ zero $ zero $ nil$)
   = represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_001)
                            addbit_101)
                        addbit_101)
                    addbit_101)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_100)
                        addbit_100)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_100)
                                addbit_100)
                            addbit_001)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_100)
                                    addbit_100)
                                addbit_000)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_100)
                                        addbit_001)
                                    addbit_101)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_100)
    addbit_000)
                                        addbit_100)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_s
                                (add_
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                    addbit_000)
                addbit_000)
            addbit_100)
        addbit_000)
    addbit_001)
                                        addbit_110))
                                (is_one_
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                (represents_s
                                    (add_
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_100)
            addbit_000)
        addbit_000)
    addbit_010))
                                    (is_one_
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                    (represents_s
                                        
(add_
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons (addc_cons addc_nil addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_001)
                addbit_101)
            addbit_101)
        addbit_110))
                                        
(is_one_
    (is_zero_cons
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
                                        
(represents_s
    (add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons (addc_cons addc_nil addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_100)
                addbit_100)
            addbit_010))
    (is_one_
        (is_zero_cons
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil))))))))
    (represents_s
        (add_
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons (addc_cons addc_nil addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_100)
                    addbit_001)
                addbit_110))
        (is_one_
            (is_zero_cons
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons (is_zero_cons is_zero_nil))))))))
        (represents_s
            (add_
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons addc_nil addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_100)
                        addbit_000)
                    addbit_010))
            (is_one_
                (is_zero_cons
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons (is_zero_cons is_zero_nil))))))))
            (represents_s
                (add_
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons addc_nil addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_001)
                            addbit_101)
                        addbit_110))
                (is_one_
                    (is_zero_cons
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons (is_zero_cons is_zero_nil))))))))
                (represents_s
                    (add_
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_100)
                            addbit_010))
                    (is_one_
                        (is_zero_cons
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons is_zero_nil))))))))
                    (represents_s
                        (add_
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons
                                                        (addc_cons addc_nil
                                                            addbit_000)
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_001)
                                addbit_110))
                        (is_one_
                            (is_zero_cons
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons is_zero_nil))))))))
                        (represents_s
                            (add_
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons (addc_cons (addc_cons addc_nil addbit_000) addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_010))
                            (is_one_
                                (is_zero_cons
                                    (is_zero_cons
                                        (is_zero_cons
                                            (is_zero_cons
                                                (is_zero_cons
                                                    (is_zero_cons
                                                        (is_zero_cons
                                                            is_zero_nil))))))))
                            (represents_z
                                (is_zero_cons
                                    (is_zero_cons
                                        
(is_zero_cons
    (is_zero_cons
        (is_zero_cons (is_zero_cons (is_zero_cons (is_zero_cons is_zero_nil)))))))))))))))))))))))).
max_inst_size_32 : binary 32'
   = zero $ zero $ zero $ zero $ ($ one' ($ zero ($ zero ($ zero 0_24)))).
binary_append_max_inst_size_32 :
   binary_append 0_24 max_inst_size_8
      ($ zero ($ zero ($ zero ($ zero ($ one' ($ zero ($ zero ($ zero 0_24))))))))
   = binary_append_cons
        (binary_append_cons
            (binary_append_cons
                (binary_append_cons
                    (binary_append_cons
                        (binary_append_cons
                            (binary_append_cons
                                (binary_append_cons binary_append_nil))))))).
fetch_fun :
   Pi ST:state. Pi I:iinst. Pi I':iinst.
      fetch ST I -> fetch ST I' -> iinst_eq I I' -> type.
fetch_fun_ :
   fetch_fun (fetch_ Didec Dmload getmem_ geteip_)
      (fetch_ Didec' Dmload' getmem_ geteip_) Dieq
      <- mload*_fun Dmload Dmload' Dseq
      <- idecode_resp Dseq iinst_eq_ nat_eq_ string_eq_ Didec Didec''
      <- idecode_fun Didec'' Didec' Dieq X1 X2.
next_fun :
   Pi ST:state. Pi A:binary wwb. Pi A':binary wwb.
      next ST A -> next ST A' -> binary_eq A A' -> type.
next_fun_ :
   next_fun (next_ Dadd Drep Didec Dmload getmem_ geteip_)
      (next_ Dadd' Drep' Didec' Dmload' getmem_ geteip_) Daeq
      <- mload*_fun Dmload Dmload' Dseq
      <- idecode_resp Dseq iinst_eq_ nat_eq_ string_eq_ Didec Didec''
      <- idecode_fun Didec'' Didec' X2 Dneq X3
      <- represents_resp Dneq binary_eq_ Drep Drep''
      <- represents_fun2 Drep'' Drep' Dbeq
      <- add_resp binary_eq_ Dbeq binary_eq_ bit_eq_ Dadd Dadd''
      <- add_fun3 Dadd'' Dadd' X1 Daeq.
geteip_fun :
   Pi ST:state. Pi A1:binary wwb. Pi A2:binary wwb.
      geteip ST A1 -> geteip ST A2 -> binary_eq A1 A2 -> type.
geteip_fun_ : geteip_fun geteip_ geteip_ binary_eq_.
puteip_fun :
   Pi ST:state. Pi A:binary wwb. Pi ST1:state. Pi ST1':state.
      puteip ST A ST1 -> puteip ST A ST1' -> state_eq ST1 ST1' -> type.
puteip_fun_ : puteip_fun puteip_ puteip_ state_eq_.
mload_runtime_contra :
   Pi N1:nat. Pi H:memory. Pi A:binary wwb. Pi S:string N1. Pi N2:nat.
      Pi IRF:runfac N2. mload* H A S -> runtime_address H A IRF -> false -> type.
-mm :
   mload_runtime_contra (mload_miss Dml X1 X2 X3)
      (runtime_address_miss Dra X4 X5 X6) Dfalse
      <- mload_runtime_contra Dml Dra Dfalse.
-h :
   mload_runtime_contra (mload_miss Dml Dadd1 Dadd2 Drep) runtime_address_hit
      Dfalse
      <- add_assoc Dadd1 Dadd2 Dadd3 Dadd4
      <- can_zero wwb B3 Diz
      <- add_ident B5 Diz Dadd5
      <- add_commute Dadd4 Dadd4'
      <- add_fun1 Dadd4' Dadd5 X2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd3 Dadd3'
      <- add_zero_sum Dadd3' X1 Diz1 Diz
      <- represents_fun1 (represents_z Diz1) Drep Dnateq
      <- neq_resp Dnateq nat_eq_ neq_zs Dneq1
      <- neq_contradict Dneq1 Dfalse.
-hm :
   mload_runtime_contra (mload_hit X2 Dlt1 Drep1 Dadd1)
      (runtime_address_miss X3 Dadd2 Dadd3 Drep2) Dfalse
      <- add_assoc Dadd3 Dadd2 Dadd4 Dadd5
      <- add_commute Dadd5 Dadd5'
      <- add_commute Dadd1 Dadd1'
      <- add_fun1 Dadd5' Dadd1' X1 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd4 Dadd6
      <- sum_add_corr7 Drep2 Drep3 Drep1 Dsum Dadd6
      <- sum_implies_leq Dsum Dleq
      <- lt_leq_contradict Dlt1 Dleq Dfalse.
fetch_runtime_contra :
   Pi ST:state. Pi I:iinst. Pi A:binary wwb. Pi H:memory. Pi N1:nat.
      Pi IRF:runfac N1.
      fetch ST I -> geteip ST A -> getmem ST H -> runtime_address H A IRF
         -> false -> type.
- :
   fetch_runtime_contra (fetch_ X1 Dml getmem_ geteip_) geteip_ getmem_ Dra
      Dfalse
      <- mload_runtime_contra Dml Dra Dfalse.
instseq_size :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi IS:iinstseq. Pi N:nat.
      Pi S':string N2. Pi M:nat. Pi M1:nat.
      idecodeseq S IS N S' -> sizeof_iinstseq IS M -> product M max_inst_size M1
         -> leq N M1 -> sum N N2 N1 -> type.
instseq_size_nil :
   instseq_size idecodeseq_nil sizeof_iinstseq_nil product_z leq_z sum_z.
instseq_size_cons :
   instseq_size (idecodeseq_cons Dsum Diseq Didec) (sizeof_iinstseq_cons Dsizei)
      (product_s Dsum3 Dprod) Dleq2 Dsum6
      <- instseq_size Diseq Dsizei Dprod Dleq Dsum1
      <- inst_size Didec Dleq1 Dsum2 X1
      <- can_sum max_inst_size N8 N9 Dsum3
      <- sum_leq Dsum Dsum3 Dleq1 Dleq Dleq2
      <- sum_assoc' Dsum4 Dsum5 Dsum1 Dsum2
      <- sum_fun3 Dsum4 Dsum Dneq
      <- sum_resp Dneq nat_eq_ nat_eq_ Dsum5 Dsum6.
number_inst :
   Pi CI:corresp_info. Pi IS:iinstseq. Pi IN:inst. Pi M:nat.
      impl_inst CI IS IN -> sizeof_iinstseq IS M -> leq M max_inst_seq_num
         -> type.
number_inst_add :
   number_inst (impl_add X1 X2 X3 X4) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_addptr :
   number_inst (impl_addptr X1 X2 X3) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_addsptr :
   number_inst (impl_addsptr X1 X2 X3 X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil) leq_1_instn.
number_inst_and :
   number_inst (impl_and X1 X2 X3 X4) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_bz :
   number_inst (impl_bz X1) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_call :
   number_inst (impl_call X1) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_cmp :
   number_inst (impl_cmp X1 X2 X3) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_cmpjcc :
   number_inst (impl_cmpjcc X1 X2 X3 X4 X5 X6)
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil))
      leq_2_instn.
number_inst_fload :
   number_inst (impl_fload X1) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_fnop :
   number_inst impl_fnop (sizeof_iinstseq_cons sizeof_iinstseq_nil) leq_1_instn.
number_inst_fstore :
   number_inst (impl_fstore X1) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_fstflags :
   number_inst impl_fstflags (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_halt :
   number_inst impl_halt (sizeof_iinstseq_cons sizeof_iinstseq_nil) leq_1_instn.
number_inst_jcc :
   number_inst (impl_jcc X1 X2) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_jump :
   number_inst (impl_jump X1) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_mov :
   number_inst (impl_mov X1 X2) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_movsx :
   number_inst (impl_movsx X1 X2 X3 X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil) leq_1_instn.
number_inst_movzx :
   number_inst (impl_movzx X1 X2 X3 X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil) leq_1_instn.
number_inst_nop :
   number_inst impl_nop (sizeof_iinstseq_cons sizeof_iinstseq_nil) leq_1_instn.
number_inst_or :
   number_inst (impl_or X1 X2 X3 X4) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_pop :
   number_inst (impl_pop X1) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_push :
   number_inst (impl_push X1) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_pushrel :
   number_inst (impl_push_rel X1 X2 X3 X4)
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil))
      leq_2_instn.
number_inst_ret :
   number_inst impl_ret (sizeof_iinstseq_cons sizeof_iinstseq_nil) leq_1_instn.
number_inst_rol :
   number_inst (impl_rol X1 X2 X3) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_rcl :
   number_inst (impl_rcl X1 X2 X3) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_ror :
   number_inst (impl_ror X1 X2 X3) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_rcr :
   number_inst (impl_rcr X1 X2 X3) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_shl :
   number_inst (impl_shl X1 X2 X3 X4) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_shr :
   number_inst (impl_shr X1 X2 X3 X4) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_sar :
   number_inst (impl_sar X1 X2 X3 X4) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_salloc :
   number_inst (impl_salloc X1 X2 X3 X4 X5)
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil))
      leq_2_instn.
number_inst_sfree :
   number_inst (impl_sfree X1 X2 X3) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_sub :
   number_inst (impl_sub X1 X2 X3 X4) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_subptr :
   number_inst (impl_subptr X1 X2 X3) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_xor :
   number_inst (impl_xor X1 X2 X3 X4) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      leq_1_instn.
number_inst_runtime :
   number_inst (impl_runtime X1 X2 X3 X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil) leq_1_instn.
impl_inst_nonnull :
   Pi CI:corresp_info. Pi IS:iinstseq. Pi IN:inst. Pi N:nat. Pi IS1:iinst.
      Pi IN1:iinstseq.
      impl_inst CI IS IN -> iinstseq_eq IS (icodecons N IS1 IN1) -> type.
- : impl_inst_nonnull (impl_add X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_addptr X1 X2 X3) iinstseq_eq_.
- : impl_inst_nonnull (impl_addsptr X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_and X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_bz X1) iinstseq_eq_.
- : impl_inst_nonnull (impl_call X1) iinstseq_eq_.
- : impl_inst_nonnull (impl_cmp X1 X2 X3) iinstseq_eq_.
- : impl_inst_nonnull (impl_cmpjcc X1 X2 X3 X4 X5 X6) iinstseq_eq_.
- : impl_inst_nonnull (impl_fload X1) iinstseq_eq_.
- : impl_inst_nonnull impl_fnop iinstseq_eq_.
- : impl_inst_nonnull (impl_fstore X1) iinstseq_eq_.
- : impl_inst_nonnull impl_fstflags iinstseq_eq_.
- : impl_inst_nonnull impl_halt iinstseq_eq_.
- : impl_inst_nonnull (impl_jcc X1 X2) iinstseq_eq_.
- : impl_inst_nonnull (impl_jump X1) iinstseq_eq_.
- : impl_inst_nonnull (impl_mov X1 X2) iinstseq_eq_.
- : impl_inst_nonnull (impl_movsx X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_movzx X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull impl_nop iinstseq_eq_.
- : impl_inst_nonnull (impl_or X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_pop X1) iinstseq_eq_.
- : impl_inst_nonnull (impl_push X1) iinstseq_eq_.
- : impl_inst_nonnull (impl_push_rel X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull impl_ret iinstseq_eq_.
- : impl_inst_nonnull (impl_rol X1 X2 X3) iinstseq_eq_.
- : impl_inst_nonnull (impl_rcl X1 X2 X3) iinstseq_eq_.
- : impl_inst_nonnull (impl_ror X1 X2 X3) iinstseq_eq_.
- : impl_inst_nonnull (impl_rcr X1 X2 X3) iinstseq_eq_.
- : impl_inst_nonnull (impl_shl X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_shr X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_sar X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_salloc X1 X2 X3 X4 X5) iinstseq_eq_.
- : impl_inst_nonnull (impl_sfree X1 X2 X3) iinstseq_eq_.
- : impl_inst_nonnull (impl_sub X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_subptr X1 X2 X3) iinstseq_eq_.
- : impl_inst_nonnull (impl_xor X1 X2 X3 X4) iinstseq_eq_.
- : impl_inst_nonnull (impl_runtime X1 X2 X3 X4) iinstseq_eq_.
cant_decode_push_pcrel :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi B1:binary wwb. Pi N3:nat.
      Pi S1:string N2.
      idecode S (ii_push (oper_pcrel B1)) N3 S1 -> false -> type.
cant_decodeseq_push_pcrel :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi N3:nat. Pi B1:binary wwb.
      Pi IS1:iinstseq. Pi N4:nat. Pi S1:string N2.
      idecodeseq S (icodecons N3 (ii_push (oper_pcrel B1)) IS1) N4 S1 -> false
         -> type.
- :
   cant_decodeseq_push_pcrel (idecodeseq_cons X1 X2 Didec) Dfalse
      <- cant_decode_push_pcrel Didec Dfalse.
impl_inst_length_fun| :
   Pi M:nat.
      false
         -> Pi IS1:iinstseq. Pi IS2:iinstseq.
                sizeof_iinstseq IS1 M -> sizeof_iinstseq IS2 M -> type.
impl_inst_length_fun :
   Pi N1:nat. Pi N2:nat. Pi S:string N1. Pi IS1:iinstseq. Pi N3:nat.
      Pi S1:string N2. Pi N4:nat. Pi IS2:iinstseq. Pi N5:nat. Pi S2:string N4.
      Pi CI:corresp_info. Pi IN:inst. Pi M:nat.
      idecodeseq S IS1 N3 S1 -> idecodeseq S IS2 N5 S2 -> impl_inst CI IS1 IN
         -> impl_inst CI IS2 IN -> sizeof_iinstseq IS1 M
         -> sizeof_iinstseq IS2 M -> type.
impl_inst_length_fun_add :
   impl_inst_length_fun X1 X2 (impl_add X3 X4 X5 X6) (impl_add X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_addptr :
   impl_inst_length_fun X1 X2 (impl_addptr X3 X4 X5) (impl_addptr X6 X7 X8)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_and :
   impl_inst_length_fun X1 X2 (impl_and X3 X4 X5 X6) (impl_and X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_addsptr :
   impl_inst_length_fun X1 X2 (impl_addsptr X3 X4 X5 X6)
      (impl_addsptr X7 X8 X9 X10) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_bz :
   impl_inst_length_fun X1 X2 (impl_bz X3) (impl_bz X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_call :
   impl_inst_length_fun X1 X2 (impl_call X3) (impl_call X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_cmp :
   impl_inst_length_fun X1 X2 (impl_cmp X3 X4 X5) (impl_cmp X6 X7 X8)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_cmpjcc :
   impl_inst_length_fun X1 X2 (impl_cmpjcc X3 X4 X5 X6 X7 X8)
      (impl_cmpjcc X9 X10 X11 X12 X13 X14)
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil))
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil)).
impl_inst_length_fun_fload :
   impl_inst_length_fun X1 X2 (impl_fload X3) (impl_fload X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_fnop :
   impl_inst_length_fun X1 X2 impl_fnop impl_fnop
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_fstore :
   impl_inst_length_fun X1 X2 (impl_fstore X3) (impl_fstore X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_fstflags :
   impl_inst_length_fun X1 X2 impl_fstflags impl_fstflags
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_halt :
   impl_inst_length_fun X1 X2 impl_halt impl_halt
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_jcc :
   impl_inst_length_fun X1 X2 (impl_jcc X3 X4) (impl_jcc X5 X6)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_jump :
   impl_inst_length_fun X1 X2 (impl_jump X3) (impl_jump X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_mov :
   impl_inst_length_fun X1 X2 (impl_mov X3 X4) (impl_mov X5 X6)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_movsx :
   impl_inst_length_fun X1 X2 (impl_movsx X3 X4 X5 X6) (impl_movsx X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_movzx :
   impl_inst_length_fun X1 X2 (impl_movzx X3 X4 X5 X6) (impl_movzx X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_nop :
   impl_inst_length_fun X1 X2 impl_nop impl_nop
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_add :
   impl_inst_length_fun X1 X2 (impl_or X3 X4 X5 X6) (impl_or X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_pop :
   impl_inst_length_fun X1 X2 (impl_pop X3) (impl_pop X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_push :
   impl_inst_length_fun X1 X2 (impl_push X3) (impl_push X4)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_pushrel :
   impl_inst_length_fun X1 X2 (impl_push_rel X3 X4 X5 X6)
      (impl_push_rel X7 X8 X9 X10)
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil))
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil)).
impl_inst_length_fun_ret :
   impl_inst_length_fun X1 X2 impl_ret impl_ret
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_rol :
   impl_inst_length_fun X1 X2 (impl_rol X3 X4 X5) (impl_rol X6 X7 X8)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_rcl :
   impl_inst_length_fun X1 X2 (impl_rcl X3 X4 X5) (impl_rcl X6 X7 X8)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_ror :
   impl_inst_length_fun X1 X2 (impl_ror X3 X4 X5) (impl_ror X6 X7 X8)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_rcr :
   impl_inst_length_fun X1 X2 (impl_rcr X3 X4 X5) (impl_rcr X6 X7 X8)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_shl :
   impl_inst_length_fun X1 X2 (impl_shl X3 X4 X5 X6) (impl_shl X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_shr :
   impl_inst_length_fun X1 X2 (impl_shr X3 X4 X5 X6) (impl_shr X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_sar :
   impl_inst_length_fun X1 X2 (impl_sar X3 X4 X5 X6) (impl_sar X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_runtime :
   impl_inst_length_fun X1 X2 (impl_runtime X3 X4 X5 X6)
      (impl_runtime X7 X8 X9 X10) (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_salloc :
   impl_inst_length_fun X1 X2 (impl_salloc X3 X4 X5 X6 X7)
      (impl_salloc X8 X9 X10 X11 X12)
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil))
      (sizeof_iinstseq_cons (sizeof_iinstseq_cons sizeof_iinstseq_nil)).
impl_inst_length_fun_sfree :
   impl_inst_length_fun X1 X2 (impl_sfree X3 X4 X5) (impl_sfree X6 X7 X8)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_sub :
   impl_inst_length_fun X1 X2 (impl_sub X3 X4 X5 X6) (impl_sub X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_subptr :
   impl_inst_length_fun X1 X2 (impl_subptr X3 X4 X5) (impl_subptr X6 X7 X8)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_inst_length_fun_xor :
   impl_inst_length_fun X1 X2 (impl_xor X3 X4 X5 X6) (impl_xor X7 X8 X9 X10)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil)
      (sizeof_iinstseq_cons sizeof_iinstseq_nil).
impl_atom_instruct :
   Pi N1:nat. Pi CI:corresp_info. Pi S:string N1. Pi V:val. Pi V1:val.
      Pi V2:val. Pi IN:inst. Pi N:nat. Pi S1:string N. Pi N2:nat. Pi I:iinstseq.
      Pi S2:string N2. Pi S':string N.
      impl_val CI S V -> append V1 V2 V -> atomval V1 (instruct IN N S1) 0'
         -> idecodeseq S I N S2 -> impl_inst CI I IN -> leq N max_inst_seq_size
         -> index N S S' S2 -> impl_val CI S' V1 -> impl_val CI S2 V2 -> type.
impl_atom_instruct_ :
   impl_atom_instruct Dival Dapp Datomval Didecode1 Diinst Dleq Dindex Dival'
      Dival1
      <- can_index' Dival Dapp Dindex' Dival'' Dival1
      <- atom_size asize_instruct Datomval Dsize
      <- str_val_size_corr' S6 Dival'' Dsize Dneq
      <- string_resp Dneq S6 S3 Dseq
      <- index_resp Dneq string_eq_ Dseq string_eq_ Dindex' Dindex
      <- impl_val_resp Dseq val_eq_ Dival'' Dival'
      <- impl_atomval_instruct Dival' Datomval Didecode Diinst Dind
      <- index_z_fun Dind X3 Dseq1
      <- string_eq_symm Dseq1 Dseq2
      <- idecodeseq_resp Dseq2 iinstseq_eq_ nat_eq_ string_eq_ Didecode
            Didecode''
      <- instseq_size Didecode Dsizeis Dprod Dleq1 X2
      <- number_inst Diinst Dsizeis Dleq2
      <- prod_leq Dprod Dprod_max_inst_seq Dleq2 Dleq3
      <- leq_trans Dleq1 Dleq3 Dleq
      <- sum_commute sum_z Dsumid
      <- idecodeseq_index Didecode'' Dindex Dsumid Didecode' Dindex1
      <- index_z_fun Dindex1 X1 Dseq3
      <- string_eq_symm Dseq3 Dseq4
      <- idecodeseq_resp string_eq_ iinstseq_eq_ nat_eq_ Dseq4 Didecode'
            Didecode1.
nextseq : state -> iinstseq -> binary wwb -> type.
nextseq_ :
   nextseq ST IS A2
      <- geteip ST A1
      <- getmem ST H
      <- segment_of H A1 SEG
      <- impl_seg SEG SEG1
      <- mload* H A1 S
      <- idecodeseq S IS N S1
      <- represents N B
      <- add A1 B A2 zero.
decompose_nextseq_1 :
   Pi ST:state. Pi N:nat. Pi I:iinst. Pi A3:binary wwb.
      nextseq ST (icodecons N I icodenil) A3 -> fetch ST I -> next ST A3 -> type.
- :
   decompose_nextseq_1
      (nextseq_ Dadd Drep (idecodeseq_cons Dsum idecodeseq_nil Didec) Dml X1 X2
          getmem_ geteip_)
      (fetch_ Didec Dml getmem_ geteip_)
      (next_ Dadd Drep1 Didec Dml getmem_ geteip_)
      <- sum_ident N2 Dsum1
      <- sum_fun3 Dsum Dsum1 Dnateq1
      <- represents_resp Dnateq1 binary_eq_ Drep Drep1.
decompose_nextseq_2 :
   Pi CI:corresp_info. Pi ST:state. Pi M:machine. Pi N:nat. Pi I1:iinst.
      Pi N':nat. Pi I2:iinst. Pi A3:binary wwb. Pi A1:binary wwb. Pi H:memory.
      Pi N1:nat. Pi S:string N1. Pi N2:nat. Pi S1:string N2. Pi B1:binary wwb.
      Pi A2:binary wwb. Pi SEG:segment. Pi SEG1:seg. Pi PC:pc. Pi ST1:state.
      impl_machine CI ST M
         -> nextseq ST (icodecons N I1 (icodecons N' I2 icodenil)) A3
         -> fetch ST I1 -> geteip ST A1 -> getmem ST H -> mload* H A1 S
         -> idecode S I1 N S1 -> represents N B1 -> add A1 B1 A2 zero
         -> segment_of H A2 SEG -> impl_seg SEG SEG1 -> next ST A2
         -> impl_pc CI A2 PC -> puteip ST A2 ST1 -> fetch ST1 I2 -> next ST1 A3
         -> type.
- :
   decompose_nextseq_2 Dimach
      (nextseq_ Dadd Drep
          (idecodeseq_cons Dsum1 (idecodeseq_cons Dsum2 idecodeseq_nil Didec2)
              Didec1)
          Dml Diseg Dsegof getmem_ geteip_)
      (fetch_ Didec1 Dml getmem_ geteip_) geteip_ getmem_ Dml Didec1 Drep1
      Dadd2' Dsegof1 Diseg (next_ Dadd2' Drep1 Didec1 Dml getmem_ geteip_)
      (impl_pc_ DaddPC' DrepPC' DlooklocPC) puteip_
      (fetch_ Didec3 Dml1 getmem_ geteip_)
      (next_ Dadd3' Drep3 Didec3 Dml1 getmem_ geteip_)
      <- extract_implement_parts Dimach X3 X4 X5 X6 X7 Dipc X8 X9 X10
      <- extract_impl_pc Dipc DlooklocPC DrepPC DaddPC
      <- sum_add_corr9 Drep1 Drep2 Drep Dsum1 Dadd1
      <- add_commute Dadd Dadd'
      <- add_commute Dadd1 Dadd1'
      <- add_assoc Dadd1' Dadd' Dadd2 Dadd3
      <- add_commute Dadd2 Dadd2'
      <- add_assoc* DaddPC Dadd2' X1 DaddPC' X2
      <- can_represents1 B6 N9 DrepPC'
      <- idecode_index' Didec1 Dindex1 Didec1'
      <- idecode_index' Didec2 Dindex2 Didec2'
      <- idecode_nonnull Didec2' Dnateq1
      <- index_implies_sum Dindex2 Dsum3
      <- sum_resp Dnateq1 nat_eq_ nat_eq_ Dsum3 Dsum4
      <- sum_nonzero Dsum4 Dnateq2
      <- string_resp Dnateq2 S1 S2 Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dindex1 Dindex3
      <- mload*_part Dml Dindex3 Drep1 Dadd2' Dml1
      <- segment_of_part Dsegof Dml Dindex3 Drep1 Dadd2' Dsegof1
      <- idecode_resp Dseq1 iinst_eq_ nat_eq_ string_eq_ Didec2 Didec3
      <- sum_commute sum_z Dsum5
      <- sum_fun3 Dsum2 Dsum5 Dnateq3
      <- represents_resp Dnateq3 binary_eq_ Drep2 Drep3
      <- add_commute Dadd3 Dadd3'.
storeflags_preserves_nextfetch :
   Pi ST:state. Pi A1:binary wwb. Pi ST1:state. Pi I:iinst. Pi A:binary wwb.
      Pi RF:result_flags. Pi ST2:state. Pi ST3:state.
      puteip ST A1 ST1 -> fetch ST1 I -> next ST1 A
         -> store_result_flags ST RF ST2 -> puteip ST2 A1 ST3 -> fetch ST3 I
         -> next ST3 A -> type.
- :
   storeflags_preserves_nextfetch puteip_ (fetch_ Didec1 Dml1 getmem_ geteip_)
      (next_ Dadd1 Drep1 Didec2 Dml2 getmem_ geteip_)
      (store_result_flags_ putflags_) puteip_
      (fetch_ Didec1 Dml1 getmem_ geteip_)
      (next_ Dadd1 Drep1 Didec2 Dml2 getmem_ geteip_).
can_nextseq :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L1:loc. Pi R1:rfile. Pi PC:pc.
      Pi IN:inst. Pi IS:iinstseq. Pi A:binary wwb.
      impl_machine CI ST (mach H L1 R1 PC) -> decode H PC IN
         -> impl_inst CI IS IN -> nextseq ST IS A -> type.
- :
   can_nextseq Dimach (decode_ Datomval Dapp Dsep Dlook) Diinst1
      (nextseq_ Dadd7' Drep2 Didecs4 Dml4 Diseg Dsegmof4 getmem_ geteip_)
      <- extract_implement_parts Dimach Diheap X2 X3 Distack X4 Dipc Digot X5 X6
      <- extract_impl_pc Dipc DlooklocPc DrepPC DaddPC
      <- can_mload* Diheap DlooklocPc Dlook Dsegof Diseg Dml Dival Dsegmof1
      <- hlookup_size_rep Diheap DlooklocPc Dlook Dsize1 DrepSz DaddSz
      <- str_val_size_corr' S11 Dival Dsize1 Dnateq1
      <- string_resp Dnateq1 S11 Sall Dseq1
      <- mload*_resp memory_eq_ binary_eq_ Dseq1 Dml Dml1
      <- impl_val_resp Dseq1 val_eq_ Dival Dival1
      <- can_index Dival1 Dsep Dindex1 Dival2 Dival3
      <- index_implies_sum Dindex1 Dsum1
      <- sum_add_corr9 DrepPC' Drep1 DrepSz Dsum1 Dadd1
      <- represents_fun2 DrepPC' DrepPC Dbeq1
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd2
      <- add_commute Dadd2 Dadd2'
      <- add_commute DaddSz DaddSz'
      <- add_assoc Dadd2' DaddSz' Dadd3 Dadd4
      <- add_commute Dadd3 Dadd3'
      <- add_fun3 DaddPC Dadd3' Dbiteq1 Dbeq2
      <- binary_eq_symm Dbeq2 Dbeq3
      <- add_resp binary_eq_ Dbeq3 binary_eq_ bit_eq_ Dadd4 Dadd5
      <- add_resp binary_eq_ binary_eq_ binary_eq_ Dbiteq1 DaddPC DaddPC'
      <- atomval_size Datomval Dsize2 Dasize Dsumz
      <- asize_fun Dasize asize_instruct Dnateqi
      <- sum_fun3 sum_z Dsumz Dnateqs
      <- nat_eq_trans Dnateqs Dnateqi Dnateqc
      <- size_resp val_eq_ Dnateqc Dsize2 Dsize2'
      <- append_is_separate Dapp Dsize2' Dsep1
      <- can_index Dival3 Dsep1 Dindex2 Dival4 Dival5
      <- impl_atomval_instruct Dival4 Datomval Didecs1 Diinst1 Dindexz
      <- index_z_fun Dindexz Dseqz Dseqi
      <- impl_val_resp Dseqi val_eq_ Dival4 Dival4'
      <- index_resp nat_eq_ string_eq_ Dseqi string_eq_ Dindex2 Dindex2'
      <- impl_inst_nonnull Diinst1 Diiseq1
      <- idecodeseq_resp string_eq_ Diiseq1 nat_eq_ string_eq_ Didecs1 Didecs2
      <- idecodeseq_nonnull Didecs2 X1 Didec Didecs Dsumd
      <- postpone_mload_stack Dml1 Distack Dml2
      <- postpone_mload_got Dml2 Digot Dml3
      <- postpone_segment_of_stack Dsegmof1 Distack Dsegmof2
      <- postpone_segment_of_got Dsegmof2 Digot Dsegmof3
      <- idecode_index' Didec Dindex3 Didec'
      <- idecode_nonnull Didec' Dnateq2
      <- sum_resp Dnateq2 nat_eq_ nat_eq_ Dsumd Dsum2
      <- sum_nonzero Dsum2 Dnateq3
      <- index_implies_sum Dindex2' Dsum3
      <- sum_resp Dnateq3 nat_eq_ nat_eq_ Dsum3 Dsum4
      <- sum_nonzero Dsum4 Dnateq4
      <- string_resp Dnateq4 S6 S1 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex1 Dindex1'
      <- mload*_part Dml3 Dindex1' DrepPC DaddPC' Dml4
      <- segment_of_part Dsegmof3 Dml3 Dindex1' DrepPC DaddPC' Dsegmof4
      <- index_implies_sum Dindex3 Dsum5
      <- idecode_index Didec Dindex2' Dsum5 Didec1 Dindex4
      <- idecode_resp Dseq2 iinst_eq_ nat_eq_ string_eq_ Didec1 Didec2
      <- sum_fun2 Dsumd Dsum5 Dnateq5
      <- sum_ident Ninst2 Dsum6
      <- sum_resp nat_eq_ nat_eq_ Dnateq5 Dsum6 Dsum7
      <- idecodeseq_index Didecs Dindex4 Dsum7 Didecs3 Dindex5
      <- sum_add_corr9 Drep2 Drep3 Drep1 Dsum3 Dadd6
      <- add_commute Dadd6 Dadd6'
      <- add_assoc Dadd6' Dadd5 Dadd7 Dadd8
      <- add_commute Dadd7 Dadd7'
      <- iinstseq_eq_symm Diiseq1 Diiseq2
      <- idecodeseq_resp string_eq_ Diiseq2 nat_eq_ string_eq_
            (idecodeseq_cons Dsumd Didecs3 Didec2) Didecs4.
puteip_impl :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi Lalloc:loc. Pi R:rfile.
      Pi PC1:pc. Pi Aeip:binary wwb. Pi L:loc. Pi N:nat. Pi ST':state.
      impl_machine CI ST (mach H Lalloc R PC1) -> impl_pc CI Aeip (pc_ L N)
         -> puteip ST Aeip ST'
         -> impl_machine CI ST' (mach H Lalloc R (pc_ L N)) -> type.
- :
   puteip_impl
      (impl_ Dicv Dorder Digot Dipc Diconds Distack Dimp Dirfile Diheap) Dipc1
      puteip_
      (impl_ Dicv Dorder Digot Dipc1 Diconds Distack Dimp Dirfile Diheap).
advance_nextseq_corr :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi Lalloc:loc. Pi R:rfile.
      Pi L:loc. Pi N:nat. Pi V:val. Pi V1:val. Pi V':val. Pi V2:val. Pi V3:val.
      Pi IN:inst. Pi M:nat. Pi S:string M. Pi N':nat. Pi IS:iinstseq.
      Pi A:binary wwb.
      impl_machine CI ST (mach H Lalloc R (pc_ L N)) -> hlookup H L V
         -> separate N V V1 V' -> append V2 V3 V'
         -> atomval V2 (instruct IN M S) 0' -> sum M N N' -> impl_inst CI IS IN
         -> nextseq ST IS A -> impl_pc CI A (pc_ L N') -> type.
- :
   advance_nextseq_corr Dimach Dlook Dsep Dapp Datomval Dsumpc Diinstd
      (nextseq_ Daddd Drepd Didecsd Dmld X12 X13 getmem_ geteip_)
      (impl_pc_ Dadd14 Drep5 DlooklocPc)
      <- extract_implement_parts Dimach Diheap X7 X8 Distack X9 Dipc Digot X10
            X11
      <- extract_impl_pc Dipc DlooklocPc DrepPCo DaddPCo
      <- can_mload* Diheap DlooklocPc Dlook X4 X5 Dml Dival X6
      <- hlookup_size_rep Diheap DlooklocPc Dlook Dsize1 DrepSz DaddSz
      <- str_val_size_corr' S14 Dival Dsize1 Dnateq1
      <- string_resp Dnateq1 S14 Sall Dseq1
      <- mload*_resp memory_eq_ binary_eq_ Dseq1 Dml Dml1
      <- impl_val_resp Dseq1 val_eq_ Dival Dival1
      <- can_index Dival1 Dsep Dindex1 Dival2 Dival3
      <- index_implies_sum Dindex1 Dsum1
      <- sum_add_corr9 DrepPC' Drep1 DrepSz Dsum1 Dadd1
      <- represents_fun2 DrepPC' DrepPCo Dbeq1
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd2
      <- add_commute Dadd2 Dadd2'
      <- add_commute DaddSz DaddSz'
      <- add_assoc Dadd2' DaddSz' Dadd3 Dadd4
      <- add_commute Dadd3 Dadd3'
      <- add_fun3 DaddPCo Dadd3' Dbiteq1 Dbeq2
      <- binary_eq_symm Dbeq2 Dbeq3
      <- add_resp binary_eq_ Dbeq3 binary_eq_ bit_eq_ Dadd4 Dadd5
      <- add_resp binary_eq_ binary_eq_ binary_eq_ Dbiteq1 DaddPCo DaddPCo'
      <- atomval_size Datomval Dsize2 Dasize Dsumz
      <- asize_fun Dasize asize_instruct Dnateqi
      <- sum_fun3 sum_z Dsumz Dnateqs
      <- nat_eq_trans Dnateqs Dnateqi Dnateqc
      <- size_resp val_eq_ Dnateqc Dsize2 Dsize2'
      <- append_is_separate Dapp Dsize2' Dsep1
      <- can_index Dival3 Dsep1 Dindex2 Dival4 Dival5
      <- impl_atomval_instruct Dival4 Datomval Didecs1 Diinst1 Dindexz
      <- index_z_fun Dindexz Dseqz Dseqi
      <- impl_val_resp Dseqi val_eq_ Dival4 Dival4'
      <- index_resp nat_eq_ string_eq_ Dseqi string_eq_ Dindex2 Dindex2'
      <- impl_inst_nonnull Diinst1 Diiseq1
      <- idecodeseq_resp string_eq_ Diiseq1 nat_eq_ string_eq_ Didecs1 Didecs2
      <- idecodeseq_nonnull Didecs2 X3 Didec Didecs Dsumd
      <- postpone_mload_stack Dml1 Distack Dml2
      <- postpone_mload_got Dml2 Digot Dml3
      <- idecode_index' Didec Dindex3 Didec'
      <- idecode_nonnull Didec' Dnateq2
      <- sum_resp Dnateq2 nat_eq_ nat_eq_ Dsumd Dsum2
      <- sum_nonzero Dsum2 Dnateq3
      <- index_implies_sum Dindex2' Dsum3
      <- sum_resp Dnateq3 nat_eq_ nat_eq_ Dsum3 Dsum4
      <- sum_nonzero Dsum4 Dnateq4
      <- string_resp Dnateq4 S8 S4 Dseq2
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq2 Dindex1 Dindex1'
      <- mload*_part Dml3 Dindex1' DrepPCo DaddPCo' Dml4
      <- index_implies_sum Dindex3 Dsum5
      <- idecode_index Didec Dindex2' Dsum5 Didec1 Dindex4
      <- idecode_resp Dseq2 iinst_eq_ nat_eq_ string_eq_ Didec1 Didec2
      <- sum_fun2 Dsumd Dsum5 Dnateq5
      <- sum_ident Ninst2 Dsum6
      <- sum_resp nat_eq_ nat_eq_ Dnateq5 Dsum6 Dsum7
      <- idecodeseq_index Didecs Dindex4 Dsum7 Didecs3 Dindex5
      <- sum_add_corr9 Drep2 Drep3 Drep1 Dsum3 Dadd6
      <- add_commute Dadd6 Dadd6'
      <- add_assoc Dadd6' Dadd5 Dadd7 Dadd8
      <- add_commute Dadd7 Dadd7'
      <- mload*_fun Dml4 Dmld Dseq3
      <- iinstseq_eq_symm Diiseq1 Diiseq2
      <- idecodeseq_resp Dseq3 Diiseq2 nat_eq_ string_eq_
            (idecodeseq_cons Dsumd Didecs3 Didec2) Didecs4
      <- impl_inst_length_fun Didecs4 Didecsd Diinst1 Diinstd Dsizeof1 Dsizeof2
      <- idecodeseq_fun Didecs4 Didecsd Dsizeof1 Dsizeof2 nat_eq_ Diiseq Dnateq6
            Dseq4
      <- represents_resp Dnateq6 binary_eq_ Drep2 Drep4
      <- represents_fun2 Drep4 Drepd Dbeq4
      <- add_resp binary_eq_ Dbeq4 binary_eq_ bit_eq_ Dadd7' Dadd9
      <- add_fun3 Dadd9 Daddd X2 Dbeq5
      <- sum_commute Dsum3 Dsum3'
      <- sum_commute Dsum1 Dsum1'
      <- sum_assoc Dsum3' Dsum1' Dsum8 Dsum9
      <- sum_fun3 Dsum8 Dsumpc Dnateq7
      <- sum_resp nat_eq_ Dnateq7 nat_eq_ Dsum9 Dsum10
      <- sum_commute Dsum10 Dsum10'
      <- sum_implies_leq Dsum10' Dleq1
      <- can_represents Dleq1 DrepSz Drep5
      <- sum_add_corr Drep2 DrepPCo Drep5 Dsumpc Dadd10
      <- add_resp binary_eq_ binary_eq_ Dbeq3 bit_eq_ Dadd3' Dadd11
      <- add_assoc Dadd11 Dadd7' Dadd12 Dadd13
      <- add_commute Dadd12 Dadd12'
      <- add_fun3 Dadd12' Dadd10 X1 Dbeq6
      <- add_resp binary_eq_ Dbeq6 Dbeq5 bit_eq_ Dadd13 Dadd14.
advance_next :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi Lalloc:loc. Pi R:rfile.
      Pi PC:pc. Pi IN:inst. Pi IS:iinstseq. Pi PC':pc. Pi A:binary wwb.
      Pi ST':state. Pi H':heap. Pi Lalloc':loc. Pi R':rfile. Pi PC1:pc.
      Pi ST'':state.
      impl_machine CI ST (mach H Lalloc R PC) -> decode H PC IN
         -> impl_inst CI IS IN -> advance H PC PC' -> nextseq ST IS A
         -> impl_machine CI ST' (mach H' Lalloc' R' PC1) -> puteip ST' A ST''
         -> implements ST'' (mach H' Lalloc' R' PC') -> type.
- :
   advance_next Dimach_orig Ddecode Diinst
      (advance_ Dsum Datomval Dapp Dsep Dhlookup) Dnexts Dimach Dp
      (implements_ Dimach')
      <- decode_fun Ddecode (decode_ Datomval Dapp Dsep Dhlookup) Dieq
      <- impl_inst_resp iinstseq_eq_ Dieq Diinst Diinst1
      <- advance_nextseq_corr Dimach_orig Dhlookup Dsep Dapp Datomval Dsum
            Diinst1 Dnexts Dipc
      <- puteip_impl Dimach Dipc Dp Dimach'.
advance_next_implval :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi Lalloc:loc. Pi R:rfile.
      Pi PC:pc. Pi IN:inst. Pi IS:iinstseq. Pi L:loc. Pi N:nat. Pi A:binary wwb.
      Pi V:val. Pi W:string ww.
      impl_machine CI ST (mach H Lalloc R PC) -> decode H PC IN
         -> impl_inst CI IS IN -> advance H PC (pc_ L N) -> nextseq ST IS A
         -> atomval V (pointer L N) 0' -> implode_word W A -> impl_val CI W V
         -> type.
- :
   advance_next_implval Dimach Ddecode Diinst
      (advance_ Dsum Datomval Dapp Dsep Dhlookup) Dnexts DatomvalPC Dimplode
      Divalout
      <- decode_fun Ddecode (decode_ Datomval Dapp Dsep Dhlookup) Dieq
      <- impl_inst_resp iinstseq_eq_ Dieq Diinst Diinst1
      <- advance_nextseq_corr Dimach Dhlookup Dsep Dapp Datomval Dsum Diinst1
            Dnexts Dipc
      <- extract_impl_pc Dipc Dlookloc DrepPC DaddPC
      <- atomval_size DatomvalPC Dsize Dasize sum_z
      <- binary_word_to_word B4 Dimplode
      <- impl_val_addr Dlookloc DatomvalPC Dasize Dsize DrepPC DaddPC Dimplode
            N2 B6 IM1 Divalout.
impl_jump_pc :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi S:string ww. Pi L':loc. Pi N:nat. Pi A:binary wwb. Pi ST1:state.
      impl_machine CI ST (mach H L R PC) -> impl_aval CI S (pointer L' N)
         -> implode_word S A -> puteip ST A ST1
         -> implements ST1 (mach H L R (pc_ L' N)) -> type.
impl_jump_pc_good :
   impl_jump_pc Dimach (impl_aval_pointer Dimp Dadd Drep Dlook) Dimp Dp
      (implements_ Dimach1)
      <- puteip_impl Dimach (impl_pc_ Dadd Drep Dlook) Dp Dimach1.
impl_jump_pc_badptr :
   impl_jump_pc Dimach
      (impl_aval_pointer_bad Dimp Dadd Drep1 Dmod Dsum Drep2 Dino Dlook) Dimp
      puteip_ (implements_badpc Dlt Drep2 Dino Diheap)
      <- extract_implement_parts Dimach Diheap X1 X2 X3 X4 X5 X6 X7 X8
      <- sum_implies_lt Dsum Dlt.
instrf_advance :
   Pi H:heap. Pi PC:pc. Pi IN:inst. Pi Nirf:nat. Pi IRF:runfac Nirf. Pi REG:reg.
      Pi L:loc. Pi R:rfile. Pi M:machine. Pi Lpc:loc. Pi Npc:nat. Pi Vgot:val.
      decode H PC IN -> impl_instrf Nirf IRF REG IN
         -> perform (mach H L R PC) IN M -> advance H PC (pc_ Lpc Npc)
         -> resolve H R PC (rco REG) Vgot -> atomval Vgot gotpointer 0' -> type.
- :
   instrf_advance Ddecode impl_malloc
      (step_malloc Dadvance X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 Datomval Dresolve)
      Dadvance Dresolve Datomval.
- :
   instrf_advance Ddecode impl_mallocarr
      (step_mallocarr Dadvance X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14
          Datomval Dresolve)
      Dadvance Dresolve Datomval.
fetch_next_rfile_indep :
   Pi H:memory. Pi R:regs numregs. Pi FR:flags. Pi Aeip:binary wwb.
      Pi OR:oracle. Pi I:iinst. Pi Aneip:binary wwb.
      fetch (state_ H R FR Aeip OR) I -> next (state_ H R FR Aeip OR) Aneip
         -> Pi R':regs numregs. Pi FR':flags.
                fetch (state_ H R' FR' Aeip OR) I
                   -> next (state_ H R' FR' Aeip OR) Aneip -> type.
- :
   fetch_next_rfile_indep (fetch_ Didec Dml getmem_ geteip_)
      (next_ Dadd Drep Didec1 Dml1 getmem_ geteip_) R FR
      (fetch_ Didec Dml getmem_ geteip_)
      (next_ Dadd Drep Didec1 Dml1 getmem_ geteip_).
storeflags_preserves_fetch :
   Pi ST:state. Pi A:binary wwb. Pi ST1:state. Pi I:iinst. Pi X1:result_flags.
      Pi ST':state. Pi ST2:state.
      puteip ST A ST1 -> fetch ST1 I -> store_result_flags ST X1 ST'
         -> puteip ST' A ST2 -> fetch ST2 I -> type.
- :
   storeflags_preserves_fetch puteip_ (fetch_ Didec Dml getmem_ geteip_)
      (store_result_flags_ X1) puteip_ (fetch_ Didec Dml getmem_ geteip_).
rstore_preserves_fetch :
   Pi ST:state. Pi A:binary wwb. Pi ST1:state. Pi I:iinst. Pi N1:nat.
      Pi S1:string ww. Pi ST':state. Pi ST2:state.
      puteip ST A ST1 -> fetch ST1 I -> rstore ST N1 S1 ST' -> puteip ST' A ST2
         -> fetch ST2 I -> type.
- :
   rstore_preserves_fetch puteip_ (fetch_ Didec Dml getmem_ geteip_)
      (rstore_ putregs_ X1 getregs_) puteip_ (fetch_ Didec Dml getmem_ geteip_).
fetch_next_stack_store_indep :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi ST:state.
      Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc. Pi Hc:memory. Pi A1:binary wwb.
      Pi SEG:segment. Pi SEG1:seg. Pi ST':state. Pi I:iinst.
      Pi Aneip:binary wwb. Pi Wesp:string ww. Pi Aesp:binary wwb. Pi Nsz:nat.
      Pi Bsz:binary wwb. Pi N1:nat. Pi Anesp:binary wwb. Pi B1:binary wwb.
      Pi Wnesp:string ww. Pi ST1:state. Pi N2:nat. Pi S:string N2. Pi ST2:state.
      Pi ST'':state.
      impl_machine (corresp_info_ Nlim Astart LM IM) ST (mach H L R PC)
         -> getmem ST Hc -> segment_of Hc A1 SEG -> impl_seg SEG SEG1
         -> puteip ST A1 ST' -> fetch ST' I -> next ST' Aneip
         -> rload ST esp Wesp -> implode_word Wesp Aesp -> represents Nsz Bsz
         -> nat_eq Nsz (s N1) -> add Anesp Bsz Aesp zero
         -> add Astart B1 Anesp zero -> implode_word Wnesp Anesp
         -> rstore ST esp Wnesp ST1 -> mstore ST1 Anesp S ST2
         -> puteip ST2 A1 ST'' -> fetch ST'' I -> next ST'' Aneip -> type.
- :
   fetch_next_stack_store_indep Dimach getmem_ Dsegof Diseg puteip_
      (fetch_ Didec1 Dml1 getmem_ geteip_)
      (next_ Dadd1 Drep1 Didec2 Dml2 getmem_ geteip_) Drload1 Dimp1 Drep2 Dnateq
      Dadd2 Dadd3 Dimp2 (rstore_ putregs_ Drstore1 getregs_)
      (mstore_ putmem_ Dmstore1 getmem_) Dputeip
      (fetch_ Didec3 Dml3 Dgm1 Dgeteip)
      (next_ Dadd1 Drep1 Didec2 Dml3 Dgm1 Dgeteip)
      <- stack_store_seg_indep Dimach getmem_ Dml2 Dsegof Diseg Drload1 Dimp1
            Drep2 Dnateq Dadd2 Dadd3 Dimp2 (rstore_ putregs_ Drstore1 getregs_)
            (mstore_ putmem_ Dmstore1 getmem_) Dgm Dml3 Dsegof1
      <- getmem_implies_can_puteip Dgm Aint Dputeip Dgm1
      <- puteip_geteip Dputeip Dgeteip
      <- mload*_fun Dml1 Dml2 Dseq
      <- idecode_resp Dseq iinst_eq_ nat_eq_ string_eq_ Didec1 Didec3.
can_load :
   Pi X:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi N1:nat. Pi EA:eaddress N1. Pi O:operand. Pi V:val. Pi W:string N1.
      impl_machine X ST (mach H L R PC) -> impl_operea EA O
         -> resolve H R PC O V -> load ST EA W -> impl_val X W V -> type.
-rco :
   can_load Dimach (impl_rco Direg) (resolve_rco Drlookup) (load_reg Drload)
      Dimplval
      <- can_rload Dimach Direg Drlookup Drload Dimplval.
-rclo :
   can_load Dimach (impl_rclo (impl_bytereg_ Dleq))
      (resolve_proj Dsep1 Dsep2 (resolve_rco Drlookup))
      (load_reglow Dindex2 Drload) Dival5
      <- leq_lt_trans Dleq lt_ebx_esp Dlt
      <- can_rload Dimach (impl_reg_ Dlt) Drlookup Drload Dival1
      <- can_index Dival1 Dsep2 Dindex1 Dival2 Dival3
      <- index_z_fun Dindex1 Dseq1 Dseq2
      <- impl_val_resp Dseq2 val_eq_ Dival3 Dival4
      <- can_index Dival4 Dsep1 Dindex2 Dival5 Dival6.
-rchi :
   can_load Dimach (impl_rchi (impl_bytereg_ Dleq))
      (resolve_proj Dsep1 Dsep2 (resolve_rco Drlookup))
      (load_reghigh Dindex2 Dindex1 Drload) Dival4
      <- leq_lt_trans Dleq lt_ebx_esp Dlt
      <- can_rload Dimach (impl_reg_ Dlt) Drlookup Drload Dival1
      <- can_index Dival1 Dsep2 Dindex1 Dival2 Dival3
      <- can_index Dival3 Dsep1 Dindex2 Dival4 Dival5.
-pco :
   can_load Dimach impl_spco (resolve_spco Datomval Dsize zlookup_)
      (load_reg (rload_ Drload getregs_)) Dimplval
      <- extract_implement_parts Dimach X6 Dirfile Dimp Distack X7 X8 X9 X10 X11
      <- rload_esp Dirfile Drload
      <- extract_stack Distack Drep1 Dadd1 Dadd2 Dadd3 Drep2 Dindex Dival X1 X2
            X3 X4 X5 Dmext1 Dmext2
      <- str_val_size_corr' Sstack Dival Dsize Dneq
      <- string_resp Dneq Sstack Sstack' Dseq
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq Dindex Dindex'
      <- index_implies_sum Dindex' Dsum
      <- sum_commute Dsum Dsum'
      <- impl_val_sptr Datomval Drep2 Dsum' Dadd3 Dimp LM1 IM1 Dimplval.
-mco :
   can_load Dimach (impl_mco Drep Direg Dneq)
      (resolve_mco Dsep2 Dsep1 Dsum Dhlook Datomval (resolve_rco Drlookup))
      (load_deref_z Dml Dadd7'' Dimp Drload) Dimplval
      <- can_rload Dimach Direg Drlookup Drload Dival
      <- extract_implement_parts Dimach Diheap X3 X4 X5 X6 X7 X8 X9 X10
      <- can_lookup_loc Diheap Dhlook Dlook
      <- hlookup_size_rep Diheap Dlook Dhlook Dsize Drep2 Dadd2
      <- separate_size_leq Dsep1 Dsize Dleq1
      <- leq_implies_sum Dsum1 Dleq1
      <- sum_add_corr9 Drep3 Drep4 Drep2 Dsum1 Dadd3
      <- add_commute Dadd3 Dadd3'
      <- add_commute Dadd2 Dadd2'
      <- add_assoc Dadd3' Dadd2' Dadd4 X2
      <- add_commute Dadd4 Dadd4'
      <- sum_implies_leq Dsum Dleq
      <- can_represents Dleq Drep3 Drep1
      <- sum_add_corr Drep1 Drep Drep3 Dsum Dadd5
      <- add_commute Dadd5 Dadd5'
      <- add_assoc Dadd5' Dadd4 Dadd6 Dadd7
      <- add_commute Dadd6 Dadd6'
      <- impl_atomval Dival Datomval Daval
      <- impl_aval_good_pointer Daval Dlook Drep1 Dimp Dadd
      <- add_fun3 Dadd6' Dadd X1 Dbeq1
      <- add_commute Dadd7 Dadd7'
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd7' Dadd7''
      <- can_mload Dimach Dlook Drep3 Dadd4' Dhlook Dsep1 Dsep2 Dneq Dml
            Dimplval.
-co :
   can_load Dimach (impl_mco Drep Direg Dnateq)
      (resolve_zco Dsep3 Dsep2 Dsep1 Dsum Dsize zlookup_ Datomval
          (resolve_rco Drlookup))
      (load_deref_z Dmload1 Dadd4 Dimp Drload) Dival3
      <- can_rload Dimach Direg Drlookup Drload Dival
      <- impl_atomval Dival Datomval (impl_aval_spointer Dimp Dadd Dsum1 Drep1)
      <- extract_implement_parts Dimach X10 X11 X12 Distack X13 X14 X15 X16 X17
      <- extract_stack Distack Dreplim X2 Daddall Dadd1 Drepjunk Dindex Dival1
            X3 X4 X5 X6 X7 X8 X9
      <- str_val_size_corr' S6 Dival1 Dsize Dnateq1
      <- string_resp Dnateq1 S6 S5 Dseq
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq Dindex Dindex1
      <- index_implies_sum Dindex1 Dsum2
      <- separate_resp Dnateq val_eq_ val_eq_ val_eq_ Dsep3 Dsep3'
      <- can_sum N4 Nptr N Dsum3
      <- separate_compose Dsep1 Dsep2 Dsum3 X1 Dsep12
      <- can_sum Njunk N Nact Dsum4
      <- sum_assoc' Dsum5 Dsum6 Dsum3 Dsum4
      <- sum_assoc' Dsum7 Dsum8 Dsum Dsum2
      <- sum_fun3 Dsum7 Dsum5 Dnateq2
      <- sum_resp Dnateq2 nat_eq_ nat_eq_ Dsum8 Dsum8'
      <- sum_commute Dsum8' Dsum8''
      <- sum_fun2 Dsum8'' Dsum1 Dnateq3
      <- sum_resp Dnateq3 nat_eq_ nat_eq_ Dsum6 Dsum6'
      <- separate_is_append Dsep1 Dapp1
      <- separate_size Dsep1 Dsize1
      <- size_append''' Dsize1 Dsize2 Dsize Dapp1 Dsum
      <- separate_size_leq Dsep2 Dsize2 Dleq1
      <- sum_commute Dsum1 Dsum1'
      <- leq_reflex Nprev1 Dleq2
      <- sum_leq Dsum6' Dsum1' Dleq2 Dleq1 Dleq3
      <- can_represents Dleq3 Dreplim Drep2
      <- sum_add_corr Drep1 Drep Drep2 Dsum6' Dadd2
      <- can_represents1 Astart Nstart Drep3
      <- sum_add_corr3 Drep3 Dreplim Drepend Dsum9 Daddall
      <- leq_reflex Nstart Dleq4
      <- can_sum Nstart Nact Nload Dsum10
      <- sum_leq Dsum10 Dsum9 Dleq4 Dleq3 Dleq5
      <- can_represents Dleq5 Drepend Drepload
      <- sum_add_corr Drep3 Drep2 Drepload Dsum10 Dadd3
      <- sum_add_corr3 Drep3 Drep1 Drep4 Dsum11 Dadd
      <- can_sum Nw Nptr Nload' Dsum12
      <- sum_assoc Dsum11 Dsum12 Dsum13 Dsum14
      <- sum_fun3 Dsum13 Dsum6' Dnateq4
      <- sum_resp nat_eq_ Dnateq4 nat_eq_ Dsum14 Dsum14'
      <- sum_fun3 Dsum14' Dsum10 Dnateq5
      <- sum_resp nat_eq_ nat_eq_ Dnateq5 Dsum12 Dsum12'
      <- sum_add_corr Drep4 Drep Drepload Dsum12' Dadd4
      <- can_zload Dimach zlookup_ Dsize Dsum2 Dsep12 Dsep3' Dsum4 Drep2 Dadd3
            Dmload Dival2
      <- nat_eq_symm Dnateq Dnateq'
      <- string_resp Dnateq' S1 S2 Dseq1
      <- mload_resp state_eq_ binary_eq_ Dnateq' Dseq1 Dmload Dmload1
      <- impl_val_resp Dseq1 val_eq_ Dival2 Dival3.
-imcoz :
   can_load Dimpl (impl_imco Drep Direg2 Direg1 Dnateq)
      (resolve_imco Dsep2 Dsep1 Dsum2 Dprod Drepi Dbi (resolve_rco Drlook2)
          Dsum1 Dlook Datomval (resolve_rco Drlook1))
      (load_deref_z Dmload Dadd1 Dimp' Drload) Dival1
      <- prod_fun3 Dprod product_z Dnateq1
      <- sum_resp nat_eq_ Dnateq1 nat_eq_ Dsum2 Dsum2'
      <- sum_ident N' Dsum2''
      <- sum_fun3 Dsum2' Dsum2'' Dnateq2
      <- separate_resp Dnateq2 val_eq_ val_eq_ val_eq_ Dsep1 Dsep1'
      <- can_rload Dimpl Direg1 Drlook1 Drload Dival
      <- extract_implement_parts Dimpl Diheap X2 X3 X4 X5 X6 X7 X8 X9
      <- can_lookup_loc Diheap Dlook Dlookup
      <- hlookup_size_rep Diheap Dlookup Dlook Dsize Drepsz Daddsz
      <- separate_size_leq Dsep1 Dsize Dleq1
      <- can_represents Dleq1 Drepsz Drep2
      <- can_represents1 Bstart Nstart Drepstart
      <- sum_add_corr3 Drepstart Drepsz Drepend Dsumsz Daddsz
      <- leq_reflex Nstart Dleq2
      <- can_sum Nstart N'' Nact Dsumact
      <- sum_leq Dsumact Dsumsz Dleq2 Dleq1 Dleq3
      <- can_represents Dleq3 Drepend Drepact
      <- sum_add_corr Drepstart Drep2 Drepact Dsumact Daddact
      <- sum_commute Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq4
      <- nat_eq_symm Dnateq2 Dnateq2'
      <- leq_resp nat_eq_ Dnateq2' Dleq4 Dleq4'
      <- can_represents Dleq4' Drep2 Drep1
      <- impl_atomval Dival Datomval Daval
      <- impl_aval_good_pointer Daval Dlookup Drep1 Dimp Dadd
      <- can_sum Nstart P N4 Dsum3
      <- can_sum N4 N N5 Dsum4
      <- sum_assoc Dsum3 Dsum4 Dsum5 Dsum6
      <- sum_resp nat_eq_ nat_eq_ Dnateq2' Dsum1' Dsum1''
      <- sum_fun3 Dsum5 Dsum1'' Dnateq3
      <- sum_resp nat_eq_ Dnateq3 nat_eq_ Dsum6 Dsum6'
      <- sum_fun3 Dsum6' Dsumact Dnateq4
      <- sum_resp nat_eq_ nat_eq_ Dnateq4 Dsum4 Dsum4'
      <- sum_implies_leq Dsum4' Dleq5
      <- can_represents Dleq5 Drepact Drep3
      <- sum_add_corr Drep3 Drep Drepact Dsum4' Dadd1
      <- sum_add_corr Drepstart Drep1 Drep3 Dsum3 Dadd2
      <- add_fun3 Dadd2 Dadd X1 Dbeq1
      <- binary_eq_symm Dbeq1 Dbeq2
      <- implode_word_resp string_eq_ Dbeq2 Dimp Dimp'
      <- can_mload Dimpl Dlookup Drep2 Daddact Dlook Dsep1 Dsep2 Dnateq Dmload
            Dival1.
-imcos :
   can_load Dimpl (impl_imco Drep Direg2 Direg1 Dnateq)
      (resolve_imco Dsep2 Dsep1 Dsum2 Dprod Drepi Dbi (resolve_rco Drlook2)
          Dsum1 Dlook Datomval (resolve_rco Drlook1))
      (load_deref_s Dmload Dadd4 Dadd3 Dtimes Dimp2' Drload2 Dimp1' Drload1
          nat_eq_)
      Dival3
      <- can_rload Dimpl Direg1 Drlook1 Drload1 Dival1
      <- can_rload Dimpl Direg2 Drlook2 Drload2 Dival2
      <- str_val_size_corr S4 Dival2 Dindexsz
      <- impl_val_binary_int Dival2 Dindexsz Dbi Dseq Dimp2
      <- string_eq_symm Dseq Dseq'
      <- implode_word_resp Dseq' binary_eq_ Dimp2 Dimp2'
      <- extract_implement_parts Dimpl Diheap X2 X3 X4 X5 X6 X7 X8 X9
      <- can_lookup_loc Diheap Dlook Dlookup
      <- hlookup_size_rep Diheap Dlookup Dlook Dsize Drepsz Daddsz
      <- separate_size_leq Dsep1 Dsize Dleq1
      <- sum_commute Dsum2 Dsum2'
      <- sum_implies_leq Dsum2' Dleq2
      <- leq_trans Dleq2 Dleq1 Dleq3
      <- can_represents Dleq3 Drepsz Drep2
      <- can_times Drepi Drep2 Dprod Dtimes
      <- can_represents1 Astart Nstart Drepstart
      <- sum_commute Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq7
      <- sum_implies_leq Dsum2 Dleq8
      <- leq_trans Dleq7 Dleq8 Dleq9
      <- leq_trans Dleq9 Dleq1 Dleq10
      <- can_represents Dleq10 Drepsz Drep1
      <- can_sum Nstart P Nb1 Dsumbase
      <- can_sum Nindex' Nb1 Nb Dsum3
      <- can_sum Nb N Nact Dsum4
      <- sum_assoc Dsum3 Dsum4 Dsum5 Dsum6
      <- sum_assoc Dsumbase Dsum5 Dsumb1 Dsumb
      <- sum_fun3 Dsumb1 Dsum1' Dnateq1
      <- sum_resp nat_eq_ Dnateq1 nat_eq_ Dsumb Dsumb'
      <- sum_commute Dsum6 Dsum6'
      <- sum_assoc Dsumb' Dsum6' Dsum7 Dsum8
      <- sum_fun3 Dsum7 Dsum2 Dnateq2
      <- sum_resp nat_eq_ Dnateq2 nat_eq_ Dsum8 Dsum8'
      <- sum_add_corr3 Drepstart Drepsz Drepend Dsumsz Daddsz
      <- can_represents Dleq1 Drepsz Drep3
      <- leq_reflex Nstart Dleq4
      <- sum_leq Dsum8' Dsumsz Dleq4 Dleq1 Dleq5
      <- can_represents Dleq5 Drepend Drepact
      <- sum_add_corr Drepstart Drep3 Drepact Dsum8' Dadd1
      <- sum_implies_leq Dsum4 Dleq6
      <- can_represents Dleq6 Drepact Drep4
      <- sum_commute Dsum3 Dsum3'
      <- sum_implies_leq Dsum3' Dleq11
      <- can_represents Dleq11 Drep4 Drepbase
      <- sum_add_corr Drep2 Drepbase Drep4 Dsum3 Dadd2
      <- add_commute Dadd2 Dadd3
      <- sum_add_corr Drep4 Drep Drepact Dsum4 Dadd4
      <- impl_atomval Dival1 Datomval Daval
      <- impl_aval_good_pointer Daval Dlookup Drep1 Dimp1 Dadd5
      <- sum_add_corr Drepstart Drep1 Drepbase Dsumbase Dadd6
      <- add_fun3 Dadd5 Dadd6 X1 Dbeq1
      <- implode_word_resp string_eq_ Dbeq1 Dimp1 Dimp1'
      <- can_mload Dimpl Dlookup Drep3 Dadd1 Dlook Dsep1 Dsep2 Dnateq Dmload
            Dival3.
can_load_adjusted :
   Pi X:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi N1:nat. Pi EA:eaddress N1. Pi O:operand. Pi V:val. Pi A1:binary wwb.
      Pi N:nat. Pi B:binary wwb. Pi A:binary wwb. Pi B1:bit. Pi ST2:state.
      Pi W:string N1.
      impl_machine X ST (mach H L R PC) -> impl_operea EA O
         -> resolve H R PC O V -> geteip ST A1 -> represents N B
         -> add A1 B A B1 -> puteip ST A ST2 -> load ST2 EA W -> impl_val X W V
         -> type.
-rco :
   can_load_adjusted Dimach (impl_rco Direg) (resolve_rco (rlookup_ Drlook))
      geteip_ Drep Dadd Dputeip Dload Dival
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- can_impl_pc Dipc B2 Dipc1
      <- puteip_impl Dimach Dipc1 Dputeip1 Dimach1
      <- puteip_fun Dputeip1 Dputeip Dsteq1
      <- impl_machine_resp Dsteq1 machine_eq_ Dimach1 Dimach2
      <- can_load Dimach2 (impl_rco Direg) (resolve_rco (rlookup_ Drlook)) Dload
            Dival.
-rclo :
   can_load_adjusted Dimach (impl_rclo Direg)
      (resolve_proj Dsep2 Dsep1 (resolve_rco (rlookup_ Drlook))) geteip_ Drep
      Dadd Dputeip Dload Dival
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- can_impl_pc Dipc B2 Dipc1
      <- puteip_impl Dimach Dipc1 Dputeip1 Dimach1
      <- puteip_fun Dputeip1 Dputeip Dsteq1
      <- impl_machine_resp Dsteq1 machine_eq_ Dimach1 Dimach2
      <- can_load Dimach2 (impl_rclo Direg)
            (resolve_proj Dsep2 Dsep1 (resolve_rco (rlookup_ Drlook))) Dload
            Dival.
-rchi :
   can_load_adjusted Dimach (impl_rchi Direg)
      (resolve_proj Dsep2 Dsep1 (resolve_rco (rlookup_ Drlook))) geteip_ Drep
      Dadd Dputeip Dload Dival
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- can_impl_pc Dipc B2 Dipc1
      <- puteip_impl Dimach Dipc1 Dputeip1 Dimach1
      <- puteip_fun Dputeip1 Dputeip Dsteq1
      <- impl_machine_resp Dsteq1 machine_eq_ Dimach1 Dimach2
      <- can_load Dimach2 (impl_rchi Direg)
            (resolve_proj Dsep2 Dsep1 (resolve_rco (rlookup_ Drlook))) Dload
            Dival.
-pco :
   can_load_adjusted Dimach impl_spco (resolve_spco Daval Dsize zlookup_)
      geteip_ Drep Dadd Dputeip Dload Dival
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- can_impl_pc Dipc B2 Dipc1
      <- puteip_impl Dimach Dipc1 Dputeip1 Dimach1
      <- puteip_fun Dputeip1 Dputeip Dsteq1
      <- impl_machine_resp Dsteq1 machine_eq_ Dimach1 Dimach2
      <- can_load Dimach2 impl_spco (resolve_spco Daval Dsize zlookup_) Dload
            Dival.
-mco :
   can_load_adjusted Dimach (impl_mco Drep Direg Dnateq)
      (resolve_mco Dsep2 Dsep1 Dsum Dhlook Daval (resolve_rco (rlookup_ Drlook)))
      geteip_ Drep1 Dadd Dputeip Dload Dival
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- can_impl_pc Dipc B3 Dipc1
      <- puteip_impl Dimach Dipc1 Dputeip1 Dimach1
      <- puteip_fun Dputeip1 Dputeip Dsteq1
      <- impl_machine_resp Dsteq1 machine_eq_ Dimach1 Dimach2
      <- can_load Dimach2 (impl_mco Drep Direg Dnateq)
            (resolve_mco Dsep2 Dsep1 Dsum Dhlook Daval
                (resolve_rco (rlookup_ Drlook))) Dload Dival.
-co :
   can_load_adjusted Dimach (impl_mco Drep Direg Dnateq)
      (resolve_zco Dsep3 Dsep2 Dsep1 Dsum Dsize zlookup_ Daval
          (resolve_rco (rlookup_ Drlook))) geteip_ Drep1
      Dadd Dputeip Dload Dival
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- can_impl_pc Dipc B3 Dipc1
      <- puteip_impl Dimach Dipc1 Dputeip1 Dimach1
      <- puteip_fun Dputeip1 Dputeip Dsteq1
      <- impl_machine_resp Dsteq1 machine_eq_ Dimach1 Dimach2
      <- can_load Dimach2 (impl_mco Drep Direg Dnateq)
            (resolve_zco Dsep3 Dsep2 Dsep1 Dsum Dsize zlookup_ Daval
                (resolve_rco (rlookup_ Drlook))) Dload
            Dival.
-imco :
   can_load_adjusted Dimach (impl_imco Drep Direg2 Direg1 Dnateq)
      (resolve_imco Dsep2 Dsep1 Dsum2 Dprod Drep1 Dbi
          (resolve_rco (rlookup_ Drlook2)) Dsum1 Dlook Datomval
          (resolve_rco (rlookup_ Drlook1))) geteip_ Drep2
      Dadd Dputeip Dload Dival
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- can_impl_pc Dipc B4 Dipc1
      <- puteip_impl Dimach Dipc1 Dputeip1 Dimach1
      <- puteip_fun Dputeip1 Dputeip Dsteq1
      <- impl_machine_resp Dsteq1 machine_eq_ Dimach1 Dimach2
      <- can_load Dimach2 (impl_imco Drep Direg2 Direg1 Dnateq)
            (resolve_imco Dsep2 Dsep1 Dsum2 Dprod Drep1 Dbi
                (resolve_rco (rlookup_ Drlook2)) Dsum1 Dlook Datomval
                (resolve_rco (rlookup_ Drlook1))) Dload
            Dival.
can_oload :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi N1:nat. Pi OP:oper N1. Pi O:operand. Pi V:val. Pi W:string N1.
      impl_machine CI ST (mach H L R PC) -> impl_oper CI OP O
         -> resolve H R PC O V -> oload ST OP W -> impl_val CI W V -> type.
can_oload_ea :
   can_oload Dimach (impl_oper_ea Dimplea) Dresolve (oload_rm Dloadw) Dimplval
      <- can_load Dimach Dimplea Dresolve Dloadw Dimplval.
can_oload_im :
   can_oload Dimach (impl_oper_im Dimplval) resolve_im oload_imm Dimplval.
can_oload_pcrel+* :
   Pi V:val. Pi L:loc. Pi Nact:nat. Pi LM:locmap. Pi Astart:binary wwb.
      Pi B1:bit. Pi N1:nat. Pi N2:nat. Pi B2:binary wwb. Pi B3:binary wwb.
      Pi Bact:binary wwb. Pi BIT:bit. Pi Astartaddr:binary wwb. Pi B4:bit.
      Pi Aactaddr:binary wwb. Pi B5:bit. Pi AW:string ww.
      atomval V (pointer L Nact) 0' -> lookup_loc LM L Astart B1
         -> sum N1 N2 Nact -> add B2 B3 Bact BIT -> represents N1 B2
         -> represents N2 B3 -> add Astart B3 Astartaddr B4
         -> add Astartaddr B2 Aactaddr B5 -> implode_word AW Aactaddr
         -> Pi Nlim:nat. Pi Sstart:binary wwb. Pi IM:irfmap.
                impl_val (corresp_info_ Nlim Sstart LM IM) AW V -> type.
can_oload_pcrel+*_nocarry :
   can_oload_pcrel+* Datomval Dlook Dsum Dadd1 Drep1 Drep2 Dadd2 Dadd3 Dimp Nlim
      Sstart IM Dival
      <- sum_add_corr3 Drep1 Drep2 Drep3 Dsum1 Dadd1
      <- sum_fun3 Dsum1 Dsum Dneq
      <- represents_resp Dneq binary_eq_ Drep3 Drep4
      <- atom_size asize_pointer Datomval Dsize
      <- add_commute Dadd1 Dadd1'
      <- add_compose_maybe_carry Dadd2 Dadd3 Dadd1' Dadd4
      <- binary_word_to_word B4 Dimp
      <- impl_val_addr Dlook Datomval asize_pointer Dsize Drep4 Dadd4 Dimp Nlim
            Sstart IM Dival.
can_oload_pcrel+*_carry :
   can_oload_pcrel+* Datomval Dlook Dsum Dadd1 Drep1 Drep2 Dadd2 Dadd3 Dimp Nlim
      Sstart IM Dival
      <- can_negone 31' Bmax Dino
      <- can_represents1 Bmax Nmax Drepmax
      <- sum_add_corr_carry_rep Drep1 Drep2 Dsum Dadd1 Dino Drepmax Drep3 Dsum1
      <- atom_size asize_pointer Datomval Dsize
      <- binary_word_to_word B4 Dimp
      <- add_assoc* Dadd2 Dadd3 Dadd4 Dadd5 X2
      <- add_commute Dadd4 Dadd4'
      <- add_fun3 Dadd4' Dadd1 X1 Dbeq
      <- add_resp binary_eq_ Dbeq binary_eq_ bit_eq_ Dadd5 Dadd5'
      <- sum_shift' Dsum2 Dsum1
      <- sum_commute Dsum2 Dsum3
      <- sum_commute sum_z Dsummax
      <- represents_max Drep3 Drepmax Dino Dleq
      <- lt_succ Nmax Dlt
      <- leq_lt_trans Dleq Dlt Dlt1
      <- quotrem_sumprod (product_s Dsummax product_z) Dsum3 Dlt1 Dqr
      <- impl_val_badaddr Dlook Datomval asize_pointer Dsize Dino Drepmax Dsum1
            Dqr Drep3 Dadd5' Dimp Nlim Sstart IM Dival.
can_oload_pcrel+ :
   can_oload Dimach (impl_oper_pcrel+ Drep X9) (resolve_pcrel+ Datomval Dsum)
      (oload_pcrel Dimp Daddaddr geteip_) Dimplval
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- extract_impl_pc Dipc Dlookup DrepPC Dadd
      <- can_add Aeip B Bactaddr B4 Daddaddr
      <- can_add B Bpc Bact B2 Daddact
      <- can_oload_pcrel+* Datomval Dlookup Dsum Daddact Drep DrepPC Dadd
            Daddaddr Dimp N1 B5 IM1 Dimplval.
can_oload_pcrel-* :
   Pi V:val. Pi L:loc. Pi N:nat. Pi LM:locmap. Pi Astart:binary wwb. Pi B1:bit.
      Pi N1:nat. Pi N2:nat. Pi B2:binary wwb. Pi B3:binary wwb.
      Pi B4:binary wwb. Pi C:bit. Pi A1:binary wwb. Pi B5:bit.
      Pi Aact:binary wwb. Pi B6:bit. Pi W:string ww.
      atomval V (pointer L N) 0' -> lookup_loc LM L Astart B1 -> sum N1 N N2
         -> represents N1 B2 -> represents N2 B3 -> add B2 B4 B3 C
         -> add Astart B3 A1 B5 -> add B2 Aact A1 B6 -> implode_word W Aact
         -> Pi Nlim:nat. Pi Sstart:binary wwb. Pi IM:irfmap.
                impl_val (corresp_info_ Nlim Sstart LM IM) W V -> type.
- :
   can_oload_pcrel-* Datomval Dlookup Dsum Drep1 Drep2 Dadd1 Dadd2 Dadd3 Dimp
      Nlim Sstart IM Dival
      <- sum_add_corr4 Drep1' Drep3 Drep2 Dsum1 Dadd1
      <- represents_fun1 Drep1' Drep1 Dnateq
      <- sum_resp Dnateq nat_eq_ nat_eq_ Dsum1 Dsum2
      <- sum_fun2 Dsum2 Dsum Dnateq1
      <- represents_resp Dnateq1 binary_eq_ Drep3 Drep4
      <- atom_size asize_pointer Datomval Dsize
      <- binary_word_to_word B4 Dimp
      <- add_commute Dadd2 Dadd2'
      <- add_assoc* Dadd1 Dadd2' Dadd4 Dadd5 X2
      <- add_commute Dadd5 Dadd5'
      <- add_commute Dadd3 Dadd3'
      <- add_fun1 Dadd5' Dadd3' X1 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd4 Dadd4'
      <- add_commute Dadd4' Dadd4''
      <- impl_val_addr Dlookup Datomval asize_pointer Dsize Drep4 Dadd4'' Dimp
            Nlim Sstart IM Dival.
can_oload_pcrel-| :
   Pi N:nat.
      false
         -> Pi X:corresp_info. Pi W:string N. Pi V:val. impl_val X W V -> type.
can_oload_pcrel-*_carry :
   can_oload_pcrel-* Datomval Dlook Dsum Drep1 Drep2 Dadd1 Dadd2 Dadd3 Dimp N1
      B1 IM1 Dival
      <- add_carry_less Dadd1 Drep1 Drep2 Dlt
      <- sum_implies_leq Dsum Dleq
      <- lt_leq_contradict Dlt Dleq Dfalse
      <- binary_word_to_word B2 Dimp
      <- can_oload_pcrel-| Dfalse (corresp_info_ N1 B1 LM1 IM1) S1 V1 Dival.
can_oload_pcrel- :
   can_oload Dimach (impl_oper_pcrel- Drep Dneg X9)
      (resolve_pcrel- Datomval Dsum) (oload_pcrel Dimp Daddaddr geteip_)
      Dimplval
      <- extract_implement_parts Dimach X1 X2 X3 X4 X5 Dipc X6 X7 X8
      <- extract_impl_pc Dipc Dlook DrepPC Dadd
      <- can_add Aeip B Bactaddr B6 Daddaddr
      <- can_add B Bpc Bact B7 Dadd1
      <- can_flipbit B7 B2 Dbfl
      <- neg_reverse Dneg Dneg1
      <- add_invert Dadd1 Dneg Dbfl Dadd2
      <- can_flipbit B6 B4 Dbfl1
      <- add_commute Daddaddr Daddaddr'
      <- add_invert Daddaddr' Dneg Dbfl1 Daddaddr''
      <- can_oload_pcrel-* Datomval Dlook Dsum Drep DrepPC Dadd2 Dadd Daddaddr''
            Dimp N1 B5 IM1 Dimplval.
can_oload_badneg| :
   Pi N1:nat. Pi B:binary (s N1). Pi B1:binary N1. Pi N2:nat. Pi W:string N2.
      highbit B one' B1 -> is_zero B
         -> Pi ST:state. Pi O:oper N2. Pi X:corresp_info. Pi V:val.
                oload ST O W -> impl_val X W V -> type.
- :
   can_oload_badneg| (highbit_cons Dhibit) (is_zero_cons Diz) ST O X V D1 D2
      <- can_oload_badneg| Dhibit Diz ST O X V D1 D2.
can_oload_pcrel-badneg :
   can_oload Dimach (impl_oper_pcrel- Drep Dneg Dhibit)
      (resolve_pcrel- Datomval' Dsum) Dload Dival
      <- neg_carry_zero Dneg Diz X1
      <- can_oload_badneg| Dhibit Diz ST1 (oper_pcrel B1) X V Dload Dival.
can_oload_adjusted :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi N1:nat. Pi OPx:oper N1. Pi O:operand. Pi N:nat. Pi OP:oper N1.
      Pi V:val. Pi A1:binary wwb. Pi B:binary wwb. Pi A:binary wwb. Pi B1:bit.
      Pi ST2:state. Pi W:string N1.
      impl_machine CI ST (mach H L R PC) -> impl_oper CI OPx O
         -> adjust_plus_op OPx N OP -> resolve H R PC O V -> geteip ST A1
         -> represents N B -> add A1 B A B1 -> puteip ST A ST2 -> oload ST2 OP W
         -> impl_val CI W V -> type.
can_oload_adjusted_ea :
   can_oload_adjusted Dimach (impl_oper_ea Dioper) adjust_plus_op_rm Dres Dg
      Drep Daa Dp (oload_rm Dload) Dival
      <- can_load_adjusted Dimach Dioper Dres Dg Drep Daa Dp Dload Dival.
can_oload_adjusted_imm :
   can_oload_adjusted Dimach (impl_oper_im Dival) adjust_plus_op_imm resolve_im
      geteip_ Drep Daa puteip_ oload_imm Dival.
can_oload_adjusted_pcrel+ :
   can_oload_adjusted Dimach (impl_oper_pcrel+ Drep X11)
      (adjust_plus_op_pcrel Dadda Drepa) (resolve_pcrel+ Datomval Dsum) geteip_
      Drepa' Daddpc puteip_ (oload_pcrel Dimp Dadd geteip_) Dimplval
      <- extract_implement_parts Dimach X3 X4 X5 X6 X7 Dipc X8 X9 X10
      <- extract_impl_pc Dipc Dlook DrepPC DaddPC
      <- can_add Bpc B Bact B2 Dadd1
      <- add_commute Dadd1 Dadd2
      <- represents_fun2 Drepa' Drepa Dbeq
      <- add_resp binary_eq_ Dbeq binary_eq_ bit_eq_ Daddpc Daddpc1
      <- can_add Aeip1 Bfin Aload1 B10 Dadd
      <- add_assoc* Daddpc1 Dadd Dadd3 Dadd4 X2
      <- add_commute Dadd3 Dadd3'
      <- add_fun3 Dadd3' Dadda X1 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd4 Dadd4'
      <- can_oload_pcrel+* Datomval Dlook Dsum Dadd2 Drep DrepPC DaddPC Dadd4'
            Dimp N1 B5 IM1 Dimplval.
can_oload_adjusted_pcrel- :
   can_oload_adjusted Dimach (impl_oper_pcrel- Drep Dneg X11)
      (adjust_plus_op_pcrel Dadda Drepa) (resolve_pcrel- Datomval Dsum) geteip_
      Drepa' Daddpc puteip_ (oload_pcrel Dimp Dadd geteip_) Dimplval
      <- extract_implement_parts Dimach X3 X4 X5 X6 X7 Dipc X8 X9 X10
      <- extract_impl_pc Dipc Dlook DrepPC DaddPC
      <- can_add Bpc B Bact B12 Dadd1
      <- add_commute Dadd1 Dadd2
      <- can_flipbit B12 B2 Dbfl
      <- add_invert Dadd2 Dneg Dbfl Dadd3
      <- represents_fun2 Drepa' Drepa Dbeq
      <- add_resp binary_eq_ Dbeq binary_eq_ bit_eq_ Daddpc Daddpc1
      <- add_commute Daddpc1 Daddpc2
      <- can_add B Aeip Bload B11 Dadd4
      <- can_flipbit B11 B4 Dbfl1
      <- add_invert Dadd4 Dneg Dbfl1 Dadd4'
      <- add_assoc* Dadda Dadd4 Dadd5 Dadd6 X2
      <- add_fun3 Dadd5 Daddpc2 X1 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd6 Dadd6'
      <- add_commute Dadd6' Dadd
      <- can_oload_pcrel-* Datomval Dlook Dsum Drep DrepPC Dadd3 DaddPC Dadd4'
            Dimp N1 B5 IM1 Dimplval.
can_oload_pcrel_adjusted-badneg :
   can_oload_adjusted Dimach (impl_oper_pcrel- Drep Dneg Dhibit) Dadj
      (resolve_pcrel- Datomval' Dsum) geteip_ Drepa' Daddpc puteip_ Dload Dival
      <- neg_carry_zero Dneg Diz X1
      <- can_oload_badneg| Dhibit Diz (state_ H1 R1 RF1 Bpc1 OR1) O1 X V Dload
            Dival.
can_store :
   Pi X:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi N1:nat. Pi EA:eaddress N1. Pi D:dest. Pi V:val. Pi H':heap.
      Pi R':rfile. Pi W:string N1. Pi ST':state.
      impl_machine X ST (mach H L R PC) -> impl_dest EA D
         -> propagate H R PC D V H' R' -> impl_val X W V -> store ST EA W ST'
         -> impl_machine X ST' (mach H' L R' PC) -> type.
can_store_rdest :
   can_store Dimach (impl_rdest Direg) (propagate_rdest Drupdate Dsize) Dimplval
      (store_reg Dstreg) Dimplmach
      <- can_rstore Dimach Direg Drupdate Dimplval Dstreg Dimplmach.
- :
   can_store Dimach (impl_rldest (impl_bytereg_ Dleq))
      (propagate_projdest (propagate_rdest Drupdate Dsize) Dapp1 Dapp2 Dsep1
          Dsep2 (resolve_rco Drlookup))
      Dival1 (store_reglow Drst Dindex5 Dindex2 Drload) Dimach1
      <- leq_lt_trans Dleq lt_ebx_esp Dlt
      <- can_rload Dimach (impl_reg_ Dlt) Drlookup Drload Dival2
      <- can_index Dival2 Dsep2 Dindex1 Dival3 Dival4
      <- index_z_fun Dindex1 Dseq1 Dseq2
      <- impl_val_resp Dseq2 val_eq_ Dival4 Dival5
      <- can_index Dival5 Dsep1 Dindex2 Dival6 Dival7
      <- can_index'' Dival8 Dapp2 Dindex3 Dival1 Dival7
      <- index_implies_sum Dindex2 Dsum1
      <- index_implies_sum Dindex3 Dsum2
      <- sum_fun3 Dsum2 Dsum1 Dnateq1
      <- string_resp Dnateq1 S123n' S123n Dseq3
      <- impl_val_resp Dseq3 val_eq_ Dival8 Dival9
      <- can_index'' Dival10 Dapp1 Dindex4 Dival3 Dival9
      <- index_z_fun Dindex4 Dseq4 Dseq5
      <- string_eq_symm Dseq5 Dseq6
      <- impl_val_resp Dseq6 val_eq_ Dival10 Dival11
      <- index_resp nat_eq_ Dseq3 string_eq_ string_eq_ Dindex3 Dindex5
      <- can_rstore Dimach (impl_reg_ Dlt) Drupdate Dival11 Drst Dimach1.
- :
   can_store Dimach (impl_rhdest (impl_bytereg_ Dleq))
      (propagate_projdest (propagate_rdest Drupdate Dsize) Dapp1 Dapp2 Dsep1
          Dsep2 (resolve_rco Drlookup))
      Dival1 (store_reghigh Drst Dindex7 Dindex4 Dindex3 Dindex1 Drload) Dimach1
      <- leq_lt_trans Dleq lt_ebx_esp Dlt
      <- can_rload Dimach (impl_reg_ Dlt) Drlookup Drload Dival2
      <- can_index Dival2 Dsep2 Dindex1 Dival3 Dival4
      <- can_index Dival4 Dsep1 Dindex3 Dival6 Dival7
      <- can_index'' Dival8 Dapp2 Dindex4 Dival1 Dival7
      <- can_index'' Dival9 Dapp1 Dindex5 Dival3 Dival8
      <- index_implies_sum Dindex3 Dsum1
      <- index_implies_sum Dindex4 Dsum2
      <- sum_fun3 Dsum2 Dsum1 Dnateq1
      <- string_resp Dnateq1 S23n S23n' Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dindex5 Dindex6
      <- index_implies_sum Dindex1 Dsum3
      <- index_implies_sum Dindex6 Dsum4
      <- sum_fun3 Dsum4 Dsum3 Dnateq2
      <- string_resp Dnateq2 S123n S123n' Dseq2
      <- index_resp nat_eq_ Dseq2 string_eq_ string_eq_ Dindex5 Dindex7
      <- impl_val_resp Dseq2 val_eq_ Dival9 Dival10
      <- can_rstore Dimach (impl_reg_ Dlt) Drupdate Dival10 Drst Dimach1.
can_store_mdest :
   can_store Dimach (impl_mdest Drep Direg Dnateq)
      (propagate_mdest Dhupdate Dappend1 Dappend2 Dsize Dsep2 Dsep1 Dsum
          Dhlookup Datomval (resolve_rco Drlookup))
      Dimplval (store_deref_z Dmst1 Dadd4' Dimp Drload) Dimach1
      <- can_rload Dimach Direg Drlookup Drload Dival
      <- extract_implement_parts Dimach Diheap X4 X5 X6 X7 X8 X9 X10 X11
      <- can_lookup_loc Diheap Dhlookup Dlook
      <- separate_resp Dnateq val_eq_ val_eq_ val_eq_ Dsep2 Dsep2'
      <- size_resp val_eq_ Dnateq Dsize Dsize1
      <- str_val_size_corr' W Dimplval Dsize1 Dnateq1
      <- string_resp Dnateq1 W S1 Dseq1
      <- impl_val_resp Dseq1 val_eq_ Dimplval Dimplval'
      <- can_mstore Dimach Dlook Dhlookup Dsep1 Dsep2' Dimplval' Dappend2
            Dappend1 Dhupdate Drep1 Dadd1 Dmst Dimach1
      <- string_eq_symm Dseq1 Dseq1'
      <- mstore_resp state_eq_ binary_eq_ Dseq1' state_eq_ Dmst Dmst1
      <- impl_atomval Dival Datomval Daval
      <- sum_implies_leq Dsum Dleq1
      <- can_represents Dleq1 Drep1 Drep2
      <- impl_aval_good_pointer Daval Dlook Drep2 Dimp Dadd2
      <- sum_add_corr Drep2 Drep Drep1 Dsum Dadd3
      <- can_add B1 B B2 B4 Dadd4
      <- add_assoc* Dadd2 Dadd4 Dadd5 Dadd6 X3
      <- add_fun3 Dadd5 Dadd3 X2 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd6 Dadd6'
      <- add_fun3 Dadd6' Dadd1 X1 Dbeq2
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd4 Dadd4'.
can_store_spdest :
   can_store Dimach impl_spdest
      (propagate_spdest Dzupdate Dsep Dsum Dsize Dzlookup Datomval) Dimplval
      (store_reg (rstore_ putregs_ Dstreg getregs_))
      (impl_ Dicv Dorder Digot Dipc Dicond
          (impl_stack_ Dmext2 Dmext1 Dnotin2 Dnotin1 Dabs Dreptr Daddtr Dival2
              Dindex2 Drep3 Dadd3' Dadd1 Daddlim Drep1)
          Dimp1 Dirfile' Diheap)
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Dicond Dipc
            Digot Dorder Dicv
      <- rstore_esp W Dirfile Dstreg Dirfile'
      <- extract_stack Distack Drep1 Daddlim Dadd1 Dadd2 Drep2 Dindex Dival
            Daddtr Dreptr Dabs Dnotin1 Dnotin2 Dmext1 Dmext2
      <- can_index Dival Dsep Dindex1 Dival1 Dival2
      <- index_compose Dindex Dindex1 Dsum1 Dindex2
      <- index_implies_sum Dindex2 Dsum2
      <- sum_implies_leq Dsum2 Dleq1
      <- can_represents Dleq1 Drep1 Drep3
      <- impl_atomval Dimplval Datomval
            (impl_aval_spointer Dimp1 Dadd3 Dsum3 Drep4)
      <- str_val_size_corr' Sstack Dival Dsize Dnateq1
      <- string_resp Dnateq1 Sstack S1 Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dindex Dindex'
      <- index_implies_sum Dindex' Dsum4
      <- can_sum Nsp1 N2 Nlim' Dsum5
      <- sum_assoc Dsum1 Dsum5 Dsum6 Dsum7
      <- sum_fun3 Dsum6 Dsum Dnateq2
      <- sum_resp nat_eq_ Dnateq2 nat_eq_ Dsum7 Dsum7'
      <- sum_fun3 Dsum7' Dsum4 Dnateq3
      <- sum_resp nat_eq_ nat_eq_ Dnateq3 Dsum5 Dsum5'
      <- sum_commute Dsum5' Dsum5''
      <- sum_fun2 Dsum3 Dsum5'' Dnateq4
      <- represents_resp Dnateq4 binary_eq_ Drep4 Drep4'
      <- represents_fun2 Drep4' Drep3 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd3 Dadd3'.
can_store_zdest :
   can_store Dimach (impl_mdest Drep Direg Dnateq1)
      (propagate_zdest Dzupdate Dapp1 Dapp2 Dapp3 Dvsize Dsep1 Dsep2 Dsep3 Dsum
          Dsize zlookup_ Datomval (resolve_rco Drlookup))
      Dival (store_deref_z Dmst1 Dadd4' Dimp Drload1) Dimach1
      <- can_rload Dimach Direg Drlookup Drload1 Dival1
      <- impl_atomval Dival1 Datomval
            (impl_aval_spointer Dimp Dadd1 Dsum1 Drep1)
      <- extract_implement_parts Dimach X16 X17 X18 Distack X19 X20 X21 X22 X23
      <- extract_stack Distack X4 X5 X6 X7 X8 Dindex Divals X9 X10 X11 X12 X13
            X14 X15
      <- str_val_size_corr' Sstack Divals Dsize Dnateq2
      <- string_resp Dnateq2 Sstack Sstack' Dseq1
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq1 Dindex Dindex'
      <- index_implies_sum Dindex' Dsum2
      <- can_sum N1 Nptr N1ptr Dsum3
      <- separate_compose Dsep3 Dsep2 Dsum3 Dapp32 Dsep32
      <- separate_resp Dnateq1 val_eq_ val_eq_ val_eq_ Dsep1 Dsep1'
      <- string_resp Dnateq1 W W' Dseq2
      <- impl_val_resp Dseq2 val_eq_ Dival Dival'
      <- append_assoc' Dapp32' Dappa Dapp2 Dapp1
      <- append_fun3 Dapp32' Dapp32 Dvaleq
      <- append_resp Dvaleq val_eq_ val_eq_ Dappa Dappa'
      <- can_sum Nprev1 N1ptr Ntot Dsum4
      <- can_zstore Dimach zlookup_ Dsize Dsum2 Dsep32 Dsep1' Dival' Dapp3
            Dappa' Dzupdate Dsum4 Drep2 Dadd2 Dmst Dimach1
      <- string_eq_symm Dseq2 Dseq2'
      <- mstore_resp state_eq_ binary_eq_ Dseq2' state_eq_ Dmst Dmst1
      <- sum_assoc' Dsum5 Dsum6 Dsum Dsum2
      <- sum_commute Dsum1 Dsum1'
      <- sum_fun1 Dsum6 Dsum1' Dnateq3
      <- sum_resp nat_eq_ nat_eq_ Dnateq3 Dsum5 Dsum5'
      <- sum_assoc' Dsum7 Dsum8 Dsum3 Dsum4
      <- sum_fun3 Dsum7 Dsum5' Dnateq4
      <- sum_resp Dnateq4 nat_eq_ nat_eq_ Dsum8 Dsum8'
      <- sum_add_corr Drep1 Drep Drep2 Dsum8' Dadd3
      <- can_add Bsptr Bptr Astore' B1 Dadd4
      <- add_assoc* Dadd1 Dadd4 Dadd5 Dadd6 X3
      <- add_fun3 Dadd5 Dadd3 X2 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd6 Dadd6'
      <- add_fun3 Dadd6' Dadd2 X1 Dbeq2
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd4 Dadd4'.
can_store_imdest_z :
   can_store Dimach (impl_imdest Drep Direg2 Direg1 Dnateq1)
      (propagate_imdest Dhupdate Dapp2 Dapp1 Dsize Dsep2 Dsep1 Dsum2 Dsum1 Dprod
          Drepi Dbi (resolve_rco Drlook2) Dhlookup Datomval
          (resolve_rco Drlook1))
      Dimplval (store_deref_z Dmst1 Dadd4' Dimp Drload) Dimach1
      <- prod_fun3 Dprod product_z Dnateq2
      <- sum_resp nat_eq_ Dnateq2 nat_eq_ Dsum2 Dsum2'
      <- sum_ident N' Dsum2''
      <- sum_fun3 Dsum2' Dsum2'' Dnateq3
      <- separate_resp Dnateq3 val_eq_ val_eq_ val_eq_ Dsep1 Dsep1'
      <- can_rload Dimach Direg1 Drlook1 Drload Dival
      <- extract_implement_parts Dimach Diheap X4 X5 X6 X7 X8 X9 X10 X11
      <- can_lookup_loc Diheap Dhlookup Dlook
      <- separate_resp Dnateq1 val_eq_ val_eq_ val_eq_ Dsep2 Dsep2'
      <- size_resp val_eq_ Dnateq1 Dsize Dsize1
      <- str_val_size_corr' W Dimplval Dsize1 Dnateq4
      <- string_resp Dnateq1 W S1 Dseq1
      <- impl_val_resp Dseq1 val_eq_ Dimplval Dimplval'
      <- can_mstore Dimach Dlook Dhlookup Dsep1' Dsep2' Dimplval' Dapp1 Dapp2
            Dhupdate Drep1 Dadd1 Dmst Dimach1
      <- string_eq_symm Dseq1 Dseq1'
      <- mstore_resp state_eq_ binary_eq_ Dseq1' state_eq_ Dmst Dmst1
      <- impl_atomval Dival Datomval Daval
      <- sum_commute Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq1
      <- can_represents Dleq1 Drep1 Drep2
      <- impl_aval_good_pointer Daval Dlook Drep2 Dimp Dadd2
      <- sum_add_corr Drep2 Drep Drep1 Dsum1' Dadd3
      <- can_add B1 Disp B2 B4 Dadd4
      <- add_assoc* Dadd2 Dadd4 Dadd5 Dadd6 X3
      <- add_fun3 Dadd5 Dadd3 X2 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd6 Dadd6'
      <- add_fun3 Dadd6' Dadd1 X1 Dbeq2
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd4 Dadd4'.
can_store_imdest_s :
   can_store Dimach (impl_imdest Drep Direg2 Direg1 Dnateq1)
      (propagate_imdest Dupd Dapp2 Dapp1 Dsize Dsep2 Dsep1 Dsum2 Dsum1 Dprod
          Drepi Dbi (resolve_rco Drlook2) Dhlookup Datomval
          (resolve_rco Drlook1))
      Dimplval
      (store_deref_s Dmst1 Dadd5' Dadd4 Dtimes Dimp2' Drload2 Dimp1 Drload1
          nat_eq_)
      Dimach1
      <- can_rload Dimach Direg1 Drlook1 Drload1 Dival1
      <- extract_implement_parts Dimach Diheap X6 X7 X8 X9 X10 X11 X12 X13
      <- can_lookup_loc Diheap Dhlookup Dlook
      <- hlookup_size_rep Diheap Dlook Dhlookup Dsize1 Drep1 Dadd1
      <- separate_size_leq Dsep1 Dsize1 Dleq1
      <- sum_commute Dsum2 Dsum2'
      <- sum_implies_leq Dsum2' Dleq2
      <- leq_trans Dleq2 Dleq1 Dleq3
      <- can_represents Dleq3 Drep1 Drep2
      <- can_rload Dimach Direg2 Drlook2 Drload2 Dival2
      <- str_val_size_corr S4 Dival2 Dindexsz
      <- impl_val_binary_int Dival2 Dindexsz Dbi Dseq Dimp2
      <- string_eq_symm Dseq Dseq'
      <- implode_word_resp Dseq' binary_eq_ Dimp2 Dimp2'
      <- can_times Drepi Drep2 Dprod Dtimes
      <- separate_resp Dnateq1 val_eq_ val_eq_ val_eq_ Dsep2 Dsep2'
      <- string_resp Dnateq1 S3 S2 Dseq1
      <- impl_val_resp Dseq1 val_eq_ Dimplval Dimplval'
      <- can_mstore Dimach Dlook Dhlookup Dsep1 Dsep2' Dimplval' Dapp1 Dapp2
            Dupd Drep3 Dadd2 Dmst Dimach1
      <- string_eq_symm Dseq1 Dseq1'
      <- mstore_resp state_eq_ binary_eq_ Dseq1' state_eq_ Dmst Dmst1
      <- impl_atomval Dival1 Datomval Daval
      <- sum_implies_leq Dsum2 Dleq4
      <- sum_commute Dsum1 Dsum1'
      <- sum_implies_leq Dsum1' Dleq5
      <- leq_trans Dleq5 Dleq4 Dleq6
      <- leq_trans Dleq6 Dleq1 Dleq7
      <- can_represents Dleq7 Drep1 Drep4
      <- impl_aval_good_pointer Daval Dlook Drep4 Dimp1 Dadd3
      <- can_add Aimp Bindex' Astart1 B7 Dadd4
      <- can_add Astart1 Disp Aact' B1 Dadd5
      <- add_assoc* Dadd3 Dadd4 Dadd6 Dadd7 X5
      <- sum_assoc Dsum1 Dsum2 Dsum3 Dsum4
      <- sum_commute Dsum4 Dsum4'
      <- sum_implies_leq Dsum4' Dleq8
      <- leq_trans Dleq8 Dleq1 Dleq9
      <- can_represents Dleq9 Drep1 Drep5
      <- sum_add_corr Drep4 Drep2 Drep5 Dsum3 Dadd8
      <- add_fun3 Dadd6 Dadd8 X4 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd7 Dadd7'
      <- add_assoc* Dadd7' Dadd5 Dadd9 Dadd10 X3
      <- sum_add_corr Drep Drep5 Drep3 Dsum4 Dadd11
      <- add_commute Dadd11 Dadd11'
      <- add_fun3 Dadd9 Dadd11' X2 Dbeq2
      <- add_resp binary_eq_ Dbeq2 binary_eq_ bit_eq_ Dadd10 Dadd10'
      <- add_fun3 Dadd10' Dadd2 X1 Dbeq3
      <- add_resp binary_eq_ binary_eq_ Dbeq3 bit_eq_ Dadd5 Dadd5'.
load_fun :
   Pi N1:nat. Pi ST:state. Pi EA:eaddress N1. Pi W:string N1. Pi W':string N1.
      load ST EA W -> load ST EA W' -> string_eq W W' -> type.
load_fun_reg :
   load_fun (load_reg Drload) (load_reg Drload') Dsteq
      <- rload_fun Drload Drload' Dsteq.
load_fun_reglow :
   load_fun (load_reglow Dindex Drload) (load_reglow Dindex' Drload') Dseq2
      <- rload_fun Drload Drload' Dseq1
      <- index_resp nat_eq_ Dseq1 string_eq_ string_eq_ Dindex Dindex''
      <- index_fun Dindex'' Dindex' Dseq2 Dseq3.
load_fun_reghigh :
   load_fun (load_reghigh Dindex1 Dindex2 Drload)
      (load_reghigh Dindex1' Dindex2' Drload') Dseq4
      <- rload_fun Drload Drload' Dseq1
      <- index_resp nat_eq_ Dseq1 string_eq_ string_eq_ Dindex2 Dindex2''
      <- index_fun Dindex2'' Dindex2' Dseq2 Dseq3
      <- index_resp nat_eq_ Dseq3 string_eq_ string_eq_ Dindex1 Dindex1''
      <- index_fun Dindex1'' Dindex1' Dseq4 Dseq5.
load_fun_deref_z :
   load_fun (load_deref_z Dml Dadd Dimp Drl)
      (load_deref_z Dml' Dadd' Dimp' Drl') Dsteq1
      <- rload_fun Drl Drl' Dsteq
      <- implode_word_resp Dsteq binary_eq_ Dimp Dimp''
      <- implode_word_fun Dimp'' Dimp' Daeq
      <- add_resp Daeq binary_eq_ binary_eq_ bit_eq_ Dadd Dadd''
      <- add_fun3 Dadd'' Dadd' X1 Daeq1
      <- mload_resp state_eq_ Daeq1 nat_eq_ string_eq_ Dml Dml''
      <- mload_fun Dml'' Dml' Dsteq1.
load_fun_deref_s :
   load_fun (load_deref_s Dml Dadd2 Dadd1 Dtimes Dimp2 Drl2 Dimp1 Drl1 nat_eq_)
      (load_deref_s Dml' Dadd2' Dadd1' Dtimes' Dimp2' Drl2' Dimp1' Drl1' 
nat_eq_)
      Dseq3
      <- rload_fun Drl1 Drl1' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp1 Dimp1''
      <- implode_word_fun Dimp1'' Dimp1' Daeq1
      <- rload_fun Drl2 Drl2' Dseq2
      <- implode_word_resp Dseq2 binary_eq_ Dimp2 Dimp2''
      <- implode_word_fun Dimp2'' Dimp2' Dbeq1
      <- times_resp Dbeq1 nat_eq_ binary_eq_ Dtimes Dtimes''
      <- times_fun3 Dtimes'' Dtimes' Dbeq2
      <- add_resp Daeq1 Dbeq2 binary_eq_ bit_eq_ Dadd1 Dadd1''
      <- add_fun3 Dadd1'' Dadd1' X2 Daeq2
      <- add_resp Daeq2 binary_eq_ binary_eq_ bit_eq_ Dadd2 Dadd2''
      <- add_fun3 Dadd2'' Dadd2' X1 Daeq3
      <- mload_resp state_eq_ Daeq3 nat_eq_ string_eq_ Dml Dml''
      <- mload_fun Dml'' Dml' Dseq3.
load_fun_abs_z :
   load_fun (load_abs_z Dml) (load_abs_z Dml') Dseq <- mload_fun Dml Dml' Dseq.
load_fun_abs_s :
   load_fun (load_abs_s Dml Dadd Dtimes Dimp Drl nat_eq_)
      (load_abs_s Dml' Dadd' Dtimes' Dimp' Drl' nat_eq_) Dseq2
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp Dimp''
      <- implode_word_fun Dimp'' Dimp' Dbeq1
      <- times_resp Dbeq1 nat_eq_ binary_eq_ Dtimes Dtimes''
      <- times_fun3 Dtimes'' Dtimes' Dbeq2
      <- add_resp binary_eq_ Dbeq2 binary_eq_ bit_eq_ Dadd Dadd''
      <- add_fun3 Dadd'' Dadd' X1 Daeq1
      <- mload_resp state_eq_ Daeq1 nat_eq_ string_eq_ Dml Dml''
      <- mload_fun Dml'' Dml' Dseq2.
oload_fun :
   Pi N1:nat. Pi ST:state. Pi O:oper N1. Pi W:string N1. Pi W':string N1.
      oload ST O W -> oload ST O W' -> string_eq W W' -> type.
oload_fun_rm :
   oload_fun (oload_rm Dl) (oload_rm Dl') Dseq <- load_fun Dl Dl' Dseq.
oload_fun_imm : oload_fun oload_imm oload_imm string_eq_.
oload_fun_pcrel :
   oload_fun (oload_pcrel Dimp Dadd geteip_) (oload_pcrel Dimp' Dadd' geteip_)
      Dseq
      <- add_fun3 Dadd Dadd' X1 Daeq
      <- implode_word_resp string_eq_ Daeq Dimp Dimp''
      <- implode_word_fun1 Dimp'' Dimp' Dseq.
store_fun :
   Pi N1:nat. Pi ST:state. Pi EA:eaddress N1. Pi W:string N1. Pi ST1:state.
      Pi ST1':state.
      store ST EA W ST1 -> store ST EA W ST1' -> state_eq ST1 ST1' -> type.
store_fun_reg :
   store_fun (store_reg Drs) (store_reg Drs') Dsteq <- rstore_fun Drs Drs' Dsteq.
store_fun_reglow :
   store_fun (store_reglow Drst Dindex1 Dindex2 Drl)
      (store_reglow Drst' Dindex1' Dindex2' Drl') Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- index_resp nat_eq_ Dseq1 string_eq_ string_eq_ Dindex2 Dindex2''
      <- index_fun Dindex2'' Dindex2' Dseq2 Dseq3
      <- index_fun' Dindex1 Dindex1' string_eq_ Dseq3 X1 Dseq4
      <- rstore_resp state_eq_ nat_eq_ Dseq4 state_eq_ Drst Drst''
      <- rstore_fun Drst'' Drst' Dsteq.
store_fun_reghigh :
   store_fun (store_reghigh Drst Dindex1 Dindex2 Dindex3 Dindex4 Drl)
      (store_reghigh Drst' Dindex1' Dindex2' Dindex3' Dindex4' Drl') Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- index_resp nat_eq_ Dseq1 string_eq_ string_eq_ Dindex4 Dindex4''
      <- index_fun Dindex4'' Dindex4' Dseq2 Dseq3
      <- index_resp nat_eq_ Dseq3 string_eq_ string_eq_ Dindex3 Dindex3''
      <- index_fun Dindex3'' Dindex3' Dseq4 Dseq5
      <- index_fun' Dindex2 Dindex2' string_eq_ Dseq5 X2 Dseq6
      <- index_fun' Dindex1 Dindex1' Dseq2 Dseq6 X1 Dseq7
      <- rstore_resp state_eq_ nat_eq_ Dseq7 state_eq_ Drst Drst''
      <- rstore_fun Drst'' Drst' Dsteq.
store_fun_deref_z :
   store_fun (store_deref_z Dms Dadd Dimp Drl)
      (store_deref_z Dms' Dadd' Dimp' Drl') Dsteq
      <- rload_fun Drl Drl' Dseq
      <- implode_word_resp Dseq binary_eq_ Dimp Dimp''
      <- implode_word_fun Dimp'' Dimp' Daeq
      <- add_resp Daeq binary_eq_ binary_eq_ bit_eq_ Dadd Dadd''
      <- add_fun3 Dadd'' Dadd' X1 Daeq1
      <- mstore_resp state_eq_ Daeq1 string_eq_ state_eq_ Dms Dms''
      <- mstore_fun Dms'' Dms' Dsteq.
store_fun_deref_s :
   store_fun
      (store_deref_s Dmst Dadd2 Dadd1 Dtimes Dimp2 Drl2 Dimp1 Drl1 nat_eq_)
      (store_deref_s Dmst' Dadd2' Dadd1' Dtimes' Dimp2' Drl2' Dimp1' Drl1'
          nat_eq_)
      Dsteq
      <- rload_fun Drl1 Drl1' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp1 Dimp1''
      <- implode_word_fun Dimp1'' Dimp1' Daeq1
      <- rload_fun Drl2 Drl2' Dseq2
      <- implode_word_resp Dseq2 binary_eq_ Dimp2 Dimp2''
      <- implode_word_fun Dimp2'' Dimp2' Dbeq1
      <- times_resp Dbeq1 nat_eq_ binary_eq_ Dtimes Dtimes''
      <- times_fun3 Dtimes'' Dtimes' Dbeq2
      <- add_resp Daeq1 Dbeq2 binary_eq_ bit_eq_ Dadd1 Dadd1''
      <- add_fun3 Dadd1'' Dadd1' X2 Daeq2
      <- add_resp Daeq2 binary_eq_ binary_eq_ bit_eq_ Dadd2 Dadd2''
      <- add_fun3 Dadd2'' Dadd2' X1 Daeq3
      <- mstore_resp state_eq_ Daeq3 string_eq_ state_eq_ Dmst Dmst''
      <- mstore_fun Dmst'' Dmst' Dsteq.
store_fun_abs_z :
   store_fun (store_abs_z Dms) (store_abs_z Dms') Dsteq
      <- mstore_fun Dms Dms' Dsteq.
store_fun_abs_s :
   store_fun (store_abs_s Dmst Dadd Dtimes Dimp Drl nat_eq_)
      (store_abs_s Dmst' Dadd' Dtimes' Dimp' Drl' nat_eq_) Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp Dimp''
      <- implode_word_fun Dimp'' Dimp' Dbeq1
      <- times_resp Dbeq1 nat_eq_ binary_eq_ Dtimes Dtimes''
      <- times_fun3 Dtimes'' Dtimes' Dbeq2
      <- add_resp binary_eq_ Dbeq2 binary_eq_ bit_eq_ Dadd Dadd''
      <- add_fun3 Dadd'' Dadd' X1 Daeq1
      <- mstore_resp state_eq_ Daeq1 string_eq_ state_eq_ Dmst Dmst''
      <- mstore_fun Dmst'' Dmst' Dsteq.
imember_mutex :
   Pi A:binary wwb. Pi B1:binary wwb. Pi SS:sectset.
      imember A B1 SS -> inotmember A SS -> false -> type.
-h :
   imember_mutex imember_hit (inotmember_cons X1 Dneq) Dfalse
      <- binary_neq_contradict Dneq Dfalse.
-c :
   imember_mutex (imember_cons Dmem) (inotmember_cons Dnotmem X1) Dfalse
      <- imember_mutex Dmem Dnotmem Dfalse.
ireachable_mutex* :
   Pi B0:binary bw. Pi B1:binary bw. Pi B2:binary bw. Pi B3:binary bw.
      Pi A:binary wwb. Pi Astart:binary wwb. Pi B4:binary wwb. Pi B5:binary wwb.
      Pi Aend:binary wwb. Pi N1:nat. Pi S:string N1.
      implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) A -> add Astart B4 A zero
         -> add A B5 Aend zero
         -> inot_pointer Astart Aend (/ B0 (/ B1 (/ B2 (/ B3 S)))) -> false -> type.
-a :
   ireachable_mutex* Dimp Dadd1 Dadd2 (inot_pointer_above Dinz Dadd3 Dimp1)
      Dfalse
      <- implode_word_fun Dimp Dimp1 Dbeq1
      <- add_assoc Dadd2 Dadd3 Dadd4 Dadd5
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd5 Dadd5'
      <- add_commute Dadd5' Dadd5''
      <- can_zero wwb B3 Diz
      <- add_ident B5 Diz Dadd6
      <- add_fun1 Dadd5'' Dadd6 X2 Dbeq2
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd4 Dadd4'
      <- add_zero_sum Dadd4' X1 Diz1 Diz
      <- zero_nonzero_contradict binary_eq_ Diz1 Dinz Dfalse.
-b :
   ireachable_mutex* Dimp Dadd1 Dadd2 (inot_pointer_below Dinz Dadd3 Dimp1)
      Dfalse
      <- implode_word_fun Dimp1 Dimp Dbeq1
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd3 Dadd3'
      <- add_assoc Dadd1 Dadd3' Dadd4 Dadd5
      <- add_commute Dadd5 Dadd5'
      <- can_zero wwb B3 Diz
      <- add_ident B5 Diz Dadd6
      <- add_fun1 Dadd5' Dadd6 X2 Dbeq2
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd4 Dadd4'
      <- add_zero_sum Dadd4' X1 Diz1 Diz
      <- zero_nonzero_contradict binary_eq_ Diz1 Dinz Dfalse.
ireachable_mutex :
   Pi N1:nat. Pi L:binary wwb. Pi W:binary wwb. Pi S:string N1.
      ireachable L W S -> iunreachable L W S -> false -> type.
-h :
   ireachable_mutex (ireachable_hit Dadd1 Dadd2 Dimp)
      (iunreachable_cons X1 Dnot) Dfalse
      <- ireachable_mutex* Dimp Dadd2 Dadd1 Dnot Dfalse.
-c :
   ireachable_mutex (ireachable_cons Dreach) (iunreachable_cons Dunr X1) Dfalse
      <- ireachable_mutex Dreach Dunr Dfalse.
string_reachable_mutex :
   Pi N1:nat. Pi SS:sectset. Pi S:string N1.
      string_reachable SS S -> string_unreachable SS S -> false -> type.
-h :
   string_reachable_mutex (string_reachable_hit Dreach)
      (string_unreachable_cons X1 Dunr) Dfalse
      <- ireachable_mutex Dreach Dunr Dfalse.
-c :
   string_reachable_mutex (string_reachable_cons Dreach)
      (string_unreachable_cons Dunr X1) Dfalse
      <- string_reachable_mutex Dreach Dunr Dfalse.
memory_reachable_mutex :
   Pi SS:sectset. Pi M:memory.
      memory_reachable SS M -> memory_unreachable SS M -> false -> type.
-hc :
   memory_reachable_mutex (memory_reachable_hit Dreach X1)
      (memory_unreachable_cons X2 Dunr) Dfalse
      <- string_reachable_mutex Dreach Dunr Dfalse.
-ho :
   memory_reachable_mutex (memory_reachable_hit X1 Dnotmem)
      (memory_unreachable_omit X2 Dmem) Dfalse
      <- imember_mutex Dmem Dnotmem Dfalse.
-cc :
   memory_reachable_mutex (memory_reachable_cons Dreach)
      (memory_unreachable_cons Dunr X1) Dfalse
      <- memory_reachable_mutex Dreach Dunr Dfalse.
-co :
   memory_reachable_mutex (memory_reachable_cons Dreach)
      (memory_unreachable_omit Dunr X1) Dfalse
      <- memory_reachable_mutex Dreach Dunr Dfalse.
-ccs :
   memory_reachable_mutex (memory_reachable_cons Dreach)
      (memory_unreachable_cs Dunr) Dfalse
      <- memory_reachable_mutex Dreach Dunr Dfalse.
-css :
   memory_reachable_mutex (memory_reachable_cons Dreach)
      (memory_unreachable_ss Dunr) Dfalse
      <- memory_reachable_mutex Dreach Dunr Dfalse.
-cre :
   memory_reachable_mutex (memory_reachable_cons Dreach)
      (memory_unreachable_reserve Dunr) Dfalse
      <- memory_reachable_mutex Dreach Dunr Dfalse.
regs_reachable_mutex :
   Pi N1:nat. Pi SS:sectset. Pi R:regs N1.
      regs_reachable SS R -> regs_unreachable SS R -> false -> type.
-h :
   regs_reachable_mutex (regs_reachable_hit Dreach)
      (regs_unreachable_cons X1 Dunr) Dfalse
      <- string_reachable_mutex Dreach Dunr Dfalse.
-c :
   regs_reachable_mutex (regs_reachable_cons Dreach)
      (regs_unreachable_cons Dunr X1) Dfalse
      <- regs_reachable_mutex Dreach Dunr Dfalse.
stack_reachable_mutex :
   Pi SS:sectset. Pi H:memory. Pi R:regs numregs.
      stack_reachable SS H R -> stack_unreachable SS H R -> false -> type.
- :
   stack_reachable_mutex
      (stack_reachable_ Dreach Dindex Drep Dadd Dss Dimp Drload)
      (stack_unreachable_ Dunr Dindex' Drep' Dadd' Dss' Dimp' Drload') Dfalse
      <- rload*_fun Drload Drload' Dstreq1
      <- implode_word_resp Dstreq1 binary_eq_ Dimp Dimp''
      <- implode_word_fun Dimp'' Dimp' Dbineq1
      <- stack_section_fun Dss Dss' Dbineq2 Dnateq1 Dstreq2
      <- add_resp Dbineq2 binary_eq_ Dbineq1 bit_eq_ Dadd Dadd''
      <- add_commute Dadd'' Dadd1
      <- add_commute Dadd' Dadd2
      <- add_fun1 Dadd1 Dadd2 X2 Dbineq3
      <- represents_resp nat_eq_ Dbineq3 Drep Drep''
      <- represents_fun1 Drep'' Drep' Dnateq2
      <- string_resp Dnateq2 S7 S4 Dstreq3
      <- index_resp Dnateq2 Dstreq2 Dstreq3 string_eq_ Dindex Dindex''
      <- index_fun Dindex'' Dindex' X1 Dstreq4
      <- string_reachable_resp sectset_eq_ Dstreq4 Dreach Dreach'
      <- string_reachable_mutex Dreach' Dunr Dfalse.
state_reachable_mutex :
   Pi SS:sectset. Pi ST:state.
      state_reachable SS ST -> state_unreachable SS ST -> false -> type.
-mem :
   state_reachable_mutex (state_reachable_memory Dreach)
      (state_unreachable_ X1 X2 Dunr) Dfalse
      <- memory_reachable_mutex Dreach Dunr Dfalse.
-regs :
   state_reachable_mutex (state_reachable_regs Dreach)
      (state_unreachable_ X1 Dunr X2) Dfalse
      <- regs_reachable_mutex Dreach Dunr Dfalse.
-tack :
   state_reachable_mutex (state_reachable_stack Dreach)
      (state_unreachable_ Dunr X1 X2) Dfalse
      <- stack_reachable_mutex Dreach Dunr Dfalse.
read_sectset_fun :
   Pi M:memory. Pi OR:oracle. Pi SS1:sectset. Pi OR1:oracle. Pi SS2:sectset.
      Pi OR2:oracle.
      read_sectset M OR SS1 OR1 -> read_sectset M OR SS2 OR2
         -> sectset_eq SS1 SS2 -> oracle_eq OR1 OR2 -> type.
-nil :
   read_sectset_fun read_sectset_nil read_sectset_nil sectset_eq_ oracle_eq_.
-s :
   read_sectset_fun (read_sectset_ss D1) (read_sectset_ss D2) D3 D4
      <- read_sectset_fun D1 D2 D3 D4.
-cs :
   read_sectset_fun (read_sectset_cs D1) (read_sectset_cs D2) D3 D4
      <- read_sectset_fun D1 D2 D3 D4.
-kk :
   read_sectset_fun (read_sectset_keep Drs1 Dconsume1)
      (read_sectset_keep Drs2 Dconsume2) Dsseq Doracleeq'
      <- consume_bit_fun Dconsume2 Dconsume1 X1 Doracleeq
      <- read_sectset_resp memory_eq_ Doracleeq sectset_eq_ oracle_eq_ Drs2
            Drs2'
      <- read_sectset_fun Drs1 Drs2' Dsseq Doracleeq'.
-dd :
   read_sectset_fun (read_sectset_drop Drs1 Dadd1 Drep1 Dconsume1)
      (read_sectset_drop Drs2 Dadd2 Drep2 Dconsume2) Dsseq' Doracleeq'
      <- consume_bit_fun Dconsume2 Dconsume1 X2 Doracleeq
      <- read_sectset_resp memory_eq_ Doracleeq sectset_eq_ oracle_eq_ Drs2
            Drs2'
      <- read_sectset_fun Drs1 Drs2' Dsseq Doracleeq'
      <- represents_fun2 Drep1 Drep2 Dbineq1
      <- add_resp binary_eq_ Dbineq1 binary_eq_ bit_eq_ Dadd1 Dadd1'
      <- add_fun3 Dadd1' Dadd2 X1 Dbineq2
      <- sectset_eq_cons binary_eq_ Dbineq2 Dsseq Dsseq'.
-rev :
   read_sectset_fun (read_sectset_reserved D1) (read_sectset_reserved D2) D3 D4
      <- read_sectset_fun D1 D2 D3 D4.
memory_collect_fun :
   Pi SS:sectset. Pi M:memory. Pi M1:memory. Pi M2:memory.
      memory_collect SS M M1 -> memory_collect SS M M2 -> memory_eq M1 M2
         -> type.
-nil : memory_collect_fun memory_collect_nil memory_collect_nil memory_eq_.
-kk :
   memory_collect_fun (memory_collect_keep Dcoll1 X1)
      (memory_collect_keep Dcoll2 X2) Deq'
      <- memory_collect_fun Dcoll1 Dcoll2 Deq
      <- memory_eq_cons binary_eq_ nat_eq_ section_eq_ Deq Deq'.
-dd :
   memory_collect_fun (memory_collect_drop Dcoll1 X1)
      (memory_collect_drop Dcoll2 X2) Deq
      <- memory_collect_fun Dcoll1 Dcoll2 Deq.
-kd :
   memory_collect_fun (memory_collect_keep X1 Dnotmem)
      (memory_collect_drop X2 Dmem) Deq
      <- imember_mutex Dmem Dnotmem Dfalse
      <- false_implies_memory_eq Dfalse Deq.
-dk :
   memory_collect_fun (memory_collect_drop X1 Dmem)
      (memory_collect_keep X2 Dnotmem) Deq
      <- imember_mutex Dmem Dnotmem Dfalse
      <- false_implies_memory_eq Dfalse Deq.
icollect_fun :
   Pi ST:state. Pi M1:memory. Pi OR1:oracle. Pi M2:memory. Pi OR2:oracle.
      icollect ST M1 OR1 -> icollect ST M2 OR2 -> memory_eq M1 M2
         -> oracle_eq OR1 OR2 -> type.
-yy :
   icollect_fun (icollect_yes Dcoll1 X1 Drs1) (icollect_yes Dcoll2 X2 Drs2)
      Dmemeq Doracleeq
      <- read_sectset_fun Drs1 Drs2 Dsseq Doracleeq
      <- memory_collect_resp Dsseq memory_eq_ memory_eq_ Dcoll1 Dcoll1'
      <- memory_collect_fun Dcoll1' Dcoll2 Dmemeq.
-nn :
   icollect_fun (icollect_no X2 Drs1) (icollect_no X3 Drs2) memory_eq_ Doracleeq
      <- read_sectset_fun Drs1 Drs2 X1 Doracleeq.
icollect_fun| :
   Pi SS:sectset. Pi SS':sectset. Pi OR:oracle. Pi OR':oracle. Pi H:memory.
      Pi R:regs numregs. Pi FR:flags. Pi PC:binary wwb.
      sectset_eq SS SS' -> oracle_eq OR OR'
         -> state_reachable SS (state_ H R FR PC OR)
         -> state_reachable SS' (state_ H R FR PC OR') -> type.
icollect_fun|_ : icollect_fun| sectset_eq_ oracle_eq_ D D.
-ny :
   icollect_fun (icollect_no Dreach Drs1) (icollect_yes X1 Dunr Drs2) Dmemeq
      Doracleeq'
      <- read_sectset_fun Drs1 Drs2 Dsseq Doracleeq
      <- icollect_fun| Dsseq Doracleeq Dreach Dreach'
      <- state_reachable_mutex Dreach' Dunr Dfalse
      <- false_implies_memory_eq Dfalse Dmemeq
      <- false_implies_oracle_eq Dfalse Doracleeq'.
-yn :
   icollect_fun (icollect_yes X1 Dunr Drs2) (icollect_no Dreach Drs1) Dmemeq
      Doracleeq'
      <- read_sectset_fun Drs1 Drs2 Dsseq Doracleeq
      <- icollect_fun| Dsseq Doracleeq Dreach Dreach'
      <- state_reachable_mutex Dreach' Dunr Dfalse
      <- false_implies_memory_eq Dfalse Dmemeq
      <- false_implies_oracle_eq Dfalse Doracleeq'.
igc_fun :
   Pi ST:state. Pi ST1:state. Pi ST2:state.
      igc ST ST1 -> igc ST ST2 -> state_eq ST1 ST2 -> type.
- :
   igc_fun (igc_ Dcoll) (igc_ Dcoll') Deq
      <- icollect_fun Dcoll Dcoll' Dmeq Doreq
      <- state_resp Dmeq regs_eq_ binary_eq_ flags_eq_ Doreq Deq.
maybe_imember : binary wwb -> sectset -> type.
maybe_imember_yes : maybe_imember A LS <- imember A B1 LS.
maybe_imember_no : maybe_imember A LS <- inotmember A LS.
decide_imember : Pi A:binary wwb. Pi SS:sectset. maybe_imember A SS -> type.
decide_imember_nil :
   decide_imember B1 sectnil (maybe_imember_no inotmember_nil).
decide_imember_cons| :
   Pi A:binary wwb. Pi A':binary wwb. Pi SS:sectset.
      maybe_binary_eq A A' -> maybe_imember A SS
         -> Pi A1:binary wwb. maybe_imember A (sectcons A' A1 SS) -> type.
decide_imember_cons|_hit :
   decide_imember_cons| (maybe_binary_eq_yes binary_eq_) X1 B2
      (maybe_imember_yes imember_hit).
decide_imember_cons|_yes :
   decide_imember_cons| X1 (maybe_imember_yes D) B4
      (maybe_imember_yes (imember_cons D)).
decide_imember_cons|_no :
   decide_imember_cons| (maybe_binary_eq_no Dneq) (maybe_imember_no Dnm) B3
      (maybe_imember_no (inotmember_cons Dnm Dneq)).
decide_imember_cons :
   decide_imember A (sectcons A' A1 SS) D
      <- decide_imember A SS Dmmem
      <- compare_for_binary_eq A A' Dmeq
      <- decide_imember_cons| Dmeq Dmmem A1 D.
maybe_pointer : Pi N1:nat. binary wwb -> binary wwb -> string N1 -> type.
maybe_pointer_yes :
   maybe_pointer Astart Aend (/ B0 (/ B3 (/ B4 (/ B5 S))))
      <- implode_word (/ B0 (/ B3 (/ B4 (/ B5 #)))) A
      <- add Astart B2 A zero
      <- add A B1 Aend zero.
maybe_pointer_no_a :
   maybe_pointer Astart Aend (/ B0 (/ B1 (/ B2 (/ B3 S))))
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) A
      <- add Aend Bdiff A zero
      <- is_nonzero Bdiff.
maybe_pointer_no_b :
   maybe_pointer Astart Aend (/ B0 (/ B1 (/ B2 (/ B3 S))))
      <- implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) A
      <- add A Bdiff Astart zero
      <- is_nonzero Bdiff.
maybe_pointer_no_len : maybe_pointer Astart Aend S <- lt N ww.
decide_pointer :
   Pi N:nat. Pi Astart:binary wwb. Pi Aend:binary wwb. Pi S:string N.
      maybe_pointer Astart Aend S -> type.
decide_pointer_cons* :
   Pi N:nat. Pi B0:binary bw. Pi B1:binary bw. Pi B2:binary bw. Pi B3:binary bw.
      Pi A:binary wwb. Pi Bdiff:binary wwb. Pi C1:bit. Pi Bdiff1:binary wwb.
      Pi C2:bit. Pi Astart:binary wwb. Pi Aend:binary wwb. Pi S:string N.
      implode_word (/ B0 (/ B1 (/ B2 (/ B3 #)))) A -> add Astart Bdiff A C1
         -> add A Bdiff1 Aend C2
         -> maybe_pointer Astart Aend (/ B0 (/ B1 (/ B2 (/ B3 S)))) -> type.
-00 :
   decide_pointer_cons* Astart Aend S Dimp Dadd1 Dadd2
      (maybe_pointer_yes Dadd2 Dadd1 Dimp).
-1_ :
   decide_pointer_cons* Astart Aend S Dimp Dadd1 X3
      (maybe_pointer_no_b Dinz1 Dadd1''' Dimp)
      <- add_carry_nonzero Dadd1 X2 Dinz
      <- can_neg_nonzero Bdiff1 Bdiff1n Dinz Dneg
      <- add_commute Dadd1 Dadd1'
      <- add_invert Dadd1' Dneg flipbit_one Dadd1''
      <- add_commute Dadd1'' Dadd1'''
      <- neg_nocarry_nonzero Dneg X1 Dinz1.
-_1 :
   decide_pointer_cons* Astart Aend S Dimp X3 Dadd2
      (maybe_pointer_no_a Dinz1 Dadd2''' Dimp)
      <- add_carry_nonzero Dadd2 X2 Dinz
      <- can_neg_nonzero Bdiff2 Bdiff2n Dinz Dneg
      <- add_commute Dadd2 Dadd2'
      <- add_invert Dadd2' Dneg flipbit_one Dadd2''
      <- add_commute Dadd2'' Dadd2'''
      <- neg_nocarry_nonzero Dneg X1 Dinz1.
decide_pointer_cons :
   Pi N:nat. Pi Astart:binary wwb. Pi Aend:binary wwb. Pi S:string N.
      leq ww N -> maybe_pointer Astart Aend S -> type.
- :
   decide_pointer_cons Astart Aend (/ B0 (/ B1 (/ B2 (/ B3 S)))) (leq_4 leq_z) Dmp
      <- can_binary_append B3 B2 B32 sum_2_bytes Dbapp1
      <- can_binary_append B32 B1 B321 sum_3_bytes Dbapp2
      <- can_binary_append B321 B0 B3210 sum_4_bytes Dbapp3
      <- can_add' Astart Bdiff B3210 C1 Dadd1
      <- can_add' B3210 Bdiff1 Aend C2 Dadd2
      <- decide_pointer_cons* Astart Aend S (implode_word_ Dbapp3 Dbapp2 Dbapp1)
            Dadd1 Dadd2 Dmp.
decide_pointer* :
   Pi N:nat. Pi Astart:binary wwb. Pi Aend:binary wwb. Pi S:string N.
      leq_gt ww N -> maybe_pointer Astart Aend S -> type.
-l :
   decide_pointer* Astart Aend S (leq_gt_leq Dleq) Dmp
      <- decide_pointer_cons Astart Aend S Dleq Dmp.
-g : decide_pointer* Astart Aend S (leq_gt_gt Dlt) (maybe_pointer_no_len Dlt).
- :
   decide_pointer Astart Aend S D
      <- dichotomy ww N Dleqgt
      <- decide_pointer* Astart Aend S Dleqgt D.
maybe_reachable : Pi N1:nat. binary wwb -> binary wwb -> string N1 -> type.
maybe_reachable_yes : maybe_reachable Astart Aend S <- ireachable Astart Aend S.
maybe_reachable_no :
   maybe_reachable Astart Aend S <- iunreachable Astart Aend S.
length_inotpointer :
   Pi N:nat.
      lt N ww
         -> Pi Astart:binary wwb. Pi Aend:binary wwb. Pi S:string N.
                inot_pointer Astart Aend S -> type.
-0 :
   length_inotpointer lt_z Astart Aend S Dino
      <- string_eq_nil S nat_eq_ Dseq1
      <- inot_pointer_resp binary_eq_ binary_eq_ Dseq1 inot_pointer_0 Dino.
-1 :
   length_inotpointer (lt_s lt_z) Astart Aend (/ B S) Dino
      <- string_eq_nil S nat_eq_ Dseq1
      <- string_eq_cons Dseq1 binary_eq_ Dseq2
      <- inot_pointer_resp binary_eq_ binary_eq_ Dseq2 inot_pointer_1 Dino.
-2 :
   length_inotpointer (lt_s (lt_s lt_z)) Astart Aend (/ B0 (/ B1 S)) Dino
      <- string_eq_nil S nat_eq_ Dseq1
      <- string_eq_cons Dseq1 binary_eq_ Dseq2
      <- string_eq_cons Dseq2 binary_eq_ Dseq3
      <- inot_pointer_resp binary_eq_ binary_eq_ Dseq3 inot_pointer_2 Dino.
-3 :
   length_inotpointer (lt_s (lt_s (lt_s lt_z))) Astart Aend (/ B0 (/ B1 (/ B2 S)))
      Dino
      <- string_eq_nil S nat_eq_ Dseq1
      <- string_eq_cons Dseq1 binary_eq_ Dseq2
      <- string_eq_cons Dseq2 binary_eq_ Dseq3
      <- string_eq_cons Dseq3 binary_eq_ Dseq4
      <- inot_pointer_resp binary_eq_ binary_eq_ Dseq4 inot_pointer_3 Dino.
decide_reachable :
   Pi N:nat. Pi Astart:binary wwb. Pi Aend:binary wwb. Pi S:string N.
      maybe_reachable Astart Aend S -> type.
-n : decide_reachable B1 B2 # (maybe_reachable_no iunreachable_null).
decide_reachable_cons| :
   Pi N1:nat. Pi Astart:binary wwb. Pi Aend:binary wwb. Pi B:binary bw.
      Pi S:string N1.
      maybe_pointer Astart Aend (/ B S) -> maybe_reachable Astart Aend S
         -> maybe_reachable Astart Aend (/ B S) -> type.
-h :
   decide_reachable_cons| (maybe_pointer_yes D1 D2 D3) X1
      (maybe_reachable_yes (ireachable_hit D1 D2 D3)).
-c :
   decide_reachable_cons| X1 (maybe_reachable_yes D)
      (maybe_reachable_yes (ireachable_cons D)).
-na :
   decide_reachable_cons| (maybe_pointer_no_a D1 D2 D3)
      (maybe_reachable_no Dunr)
      (maybe_reachable_no (iunreachable_cons Dunr (inot_pointer_above D1 D2 D3))).
-nb :
   decide_reachable_cons| (maybe_pointer_no_b D1 D2 D3)
      (maybe_reachable_no Dunr)
      (maybe_reachable_no (iunreachable_cons Dunr (inot_pointer_below D1 D2 D3))).
-nl :
   decide_reachable_cons| (maybe_pointer_no_len Dlt) (maybe_reachable_no Dunr)
      (maybe_reachable_no (iunreachable_cons Dunr Dino))
      <- length_inotpointer Dlt B1 B2 (/ B3 S1) Dino.
-c :
   decide_reachable Astart Aend (/ B S) D
      <- decide_reachable Astart Aend S Dmunr
      <- decide_pointer Astart Aend (/ B S) Dmp
      <- decide_reachable_cons| Dmp Dmunr D.
maybe_string_reachable : Pi N1:nat. sectset -> string N1 -> type.
maybe_string_reachable_yes :
   maybe_string_reachable SS S <- string_reachable SS S.
maybe_string_reachable_no :
   maybe_string_reachable SS S <- string_unreachable SS S.
decide_string_reachable :
   Pi N:nat. Pi SS:sectset. Pi S:string N. maybe_string_reachable SS S -> type.
decide_string_reachable_nil :
   decide_string_reachable sectnil S1
      (maybe_string_reachable_no string_unreachable_nil).
decide_string_reachable_cons| :
   Pi N1:nat. Pi L:binary wwb. Pi B:binary wwb. Pi S:string N1. Pi SS:sectset.
      maybe_reachable L B S -> maybe_string_reachable SS S
         -> maybe_string_reachable (sectcons L B SS) S -> type.
decide_string_reachable_hit :
   decide_string_reachable_cons| (maybe_reachable_yes D) X1
      (maybe_string_reachable_yes (string_reachable_hit D)).
decide_string_reachable_cons_yes :
   decide_string_reachable_cons| X1 (maybe_string_reachable_yes D)
      (maybe_string_reachable_yes (string_reachable_cons D)).
decide_string_reachable_cons_no :
   decide_string_reachable_cons| (maybe_reachable_no Dunr)
      (maybe_string_reachable_no Dvunr)
      (maybe_string_reachable_no (string_unreachable_cons Dvunr Dunr)).
decide_string_reachable_cons :
   decide_string_reachable (sectcons L B SS) S D
      <- decide_reachable L B S Dmr
      <- decide_string_reachable SS S Dmvr
      <- decide_string_reachable_cons| Dmr Dmvr D.
maybe_memory_reachable : sectset -> memory -> type.
maybe_memory_reachable_yes :
   maybe_memory_reachable SS H <- memory_reachable SS H.
maybe_memory_reachable_no :
   maybe_memory_reachable SS H <- memory_unreachable SS H.
decide_memory_reachable :
   Pi SS:sectset. Pi H:memory. maybe_memory_reachable SS H -> type.
-n :
   decide_memory_reachable SS1 mnil
      (maybe_memory_reachable_no memory_unreachable_nil).
decide_memory_reachable_cs :
   Pi Nsize:nat. Pi SS:sectset. Pi H:memory. Pi Astart:binary wwb.
      Pi S:string Nsize.
      maybe_memory_reachable SS H
         -> maybe_memory_reachable SS
               (mcons Astart Nsize (section_valid cs S) H) -> type.
-y :
   decide_memory_reachable_cs Astart S (maybe_memory_reachable_yes Dmmr)
      (maybe_memory_reachable_yes (memory_reachable_cons Dmmr)).
-n :
   decide_memory_reachable_cs Astart S (maybe_memory_reachable_no Dmunr)
      (maybe_memory_reachable_no (memory_unreachable_cs Dmunr)).
-cs :
   decide_memory_reachable SS (mcons A N1 (section_valid cs S) Mrest) Dmmr1
      <- decide_memory_reachable SS Mrest Dmmr
      <- decide_memory_reachable_cs A S Dmmr Dmmr1.
decide_memory_reachable_ss :
   Pi Nsize:nat. Pi SS:sectset. Pi H:memory. Pi Astart:binary wwb.
      Pi S:string Nsize.
      maybe_memory_reachable SS H
         -> maybe_memory_reachable SS
               (mcons Astart Nsize (section_valid ss S) H) -> type.
-y :
   decide_memory_reachable_ss Astart S (maybe_memory_reachable_yes Dmmr)
      (maybe_memory_reachable_yes (memory_reachable_cons Dmmr)).
-n :
   decide_memory_reachable_ss Astart S (maybe_memory_reachable_no Dmunr)
      (maybe_memory_reachable_no (memory_unreachable_ss Dmunr)).
-s :
   decide_memory_reachable SS (mcons A N1 (section_valid ss S) Mrest) Dmmr1
      <- decide_memory_reachable SS Mrest Dmmr
      <- decide_memory_reachable_ss A S Dmmr Dmmr1.
decide_memory_reachable_reserve :
   Pi Nsize:nat. Pi SS:sectset. Pi H:memory. Pi Astart:binary wwb.
      Pi RSECT:rsection Nsize.
      maybe_memory_reachable SS H
         -> maybe_memory_reachable SS
               (mcons Astart Nsize (section_reserved RSECT) H) -> type.
-y :
   decide_memory_reachable_reserve Astart S (maybe_memory_reachable_yes Dmmr)
      (maybe_memory_reachable_yes (memory_reachable_cons Dmmr)).
-n :
   decide_memory_reachable_reserve Astart S (maybe_memory_reachable_no Dmunr)
      (maybe_memory_reachable_no (memory_unreachable_reserve Dmunr)).
-re :
   decide_memory_reachable SS (mcons A N1 (section_reserved RSECT) Mrest) Dmmr1
      <- decide_memory_reachable SS Mrest Dmmr
      <- decide_memory_reachable_reserve A RSECT Dmmr Dmmr1.
decide_memory_reachable_hs| :
   Pi SS:sectset. Pi H:memory. Pi A:binary wwb. Pi N:nat. Pi S:string N.
      maybe_memory_reachable SS H -> maybe_imember A SS
         -> maybe_string_reachable SS S
         -> maybe_memory_reachable SS (mcons A N (section_valid hs S) H) -> type.
-h :
   decide_memory_reachable_hs| X1 (maybe_imember_no Dnm)
      (maybe_string_reachable_yes Dvr)
      (maybe_memory_reachable_yes (memory_reachable_hit Dvr Dnm)).
-y :
   decide_memory_reachable_hs| (maybe_memory_reachable_yes D) X1 X2
      (maybe_memory_reachable_yes (memory_reachable_cons D)).
-o' :
   decide_memory_reachable_hs| (maybe_memory_reachable_no Dhunr)
      (maybe_imember_yes Dmem) X1
      (maybe_memory_reachable_no (memory_unreachable_omit Dhunr Dmem)).
-n :
   decide_memory_reachable_hs| (maybe_memory_reachable_no Dhunr) X1
      (maybe_string_reachable_no Dvunr)
      (maybe_memory_reachable_no (memory_unreachable_cons Dhunr Dvunr)).
decide_memory_reachable_hs :
   decide_memory_reachable SS (mcons A N1 (section_valid hs S) Mrest) D
      <- decide_memory_reachable SS Mrest Dmhr
      <- decide_imember A SS Dmmem
      <- decide_string_reachable SS S Dmr
      <- decide_memory_reachable_hs| Dmhr Dmmem Dmr D.
maybe_regs_reachable : Pi N1:nat. sectset -> regs N1 -> type.
maybe_regs_reachable_yes : maybe_regs_reachable SS R <- regs_reachable SS R.
maybe_regs_reachable_no : maybe_regs_reachable SS R <- regs_unreachable SS R.
decide_regs_reachable :
   Pi N:nat. Pi SS:sectset. Pi R:regs N. maybe_regs_reachable SS R -> type.
decide_regs_reachable_nil :
   decide_regs_reachable SS1 regs_nil
      (maybe_regs_reachable_no regs_unreachable_nil).
decide_regs_reachable_cons| :
   Pi N1:nat. Pi SS:sectset. Pi R:regs N1. Pi S:string ww.
      maybe_regs_reachable SS R -> maybe_string_reachable SS S
         -> maybe_regs_reachable SS (regs_cons S R) -> type.
decide_regs_reachable_cons|_hit :
   decide_regs_reachable_cons| X1 (maybe_string_reachable_yes D)
      (maybe_regs_reachable_yes (regs_reachable_hit D)).
decide_regs_reachable_cons|_yes :
   decide_regs_reachable_cons| (maybe_regs_reachable_yes D) X1
      (maybe_regs_reachable_yes (regs_reachable_cons D)).
decide_regs_reachable_cons|_no :
   decide_regs_reachable_cons| (maybe_regs_reachable_no Drunr)
      (maybe_string_reachable_no Dvunr)
      (maybe_regs_reachable_no (regs_unreachable_cons Drunr Dvunr)).
decide_regs_reachable_cons :
   decide_regs_reachable SS (regs_cons S R) D
      <- decide_regs_reachable SS R Dmrr
      <- decide_string_reachable SS S Dmvr
      <- decide_regs_reachable_cons| Dmrr Dmvr D.
maybe_stack_reachable : sectset -> memory -> regs numregs -> type.
maybe_stack_reachable_yes :
   maybe_stack_reachable SS H R <- stack_reachable SS H R.
maybe_stack_reachable_no :
   maybe_stack_reachable SS H R <- stack_unreachable SS H R.
decide_stack_reachable :
   Pi CI1:corresp_info. Pi H:memory. Pi R:regs numregs. Pi RF1:flags.
      Pi B1:binary wwb. Pi OR1:oracle. Pi M1:machine.
      impl_machine CI1 (state_ H R RF1 B1 OR1) M1
         -> Pi SS:sectset. maybe_stack_reachable SS H R -> type.
decide_stack_reachable| :
   Pi R:regs numregs. Pi Wesp:string ww. Pi Aesp:binary wwb. Pi H:memory.
      Pi Astart:binary wwb. Pi Nsize:nat. Pi Sall:string Nsize.
      Pi Boffset:binary wwb. Pi Noffset:nat. Pi N1:nat. Pi S1:string Noffset.
      Pi S:string N1. Pi SS:sectset.
      rload* R esp Wesp -> implode_word Wesp Aesp
         -> stack_section H Astart Nsize Sall -> add Astart Boffset Aesp zero
         -> represents Noffset Boffset -> index Noffset Sall S1 S
         -> maybe_string_reachable SS S -> maybe_stack_reachable SS H R -> type.
decide_stack_reachable|_yes :
   decide_stack_reachable| Drload Dimp Dss Dadd Drep Dindex
      (maybe_string_reachable_yes Dreach)
      (maybe_stack_reachable_yes
          (stack_reachable_ Dreach Dindex Drep Dadd Dss Dimp Drload)).
decide_stack_reachable|_no :
   decide_stack_reachable| Drload Dimp Dss Dadd Drep Dindex
      (maybe_string_reachable_no Dunr)
      (maybe_stack_reachable_no
          (stack_unreachable_ Dunr Dindex Drep Dadd Dss Dimp Drload)).
decide_stack_reachable_ :
   decide_stack_reachable Dimach SS D
      <- can_zget Dimach Drload Dimp Dss Dadd Drep Dindex
      <- decide_string_reachable SS S4 Dmreach
      <- decide_stack_reachable| Drload Dimp Dss Dadd Drep Dindex Dmreach D.
maybe_state_reachable : sectset -> state -> type.
maybe_state_reachable_yes :
   maybe_state_reachable SS ST <- state_reachable SS ST.
maybe_state_reachable_no :
   maybe_state_reachable SS ST <- state_unreachable SS ST.
decide_state_reachable :
   Pi CI1:corresp_info. Pi ST:state. Pi M1:machine.
      impl_machine CI1 ST M1
         -> Pi SS:sectset. maybe_state_reachable SS ST -> type.
decide_state_reachable| :
   Pi SS:sectset. Pi H:memory. Pi R:regs numregs. Pi RF1:flags.
      Pi B1:binary wwb. Pi OR1:oracle.
      maybe_memory_reachable SS H -> maybe_regs_reachable SS R
         -> maybe_stack_reachable SS H R
         -> maybe_state_reachable SS (state_ H R RF1 B1 OR1) -> type.
decide_state_reachable|_memory :
   decide_state_reachable| (maybe_memory_reachable_yes D) X1 X2
      (maybe_state_reachable_yes (state_reachable_memory D)).
decide_state_reachable|_regs :
   decide_state_reachable| X1 (maybe_regs_reachable_yes D) X2
      (maybe_state_reachable_yes (state_reachable_regs D)).
decide_state_reachable|_stack :
   decide_state_reachable| X1 X2 (maybe_stack_reachable_yes D)
      (maybe_state_reachable_yes (state_reachable_stack D)).
decide_state_reachable|_no :
   decide_state_reachable| (maybe_memory_reachable_no Dhunr)
      (maybe_regs_reachable_no Drunr) (maybe_stack_reachable_no Dsunr)
      (maybe_state_reachable_no (state_unreachable_ Dsunr Drunr Dhunr)).
decide_state_reachable_ :
   decide_state_reachable Dimach SS1 D
      <- decide_memory_reachable SS1 H1 Dmm
      <- decide_regs_reachable SS1 R1 Dmr
      <- decide_stack_reachable Dimach SS1 Dms
      <- decide_state_reachable| Dmm Dmr Dms D.
can_read_sectset* :
   Pi B1:binary wwb. Pi H:memory.
      memory_wf B1 H
         -> Pi OR:oracle. Pi SS:sectset. Pi OR':oracle.
                read_sectset H OR SS OR' -> type.
can_read_sectset*_nil :
   can_read_sectset* memory_wf_nil OR sectnil OR read_sectset_nil.
can_read_sectset*_ss :
   can_read_sectset* (memory_wf_cons Dorder X1 X2 X3 X4) OR SS OR'
      (read_sectset_ss D)
      <- can_read_sectset* Dorder OR SS OR' D.
can_read_sectset*_cs :
   can_read_sectset* (memory_wf_cons Dorder X1 X2 X3 X4) OR SS OR'
      (read_sectset_cs D)
      <- can_read_sectset* Dorder OR SS OR' D.
can_read_sectset*_re :
   can_read_sectset* (memory_wf_cons Dorder X1 X2 X3 X4) OR SS OR'
      (read_sectset_reserved D)
      <- can_read_sectset* Dorder OR SS OR' D.
can_read_sectset*| :
   Pi H:memory. Pi OR':oracle. Pi SS:sectset. Pi OR'':oracle. Pi OR:oracle.
      Pi BIT:bit. Pi Nsize:nat. Pi Bsize:binary wwb. Pi Astart:binary wwb.
      Pi Aend:binary wwb. Pi SS':sectset.
      read_sectset H OR' SS OR'' -> consume_bit OR BIT OR'
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> Pi S:string Nsize.
                read_sectset (mcons Astart Nsize (section_valid hs S) H) OR SS'
                   OR''
                   -> type.
can_read_sectset*|_keep :
   can_read_sectset*| Drss Dconsume X1 X2 S1 (read_sectset_keep Drss Dconsume).
can_read_sectset*|_drop :
   can_read_sectset*| Drss Dconsume Drep Dadd S
      (read_sectset_drop Drss Dadd Drep Dconsume).
can_read_sectset*_hs :
   can_read_sectset* (memory_wf_cons Dorder Dadd1 Drep X1 Dadd2) OR SS1 OR''
      Drss'
      <- can_consume_bit OR Dconsume
      <- can_read_sectset* Dorder OR' SS OR'' Drss
      <- can_read_sectset*| Drss Dconsume Drep Dadd1 S1 Drss'.
can_read_sectset :
   Pi CI1:corresp_info. Pi H:memory. Pi R1:regs numregs. Pi RF1:flags.
      Pi B1:binary wwb. Pi OR1:oracle. Pi M1:machine.
      impl_machine CI1 (state_ H R1 RF1 B1 OR1) M1
         -> Pi OR:oracle. Pi SS:sectset. Pi OR':oracle.
                read_sectset H OR SS OR' -> type.
can_read_sectset_ :
   can_read_sectset (impl_ X1 Dorder X2 X3 X4 X5 X6 X7 X8) OR SS OR' Drss
      <- can_read_sectset* Dorder OR SS OR' Drss.
can_memory_collect :
   Pi SS:sectset. Pi H:memory. Pi H':memory. memory_collect SS H H' -> type.
can_memory_collect_nil : can_memory_collect SS1 mnil mnil memory_collect_nil.
can_memory_collect_cons| :
   Pi Astart:binary wwb. Pi SS:sectset. Pi H:memory. Pi H':memory.
      Pi H'':memory.
      maybe_imember Astart SS -> memory_collect SS H H'
         -> Pi Nsize:nat. Pi SECT:section Nsize.
                memory_collect SS (mcons Astart Nsize SECT H) H'' -> type.
can_memory_collect_cons|_keep :
   can_memory_collect_cons| (maybe_imember_no Dnm) D N1 SECT1
      (memory_collect_keep D Dnm).
can_memory_collect_cons|_drop :
   can_memory_collect_cons| (maybe_imember_yes Dmem) D N1 SECT1
      (memory_collect_drop D Dmem).
can_memory_collect_cons :
   can_memory_collect SS (mcons Astart Nsize SECT H) H'' D
      <- decide_imember Astart SS Dmmem
      <- can_memory_collect SS H H' Dcoll
      <- can_memory_collect_cons| Dmmem Dcoll Nsize SECT D.
can_collect :
   Pi CI1:corresp_info. Pi ST:state. Pi M1:machine.
      impl_machine CI1 ST M1
         -> Pi H:memory. Pi OR:oracle. icollect ST H OR -> type.
can_collect| :
   Pi H:memory. Pi OR:oracle. Pi SS:sectset. Pi OR':oracle. Pi R:regs numregs.
      Pi FR:flags. Pi PC:binary wwb. Pi H':memory.
      read_sectset H OR SS OR'
         -> maybe_state_reachable SS (state_ H R FR PC OR')
         -> icollect (state_ H R FR PC OR) H' OR' -> type.
can_collect|_yes :
   can_collect| Drss (maybe_state_reachable_yes Dreach)
      (icollect_no Dreach Drss).
can_collect|_no :
   can_collect| Drss (maybe_state_reachable_no Dunr)
      (icollect_yes Dcoll Dunr Drss)
      <- can_memory_collect SS1 H1 H2 Dcoll.
can_collect_ :
   can_collect Dimach H2 OR' D
      <- can_read_sectset Dimach OR SS OR' Drss
      <- consume_preserves_impl Dimach OR' Dimach'
      <- decide_state_reachable Dimach' SS Dmreach
      <- can_collect| Drss Dmreach D.
sectset_absent : locmap -> sectset -> type.
sectset_absent_nil : sectset_absent LM1 sectnil.
sectset_absent_cons :
   sectset_absent LM (sectcons Astart Aend SS)
      <- notin_lm Astart LM
      <- sectset_absent LM SS.
sectset_extend : sectset -> binary wwb -> binary wwb -> sectset -> type.
sectset_extend_cons :
   sectset_extend (sectcons As1 Ae1 SS) Astart Aend (sectcons As1 Ae1 SS1)
      <- sectset_extend SS Astart Aend SS1.
sectset_extend_before : sectset_extend SS Astart Aend (sectcons Astart Aend SS).
impl_locset : locmap -> locset -> sectset -> type.
impl_locset_nil : impl_locset LM locnil SS <- sectset_absent LM SS.
impl_locset_cons :
   impl_locset LM (loccons L Nsize LS) SS
      <- lookup_loc LM L Astart one'
      <- represents Nsize Bsize
      <- add Astart Bsize Aend zero
      <- sectset_extend SS1 Astart Aend SS
      <- impl_locset LM LS SS1.
sectset_extend_resp :
   Pi SS:sectset. Pi SS':sectset. Pi A1:binary wwb. Pi A1':binary wwb.
      Pi A2:binary wwb. Pi A2':binary wwb. Pi SS1:sectset. Pi SS1':sectset.
      sectset_eq SS SS' -> binary_eq A1 A1' -> binary_eq A2 A2'
         -> sectset_eq SS1 SS1' -> sectset_extend SS A1 A2 SS1
         -> sectset_extend SS' A1' A2' SS1' -> type.
- : sectset_extend_resp sectset_eq_ binary_eq_ binary_eq_ sectset_eq_ D D.
impl_locset_resp :
   Pi LS:locset. Pi LS':locset. Pi SS:sectset. Pi SS':sectset. Pi LM:locmap.
      locset_eq LS LS' -> sectset_eq SS SS' -> impl_locset LM LS SS
         -> impl_locset LM LS' SS' -> type.
impl_locset_resp_ : impl_locset_resp locset_eq_ sectset_eq_ D D.
lookup_loc_resp :
   Pi L1:loc. Pi L2:loc. Pi A1:binary wwb. Pi A2:binary wwb. Pi BIT1:bit.
      Pi BIT2:bit. Pi LM:locmap.
      loc_eq L1 L2 -> binary_eq A1 A2 -> bit_eq BIT1 BIT2
         -> lookup_loc LM L1 A1 BIT1 -> lookup_loc LM L2 A2 BIT2 -> type.
- : lookup_loc_resp loc_eq_ binary_eq_ bit_eq_ D D.
nil_sectset_impl_nil :
   Pi LM:locmap. Pi LS:locset.
      impl_locset LM LS sectnil -> locset_eq locnil LS -> type.
- : nil_sectset_impl_nil (impl_locset_nil X1) locset_eq_.
explode_impl_locset_cons :
   Pi LM:locmap. Pi L:loc. Pi N:nat. Pi LS:locset. Pi SS:sectset.
      Pi A1:binary wwb. Pi B:binary wwb. Pi A2:binary wwb. Pi SS1:sectset.
      impl_locset LM (loccons L N LS) SS -> lookup_loc LM L A1 one'
         -> add A1 B A2 zero -> represents N B -> impl_locset LM LS SS1
         -> sectset_extend SS1 A1 A2 SS -> type.
- :
   explode_impl_locset_cons (impl_locset_cons Dils Dsext Dadd Drep Dlook) Dlook
      Dadd Drep Dils Dsext.
sectset_extend_member :
   Pi SS1:sectset. Pi A1:binary wwb. Pi A2:binary wwb. Pi SS:sectset.
      sectset_extend SS1 A1 A2 SS -> imember A1 A2 SS -> type.
-b : sectset_extend_member sectset_extend_before imember_hit.
-c :
   sectset_extend_member (sectset_extend_cons Dsext) (imember_cons Dimem)
      <- sectset_extend_member Dsext Dimem.
sectset_extend_notmember :
   Pi A:binary wwb. Pi SS:sectset. Pi SS1:sectset. Pi A1:binary wwb.
      Pi A2:binary wwb.
      inotmember A SS -> sectset_extend SS1 A1 A2 SS -> inotmember A SS1 -> type.
-b :
   sectset_extend_notmember (inotmember_cons Dinm X1) sectset_extend_before Dinm.
-c :
   sectset_extend_notmember (inotmember_cons Dinm Dneq)
      (sectset_extend_cons Dsext) (inotmember_cons Dinm1 Dneq)
      <- sectset_extend_notmember Dinm Dsext Dinm1.
sectset_absent_member_contra :
   Pi LM:locmap. Pi L:loc. Pi B:binary wwb. Pi SS:sectset. Pi B1:binary wwb.
      lookup_loc LM L B one' -> sectset_absent LM SS -> imember B B1 SS -> 
false
         -> type.
-h :
   sectset_absent_member_contra Dlook (sectset_absent_cons X1 Dnotin)
      imember_hit Dfalse
      <- notin_lookup_contra Dnotin Dlook Dfalse.
-c :
   sectset_absent_member_contra Dlook (sectset_absent_cons Dsabs X1)
      (imember_cons Dimem) Dfalse
      <- sectset_absent_member_contra Dlook Dsabs Dimem Dfalse.
false_implies_member :
   Pi N:nat. false -> Pi L:loc. Pi LS:locset. member L N LS -> type.
false_implies_imember :
   Pi A':binary wwb.
      false -> Pi A:binary wwb. Pi SS:sectset. imember A A' SS -> type.
sectset_extend_valid :
   Pi B1:binary wwb. Pi B2:binary wwb. Pi SS:sectset. Pi B3:binary wwb.
      Pi SS1:sectset. Pi B4:binary wwb. Pi B5:binary wwb.
      imember B1 B2 SS -> binary_neq B1 B3 -> sectset_extend SS1 B3 B4 SS
         -> imember B1 B5 SS1 -> type.
-h :
   sectset_extend_valid imember_hit Dneq (sectset_extend_cons Dext) imember_hit.
-c :
   sectset_extend_valid (imember_cons Dimem) Dneq (sectset_extend_cons Dext)
      (imember_cons Dimem1)
      <- sectset_extend_valid Dimem Dneq Dext Dimem1.
-b : sectset_extend_valid (imember_cons Dimem) Dneq sectset_extend_before Dimem.
-bh :
   sectset_extend_valid imember_hit Dneq sectset_extend_before Dimem
      <- binary_neq_contradict Dneq Dfalse
      <- false_implies_imember Dfalse B2 SS1 Dimem.
simulate_imember :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi L:loc.
      Pi A:binary wwb. Pi B1:binary wwb. Pi N1:nat.
      locmap_wf LM L1 -> impl_locset LM LS SS -> lookup_loc LM L A one'
         -> imember A B1 SS -> member L N1 LS -> type.
-n :
   simulate_imember X1 (impl_locset_nil Dabs) Dlook Dimem Dmem
      <- sectset_absent_member_contra Dlook Dabs Dimem Dfalse
      <- false_implies_member Dfalse L1 locnil Dmem.
simulate_imember* :
   Pi LM:locmap. Pi L1:loc. Pi L2:loc. Pi Astart1:binary wwb. Pi L3:loc.
      Pi Astart2:binary wwb. Pi LS:locset. Pi SS1:sectset. Pi Aend1:binary wwb.
      Pi SS:sectset. Pi N1:nat. Pi N2:nat. Pi Bdiff2:binary N1.
      Pi B1:binary wwb. Pi N3:nat.
      locmap_wf LM L1 -> lookup_loc LM L2 Astart1 one'
         -> lookup_loc LM L3 Astart2 one' -> impl_locset LM LS SS1
         -> sectset_extend SS1 Astart1 Aend1 SS -> represents N2 Bdiff2
         -> imember Astart2 B1 SS -> maybe_binary_eq Astart1 Astart2
         -> member L3 N3 (loccons L2 N2 LS) -> type.
-e :
   simulate_imember* Dlwf Dlook1 Dlook2 Dils Dsext Drep Dimem
      (maybe_binary_eq_yes Deq) Dmember
      <- lookup_loc_resp loc_eq_ Deq bit_eq_ Dlook1 Dlook1'
      <- lookup_loc_fun1 Dlwf Dlook2 Dlook1' Dloceq
      <- locset_eq_cons Dloceq nat_eq_ locset_eq_ Dlocseteq
      <- member_resp loc_eq_ nat_eq_ Dlocseteq member_hit Dmember.
-n :
   simulate_imember* Dlwf Dlook1 Dlook2 Dils Dsext Drep Dimem
      (maybe_binary_eq_no Dneq) (member_cons Dmember)
      <- binary_neq_symm Dneq Dneq1
      <- sectset_extend_valid Dimem Dneq1 Dsext Dimem1
      <- simulate_imember Dlwf Dils Dlook2 Dimem1 Dmember.
-c :
   simulate_imember Dlwf (impl_locset_cons Dils Dsext Dadd Drep Dlook1) Dlook2
      Dimem Dmember
      <- compare_for_binary_eq B1 B2 Dmeq
      <- simulate_imember* Dlwf Dlook1 Dlook2 Dils Dsext Drep Dimem Dmeq Dmember.
false_implies_notmember :
   false -> Pi L:loc. Pi LS:locset. notmember L LS -> type.
maybe_loc_eq : loc -> loc -> type.
maybe_loc_eq_yes : maybe_loc_eq L L' <- loc_eq L L'.
maybe_loc_eq_no : maybe_loc_eq L L' <- loc_neq L L'.
compare_for_loc_eq : Pi L1:loc. Pi L2:loc. maybe_loc_eq L1 L2 -> type.
compare_for_loc_eq| :
   Pi N1:nat. Pi N2:nat. maybe_eq N1 N2 -> maybe_loc_eq (lc N1) (lc N2) -> type.
compare_for_loc_eq|_yes :
   compare_for_loc_eq| (maybe_eq_yes nat_eq_) (maybe_loc_eq_yes loc_eq_).
compare_for_loc_eq|_no :
   compare_for_loc_eq| (maybe_eq_no Dneq) (maybe_loc_eq_no (loc_neq_ Dneq)).
compare_for_loc_eq_ :
   compare_for_loc_eq (lc N1) (lc N2) D
      <- compare_for_nat_eq N1 N2 Dmnateq
      <- compare_for_loc_eq| Dmnateq D.
simulate_inotmember :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi L:loc.
      Pi A:binary wwb.
      locmap_wf LM L1 -> impl_locset LM LS SS -> lookup_loc LM L A one'
         -> inotmember A SS -> notmember L LS -> type.
-n : simulate_inotmember X1 (impl_locset_nil X2) Dlook X3 notmember_nil.
simulate_inotmember* :
   Pi LM:locmap. Pi L1:loc. Pi L2:loc. Pi Astart1:binary wwb. Pi L3:loc.
      Pi Astart2:binary wwb. Pi LS:locset. Pi SS1:sectset. Pi Aend1:binary wwb.
      Pi SS:sectset. Pi N1:nat. Pi Bdiff2:binary wwb.
      locmap_wf LM L1 -> lookup_loc LM L2 Astart1 one'
         -> lookup_loc LM L3 Astart2 one' -> impl_locset LM LS SS1
         -> sectset_extend SS1 Astart1 Aend1 SS -> represents N1 Bdiff2
         -> add Astart1 Bdiff2 Aend1 zero -> inotmember Astart2 SS
         -> maybe_loc_eq L2 L3 -> notmember L3 (loccons L2 N1 LS) -> type.
-e :
   simulate_inotmember* Dlwf Dlook1 Dlook2 Dils Dsext Drep Dadd Dinm
      (maybe_loc_eq_yes Deq) Dnm
      <- lookup_loc_resp Deq binary_eq_ bit_eq_ Dlook1 Dlook1'
      <- lookup_loc_fun Dlook1' Dlook2 Dbeq
      <- sectset_extend_resp sectset_eq_ Dbeq binary_eq_ sectset_eq_ Dsext
            Dsext'
      <- sectset_extend_member Dsext' Dimem
      <- imember_mutex Dimem Dinm Dfalse
      <- false_implies_notmember Dfalse L1 (loccons L2 N1 LS1) Dnm.
-n :
   simulate_inotmember* Dlwf Dlook1 Dlook2 Dils Dsext Drep Dadd Dinm
      (maybe_loc_eq_no (loc_neq_ Dneq)) (notmember_cons Dnm (loc_neq_ Dneq1))
      <- neq_symm Dneq Dneq1
      <- sectset_extend_notmember Dinm Dsext Dinm1
      <- simulate_inotmember Dlwf Dils Dlook2 Dinm1 Dnm.
-c :
   simulate_inotmember Dlwf (impl_locset_cons Dils Dsext Dadd Drep Dlook1)
      Dlook2 Dinm Dnm
      <- compare_for_loc_eq L2 L3 Dmaybe
      <- simulate_inotmember* Dlwf Dlook1 Dlook2 Dils Dsext Drep Dadd Dinm
            Dmaybe Dnm.
false_implies_not_bpointer :
   false -> Pi L:loc. Pi N:nat. Pi V:val. not_bpointer L N V -> type.
simulate_not_pointer_1 :
   Pi LM:locmap. Pi L:loc. Pi Astart:binary wwb. Pi B1:bit. Pi Sstart:nat.
      Pi Nlim:binary wwb. Pi IM:irfmap. Pi B0:binary bw. Pi N3:nat.
      Pi B2:binary bw. Pi B3:binary bw. Pi N1:nat. Pi S:string N1. Pi V:val.
      Pi Nsize:nat. Pi Bsize:binary wwb. Pi Aend:binary wwb.
      lookup_loc LM L Astart B1
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B0 (@' (pointer L N3) z)
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B2 (@' (pointer L N3) 1')
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B3 (@' (pointer L N3) 2')
         -> impl_val (corresp_info_ Sstart Nlim LM IM) S V
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> inot_pointer Astart Aend (/ B0 (/ B2 (/ B3 S))) -> leq N3 Nsize
         -> not_bpointer L Nsize
               (;' (@' (pointer L N3) z) (;' (@' (pointer L N3) 1') (;' (@' (pointer L N3) 2') V)))
         -> type.
-n :
   simulate_not_pointer_1 X1 X2 X3 X4 impl_val_null X5 X6 X7 X8
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z))) not_pointer_null))).
-l :
   simulate_not_pointer_1 X1 X2 X3 X4 (impl_val_cons X5 impl_uval_lit) X6 X7 X8
      X9
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z))) not_pointer_lit))).
-i :
   simulate_not_pointer_1 X1 X2 X3 X4
      (impl_val_cons X5 (impl_uval_instruct X6 X7 X8)) X9 X10 X11 X12
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z))) not_pointer_instruct))).
- :
   simulate_not_pointer_1 X1 X2 X3 X4
      (impl_val_cons X5 (impl_uval_spointer X6 X7 X8 X9 X10)) X11 X12 X13 X14
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z))) not_pointer_spointer))).
-g :
   simulate_not_pointer_1 X1 X2 X3 X4
      (impl_val_cons X5 (impl_uval_gotpointer X6 X7 X8)) X9 X10 X11 X12
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z))) 
not_pointer_gotpointer))).
-j :
   simulate_not_pointer_1 X1 X2 X3 X4 (impl_val_cons X5 impl_uval_junk) X6 X7 X8
      X9
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z))) not_pointer_junk))).
-b :
   simulate_not_pointer_1 Dlook1 X1 X2 Duval
      (impl_val_cons X3
          (impl_uval_pointer_bad X4 X5 Dadd1 Drep1 X6 Dsum1 Drep2 Dino Dlook2))
      Drep3 Dadd2 X7 Dleq1
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z)))
                  (not_pointer_offset Dneq))))
      <- represents_max Drep3 Drep2 Dino Dleq2
      <- sum_implies_lt Dsum1 Dlt1
      <- leq_lt_trans Dleq2 Dlt1 Dlt2
      <- leq_lt_trans Dleq1 Dlt2 Dlt3
      <- lt_implies_neq Dlt3 Dneq.
simulate_not_pointer_1* :
   Pi LM:locmap. Pi N1:nat. Pi Astart:binary wwb. Pi B1:bit. Pi Nlim:nat.
      Pi Sstart:binary wwb. Pi IM:irfmap. Pi B0:binary bw. Pi N3:nat.
      Pi B2:binary bw. Pi B3:binary bw. Pi N2:nat. Pi S:string N2. Pi N4:nat.
      Pi N5:nat. Pi M:nat. Pi V:val. Pi Nsize:nat. Pi Bsize:binary wwb.
      Pi Aend:binary wwb.
      lookup_loc LM (lc N1) Astart B1
         -> impl_uval (corresp_info_ Nlim Sstart LM IM) B0
               (@' (pointer (lc N1) N3) z)
         -> impl_uval (corresp_info_ Nlim Sstart LM IM) B2
               (@' (pointer (lc N1) N3) 1')
         -> impl_uval (corresp_info_ Nlim Sstart LM IM) B3
               (@' (pointer (lc N1) N3) 2')
         -> impl_val (corresp_info_ Nlim Sstart LM IM) S
               (;' (@' (pointer (lc N4) N5) M) V)
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> inot_pointer Astart Aend (/ B0 (/ B2 (/ B3 S))) -> leq N3 Nsize
         -> maybe_eq N1 N4 -> maybe_eq N3 N5 -> maybe_eq M 3'
         -> not_bpointer (lc N1) Nsize
               (;' (@' (pointer (lc N1) N3) z) (;' (@' (pointer (lc N1) N3) 1')
                   (;' (@' (pointer (lc N1) N3) 2') (;' (@' (pointer (lc N4) N5) M) V))))
         -> type.
-1 :
   simulate_not_pointer_1* X1 X2 X3 X4 X5 X6 X7 X8 X9 (maybe_eq_no Dneq) X10 X11
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z)))
                  (not_pointer_nomatch (loc_neq_ Dneq))))).
-2 :
   simulate_not_pointer_1* X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 (maybe_eq_no Dneq) X11
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z)))
                  (not_pointer_offset Dneq)))).
-3 :
   simulate_not_pointer_1* X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 (maybe_eq_no Dneq)
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_cons (lt_s (lt_s (lt_s lt_z))) (not_pointer_pos Dneq)))).
-a :
   simulate_not_pointer_1* Dlook Duval1 Duval2 Duval3
      (impl_val_cons Dival Duval4) Drep Dadd
      (inot_pointer_above Dinz Dadd1 Dimp) Dleq (maybe_eq_yes Dnateq1)
      (maybe_eq_yes Dnateq2) (maybe_eq_yes Dnateq3) Dnotbp
      <- nat_eq_symm Dnateq1 Dnateq1'
      <- loc_eq_cons Dnateq1' Dloceq
      <- nat_eq_symm Dnateq2 Dnateq2'
      <- uval_pointer_eq_cons Dloceq Dnateq2' Dnateq3 Duvaleq
      <- impl_uval_resp binary_eq_ Duvaleq Duval4 Duval4'
      <- impl_atomval
            (impl_val_cons
                (impl_val_cons
                    (impl_val_cons (impl_val_cons impl_val_null Duval4') Duval3)
                    Duval2)
                Duval1)
            (atomval_cons
                (atomval_cons (atomval_cons (atomval_sing asize_pointer))))
            Daval
      <- can_represents Dleq Drep Drep1
      <- impl_aval_good_pointer Daval Dlook Drep1 Dimp1 Dadd2
      <- implode_word_fun Dimp1 Dimp Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd2 Dadd2'
      <- add_assoc Dadd Dadd1 Dadd3 Dadd4
      <- add_commute Dadd4 Dadd4'
      <- add_commute Dadd2' Dadd2''
      <- add_fun1 Dadd4' Dadd2'' X1 Dbeq2
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd3 Dadd3'
      <- sum_add_corr7 Drep Drep2 Drep1 Dsum1 Dadd3'
      <- represents_nonzero Dinz Drep2 Dnateq4
      <- sum_resp nat_eq_ Dnateq4 nat_eq_ Dsum1 Dsum1'
      <- sum_implies_lt Dsum1' Dlt1
      <- lt_leq_contradict Dlt1 Dleq Dfalse
      <- false_implies_not_bpointer Dfalse (lc N1) N2
            (;' (@' (pointer (lc N1) N3) z) (;' (@' (pointer (lc N1) N3) 1')
                (;' (@' (pointer (lc N1) N3) 2') (;' (@' (pointer (lc N4) N5) N6) V1))))
            Dnotbp.
-b :
   simulate_not_pointer_1* Dlook Duval1 Duval2 Duval3
      (impl_val_cons Dival Duval4) Drep Dadd
      (inot_pointer_below Dinz Dadd1 Dimp) Dleq (maybe_eq_yes Dnateq1)
      (maybe_eq_yes Dnateq2) (maybe_eq_yes Dnateq3) Dnotbp
      <- nat_eq_symm Dnateq1 Dnateq1'
      <- loc_eq_cons Dnateq1' Dloceq
      <- nat_eq_symm Dnateq2 Dnateq2'
      <- uval_pointer_eq_cons Dloceq Dnateq2' Dnateq3 Duvaleq
      <- impl_uval_resp binary_eq_ Duvaleq Duval4 Duval4'
      <- impl_atomval
            (impl_val_cons
                (impl_val_cons
                    (impl_val_cons (impl_val_cons impl_val_null Duval4') Duval3)
                    Duval2)
                Duval1)
            (atomval_cons
                (atomval_cons (atomval_cons (atomval_sing asize_pointer))))
            Daval
      <- can_represents Dleq Drep Drep1
      <- impl_aval_good_pointer Daval Dlook Drep1 Dimp1 Dadd2
      <- implode_word_fun Dimp1 Dimp Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd2 Dadd2'
      <- can_represents1 B5 N7 Drep2
      <- sum_add_corr3 Drep2 Drep Drep3 Dsum1 Dadd
      <- can_sum N7 N3 N8 Dsum2
      <- leq_reflex N7 Dleq1
      <- sum_leq Dsum2 Dsum1 Dleq1 Dleq Dleq2
      <- can_represents Dleq2 Drep3 Drep4
      <- sum_add_corr Drep2 Drep1 Drep4 Dsum2 Dadd3
      <- add_fun3 Dadd3 Dadd2' X3 Dbeq2
      <- add_resp binary_eq_ binary_eq_ Dbeq2 bit_eq_ Dadd3 Dadd3'
      <- add_assoc Dadd3' Dadd1 Dadd4 Dadd5
      <- can_zero wwb B3 Diz
      <- add_ident B5 Diz Dadd6
      <- add_commute Dadd5 Dadd5'
      <- add_fun1 Dadd5' Dadd6 X2 Dbeq3
      <- add_resp binary_eq_ binary_eq_ Dbeq3 bit_eq_ Dadd4 Dadd4'
      <- add_zero_sum Dadd4' X1 Diz1 Diz
      <- zero_nonzero_contradict binary_eq_ Diz1 Dinz Dfalse
      <- false_implies_not_bpointer Dfalse (lc N1) N2
            (;' (@' (pointer (lc N1) N3) z) (;' (@' (pointer (lc N1) N3) 1')
                (;' (@' (pointer (lc N1) N3) 2') (;' (@' (pointer (lc N4) N5) N6) V1))))
            Dnotbp.
-pp :
   simulate_not_pointer_1 Dlook1 Duval1 Duval2 Duval3 Dival Drep1 Dadd1 Dinotp
      Dleq1 Dnotbp
      <- compare_for_nat_eq N1 N5 Dmmeq
      <- compare_for_nat_eq M 3' Dmmeq1
      <- compare_for_nat_eq N3 N6 Dmmeq2
      <- simulate_not_pointer_1* Dlook1 Duval1 Duval2 Duval3 Dival Drep1 Dadd1
            Dinotp Dleq1 Dmmeq Dmmeq2 Dmmeq1 Dnotbp.
simulate_not_pointer_2 :
   Pi LM:locmap. Pi L:loc. Pi Astart:binary wwb. Pi B1:bit. Pi Sstart:nat.
      Pi Nlim:binary wwb. Pi IM:irfmap. Pi B0:binary bw. Pi N3:nat.
      Pi B2:binary bw. Pi N1:nat. Pi S:string N1. Pi V:val. Pi Nsize:nat.
      Pi Bsize:binary wwb. Pi Aend:binary wwb.
      lookup_loc LM L Astart B1
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B0 (@' (pointer L N3) z)
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B2 (@' (pointer L N3) 1')
         -> impl_val (corresp_info_ Sstart Nlim LM IM) S V
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> inot_pointer Astart Aend (/ B0 (/ B2 S)) -> leq N3 Nsize
         -> not_bpointer L Nsize (;' (@' (pointer L N3) z) (;' (@' (pointer L N3) 1') V))
         -> type.
-n :
   simulate_not_pointer_2 X1 X2 X3 impl_val_null X4 X5 X6 X7
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) not_pointer_null)).
-l :
   simulate_not_pointer_2 X1 X2 X3 (impl_val_cons X4 impl_uval_lit) X5 X6 X7 X8
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) not_pointer_lit)).
-i :
   simulate_not_pointer_2 X1 X2 X3
      (impl_val_cons X4 (impl_uval_instruct X5 X6 X7)) X8 X9 X10 X11
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) not_pointer_instruct)).
- :
   simulate_not_pointer_2 X1 X2 X3
      (impl_val_cons X4 (impl_uval_spointer X5 X6 X7 X8 X9)) X10 X11 X12 X13
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) not_pointer_spointer)).
-g :
   simulate_not_pointer_2 X1 X2 X3
      (impl_val_cons X4 (impl_uval_gotpointer X5 X6 X7)) X8 X9 X10 X11
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) not_pointer_gotpointer)).
-j :
   simulate_not_pointer_2 X1 X2 X3 (impl_val_cons X4 impl_uval_junk) X5 X6 X7 X8
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) not_pointer_junk)).
-b :
   simulate_not_pointer_2 Dlook1 X1 Duval
      (impl_val_cons X2
          (impl_uval_pointer_bad X3 X4 Dadd1 Drep1 X5 Dsum1 Drep2 Dino Dlook2))
      Drep3 Dadd2 X6 Dleq1
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) (not_pointer_offset Dneq)))
      <- represents_max Drep3 Drep2 Dino Dleq2
      <- sum_implies_lt Dsum1 Dlt1
      <- leq_lt_trans Dleq2 Dlt1 Dlt2
      <- leq_lt_trans Dleq1 Dlt2 Dlt3
      <- lt_implies_neq Dlt3 Dneq.
simulate_not_pointer_2* :
   Pi LM:locmap. Pi N1:nat. Pi Astart:binary wwb. Pi B1:bit. Pi Sstart:nat.
      Pi Nlim:binary wwb. Pi IM:irfmap. Pi B0:binary bw. Pi N3:nat.
      Pi B2:binary bw. Pi N2:nat. Pi S:string N2. Pi N4:nat. Pi N5:nat.
      Pi M:nat. Pi V:val. Pi Nsize:nat. Pi Bsize:binary wwb. Pi Aend:binary wwb.
      lookup_loc LM (lc N1) Astart B1
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B0
               (@' (pointer (lc N1) N3) z)
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B2
               (@' (pointer (lc N1) N3) 1')
         -> impl_val (corresp_info_ Sstart Nlim LM IM) S
               (;' (@' (pointer (lc N4) N5) M) V)
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> inot_pointer Astart Aend (/ B0 (/ B2 S)) -> leq N3 Nsize
         -> maybe_eq N1 N4 -> maybe_eq N3 N5 -> maybe_eq M 2'
         -> not_bpointer (lc N1) Nsize
               (;' (@' (pointer (lc N1) N3) z) (;' (@' (pointer (lc N1) N3) 1')
                   (;' (@' (pointer (lc N4) N5) M) V))) -> type.
-1 :
   simulate_not_pointer_2* X1 X2 X3 X4 X5 X6 X7 X8 (maybe_eq_no Dneq) X9 X10
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z))
              (not_pointer_nomatch (loc_neq_ Dneq)))).
-2 :
   simulate_not_pointer_2* X1 X2 X3 X4 X5 X6 X7 X8 X9 (maybe_eq_no Dneq) X10
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) (not_pointer_offset Dneq))).
-3 :
   simulate_not_pointer_2* X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 (maybe_eq_no Dneq)
      (not_bpointer_pointer
          (not_pointer_cons (lt_s (lt_s lt_z)) (not_pointer_pos Dneq))).
-n :
   simulate_not_pointer_2* Dlook Duval1 Duval2 (impl_val_cons Dival Duval3) Drep
      Dadd Dinotp Dleq (maybe_eq_yes Dnateq1) (maybe_eq_yes Dnateq2)
      (maybe_eq_yes Dnateq3) Dnotbp1
      <- nat_eq_symm Dnateq1 Dnateq1'
      <- loc_eq_cons Dnateq1' Dloceq
      <- nat_eq_symm Dnateq2 Dnateq2'
      <- uval_pointer_eq_cons Dloceq Dnateq2' Dnateq3 Duvaleq
      <- impl_uval_resp binary_eq_ Duvaleq Duval3 Duval3'
      <- simulate_not_pointer_1 Dlook Duval1 Duval2 Duval3' Dival Drep Dadd
            Dinotp Dleq Dnotbp
      <- uval_eq_symm Duvaleq Duvaleq1
      <- val_eq_cons Duvaleq1 val_eq_ Dvaleq1
      <- val_eq_cons uval_eq_ Dvaleq1 Dvaleq2
      <- val_eq_cons uval_eq_ Dvaleq2 Dvaleq3
      <- not_bpointer_resp loc_eq_ nat_eq_ Dvaleq3 Dnotbp Dnotbp1.
-pp :
   simulate_not_pointer_2 Dlook1 Duval1 Duval2 Dival Drep1 Dadd1 Dinotp Dleq1
      Dnotbp
      <- compare_for_nat_eq N1 N5 Dmmeq
      <- compare_for_nat_eq M 2' Dmmeq1
      <- compare_for_nat_eq N3 N6 Dmmeq2
      <- simulate_not_pointer_2* Dlook1 Duval1 Duval2 Dival Drep1 Dadd1 Dinotp
            Dleq1 Dmmeq Dmmeq2 Dmmeq1 Dnotbp.
simulate_not_pointer_3 :
   Pi LM:locmap. Pi L:loc. Pi Astart:binary wwb. Pi B1:bit. Pi Sstart:nat.
      Pi Nlim:binary wwb. Pi IM:irfmap. Pi B0:binary bw. Pi N3:nat. Pi N1:nat.
      Pi S:string N1. Pi V:val. Pi Nsize:nat. Pi Bsize:binary wwb.
      Pi Aend:binary wwb.
      lookup_loc LM L Astart B1
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B0 (@' (pointer L N3) z)
         -> impl_val (corresp_info_ Sstart Nlim LM IM) S V
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> inot_pointer Astart Aend (/ B0 S) -> leq N3 Nsize
         -> not_bpointer L Nsize (;' (@' (pointer L N3) z) V) -> type.
-n :
   simulate_not_pointer_3 X1 X2 impl_val_null X3 X4 X5 X6
      (not_bpointer_pointer not_pointer_null).
-l :
   simulate_not_pointer_3 X1 X2 (impl_val_cons X3 impl_uval_lit) X4 X5 X6 X7
      (not_bpointer_pointer not_pointer_lit).
-i :
   simulate_not_pointer_3 X1 X2 (impl_val_cons X3 (impl_uval_instruct X4 X5 X6))
      X7 X8 X9 X10 (not_bpointer_pointer not_pointer_instruct).
- :
   simulate_not_pointer_3 X1 X2
      (impl_val_cons X3 (impl_uval_spointer X4 X5 X6 X7 X8)) X9 X10 X11 X12
      (not_bpointer_pointer not_pointer_spointer).
-g :
   simulate_not_pointer_3 X1 X2
      (impl_val_cons X3 (impl_uval_gotpointer X4 X5 X6)) X7 X8 X9 X10
      (not_bpointer_pointer not_pointer_gotpointer).
-j :
   simulate_not_pointer_3 X1 X2 (impl_val_cons X3 impl_uval_junk) X4 X5 X6 X7
      (not_bpointer_pointer not_pointer_junk).
-b :
   simulate_not_pointer_3 Dlook1 Duval
      (impl_val_cons X1
          (impl_uval_pointer_bad X2 X3 Dadd1 Drep1 X4 Dsum1 Drep2 Dino Dlook2))
      Drep3 Dadd2 X5 Dleq1 (not_bpointer_pointer (not_pointer_offset Dneq))
      <- represents_max Drep3 Drep2 Dino Dleq2
      <- sum_implies_lt Dsum1 Dlt1
      <- leq_lt_trans Dleq2 Dlt1 Dlt2
      <- leq_lt_trans Dleq1 Dlt2 Dlt3
      <- lt_implies_neq Dlt3 Dneq.
simulate_not_pointer_3* :
   Pi LM:locmap. Pi N1:nat. Pi Astart:binary wwb. Pi B1:bit. Pi Sstart:nat.
      Pi Nlim:binary wwb. Pi IM:irfmap. Pi B0:binary bw. Pi N3:nat. Pi N2:nat.
      Pi S:string N2. Pi N4:nat. Pi N5:nat. Pi M:nat. Pi V:val. Pi Nsize:nat.
      Pi Bsize:binary wwb. Pi Aend:binary wwb.
      lookup_loc LM (lc N1) Astart B1
         -> impl_uval (corresp_info_ Sstart Nlim LM IM) B0
               (@' (pointer (lc N1) N3) z)
         -> impl_val (corresp_info_ Sstart Nlim LM IM) S
               (;' (@' (pointer (lc N4) N5) M) V)
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> inot_pointer Astart Aend (/ B0 S) -> leq N3 Nsize -> maybe_eq N1 N4
         -> maybe_eq N3 N5 -> maybe_eq M 1'
         -> not_bpointer (lc N1) Nsize
               (;' (@' (pointer (lc N1) N3) z) (;' (@' (pointer (lc N4) N5) M) V)) -> type.
-1 :
   simulate_not_pointer_3* X1 X2 X3 X4 X5 X6 X7 (maybe_eq_no Dneq) X8 X9
      (not_bpointer_pointer (not_pointer_nomatch (loc_neq_ Dneq))).
-2 :
   simulate_not_pointer_3* X1 X2 X3 X4 X5 X6 X7 X8 (maybe_eq_no Dneq) X9
      (not_bpointer_pointer (not_pointer_offset Dneq)).
-3 :
   simulate_not_pointer_3* X1 X2 X3 X4 X5 X6 X7 X8 X9 (maybe_eq_no Dneq)
      (not_bpointer_pointer (not_pointer_pos Dneq)).
-n :
   simulate_not_pointer_3* Dlook Duval1 (impl_val_cons Dival Duval2) Drep Dadd
      Dinotp Dleq (maybe_eq_yes Dnateq1) (maybe_eq_yes Dnateq2)
      (maybe_eq_yes Dnateq3) Dnotbp1
      <- nat_eq_symm Dnateq1 Dnateq1'
      <- loc_eq_cons Dnateq1' Dloceq
      <- nat_eq_symm Dnateq2 Dnateq2'
      <- uval_pointer_eq_cons Dloceq Dnateq2' Dnateq3 Duvaleq
      <- impl_uval_resp binary_eq_ Duvaleq Duval2 Duval2'
      <- simulate_not_pointer_2 Dlook Duval1 Duval2' Dival Drep Dadd Dinotp Dleq
            Dnotbp
      <- uval_eq_symm Duvaleq Duvaleq1
      <- val_eq_cons Duvaleq1 val_eq_ Dvaleq1
      <- val_eq_cons uval_eq_ Dvaleq1 Dvaleq2
      <- not_bpointer_resp loc_eq_ nat_eq_ Dvaleq2 Dnotbp Dnotbp1.
-pp :
   simulate_not_pointer_3 Dlook1 Duval Dival Drep1 Dadd1 Dinotp Dleq1 Dnotbp
      <- compare_for_nat_eq N1 N5 Dmmeq
      <- compare_for_nat_eq M 1' Dmmeq1
      <- compare_for_nat_eq N3 N6 Dmmeq2
      <- simulate_not_pointer_3* Dlook1 Duval Dival Drep1 Dadd1 Dinotp Dleq1
            Dmmeq Dmmeq2 Dmmeq1 Dnotbp.
simulate_not_bpointer :
   Pi LM:locmap. Pi L:loc. Pi Astart:binary wwb. Pi B1:bit. Pi N1:nat.
      Pi N2:nat. Pi B2:binary wwb. Pi IM1:irfmap. Pi S:string N1. Pi V:val.
      Pi Nsize:nat. Pi Bsize:binary wwb. Pi Aend:binary wwb.
      lookup_loc LM L Astart B1 -> impl_val (corresp_info_ N2 B2 LM IM1) S V
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> inot_pointer Astart Aend S -> not_bpointer L Nsize V -> type.
-n : simulate_not_bpointer X1 impl_val_null X2 X3 X4 not_bpointer_null.
-l :
   simulate_not_bpointer X1 (impl_val_cons X2 impl_uval_lit) X3 X4 X5
      not_bpointer_lit.
-i :
   simulate_not_bpointer X1 (impl_val_cons X2 (impl_uval_instruct X3 X4 X5)) X6
      X7 X8 not_bpointer_instruct.
- :
   simulate_not_bpointer X1
      (impl_val_cons X2 (impl_uval_spointer X3 X4 X5 X6 X7)) X8 X9 X10
      not_bpointer_spointer.
-g :
   simulate_not_bpointer X1 (impl_val_cons X2 (impl_uval_gotpointer X3 X4 X5))
      X6 X7 X8 not_bpointer_gotpointer.
-j :
   simulate_not_bpointer X1 (impl_val_cons X2 impl_uval_junk) X3 X4 X5
      not_bpointer_junk.
-b :
   simulate_not_bpointer Dlook1
      (impl_val_cons X1
          (impl_uval_pointer_bad X2 X3 Dadd1 Drep1 X4 Dsum1 Drep2 Dino Dlook2))
      Drep3 Dadd2 X5 (not_bpointer_oob Dlt2)
      <- represents_max Drep3 Drep2 Dino Dleq1
      <- sum_implies_lt Dsum1 Dlt1
      <- leq_lt_trans Dleq1 Dlt1 Dlt2.
-p : simulate_not_bpointer X1 (impl_val_cons X2 X3) X4 X5 X6 not_bpointer_pos.
simulate_not_bpointer* :
   Pi LM:locmap. Pi N1:nat. Pi Astart:binary wwb. Pi B1:bit. Pi N2:nat.
      Pi N3:nat. Pi B2:binary wwb. Pi IM1:irfmap. Pi S:string N2. Pi N4:nat.
      Pi N5:nat. Pi V:val. Pi Nsize:nat. Pi Bsize:binary wwb.
      Pi Aend:binary wwb.
      lookup_loc LM (lc N1) Astart B1
         -> impl_val (corresp_info_ N3 B2 LM IM1) S
               (;' (@' (pointer (lc N4) N5) z) V) -> represents Nsize Bsize
         -> add Astart Bsize Aend zero -> inot_pointer Astart Aend S
         -> maybe_eq N1 N4 -> leq_gt N5 Nsize
         -> not_bpointer (lc N1) Nsize (;' (@' (pointer (lc N4) N5) z) V) -> type.
-n :
   simulate_not_bpointer* X1 X2 X3 X4 X5 (maybe_eq_no Dneq) X6
      (not_bpointer_nomatch (loc_neq_ Dneq)).
-l :
   simulate_not_bpointer* X1 X2 X3 X4 X5 X6 (leq_gt_gt Dlt)
      (not_bpointer_oob Dlt).
-p :
   simulate_not_bpointer* Dlook1 (impl_val_cons Dival Duval) Drep1 Dadd1 Dinotp
      (maybe_eq_yes Dnateq) (leq_gt_leq Dleq) Dnotbp1
      <- nat_eq_symm Dnateq Dnateq1
      <- loc_eq_cons Dnateq1 Dloceq1
      <- uval_pointer_eq_cons Dloceq1 nat_eq_ nat_eq_ Duvaleq
      <- impl_uval_resp binary_eq_ Duvaleq Duval Duval1
      <- simulate_not_pointer_3 Dlook1 Duval1 Dival Drep1 Dadd1 Dinotp Dleq
            Dnotbp
      <- loc_eq_cons Dnateq Dloceq
      <- val_pointer_eq_cons Dloceq nat_eq_ nat_eq_ val_eq_ Dvaleq
      <- not_bpointer_resp loc_eq_ nat_eq_ Dvaleq Dnotbp Dnotbp1.
-pp :
   simulate_not_bpointer Dlook1 Dival Drep1 Dadd1 Dinotp Dnotbp
      <- compare_for_nat_eq N1 N4 Dmmeq
      <- dichotomy N5 Nsize Dleqgt
      <- simulate_not_bpointer* Dlook1 Dival Drep1 Dadd1 Dinotp Dmmeq Dleqgt
            Dnotbp.
simulate_unreachable :
   Pi LM:locmap. Pi L:loc. Pi Astart:binary wwb. Pi B1:bit. Pi N1:nat.
      Pi N2:nat. Pi B2:binary wwb. Pi IM1:irfmap. Pi S:string N1. Pi V:val.
      Pi Nsize:nat. Pi Bsize:binary wwb. Pi Aend:binary wwb.
      lookup_loc LM L Astart B1 -> impl_val (corresp_info_ N2 B2 LM IM1) S V
         -> represents Nsize Bsize -> add Astart Bsize Aend zero
         -> iunreachable Astart Aend S -> unreachable L Nsize V -> type.
simulate_unreachable_null :
   simulate_unreachable X1 impl_val_null X2 X3 iunreachable_null
      unreachable_null.
simulate_unreachable_cons :
   simulate_unreachable Dlook (impl_val_cons Dival Diuval) Drep Dadd
      (iunreachable_cons Diunr Dinot) (unreachable_cons Dunr Dnot)
      <- simulate_not_bpointer Dlook (impl_val_cons Dival Diuval) Drep Dadd
            Dinot Dnot
      <- simulate_unreachable Dlook Dival Drep Dadd Diunr Dunr.
sectset_extend_unreachable :
   Pi N1:nat. Pi SS1:sectset. Pi S:string N1. Pi SS2:sectset. Pi B1:binary wwb.
      Pi B2:binary wwb.
      string_unreachable SS1 S -> sectset_extend SS2 B1 B2 SS1
         -> iunreachable B1 B2 S -> string_unreachable SS2 S -> type.
- :
   sectset_extend_unreachable (string_unreachable_cons Disunr Diunr)
      sectset_extend_before Diunr Disunr.
- :
   sectset_extend_unreachable (string_unreachable_cons Dsunr Dunr)
      (sectset_extend_cons Dsext) Diunr (string_unreachable_cons Dsunr1 Dunr)
      <- sectset_extend_unreachable Dsunr Dsext Diunr Dsunr1.
simulate_val_unreachable :
   Pi LM:locmap. Pi LS:locset. Pi SS:sectset. Pi N1:nat. Pi N2:nat.
      Pi B1:binary wwb. Pi IM1:irfmap. Pi S:string N1. Pi V:val.
      impl_locset LM LS SS -> impl_val (corresp_info_ N2 B1 LM IM1) S V
         -> string_unreachable SS S -> val_unreachable LS V -> type.
-n :
   simulate_val_unreachable Dimpl X1 string_unreachable_nil Dvunr
      <- nil_sectset_impl_nil Dimpl Dlseq
      <- val_unreachable_resp Dlseq val_eq_ val_unreachable_nil Dvunr.
-c :
   simulate_val_unreachable (impl_locset_nil X1) X2
      (string_unreachable_cons Disunr Diunr) val_unreachable_nil.
-c :
   simulate_val_unreachable
      (impl_locset_cons Dimpl sectset_extend_before Dadd Drep Dlook) Dival
      (string_unreachable_cons Disunr Diunr) (val_unreachable_cons Dvunr Dunr)
      <- simulate_unreachable Dlook Dival Drep Dadd Diunr Dunr
      <- simulate_val_unreachable Dimpl Dival Disunr Dvunr.
-c :
   simulate_val_unreachable
      (impl_locset_cons Dimpl (sectset_extend_cons Dsext) Dadd Drep Dlook) Dival
      (string_unreachable_cons Disunr Diunr) (val_unreachable_cons Dvunr Dunr)
      <- sectset_extend_unreachable Disunr Dsext Diunr1 Disunr1
      <- simulate_unreachable Dlook Dival Drep Dadd Diunr1 Dunr
      <- simulate_val_unreachable Dimpl Dival
            (string_unreachable_cons Disunr1 Diunr) Dvunr.
memory_unreachable_cdr :
   Pi SS:sectset. Pi M1:memory. Pi N1:nat. Pi M2:memory. Pi B1:binary wwb.
      Pi SECT1:section N1.
      memory_unreachable SS M1 -> mextend* M2 B1 SECT1 M1
         -> memory_unreachable SS M2 -> type.
-mc :
   memory_unreachable_cdr (memory_unreachable_cons Dmunr Dsunr)
      (mextend_cons Dmext X1 X2 X3) (memory_unreachable_cons Dmunr1 Dsunr)
      <- memory_unreachable_cdr Dmunr Dmext Dmunr1.
-mc :
   memory_unreachable_cdr (memory_unreachable_cs Dmunr)
      (mextend_cons Dmext X1 X2 X3) (memory_unreachable_cs Dmunr1)
      <- memory_unreachable_cdr Dmunr Dmext Dmunr1.
-mc :
   memory_unreachable_cdr (memory_unreachable_ss Dmunr)
      (mextend_cons Dmext X1 X2 X3) (memory_unreachable_ss Dmunr1)
      <- memory_unreachable_cdr Dmunr Dmext Dmunr1.
-mc :
   memory_unreachable_cdr (memory_unreachable_reserve Dmunr)
      (mextend_cons Dmext X1 X2 X3) (memory_unreachable_reserve Dmunr1)
      <- memory_unreachable_cdr Dmunr Dmext Dmunr1.
-mc :
   memory_unreachable_cdr (memory_unreachable_omit Dmunr Dimem)
      (mextend_cons Dmext X1 X2 X3) (memory_unreachable_omit Dmunr1 Dimem)
      <- memory_unreachable_cdr Dmunr Dmext Dmunr1.
-n : memory_unreachable_cdr X1 mextend_nil memory_unreachable_nil.
-b :
   memory_unreachable_cdr (memory_unreachable_cons Dmunr X1)
      (mextend_between X2 X3 X4) Dmunr.
-b :
   memory_unreachable_cdr (memory_unreachable_cs Dmunr)
      (mextend_between X1 X2 X3) Dmunr.
-b :
   memory_unreachable_cdr (memory_unreachable_ss Dmunr)
      (mextend_between X1 X2 X3) Dmunr.
-b :
   memory_unreachable_cdr (memory_unreachable_reserve Dmunr)
      (mextend_between X1 X2 X3) Dmunr.
-b :
   memory_unreachable_cdr (memory_unreachable_omit Dmunr X1)
      (mextend_between X2 X3 X4) Dmunr.
false_implies_string_unreachable :
   Pi N:nat.
      false -> Pi SS:sectset. Pi S:string N. string_unreachable SS S -> type.
memory_unreachable_cdr1 :
   Pi SS:sectset. Pi M1:memory. Pi N1:nat. Pi M2:memory. Pi A:binary wwb.
      Pi S:string N1.
      memory_unreachable SS M1 -> mextend* M2 A (section_valid hs S) M1
         -> inotmember A SS -> string_unreachable SS S -> type.
-mc :
   memory_unreachable_cdr1 (memory_unreachable_cons Dmunr Dsunr)
      (mextend_cons Dmext X1 X2 X3) Dinot Dsunr1
      <- memory_unreachable_cdr1 Dmunr Dmext Dinot Dsunr1.
-mc :
   memory_unreachable_cdr1 (memory_unreachable_cs Dmunr)
      (mextend_cons Dmext X1 X2 X3) Dinot Dsunr1
      <- memory_unreachable_cdr1 Dmunr Dmext Dinot Dsunr1.
-mc :
   memory_unreachable_cdr1 (memory_unreachable_ss Dmunr)
      (mextend_cons Dmext X1 X2 X3) Dinot Dsunr1
      <- memory_unreachable_cdr1 Dmunr Dmext Dinot Dsunr1.
-mc :
   memory_unreachable_cdr1 (memory_unreachable_reserve Dmunr)
      (mextend_cons Dmext X1 X2 X3) Dinot Dsunr1
      <- memory_unreachable_cdr1 Dmunr Dmext Dinot Dsunr1.
-mc :
   memory_unreachable_cdr1 (memory_unreachable_omit Dmunr Dimem)
      (mextend_cons Dmext X1 X2 X3) Dinot Dsunr1
      <- memory_unreachable_cdr1 Dmunr Dmext Dinot Dsunr1.
-n :
   memory_unreachable_cdr1 (memory_unreachable_cons X1 Dsunr) mextend_nil X2
      Dsunr.
-n :
   memory_unreachable_cdr1 (memory_unreachable_omit X1 Dimem) mextend_nil Dinot
      Dsunr
      <- imember_mutex Dimem Dinot Dfalse
      <- false_implies_string_unreachable Dfalse SS1 S1 Dsunr.
-b :
   memory_unreachable_cdr1 (memory_unreachable_cons X1 Dsunr)
      (mextend_between X2 X3 X4) X5 Dsunr.
-b :
   memory_unreachable_cdr1 (memory_unreachable_omit X1 Dmem)
      (mextend_between X2 X3 X4) Dinot Dsunr
      <- imember_mutex Dmem Dinot Dfalse
      <- false_implies_string_unreachable Dfalse SS1 S1 Dsunr.
simulate_heap_unreachable :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi N1:nat.
      Pi B1:binary wwb. Pi IM1:irfmap. Pi Hm:memory. Pi Hh:heap.
      locmap_wf LM L1 -> impl_locset LM LS SS
         -> impl_heap (corresp_info_ N1 B1 LM IM1) Hm Hh
         -> memory_unreachable SS Hm -> heap_unreachable LS Hh -> type.
-n :
   simulate_heap_unreachable Dlwf Dilocs (impl_heap_nil X1) Dmunr
      heap_unreachable_nil.
-c :
   simulate_heap_unreachable Dlwf Dilocs
      (impl_heap_cons Dmext impl_seg_cs Dsegof Dadd Drep Dival Dlook X1 Diheap)
      Dmunr (heap_unreachable_cseg Dhunr Dsegof)
      <- memory_unreachable_cdr Dmunr Dmext Dmunr1
      <- simulate_heap_unreachable Dlwf Dilocs Diheap Dmunr1 Dhunr.
simulate_heap_unreachable* :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi Astart:binary wwb.
      Pi L:loc. Pi N1:nat. Pi H:memory. Pi S:string N1. Pi H1:memory.
      Pi Nlim:nat. Pi Sstart:binary wwb. Pi IM:irfmap. Pi V:val. Pi Ha:heap.
      locmap_wf LM L1 -> impl_locset LM LS SS -> maybe_imember Astart SS
         -> lookup_loc LM L Astart one'
         -> mextend* H Astart (section_valid hs S) H1
         -> memory_unreachable SS H1
         -> impl_val (corresp_info_ Nlim Sstart LM IM) S V
         -> impl_heap (corresp_info_ Nlim Sstart LM IM) H Ha
         -> heap_unreachable LS Ha -> heap_unreachable LS (hcons L V Ha) -> type.
-y :
   simulate_heap_unreachable* Dlwf Dilocs (maybe_imember_yes Dimem) Dlook Dmext
      Dmunr Dival Diheap Dhunr (heap_unreachable_omit Dhunr Dmem)
      <- simulate_imember Dlwf Dilocs Dlook Dimem Dmem.
-n :
   simulate_heap_unreachable* Dlwf Dilocs (maybe_imember_no Dinot) Dlook Dmext
      Dmunr Dival Diheap Dhunr (heap_unreachable_cons Dhunr Dunr)
      <- memory_unreachable_cdr1 Dmunr Dmext Dinot Dsunr
      <- simulate_val_unreachable Dilocs Dival Dsunr Dunr.
-h :
   simulate_heap_unreachable Dlwf Dilocs
      (impl_heap_cons Dmext impl_seg_hs Dsegof Dadd Drep Dival Dlook X1 Diheap)
      Dmunr Dhunr
      <- memory_unreachable_cdr Dmunr Dmext Dmunr1
      <- simulate_heap_unreachable Dlwf Dilocs Diheap Dmunr1 Dhunr1
      <- decide_imember B1 SS1 Dmimem
      <- simulate_heap_unreachable* Dlwf Dilocs Dmimem Dlook Dmext Dmunr Dival
            Diheap Dhunr1 Dhunr.
simulate_rfile_unreachable :
   Pi LM:locmap. Pi LS:locset. Pi SS:sectset. Pi N1:nat. Pi N2:nat.
      Pi B1:binary wwb. Pi IM1:irfmap. Pi Ri:regs (s N1). Pi Ra:rfile* N1.
      Pi S1:string ww.
      impl_locset LM LS SS -> impl_rfile (corresp_info_ N2 B1 LM IM1) Ri Ra S1
         -> regs_unreachable SS Ri -> rfile_unreachable* LS Ra -> type.
simulate_rfile_unreachable_nil :
   simulate_rfile_unreachable Dilocs impl_rfile_nil
      (regs_unreachable_cons regs_unreachable_nil X1) rfile_unreachable_nil.
simulate_rfile_unreachable_cons :
   simulate_rfile_unreachable Dilocs (impl_rfile_cons Dirfile Dival)
      (regs_unreachable_cons Drunr Dunr) (rfile_unreachable_cons Drunr' Dunr')
      <- simulate_rfile_unreachable Dilocs Dirfile Drunr Drunr'
      <- simulate_val_unreachable Dilocs Dival Dunr Dunr'.
simulate_stack_unreachable :
   Pi LM:locmap. Pi LS:locset. Pi SS:sectset. Pi Nlim:nat. Pi Sstart:binary wwb.
      Pi IM:irfmap. Pi H:memory. Pi AWesp:binary wwb. Pi V:val. Pi H1:memory.
      Pi R:regs numregs. Pi Wesp:string ww.
      impl_locset LM LS SS
         -> impl_stack (corresp_info_ Nlim Sstart LM IM) H AWesp V H1
         -> rload* R esp Wesp -> implode_word Wesp AWesp
         -> stack_unreachable SS H1 R -> val_unreachable LS V -> type.
- :
   simulate_stack_unreachable Dilocs
      (impl_stack_ Dmext2 Dmext1 X4 X5 Dsabs X6 X7 Dival Dindex1 Drep1 Dadd1 X8
          X9 X10)
      Drload Dimp
      (stack_unreachable_ Dsunr Dindex2 Drep2 Dadd2 Dssect Dimp1 Drload1) Dvunr
      <- rload*_fun Drload Drload1 Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp Dimp'
      <- implode_word_fun Dimp' Dimp1 Dbeq1
      <- stack_absent_reserved_extension Dsabs Dmext1 Dsabs1
      <- mextend_stack_section Dsabs1 Dmext2 Dssect1
      <- stack_section_fun Dssect1 Dssect Dbeq2 X3 Dseq2
      <- add_resp Dbeq2 binary_eq_ Dbeq1 bit_eq_ Dadd1 Dadd1'
      <- add_commute Dadd1' Dadd1''
      <- add_commute Dadd2 Dadd2'
      <- add_fun1 Dadd1'' Dadd2' X2 Dbeq3
      <- represents_resp nat_eq_ Dbeq3 Drep1 Drep1'
      <- represents_fun1 Drep1' Drep2 Dnateq1
      <- string_resp Dnateq1 S7 S4 Dseq3
      <- index_resp Dnateq1 Dseq2 Dseq3 string_eq_ Dindex1 Dindex1'
      <- index_fun Dindex1' Dindex2 X1 Dseq4
      <- impl_val_resp Dseq4 val_eq_ Dival Dival'
      <- simulate_val_unreachable Dilocs Dival' Dsunr Dvunr.
impl_runfacs_memory_unreachable :
   Pi N1:nat. Pi N2:nat. Pi IM1:irfmap. Pi LM1:locmap. Pi H1:memory.
      Pi H2:memory. Pi S1:string N1. Pi SS:sectset.
      impl_runfacs N2 IM1 LM1 H1 H2 S1 -> memory_unreachable SS H2
         -> memory_unreachable SS H1 -> type.
- : impl_runfacs_memory_unreachable impl_runfacs_z D D.
- :
   impl_runfacs_memory_unreachable (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) D1
      D3
      <- memory_unreachable_cdr D1 Dmext D2
      <- impl_runfacs_memory_unreachable Dirfs D2 D3.
impl_got_memory_unreachable :
   Pi CI1:corresp_info. Pi H1:memory. Pi H2:memory. Pi SS:sectset.
      impl_got_ptr CI1 H1 H2 -> memory_unreachable SS H2
         -> memory_unreachable SS H1 -> type.
- :
   impl_got_memory_unreachable (impl_got_ptr_ Dmext X1 X2 Dirfs) Dmunr1 Dmunr3
      <- memory_unreachable_cdr Dmunr1 Dmext Dmunr2
      <- impl_runfacs_memory_unreachable Dirfs Dmunr2 Dmunr3.
impl_stack_memory_unreachable :
   Pi CI1:corresp_info. Pi H1:memory. Pi B1:binary wwb. Pi V1:val. Pi H2:memory.
      Pi SS:sectset.
      impl_stack CI1 H1 B1 V1 H2 -> memory_unreachable SS H2
         -> memory_unreachable SS H1 -> type.
- :
   impl_stack_memory_unreachable
      (impl_stack_ Dmext2 Dmext1 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12) Dmunr1
      Dmunr3
      <- memory_unreachable_cdr Dmunr1 Dmext2 Dmunr2
      <- memory_unreachable_cdr Dmunr2 Dmext1 Dmunr3.
impl_got_stack_unreachable :
   Pi CI1:corresp_info. Pi H1:memory. Pi H2:memory. Pi SS:sectset.
      Pi R:regs numregs.
      impl_got_ptr CI1 H1 H2 -> stack_unreachable SS H2 R
         -> stack_unreachable SS H1 R -> type.
- :
   impl_got_stack_unreachable Digot
      (stack_unreachable_ Dsunr Dindex Drep Dadd Dssect Dimp Drload)
      (stack_unreachable_ Dsunr Dindex Drep Dadd Dssect1 Dimp Drload)
      <- prepone_stack_section_got Dssect1 Digot Dssect.
simulate_state_unreachable :
   Pi LM:locmap. Pi LS:locset. Pi SS:sectset. Pi N1:nat. Pi B1:binary wwb.
      Pi IM1:irfmap. Pi ST:state. Pi H:heap. Pi L1:loc. Pi R:rfile. Pi PC1:pc.
      impl_locset LM LS SS
         -> impl_machine (corresp_info_ N1 B1 LM IM1) ST (mach H L1 R PC1)
         -> state_unreachable SS ST -> heap_unreachable LS H
         -> rfile_unreachable LS R -> type.
- :
   simulate_state_unreachable Dilocs
      (impl_ (corresp_info_valid_ X1 X2 Dlwf) Dorder Digot Dipc Diconds Distack
          Dimp Dirfile Diheap)
      (state_unreachable_ Dsunr Drunr Dmunr) Dhunr
      (rfile_unreachable_ Drunr' Dvunr)
      <- impl_got_memory_unreachable Digot Dmunr Dmunr1
      <- impl_stack_memory_unreachable Distack Dmunr1 Dmunr2
      <- simulate_heap_unreachable Dlwf Dilocs Diheap Dmunr2 Dhunr
      <- simulate_rfile_unreachable Dilocs Dirfile Drunr Drunr'
      <- rload_esp Dirfile Drload
      <- impl_got_stack_unreachable Digot Dsunr Dsunr1
      <- simulate_stack_unreachable Dilocs Distack Drload Dimp Dsunr1 Dvunr.
maybe_member : loc -> locset -> type.
maybe_member_yes : maybe_member L LS <- member L N1 LS.
maybe_member_no : maybe_member L LS <- notmember L LS.
decide_member : Pi L:loc. Pi LS:locset. maybe_member L LS -> type.
decide_member_nil : decide_member L1 locnil (maybe_member_no notmember_nil).
decide_member_cons| :
   Pi L:loc. Pi L':loc. Pi LS:locset.
      maybe_loc_eq L L' -> maybe_member L LS
         -> Pi N:nat. maybe_member L (loccons L' N LS) -> type.
decide_member_cons|_hit :
   decide_member_cons| (maybe_loc_eq_yes loc_eq_) X1 N1
      (maybe_member_yes member_hit).
decide_member_cons|_yes :
   decide_member_cons| X1 (maybe_member_yes D) N2
      (maybe_member_yes (member_cons D)).
decide_member_cons|_no :
   decide_member_cons| (maybe_loc_eq_no Dneq) (maybe_member_no Dnm) N1
      (maybe_member_no (notmember_cons Dnm Dneq)).
decide_member_cons :
   decide_member L (loccons L' N LS) D
      <- decide_member L LS Dmmem
      <- compare_for_loc_eq L L' Dmeq
      <- decide_member_cons| Dmeq Dmmem N D.
can_heap_collect :
   Pi LS:locset. Pi H:heap. Pi H':heap. heap_collect LS H H' -> type.
can_heap_collect_nil : can_heap_collect LS1 hnil hnil heap_collect_nil.
can_heap_collect_cons| :
   Pi L:loc. Pi LS:locset. Pi H:heap. Pi H':heap. Pi H'':heap.
      maybe_member L LS -> heap_collect LS H H'
         -> Pi V:val. heap_collect LS (hcons L V H) H'' -> type.
can_heap_collect_cons|_keep :
   can_heap_collect_cons| (maybe_member_no Dnm) D V1 (heap_collect_keep D Dnm).
can_heap_collect_cons|_drop :
   can_heap_collect_cons| (maybe_member_yes Dmem) D V1
      (heap_collect_drop D Dmem).
can_heap_collect_cons :
   can_heap_collect LS (hcons L V H) H'' D
      <- decide_member L LS Dmmem
      <- can_heap_collect LS H H' Dcoll
      <- can_heap_collect_cons| Dmmem Dcoll V D.
sectset_wf : memory -> sectset -> type.
sectset_wf_nil : sectset_wf mnil sectnil.
sectset_wf_ss :
   sectset_wf (mcons B1 N1 (section_valid ss S1) H) SS <- sectset_wf H SS.
sectset_wf_cs :
   sectset_wf (mcons B1 N1 (section_valid cs S1) H) SS <- sectset_wf H SS.
sectset_wf_keep :
   sectset_wf (mcons B1 N1 (section_valid hs S1) H) SS <- sectset_wf H SS.
sectset_wf_drop :
   sectset_wf (mcons A N (section_valid hs S1) H) (sectcons A A' SS)
      <- represents N B
      <- add A B A' zero
      <- sectset_wf H SS.
sectset_wf_reserved :
   sectset_wf (mcons B1 N1 (section_reserved RSECT1) H) SS <- sectset_wf H SS.
read_sectset_wf :
   Pi Hm:memory. Pi OR1:oracle. Pi SS:sectset. Pi OR2:oracle.
      read_sectset Hm OR1 SS OR2 -> sectset_wf Hm SS -> type.
-n : read_sectset_wf read_sectset_nil sectset_wf_nil.
- :
   read_sectset_wf (read_sectset_ss Drss) (sectset_wf_ss Dswf)
      <- read_sectset_wf Drss Dswf.
-c :
   read_sectset_wf (read_sectset_cs Drss) (sectset_wf_cs Dswf)
      <- read_sectset_wf Drss Dswf.
-r :
   read_sectset_wf (read_sectset_reserved Drss) (sectset_wf_reserved Dswf)
      <- read_sectset_wf Drss Dswf.
-k :
   read_sectset_wf (read_sectset_keep Drss X1) (sectset_wf_keep Dswf)
      <- read_sectset_wf Drss Dswf.
-d :
   read_sectset_wf (read_sectset_drop Drss Dadd Drep X1)
      (sectset_wf_drop Dswf Dadd Drep)
      <- read_sectset_wf Drss Dswf.
nil_sectset_wf :
   Pi SS:sectset. sectset_wf mnil SS -> sectset_eq SS sectnil -> type.
-n : nil_sectset_wf sectset_wf_nil sectset_eq_.
cs_sectset_wf :
   Pi M1:memory. Pi SS:sectset. Pi N1:nat. Pi M2:memory. Pi A:binary wwb.
      Pi S1:string N1.
      sectset_wf M1 SS -> mextend* M2 A (section_valid cs S1) M1
         -> sectset_wf M2 SS -> type.
-n : cs_sectset_wf (sectset_wf_cs sectset_wf_nil) mextend_nil sectset_wf_nil.
-b : cs_sectset_wf (sectset_wf_cs Dsec) (mextend_between X1 X2 X3) Dsec.
-cs :
   cs_sectset_wf (sectset_wf_ss Dsec) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_ss Dsec1)
      <- cs_sectset_wf Dsec Dmext Dsec1.
-cc :
   cs_sectset_wf (sectset_wf_cs Dsec) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_cs Dsec1)
      <- cs_sectset_wf Dsec Dmext Dsec1.
-ck :
   cs_sectset_wf (sectset_wf_keep Dsec) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_keep Dsec1)
      <- cs_sectset_wf Dsec Dmext Dsec1.
-cd :
   cs_sectset_wf (sectset_wf_drop Dsec Dadd Drep) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_drop Dsec1 Dadd Drep)
      <- cs_sectset_wf Dsec Dmext Dsec1.
-cr :
   cs_sectset_wf (sectset_wf_reserved Dsec) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_reserved Dsec1)
      <- cs_sectset_wf Dsec Dmext Dsec1.
reserved_sectset_wf :
   Pi M1:memory. Pi SS:sectset. Pi N1:nat. Pi M2:memory. Pi B1:binary wwb.
      Pi RSECT1:rsection N1.
      sectset_wf M1 SS -> mextend* M2 B1 (section_reserved RSECT1) M1
         -> sectset_wf M2 SS -> type.
-n :
   reserved_sectset_wf (sectset_wf_reserved sectset_wf_nil) mextend_nil
      sectset_wf_nil.
-b :
   reserved_sectset_wf (sectset_wf_reserved Dsec) (mextend_between X1 X2 X3)
      Dsec.
-cs :
   reserved_sectset_wf (sectset_wf_ss Dsec) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_ss Dsec1)
      <- reserved_sectset_wf Dsec Dmext Dsec1.
-cc :
   reserved_sectset_wf (sectset_wf_cs Dsec) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_cs Dsec1)
      <- reserved_sectset_wf Dsec Dmext Dsec1.
-ck :
   reserved_sectset_wf (sectset_wf_keep Dsec) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_keep Dsec1)
      <- reserved_sectset_wf Dsec Dmext Dsec1.
-cd :
   reserved_sectset_wf (sectset_wf_drop Dsec Dadd Drep)
      (mextend_cons Dmext X1 X2 X3) (sectset_wf_drop Dsec1 Dadd Drep)
      <- reserved_sectset_wf Dsec Dmext Dsec1.
-cr :
   reserved_sectset_wf (sectset_wf_reserved Dsec) (mextend_cons Dmext X1 X2 X3)
      (sectset_wf_reserved Dsec1)
      <- reserved_sectset_wf Dsec Dmext Dsec1.
impl_locset_weaken :
   Pi LM:locmap. Pi LS:locset. Pi SS:sectset. Pi Astart:binary wwb.
      impl_locset LM LS SS -> notin_lm Astart LM
         -> Pi Aend:binary wwb.
                impl_locset LM LS (sectcons Astart Aend SS) -> type.
-n :
   impl_locset_weaken (impl_locset_nil Dabs) Dnotin Aend
      (impl_locset_nil (sectset_absent_cons Dabs Dnotin)).
-c :
   impl_locset_weaken (impl_locset_cons Dils Dsext Dadd Drep Dlook) Dnotin Aend
      (impl_locset_cons Dils1 (sectset_extend_cons Dsext) Dadd Drep Dlook)
      <- impl_locset_weaken Dils Dnotin Aend Dils1.
impl_memory_heap : locmap -> memory -> heap -> type.
impl_memory_heap_nil : impl_memory_heap LM mnil H1.
impl_memory_heap_cs :
   impl_memory_heap LM (mcons Astart Nsize (section_valid cs S) M) H
      <- lookup_loc LM L Astart one'
      <- segof L cseg
      <- hlookup H L V
      <- size V Nsize
      <- impl_memory_heap LM M H.
impl_memory_heap_ss :
   impl_memory_heap LM (mcons B1 N1 (section_valid ss S1) M) H
      <- impl_memory_heap LM M H.
impl_memory_heap_reserved :
   impl_memory_heap LM (mcons B1 N1 (section_reserved RSECT1) M) H
      <- impl_memory_heap LM M H.
impl_memory_heap_absent :
   impl_memory_heap LM (mcons Astart N1 SECT1 M) H
      <- notin_lm Astart LM
      <- impl_memory_heap LM M H.
impl_memory_heap_cons :
   impl_memory_heap LM (mcons Astart Nsize (section_valid hs S) M) H
      <- lookup_loc LM L Astart one'
      <- segof L hseg
      <- hlookup H L V
      <- size V Nsize
      <- impl_memory_heap LM M H.
lm_absent_impl_memory :
   Pi LM:locmap. Pi Hm:memory.
      lm_absent LM Hm -> Pi Hh:heap. impl_memory_heap LM Hm Hh -> type.
-n : lm_absent_impl_memory lm_absent_nil H1 impl_memory_heap_nil.
-c :
   lm_absent_impl_memory (lm_absent_cons Dabs Dnotin) Hh
      (impl_memory_heap_absent Dimp Dnotin)
      <- lm_absent_impl_memory Dabs Hh Dimp.
impl_memory_heap_weaken :
   Pi LM:locmap. Pi Hm:memory. Pi Ha:heap. Pi L:loc. Pi V:val.
      impl_memory_heap LM Hm Ha -> goodheap (hcons L V Ha)
         -> impl_memory_heap LM Hm (hcons L V Ha) -> type.
-n : impl_memory_heap_weaken impl_memory_heap_nil X1 impl_memory_heap_nil.
-c :
   impl_memory_heap_weaken
      (impl_memory_heap_cs Diheap Dsize Dhlook Dsegof Dlook) Dg
      (impl_memory_heap_cs Diheap' Dsize Dhlook' Dsegof Dlook)
      <- impl_memory_heap_weaken Diheap Dg Diheap'
      <- hlookup_cons Dhlook Dg Dhlook'.
- :
   impl_memory_heap_weaken (impl_memory_heap_ss Diheap) Dg
      (impl_memory_heap_ss Diheap')
      <- impl_memory_heap_weaken Diheap Dg Diheap'.
-r :
   impl_memory_heap_weaken (impl_memory_heap_reserved Diheap) Dg
      (impl_memory_heap_reserved Diheap')
      <- impl_memory_heap_weaken Diheap Dg Diheap'.
-a :
   impl_memory_heap_weaken (impl_memory_heap_absent Diheap Dnotin) Dg
      (impl_memory_heap_absent Diheap' Dnotin)
      <- impl_memory_heap_weaken Diheap Dg Diheap'.
-h :
   impl_memory_heap_weaken
      (impl_memory_heap_cons Diheap Dsize Dhlook Dsegof Dlook) Dg
      (impl_memory_heap_cons Diheap' Dsize Dhlook' Dsegof Dlook)
      <- impl_memory_heap_weaken Diheap Dg Diheap'
      <- hlookup_cons Dhlook Dg Dhlook'.
impl_heap_memory_corr_cs :
   Pi LM:locmap. Pi Hm:memory. Pi Ha:heap. Pi N1:nat. Pi A:binary wwb.
      Pi S:string N1. Pi Hm':memory. Pi L:loc. Pi N2:nat. Pi B1:binary wwb.
      Pi IM1:irfmap. Pi V:val.
      impl_memory_heap LM Hm Ha -> mextend* Hm A (section_valid cs S) Hm'
         -> lookup_loc LM L A one' -> segof L cseg
         -> impl_val (corresp_info_ N2 B1 LM IM1) S V -> goodheap (hcons L V Ha)
         -> impl_memory_heap LM Hm' (hcons L V Ha) -> type.
-n :
   impl_heap_memory_corr_cs Diheap mextend_nil Dlook Dsegof Dival Dgh
      (impl_memory_heap_cs impl_memory_heap_nil Dsize hlookup_hit Dsegof Dlook)
      <- str_val_size_corr S1 Dival Dsize.
-b :
   impl_heap_memory_corr_cs Diheap (mextend_between X1 X2 X3) Dlook Dsegof Dival
      Dgh (impl_memory_heap_cs Diheap' Dsize hlookup_hit Dsegof Dlook)
      <- impl_memory_heap_weaken Diheap Dgh Diheap'
      <- str_val_size_corr S1 Dival Dsize.
-c :
   impl_heap_memory_corr_cs
      (impl_memory_heap_cs Diheap Dsize Dhlook Dsegof1 Dlook1)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_cs Diheap' Dsize Dhlook' Dsegof1 Dlook1)
      <- impl_heap_memory_corr_cs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'
      <- hlookup_cons Dhlook Dgh Dhlook'.
- :
   impl_heap_memory_corr_cs (impl_memory_heap_ss Diheap)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_ss Diheap')
      <- impl_heap_memory_corr_cs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'.
-r :
   impl_heap_memory_corr_cs (impl_memory_heap_reserved Diheap)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_reserved Diheap')
      <- impl_heap_memory_corr_cs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'.
-a :
   impl_heap_memory_corr_cs (impl_memory_heap_absent Diheap Dnotin)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_absent Diheap' Dnotin)
      <- impl_heap_memory_corr_cs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'.
-h :
   impl_heap_memory_corr_cs
      (impl_memory_heap_cons Diheap Dsize Dhlook Dsegof1 Dlook1)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_cons Diheap' Dsize Dhlook' Dsegof1 Dlook1)
      <- impl_heap_memory_corr_cs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'
      <- hlookup_cons Dhlook Dgh Dhlook'.
impl_heap_memory_corr_hs :
   Pi LM:locmap. Pi Hm:memory. Pi Ha:heap. Pi N1:nat. Pi A:binary wwb.
      Pi S:string N1. Pi Hm':memory. Pi L:loc. Pi N2:nat. Pi B1:binary wwb.
      Pi IM1:irfmap. Pi V:val.
      impl_memory_heap LM Hm Ha -> mextend* Hm A (section_valid hs S) Hm'
         -> lookup_loc LM L A one' -> segof L hseg
         -> impl_val (corresp_info_ N2 B1 LM IM1) S V -> goodheap (hcons L V Ha)
         -> impl_memory_heap LM Hm' (hcons L V Ha) -> type.
-n :
   impl_heap_memory_corr_hs Diheap mextend_nil Dlook Dsegof Dival Dgh
      (impl_memory_heap_cons impl_memory_heap_nil Dsize hlookup_hit Dsegof Dlook)
      <- str_val_size_corr S1 Dival Dsize.
-b :
   impl_heap_memory_corr_hs Diheap (mextend_between X1 X2 X3) Dlook Dsegof Dival
      Dgh (impl_memory_heap_cons Diheap' Dsize hlookup_hit Dsegof Dlook)
      <- impl_memory_heap_weaken Diheap Dgh Diheap'
      <- str_val_size_corr S1 Dival Dsize.
-c :
   impl_heap_memory_corr_hs
      (impl_memory_heap_cs Diheap Dsize Dhlook Dsegof1 Dlook1)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_cs Diheap' Dsize Dhlook' Dsegof1 Dlook1)
      <- impl_heap_memory_corr_hs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'
      <- hlookup_cons Dhlook Dgh Dhlook'.
- :
   impl_heap_memory_corr_hs (impl_memory_heap_ss Diheap)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_ss Diheap')
      <- impl_heap_memory_corr_hs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'.
-r :
   impl_heap_memory_corr_hs (impl_memory_heap_reserved Diheap)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_reserved Diheap')
      <- impl_heap_memory_corr_hs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'.
-a :
   impl_heap_memory_corr_hs (impl_memory_heap_absent Diheap Dnotin)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_absent Diheap' Dnotin)
      <- impl_heap_memory_corr_hs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'.
-h :
   impl_heap_memory_corr_hs
      (impl_memory_heap_cons Diheap Dsize Dhlook Dsegof1 Dlook1)
      (mextend_cons Dmext X1 X2 X3) Dlook Dsegof Dival Dgh
      (impl_memory_heap_cons Diheap' Dsize Dhlook' Dsegof1 Dlook1)
      <- impl_heap_memory_corr_hs Diheap Dmext Dlook Dsegof Dival Dgh Diheap'
      <- hlookup_cons Dhlook Dgh Dhlook'.
impl_heap_memory_corr :
   Pi N1:nat. Pi B1:binary wwb. Pi LM:locmap. Pi IM1:irfmap. Pi M:memory.
      Pi H:heap.
      impl_heap (corresp_info_ N1 B1 LM IM1) M H -> impl_memory_heap LM M H
         -> type.
-n :
   impl_heap_memory_corr (impl_heap_nil Dabs) Dimp
      <- lm_absent_impl_memory Dabs hnil Dimp.
-c :
   impl_heap_memory_corr
      (impl_heap_cons Dmext impl_seg_cs Dsegof X1 X2 Dival Dlook Dgh Diheap)
      Dimp2
      <- impl_heap_memory_corr Diheap Dimp1
      <- lt_succ N2 Dlt
      <- impl_heap_memory_corr_cs Dimp1 Dmext Dlook Dsegof Dival
            (goodheap_ (goodheap_cons Dgh (loc_lt_ Dlt))) Dimp2.
-h :
   impl_heap_memory_corr
      (impl_heap_cons Dmext impl_seg_hs Dsegof X1 X2 Dival Dlook Dgh Diheap)
      Dimp2
      <- impl_heap_memory_corr Diheap Dimp1
      <- lt_succ N2 Dlt
      <- impl_heap_memory_corr_hs Dimp1 Dmext Dlook Dsegof Dival
            (goodheap_ (goodheap_cons Dgh (loc_lt_ Dlt))) Dimp2.
simulate_read_sectset :
   Pi Hm:memory. Pi OR1:oracle. Pi SS:sectset. Pi OR2:oracle. Pi LM:locmap.
      Pi Hh:heap. Pi LS:locset.
      read_sectset Hm OR1 SS OR2 -> impl_memory_heap LM Hm Hh
         -> impl_locset LM LS SS -> locset_wf LS Hh -> type.
-n :
   simulate_read_sectset read_sectset_nil X1
      (impl_locset_nil sectset_absent_nil) locset_wf_nil.
-r :
   simulate_read_sectset (read_sectset_reserved Drss)
      (impl_memory_heap_reserved Dimh) Dils Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
-r :
   simulate_read_sectset (read_sectset_reserved Drss)
      (impl_memory_heap_absent Dimh X1) Dils Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
-s :
   simulate_read_sectset (read_sectset_ss Drss) (impl_memory_heap_ss Dimh) Dils
      Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
-s :
   simulate_read_sectset (read_sectset_ss Drss)
      (impl_memory_heap_absent Dimh X1) Dils Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
-cs :
   simulate_read_sectset (read_sectset_cs Drss)
      (impl_memory_heap_cs Dimh X1 X2 X3 X4) Dils Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
-cs :
   simulate_read_sectset (read_sectset_cs Drss)
      (impl_memory_heap_absent Dimh X1) Dils Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
-hs :
   simulate_read_sectset (read_sectset_keep Drss X1)
      (impl_memory_heap_absent Dimh X2) Dils Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
-hs :
   simulate_read_sectset (read_sectset_drop Drss X1 X2 X3)
      (impl_memory_heap_absent Dimh Dabs) Dils1 Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf
      <- impl_locset_weaken Dils Dabs B2 Dils1.
-hs :
   simulate_read_sectset (read_sectset_keep Drss X1)
      (impl_memory_heap_cons Dimh X2 X3 X4 X5) Dils Dlwf
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
-hs :
   simulate_read_sectset (read_sectset_drop Drss Dadd Drep X1)
      (impl_memory_heap_cons Dimh Dsize Dhlook Dsegof Dlook)
      (impl_locset_cons Dils sectset_extend_before Dadd Drep Dlook)
      (locset_wf_cons Dlwf Dsize Dhlook Dsegof)
      <- simulate_read_sectset Drss Dimh Dils Dlwf.
false_implies_inotmember :
   false -> Pi A:binary wwb. Pi SS:sectset. inotmember A SS -> type.
simulate_notmember* :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi L:loc.
      Pi A:binary wwb.
      locmap_wf LM L1 -> impl_locset LM LS SS -> notmember L LS
         -> lookup_loc LM L A one' -> maybe_imember A SS -> inotmember A SS
         -> type.
-n : simulate_notmember* Dlwf Dils Dnm Dlook (maybe_imember_no Dinm) Dinm.
-y :
   simulate_notmember* Dlwf Dils Dnm Dlook (maybe_imember_yes Dim) Dinm
      <- simulate_imember Dlwf Dils Dlook Dim Dmem
      <- member_contradict Dmem Dnm Dfalse
      <- false_implies_inotmember Dfalse B1 SS1 Dinm.
simulate_notmember :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi L:loc.
      Pi A:binary wwb.
      locmap_wf LM L1 -> impl_locset LM LS SS -> notmember L LS
         -> lookup_loc LM L A one' -> inotmember A SS -> type.
- :
   simulate_notmember Dlwf Dils Dnm Dlook Dinm
      <- decide_imember B1 SS1 Dmaybe
      <- simulate_notmember* Dlwf Dils Dnm Dlook Dmaybe Dinm.
simulate_member* :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi L:loc. Pi N:nat.
      Pi A:binary wwb. Pi B1:binary wwb.
      locmap_wf LM L1 -> impl_locset LM LS SS -> member L N LS
         -> lookup_loc LM L A one' -> maybe_imember A SS -> imember A B1 SS
         -> type.
-y : simulate_member* Dlwf Dils Dm Dlook (maybe_imember_yes Dim) Dim.
-n :
   simulate_member* Dlwf Dils Dm Dlook (maybe_imember_no Dinm) Dim
      <- simulate_inotmember Dlwf Dils Dlook Dinm Dnm
      <- member_contradict Dm Dnm Dfalse
      <- false_implies_imember Dfalse B2 SS1 Dim.
simulate_member :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi L:loc. Pi N:nat.
      Pi A:binary wwb. Pi B1:binary wwb.
      locmap_wf LM L1 -> impl_locset LM LS SS -> member L N LS
         -> lookup_loc LM L A one' -> imember A B1 SS -> type.
- :
   simulate_member Dlwf Dils Dmem Dlook Dimem
      <- decide_imember B1 SS1 Dmaybe
      <- simulate_member* Dlwf Dils Dmem Dlook Dmaybe Dimem.
memory_collect_order :
   Pi SS:sectset. Pi M1:memory. Pi M2:memory. Pi A:binary wwb.
      memory_collect SS M1 M2 -> memory_wf A M1 -> memory_wf A M2 -> type.
-n : memory_collect_order memory_collect_nil memory_wf_nil memory_wf_nil.
-k :
   memory_collect_order (memory_collect_keep Dmc X1)
      (memory_wf_cons Dorder Dadd1 Drep Dneq Dadd2)
      (memory_wf_cons Dorder1 Dadd1 Drep Dneq Dadd2)
      <- memory_collect_order Dmc Dorder Dorder1.
-d :
   memory_collect_order (memory_collect_drop Dmc X2)
      (memory_wf_cons Dorder Dadd1 X3 X4 Dadd2) Dorder2
      <- memory_collect_order Dmc Dorder Dorder1
      <- add_assoc Dadd2 Dadd1 X1 Dadd3
      <- memory_wf_greater Dorder1 Dadd3 Dorder2.
memory_collect_stack_absent :
   Pi SS:sectset. Pi M1:memory. Pi M2:memory.
      memory_collect SS M1 M2 -> stack_absent M1 -> stack_absent M2 -> type.
-n :
   memory_collect_stack_absent memory_collect_nil stack_absent_nil
      stack_absent_nil.
-k :
   memory_collect_stack_absent (memory_collect_keep Dmcoll X1)
      (stack_absent_cs Dsabs) (stack_absent_cs Dsabs1)
      <- memory_collect_stack_absent Dmcoll Dsabs Dsabs1.
-k :
   memory_collect_stack_absent (memory_collect_keep Dmcoll X1)
      (stack_absent_hs Dsabs) (stack_absent_hs Dsabs1)
      <- memory_collect_stack_absent Dmcoll Dsabs Dsabs1.
-k :
   memory_collect_stack_absent (memory_collect_keep Dmcoll X1)
      (stack_absent_reserved Dsabs) (stack_absent_reserved Dsabs1)
      <- memory_collect_stack_absent Dmcoll Dsabs Dsabs1.
-d :
   memory_collect_stack_absent (memory_collect_drop Dmcoll X1)
      (stack_absent_cs Dsabs) Dsabs1
      <- memory_collect_stack_absent Dmcoll Dsabs Dsabs1.
-d :
   memory_collect_stack_absent (memory_collect_drop Dmcoll X1)
      (stack_absent_hs Dsabs) Dsabs1
      <- memory_collect_stack_absent Dmcoll Dsabs Dsabs1.
-d :
   memory_collect_stack_absent (memory_collect_drop Dmcoll X1)
      (stack_absent_reserved Dsabs) Dsabs1
      <- memory_collect_stack_absent Dmcoll Dsabs Dsabs1.
memory_collect_add :
   Pi SS:sectset. Pi B1:binary wwb. Pi N:nat. Pi S:section N. Pi M:memory.
      Pi B2:binary wwb. Pi N1:nat. Pi SECT1:section N1. Pi H1:memory.
      Pi B3:binary wwb. Pi B4:binary wwb.
      memory_collect SS (mcons B1 N S M) (mcons B2 N1 SECT1 H1)
         -> memory_wf B3 (mcons B1 N S M) -> add B1 B4 B2 zero -> type.
-k :
   memory_collect_add (memory_collect_keep X1 X2) X3 Dadd
      <- can_zero wwb B1 Diz
      <- add_ident B2 Diz Dadd1
      <- add_commute Dadd1 Dadd.
-d :
   memory_collect_add (memory_collect_drop Dmc X3)
      (memory_wf_cons (memory_wf_cons Dorder Daddi1 Drepi Dneq Daddi2) Dadd1
          Drep X4 Dadd2)
      Dadd5
      <- memory_collect_add Dmc (memory_wf_cons Dorder Daddi1 Drepi Dneq Daddi2)
            Dadd3
      <- add_assoc Dadd1 Daddi2 X2 Dadd4
      <- add_assoc Dadd4 Dadd3 X1 Dadd5.
inotmember_mextend| :
   Pi M2':memory.
      false
         -> Pi SS:sectset. Pi M1':memory. Pi A:binary wwb. Pi N:nat.
                Pi S:section N. Pi M2:memory.
                memory_collect SS M1' M2' -> mextend* M2' A S M2 -> type.
inotmember_mextend :
   Pi SS:sectset. Pi M1:memory. Pi M2:memory. Pi B1:binary wwb. Pi N1:nat.
      Pi M1':memory. Pi A:binary wwb. Pi S:section N1. Pi M2':memory.
      memory_collect SS M1 M2 -> memory_wf B1 M1 -> mextend* M1' A S M1
         -> inotmember A SS -> memory_collect SS M1' M2' -> mextend* M2' A S M2
         -> type.
-n :
   inotmember_mextend (memory_collect_keep X1 X2) X3 mextend_nil X4
      memory_collect_nil mextend_nil.
-n :
   inotmember_mextend (memory_collect_drop X1 Dim) X2 mextend_nil Dinm Dmc Dme
      <- imember_mutex Dim Dinm Dfalse
      <- inotmember_mextend| Dfalse SS1 mnil B1 (s N1) SECT1 H2 Dmc Dme.
-b :
   inotmember_mextend (memory_collect_keep Dmc X2)
      (memory_wf_cons Dorder X3 X4 X5 X6) (mextend_between Dadd1 Dadd2 Drep) X7
      Dmc (mextend_between Dadd4 Dadd2 Drep)
      <- memory_collect_add Dmc Dorder Dadd3
      <- add_assoc Dadd1 Dadd3 X1 Dadd4.
-b :
   inotmember_mextend (memory_collect_keep Dmc X1) X2
      (mextend_between Dadd1 Dadd2 Drep) X3 Dmc mextend_nil.
-b :
   inotmember_mextend (memory_collect_drop X1 Dim) X2 (mextend_between X3 X4 X5)
      Dinm Dmc Dme
      <- imember_mutex Dim Dinm Dfalse
      <- inotmember_mextend| Dfalse SS1 (mcons B1 N1 SECT1 H2) B2 (s N2) SECT2
            H3 Dmc Dme.
-c :
   inotmember_mextend (memory_collect_keep Dmc Dinmo)
      (memory_wf_cons Dorder X1 X2 X3 X4) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      Dinm (memory_collect_keep Dmc1 Dinmo)
      (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- inotmember_mextend Dmc Dorder Dmext Dinm Dmc1 Dmext1.
-c :
   inotmember_mextend (memory_collect_drop Dmc Dim)
      (memory_wf_cons Dorder X1 X2 X3 X4) (mextend_cons Dmext X5 X6 X7) Dinm
      (memory_collect_drop Dmc1 Dim) Dmext1
      <- inotmember_mextend Dmc Dorder Dmext Dinm Dmc1 Dmext1.
false_implies_memory_collect :
   false
      -> Pi SS:sectset. Pi M1:memory. Pi M2:memory.
             memory_collect SS M1 M2 -> type.
imember_mextend :
   Pi SS:sectset. Pi M1:memory. Pi M2:memory. Pi N1:nat. Pi M1':memory.
      Pi A:binary wwb. Pi S:section N1. Pi B1:binary wwb.
      memory_collect SS M1 M2 -> mextend* M1' A S M1 -> imember A B1 SS
         -> memory_collect SS M1' M2 -> type.
-n :
   imember_mextend (memory_collect_drop X1 X2) mextend_nil X3 
memory_collect_nil.
-n :
   imember_mextend (memory_collect_keep X1 Dinm) mextend_nil Dim Dmc
      <- imember_mutex Dim Dinm Dfalse
      <- false_implies_memory_collect Dfalse SS1 mnil (mcons B1 (s N1) SECT1 H1)
            Dmc.
-b :
   imember_mextend (memory_collect_drop Dmc X1) (mextend_between X2 X3 X4) X5
      Dmc.
-b :
   imember_mextend (memory_collect_keep X1 Dinm) (mextend_between X2 X3 X4) Dim
      Dmc
      <- imember_mutex Dim Dinm Dfalse
      <- false_implies_memory_collect Dfalse SS1 (mcons B1 N1 SECT1 H1)
            (mcons B2 (s N2) SECT2 H2) Dmc.
-c :
   imember_mextend (memory_collect_drop Dmc Dimo) (mextend_cons Dmext X1 X2 X3)
      Dim (memory_collect_drop Dmc1 Dimo)
      <- imember_mextend Dmc Dmext Dim Dmc1.
-c :
   imember_mextend (memory_collect_keep Dmc Dinmo) (mextend_cons Dmext X1 X2 X3)
      Dim (memory_collect_keep Dmc1 Dinmo)
      <- imember_mextend Dmc Dmext Dim Dmc1.
goodheap_greater :
   Pi H:heap. Pi L1:loc. Pi L2:loc.
      goodheap* H L1 -> loc_lt L1 L2 -> goodheap* H L2 -> type.
-n : goodheap_greater goodheap_nil X1 goodheap_nil.
-c :
   goodheap_greater (goodheap_cons Dgh (loc_lt_ Dlt1)) (loc_lt_ Dlt2)
      (goodheap_cons Dgh (loc_lt_ Dlt3))
      <- lt_trans Dlt1 Dlt2 Dlt3.
collect_preserves_goodheap :
   Pi H:heap. Pi L:loc. Pi LS:locset. Pi H':heap.
      goodheap* H L -> heap_collect LS H H' -> goodheap* H' L -> type.
-n : collect_preserves_goodheap X1 heap_collect_nil goodheap_nil.
-k :
   collect_preserves_goodheap (goodheap_cons Dgh Dloclt)
      (heap_collect_keep Dhc X1) (goodheap_cons Dgh1 Dloclt)
      <- collect_preserves_goodheap Dgh Dhc Dgh1.
-d :
   collect_preserves_goodheap (goodheap_cons Dgh Dloclt)
      (heap_collect_drop Dhc X1) Dgh2
      <- collect_preserves_goodheap Dgh Dhc Dgh1
      <- goodheap_greater Dgh1 Dloclt Dgh2.
collect_preserves_lm_absent :
   Pi LM:locmap. Pi H:memory. Pi SS:sectset. Pi H':memory.
      lm_absent LM H -> memory_collect SS H H' -> lm_absent LM H' -> type.
-n : collect_preserves_lm_absent X1 memory_collect_nil lm_absent_nil.
-k :
   collect_preserves_lm_absent (lm_absent_cons Dabs Dnotin)
      (memory_collect_keep Dmc X1) (lm_absent_cons Dabs1 Dnotin)
      <- collect_preserves_lm_absent Dabs Dmc Dabs1.
-d :
   collect_preserves_lm_absent (lm_absent_cons Dabs Dnotin)
      (memory_collect_drop Dmc X1) Dabs1
      <- collect_preserves_lm_absent Dabs Dmc Dabs1.
locmap_collect : locset -> locmap -> locmap -> type.
locmap_collect_nil : locmap_collect LS locmap_nil locmap_nil.
locmap_collect_keep_one :
   locmap_collect LS (locmap_cons one' L A LM1) (locmap_cons one' L A LM2)
      <- notmember L LS
      <- locmap_collect LS LM1 LM2.
locmap_collect_drop_one :
   locmap_collect LS (locmap_cons one' L A LM1) (locmap_cons zero L A LM2)
      <- member L N1 LS
      <- locmap_collect LS LM1 LM2.
locmap_collect_zero :
   locmap_collect LS (locmap_cons zero L A LM1) (locmap_cons zero L A LM2)
      <- locmap_collect LS LM1 LM2.
locmap_collect_notin :
   Pi A:binary wwb. Pi LM:locmap. Pi LS:locset. Pi LM1:locmap.
      notin_lm A LM -> locmap_collect LS LM LM1 -> notin_lm A LM1 -> type.
- : locmap_collect_notin notin_lm_nil locmap_collect_nil notin_lm_nil.
- :
   locmap_collect_notin (notin_lm_one Dnotin Dbneq)
      (locmap_collect_keep_one Dlc X1) (notin_lm_one Dnotin1 Dbneq)
      <- locmap_collect_notin Dnotin Dlc Dnotin1.
- :
   locmap_collect_notin (notin_lm_one Dnotin Dbneq)
      (locmap_collect_drop_one Dlc X1) (notin_lm_zero Dnotin1)
      <- locmap_collect_notin Dnotin Dlc Dnotin1.
- :
   locmap_collect_notin (notin_lm_zero Dnotin) (locmap_collect_zero Dlc)
      (notin_lm_zero Dnotin1)
      <- locmap_collect_notin Dnotin Dlc Dnotin1.
locmap_collect_wf :
   Pi LM:locmap. Pi L:loc. Pi LS:locset. Pi LM1:locmap.
      locmap_wf LM L -> locmap_collect LS LM LM1 -> locmap_wf LM1 L -> type.
- : locmap_collect_wf locmap_wf_nil locmap_collect_nil locmap_wf_nil.
- :
   locmap_collect_wf (locmap_wf_zero Dlwf Dloclt) (locmap_collect_zero Dlc)
      (locmap_wf_zero Dlwf1 Dloclt)
      <- locmap_collect_wf Dlwf Dlc Dlwf1.
- :
   locmap_collect_wf (locmap_wf_one Dlwf Dnotin Dloclt)
      (locmap_collect_keep_one Dlc X1) (locmap_wf_one Dlwf1 Dnotin1 Dloclt)
      <- locmap_collect_wf Dlwf Dlc Dlwf1
      <- locmap_collect_notin Dnotin Dlc Dnotin1.
- :
   locmap_collect_wf (locmap_wf_one Dlwf Dnotin Dloclt)
      (locmap_collect_drop_one Dlc X1) (locmap_wf_zero Dlwf1 Dloclt)
      <- locmap_collect_wf Dlwf Dlc Dlwf1.
can_locmap_collect :
   Pi LM:locmap. Pi L:loc. Pi LM1:locmap. Pi LS:locset.
      locmap_wf LM L -> locmap_collect LS LM LM1 -> locmap_wf LM1 L -> type.
- : can_locmap_collect LS locmap_wf_nil locmap_collect_nil locmap_wf_nil.
- :
   can_locmap_collect LS (locmap_wf_zero Dlwf Dloclt) (locmap_collect_zero Dlc)
      (locmap_wf_zero Dlwf1 Dloclt)
      <- can_locmap_collect LS Dlwf Dlc Dlwf1.
can_locmap_collect* :
   Pi L:loc. Pi LS:locset. Pi A:binary wwb. Pi LM:locmap. Pi L1:loc.
      Pi LM':locmap. Pi LM1:locmap.
      maybe_member L LS -> locmap_wf (locmap_cons one' L A LM) L1
         -> locmap_collect LS LM LM'
         -> locmap_collect LS (locmap_cons one' L A LM) LM1 -> locmap_wf LM1 L1
         -> type.
- :
   can_locmap_collect* (maybe_member_yes Dmem)
      (locmap_wf_one Dlwf Dnotin Dloclt) Dlc (locmap_collect_drop_one Dlc Dmem)
      (locmap_wf_zero Dlwf1 Dloclt)
      <- locmap_collect_wf Dlwf Dlc Dlwf1.
- :
   can_locmap_collect* (maybe_member_no Dnm) (locmap_wf_one Dlwf Dnotin Dloclt)
      Dlc (locmap_collect_keep_one Dlc Dnm) (locmap_wf_one Dlwf1 Dnotin1 Dloclt)
      <- locmap_collect_wf Dlwf Dlc Dlwf1
      <- locmap_collect_notin Dnotin Dlc Dnotin1.
- :
   can_locmap_collect LS (locmap_wf_one Dlwf Dnotin Dloclt) Dlc Dlwfc
      <- decide_member L1 LS Dmaybe
      <- can_locmap_collect LS Dlwf Dlc1 X1
      <- can_locmap_collect* Dmaybe (locmap_wf_one Dlwf Dnotin Dloclt) Dlc1 Dlc
            Dlwfc.
lookup_locmap_collect :
   Pi LM:locmap. Pi L:loc. Pi A:binary wwb. Pi B1:bit. Pi LS:locset.
      Pi LM1:locmap. Pi B2:bit.
      lookup_loc LM L A B1 -> locmap_collect LS LM LM1 -> lookup_loc LM1 L A B2
         -> type.
- : lookup_locmap_collect Dlook locmap_collect_nil Dlook.
- :
   lookup_locmap_collect lookup_loc_z (locmap_collect_keep_one X1 X2)
      lookup_loc_z.
- :
   lookup_locmap_collect lookup_loc_z (locmap_collect_drop_one X1 X2)
      lookup_loc_z.
- : lookup_locmap_collect lookup_loc_z (locmap_collect_zero X1) lookup_loc_z.
- :
   lookup_locmap_collect (lookup_loc_s Dlook Dloclt)
      (locmap_collect_keep_one Dlc X1) (lookup_loc_s Dlook1 Dloclt)
      <- lookup_locmap_collect Dlook Dlc Dlook1.
- :
   lookup_locmap_collect (lookup_loc_s Dlook Dloclt)
      (locmap_collect_drop_one Dlc X1) (lookup_loc_s Dlook1 Dloclt)
      <- lookup_locmap_collect Dlook Dlc Dlook1.
- :
   lookup_locmap_collect (lookup_loc_s Dlook Dloclt) (locmap_collect_zero Dlc)
      (lookup_loc_s Dlook1 Dloclt)
      <- lookup_locmap_collect Dlook Dlc Dlook1.
impl_oper_coll_lm :
   Pi N1:nat. Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi O:oper N1. Pi O':operand. Pi LS:locset. Pi LM1:locmap.
      impl_oper (corresp_info_ Nlim Astart LM IM) O O'
         -> locmap_collect LS LM LM1
         -> impl_oper (corresp_info_ Nlim Astart LM1 IM) O O' -> type.
impl_inst_coll_lm :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi IS:iinstseq. Pi IN:inst. Pi LS:locset. Pi LM1:locmap.
      impl_inst (corresp_info_ Nlim Astart LM IM) IS IN
         -> locmap_collect LS LM LM1
         -> impl_inst (corresp_info_ Nlim Astart LM1 IM) IS IN -> type.
impl_uval_coll_lm :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi S:binary bw. Pi V:uval. Pi LS:locset. Pi LM1:locmap.
      impl_uval (corresp_info_ Nlim Astart LM IM) S V
         -> locmap_collect LS LM LM1
         -> impl_uval (corresp_info_ Nlim Astart LM1 IM) S V -> type.
impl_val_coll_lm :
   Pi N1:nat. Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi S:string N1. Pi V:val. Pi LS:locset. Pi LM1:locmap.
      impl_val (corresp_info_ Nlim Astart LM IM) S V -> locmap_collect LS LM LM1
         -> impl_val (corresp_info_ Nlim Astart LM1 IM) S V -> type.
- : impl_oper_coll_lm (impl_oper_ea Dioperea) X1 (impl_oper_ea Dioperea).
- :
   impl_oper_coll_lm (impl_oper_im Dival) Dlext (impl_oper_im Dival1)
      <- impl_val_coll_lm Dival Dlext Dival1.
- :
   impl_oper_coll_lm (impl_oper_pcrel+ Drep Dhibit) X1
      (impl_oper_pcrel+ Drep Dhibit).
- :
   impl_oper_coll_lm (impl_oper_pcrel- Drep Dneg Dhibit) X1
      (impl_oper_pcrel- Drep Dneg Dhibit).
- :
   impl_inst_coll_lm (impl_add Dioper Dioperea Didest Dallowed) Dlext
      (impl_add Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_addptr Dioper Dioperea Didest) Dlext
      (impl_addptr Dioper1 Dioperea Didest)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_addsptr Drep Dimp Dioperea Didest) X1
      (impl_addsptr Drep Dimp Dioperea Didest).
- :
   impl_inst_coll_lm (impl_and Dioper Dioperea Didest Dallowed) Dlext
      (impl_and Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_bz Dioper) Dlext (impl_bz Dioper1)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_call Dioper) Dlext (impl_call Dioper1)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_cmp Dioper Dioperea Dallowed) Dlext
      (impl_cmp Dioper1 Dioperea Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_cmpjcc Dad Dioper1 Dicond Dioper2 Dioperea Dallowed)
      Dlext (impl_cmpjcc Dad Dioper1' Dicond Dioper2' Dioperea Dallowed)
      <- impl_oper_coll_lm Dioper1 Dlext Dioper1'
      <- impl_oper_coll_lm Dioper2 Dlext Dioper2'.
- : impl_inst_coll_lm (impl_fload Dioperea) X1 (impl_fload Dioperea).
- : impl_inst_coll_lm impl_fnop X1 impl_fnop.
- : impl_inst_coll_lm (impl_fstore Didest) X1 (impl_fstore Didest).
- : impl_inst_coll_lm impl_fstflags X1 impl_fstflags.
- : impl_inst_coll_lm impl_halt X1 impl_halt.
- :
   impl_inst_coll_lm (impl_jcc Dioper Dicond) Dlext (impl_jcc Dioper1 Dicond)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_jump Dioper) Dlext (impl_jump Dioper1)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_mov Dioper Didest) Dlext (impl_mov Dioper1 Didest)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_movsx Dioper Didest D1 D2) Dlext
      (impl_movsx Dioper1 Didest D1 D2)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_movzx Dioper Didest D1 D2) Dlext
      (impl_movzx Dioper1 Didest D1 D2)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- : impl_inst_coll_lm impl_nop X1 impl_nop.
- :
   impl_inst_coll_lm (impl_or Dioper Dioperea Didest Dallowed) Dlext
      (impl_or Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- : impl_inst_coll_lm (impl_pop D) X1 (impl_pop D).
- :
   impl_inst_coll_lm (impl_push Dioper) Dlext (impl_push Dioper1)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_push_rel Dioper Dadd Drep Dimp) Dlext
      (impl_push_rel Dioper1 Dadd Drep Dimp)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- : impl_inst_coll_lm impl_ret X1 impl_ret.
- :
   impl_inst_coll_lm (impl_rol Dioper Dioperea Didest) Dlext
      (impl_rol Dioper1 Dioperea Didest)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_rcl Dioper Dioperea Didest) Dlext
      (impl_rcl Dioper1 Dioperea Didest)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_ror Dioper Dioperea Didest) Dlext
      (impl_ror Dioper1 Dioperea Didest)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_rcr Dioper Dioperea Didest) Dlext
      (impl_rcr Dioper1 Dioperea Didest)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_shl Dioper Dioperea Didest Dallowed) Dlext
      (impl_shl Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_shr Dioper Dioperea Didest Dallowed) Dlext
      (impl_shr Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_sar Dioper Dioperea Didest Dallowed) Dlext
      (impl_sar Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_salloc Dadd1 Dadd2 Dnateq Drep Dimp) X1
      (impl_salloc Dadd1 Dadd2 Dnateq Drep Dimp).
- :
   impl_inst_coll_lm (impl_sfree Dneq Drep Dimp) X1 (impl_sfree Dneq Drep Dimp).
- :
   impl_inst_coll_lm (impl_sub Dioper Dioperea Didest Dallowed) Dlext
      (impl_sub Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_subptr Dioper Dioperea Didest) Dlext
      (impl_subptr Dioper1 Dioperea Didest)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_xor Dioper Dioperea Didest Dallowed) Dlext
      (impl_xor Dioper1 Dioperea Didest Dallowed)
      <- impl_oper_coll_lm Dioper Dlext Dioper1.
- :
   impl_inst_coll_lm (impl_runtime Direg Drep Dprod Diirf) X1
      (impl_runtime Direg Drep Dprod Diirf).
-l : impl_uval_coll_lm impl_uval_lit X1 impl_uval_lit.
-p :
   impl_uval_coll_lm (impl_uval_pointer Dindex Dimp Dadd Drep Dlook) Dlext
      (impl_uval_pointer Dindex Dimp Dadd Drep Dlook1)
      <- lookup_locmap_collect Dlook Dlext Dlook1.
-bp :
   impl_uval_coll_lm
      (impl_uval_pointer_bad Dindex Dimp Dadd Drep1 Dqr Dsum Drep2 Dino Dlook)
      Dlext
      (impl_uval_pointer_bad Dindex Dimp Dadd Drep1 Dqr Dsum Drep2 Dino Dlook1)
      <- lookup_locmap_collect Dlook Dlext Dlook1.
- :
   impl_uval_coll_lm (impl_uval_spointer Dindex Dimp Dadd Dsum Drep) Dlext
      (impl_uval_spointer Dindex Dimp Dadd Dsum Drep).
-g :
   impl_uval_coll_lm (impl_uval_gotpointer Dindex Dimp Dlook) Dlext
      (impl_uval_gotpointer Dindex Dimp Dlook).
-i :
   impl_uval_coll_lm (impl_uval_instruct Diinst Dindex Didecs) Dlext
      (impl_uval_instruct Diinst1 Dindex Didecs)
      <- impl_inst_coll_lm Diinst Dlext Diinst1.
-j : impl_uval_coll_lm impl_uval_junk Dlext impl_uval_junk.
-n : impl_val_coll_lm impl_val_null X1 impl_val_null.
- :
   impl_val_coll_lm (impl_val_cons Dival Duval) Dlext
      (impl_val_cons Dival1 Duval1)
      <- impl_uval_coll_lm Duval Dlext Duval1
      <- impl_val_coll_lm Dival Dlext Dival1.
impl_pc_coll_lm :
   Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi Aeip:binary wwb. Pi PC:pc. Pi LS:locset. Pi LM1:locmap.
      impl_pc (corresp_info_ Nlim Astart LM IM) Aeip PC
         -> locmap_collect LS LM LM1
         -> impl_pc (corresp_info_ Nlim Astart LM1 IM) Aeip PC -> type.
- :
   impl_pc_coll_lm (impl_pc_ Dadd Drep Dlook) Dlmcoll
      (impl_pc_ Dadd Drep Dlook1)
      <- lookup_locmap_collect Dlook Dlmcoll Dlook1.
impl_rfile_coll_lm :
   Pi N1:nat. Pi Nlim:nat. Pi Astart:binary wwb. Pi LM:locmap. Pi IM:irfmap.
      Pi R:regs (s N1). Pi R':rfile* N1. Pi Wesp:string ww. Pi LS:locset.
      Pi LM1:locmap.
      impl_rfile (corresp_info_ Nlim Astart LM IM) R R' Wesp
         -> locmap_collect LS LM LM1
         -> impl_rfile (corresp_info_ Nlim Astart LM1 IM) R R' Wesp -> type.
- : impl_rfile_coll_lm impl_rfile_nil X1 impl_rfile_nil.
- :
   impl_rfile_coll_lm (impl_rfile_cons Dirf Dival) Dlmcoll
      (impl_rfile_cons Dirf1 Dival1)
      <- impl_val_coll_lm Dival Dlmcoll Dival1
      <- impl_rfile_coll_lm Dirf Dlmcoll Dirf1.
false_implies_lookup_loc :
   false
      -> Pi LM:locmap. Pi L:loc. Pi A:binary wwb. Pi BIT:bit.
             lookup_loc LM L A BIT -> type.
lookup_notmember_coll :
   Pi LM:locmap. Pi L:loc. Pi A:binary wwb. Pi BIT:bit. Pi LS:locset.
      Pi LM1:locmap.
      lookup_loc LM L A BIT -> locmap_collect LS LM LM1 -> notmember L LS
         -> lookup_loc LM1 L A BIT -> type.
- : lookup_notmember_coll Dlook locmap_collect_nil X1 Dlook.
- :
   lookup_notmember_coll lookup_loc_z (locmap_collect_keep_one X1 X2) X3
      lookup_loc_z.
- : lookup_notmember_coll lookup_loc_z (locmap_collect_zero X1) X2 lookup_loc_z.
- :
   lookup_notmember_coll lookup_loc_z (locmap_collect_drop_one X1 Dmem) Dnm
      Dlook1
      <- member_contradict Dmem Dnm Dfalse
      <- false_implies_lookup_loc Dfalse (locmap_cons zero L1 B1 LM1) L1 B1 
one'
            Dlook1.
- :
   lookup_notmember_coll (lookup_loc_s Dlook Dloclt)
      (locmap_collect_keep_one Dlc X1) Dnm (lookup_loc_s Dlook1 Dloclt)
      <- lookup_notmember_coll Dlook Dlc Dnm Dlook1.
- :
   lookup_notmember_coll (lookup_loc_s Dlook Dloclt)
      (locmap_collect_drop_one Dlc X1) Dnm (lookup_loc_s Dlook1 Dloclt)
      <- lookup_notmember_coll Dlook Dlc Dnm Dlook1.
- :
   lookup_notmember_coll (lookup_loc_s Dlook Dloclt) (locmap_collect_zero Dlc)
      Dnm (lookup_loc_s Dlook1 Dloclt)
      <- lookup_notmember_coll Dlook Dlc Dnm Dlook1.
nil_lm_coll :
   Pi LS:locset. Pi LM:locmap.
      locmap_collect LS locmap_nil LM -> locmap_eq locmap_nil LM -> type.
- : nil_lm_coll locmap_collect_nil locmap_eq_.
locmap_coll_notin :
   Pi A:binary wwb. Pi LM:locmap. Pi LS:locset. Pi LM':locmap.
      notin_lm A LM -> locmap_collect LS LM LM' -> notin_lm A LM' -> type.
- :
   locmap_coll_notin notin_lm_nil Dlc Dnotin
      <- nil_lm_coll Dlc Dlmeq
      <- notin_lm_resp binary_eq_ Dlmeq notin_lm_nil Dnotin.
- :
   locmap_coll_notin (notin_lm_one Dnotin Dbneq)
      (locmap_collect_keep_one Dlc X1) (notin_lm_one Dnotin1 Dbneq)
      <- locmap_coll_notin Dnotin Dlc Dnotin1.
- :
   locmap_coll_notin (notin_lm_one Dnotin Dbneq)
      (locmap_collect_drop_one Dlc X1) (notin_lm_zero Dnotin1)
      <- locmap_coll_notin Dnotin Dlc Dnotin1.
- :
   locmap_coll_notin (notin_lm_zero Dnotin) (locmap_collect_zero Dlc)
      (notin_lm_zero Dnotin1)
      <- locmap_coll_notin Dnotin Dlc Dnotin1.
- : locmap_coll_notin Dnotin locmap_collect_nil Dnotin.
locmap_coll_absent :
   Pi LM:locmap. Pi H:memory. Pi LS:locset. Pi LM':locmap.
      lm_absent LM H -> locmap_collect LS LM LM' -> lm_absent LM' H -> type.
- : locmap_coll_absent lm_absent_nil X1 lm_absent_nil.
- :
   locmap_coll_absent (lm_absent_cons Dlabs Dnotin) Dlc
      (lm_absent_cons Dlabs1 Dnotin1)
      <- locmap_coll_absent Dlabs Dlc Dlabs1
      <- locmap_coll_notin Dnotin Dlc Dnotin1.
false_implies_lm_heap_corr :
   false -> Pi LM:locmap. Pi H:heap. lm_heap_corr LM H -> type.
lm_present_heap_coll :
   Pi LM:locmap. Pi H:heap. Pi LS:locset. Pi H':heap. Pi LM':locmap.
      lm_heap_corr LM H -> heap_collect LS H H' -> locmap_collect LS LM LM'
         -> lm_heap_corr LM' H' -> type.
- :
   lm_present_heap_coll lm_heap_corr_nil heap_collect_nil locmap_collect_nil
      lm_heap_corr_nil.
- :
   lm_present_heap_coll (lm_heap_corr_zero Dlpm) Dhc (locmap_collect_zero Dlc)
      (lm_heap_corr_zero Dlpm1)
      <- lm_present_heap_coll Dlpm Dhc Dlc Dlpm1.
- :
   lm_present_heap_coll (lm_heap_corr_one Dlpm) (heap_collect_keep Dhc X1)
      (locmap_collect_keep_one Dlc X2) (lm_heap_corr_one Dlpm1)
      <- lm_present_heap_coll Dlpm Dhc Dlc Dlpm1.
- :
   lm_present_heap_coll (lm_heap_corr_one Dlpm) (heap_collect_drop Dhc X1)
      (locmap_collect_drop_one Dlc X2) (lm_heap_corr_zero Dlpm1)
      <- lm_present_heap_coll Dlpm Dhc Dlc Dlpm1.
- :
   lm_present_heap_coll (lm_heap_corr_one Dlpm) (heap_collect_drop X1 Dmem)
      (locmap_collect_keep_one X2 Dnm) Dlpm1
      <- member_contradict Dmem Dnm Dfalse
      <- false_implies_lm_heap_corr Dfalse (locmap_cons one' L1 B1 LM1) H1 Dlpm1.
- :
   lm_present_heap_coll (lm_heap_corr_one Dlpm) (heap_collect_keep X1 Dnm)
      (locmap_collect_drop_one X2 Dmem) Dlpm1
      <- member_contradict Dmem Dnm Dfalse
      <- false_implies_lm_heap_corr Dfalse (locmap_cons zero L1 B1 LM1)
            (hcons L1 V1 H1) Dlpm1.
false_implies_lm_present :
   false -> Pi LM:locmap. Pi M:memory. lm_present LM M -> type.
locmap_append : locmap -> locmap -> locmap -> type.
locmap_append_nil : locmap_append locmap_nil LM LM.
locmap_append_cons :
   locmap_append (locmap_cons BIT L A LM1) LM2 (locmap_cons BIT L A LM3)
      <- locmap_append LM1 LM2 LM3.
locmap_append_assoc' :
   Pi LM2:locmap. Pi LM3:locmap. Pi LM23:locmap. Pi LM1:locmap. Pi LM123:locmap.
      Pi LM12:locmap.
      locmap_append LM2 LM3 LM23 -> locmap_append LM1 LM23 LM123
         -> locmap_append LM1 LM2 LM12 -> locmap_append LM12 LM3 LM123 -> type.
- : locmap_append_assoc' Dlmapp locmap_append_nil locmap_append_nil Dlmapp.
- :
   locmap_append_assoc' Dlmapp1 (locmap_append_cons Dlmapp2)
      (locmap_append_cons Dlmapp3) (locmap_append_cons Dlmapp4)
      <- locmap_append_assoc' Dlmapp1 Dlmapp2 Dlmapp3 Dlmapp4.
lookup_loc_append :
   Pi LM:locmap. Pi L:loc. Pi A:binary wwb. Pi BIT:bit. Pi LMfront:locmap.
      Pi LMall:locmap. Pi L1:loc.
      lookup_loc LM L A BIT -> locmap_append LMfront LM LMall
         -> locmap_wf LMall L1 -> lookup_loc LMall L A BIT -> type.
- : lookup_loc_append Dlook locmap_append_nil Dlwf Dlook.
- :
   lookup_loc_append Dlook (locmap_append_cons Dlmapp)
      (locmap_wf_zero Dlwf Dloclt) (lookup_loc_s Dlook1 Dloclt1)
      <- lookup_loc_append Dlook Dlmapp Dlwf Dlook1
      <- locmap_wf_lesser Dlwf Dlook1 Dloclt1.
- :
   lookup_loc_append Dlook (locmap_append_cons Dlmapp)
      (locmap_wf_one Dlwf X1 X2) (lookup_loc_s Dlook1 Dloclt1)
      <- lookup_loc_append Dlook Dlmapp Dlwf Dlook1
      <- locmap_wf_lesser Dlwf Dlook1 Dloclt1.
false_implies_in_memory :
   false -> Pi A:binary wwb. Pi M:memory. in_memory A M -> type.
inotmember_not_collected :
   Pi A:binary wwb. Pi M:memory. Pi SS:sectset. Pi M':memory.
      in_memory A M -> inotmember A SS -> memory_collect SS M M'
         -> in_memory A M' -> type.
- :
   inotmember_not_collected in_memory_hit X1 (memory_collect_keep X2 X3)
      in_memory_hit.
- :
   inotmember_not_collected in_memory_hit Dinm (memory_collect_drop X1 Dim) Dapm
      <- imember_mutex Dim Dinm Dfalse
      <- false_implies_in_memory Dfalse B1 H1 Dapm.
- :
   inotmember_not_collected (in_memory_miss Dapm) Dinm
      (memory_collect_keep Dmc X1) (in_memory_miss Dapm1)
      <- inotmember_not_collected Dapm Dinm Dmc Dapm1.
- :
   inotmember_not_collected (in_memory_miss Dapm) Dinm
      (memory_collect_drop Dmc X1) Dapm1
      <- inotmember_not_collected Dapm Dinm Dmc Dapm1.
lm_present_memory_coll :
   Pi LM1:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi LMfront:locmap.
      Pi LM:locmap. Pi M:memory. Pi M':memory. Pi LM':locmap.
      locmap_wf LM1 L1 -> impl_locset LM1 LS SS -> locmap_append LMfront LM LM1
         -> lm_present LM M -> memory_collect SS M M'
         -> locmap_collect LS LM LM' -> lm_present LM' M' -> type.
- :
   lm_present_memory_coll X1 X2 X3 lm_present_nil X4 locmap_collect_nil
      lm_present_nil.
- :
   lm_present_memory_coll Dlwf Dils Dlmapp (lm_present_zero Dlpm) Dmc
      (locmap_collect_zero Dlc) (lm_present_zero Dlpm1)
      <- locmap_append_assoc' (locmap_append_cons locmap_append_nil) Dlmapp X1
            Dlmapp1
      <- lm_present_memory_coll Dlwf Dils Dlmapp1 Dlpm Dmc Dlc Dlpm1.
- :
   lm_present_memory_coll Dlwf Dils Dlmapp (lm_present_one Dlpm Dpres) Dmc
      (locmap_collect_drop_one Dlc X2) (lm_present_zero Dlpm1)
      <- locmap_append_assoc' (locmap_append_cons locmap_append_nil) Dlmapp X1
            Dlmapp1
      <- lm_present_memory_coll Dlwf Dils Dlmapp1 Dlpm Dmc Dlc Dlpm1.
- :
   lm_present_memory_coll Dlwf Dils Dlmapp (lm_present_one Dlpm Dpres) Dmc
      (locmap_collect_keep_one Dlc Dnm) (lm_present_one Dlpm1 Dpres1)
      <- locmap_append_assoc' (locmap_append_cons locmap_append_nil) Dlmapp X1
            Dlmapp1
      <- lm_present_memory_coll Dlwf Dils Dlmapp1 Dlpm Dmc Dlc Dlpm1
      <- lookup_loc_append lookup_loc_z Dlmapp Dlwf Dlook
      <- simulate_notmember Dlwf Dils Dnm Dlook Dinm
      <- inotmember_not_collected Dpres Dinm Dmc Dpres1.
simulate_heap_collect* :
   Pi LM:locmap. Pi L1:loc. Pi LS:locset. Pi SS:sectset. Pi B1:binary wwb.
      Pi Hm:memory. Pi Sstart:nat. Pi Nsize:binary wwb. Pi IM:irfmap.
      Pi Hh:heap. Pi Hm':memory. Pi Hh':heap. Pi LM1:locmap.
      locmap_wf LM L1 -> impl_locset LM LS SS -> memory_wf B1 Hm
         -> impl_heap (corresp_info_ Sstart Nsize LM IM) Hm Hh
         -> memory_collect SS Hm Hm' -> heap_collect LS Hh Hh'
         -> locmap_collect LS LM LM1
         -> impl_heap (corresp_info_ Sstart Nsize LM1 IM) Hm' Hh' -> type.
-n :
   simulate_heap_collect* X1 X2 X3 (impl_heap_nil Dabs) Dcoll heap_collect_nil
      Dlc (impl_heap_nil Dabs2)
      <- collect_preserves_lm_absent Dabs Dcoll Dabs1
      <- locmap_coll_absent Dabs1 Dlc Dabs2.
-k :
   simulate_heap_collect* Dlwf Dils Dorder
      (impl_heap_cons Dmext Diseg Dsegof Dadd Drep Dival Dlook Dgh Diheap) Dcoll
      (heap_collect_keep Dhcoll Dnm) Dlmcoll
      (impl_heap_cons Dmext1 Diseg Dsegof Dadd Drep Dival1 Dlook1 Dgh1 Diheap1)
      <- simulate_notmember Dlwf Dils Dnm Dlook Dinm
      <- inotmember_mextend Dcoll Dorder Dmext Dinm Dcoll1 Dmext1
      <- mextend_order Dmext Dorder Dorder1
      <- simulate_heap_collect* Dlwf Dils Dorder1 Diheap Dcoll1 Dhcoll Dlmcoll
            Diheap1
      <- collect_preserves_goodheap Dgh Dhcoll Dgh1
      <- impl_val_coll_lm Dival Dlmcoll Dival1
      <- lookup_notmember_coll Dlook Dlmcoll Dnm Dlook1.
-d :
   simulate_heap_collect* Dlwf Dils Dorder
      (impl_heap_cons Dmext Diseg Dsegof Dadd Drep Dival Dlook Dgh Diheap) Dcoll
      (heap_collect_drop Dhcoll Dmem) Dlmcoll Diheap1
      <- simulate_member Dlwf Dils Dmem Dlook Dim
      <- imember_mextend Dcoll Dmext Dim Dcoll1
      <- mextend_order Dmext Dorder Dorder1
      <- simulate_heap_collect* Dlwf Dils Dorder1 Diheap Dcoll1 Dhcoll Dlmcoll
            Diheap1.
simulate_heap_collect :
   Pi Astart:nat. Pi Nlim:binary wwb. Pi LM:locmap. Pi IM:irfmap. Pi L:loc.
      Pi Hm:memory. Pi Hh:heap. Pi LS:locset. Pi SS:sectset. Pi B1:binary wwb.
      Pi Hm':memory. Pi Hh':heap. Pi LM1:locmap.
      corresp_info_valid (corresp_info_ Astart Nlim LM IM) L Hm Hh
         -> impl_locset LM LS SS -> memory_wf B1 Hm
         -> impl_heap (corresp_info_ Astart Nlim LM IM) Hm Hh
         -> memory_collect SS Hm Hm' -> heap_collect LS Hh Hh'
         -> locmap_collect LS LM LM1
         -> corresp_info_valid (corresp_info_ Astart Nlim LM1 IM) L Hm' Hh'
         -> impl_heap (corresp_info_ Astart Nlim LM1 IM) Hm' Hh' -> type.
- :
   simulate_heap_collect (corresp_info_valid_ Dlph Dlpm Dlwf) Dilocs Dorder
      Diheap Dmcoll Dhcoll Dlmcoll (corresp_info_valid_ Dlph1 Dlpm1 Dlwf1)
      Diheap'
      <- can_heap_collect LS H3 H4 Dhcoll
      <- can_locmap_collect LS Dlwf Dlmcoll Dlwf1
      <- lm_present_heap_coll Dlph Dhcoll Dlmcoll Dlph1
      <- simulate_heap_collect* Dlwf Dilocs Dorder Diheap Dmcoll Dhcoll Dlmcoll
            Diheap'
      <- lm_present_memory_coll Dlwf Dilocs locmap_append_nil Dlpm Dmcoll
            Dlmcoll Dlpm1.
in_memory_cdr :
   Pi N1:nat. Pi M:memory. Pi A:binary wwb. Pi S:section N1. Pi M1:memory.
      Pi A1:binary wwb.
      mextend* M A S M1 -> in_memory A1 M1 -> binary_neq A A1 -> in_memory A1 M
         -> type.
- : in_memory_cdr (mextend_cons Dmext X1 X2 X3) in_memory_hit X4 in_memory_hit.
- :
   in_memory_cdr (mextend_cons Dmext X1 X2 X3) (in_memory_miss Dapm) Dbneq
      (in_memory_miss Dapm1)
      <- in_memory_cdr Dmext Dapm Dbneq Dapm1.
- : in_memory_cdr (mextend_between X1 X2 X3) (in_memory_miss Dapm) X4 Dapm.
- :
   in_memory_cdr (mextend_between X1 X2 X3) in_memory_hit Dbneq Dapm
      <- binary_neq_contradict Dbneq Dfalse
      <- false_implies_in_memory Dfalse B1 (mcons B2 N1 SECT1 H1) Dapm.
- :
   in_memory_cdr mextend_nil in_memory_hit Dbneq Dapm
      <- binary_neq_contradict Dbneq Dfalse
      <- false_implies_in_memory Dfalse B1 mnil Dapm.
lm_present_cdr :
   Pi N1:nat. Pi M:memory. Pi A:binary wwb. Pi S:section N1. Pi M1:memory.
      Pi LM:locmap.
      mextend* M A S M1 -> lm_present LM M1 -> notin_lm A LM -> lm_present LM M
         -> type.
- : lm_present_cdr X1 lm_present_nil X2 lm_present_nil.
- :
   lm_present_cdr Dmext (lm_present_zero Dlpm) (notin_lm_zero Dnotin)
      (lm_present_zero Dlpm1)
      <- lm_present_cdr Dmext Dlpm Dnotin Dlpm1.
- :
   lm_present_cdr Dmext (lm_present_one Dlpm Dpres) (notin_lm_one Dnotin Dbneq)
      (lm_present_one Dlpm1 Dpres1)
      <- lm_present_cdr Dmext Dlpm Dnotin Dlpm1
      <- in_memory_cdr Dmext Dpres Dbneq Dpres1.
lm_present_runfacs_cdr :
   Pi N1:nat. Pi N2:nat. Pi IM1:irfmap. Pi LM:locmap. Pi M:memory. Pi M1:memory.
      Pi S1:string N1.
      impl_runfacs N2 IM1 LM M M1 S1 -> lm_present LM M1 -> lm_present LM M
         -> type.
- : lm_present_runfacs_cdr impl_runfacs_z D D.
- :
   lm_present_runfacs_cdr (impl_runfacs_s X1 X2 Dmext Dirfs Dnotin X3) D1 D3
      <- lm_present_cdr Dmext D1 Dnotin D2
      <- lm_present_runfacs_cdr Dirfs D2 D3.
lm_present_got_cdr :
   Pi N1:nat. Pi B1:binary wwb. Pi LM:locmap. Pi IM1:irfmap. Pi M:memory.
      Pi M1:memory.
      impl_got_ptr (corresp_info_ N1 B1 LM IM1) M M1 -> lm_present LM M1
         -> lm_present LM M -> type.
- :
   lm_present_got_cdr (impl_got_ptr_ Dmext Dnotin X1 Dirfs) Dlpm Dlpm2
      <- lm_present_cdr Dmext Dlpm Dnotin Dlpm1
      <- lm_present_runfacs_cdr Dirfs Dlpm1 Dlpm2.
in_memory_car :
   Pi N1:nat. Pi M:memory. Pi A:binary wwb. Pi S:section N1. Pi M1:memory.
      Pi A1:binary wwb.
      mextend* M A S M1 -> in_memory A1 M -> in_memory A1 M1 -> type.
- : in_memory_car (mextend_between X1 X2 X3) Dapm (in_memory_miss Dapm).
- : in_memory_car (mextend_cons Dmext X1 X2 X3) in_memory_hit in_memory_hit.
- :
   in_memory_car (mextend_cons Dmext X1 X2 X3) (in_memory_miss Dapm)
      (in_memory_miss Dapm1)
      <- in_memory_car Dmext Dapm Dapm1.
lm_present_car :
   Pi N1:nat. Pi M:memory. Pi A:binary wwb. Pi S:section N1. Pi M1:memory.
      Pi LM:locmap.
      mextend* M A S M1 -> lm_present LM M -> lm_present LM M1 -> type.
- : lm_present_car X1 lm_present_nil lm_present_nil.
- :
   lm_present_car Dmext (lm_present_zero Dlpm) (lm_present_zero Dlpm1)
      <- lm_present_car Dmext Dlpm Dlpm1.
- :
   lm_present_car Dmext (lm_present_one Dlpm Dapm) (lm_present_one Dlpm1 Dapm1)
      <- lm_present_car Dmext Dlpm Dlpm1
      <- in_memory_car Dmext Dapm Dapm1.
lm_present_runfacs_car :
   Pi N1:nat. Pi N2:nat. Pi IM1:irfmap. Pi LM1:locmap. Pi M:memory.
      Pi M1:memory. Pi S1:string N1. Pi LM:locmap.
      impl_runfacs N2 IM1 LM1 M M1 S1 -> lm_present LM M -> lm_present LM M1
         -> type.
- : lm_present_runfacs_car impl_runfacs_z D D.
- :
   lm_present_runfacs_car (impl_runfacs_s X1 X2 Dmext Dirfs X3 X4) D1 D3
      <- lm_present_runfacs_car Dirfs D1 D2
      <- lm_present_car Dmext D2 D3.
mextend_impl_memory_heap :
   Pi N1:nat. Pi M:memory. Pi A:binary wwb. Pi S:section N1. Pi M1:memory.
      Pi LM:locmap. Pi H:heap.
      mextend* M A S M1 -> impl_memory_heap LM M H -> notin_lm A LM
         -> impl_memory_heap LM M1 H -> type.
-n :
   mextend_impl_memory_heap mextend_nil Diheap Dnotin
      (impl_memory_heap_absent impl_memory_heap_nil Dnotin).
-b :
   mextend_impl_memory_heap (mextend_between X1 X2 X3) Diheap Dnotin
      (impl_memory_heap_absent Diheap Dnotin).
-c :
   mextend_impl_memory_heap (mextend_cons Dmext X1 X2 X3)
      (impl_memory_heap_cs Diheap Dsize Dhl Dsegof Dll) Dnotin
      (impl_memory_heap_cs Diheap' Dsize Dhl Dsegof Dll)
      <- mextend_impl_memory_heap Dmext Diheap Dnotin Diheap'.
- :
   mextend_impl_memory_heap (mextend_cons Dmext X1 X2 X3)
      (impl_memory_heap_ss Diheap) Dnotin (impl_memory_heap_ss Diheap')
      <- mextend_impl_memory_heap Dmext Diheap Dnotin Diheap'.
-r :
   mextend_impl_memory_heap (mextend_cons Dmext X1 X2 X3)
      (impl_memory_heap_reserved Diheap) Dnotin
      (impl_memory_heap_reserved Diheap')
      <- mextend_impl_memory_heap Dmext Diheap Dnotin Diheap'.
-a :
   mextend_impl_memory_heap (mextend_cons Dmext X1 X2 X3)
      (impl_memory_heap_absent Diheap Dni) Dnotin
      (impl_memory_heap_absent Diheap' Dni)
      <- mextend_impl_memory_heap Dmext Diheap Dnotin Diheap'.
-h :
   mextend_impl_memory_heap (mextend_cons Dmext X1 X2 X3)
      (impl_memory_heap_cons Diheap Dsize Dhl Dsegof Dll) Dnotin
      (impl_memory_heap_cons Diheap' Dsize Dhl Dsegof Dll)
      <- mextend_impl_memory_heap Dmext Diheap Dnotin Diheap'.
stack_impl_memory_heap :
   Pi N1:nat. Pi B1:binary wwb. Pi LM:locmap. Pi IM1:irfmap. Pi H1:memory.
      Pi B2:binary wwb. Pi V1:val. Pi H2:memory. Pi H:heap.
      impl_stack (corresp_info_ N1 B1 LM IM1) H1 B2 V1 H2
         -> impl_memory_heap LM H1 H -> impl_memory_heap LM H2 H -> type.
- :
   stack_impl_memory_heap
      (impl_stack_ Dmext2 Dmext1 Dnotin2 Dnotin1 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10)
      Dimh1 Dimh3
      <- mextend_impl_memory_heap Dmext1 Dimh1 Dnotin1 Dimh2
      <- mextend_impl_memory_heap Dmext2 Dimh2 Dnotin2 Dimh3.
runfacs_impl_memory_heap :
   Pi N1:nat. Pi N2:nat. Pi IM1:irfmap. Pi LM:locmap. Pi H1:memory.
      Pi H2:memory. Pi S1:string N1. Pi H:heap.
      impl_runfacs N2 IM1 LM H1 H2 S1 -> impl_memory_heap LM H1 H
         -> impl_memory_heap LM H2 H -> type.
- : runfacs_impl_memory_heap impl_runfacs_z D D.
- :
   runfacs_impl_memory_heap (impl_runfacs_s X1 X2 Dmext Dirfs Dnotin X3) D1 D3
      <- runfacs_impl_memory_heap Dirfs D1 D2
      <- mextend_impl_memory_heap Dmext D2 Dnotin D3.
got_impl_memory_heap :
   Pi N1:nat. Pi B1:binary wwb. Pi LM:locmap. Pi IM1:irfmap. Pi H1:memory.
      Pi H2:memory. Pi H:heap.
      impl_got_ptr (corresp_info_ N1 B1 LM IM1) H1 H2
         -> impl_memory_heap LM H1 H -> impl_memory_heap LM H2 H -> type.
- :
   got_impl_memory_heap (impl_got_ptr_ Dmext Dnotin X1 Dirfs) Dimh1 Dimh3
      <- runfacs_impl_memory_heap Dirfs Dimh1 Dimh2
      <- mextend_impl_memory_heap Dmext Dimh2 Dnotin Dimh3.
ordered_notmember :
   Pi A1:binary wwb. Pi M:memory. Pi SS:sectset. Pi A0:binary wwb.
      Pi B:binary wwb.
      memory_wf A1 M -> sectset_wf M SS -> add A0 B A1 zero -> is_nonzero B
         -> inotmember A0 SS -> type.
-n : ordered_notmember memory_wf_nil sectset_wf_nil X1 X2 inotmember_nil.
-c :
   ordered_notmember (memory_wf_cons Dorder Dadd1 Drep1 X1 Dadd2)
      (sectset_wf_cs Dswf) Dadd3 Dinz Dinot
      <- add_assoc Dadd3 Dadd2 Dadd4 Dadd5
      <- add_assoc Dadd5 Dadd1 Dadd6 Dadd7
      <- add_nonzero_sum Dadd4 Dinz Dinz1
      <- add_nonzero_sum Dadd6 Dinz1 Dinz2
      <- ordered_notmember Dorder Dswf Dadd7 Dinz2 Dinot.
- :
   ordered_notmember (memory_wf_cons Dorder Dadd1 Drep1 X1 Dadd2)
      (sectset_wf_ss Dswf) Dadd3 Dinz Dinot
      <- add_assoc Dadd3 Dadd2 Dadd4 Dadd5
      <- add_assoc Dadd5 Dadd1 Dadd6 Dadd7
      <- add_nonzero_sum Dadd4 Dinz Dinz1
      <- add_nonzero_sum Dadd6 Dinz1 Dinz2
      <- ordered_notmember Dorder Dswf Dadd7 Dinz2 Dinot.
-k :
   ordered_notmember (memory_wf_cons Dorder Dadd1 Drep1 X1 Dadd2)
      (sectset_wf_keep Dswf) Dadd3 Dinz Dinot
      <- add_assoc Dadd3 Dadd2 Dadd4 Dadd5
      <- add_assoc Dadd5 Dadd1 Dadd6 Dadd7
      <- add_nonzero_sum Dadd4 Dinz Dinz1
      <- add_nonzero_sum Dadd6 Dinz1 Dinz2
      <- ordered_notmember Dorder Dswf Dadd7 Dinz2 Dinot.
-d :
   ordered_notmember (memory_wf_cons Dorder Dadd1 Drep1 X1 Dadd2)
      (sectset_wf_drop Dswf Dadd3 Drep2) Dadd4 Dinz1
      (inotmember_cons Dinot (binary_neq_ Dinz2 Dadd6'))
      <- add_assoc Dadd4 Dadd2 Dadd5 Dadd6
      <- add_assoc Dadd6 Dadd1 Dadd7 Dadd8
      <- add_nonzero_sum Dadd5 Dinz1 Dinz2
      <- add_nonzero_sum Dadd7 Dinz2 Dinz3
      <- ordered_notmember Dorder Dswf Dadd8 Dinz3 Dinot
      <- add_commute Dadd6 Dadd6'.
-r :
   ordered_notmember (memory_wf_cons Dorder Dadd1 Drep1 X1 Dadd2)
      (sectset_wf_reserved Dswf) Dadd3 Dinz Dinot
      <- add_assoc Dadd3 Dadd2 Dadd4 Dadd5
      <- add_assoc Dadd5 Dadd1 Dadd6 Dadd7
      <- add_nonzero_sum Dadd4 Dinz Dinz1
      <- add_nonzero_sum Dadd6 Dinz1 Dinz2
      <- ordered_notmember Dorder Dswf Dadd7 Dinz2 Dinot.
ordered_collect :
   Pi B:binary wwb. Pi M1:memory. Pi B0:binary wwb. Pi B1:binary wwb.
      Pi SS:sectset. Pi M2:memory. Pi Bdiff:binary wwb.
      memory_wf B M1 -> memory_collect (sectcons B0 B1 SS) M1 M2
         -> add B0 Bdiff B zero -> is_nonzero Bdiff -> memory_collect SS M1 M2
         -> type.
-n : ordered_collect memory_wf_nil memory_collect_nil X1 X2 memory_collect_nil.
-k :
   ordered_collect (memory_wf_cons Dorder Dadd1 Drep1 X2 Dadd2)
      (memory_collect_keep Dmcoll (inotmember_cons Dinot X3)) Daddd Dinz1
      (memory_collect_keep Dmcoll1 Dinot)
      <- add_assoc Dadd2 Dadd1 X1 Dadd3
      <- memory_wf_greater Dorder Dadd3 Dorder1
      <- ordered_collect Dorder1 Dmcoll Daddd Dinz1 Dmcoll1.
-d :
   ordered_collect (memory_wf_cons Dorder Dadd1 Drep1 X2 Dadd2)
      (memory_collect_drop Dmcoll (imember_cons Dimem)) Daddd Dinz1
      (memory_collect_drop Dmcoll1 Dimem)
      <- add_assoc Dadd2 Dadd1 X1 Dadd3
      <- memory_wf_greater Dorder Dadd3 Dorder1
      <- ordered_collect Dorder1 Dmcoll Daddd Dinz1 Dmcoll1.
-d :
   ordered_collect (memory_wf_cons Dorder Dadd1 Drep1 nat_eq_ Dadd2)
      (memory_collect_drop Dmcoll imember_hit) Daddd Dinz1 Dmcoll1
      <- can_zero wwb B5 Diz
      <- add_ident B1 Diz Dadd3
      <- add_assoc Daddd Dadd2 Dadd4 Dadd5
      <- add_commute Dadd5 Dadd6
      <- add_fun1 Dadd3 Dadd6 X2 Dbeq
      <- is_zero_resp Dbeq Diz Diz1
      <- add_zero_sum Dadd4 Diz2 X1 Diz1
      <- zero_nonzero_contradict binary_eq_ Diz2 Dinz1 Dfalse
      <- false_implies_memory_collect Dfalse SS1 (mcons B1 (s N1) SECT1 H1) H2
            Dmcoll1.
sectset_weaken_coll :
   Pi A:binary wwb. Pi M:memory. Pi A1:binary wwb. Pi B:binary wwb.
      Pi SS:sectset. Pi M':memory.
      memory_wf A M -> add A1 B A zero -> is_nonzero B -> memory_collect SS M M'
         -> Pi A2:binary wwb. memory_collect (sectcons A1 A2 SS) M M' -> type.
-n : sectset_weaken_coll X1 X2 X3 memory_collect_nil B4 memory_collect_nil.
-d :
   sectset_weaken_coll (memory_wf_cons Dorder Dadd1 Drep1 Dneq Dadd2) Dadd3
      Dinz1 (memory_collect_drop Dcoll Dimem) A2
      (memory_collect_drop Dcoll1 (imember_cons Dimem))
      <- add_assoc Dadd3 Dadd2 Dadd4 Dadd5
      <- add_assoc Dadd5 Dadd1 Dadd6 Dadd7
      <- add_nonzero_sum Dadd4 Dinz1 Dinz2
      <- add_nonzero_sum Dadd6 Dinz2 Dinz3
      <- sectset_weaken_coll Dorder Dadd7 Dinz3 Dcoll A2 Dcoll1.
-k :
   sectset_weaken_coll (memory_wf_cons Dorder Dadd1 Drep1 Dneq Dadd2) Dadd3
      Dinz1 (memory_collect_keep Dcoll Dinot) A2
      (memory_collect_keep Dcoll1 (inotmember_cons Dinot Dbneq))
      <- add_assoc Dadd3 Dadd2 Dadd4 Dadd5
      <- add_assoc Dadd5 Dadd1 Dadd6 Dadd7
      <- add_nonzero_sum Dadd4 Dinz1 Dinz2
      <- add_nonzero_sum Dadd6 Dinz2 Dinz3
      <- sectset_weaken_coll Dorder Dadd7 Dinz3 Dcoll A2 Dcoll1
      <- add_commute Dadd5 Dadd5'
      <- binary_neq_symm (binary_neq_ Dinz2 Dadd5') Dbneq.
cs_not_collected| :
   Pi N:nat. Pi M2':memory.
      false
         -> Pi SS:sectset. Pi M1':memory. Pi A:binary wwb. Pi S:string N.
                Pi M2:memory.
                sectset_wf M1' SS -> memory_collect SS M1' M2'
                   -> mextend* M2' A (section_valid cs S) M2 -> type.
cs_not_collected :
   Pi B1:binary wwb. Pi M1:memory. Pi SS:sectset. Pi M2:memory. Pi N1:nat.
      Pi M1':memory. Pi A:binary wwb. Pi S:string N1. Pi M2':memory.
      memory_wf B1 M1 -> sectset_wf M1 SS -> memory_collect SS M1 M2
         -> mextend* M1' A (section_valid cs S) M1 -> sectset_wf M1' SS
         -> memory_collect SS M1' M2' -> mextend* M2' A (section_valid cs S) M2
         -> type.
-n :
   cs_not_collected X1 (sectset_wf_cs X2)
      (memory_collect_keep memory_collect_nil X3) mextend_nil sectset_wf_nil
      memory_collect_nil mextend_nil.
-n :
   cs_not_collected X1 (sectset_wf_cs Dswf) (memory_collect_drop X2 Dimem)
      mextend_nil Dswf1 Dmcoll Dmext
      <- nil_sectset_wf Dswf Dsecteq
      <- imember_resp binary_eq_ binary_eq_ Dsecteq Dimem Dimem'
      <- imember_mutex Dimem' inotmember_nil Dfalse
      <- cs_not_collected| Dfalse SS1 mnil B1 S1 H2 Dswf1 Dmcoll Dmext.
-b :
   cs_not_collected (memory_wf_cons Dorder X2 X3 X4 X5) (sectset_wf_cs Dsec)
      (memory_collect_keep Dmcoll X6) (mextend_between Dadd1 Dadd2 Drep1) Dsec
      Dmcoll (mextend_between Dadd4 Dadd2 Drep1)
      <- memory_collect_add Dmcoll Dorder Dadd3
      <- add_assoc Dadd1 Dadd3 X1 Dadd4.
-b :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_cs Dsec)
      (memory_collect_keep Dmcoll X5) (mextend_between Dadd1 Dadd2 Drep1) Dsec
      Dmcoll mextend_nil.
-b :
   cs_not_collected
      (memory_wf_cons Dorder Dadd (represents_s Dadd1 Diso X1) X2 X3)
      (sectset_wf_cs Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_between X4 X5 X6) Dsw Dmc Dme
      <- one_is_nonzero Diso Dinz
      <- add_commute Dadd1 Dadd1'
      <- add_nonzero_sum Dadd1' Dinz Dinz1
      <- ordered_notmember Dorder Dsec Dadd Dinz1 Dinot
      <- imember_mutex Dimem Dinot Dfalse
      <- cs_not_collected| Dfalse SS1 (mcons B1 N2 SECT1 H2) B2 S1 H3 Dsw Dmc
            Dme.
-c :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_cs Dsec)
      (memory_collect_keep Dmcoll Dinot) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_cs Dsec1) (memory_collect_keep Dmcoll1 Dinot)
      (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- cs_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-c :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_cs Dsec)
      (memory_collect_drop Dmcoll Dimem) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_cs Dsec1) (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- cs_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
- :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_ss Dsec)
      (memory_collect_keep Dmcoll Dinot) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_ss Dsec1) (memory_collect_keep Dmcoll1 Dinot)
      (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- cs_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
- :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_ss Dsec)
      (memory_collect_drop Dmcoll Dimem) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_ss Dsec1) (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- cs_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-k :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_keep Dsec)
      (memory_collect_keep Dmcoll Dinot) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_keep Dsec1) (memory_collect_keep Dmcoll1 Dinot)
      (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- cs_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-k :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_keep Dsec)
      (memory_collect_drop Dmcoll Dimem) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_keep Dsec1) (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- cs_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-r :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_reserved Dsec) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_reserved Dsec1)
      (memory_collect_keep Dmcoll1 Dinot) (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- cs_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-r :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_reserved Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_reserved Dsec1)
      (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- cs_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-d :
   cs_not_collected
      (memory_wf_cons Dorder Dadd (represents_s Dadd1 Diso X1) nat_eq_ X2)
      (sectset_wf_drop Dsec Dadd2 Drep2) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext X3 X4 X5) (sectset_wf_drop Dsec1 Dadd2 Drep2)
      (memory_collect_drop Dmcoll1' Dimem) Dmext1
      <- one_is_nonzero Diso Dinz
      <- add_commute Dadd1 Dadd1'
      <- add_nonzero_sum Dadd1' Dinz Dinz1
      <- ordered_collect Dorder Dmcoll Dadd Dinz1 Dmcoll'
      <- cs_not_collected Dorder Dsec Dmcoll' Dmext Dsec1 Dmcoll1 Dmext1
      <- mextend_order Dmext Dorder Dorder1
      <- sectset_weaken_coll Dorder1 Dadd Dinz1 Dmcoll1 B4 Dmcoll1'.
-d :
   cs_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_drop Dsec X5 X6) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) Dsw Dmc Dme
      <- imember_mutex imember_hit Dinot Dfalse
      <- cs_not_collected| Dfalse (sectcons B1 B2 SS1)
            (mcons B1 N2 (section_valid hs S1) H2) B3 S2
            (mcons B1 N2 (section_valid hs S1) H3) Dsw Dmc Dme.
ss_not_collected| :
   Pi N:nat. Pi M2':memory.
      false
         -> Pi SS:sectset. Pi M1':memory. Pi A:binary wwb. Pi S:string N.
                Pi M2:memory.
                sectset_wf M1' SS -> memory_collect SS M1' M2'
                   -> mextend* M2' A (section_valid ss S) M2 -> type.
ss_not_collected :
   Pi B1:binary wwb. Pi M1:memory. Pi SS:sectset. Pi M2:memory. Pi N1:nat.
      Pi M1':memory. Pi A:binary wwb. Pi S:string N1. Pi M2':memory.
      memory_wf B1 M1 -> sectset_wf M1 SS -> memory_collect SS M1 M2
         -> mextend* M1' A (section_valid ss S) M1 -> sectset_wf M1' SS
         -> memory_collect SS M1' M2' -> mextend* M2' A (section_valid ss S) M2
         -> type.
-n :
   ss_not_collected X1 (sectset_wf_ss X2)
      (memory_collect_keep memory_collect_nil X3) mextend_nil sectset_wf_nil
      memory_collect_nil mextend_nil.
-n :
   ss_not_collected X1 (sectset_wf_ss Dswf) (memory_collect_drop X2 Dimem)
      mextend_nil Dswf1 Dmcoll Dmext
      <- nil_sectset_wf Dswf Dsecteq
      <- imember_resp binary_eq_ binary_eq_ Dsecteq Dimem Dimem'
      <- imember_mutex Dimem' inotmember_nil Dfalse
      <- ss_not_collected| Dfalse SS1 mnil B1 S1 H2 Dswf1 Dmcoll Dmext.
-b :
   ss_not_collected (memory_wf_cons Dorder X2 X3 X4 X5) (sectset_wf_ss Dsec)
      (memory_collect_keep Dmcoll X6) (mextend_between Dadd1 Dadd2 Drep1) Dsec
      Dmcoll (mextend_between Dadd4 Dadd2 Drep1)
      <- memory_collect_add Dmcoll Dorder Dadd3
      <- add_assoc Dadd1 Dadd3 X1 Dadd4.
-b :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_ss Dsec)
      (memory_collect_keep Dmcoll X5) (mextend_between Dadd1 Dadd2 Drep1) Dsec
      Dmcoll mextend_nil.
-b :
   ss_not_collected
      (memory_wf_cons Dorder Dadd (represents_s Dadd1 Diso X1) X2 X3)
      (sectset_wf_ss Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_between X4 X5 X6) Dsw Dmc Dme
      <- one_is_nonzero Diso Dinz
      <- add_commute Dadd1 Dadd1'
      <- add_nonzero_sum Dadd1' Dinz Dinz1
      <- ordered_notmember Dorder Dsec Dadd Dinz1 Dinot
      <- imember_mutex Dimem Dinot Dfalse
      <- ss_not_collected| Dfalse SS1 (mcons B1 N2 SECT1 H2) B2 S1 H3 Dsw Dmc
            Dme.
-c :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_cs Dsec)
      (memory_collect_keep Dmcoll Dinot) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_cs Dsec1) (memory_collect_keep Dmcoll1 Dinot)
      (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- ss_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-c :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_cs Dsec)
      (memory_collect_drop Dmcoll Dimem) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_cs Dsec1) (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- ss_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
- :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_ss Dsec)
      (memory_collect_keep Dmcoll Dinot) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_ss Dsec1) (memory_collect_keep Dmcoll1 Dinot)
      (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- ss_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
- :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_ss Dsec)
      (memory_collect_drop Dmcoll Dimem) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_ss Dsec1) (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- ss_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-k :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_keep Dsec)
      (memory_collect_keep Dmcoll Dinot) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_keep Dsec1) (memory_collect_keep Dmcoll1 Dinot)
      (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- ss_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-k :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4) (sectset_wf_keep Dsec)
      (memory_collect_drop Dmcoll Dimem) (mextend_cons Dmext Dadd1 Dadd2 Drep)
      (sectset_wf_keep Dsec1) (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- ss_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-r :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_reserved Dsec) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_reserved Dsec1)
      (memory_collect_keep Dmcoll1 Dinot) (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- ss_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-r :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_reserved Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_reserved Dsec1)
      (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- ss_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-d :
   ss_not_collected
      (memory_wf_cons Dorder Dadd (represents_s Dadd1 Diso X1) nat_eq_ X2)
      (sectset_wf_drop Dsec Dadd2 Drep2) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext X3 X4 X5) (sectset_wf_drop Dsec1 Dadd2 Drep2)
      (memory_collect_drop Dmcoll1' Dimem) Dmext1
      <- one_is_nonzero Diso Dinz
      <- add_commute Dadd1 Dadd1'
      <- add_nonzero_sum Dadd1' Dinz Dinz1
      <- ordered_collect Dorder Dmcoll Dadd Dinz1 Dmcoll'
      <- ss_not_collected Dorder Dsec Dmcoll' Dmext Dsec1 Dmcoll1 Dmext1
      <- mextend_order Dmext Dorder Dorder1
      <- sectset_weaken_coll Dorder1 Dadd Dinz1 Dmcoll1 B4 Dmcoll1'.
-d :
   ss_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_drop Dsec X5 X6) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) Dsw Dmc Dme
      <- imember_mutex imember_hit Dinot Dfalse
      <- ss_not_collected| Dfalse (sectcons B1 B2 SS1)
            (mcons B1 N2 (section_valid hs S1) H2) B3 S2
            (mcons B1 N2 (section_valid hs S1) H3) Dsw Dmc Dme.
reserved_not_collected| :
   Pi N:nat. Pi M2':memory.
      false
         -> Pi SS:sectset. Pi M1':memory. Pi A:binary wwb. Pi S:rsection N.
                Pi M2:memory.
                sectset_wf M1' SS -> memory_collect SS M1' M2'
                   -> mextend* M2' A (section_reserved S) M2 -> type.
reserved_not_collected :
   Pi B1:binary wwb. Pi M1:memory. Pi SS:sectset. Pi M2:memory. Pi N1:nat.
      Pi M1':memory. Pi A:binary wwb. Pi S:rsection N1. Pi M2':memory.
      memory_wf B1 M1 -> sectset_wf M1 SS -> memory_collect SS M1 M2
         -> mextend* M1' A (section_reserved S) M1 -> sectset_wf M1' SS
         -> memory_collect SS M1' M2' -> mextend* M2' A (section_reserved S) M2
         -> type.
-n :
   reserved_not_collected X1 (sectset_wf_reserved X2)
      (memory_collect_keep memory_collect_nil X3) mextend_nil sectset_wf_nil
      memory_collect_nil mextend_nil.
-n :
   reserved_not_collected X1 (sectset_wf_reserved Dswf)
      (memory_collect_drop X2 Dimem) mextend_nil Dswf1 Dmcoll Dmext
      <- nil_sectset_wf Dswf Dsecteq
      <- imember_resp binary_eq_ binary_eq_ Dsecteq Dimem Dimem'
      <- imember_mutex Dimem' inotmember_nil Dfalse
      <- reserved_not_collected| Dfalse SS1 mnil B1 RSECT1 H2 Dswf1 Dmcoll Dmext.
-b :
   reserved_not_collected (memory_wf_cons Dorder X2 X3 X4 X5)
      (sectset_wf_reserved Dsec) (memory_collect_keep Dmcoll X6)
      (mextend_between Dadd1 Dadd2 Drep1) Dsec Dmcoll
      (mextend_between Dadd4 Dadd2 Drep1)
      <- memory_collect_add Dmcoll Dorder Dadd3
      <- add_assoc Dadd1 Dadd3 X1 Dadd4.
-b :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_reserved Dsec) (memory_collect_keep Dmcoll X5)
      (mextend_between Dadd1 Dadd2 Drep1) Dsec Dmcoll mextend_nil.
-b :
   reserved_not_collected
      (memory_wf_cons Dorder Dadd (represents_s Dadd1 Diso X1) X2 X3)
      (sectset_wf_reserved Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_between X4 X5 X6) Dsw Dmc Dme
      <- one_is_nonzero Diso Dinz
      <- add_commute Dadd1 Dadd1'
      <- add_nonzero_sum Dadd1' Dinz Dinz1
      <- ordered_notmember Dorder Dsec Dadd Dinz1 Dinot
      <- imember_mutex Dimem Dinot Dfalse
      <- reserved_not_collected| Dfalse SS1 (mcons B1 N2 SECT1 H2) B2 RSECT1 H3
            Dsw Dmc Dme.
-c :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_cs Dsec) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_cs Dsec1)
      (memory_collect_keep Dmcoll1 Dinot) (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- reserved_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-c :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_cs Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_cs Dsec1)
      (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- reserved_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
- :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_ss Dsec) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_ss Dsec1)
      (memory_collect_keep Dmcoll1 Dinot) (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- reserved_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
- :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_ss Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_ss Dsec1)
      (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- reserved_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-k :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_keep Dsec) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_keep Dsec1)
      (memory_collect_keep Dmcoll1 Dinot) (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- reserved_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-k :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_keep Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_keep Dsec1)
      (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- reserved_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-r :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_reserved Dsec) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_reserved Dsec1)
      (memory_collect_keep Dmcoll1 Dinot) (mextend_cons Dmext1 Dadd1 Dadd2 Drep)
      <- reserved_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-r :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_reserved Dsec) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) (sectset_wf_reserved Dsec1)
      (memory_collect_drop Dmcoll1 Dimem) Dmext1
      <- reserved_not_collected Dorder Dsec Dmcoll Dmext Dsec1 Dmcoll1 Dmext1.
-d :
   reserved_not_collected
      (memory_wf_cons Dorder Dadd (represents_s Dadd1 Diso X1) nat_eq_ X2)
      (sectset_wf_drop Dsec Dadd2 Drep2) (memory_collect_drop Dmcoll Dimem)
      (mextend_cons Dmext X3 X4 X5) (sectset_wf_drop Dsec1 Dadd2 Drep2)
      (memory_collect_drop Dmcoll1' Dimem) Dmext1
      <- one_is_nonzero Diso Dinz
      <- add_commute Dadd1 Dadd1'
      <- add_nonzero_sum Dadd1' Dinz Dinz1
      <- ordered_collect Dorder Dmcoll Dadd Dinz1 Dmcoll'
      <- reserved_not_collected Dorder Dsec Dmcoll' Dmext Dsec1 Dmcoll1 Dmext1
      <- mextend_order Dmext Dorder Dorder1
      <- sectset_weaken_coll Dorder1 Dadd Dinz1 Dmcoll1 B4 Dmcoll1'.
-d :
   reserved_not_collected (memory_wf_cons Dorder X1 X2 X3 X4)
      (sectset_wf_drop Dsec X5 X6) (memory_collect_keep Dmcoll Dinot)
      (mextend_cons Dmext Dadd1 Dadd2 Drep) Dsw Dmc Dme
      <- imember_mutex imember_hit Dinot Dfalse
      <- reserved_not_collected| Dfalse (sectcons B1 B2 SS1)
            (mcons B1 N2 (section_valid hs S1) H2) B3 RSECT1
            (mcons B1 N2 (section_valid hs S1) H3) Dsw Dmc Dme.
runfacs_not_collected :
   Pi B1:binary wwb. Pi M1:memory. Pi SS:sectset. Pi M2:memory. Pi N1:nat.
      Pi N:nat. Pi IM:irfmap. Pi LM:locmap. Pi M1':memory. Pi S:string N1.
      Pi M2':memory.
      memory_wf B1 M1 -> sectset_wf M1 SS -> memory_collect SS M1 M2
         -> impl_runfacs N IM LM M1' M1 S -> sectset_wf M1' SS
         -> memory_collect SS M1' M2' -> impl_runfacs N IM LM M2' M2 S -> type.
- :
   runfacs_not_collected Dmwf Dswf Dmcoll impl_runfacs_z Dswf Dmcoll
      impl_runfacs_z.
- :
   runfacs_not_collected Dmwf Dswf Dmcoll
      (impl_runfacs_s Dindex Dimp Dmext Dirfs Dnotin Drof) Dswf2 Dmcoll2
      (impl_runfacs_s Dindex Dimp Dmext1 Dirfs1 Dnotin Drof)
      <- mextend_order Dmext Dmwf Dmwf1
      <- reserved_not_collected Dmwf Dswf Dmcoll Dmext Dswf1 Dmcoll1 Dmext1
      <- runfacs_not_collected Dmwf1 Dswf1 Dmcoll1 Dirfs Dswf2 Dmcoll2 Dirfs1.
got_not_collected :
   Pi B1:binary wwb. Pi M1:memory. Pi SS:sectset. Pi M2:memory.
      Pi CI:corresp_info. Pi M1':memory. Pi M2':memory.
      memory_wf B1 M1 -> sectset_wf M1 SS -> memory_collect SS M1 M2
         -> impl_got_ptr CI M1' M1 -> sectset_wf M1' SS
         -> memory_collect SS M1' M2' -> impl_got_ptr CI M2' M2 -> type.
- :
   got_not_collected Dmwf Dswf Dmcoll (impl_got_ptr_ Dmext Dnotin Dlook Dirfs)
      Dswf2 Dmcoll2 (impl_got_ptr_ Dmext1 Dnotin Dlook Dirfs1)
      <- cs_not_collected Dmwf Dswf Dmcoll Dmext Dswf1 Dmcoll1 Dmext1
      <- mextend_order Dmext Dmwf Dmwf1
      <- runfacs_not_collected Dmwf1 Dswf1 Dmcoll1 Dirfs Dswf2 Dmcoll2 Dirfs1.
locmap_coll_runfacs :
   Pi B1:binary wwb. Pi M1:memory. Pi SS:sectset. Pi LM1:locmap. Pi LS:locset.
      Pi LM2:locmap. Pi N1:nat. Pi N:nat. Pi IM:irfmap. Pi M:memory.
      Pi S:string N1. Pi M':memory. Pi M1':memory.
      memory_wf B1 M1 -> sectset_wf M1 SS -> impl_locset LM1 LS SS
         -> locmap_collect LS LM1 LM2 -> impl_runfacs N IM LM1 M M1 S
         -> memory_collect SS M M' -> memory_collect SS M1 M1'
         -> lm_present LM2 M' -> impl_runfacs N IM LM2 M' M1' S
         -> lm_present LM2 M1' -> type.
- :
   locmap_coll_runfacs X1 X2 X3 X4 impl_runfacs_z Dmcoll1 Dmcoll2 Dlpm Dirfs
      Dlpm1
      <- memory_collect_fun Dmcoll1 Dmcoll2 Dmeq
      <- impl_runfacs_resp nat_eq_ locmap_eq_ memory_eq_ Dmeq string_eq_
            impl_runfacs_z Dirfs
      <- lm_present_resp locmap_eq_ Dmeq Dlpm Dlpm1.
- :
   locmap_coll_runfacs Dmwf Dswf Dils Dlcoll
      (impl_runfacs_s Dindex Dimp Dmext Dirfs Dnotin Drof) Dmcoll1 Dmcoll2 Dlpm
      (impl_runfacs_s Dindex Dimp Dmext1 Dirfs1 Dnotin' Drof) Dlpm2
      <- reserved_not_collected Dmwf Dswf Dmcoll2 Dmext Dswf1 Dmcoll3 Dmext1
      <- mextend_order Dmext Dmwf Dmwf1
      <- locmap_coll_runfacs Dmwf1 Dswf1 Dils Dlcoll Dirfs Dmcoll1 Dmcoll3 Dlpm
            Dirfs1 Dlpm1
      <- locmap_collect_notin Dnotin Dlcoll Dnotin'
      <- lm_present_car Dmext1 Dlpm1 Dlpm2.
locmap_coll_got :
   Pi B1:binary wwb. Pi M1:memory. Pi SS:sectset. Pi LM1:locmap. Pi LS:locset.
      Pi LM2:locmap. Pi Nlim:nat. Pi Sstart:binary wwb. Pi IM:irfmap.
      Pi M:memory. Pi M':memory. Pi M1':memory.
      memory_wf B1 M1 -> sectset_wf M1 SS -> impl_locset LM1 LS SS
         -> locmap_collect LS LM1 LM2
         -> impl_got_ptr (corresp_info_ Nlim Sstart LM1 IM) M M1
         -> memory_collect SS M M' -> memory_collect SS M1 M1'
         -> lm_present LM2 M'
         -> impl_got_ptr (corresp_info_ Nlim Sstart LM2 IM) M' M1'
         -> lm_present LM2 M1' -> type.
- :
   locmap_coll_got Dmwf1 Dswf1 Dils Dlcoll
      (impl_got_ptr_ Dmext Dnotin Dlookg Dirfs) Dmcoll1 Dmcoll2 Dlpm1
      (impl_got_ptr_ Dmext1 Dnotin1 Dlookg Dirfs1) Dlpm3
      <- cs_not_collected Dmwf1 Dswf1 Dmcoll2 Dmext Dswf2 Dmcoll3 Dmext1
      <- mextend_order Dmext Dmwf1 Dmwf2
      <- locmap_coll_runfacs Dmwf2 Dswf2 Dils Dlcoll Dirfs Dmcoll1 Dmcoll3 Dlpm1
            Dirfs1 Dlpm2
      <- locmap_collect_notin Dnotin Dlcoll Dnotin1
      <- lm_present_car Dmext1 Dlpm2 Dlpm3.
simulate_icollect :
   Pi CI:corresp_info. Pi Hi:memory. Pi Ri:regs numregs. Pi FRi:flags.
      Pi PCi:binary wwb. Pi ORi:oracle. Pi Ha:heap. Pi La:loc. Pi Ra:rfile.
      Pi PCa:pc. Pi Hi':memory. Pi OR:oracle. Pi Ha':heap. Pi CI1:corresp_info.
      impl_machine CI (state_ Hi Ri FRi PCi ORi) (mach Ha La Ra PCa)
         -> icollect (state_ Hi Ri FRi PCi ORi) Hi' OR
         -> collect (mach Ha La Ra PCa) (mach Ha' La Ra PCa)
         -> impl_machine CI1 (state_ Hi' Ri FRi PCi OR) (mach Ha' La Ra PCa)
         -> type.
-y :
   simulate_icollect Dimach (icollect_yes Dicoll Dunr Drss)
      (collect_ Dcoll Drunr Dhunr Dlwf)
      (impl_ (corresp_info_valid_ Dlph1 Dlpm10 Dlmwf1) Dorder1' Digot'' Dipc'
          Diconds
          (impl_stack_ Dmexts2' Dmexts1' Dnotins2' Dnotins1' Dsabs1' Dreptr
              Daddtr Divals1' Dindexs1 Dreps2 Dadds3 Dadds2 Dadds1 Dreps1)
          Dimp Dirfile' Diheap')
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Diconds Dipc
            Digot Dorder1 (corresp_info_valid_ Dlph Dlpm1 Dlmwf)
      <- impl_heap_memory_corr Diheap Dimh
      <- stack_impl_memory_heap Distack Dimh Dimh1
      <- got_impl_memory_heap Digot Dimh1 Dimh2
      <- simulate_read_sectset Drss Dimh2 Dils Dlwf
      <- consume_preserves_impl Dimach OR2 Dimach'
      <- simulate_state_unreachable Dils Dimach' Dunr Dhunr Drunr
      <- extract_stack Distack Dreps1 Dadds1 Dadds2 Dadds3 Dreps2 Dindexs1
            Divals1 Daddtr Dreptr Dsabs1 Dnotins1 Dnotins2 Dmexts1 Dmexts2
      <- extract_got_ptr Digot Dirfs Dlookg Dnoting2 Dmextg2
      <- impl_got_ptr_order Digot Dorder1 Dorder3
      <- mextend_order Dmexts2 Dorder3 Dorder4
      <- mextend_order Dmexts1 Dorder4 Dorder5
      <- read_sectset_wf Drss Dswf
      <- got_not_collected Dorder1 Dswf Dicoll Digot Dswf2 Dicoll2 Digot'
      <- ss_not_collected Dorder3 Dswf2 Dicoll2 Dmexts2 Dswf3 Dicoll3 Dmexts2'
      <- reserved_not_collected Dorder4 Dswf3 Dicoll3 Dmexts1 Dswf4 Dicoll4
            Dmexts1'
      <- lm_present_got_cdr Digot Dlpm1 Dlpm3
      <- lm_present_cdr Dmexts2 Dlpm3 Dnotins2 Dlpm4
      <- lm_present_cdr Dmexts1 Dlpm4 Dnotins1 Dlpm5
      <- simulate_heap_collect (corresp_info_valid_ Dlph Dlpm5 Dlmwf) Dils
            Dorder5 Diheap Dicoll4 Dcoll Dlmcoll
            (corresp_info_valid_ Dlph1 Dlpm6 Dlmwf1) Diheap'
      <- memory_collect_order Dicoll Dorder1 Dorder1'
      <- memory_collect_stack_absent Dicoll4 Dsabs1 Dsabs1'
      <- impl_val_coll_lm Divals1 Dlmcoll Divals1'
      <- locmap_collect_notin Dnotins1 Dlmcoll Dnotins1'
      <- locmap_collect_notin Dnotins2 Dlmcoll Dnotins2'
      <- lm_present_car Dmexts1' Dlpm6 Dlpm7
      <- lm_present_car Dmexts2' Dlpm7 Dlpm8
      <- locmap_coll_got Dorder1 Dswf Dils Dlmcoll Digot Dicoll2 Dicoll Dlpm8
            Digot'' Dlpm10
      <- impl_pc_coll_lm Dipc Dlmcoll Dipc'
      <- impl_rfile_coll_lm Dirfile Dlmcoll Dirfile'.
-n :
   simulate_icollect Dimach (icollect_no X1 Drss) Dcoll
      (impl_ Dciv Dorder Digot Dipc Diconds Distack Dimp Dirfile Diheap)
      <- collect_ident (mach H2 (lc N1) (rf V1 CC1 R2) PC1) Dcoll
      <- extract_implement_parts Dimach Diheap Dirfile Dimp Distack Diconds Dipc
            Digot Dorder Dciv.
determinism| : false -> Pi ST1:state. Pi ST2:state. state_eq ST1 ST2 -> type.
determinism_jcc :
   Pi IC:icond. Pi O:oper ww. Pi ST:state. Pi ST1:state. Pi ST2:state.
      transition* (ii_jcc IC O) ST ST1 -> transition* (ii_jcc IC O) ST ST2
         -> state_eq ST1 ST2 -> type.
?_take :
   determinism_jcc (trans_jcc_take Dput Dadd Doload Disat)
      (trans_jcc_take Dput' Dadd' Doload' Disat') Dsteq
      <- oload_fun Doload Doload' Dseq
      <- implode_word_resp Dseq binary_eq_ Dadd Dadd''
      <- implode_word_fun Dadd'' Dadd' Daeq
      <- puteip_resp state_eq_ Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_skip :
   determinism_jcc (trans_jcc_skip Dput Dnext Diunsat)
      (trans_jcc_skip Dput' Dnext' Diunsat') Dsteq
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp state_eq_ Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_ts :
   determinism_jcc (trans_jcc_take Dput Dadd Doload Disat)
      (trans_jcc_skip Dput' Dnext Diunsat) Dsteq
      <- icond_sat_unsat_contra Disat Diunsat Dfalse
      <- determinism| Dfalse ST1 ST2 Dsteq.
?_st :
   determinism_jcc (trans_jcc_skip Dput Dnext Diunsat)
      (trans_jcc_take Dput' Dadd Doload Disat) Dsteq
      <- icond_sat_unsat_contra Disat Diunsat Dfalse
      <- determinism| Dfalse ST1 ST2 Dsteq.
determinism* :
   Pi I:iinst. Pi ST:state. Pi ST1:state. Pi ST2:state.
      transition* I ST ST1 -> transition* I ST ST2 -> state_eq ST1 ST2 -> type.
?_add :
   determinism* (trans_add Dput Dnext Dstfl Dst Diadd Doload Dload)
      (trans_add Dput' Dnext' Dstfl' Dst' Diadd' Doload' Dload') Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- binop_resp Dseq1 Dseq2 string_eq_ result_flags_eq_ Diadd Diadd''
      <- binop_fun Diadd'' Diadd' Dseq3 Drfeq
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq2 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_and :
   determinism* (trans_and Dput Dnext Dstfl Dst Diadd Doload Dload)
      (trans_and Dput' Dnext' Dstfl' Dst' Diadd' Doload' Dload') Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- binop_resp Dseq1 Dseq2 string_eq_ result_flags_eq_ Diadd Diadd''
      <- binop_fun Diadd'' Diadd' Dseq3 Drfeq
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq2 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_call_nn :
   determinism*
      (trans_call Dp Daw4 Doload Dmst Daw3 Dnext Drst X2 X3 X4 X5 X6 X7 Daw2 Daa
          Daw1 Drl)
      (trans_call Dp' Daw4' Doload' Dmst' Daw3' Dnext' Drst' X8 X9 X10 X11 X12
          X13 Daw2' Daa' Daw1' Drl')
      Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Daw1 Daw1''
      <- implode_word_fun Daw1'' Daw1' Daeq1
      <- add_resp binary_eq_ binary_eq_ Daeq1 bit_eq_ Daa Daa''
      <- add_fun1 Daa'' Daa' X1 Daeq2
      <- implode_word_resp string_eq_ Daeq2 Daw2 Daw2''
      <- implode_word_fun1 Daw2'' Daw2' Dseq2
      <- rstore_resp state_eq_ nat_eq_ Dseq2 state_eq_ Drst Drst''
      <- rstore_fun Drst'' Drst' Dsteq1
      <- next_fun Dnext Dnext' Daeq3
      <- implode_word_resp string_eq_ Daeq3 Daw3 Daw3''
      <- implode_word_fun1 Daw3'' Daw3' Dseq3
      <- mstore_resp Dsteq1 Daeq2 Dseq3 state_eq_ Dmst Dmst''
      <- mstore_fun Dmst'' Dmst' Dsteq2
      <- oload_resp Dsteq2 oper_eq_ string_eq_ Doload Doload''
      <- oload_fun Doload'' Doload' Dseq4
      <- implode_word_resp Dseq4 binary_eq_ Daw4 Daw4''
      <- implode_word_fun Daw4'' Daw4' Daeq4
      <- puteip_resp Dsteq2 Daeq4 state_eq_ Dp Dp''
      <- puteip_fun Dp'' Dp' Dsteq.
?_call_ss :
   determinism* (trans_call_stopped X1 X2 X3 X4 X5)
      (trans_call_stopped X6 X7 X8 X9 X10) state_eq_.
?_call_ns :
   determinism*
      (trans_call X2 X3 X4 Dmst Daw3 Dnext Drst X5 X6 X7 X8 X9 X10 Daw2 Daa Daw1
          Drl)
      (trans_call_stopped Dtrap Dgm Daa' Daw1' Drl') Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Daw1 Daw1''
      <- implode_word_fun Daw1'' Daw1' Daeq1
      <- add_resp binary_eq_ binary_eq_ Daeq1 bit_eq_ Daa Daa''
      <- add_fun1 Daa'' Daa' X1 Daeq2
      <- mstore_resp state_eq_ Daeq2 string_eq_ state_eq_ Dmst Dmst'
      <- postpone_getmem_rstore Dgm Drst Dgm1
      <- cant_store_trap_address Dgm1 Dtrap Dmst' Dfalse
      <- determinism| Dfalse ST1 stopped Dsteq.
?_call_sn :
   determinism* (trans_call_stopped Dtrap Dgm Daa' Daw1' Drl')
      (trans_call X2 X3 X4 Dmst Daw3 Dnext Drst X5 X6 X7 X8 X9 X10 Daw2 Daa Daw1
          Drl)
      Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Daw1 Daw1''
      <- implode_word_fun Daw1'' Daw1' Daeq1
      <- add_resp binary_eq_ binary_eq_ Daeq1 bit_eq_ Daa Daa''
      <- add_fun1 Daa'' Daa' X1 Daeq2
      <- mstore_resp state_eq_ Daeq2 string_eq_ state_eq_ Dmst Dmst'
      <- postpone_getmem_rstore Dgm Drst Dgm1
      <- cant_store_trap_address Dgm1 Dtrap Dmst' Dfalse
      <- determinism| Dfalse stopped ST1 Dsteq.
?_cmp :
   determinism* (trans_cmp Dput Dnext Dstfl Disub Doload Dload)
      (trans_cmp Dput' Dnext' Dstfl' Disub' Doload' Dload') Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- binop_resp Dseq1 Dseq2 string_eq_ result_flags_eq_ Disub Disub''
      <- binop_fun Disub'' Disub' Dseq3 Drfeq
      <- store_result_flags_resp state_eq_ Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq1
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq1 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_fload :
   determinism* (trans_fload Dput Dnext Dload) (trans_fload Dput' Dnext' Dload')
      Dsteq
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp state_eq_ Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_fnop :
   determinism* (trans_fnop Dput Dnext) (trans_fnop Dput' Dnext') Dsteq
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp state_eq_ Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_fstore :
   determinism* (trans_fstore Dput Dnext Dstore Dputo Dcons Dgeto)
      (trans_fstore Dput' Dnext' Dstore' Dputo' Dcons' Dgeto') Dsteq
      <- getoracle_fun Dgeto Dgeto' Doreq1
      <- consume_string_resp Doreq1 nat_eq_ string_eq_ oracle_eq_ Dcons Dcons''
      <- consume_string_fun Dcons'' Dcons' Dseq Doreq2
      <- putoracle_resp state_eq_ Doreq2 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq1
      <- store_resp Dsteq1 eaddress_eq_ Dseq state_eq_ Dstore Dstore''
      <- store_fun Dstore'' Dstore' Dsteq2
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq2 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_fstflag :
   determinism*
      (trans_fstoreflags Dput Dnext Dputf Dputo Dcons4 Dcons3 Dcons2 Dcons1
          Dgeto)
      (trans_fstoreflags Dput' Dnext' Dputf' Dputo' Dcons4' Dcons3' Dcons2'
          Dcons1' Dgeto')
      Dsteq
      <- getoracle_fun Dgeto Dgeto' Doreq1
      <- consume_bit_resp Doreq1 bit_eq_ oracle_eq_ Dcons1 Dcons1''
      <- consume_bit_fun Dcons1'' Dcons1' Dbiteq1 Doreq2
      <- consume_bit_resp Doreq2 bit_eq_ oracle_eq_ Dcons2 Dcons2''
      <- consume_bit_fun Dcons2'' Dcons2' Dbiteq2 Doreq3
      <- consume_bit_resp Doreq3 bit_eq_ oracle_eq_ Dcons3 Dcons3''
      <- consume_bit_fun Dcons3'' Dcons3' Dbiteq3 Doreq4
      <- consume_bit_resp Doreq4 bit_eq_ oracle_eq_ Dcons4 Dcons4''
      <- consume_bit_fun Dcons4'' Dcons4' Dbiteq4 Doreq5
      <- putoracle_resp state_eq_ Doreq5 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq1
      <- flags_eq_cons Dbiteq1 Dbiteq2 Dbiteq3 Dbiteq4 Dfeq
      <- putflags_resp Dsteq1 Dfeq state_eq_ Dputf Dputf''
      <- putflags_fun Dputf'' Dputf' Dsteq2
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq2 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_jztt :
   determinism* (trans_jecxz_take Dput Daw Doload Diz Dim Dload)
      (trans_jecxz_take Dput' Daw' Doload' Diz' Dim' Dload') Dsteq
      <- oload_fun Doload Doload' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Daw Daw''
      <- implode_word_fun Daw'' Daw' Dadeq
      <- puteip_resp state_eq_ Dadeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_jzss :
   determinism* (trans_jecxz_skip Dput Dnext Dinz Dim Dload)
      (trans_jecxz_skip Dput' Dnext' Dinz' Dim' Dload') Dsteq
      <- next_fun Dnext Dnext' Dadeq
      <- puteip_resp state_eq_ Dadeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_jzts :
   determinism* (trans_jecxz_take Dput Daw Doload Diz Dim Dload)
      (trans_jecxz_skip Dput' Dnext' Dinz' Dim' Dload') Dsteq
      <- rload_fun Dload Dload' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dim Dim''
      <- implode_word_fun Dim'' Dim' Dbeq
      <- zero_nonzero_contradict Dbeq Diz Dinz' Dfalse
      <- determinism| Dfalse ST1 ST2 Dsteq.
?_jzst :
   determinism* (trans_jecxz_skip Dput' Dnext' Dinz' Dim' Dload')
      (trans_jecxz_take Dput Daw Doload Diz Dim Dload) Dsteq
      <- rload_fun Dload Dload' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dim Dim''
      <- implode_word_fun Dim'' Dim' Dbeq
      <- zero_nonzero_contradict Dbeq Diz Dinz' Dfalse
      <- determinism| Dfalse ST1 ST2 Dsteq.
?_jcc_ :
   determinism* Dtrans1 Dtrans2 Dsteq <- determinism_jcc Dtrans1 Dtrans2 Dsteq.
?_jmp :
   determinism* (trans_jmp Dput Dadd Doload) (trans_jmp Dput' Dadd' Doload')
      Dsteq
      <- oload_fun Doload Doload' Dseq
      <- implode_word_resp Dseq binary_eq_ Dadd Dadd''
      <- implode_word_fun Dadd'' Dadd' Daeq
      <- puteip_resp state_eq_ Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_mov :
   determinism* (trans_mov Dput Dnext Dst Doload)
      (trans_mov Dput' Dnext' Dst' Doload') Dsteq
      <- oload_fun Doload Doload' Dseq
      <- store_resp state_eq_ eaddress_eq_ Dseq state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq1 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_or :
   determinism* (trans_or Dput Dnext Dstfl Dst Diadd Doload Dload)
      (trans_or Dput' Dnext' Dstfl' Dst' Diadd' Doload' Dload') Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- binop_resp Dseq1 Dseq2 string_eq_ result_flags_eq_ Diadd Diadd''
      <- binop_fun Diadd'' Diadd' Dseq3 Drfeq
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq2 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_nop :
   determinism* (trans_nop Dput Dnext) (trans_nop Dput' Dnext') Dsteq
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp state_eq_ Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_pop :
   determinism*
      (trans_pop Dput Dnext Dst Drst Daw2 X2 X3 X4 X5 X6 X7 Daa Dml Daw1 Drl)
      (trans_pop Dput' Dnext' Dst' Drst' Daw2' X8 X9 X10 X11 X12 X13 Daa' Dml'
          Daw1' Drl')
      Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Daw1 Daw1''
      <- implode_word_fun Daw1'' Daw1' Daeq1
      <- mload_resp state_eq_ Daeq1 nat_eq_ string_eq_ Dml Dml''
      <- mload_fun Dml'' Dml' Dseq2
      <- add_resp Daeq1 binary_eq_ binary_eq_ bit_eq_ Daa Daa''
      <- add_fun3 Daa'' Daa' X1 Daeq2
      <- implode_word_resp string_eq_ Daeq2 Daw2 Daw2''
      <- implode_word_fun1 Daw2'' Daw2' Dseq5
      <- rstore_resp state_eq_ nat_eq_ Dseq5 state_eq_ Drst Drst''
      <- rstore_fun Drst'' Drst' Dsteq1
      <- store_resp Dsteq1 eaddress_eq_ Dseq2 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq2
      <- next_fun Dnext Dnext' Daeq3
      <- puteip_resp Dsteq2 Daeq3 state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_push_nn :
   determinism*
      (trans_push Dput Dnext Dmst Drst X2 X3 X4 X5 X6 X7 Daw2 Daa Daw1 Dol Drl)
      (trans_push Dput' Dnext' Dmst' Drst' X8 X9 X10 X11 X12 X13 Daw2' Daa'
          Daw1' Dol' Drl')
      Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- oload_fun Dol Dol' Dseq2
      <- implode_word_resp Dseq1 binary_eq_ Daw1 Daw1''
      <- implode_word_fun Daw1'' Daw1' Daeq1
      <- add_resp binary_eq_ binary_eq_ Daeq1 bit_eq_ Daa Daa''
      <- add_fun1 Daa'' Daa' X1 Daeq2
      <- implode_word_resp string_eq_ Daeq2 Daw2 Daw2''
      <- implode_word_fun1 Daw2'' Daw2' Dseq3
      <- rstore_resp state_eq_ nat_eq_ Dseq3 state_eq_ Drst Drst''
      <- rstore_fun Drst'' Drst' Dsteq1
      <- mstore_resp Dsteq1 Daeq2 Dseq2 state_eq_ Dmst Dmst''
      <- mstore_fun Dmst'' Dmst' Dsteq2
      <- next_fun Dnext Dnext' Daeq3
      <- puteip_resp Dsteq2 Daeq3 state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_push_ss :
   determinism* (trans_push_stopped Dsol Dgm Daa Daw Dl Drl)
      (trans_push_stopped Dsol' Dgm1 Daa' Daw' Dl' Drl') state_eq_.
?_push_ns :
   determinism*
      (trans_push Dput Dnext Dmst Drst X2 X3 X4 X5 X6 X7 Daw2 Daa Daw1 Dl Drl)
      (trans_push_stopped Dtrap Dgm Daa' Daw' Dl' Drl') Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Daw1 Daw1'
      <- implode_word_fun Daw1' Daw' Daeq
      <- add_resp binary_eq_ binary_eq_ Daeq bit_eq_ Daa Daa''
      <- add_fun1 Daa'' Daa' X1 Daeq2
      <- mstore_resp state_eq_ Daeq2 string_eq_ state_eq_ Dmst Dmst'
      <- postpone_getmem_rstore Dgm Drst Dgm1
      <- cant_store_trap_address Dgm1 Dtrap Dmst' Dfalse
      <- determinism| Dfalse ST1 stopped Dsteq.
?_push_sn :
   determinism* (trans_push_stopped Dtrap Dgm Daa' Daw' Dl' Drl')
      (trans_push Dput Dnext Dmst Drst X2 X3 X4 X5 X6 X7 Daw2 Daa Daw1 Dl Drl)
      Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Daw1 Daw1'
      <- implode_word_fun Daw1' Daw' Daeq
      <- add_resp binary_eq_ binary_eq_ Daeq bit_eq_ Daa Daa''
      <- add_fun1 Daa'' Daa' X1 Daeq2
      <- mstore_resp state_eq_ Daeq2 string_eq_ state_eq_ Dmst Dmst'
      <- postpone_getmem_rstore Dgm Drst Dgm1
      <- cant_store_trap_address Dgm1 Dtrap Dmst' Dfalse
      <- determinism| Dfalse stopped ST1 Dsteq.
?_ret :
   determinism*
      (trans_ret Dput Daw3 Drst Daw2 X2 X3 X4 X5 X6 X7 Daa Dml Daw1 Drl)
      (trans_ret Dput' Daw3' Drst' Daw2' X8 X9 X10 X11 X12 X13 Daa' Dml' Daw1'
          Drl')
      Dsteq
      <- rload_fun Drl Drl' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Daw1 Daw1''
      <- implode_word_fun Daw1'' Daw1' Daeq1
      <- mload_resp state_eq_ Daeq1 nat_eq_ string_eq_ Dml Dml''
      <- mload_fun Dml'' Dml' Dseq2
      <- add_resp Daeq1 binary_eq_ binary_eq_ bit_eq_ Daa Daa''
      <- add_fun3 Daa'' Daa' X1 Daeq2
      <- implode_word_resp string_eq_ Daeq2 Daw2 Daw2''
      <- implode_word_fun1 Daw2'' Daw2' Dseq4
      <- rstore_resp state_eq_ nat_eq_ Dseq4 state_eq_ Drst Drst''
      <- rstore_fun Drst'' Drst' Dsteq1
      <- implode_word_resp Dseq2 binary_eq_ Daw3 Daw3''
      <- implode_word_fun Daw3'' Daw3' Daeq3
      <- puteip_resp Dsteq1 Daeq3 state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_halt :
   determinism* (trans_ret_halt X1 X2 X3 X4 X5 X6)
      (trans_ret_halt X7 X8 X9 X10 X11 X12) state_eq_.
D4_32_nonzero : is_nonzero 4_32
   = is_nonzero_zero (is_nonzero_zero is_nonzero_one).
?_ret_nr :
   determinism*
      (trans_ret X4 X5 X6 X7 Dadd4 Dadd3 Dadd2 Drep1 Dssect1 getmem_ Dadd1
          Dmload Daw Drload)
      (trans_ret_halt Dadd Drep Dssect getmem_ Daw' Drload') Dsteq
      <- rload_fun Drload Drload' Dweqsp
      <- implode_word_resp Dweqsp binary_eq_ Daw Daw''
      <- implode_word_fun Daw' Daw'' Dadeqsp
      <- add_resp binary_eq_ binary_eq_ Dadeqsp bit_eq_ Dadd Dadd'
      <- stack_section_fun Dssect1 Dssect Dbeq1 Dnateq1 Dseq1
      <- represents_resp Dnateq1 binary_eq_ Drep1 Drep2
      <- represents_fun2 Drep2 Drep Dbeq2
      <- add_resp Dbeq1 Dbeq2 binary_eq_ bit_eq_ Dadd2 Dadd5
      <- add_fun3 Dadd5 Dadd' X3 Dbeq3
      <- add_resp binary_eq_ binary_eq_ Dbeq3 bit_eq_ Dadd4 Dadd6
      <- add_assoc Dadd6 Dadd1 Dadd7 Dadd8
      <- can_zero wwb B2 Diz
      <- add_ident B4 Diz Dadd9
      <- add_commute Dadd8 Dadd8'
      <- add_fun1 Dadd8' Dadd9 X2 Dbeq4
      <- add_resp binary_eq_ binary_eq_ Dbeq4 bit_eq_ Dadd7 Dadd10
      <- add_zero_sum Dadd10 X1 Diz1 Diz
      <- zero_nonzero_contradict binary_eq_ Diz1 D4_32_nonzero Dfalse
      <- determinism| Dfalse ST1 stopped Dsteq.
?_ret_rn :
   determinism* (trans_ret_halt Dadd Drep Dssect getmem_ Daw' Drload')
      (trans_ret X4 X5 X6 X7 Dadd4 Dadd3 Dadd2 Drep1 Dssect1 getmem_ Dadd1
          Dmload Daw Drload)
      Dsteq
      <- rload_fun Drload Drload' Dweqsp
      <- implode_word_resp Dweqsp binary_eq_ Daw Daw''
      <- implode_word_fun Daw' Daw'' Dadeqsp
      <- add_resp binary_eq_ binary_eq_ Dadeqsp bit_eq_ Dadd Dadd'
      <- stack_section_fun Dssect1 Dssect Dbeq1 Dnateq1 Dseq1
      <- represents_resp Dnateq1 binary_eq_ Drep1 Drep2
      <- represents_fun2 Drep2 Drep Dbeq2
      <- add_resp Dbeq1 Dbeq2 binary_eq_ bit_eq_ Dadd2 Dadd5
      <- add_fun3 Dadd5 Dadd' X3 Dbeq3
      <- add_resp binary_eq_ binary_eq_ Dbeq3 bit_eq_ Dadd4 Dadd6
      <- add_assoc Dadd6 Dadd1 Dadd7 Dadd8
      <- can_zero wwb B2 Diz
      <- add_ident B4 Diz Dadd9
      <- add_commute Dadd8 Dadd8'
      <- add_fun1 Dadd8' Dadd9 X2 Dbeq4
      <- add_resp binary_eq_ binary_eq_ Dbeq4 bit_eq_ Dadd7 Dadd10
      <- add_zero_sum Dadd10 X1 Diz1 Diz
      <- zero_nonzero_contradict binary_eq_ Diz1 D4_32_nonzero Dfalse
      <- determinism| Dfalse stopped ST1 Dsteq.
?_rcl :
   determinism*
      (trans_rcl Dput Dnext Dputo Dstfl Dst Dshiftop Dgo Dgf Doload Dload)
      (trans_rcl Dput' Dnext' Dputo' Dstfl' Dst' Dshiftop' Dgo' Dgf' Doload'
          Dload')
      Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- getflags_fun Dgf Dgf' Dfeq
      <- getoracle_fun Dgo Dgo' Doeq1
      <- shiftop_resp Dseq1 Dfeq Dseq2 Doeq1 string_eq_ result_flags_eq_
            oracle_eq_ Dshiftop Dshiftop''
      <- shiftop_fun Dshiftop'' Dshiftop' Dseq3 Drfeq Doeq2
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- putoracle_resp Dsteq2 Doeq2 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq3
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq3 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_rcr :
   determinism*
      (trans_rcr Dput Dnext Dputo Dstfl Dst Dshiftop Dgo Dgf Doload Dload)
      (trans_rcr Dput' Dnext' Dputo' Dstfl' Dst' Dshiftop' Dgo' Dgf' Doload'
          Dload')
      Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- getflags_fun Dgf Dgf' Dfeq
      <- getoracle_fun Dgo Dgo' Doeq1
      <- shiftop_resp Dseq1 Dfeq Dseq2 Doeq1 string_eq_ result_flags_eq_
            oracle_eq_ Dshiftop Dshiftop''
      <- shiftop_fun Dshiftop'' Dshiftop' Dseq3 Drfeq Doeq2
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- putoracle_resp Dsteq2 Doeq2 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq3
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq3 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_rol :
   determinism*
      (trans_rol Dput Dnext Dputo Dstfl Dst Dshiftop Dgo Dgf Doload Dload)
      (trans_rol Dput' Dnext' Dputo' Dstfl' Dst' Dshiftop' Dgo' Dgf' Doload'
          Dload')
      Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- getflags_fun Dgf Dgf' Dfeq
      <- getoracle_fun Dgo Dgo' Doeq1
      <- shiftop_resp Dseq1 Dfeq Dseq2 Doeq1 string_eq_ result_flags_eq_
            oracle_eq_ Dshiftop Dshiftop''
      <- shiftop_fun Dshiftop'' Dshiftop' Dseq3 Drfeq Doeq2
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- putoracle_resp Dsteq2 Doeq2 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq3
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq3 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_ror :
   determinism*
      (trans_ror Dput Dnext Dputo Dstfl Dst Dshiftop Dgo Dgf Doload Dload)
      (trans_ror Dput' Dnext' Dputo' Dstfl' Dst' Dshiftop' Dgo' Dgf' Doload'
          Dload')
      Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- getflags_fun Dgf Dgf' Dfeq
      <- getoracle_fun Dgo Dgo' Doeq1
      <- shiftop_resp Dseq1 Dfeq Dseq2 Doeq1 string_eq_ result_flags_eq_
            oracle_eq_ Dshiftop Dshiftop''
      <- shiftop_fun Dshiftop'' Dshiftop' Dseq3 Drfeq Doeq2
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- putoracle_resp Dsteq2 Doeq2 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq3
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq3 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_shl :
   determinism*
      (trans_shl Dput Dnext Dputo Dstfl Dst Dshiftop Dgo Dgf Doload Dload)
      (trans_shl Dput' Dnext' Dputo' Dstfl' Dst' Dshiftop' Dgo' Dgf' Doload'
          Dload')
      Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- getflags_fun Dgf Dgf' Dfeq
      <- getoracle_fun Dgo Dgo' Doeq1
      <- shiftop_resp Dseq1 Dfeq Dseq2 Doeq1 string_eq_ result_flags_eq_
            oracle_eq_ Dshiftop Dshiftop''
      <- shiftop_fun Dshiftop'' Dshiftop' Dseq3 Drfeq Doeq2
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- putoracle_resp Dsteq2 Doeq2 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq3
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq3 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_sar :
   determinism*
      (trans_sar Dput Dnext Dputo Dstfl Dst Dshiftop Dgo Dgf Doload Dload)
      (trans_sar Dput' Dnext' Dputo' Dstfl' Dst' Dshiftop' Dgo' Dgf' Doload'
          Dload')
      Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- getflags_fun Dgf Dgf' Dfeq
      <- getoracle_fun Dgo Dgo' Doeq1
      <- shiftop_resp Dseq1 Dfeq Dseq2 Doeq1 string_eq_ result_flags_eq_
            oracle_eq_ Dshiftop Dshiftop''
      <- shiftop_fun Dshiftop'' Dshiftop' Dseq3 Drfeq Doeq2
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- putoracle_resp Dsteq2 Doeq2 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq3
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq3 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_shr :
   determinism*
      (trans_shr Dput Dnext Dputo Dstfl Dst Dshiftop Dgo Dgf Doload Dload)
      (trans_shr Dput' Dnext' Dputo' Dstfl' Dst' Dshiftop' Dgo' Dgf' Doload'
          Dload')
      Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- getflags_fun Dgf Dgf' Dfeq
      <- getoracle_fun Dgo Dgo' Doeq1
      <- shiftop_resp Dseq1 Dfeq Dseq2 Doeq1 string_eq_ result_flags_eq_
            oracle_eq_ Dshiftop Dshiftop''
      <- shiftop_fun Dshiftop'' Dshiftop' Dseq3 Drfeq Doeq2
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- putoracle_resp Dsteq2 Doeq2 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq3
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq3 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_sub :
   determinism* (trans_sub Dput Dnext Dstfl Dst Disub Doload Dload)
      (trans_sub Dput' Dnext' Dstfl' Dst' Disub' Doload' Dload') Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- binop_resp Dseq1 Dseq2 string_eq_ result_flags_eq_ Disub Disub''
      <- binop_fun Disub'' Disub' Dseq3 Drfeq
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq2 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
?_xor :
   determinism* (trans_xor Dput Dnext Dstfl Dst Diadd Doload Dload)
      (trans_xor Dput' Dnext' Dstfl' Dst' Diadd' Doload' Dload') Dsteq
      <- load_fun Dload Dload' Dseq1
      <- oload_fun Doload Doload' Dseq2
      <- binop_resp Dseq1 Dseq2 string_eq_ result_flags_eq_ Diadd Diadd''
      <- binop_fun Diadd'' Diadd' Dseq3 Drfeq
      <- store_resp state_eq_ eaddress_eq_ Dseq3 state_eq_ Dst Dst''
      <- store_fun Dst'' Dst' Dsteq1
      <- store_result_flags_resp Dsteq1 Drfeq state_eq_ Dstfl Dstfl''
      <- store_result_flags_fun Dstfl'' Dstfl' Dsteq2
      <- next_fun Dnext Dnext' Daeq
      <- puteip_resp Dsteq2 Daeq state_eq_ Dput Dput''
      <- puteip_fun Dput'' Dput' Dsteq.
determinism_runfac :
   Pi N1:nat. Pi IRF:runfac N1. Pi ST:state. Pi ST1:state. Pi ST2:state.
      transition_runfac IRF ST ST1 -> transition_runfac IRF ST ST2
         -> state_eq ST1 ST2 -> type.
?_malloc :
   determinism_runfac
      (trans_malloc Dret Drstore Daw Dmext Dputo Dcons Dgeto Drep Diw Drload
          Digc)
      (trans_malloc Dret' Drstore' Daw' Dmext' Dputo' Dcons' Dgeto' Drep' Diw'
          Drload' Digc')
      Dsteq
      <- igc_fun Digc Digc' Dsteq0
      <- rload_resp Dsteq0 nat_eq_ string_eq_ Drload Drload''
      <- rload_fun Drload'' Drload' Dweq
      <- implode_word_resp Dweq binary_eq_ Diw Diw''
      <- implode_word_fun Diw'' Diw' Dbineq
      <- represents_resp nat_eq_ Dbineq Drep Drep''
      <- represents_fun1 Drep'' Drep' Dnateq
      <- getoracle_resp Dsteq0 oracle_eq_ Dgeto Dgeto''
      <- getoracle_fun Dgeto'' Dgeto' Doreq
      <- string_resp Dnateq S4 S5 Dstreq
      <- consume_string_resp Doreq Dnateq Dstreq oracle_eq_ Dcons Dcons''
      <- consume_string_fun Dcons'' Dcons' Dstreq1 Doreq1
      <- putoracle_resp Dsteq0 Doreq1 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq1
      <- string_eq_trans Dstreq Dstreq1 Dstreq2
      <- mextend_resp Dsteq1 Dstreq2 state_eq_ binary_eq_ bit_eq_ Dmext Dmext''
      <- mextend_fun Dmext'' Dmext' Dsteq2 Daeq1 X1
      <- implode_word_resp string_eq_ Daeq1 Daw Daw''
      <- implode_word_fun1 Daw'' Daw' Dstreq3
      <- rstore_resp Dsteq2 nat_eq_ Dstreq3 state_eq_ Drstore Drstore''
      <- rstore_fun Drstore'' Drstore' Dsteq3
      <- transition*_resp iinst_eq_ Dsteq3 state_eq_ Dret Dret''
      <- determinism* Dret'' Dret' Dsteq.
-s :
   determinism_runfac (trans_malloc_stopped X1 X2 X3 X4 X5 X6 X7 X8)
      (trans_malloc_stopped X9 X10 X11 X12 X13 X14 X15 X16) state_eq_.
-ms :
   determinism_runfac
      (trans_malloc X1 X2 X3 Dmext Dputo Dcons Dgeto Drep Diw Drload Digc)
      (trans_malloc_stopped Dmext' Dputo' Dcons' Dgeto' Drep' Diw' Drload' Digc')
      Dsteq
      <- igc_fun Digc Digc' Dsteq0
      <- rload_resp Dsteq0 nat_eq_ string_eq_ Drload Drload''
      <- rload_fun Drload'' Drload' Dweq
      <- implode_word_resp Dweq binary_eq_ Diw Diw''
      <- implode_word_fun Diw'' Diw' Dbineq
      <- represents_resp nat_eq_ Dbineq Drep Drep''
      <- represents_fun1 Drep'' Drep' Dnateq
      <- getoracle_resp Dsteq0 oracle_eq_ Dgeto Dgeto''
      <- getoracle_fun Dgeto'' Dgeto' Doreq
      <- string_resp Dnateq S2 S3 Dstreq
      <- consume_string_resp Doreq Dnateq Dstreq oracle_eq_ Dcons Dcons''
      <- consume_string_fun Dcons'' Dcons' Dstreq1 Doreq1
      <- putoracle_resp Dsteq0 Doreq1 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq1
      <- string_eq_trans Dstreq Dstreq1 Dstreq2
      <- mextend_resp Dsteq1 Dstreq2 state_eq_ binary_eq_ bit_eq_ Dmext Dmext''
      <- mextend_fun Dmext'' Dmext' Dsteq2 Daeq1 Dbiteq
      <- bit_eq_contradict Dbiteq Dfalse
      <- determinism| Dfalse ST1 stopped Dsteq.
-m :
   determinism_runfac
      (trans_malloc_stopped Dmext' Dputo' Dcons' Dgeto' Drep' Diw' Drload' Digc')
      (trans_malloc X1 X2 X3 Dmext Dputo Dcons Dgeto Drep Diw Drload Digc) Dsteq
      <- igc_fun Digc Digc' Dsteq0
      <- rload_resp Dsteq0 nat_eq_ string_eq_ Drload Drload''
      <- rload_fun Drload'' Drload' Dweq
      <- implode_word_resp Dweq binary_eq_ Diw Diw''
      <- implode_word_fun Diw'' Diw' Dbineq
      <- represents_resp nat_eq_ Dbineq Drep Drep''
      <- represents_fun1 Drep'' Drep' Dnateq
      <- getoracle_resp Dsteq0 oracle_eq_ Dgeto Dgeto''
      <- getoracle_fun Dgeto'' Dgeto' Doreq
      <- string_resp Dnateq S2 S3 Dstreq
      <- consume_string_resp Doreq Dnateq Dstreq oracle_eq_ Dcons Dcons''
      <- consume_string_fun Dcons'' Dcons' Dstreq1 Doreq1
      <- putoracle_resp Dsteq0 Doreq1 state_eq_ Dputo Dputo''
      <- putoracle_fun Dputo'' Dputo' Dsteq1
      <- string_eq_trans Dstreq Dstreq1 Dstreq2
      <- mextend_resp Dsteq1 Dstreq2 state_eq_ binary_eq_ bit_eq_ Dmext Dmext''
      <- mextend_fun Dmext'' Dmext' Dsteq2 Daeq1 Dbiteq
      <- bit_eq_contradict Dbiteq Dfalse
      <- determinism| Dfalse stopped ST1 Dsteq.
- :
   determinism_runfac
      (trans_mallocarr Dtrans Drst Dimp1 Dmext Dsexp Drl1 Drep Dimp2 Drl2 Digc)
      (trans_mallocarr Dtrans' Drst' Dimp1' Dmext' Dsexp' Drl1' Drep' Dimp2'
          Drl2' Digc')
      Dsteq4
      <- igc_fun Digc Digc' Dsteq1
      <- rload_resp Dsteq1 nat_eq_ string_eq_ Drl2 Drl2''
      <- rload_fun Drl2'' Drl2' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp2 Dimp2''
      <- implode_word_fun Dimp2'' Dimp2' Dbeq1
      <- represents_resp nat_eq_ Dbeq1 Drep Drep''
      <- represents_fun1 Drep'' Drep' Dnateq1
      <- rload_resp Dsteq1 nat_eq_ string_eq_ Drl1 Drl1''
      <- rload_fun Drl1'' Drl1' Dseq2
      <- string_exp_resp Dseq2 Dnateq1 string_eq_ Dsexp Dsexp''
      <- string_exp_fun Dsexp'' Dsexp' Dseq3
      <- mextend_resp Dsteq1 Dseq3 state_eq_ binary_eq_ bit_eq_ Dmext Dmext''
      <- mextend_fun Dmext'' Dmext' Dsteq2 Dbeq2 X1
      <- implode_word_resp string_eq_ Dbeq2 Dimp1 Dimp1''
      <- implode_word_fun1 Dimp1'' Dimp1' Dseq4
      <- rstore_resp Dsteq2 nat_eq_ Dseq4 state_eq_ Drst Drst''
      <- rstore_fun Drst'' Drst' Dsteq3
      <- transition*_resp iinst_eq_ Dsteq3 state_eq_ Dtrans Dtrans''
      <- determinism* Dtrans'' Dtrans' Dsteq4.
- :
   determinism_runfac (trans_mallocarr_st X1 X2 X3 X4 X5 X6 X7)
      (trans_mallocarr_st X8 X9 X10 X11 X12 X13 X14) state_eq_.
- :
   determinism_runfac
      (trans_mallocarr Dtrans Drst Dimp1 Dmext Dsexp Drl1 Drep Dimp2 Drl2 Digc)
      (trans_mallocarr_st Dmext' Dsexp' Drl1' Drep' Dimp2' Drl2' Digc') Dsteq3
      <- igc_fun Digc Digc' Dsteq1
      <- rload_resp Dsteq1 nat_eq_ string_eq_ Drl2 Drl2''
      <- rload_fun Drl2'' Drl2' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp2 Dimp2''
      <- implode_word_fun Dimp2'' Dimp2' Dbeq1
      <- represents_resp nat_eq_ Dbeq1 Drep Drep''
      <- represents_fun1 Drep'' Drep' Dnateq1
      <- rload_resp Dsteq1 nat_eq_ string_eq_ Drl1 Drl1''
      <- rload_fun Drl1'' Drl1' Dseq2
      <- string_exp_resp Dseq2 Dnateq1 string_eq_ Dsexp Dsexp''
      <- string_exp_fun Dsexp'' Dsexp' Dseq3
      <- mextend_resp Dsteq1 Dseq3 state_eq_ binary_eq_ bit_eq_ Dmext Dmext''
      <- mextend_fun Dmext'' Dmext' Dsteq2 Dbeq2 Dbiteq
      <- bit_eq_contradict Dbiteq Dfalse
      <- determinism| Dfalse ST1 stopped Dsteq3.
- :
   determinism_runfac
      (trans_mallocarr_st Dmext' Dsexp' Drl1' Drep' Dimp2' Drl2' Digc')
      (trans_mallocarr Dtrans Drst Dimp1 Dmext Dsexp Drl1 Drep Dimp2 Drl2 Digc)
      Dsteq3
      <- igc_fun Digc Digc' Dsteq1
      <- rload_resp Dsteq1 nat_eq_ string_eq_ Drl2 Drl2''
      <- rload_fun Drl2'' Drl2' Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp2 Dimp2''
      <- implode_word_fun Dimp2'' Dimp2' Dbeq1
      <- represents_resp nat_eq_ Dbeq1 Drep Drep''
      <- represents_fun1 Drep'' Drep' Dnateq1
      <- rload_resp Dsteq1 nat_eq_ string_eq_ Drl1 Drl1''
      <- rload_fun Drl1'' Drl1' Dseq2
      <- string_exp_resp Dseq2 Dnateq1 string_eq_ Dsexp Dsexp''
      <- string_exp_fun Dsexp'' Dsexp' Dseq3
      <- mextend_resp Dsteq1 Dseq3 state_eq_ binary_eq_ bit_eq_ Dmext Dmext''
      <- mextend_fun Dmext'' Dmext' Dsteq2 Dbeq2 Dbiteq
      <- bit_eq_contradict Dbiteq Dfalse
      <- determinism| Dfalse stopped ST1 Dsteq3.
determinism :
   Pi ST:state. Pi ST1:state. Pi ST2:state.
      transition ST ST1 -> transition ST ST2 -> state_eq ST1 ST2 -> type.
? :
   determinism (transition_ Dtrans Dfetch) (transition_ Dtrans' Dfetch') Dseq
      <- fetch_fun Dfetch Dfetch' Dieq
      <- transition*_resp Dieq state_eq_ state_eq_ Dtrans Dtrans''
      <- determinism* Dtrans'' Dtrans' Dseq.
-r :
   determinism
      (transition_runtime Dtransrf (at_runtime_address_ Dra getmem_ geteip_))
      (transition_runtime Dtransrf' (at_runtime_address_ Dra' getmem_ geteip_))
      Dsteq
      <- runtime_address_fun Dra Dra' Drfeq
      <- transition_runfac_resp Drfeq state_eq_ state_eq_ Dtransrf Dtransrf''
      <- determinism_runfac Dtransrf'' Dtransrf' Dsteq.
-nr :
   determinism (transition_ X1 Dfetch)
      (transition_runtime X2 (at_runtime_address_ Dra Dgm Dge)) Dsteq
      <- fetch_runtime_contra Dfetch Dge Dgm Dra Dfalse
      <- determinism| Dfalse ST1 ST2 Dsteq.
-rn :
   determinism (transition_runtime X1 (at_runtime_address_ Dra Dgm Dge))
      (transition_ X2 Dfetch) Dsteq
      <- fetch_runtime_contra Dfetch Dge Dgm Dra Dfalse
      <- determinism| Dfalse ST1 ST2 Dsteq.
?_stopped : determinism trans_stopped trans_stopped state_eq_.
transitions : nat -> state -> state -> type.
transitions_z : transitions z ST ST.
transitions_s :
   transitions (s N) ST1 ST3 <- transition ST1 ST2 <- transitions N ST2 ST3.
impl_reg_eax : impl_reg eax (rg eax) = impl_reg_ lt_z.
impl_reg_ebx : impl_reg ebx (rg ebx) = impl_reg_ (lt_s (lt_s (lt_s lt_z))).
impl_reg_ecx : impl_reg ecx (rg ecx) = impl_reg_ (lt_s lt_z).
add_4_1024 :
   add 4_32
      ($ zero ($ zero ($ one' ($ one' ($ one' ($ one' ($ one' ($ one' ($ one' ($ one'
          ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero
          ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero ($ zero
          ($ zero ($ zero nil$))))))))))))))))))))))))))))))))
      overflow_lim zero
   = add_
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        
(addc_cons
    (addc_cons
        (addc_cons
            (addc_cons
                (addc_cons
                    (addc_cons
                        (addc_cons
                            (addc_cons
                                (addc_cons
                                    (addc_cons
                                        (addc_cons
                                            (addc_cons
                                                (addc_cons
                                                    (addc_cons addc_nil
                                                        addbit_000)
                                                    addbit_000)
                                                addbit_000)
                                            addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_000)
        addbit_000)
    addbit_000)
                                        addbit_000)
                                    addbit_000)
                                addbit_000)
                            addbit_000)
                        addbit_000)
                    addbit_000)
                addbit_000)
            addbit_001)
        addbit_011)
    addbit_011)
                                        addbit_011)
                                    addbit_011)
                                addbit_011)
                            addbit_011)
                        addbit_011)
                    addbit_110)
                addbit_000)
            addbit_000).
simulate* :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi IN:inst. Pi M:machine. Pi IS:iinstseq. Pi A:binary wwb. Pi N:nat.
      Pi ST':state. Pi M1:machine.
      impl_machine CI ST (mach H L R PC) -> decode H PC IN
         -> perform (mach H L R PC) IN M -> nextseq ST IS A
         -> impl_inst CI IS IN -> transitions (s N) ST ST'
         -> perform (mach H L R PC) IN M1 -> implements ST' M1 -> type.
- :
   simulate* Dimach Ddecode
      (step_add Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dadd Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_add Dioper Dioperea Didest Dallowed)
      (transitions_s transitions_z
          (transition_
              (trans_add Dputeip Dnext Dstresfl Dstorew Diadd Doloadw Dloadw)
              Dfetch))
      (step_add Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dadd Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_iadd Dallowed Dprod Dbi1 Dbi2 Dbi3 Dadd Ddetcon Dival1 Dival2
            Dival3 Diadd Diconds Dfl
      <- can_store Dimach Didest Dpropagate Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 Dccupdate Diconds Dfl Dstresfl Dimach2
      <- advance_next Dimach Ddecode (impl_add Dioper Dioperea Didest Dallowed)
            Dadvance Dnexts Dimach2 Dputeip Dimpl.
- :
   simulate* Dimach Ddecode
      (step_addptr Dadvance Dccupdate Dpropagate Datval2 Dsum Drep Dbi2 Datval1
          Dresolve2 Dresolve1)
      Dnexts (impl_addptr Dioper Dioperea Didest)
      (transitions_s transitions_z
          (transition_
              (trans_add Dputeip Dnext Dstresfl Dstore
                  (binop_4 Dimp2 (binop_add Dresflags Daddwo) Dimp' Dimp1)
                  Doloadw Dloadw)
              Dfetch))
      (step_addptr Dadvance Dccupdate1 Dpropagate Datval2 Dsum Drep Dbi2 Datval1
          Dresolve2 Dresolve1)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- impl_atomval Dival1 Datval1 Daval
      <- str_val_size_corr S3 Dival2 Dsize2
      <- impl_val_binary_int Dival2 Dsize2 Dbi2 Dseq Dimp
      <- string_eq_symm Dseq Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp Dimp'
      <- impl_pointer_add Daval Dsum Drep Dimp1 Daddwo Dimp2 Daval1
      <- atomval_aval_ptr Datval2 Daval1 Dival3
      <- can_resflags_dk B6 B7 B8 Dresflags Dfr Diconds
      <- can_store Dimach Didest Dpropagate Dival3 Dstore Dimach1
      <- can_ccupdate R2 (conds_ B2 B3 B4 B5) Dccupdate1
      <- can_store_flags Dimach1 Dccupdate1 Diconds Dfr Dstresfl Dimach2
      <- advance_next Dimach Ddecode (impl_addptr Dioper Dioperea Didest)
            Dadvance Dnexts Dimach2 Dputeip Dimpl.
- :
   simulate* Dimach Ddecode
      (step_addsptr Dadvance Dccupdate Dpropagate Datomval2 Dsum Datomval1
          Dresolve)
      Dnexts (impl_addsptr Drep Dimp1 Dioperea Didest)
      (transitions_s transitions_z
          (transition_
              (trans_add Dputeip Dnext Dstresfl Dstore
                  (binop_4 Dimp3 (binop_add Dresflags Dadd12) Dimp1 Dimp2)
                  oload_imm Dloadw)
              Dfetch))
      (step_addsptr Dadvance Dccupdate1 Dpropagate Datomval2 Dsum Datomval1
          Dresolve)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve Dloadw Dival1
      <- impl_atomval Dival1 Datomval1
            (impl_aval_spointer Dimp2 Dadd1 Dsum1 Drep1)
      <- extract_implement_parts Dimach X16 X17 X18 Distack X19 X20 X21 X22 X23
      <- extract_stack Distack Dreplim X4 Daddsect X5 X6 X7 X8 X9 X10 X11 X12
            X13 X14 X15
      <- sum_implies_leq Dsum1 Dleq1
      <- can_represents Dleq1 Dreplim Drep2
      <- sum_add_corr Drep2 Drep1 Dreplim Dsum1 Dadd2
      <- sum_commute Dsum Dsum2
      <- sum_implies_leq Dsum2 Dleq2
      <- can_represents Dleq2 Drep2 Drep3
      <- sum_add_corr Drep Drep3 Drep2 Dsum Dadd3
      <- add_commute Daddsect Dadd4
      <- add_assoc Dadd2 Dadd4 Dadd5 Dadd6
      <- add_commute Dadd5 Dadd7
      <- add_fun3 Dadd7 Dadd1 X3 Dbeq1
      <- add_resp binary_eq_ Dbeq1 binary_eq_ bit_eq_ Dadd6 Dadd8
      <- add_commute Dadd3 Dadd9
      <- add_assoc Dadd9 Dadd8 Dadd10 X2
      <- add_commute Dadd10 Dadd11
      <- add_is_add_wo Dadd11 Dadd12
      <- can_resflags_dk Wnsptr zero OV Dresflags Dfr Diconds
      <- binary_word_to_word Wnsptr Dimp3
      <- add_assoc Dadd1 Dadd11 Dadd13 Dadd14
      <- sum_commute Dsum Dsum3
      <- sum_assoc Dsum3 Dsum1 Dsum4 Dsum5
      <- sum_commute Dsum4 Dsum6
      <- sum_add_corr5 Drep1 Drep Drep4 Dsum6 Dadd13
      <- impl_val_sptr Datomval2 Drep4 Dsum5 Dadd14 Dimp3 LM1 IM1 Dival2
      <- can_store Dimach Didest Dpropagate Dival2 Dstore Dimach1
      <- can_ccupdate R' (conds_ B3 B4 B5 B6) Dccupdate1
      <- can_store_flags Dimach1 Dccupdate1 Diconds Dfr Dstresfl Dimach2
      <- advance_next Dimach Ddecode (impl_addsptr Drep Dimp1 Dioperea Didest)
            Dadvance Dnexts Dimach2 Dputeip Dimpl.
- :
   simulate* Dimach Ddecode
      (step_and Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dand Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_and Dioper Dioperea Didest Dallowed)
      (transitions_s transitions_z
          (transition_
              (trans_and Dputeip Dnext Dstresfl Dstorew Diand Doloadw Dloadw)
              Dfetch))
      (step_and Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dand Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_iand Dallowed Dprod Dbi1 Dbi2 Dbi3 Dand Ddetcon Dival1 Dival2
            Dival3 Diand Diconds Dfl
      <- can_store Dimach Didest Dpropagate Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 Dccupdate Diconds Dfl Dstresfl Dimach2
      <- advance_next Dimach Ddecode (impl_and Dioper Dioperea Didest Dallowed)
            Dadvance Dnexts Dimach2 Dputeip Dimpl.
- :
   simulate* Dimach Ddecode
      (step_bz_take (jump_ Datomval Dresolve) Diz Dbi (resolve_rco Drlook))
      Dnexts (impl_bz Dioper)
      (transitions_s transitions_z
          (transition_ (trans_jecxz_take Dputeip Dimp2 Doload Diz Dimp1 Drload1)
              Dfetch))
      (step_bz_take (jump_ Datomval Dresolve) Diz Dbi (resolve_rco Drlook))
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch X1
      <- can_rload Dimach impl_reg_ecx Drlook Drload Dival
      <- str_val_size_corr S2 Dival Dsize
      <- impl_val_binary_int Dival Dsize Dbi Dseq Dimp1
      <- rload_resp state_eq_ nat_eq_ Dseq Drload Drload1
      <- can_oload Dimach Dioper Dresolve Doload Dival1
      <- impl_atomval Dival1 Datomval Daval
      <- impl_jump_pc Dimach Daval Dimp2 Dputeip Dimpl.
- :
   simulate* Dimach Ddecode
      (step_bz_skip Dadvance Dinz Dbi (resolve_rco Drlook)) Dnexts
      (impl_bz Dioper)
      (transitions_s transitions_z
          (transition_ (trans_jecxz_skip Dputeip Dnext Dinz Dimp1 Drload1)
              Dfetch))
      (step_bz_skip Dadvance Dinz Dbi (resolve_rco Drlook)) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_rload Dimach impl_reg_ecx Drlook Drload Dival
      <- str_val_size_corr S1 Dival Dsize
      <- impl_val_binary_int Dival Dsize Dbi Dseq Dimp1
      <- rload_resp state_eq_ nat_eq_ Dseq Drload Drload1
      <- advance_next Dimach Ddecode (impl_bz Dioper) Dadvance Dnexts Dimach
            Dputeip Dimpl.
simulate_call| :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi O:operand. Pi Mach:machine. Pi IS:iinstseq. Pi S:string ww.
      Pi Wesp:binary wwb. Pi Wnesp:binary 32'. Pi M:memory. Pi Aneip:binary wwb.
      Pi ST':state.
      impl_machine CI ST (mach H L R PC) -> decode H PC (i_call O)
         -> perform (mach H L R PC) (i_call O) Mach
         -> impl_inst CI IS (i_call O) -> rload ST esp S -> implode_word S Wesp
         -> add Wnesp 4_32 Wesp zero -> getmem ST M
         -> trap_or_valid_stack M Wnesp -> nextseq ST IS Aneip
         -> transition ST ST' -> implements ST' Mach -> type.
-t :
   simulate_call| Dimach Ddecode Dstep Dicall Drload Dimp Dadd Dgetmem
      (trap_or_valid_stack_trap Dtrap) Dnexts
      (transition_ (trans_call_stopped Dtrap Dgetmem Dadd Dimp Drload) Dfetch)
      implements_stopped
      <- decompose_nextseq_1 Dnexts Dfetch Dnext.
-v :
   simulate_call| Dimach Ddecode
      (step_call (jump_ Datomval Dresolve) Dzupdate Dapp Datval Dzlook Dadvance)
      (impl_call Dioper) Drload Dimp Dadd Dgetmem
      (trap_or_valid_stack_valid Dadd1 Dadd2 Dadd3 Drep1 Dssect) Dnexts
      (transition_
          (trans_call Dputeip Dimp3 Doload Dmst Dimp2 Dnext Drst Dadd1 Dadd2
              Dadd3 Drep1 Dssect Dgetmem Dimp1 Dadd Dimp Drload)
          Dfetch)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- advance_next_implval Dimach Ddecode (impl_call Dioper) Dadvance Dnexts
            Datval Dimp2 Dival
      <- stack_section_valid Dimach Dgetmem Dssect Dbeq X1
      <- add_resp Dbeq binary_eq_ binary_eq_ bit_eq_ Dadd2 Dadd2'
      <- can_zpush Dimach Dzlook Dapp Dzupdate Dival Drload Dimp 
represents_4_32
            nat_eq_ Dadd Dadd2' Dimp1 Drst Dmst Dimach1
      <- can_oload Dimach1 Dioper Dresolve Doload Dival1
      <- impl_atomval Dival1 Datomval Daval
      <- impl_jump_pc Dimach1 Daval Dimp3 Dputeip Dimpl.
?_call :
   simulate* Dimach Ddecode
      (step_call Djump Dzupdate Dapp Datval Dzlook Dadvance) Dnexts
      (impl_call Dioper) (transitions_s transitions_z Dtrans)
      (step_call Djump Dzupdate Dapp Datval Dzlook Dadvance) Dimpl
      <- can_decide_trap Dimach add_4_1024 Drload Dimp Dadd Dgm Dtrv
      <- simulate_call| Dimach Ddecode
            (step_call Djump Dzupdate Dapp Datval Dzlook Dadvance)
            (impl_call Dioper) Drload Dimp Dadd Dgm Dtrv Dnexts Dtrans Dimpl.
?_cmp :
   simulate* Dimach Ddecode
      (step_cmp Dadvance Dccupdate Ddetcon Dadd Dbi2 Dbi1 Dresolve2 Dresolve1
          Dprod)
      Dnexts (impl_cmp Dioper Dioperea Dallowed)
      (transitions_s transitions_z
          (transition_ (trans_cmp Dputeip Dnext Dstresfl Disub Doloadw Dloadw)
              Dfetch))
      (step_cmp Dadvance Dccupdate Ddetcon Dadd Dbi2 Dbi1 Dresolve2 Dresolve1
          Dprod)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_binary_to_int Nsz V3 B4 Dprod Dbi3
      <- can_isub Dallowed Dprod Dbi1 Dbi2 Dbi3 Dadd Ddetcon Dival1 Dival2
            Dival3 Disub Diconds Dfl
      <- can_store_flags Dimach Dccupdate Diconds Dfl Dstresfl Dimach'
      <- advance_next Dimach Ddecode (impl_cmp Dioper Dioperea Dallowed)
            Dadvance Dnexts Dimach' Dputeip Dimpl.
?_cjcc_take :
   simulate* Dimach Ddecode
      (step_cmpjcc_take (jump_ Datomval Dresolve) Dsat Dccupdate Ddetcon Dadd
          Dbi2 Dbi1 Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_cmpjcc Dadj Dioper2 Dicond Dioper1 Dioperea Dallowed)
      (transitions_s
          (transitions_s transitions_z
              (transition_ (trans_jcc_take Dputeip2 Dimp Doloadw1 Disat)
                  Dfetch2'))
          (transition_
              (trans_cmp Dputeip1' Dnext1 Dstresfl Disub Doloadw Dloadw) Dfetch1))
      (step_cmpjcc_take (jump_ Datomval Dresolve) Dsat Dccupdate Ddetcon Dadd
          Dbi2 Dbi1 Dresolve2 Dresolve1 Dprod)
      Dimach3
      <- decompose_nextseq_2 Dimach Dnexts Dfetch1 Dg Dm Dml Didec Drep1 Dadd1
            Dsegof Diseg Dnext1 Dipc Dputeip1 Dfetch2 Dnext2
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper1 Dresolve2 Doloadw Dival2
      <- can_binary_to_int Nsz V3 B9 Dprod Dbi3
      <- can_isub Dallowed Dprod Dbi1 Dbi2 Dbi3 Dadd Ddetcon Dival1 Dival2
            Dival3 Disub Diconds Dfl
      <- can_store_flags Dimach Dccupdate Diconds Dfl Dstresfl Dimach1
      <- puteip_impl Dimach1 Dipc Dputeip1' Dimach2
      <- storeflags_preserves_nextfetch Dputeip1 Dfetch2 Dnext2 Dstresfl
            Dputeip1' Dfetch2' Dnext2'
      <- can_impl_sat Dimach2 Dsat Dicond Disat
      <- geteip_fun Dg geteip_ Dbeq1
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd1 Dadd2
      <- storeflags_eip geteip_ Dstresfl Dgeteip1
      <- can_oload_adjusted Dimach1 Dioper2 Dadj Dresolve Dgeteip1 Drep1 Dadd2
            Dputeip1' Doloadw1 Dival
      <- impl_atomval Dival Datomval Daval
      <- impl_jump_pc Dimach2 Daval Dimp Dputeip2 Dimach3.
?_cjcc_skip :
   simulate* Dimach Ddecode
      (step_cmpjcc_skip Dadvance Dunsat Dccupdate Ddetcon Dadd Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod) Dnexts
      (impl_cmpjcc Dadj Dioper2 Dicond Dioper1 Dioperea Dallowed)
      (transitions_s
          (transitions_s transitions_z
              (transition_ (trans_jcc_skip Dputeip2 Dnext2' Diunsat) Dfetch2'))
          (transition_
              (trans_cmp Dputeip1' Dnext1 Dstresfl Disub Doloadw Dloadw) Dfetch1))
      (step_cmpjcc_skip Dadvance Dunsat Dccupdate Ddetcon Dadd Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod)
      Dimach3
      <- decompose_nextseq_2 Dimach Dnexts Dfetch1 Dg Dm Dml Didec Drep1 Dadd1
            Dsegof Diseg Dnext1 Dipc Dputeip1 Dfetch2 Dnext2
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper1 Dresolve2 Doloadw Dival2
      <- can_binary_to_int Nsz V3 B5 Dprod Dbi3
      <- can_isub Dallowed Dprod Dbi1 Dbi2 Dbi3 Dadd Ddetcon Dival1 Dival2
            Dival3 Disub Diconds Dfl
      <- can_store_flags Dimach Dccupdate Diconds Dfl Dstresfl Dimach1
      <- puteip_impl Dimach1 Dipc Dputeip1' Dimach2
      <- storeflags_preserves_nextfetch Dputeip1 Dfetch2 Dnext2 Dstresfl
            Dputeip1' Dfetch2' Dnext2'
      <- can_impl_unsat Dimach2 Dunsat Dicond Diunsat
      <- advance_next Dimach Ddecode
            (impl_cmpjcc Dadj Dioper2 Dicond Dioper1 Dioperea Dallowed) Dadvance
            Dnexts Dimach2 Dputeip2 Dimach3.
?_jcc_take :
   simulate* Dimach Ddecode (step_jcc_take (jump_ Datomval Dresolve) Dsat)
      Dnexts (impl_jcc Dioper Dicond)
      (transitions_s transitions_z
          (transition_ (trans_jcc_take Dpf Daw Doloadw Disat) Dfetch))
      (step_jcc_take (jump_ Datomval Dresolve) Dsat) Dimach'
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_impl_sat Dimach Dsat Dicond Disat
      <- can_oload Dimach Dioper Dresolve Doloadw Dival
      <- impl_atomval Dival Datomval Daval
      <- impl_jump_pc Dimach Daval Daw Dpf Dimach'.
?_jcc_skip :
   simulate* Dimach Ddecode (step_jcc_skip Dadvance Dunsat) Dnexts
      (impl_jcc Dioper Dicond)
      (transitions_s transitions_z
          (transition_ (trans_jcc_skip Dputeip Dnext Diunsat) Dfetch))
      (step_jcc_skip Dadvance Dunsat) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_impl_unsat Dimach Dunsat Dicond Diunsat
      <- advance_next Dimach Ddecode (impl_jcc Dioper Dicond) Dadvance Dnexts
            Dimach Dputeip Dimpl.
?_jmp :
   simulate* Dimach Ddecode (step_jmp (jump_ Datomval Dresolve)) Dnexts
      (impl_jump Dioper)
      (transitions_s transitions_z
          (transition_ (trans_jmp Dpf Daw Doloadw) Dfetch))
      (step_jmp (jump_ Datomval Dresolve)) Dimach'
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_oload Dimach Dioper Dresolve Doloadw Dival
      <- impl_atomval Dival Datomval Daval
      <- impl_jump_pc Dimach Daval Daw Dpf Dimach'.
?_mov :
   simulate* Dimach Ddecode (step_mov Dadvance Dprop Dresolve) Dnexts
      (impl_mov Dioper Didest)
      (transitions_s transitions_z
          (transition_ (trans_mov Dputeip Dnext Dstore Doload) Dfetch))
      (step_mov Dadvance Dprop Dresolve) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_oload Dimach Dioper Dresolve Doload Dival
      <- can_store Dimach Didest Dprop Dival Dstore Dimach1
      <- advance_next Dimach Ddecode (impl_mov Dioper Didest) Dadvance Dnexts
            Dimach1 Dputeip Dimpl.
?_nop :
   simulate* Dimach Ddecode (step_nop Dadvance) Dnexts impl_nop
      (transitions_s transitions_z
          (transition_ (trans_nop Dputeip Dnext) Dfetch)) (step_nop Dadvance)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- advance_next Dimach Ddecode impl_nop Dadvance Dnexts Dimach Dputeip
            Dimpl.
- :
   simulate* Dimach Ddecode
      (step_or Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dor Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod) Dnexts
      (impl_or Dioper Dioperea Didest Dallowed)
      (transitions_s transitions_z
          (transition_
              (trans_or Dputeip Dnext Dstresfl Dstorew Dior Doloadw Dloadw)
              Dfetch))
      (step_or Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dor Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_ior Dallowed Dprod Dbi1 Dbi2 Dbi3 Dor Ddetcon Dival1 Dival2 Dival3
            Dior Diconds Dfl
      <- can_store Dimach Didest Dpropagate Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 Dccupdate Diconds Dfl Dstresfl Dimach2
      <- advance_next Dimach Ddecode (impl_or Dioper Dioperea Didest Dallowed)
            Dadvance Dnexts Dimach2 Dputeip Dimpl.
?_pop :
   simulate* Dimach Ddecode (step_pop Dadvance Dprop Dzupdate Dsep Dzlook)
      Dnexts (impl_pop Didest)
      (transitions_s transitions_z
          (transition_
              (trans_pop Dputeip Dnext Dst Drst Dimp2 Dadd4 Dadd3 Dadd2 Drep1
                  Dssect Dgm Dadd1 Dml Dimp1 Drl)
              Dfetch))
      (step_pop Dadvance Dprop Dzupdate Dsep Dzlook) Dimach3
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_zpop Dimach Dzlook Dsep Dzupdate represents_4_32 nat_eq_ Drl Dimp1
            Dml Dadd1 Dgm Dssect Drep1 Dadd2 Dadd3 Dadd4 Dimp2 Drst Dival
            Dimach1
      <- can_store Dimach1 Didest Dprop Dival Dst Dimach2
      <- advance_next Dimach Ddecode (impl_pop Didest) Dadvance Dnexts Dimach2
            Dputeip Dimach3.
simulate_push| :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi O:operand. Pi Mach:machine. Pi IS:iinstseq. Pi S:string ww.
      Pi Wesp:binary wwb. Pi Wnesp:binary 32'. Pi M:memory. Pi Aneip:binary wwb.
      Pi ST':state.
      impl_machine CI ST (mach H L R PC) -> decode H PC (i_push O)
         -> perform (mach H L R PC) (i_push O) Mach
         -> impl_inst CI IS (i_push O) -> rload ST esp S -> implode_word S Wesp
         -> add Wnesp 4_32 Wesp zero -> getmem ST M
         -> trap_or_valid_stack M Wnesp -> nextseq ST IS Aneip
         -> transition ST ST' -> implements ST' Mach -> type.
-t :
   simulate_push| Dimach Ddecode
      (step_push Dadvance Dzupdate Dapp Dzlook Dresolve) (impl_push Dioperea)
      Drload Dimp Dadd Dgetmem (trap_or_valid_stack_trap Dtrap) Dnexts
      (transition_ (trans_push_stopped Dtrap Dgetmem Dadd Dimp Doload Drload)
          Dfetch)
      implements_stopped
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_oload Dimach Dioperea Dresolve Doload Dival.
-v :
   simulate_push| Dimach Ddecode
      (step_push Dadvance Dzupdate Dapp Dzlook Dresolve) (impl_push Dioperea)
      Drload Dimp Dadd Dgetmem
      (trap_or_valid_stack_valid Dadd1 Dadd2 Dadd3 Drep1 Dssect) Dnexts
      (transition_
          (trans_push Dputeip Dnext Dmst Drst Dadd1 Dadd2 Dadd3 Drep1 Dssect
              Dgetmem Dimp1 Dadd Dimp Doload Drload)
          Dfetch)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_oload Dimach Dioperea Dresolve Doload Dival
      <- stack_section_valid Dimach Dgetmem Dssect Dbeq X1
      <- add_resp Dbeq binary_eq_ binary_eq_ bit_eq_ Dadd2 Dadd2'
      <- can_zpush Dimach Dzlook Dapp Dzupdate Dival Drload Dimp 
represents_4_32
            nat_eq_ Dadd Dadd2' Dimp1 Drst Dmst Dimach1
      <- advance_next Dimach Ddecode (impl_push Dioperea) Dadvance Dnexts
            Dimach1 Dputeip Dimpl.
?_push :
   simulate* Dimach Ddecode (step_push Dadvance Dzupdate Dapp Dzlook Dresolve)
      Dnexts (impl_push Dioperea) (transitions_s transitions_z Dtrans)
      (step_push Dadvance Dzupdate Dapp Dzlook Dresolve) Dimpl
      <- can_decide_trap Dimach add_4_1024 Drload Dimp Dadd Dgm Dtrv
      <- simulate_push| Dimach Ddecode
            (step_push Dadvance Dzupdate Dapp Dzlook Dresolve)
            (impl_push Dioperea) Drload Dimp Dadd Dgm Dtrv Dnexts Dtrans Dimpl.
simulate_pushrel| :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi O:operand. Pi Mach:machine. Pi IS:iinstseq. Pi S:string ww.
      Pi Wesp:binary wwb. Pi Wnesp:binary 32'. Pi M:memory. Pi Aneip:binary wwb.
      Pi N1:nat. Pi ST':state. Pi Mach1:machine.
      impl_machine CI ST (mach H L R PC) -> decode H PC (i_pushrel O)
         -> perform (mach H L R PC) (i_pushrel O) Mach
         -> impl_inst CI IS (i_pushrel O) -> rload ST esp S
         -> implode_word S Wesp -> add Wnesp 4_32 Wesp zero -> getmem ST M
         -> trap_or_valid_stack M Wnesp -> nextseq ST IS Aneip
         -> transitions (s N1) ST ST'
         -> perform (mach H L R PC) (i_pushrel O) Mach1 -> implements ST' Mach1
         -> type.
- :
   simulate_pushrel| Dimach Ddecode Dstep Dipushrel Drload Dimp Dadd Dgm
      (trap_or_valid_stack_trap Dtrap) Dnexts
      (transitions_s transitions_z
          (transition_ (trans_call_stopped Dtrap Dgm Dadd Dimp Drload) Dfetch))
      Dstep implements_stopped
      <- decompose_nextseq_2 Dimach Dnexts Dfetch X1 X2 X3 X4 X5 X6 X7 X8 X9 X10
            X11 X12 X13.
- :
   simulate_pushrel| Dimach Ddecode
      (step_pushrel Dadvance Dccupdate Dzupdate Dappend Dzlookup Dresolve)
      (impl_push_rel Dioper Dadd1 Drep1 Dimp1) Drload Dimp2 Dadd2 Dgm
      (trap_or_valid_stack_valid Dadd3 Dadd4 Dadd5 Drep2 Dssect) Dnexts
      (transitions_s
          (transitions_s transitions_z
              (transition_
                  (trans_add Dputeip2 Dnext2' Dstresfl
                      (store_deref_z Dmstore5 Dadd10 Dimp4 Drload3)
                      (binop_4 Dimp6 (binop_add Dresfl Dadd19) Dimp1 Dimp3)
                      oload_imm (load_deref_z Dmload2 Dadd10 Dimp4 Drload3))
                  Dfetch2'))
          (transition_
              (trans_call Dputeip1' Dimp3 (oload_pcrel Dimp3 Dadd8 Dgeteip3)
                  Dmstore1 Dimp3 Dnext1 Drstore1 Dadd3 Dadd4 Dadd5 Drep2 Dssect
                  Dgm Dimp4 Dadd2 Dimp2 Drload)
              Dfetch1))
      (step_pushrel Dadvance Dccupdate1 Dzupdate Dappend Dzlookup Dresolve)
      Dimpl
      <- decompose_nextseq_2 Dimach Dnexts Dfetch1 Dgeteip1 Dgm1 X5 X6 Drep3
            Dadd6 Dsegof Diseg Dnext1 Dipc1 Dputeip1 Dfetch2 Dnext2
      <- binary_word_to_word Anexteip Dimp3
      <- stack_section_valid Dimach Dgm Dssect Dbeq1 X4
      <- add_resp Dbeq1 binary_eq_ binary_eq_ bit_eq_ Dadd4 Dadd7
      <- can_zpush' Dimach Drload Dimp2 represents_4_32 nat_eq_ Dadd2 Dadd7
            Wnexteip Dimp4 Drstore1 Dmstore1
      <- rstore_eip Dgeteip1 Drstore1 Dgeteip2
      <- mstore_eip Dgeteip2 Dmstore1 Dgeteip3
      <- represents_fun2 Drep3 Drep1 Dbeq2
      <- add_resp binary_eq_ Dbeq2 binary_eq_ bit_eq_ Dadd6 Dadd8
      <- fetch_next_stack_store_indep Dimach Dgm1 Dsegof Diseg Dputeip1 Dfetch2
            Dnext2 Drload Dimp2 represents_4_32 nat_eq_ Dadd2 Dadd7 Dimp4
            Drstore1 Dmstore1 Dputeip1' Dfetch2' Dnext2'
      <- rload_last Drstore1 Drload1
      <- memory_rfile_ind Drload1 Dmstore1 Drload2
      <- puteip_rfile_ind Drload2 Dputeip1' Drload3
      <- add_ident Anesp is_zero_0_32 Dadd9
      <- add_commute Dadd9 Dadd10
      <- mload_last Dmstore1 Dmload1
      <- puteip_mem_ind Dmload1 Dputeip1' Dmload2
      <- can_oload Dimach Dioper Dresolve (oload_pcrel Dimp6 Dadd11 Dgeteip1')
            Dival
      <- can_zpush Dimach Dzlookup Dappend Dzupdate Dival Drload Dimp2
            represents_4_32 nat_eq_ Dadd2 Dadd7 Dimp5 Drstore2 Dmstore2 Dimach1
      <- implode_word_fun1 Dimp5 Dimp4 Dseq1
      <- rstore_resp state_eq_ nat_eq_ Dseq1 state_eq_ Drstore2 Drstore3
      <- rstore_fun Drstore3 Drstore1 Dsteq1
      <- mstore_resp Dsteq1 binary_eq_ string_eq_ state_eq_ Dmstore2 Dmstore3
      <- mstore_last_valid Dmstore3 Dmstore1 Dmstore4
      <- puteip_mstore_ind Dputeip1' Dmstore4 Dputeip1'' Dmstore5
      <- geteip_fun Dgeteip1' Dgeteip1 Dbeq3
      <- add_resp Dbeq3 binary_eq_ binary_eq_ bit_eq_ Dadd11 Dadd12
      <- add_commute Dadd12 Dadd13
      <- add_assoc* Dadd1 Dadd13 Dadd14 Dadd15 X3
      <- add_commute Dadd14 Dadd16
      <- add_fun3 Dadd16 Dadd8 X2 Dbeq4
      <- add_resp binary_eq_ Dbeq4 binary_eq_ bit_eq_ Dadd15 Dadd17
      <- add_commute Dadd17 Dadd18
      <- add_is_add_wo Dadd18 Dadd19
      <- puteip_impl Dimach1 Dipc1 Dputeip1''' Dimach2
      <- puteip_fun Dputeip1''' Dputeip1'' Dsteq2
      <- impl_machine_resp Dsteq2 machine_eq_ Dimach2 Dimach3
      <- can_resflags_dk B7 B8 B9 Dresfl Dfr Diconds
      <- can_ccupdate R2 (conds_ B3 B4 B5 B6) Dccupdate1
      <- can_store_flags Dimach3 Dccupdate1 Diconds Dfr Dstresfl Dimach4
      <- advance_next Dimach Ddecode (impl_push_rel Dioper Dadd1 Drep1 Dimp1)
            Dadvance Dnexts Dimach4 Dputeip2 Dimpl.
?_push_rel :
   simulate* Dimach Ddecode
      (step_pushrel Dadvance Dccupdate Dzupdate Dapp Dzlook Dresolve) Dnexts
      (impl_push_rel Dioper Dadd1 Drep1 Dimp1) Dtrans Dstep Dimpl
      <- can_decide_trap Dimach add_4_1024 Drload Dimp2 Dadd2 Dgm Dtrv
      <- simulate_pushrel| Dimach Ddecode
            (step_pushrel Dadvance Dccupdate Dzupdate Dapp Dzlook Dresolve)
            (impl_push_rel Dioper Dadd1 Drep1 Dimp1) Drload Dimp2 Dadd2 Dgm Dtrv
            Dnexts Dtrans Dstep Dimpl.
?_ret :
   simulate* Dimach Ddecode (step_ret Datval Dzupdate Dsep Dzlook) Dnexts
      impl_ret
      (transitions_s transitions_z
          (transition_
              (trans_ret Dputeip Dimp3 Drst Dimp2 Dadd3 Dadd2 Dadd1 Drep1 Dssect
                  Dgm Dadd Dml Dimp1 Drl)
              Dfetch))
      (step_ret Datval Dzupdate Dsep Dzlook) Dimach2
      <- decompose_nextseq_1 Dnexts Dfetch X1
      <- can_zpop Dimach Dzlook Dsep Dzupdate represents_4_32 nat_eq_ Drl Dimp1
            Dml Dadd Dgm Dssect Drep1 Dadd1 Dadd2 Dadd3 Dimp2 Drst Dival Dimach1
      <- impl_atomval Dival Datval Daval
      <- impl_jump_pc Dimach1 Daval Dimp3 Dputeip Dimach2.
?_fload :
   simulate* Dimach Ddecode (step_fload Dadvance Dresolve) Dnexts
      (impl_fload Dioper)
      (transitions_s transitions_z
          (transition_ (trans_fload Dputeip Dnext Dload) Dfetch))
      (step_fload Dadvance Dresolve) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioper Dresolve Dload Dival
      <- advance_next Dimach Ddecode (impl_fload Dioper) Dadvance Dnexts Dimach
            Dputeip Dimpl.
?_fnop :
   simulate* Dimach Ddecode (step_fnop Dadvance) Dnexts impl_fnop
      (transitions_s transitions_z
          (transition_ (trans_fnop Dputeip Dnext) Dfetch)) (step_fnop Dadvance)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- advance_next Dimach Ddecode impl_fnop Dadvance Dnexts Dimach Dputeip
            Dimpl.
?_fstore :
   simulate* Dimach Ddecode (step_fstore Dadvance Dprop Dvexp) Dnexts
      (impl_fstore Didest)
      (transitions_s transitions_z
          (transition_ (trans_fstore Dputeip Dnext Dstore Dpo Dcons getoracle_)
              Dfetch))
      (step_fstore Dadvance Dprop Dvexp) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_consume_string OR1 N S Dcons
      <- can_putoracle Dimach OR2 Dpo Dimach1
      <- junk_impl S CI1 Dvexp Dival
      <- can_store Dimach1 Didest Dprop Dival Dstore Dimach2
      <- advance_next Dimach Ddecode (impl_fstore Didest) Dadvance Dnexts
            Dimach2 Dputeip Dimpl.
?_fstflags :
   simulate* Dimach Ddecode (step_fstflags Dadvance Dccupdate) Dnexts
      impl_fstflags
      (transitions_s transitions_z
          (transition_
              (trans_fstoreflags Dputeip Dnext Dpf Dpo Dcons4 Dcons3 Dcons2
                  Dcons1 getoracle_)
              Dfetch))
      (step_fstflags Dadvance Dccupdate1) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_consume_bit OR1 Dcons1
      <- can_consume_bit OR5 Dcons2
      <- can_consume_bit OR4 Dcons3
      <- can_consume_bit OR3 Dcons4
      <- can_putoracle Dimach OR2 Dpo Dimach1
      <- can_putflags Dimach1 impl_conds_ Dpf Dccupdate1 Dimach2
      <- advance_next Dimach Ddecode impl_fstflags Dadvance Dnexts Dimach2
            Dputeip Dimpl.
?_halt :
   simulate* Dimach Ddecode (step_halt Dzlook) Dnexts impl_halt
      (transitions_s transitions_z
          (transition_
              (trans_ret_halt Dadd Drep1 Dssect getmem_ Dimp
                  (rload_ Drl getregs_)) Dfetch))
      (step_halt Dzlook) implements_stopped
      <- decompose_nextseq_1 Dnexts Dfetch X1
      <- can_zget_impl Dimach Dzlook Drl Dimp Dssect Dadd Drep Dindex Dival
      <- impl_val_null_string Dival Dseq
      <- index_resp nat_eq_ string_eq_ string_eq_ Dseq Dindex Dindex1
      <- index_implies_sum Dindex1 Dsum1
      <- sum_commute Dsum1 Dsum1'
      <- sum_fun3 sum_z Dsum1' Dnateq1
      <- represents_resp Dnateq1 binary_eq_ Drep Drep1.
?_sfree :
   simulate* Dimach Ddecode (step_sfree Dadvance Dccupdate Dzupdate Dsep Dzlook)
      Dnexts (impl_sfree Dnateq Drep Daim)
      (transitions_s transitions_z
          (transition_
              (trans_add Dputeip Dnext Dstresfl (store_reg Drstore)
                  (binop_4 Dimp2 (binop_add Dresflags Daddwo) Daim Dimp1)
                  oload_imm (load_reg Drload))
              Dfetch))
      (step_sfree Dadvance Dccupdate1 Dzupdate Dsep Dzlook) Dimach3
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_zpop Dimach Dzlook Dsep Dzupdate Drep Dnateq Drload Dimp1 Dml Dadd
            Dgm Dssect Drep1 Dadd1 Dadd2 Dadd3 Dimp2 Drstore Dival Dimach1
      <- add_is_add_wo Dadd Daddwo
      <- can_resflags_dk B7 zero B8 Dresflags Dfr Diconds
      <- can_ccupdate R3 (conds_ B3 B4 B5 B6) Dccupdate1
      <- can_store_flags Dimach1 Dccupdate1 Diconds Dfr Dstresfl Dimach2
      <- advance_next Dimach Ddecode (impl_sfree Dnateq Drep Daim) Dadvance
            Dnexts Dimach2 Dputeip Dimach3.
?_rol :
   simulate* Dimach Ddecode
      (step_rol Dadvance Dccupdate Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_rol Dioper Dioperea Didest)
      (transitions_s transitions_z
          (transition_
              (trans_rol Dputeip Dnext Dputor Dstfl Dstorew Dshiftop getoracle_
                  Dgetflags Doloadw Dloadw)
              Dfetch))
      (step_rol Dadvance ccupdate_ Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_getflags Dimach Dcclookup Dgetflags Diconds
      <- can_irol Dprod Dbi1 Dbi2 Dbi3 DrepRot DltRot Dcclookup Diconds Drol OR1
            Dival1 Dival2 Dival3 Dshiftop Diconds1 Dfr
      <- can_store Dimach Didest Dprop Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 ccupdate_ Diconds1 Dfr Dstfl Dimach2
      <- can_putoracle Dimach2 OR2 Dputor Dimach3
      <- advance_next Dimach Ddecode (impl_rol Dioper Dioperea Didest) Dadvance
            Dnexts Dimach3 Dputeip Dimpl.
?_rcl :
   simulate* Dimach Ddecode
      (step_rcl Dadvance Dccupdate Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_rcl Dioper Dioperea Didest)
      (transitions_s transitions_z
          (transition_
              (trans_rcl Dputeip Dnext Dputor Dstfl Dstorew Dshiftop getoracle_
                  Dgetflags Doloadw Dloadw)
              Dfetch))
      (step_rcl Dadvance ccupdate_ Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_getflags Dimach Dcclookup Dgetflags Diconds
      <- can_ircl Dprod Dbi1 Dbi2 Dbi3 DrepRot DltRot Dcclookup Diconds Drol OR1
            Dival1 Dival2 Dival3 Dshiftop Diconds1 Dfr
      <- can_store Dimach Didest Dprop Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 ccupdate_ Diconds1 Dfr Dstfl Dimach2
      <- can_putoracle Dimach2 OR2 Dputor Dimach3
      <- advance_next Dimach Ddecode (impl_rcl Dioper Dioperea Didest) Dadvance
            Dnexts Dimach3 Dputeip Dimpl.
?_ror :
   simulate* Dimach Ddecode
      (step_ror Dadvance Dccupdate Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_ror Dioper Dioperea Didest)
      (transitions_s transitions_z
          (transition_
              (trans_ror Dputeip Dnext Dputor Dstfl Dstorew Dshiftop getoracle_
                  Dgetflags Doloadw Dloadw)
              Dfetch))
      (step_ror Dadvance ccupdate_ Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_getflags Dimach Dcclookup Dgetflags Diconds
      <- can_iror Dprod Dbi1 Dbi2 Dbi3 DrepRot DltRot Dcclookup Diconds Drol OR1
            Dival1 Dival2 Dival3 Dshiftop Diconds1 Dfr
      <- can_store Dimach Didest Dprop Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 ccupdate_ Diconds1 Dfr Dstfl Dimach2
      <- can_putoracle Dimach2 OR2 Dputor Dimach3
      <- advance_next Dimach Ddecode (impl_ror Dioper Dioperea Didest) Dadvance
            Dnexts Dimach3 Dputeip Dimpl.
?_rcr :
   simulate* Dimach Ddecode
      (step_rcr Dadvance Dccupdate Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_rcr Dioper Dioperea Didest)
      (transitions_s transitions_z
          (transition_
              (trans_rcr Dputeip Dnext Dputor Dstfl Dstorew Dshiftop getoracle_
                  Dgetflags Doloadw Dloadw)
              Dfetch))
      (step_rcr Dadvance ccupdate_ Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_getflags Dimach Dcclookup Dgetflags Diconds
      <- can_ircr Dprod Dbi1 Dbi2 Dbi3 DrepRot DltRot Dcclookup Diconds Drol OR1
            Dival1 Dival2 Dival3 Dshiftop Diconds1 Dfr
      <- can_store Dimach Didest Dprop Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 ccupdate_ Diconds1 Dfr Dstfl Dimach2
      <- can_putoracle Dimach2 OR2 Dputor Dimach3
      <- advance_next Dimach Ddecode (impl_rcr Dioper Dioperea Didest) Dadvance
            Dnexts Dimach3 Dputeip Dimpl.
?_shl :
   simulate* Dimach Ddecode
      (step_shl Dadvance Dccupdate Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_shl Dioper Dioperea Didest Dallowed)
      (transitions_s transitions_z
          (transition_
              (trans_shl Dputeip Dnext Dputor Dstfl Dstorew Dshiftop getoracle_
                  Dgetflags Doloadw Dloadw)
              Dfetch))
      (step_shl Dadvance ccupdate_ Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_getflags Dimach Dcclookup Dgetflags Diconds
      <- can_ishl Dprod Dallowed Dbi1 Dbi2 Dbi3 DrepRot DltRot Dcclookup Diconds
            Drol OR1 Dival1 Dival2 Dival3 Dshiftop Diconds1 Dfr
      <- can_store Dimach Didest Dprop Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 ccupdate_ Diconds1 Dfr Dstfl Dimach2
      <- can_putoracle Dimach2 OR2 Dputor Dimach3
      <- advance_next Dimach Ddecode (impl_shl Dioper Dioperea Didest Dallowed)
            Dadvance Dnexts Dimach3 Dputeip Dimpl.
?_shr :
   simulate* Dimach Ddecode
      (step_shr Dadvance Dccupdate Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_shr Dioper Dioperea Didest Dallowed)
      (transitions_s transitions_z
          (transition_
              (trans_shr Dputeip Dnext Dputor Dstfl Dstorew Dshiftop getoracle_
                  Dgetflags Doloadw Dloadw)
              Dfetch))
      (step_shr Dadvance ccupdate_ Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_getflags Dimach Dcclookup Dgetflags Diconds
      <- can_ishr Dprod Dallowed Dbi1 Dbi2 Dbi3 DrepRot DltRot Dcclookup Diconds
            Drol OR1 Dival1 Dival2 Dival3 Dshiftop Diconds1 Dfr
      <- can_store Dimach Didest Dprop Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 ccupdate_ Diconds1 Dfr Dstfl Dimach2
      <- can_putoracle Dimach2 OR2 Dputor Dimach3
      <- advance_next Dimach Ddecode (impl_shr Dioper Dioperea Didest Dallowed)
            Dadvance Dnexts Dimach3 Dputeip Dimpl.
?_sar :
   simulate* Dimach Ddecode
      (step_sar Dadvance Dccupdate Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_sar Dioper Dioperea Didest Dallowed)
      (transitions_s transitions_z
          (transition_
              (trans_sar Dputeip Dnext Dputor Dstfl Dstorew Dshiftop getoracle_
                  Dgetflags Doloadw Dloadw)
              Dfetch))
      (step_sar Dadvance ccupdate_ Dprop Dbi3 Drol Dcclookup DltRot DrepRot Dbi2
          Dbi1 Dresolve2 Dresolve1 Dprod)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_getflags Dimach Dcclookup Dgetflags Diconds
      <- can_isar Dprod Dallowed Dbi1 Dbi2 Dbi3 DrepRot DltRot Dcclookup Diconds
            Drol OR1 Dival1 Dival2 Dival3 Dshiftop Diconds1 Dfr
      <- can_store Dimach Didest Dprop Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 ccupdate_ Diconds1 Dfr Dstfl Dimach2
      <- can_putoracle Dimach2 OR2 Dputor Dimach3
      <- advance_next Dimach Ddecode (impl_sar Dioper Dioperea Didest Dallowed)
            Dadvance Dnexts Dimach3 Dputeip Dimpl.
?_sub :
   simulate* Dimach Ddecode
      (step_sub Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dadd Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_sub Dioper Dioperea Didest Dallowed)
      (transitions_s transitions_z
          (transition_
              (trans_sub Dputeip Dnext Dstresfl Dstorew Disub Doloadw Dloadw)
              Dfetch))
      (step_sub Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dadd Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_isub Dallowed Dprod Dbi1 Dbi2 Dbi3 Dadd Ddetcon Dival1 Dival2
            Dival3 Disub Diconds Dfl
      <- can_store Dimach Didest Dpropagate Dival3 Dstorew Dimach'
      <- can_store_flags Dimach' Dccupdate Diconds Dfl Dstresfl Dimach''
      <- advance_next Dimach Ddecode (impl_sub Dioper Dioperea Didest Dallowed)
            Dadvance Dnexts Dimach'' Dputeip Dimpl.
- :
   simulate* Dimach Ddecode
      (step_subptr Dadvance Dccupdate Dpropagate Datval2 Dsum Drep Dbi2 Datval1
          Dresolve2 Dresolve1)
      Dnexts (impl_subptr Dioper Dioperea Didest)
      (transitions_s transitions_z
          (transition_
              (trans_sub Dputeip Dnext Dstresfl Dstore
                  (binop_4 Dimp2 (binop_sub Dresflags Daddwo) Dimp' Dimp1)
                  Doloadw Dloadw)
              Dfetch))
      (step_subptr Dadvance Dccupdate1 Dpropagate Datval2 Dsum Drep Dbi2 Datval1
          Dresolve2 Dresolve1)
      Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- impl_atomval Dival1 Datval1 Daval
      <- str_val_size_corr S3 Dival2 Dsize2
      <- impl_val_binary_int Dival2 Dsize2 Dbi2 Dseq Dimp
      <- string_eq_symm Dseq Dseq1
      <- implode_word_resp Dseq1 binary_eq_ Dimp Dimp'
      <- impl_pointer_sub Daval Dsum Drep Dimp1 Daddwo1 Dimp2 Daval1
      <- add_wo_commute Daddwo1 Daddwo
      <- atomval_aval_ptr Datval2 Daval1 Dival3
      <- can_resflags_dk B6 B7 B8 Dresflags Dfr Diconds
      <- can_store Dimach Didest Dpropagate Dival3 Dstore Dimach1
      <- can_ccupdate R2 (conds_ B2 B3 B4 B5) Dccupdate1
      <- can_store_flags Dimach1 Dccupdate1 Diconds Dfr Dstresfl Dimach2
      <- advance_next Dimach Ddecode (impl_subptr Dioper Dioperea Didest)
            Dadvance Dnexts Dimach2 Dputeip Dimpl.
- :
   simulate* Dimach Ddecode
      (step_xor Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dxor Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod)
      Dnexts (impl_xor Dioper Dioperea Didest Dallowed)
      (transitions_s transitions_z
          (transition_
              (trans_xor Dputeip Dnext Dstresfl Dstorew Dixor Doloadw Dloadw)
              Dfetch))
      (step_xor Dadvance Dccupdate Dpropagate Dbi3 Ddetcon Dxor Dbi2 Dbi1
          Dresolve2 Dresolve1 Dprod) Dimpl
      <- decompose_nextseq_1 Dnexts Dfetch Dnext
      <- can_load Dimach Dioperea Dresolve1 Dloadw Dival1
      <- can_oload Dimach Dioper Dresolve2 Doloadw Dival2
      <- can_ixor Dallowed Dprod Dbi1 Dbi2 Dbi3 Dxor Ddetcon Dival1 Dival2
            Dival3 Dixor Diconds Dfl
      <- can_store Dimach Didest Dpropagate Dival3 Dstorew Dimach1
      <- can_store_flags Dimach1 Dccupdate Diconds Dfl Dstresfl Dimach2
      <- advance_next Dimach Ddecode (impl_xor Dioper Dioperea Didest Dallowed)
            Dadvance Dnexts Dimach2 Dputeip Dimpl.
simulate_salloc| :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi N:nat. Pi Mach:machine. Pi IS:iinstseq. Pi B:binary wwb.
      Pi S:string ww. Pi Wesp:binary wwb. Pi Wnesp:binary wwb. Pi M:memory.
      Pi Aneip:binary wwb. Pi N1:nat. Pi ST':state. Pi Mach1:machine.
      impl_machine CI ST (mach H L R PC) -> decode H PC (i_salloc N)
         -> perform (mach H L R PC) (i_salloc N) Mach
         -> impl_inst CI IS (i_salloc N) -> represents N B -> rload ST esp S
         -> implode_word S Wesp -> add Wnesp B Wesp zero -> getmem ST M
         -> trap_or_valid_stack M Wnesp -> nextseq ST IS Aneip
         -> transitions (s N1) ST ST'
         -> perform (mach H L R PC) (i_salloc N) Mach1 -> implements ST' Mach1
         -> type.
- :
   simulate_salloc| Dimach Ddecode Dstep
      (impl_salloc Dadd1 Dadd2 Dnateq Drep1 Dimp1) Drep2 Drload Dimp2 Dadd3
      getmem_ (trap_or_valid_stack_trap Dtrap) Dnexts
      (transitions_s
          (transitions_s transitions_z
              (transition_
                  (trans_push_stopped Dtrap getmem_ Dadd9 Dimp3 oload_imm
                      (rload_ Drload1 getregs_))
                  Dfetch2''))
          (transition_
              (trans_sub puteip_ Dnext1 (store_result_flags_ putflags_)
                  (store_reg (rstore_ putregs_ Drstore getregs_))
                  (binop_4 Dimp3 (binop_sub Dresof Dadd8) Dimp1 Dimp2) 
oload_imm
                  (load_reg Drload))
              Dfetch1))
      Dstep implements_stopped
      <- decompose_nextseq_2 Dimach Dnexts Dfetch1 X2 X3 X4 X5 X6 X7 X8 X9
            Dnext1 Dipc Dputeip1 Dfetch2 Dnext2
      <- puteip_fun Dputeip1 puteip_ Dsteq0
      <- fetch_resp Dsteq0 iinst_eq_ Dfetch2 Dfetch2'
      <- next_resp Dsteq0 binary_eq_ Dnext2 Dnext2'
      <- represents_fun2 Drep1 Drep2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd2 Dadd4
      <- add_commute Dadd3 Dadd5
      <- add_assoc Dadd4 Dadd5 Dadd6 Dadd7
      <- add_is_add_wo Dadd7 Dadd8
      <- can_resflags_dk B2 zero B11 Dresof Dfr Diconds
      <- binary_word_to_word B2 Dimp3
      <- extract_implement_parts Dimach Diheap Dirfile Dimp4 Distack Diconds1
            Dipc1 Digot Dorder Dciv
      <- rstore_esp S1 Dirfile Drstore Dirfile1
      <- rload*_last Drstore Drload1
      <- fetch_next_rfile_indep Dfetch2' Dnext2' R2 (flags_ B5 B6 B7 B8)
            Dfetch2'' X1
      <- add_commute Dadd6 Dadd9.
- :
   simulate_salloc| Dimach Ddecode
      (step_salloc Dadvance Dccupdate Dzupdate Dapp Dvexp Dzlookup)
      (impl_salloc Dadd1 Dadd2 Dnateq Drep1 Dimp1) Drep2
      (rload_ Drload getregs_) Dimp2 Dadd3 getmem_
      (trap_or_valid_stack_valid Daddend Daddstart Daddsz Drepsz Dssect) Dnexts
      (transitions_s
          (transitions_s transitions_z
              (transition_
                  (trans_push Dputeip2 Dnext2''
                      (mstore_ putmem_ Dmstore1 getmem_)
                      (rstore_ putregs_ Drstore1 getregs_) Daddend Daddstart
                      Daddsz Drepsz Dssect getmem_ Dimp5 Dadd9 Dimp3 oload_imm
                      (rload_ Drload1 getregs_))
                  Dfetch2''))
          (transition_
              (trans_sub puteip_ Dnext1 (store_result_flags_ putflags_)
                  (store_reg (rstore_ putregs_ Drstore getregs_))
                  (binop_4 Dimp3 (binop_sub Dresof Dadd8) Dimp1 Dimp2) 
oload_imm
                  (load_reg (rload_ Drload getregs_)))
              Dfetch1))
      (step_salloc Dadvance Dccupdate1 Dzupdate Dapp Dvexp Dzlookup) Dimpl
      <- decompose_nextseq_2 Dimach Dnexts Dfetch1 X1 X2 X3 X4 X5 X6 X7 X8
            Dnext1 Dipc Dputeip1 Dfetch2 Dnext2
      <- puteip_fun Dputeip1 puteip_ Dsteq0
      <- fetch_resp Dsteq0 iinst_eq_ Dfetch2 Dfetch2'
      <- next_resp Dsteq0 binary_eq_ Dnext2 Dnext2'
      <- represents_fun2 Drep1 Drep2 Dbeq1
      <- add_resp binary_eq_ binary_eq_ Dbeq1 bit_eq_ Dadd2 Dadd4
      <- add_commute Dadd3 Dadd5
      <- add_assoc Dadd4 Dadd5 Dadd6 Dadd7
      <- add_is_add_wo Dadd7 Dadd8
      <- can_resflags_dk Aintesp zero OVERFLOW Dresof flags_to_result_flags_
            Diconds
      <- binary_word_to_word Aintesp Dimp3
      <- extract_implement_parts Dimach Diheap Dirfile Dimp4 Distack Diconds1
            Dipc1 Digot Dorder Dciv
      <- rstore_esp S1 Dirfile Drstore Dirfile1
      <- fetch_next_rfile_indep Dfetch2' Dnext2' R5 (flags_ B4 B5 B6 B7)
            Dfetch2'' Dnext2''
      <- rload*_last Drstore Drload1
      <- add_commute Dadd6 Dadd9
      <- add_commute Dadd4 Dadd10
      <- add_commute Dadd7 Dadd11
      <- stack_section_valid Dimach getmem_ Dssect Dbeq2 Dneq1
      <- add_resp Dbeq2 binary_eq_ binary_eq_ bit_eq_ Daddstart Daddstart'
      <- can_zpush_part Dimach Dzlookup Dapp Dzupdate Dvexp Drep2 Dnateq Drload
            Dimp2 Daddstart' Dadd9 Dadd11 Dadd10 Dimp3 Drstore
            (/ 0f_8 (/ 0f_8 (/ 0f_8 (/ 0f_8 #)))) Dimp5 Drstore1 Dmstore1 Dimach1
      <- puteip_impl Dimach1 Dipc Dputeip1' Dimach2
      <- puteip_fun Dputeip1' puteip_ Dsteq1
      <- impl_machine_resp Dsteq1 machine_eq_ Dimach2 Dimach3
      <- can_ccupdate R4 (conds_ B8 B9 B10 B11) Dccupdate1
      <- can_store_flags Dimach3 Dccupdate1 Diconds flags_to_result_flags_
            Dstresfl Dimach4
      <- store_result_flags_fun Dstresfl (store_result_flags_ putflags_) Dsteq2
      <- impl_machine_resp Dsteq2 machine_eq_ Dimach4 Dimach5
      <- advance_next Dimach Ddecode
            (impl_salloc Dadd1 Dadd2 Dnateq Drep1 Dimp1) Dadvance Dnexts Dimach5
            Dputeip2 Dimpl.
- :
   simulate* Dimach Ddecode
      (step_salloc Dadvance Dccupdate Dzupdate Dapp Dvexp Dzlook) Dnexts
      (impl_salloc Dadd1 Dadd2 Dnateq Drep1 Dimp1) Dtrans Dstep Dimpl
      <- can_decide_trap Dimach Dadd1 Drload Dimp Dadd Dgm Dtrv
      <- simulate_salloc| Dimach Ddecode
            (step_salloc Dadvance Dccupdate Dzupdate Dapp Dvexp Dzlook)
            (impl_salloc Dadd1 Dadd2 Dnateq Drep1 Dimp1) Drep1 Drload Dimp Dadd
            Dgm Dtrv Dnexts Dtrans Dstep Dimpl.
simulate_malloc* :
   Pi CI1:corresp_info. Pi ST1:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi REG:reg. Pi Vgot:val. Pi H1:heap. Pi Vn:val. Pi Bn:binary wordbits.
      Pi N:nat. Pi L':loc. Pi V:val. Pi H':heap. Pi V':val. Pi Hn:heap.
      Pi Rn:rfile. Pi Lpc:loc. Pi Npc:nat. Pi Vpc:val. Pi Z:val. Pi Z':val.
      Pi R'':rfile. Pi ST2:state. Pi ST3:state. Pi PC':pc. Pi H'':heap.
      Pi CI2:corresp_info. Pi Sn:string ww. Pi OR:oracle. Pi Sdk:string N.
      Pi OR':oracle. Pi ST4:state. Pi ST5:state. Pi ST:state. Pi M:machine.
      impl_machine CI1 ST1 (mach H L R PC)
         -> decode H PC (i_malloc (rco REG) (rdest (rg eax)) (rco (rg eax)))
         -> resolve H R PC (rco REG) Vgot -> atomval Vgot gotpointer 0'
         -> goodheap H -> collect (mach H L R PC) (mach H1 L R PC)
         -> resolve H1 R PC (rco (rg eax)) Vn -> binary_int theend Vn Bn
         -> represents N Bn -> lt z N -> nextloc H L L'
         -> val_exp (;' (@' junk 0') null) N V -> hextend H1 L V H'
         -> atomval V' (pointer L 0') 0'
         -> propagate H' R PC (rdest (rg eax)) V' Hn Rn
         -> advance H PC (pc_ Lpc Npc) -> atomval Vpc (pointer Lpc Npc) 0'
         -> zlookup R Z -> append Vpc Z Z' -> zupdate R Z' R'' -> igc ST2 ST3
         -> collect (mach H L R'' PC') (mach H'' L R'' PC')
         -> impl_machine CI2 ST3 (mach H'' L R'' PC') -> rload ST3 eax Sn
         -> implode_word Sn Bn -> getoracle ST3 OR
         -> consume_string OR N Sdk OR' -> putoracle ST3 OR' ST4
         -> mextend_result CI2 ST4 (mach H'' L R'' PC') Sdk L V ST5
         -> transition_runfac irf_malloc ST2 ST
         -> perform (mach H L R PC)
               (i_malloc (rco REG) (rdest (rg eax)) (rco (rg eax))) M
         -> implements ST M -> type.
-f :
   simulate_malloc* Dimach1 Ddecode (resolve_rco (rlookup_ Drlookup1)) Datomval1
      Dgh Dcoll (resolve_rco (rlookup_ Drlookup2)) Dbi DrepSz DltSz
      (nextloc_ Dnewloc) Dvexp hextend_ Datomval2
      (propagate_rdest (rupdate_ Drupdate) Dsize1) Dadvance Datomvalptr 
zlookup_
      Dapp zupdate_ Digc Dcoll1 Dimach2 Drload1 DimpN getoracle_ Dconsume
      putoracle_ (mextend_result_fail Dmext)
      (trans_malloc_stopped Dmext putoracle_ Dconsume getoracle_ DrepSz DimpN
          Drload1 Digc)
      (step_malloc Dadvance (propagate_rdest (rupdate_ Drupdate) Dsize1)
          Datomval2 hextend_ Dvexp (nextloc_ Dnewloc) DltSz DrepSz Dbi
          (resolve_rco (rlookup_ Drlookup2)) Dcoll Dgh Datomval1
          (resolve_rco (rlookup_ Drlookup1)))
      implements_stopped.
-v :
   simulate_malloc* Dimach1 Ddecode (resolve_rco (rlookup_ Drlookup1)) Datomval1
      Dgh Dcoll (resolve_rco (rlookup_ Drlookup2)) Dbi DrepSz DltSz
      (nextloc_ Dnewloc) Dvexp hextend_ Datomval2
      (propagate_rdest (rupdate_ Drupdate) Dsize1) Dadvance Datomvalptr 
zlookup_
      Dapp zupdate_ Digc
      (collect_ Dhcoll (rfile_unreachable_ Drunr Dvunr) Dhunr Dlwf) Dimach2
      Drload1 DimpN getoracle_ Dconsume putoracle_
      (mextend_result_success Dimach4 Dlext Dmext)
      (trans_malloc
          (trans_ret Dputeip2 Dimp7 Drstore2 Dimp6 Dadd9 Dadd8 Dadd7 Drep2
              Dssect1 Dgm2 Dadd6 Dmload1 Dimp5 Drload3)
          Drstore1 Dimp4 Dmext putoracle_ Dconsume getoracle_ DrepSz DimpN
          Drload1 Digc)
      (step_malloc Dadvance (propagate_rdest (rupdate_ Drupdate) Dsize1)
          Datomval2 hextend_ Dvexp (nextloc_ Dnewloc) DltSz DrepSz Dbi
          (resolve_rco (rlookup_ Drlookup2))
          (collect_ Dhcoll (rfile_unreachable_ Drunr Dvunr2) Dhunr Dlwf) Dgh
          Datomval1 (resolve_rco (rlookup_ Drlookup1)))
      Dimpl
      <- locmap_extend_lookup Dlext Dlook1
      <- atomval_size Datomval2 Dsize2 Dasize Dsum1
      <- asize_fun Dasize asize_pointer Dnateq2
      <- sum_resp nat_eq_ nat_eq_ Dnateq2 Dsum1 Dsum2
      <- sum_fun2 Dsum2 sum_z Dnateq3
      <- size_resp val_eq_ Dnateq3 Dsize2 Dsize3
      <- add_ident B9 is_zero_0_32 Dadd4
      <- add_commute Dadd4 Dadd5
      <- binary_word_to_word B9 Dimp4
      <- impl_val_addr Dlook1 Datomval2 asize_pointer Dsize3 represents_0_32
            Dadd5 Dimp4 Nlim Sstart IM Dival2
      <- can_rstore Dimach4 impl_reg_eax (rupdate_ Drupdate) Dival2 Drstore1
            Dimach5
      <- atomval_size Datomvalptr Dsize4 Dasize1 Dsum3
      <- asize_fun Dasize1 asize_pointer Dnateq4
      <- sum_resp nat_eq_ nat_eq_ Dnateq4 Dsum3 Dsum4
      <- sum_fun2 Dsum4 sum_z Dnateq5
      <- size_resp val_eq_ Dnateq5 Dsize4 Dsize5
      <- append_is_separate Dapp Dsize5 Dsep1
      <- can_zpop Dimach5 zlookup_ Dsep1 zupdate_ represents_4_32 nat_eq_
            Drload3 Dimp5 Dmload1 Dadd6 Dgm2 Dssect1 Drep2 Dadd7 Dadd8 Dadd9
            Dimp6 Drstore2 Dival3 Dimach6
      <- impl_atomval Dival3 Datomvalptr Daval1
      <- impl_jump_pc Dimach6 Daval1 Dimp7 Dputeip2 Dimpl
      <- val_unreachable_append Dapp Dvunr Dvunr1 Dvunr2.
simulate_mallocarr* :
   Pi CI1:corresp_info. Pi ST1:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi REG:reg. Pi Vgot:val. Pi H1:heap. Pi Vlength:val.
      Pi Blength:binary wordbits. Pi Nlength:nat. Pi N:nat. Pi Velem:val.
      Pi Varray:val. Pi L':loc. Pi H':heap. Pi V':val. Pi H'':heap. Pi R':rfile.
      Pi Lpc:loc. Pi Npc:nat. Pi Vpc:val. Pi Z:val. Pi Z':val. Pi R'':rfile.
      Pi ST2:state. Pi ST3:state. Pi PC1:pc. Pi Hc:heap. Pi CI2:corresp_info.
      Pi Wlen:string ww. Pi Blen:binary wwb. Pi Wval:string ww. Pi N1:nat.
      Pi Snew:string N1. Pi ST5:state. Pi ST:state. Pi M:machine.
      impl_machine CI1 ST1 (mach H L R PC)
         -> decode H PC
               (i_mallocarr (rco REG) (rdest (rg eax)) ww (rco (rg eax))
                   (rco (rg ecx)))
         -> resolve H R PC (rco REG) Vgot -> atomval Vgot gotpointer 0'
         -> goodheap H -> collect (mach H L R PC) (mach H1 L R PC)
         -> resolve H1 R PC (rco (rg eax)) Vlength
         -> binary_int theend Vlength Blength -> represents Nlength Blength
         -> product ww Nlength N -> lt z N
         -> resolve H1 R PC (rco (rg ecx)) Velem -> size Velem ww
         -> val_exp Velem Nlength Varray -> nextloc H L L'
         -> hextend H1 L Varray H' -> atomval V' (pointer L 0') 0'
         -> propagate H' R PC (rdest (rg eax)) V' H'' R'
         -> advance H PC (pc_ Lpc Npc) -> atomval Vpc (pointer Lpc Npc) 0'
         -> zlookup R Z -> append Vpc Z Z' -> zupdate R Z' R'' -> igc ST2 ST3
         -> collect (mach H L R'' PC1) (mach Hc L R'' PC1)
         -> impl_machine CI2 ST3 (mach Hc L R'' PC1) -> rload ST3 eax Wlen
         -> implode_word Wlen Blen -> represents Nlength Blen
         -> rload ST3 ecx Wval -> string_exp Wval Nlength Snew
         -> impl_val CI2 Snew Varray
         -> mextend_result CI2 ST3 (mach Hc L R'' PC1) Snew L Varray ST5
         -> transition_runfac irf_mallocarr ST2 ST
         -> perform (mach H L R PC)
               (i_mallocarr (rco REG) (rdest (rg eax)) ww (rco (rg eax))
                   (rco (rg ecx))) M
         -> implements ST M -> type.
-f :
   simulate_mallocarr* Dimach1 Ddecode (resolve_rco (rlookup_ Drlookup1))
      Datomval1 Dgh Dcoll (resolve_rco (rlookup_ Drlookup2)) Dbi DrepLen DprodL
      DltSz (resolve_rco (rlookup_ Drlookup3)) DsizeElem Dvexp
      (nextloc_ Dnewloc) hextend_ Datomval2
      (propagate_rdest (rupdate_ Drupdate) Dsize1) Dadvance Datomvalptr 
zlookup_
      Dapp zupdate_ Digc Dcoll1 Dimach2 Drload1 DimpL DrepL Drload2 Dsexp
      DivalAll (mextend_result_fail Dmext)
      (trans_mallocarr_st Dmext Dsexp Drload2 DrepL DimpL Drload1 Digc)
      (step_mallocarr Dadvance (propagate_rdest (rupdate_ Drupdate) Dsize1)
          Datomval2 hextend_ (nextloc_ Dnewloc) Dvexp DsizeElem
          (resolve_rco (rlookup_ Drlookup3)) DltSz DprodL DrepLen Dbi
          (resolve_rco (rlookup_ Drlookup2)) Dcoll Dgh Datomval1
          (resolve_rco (rlookup_ Drlookup1)))
      implements_stopped.
-v :
   simulate_mallocarr* Dimach1 Ddecode (resolve_rco (rlookup_ Drlookup1))
      Datomval1 Dgh Dcoll (resolve_rco (rlookup_ Drlookup2)) Dbi DrepLen Dprod
      DltSz (resolve_rco (rlookup_ Drlookup3)) DsizeElem Dvexp
      (nextloc_ Dnewloc) hextend_ Datomval2
      (propagate_rdest (rupdate_ Drupdate) Dsize1) Dadvance Datomvalptr 
zlookup_
      Dapp zupdate_ Digc
      (collect_ Dhcoll (rfile_unreachable_ Drunr Dvunr) Dhunr Dlwf) Dimach2
      Drload1 DimpL DrepL Drload2 Dsexp DivalAll
      (mextend_result_success Dimach4 Dlext Dmext)
      (trans_mallocarr
          (trans_ret Dputeip2 Dimp7 Drstore2 Dimp6 Dadd9 Dadd8 Dadd7 Drep2
              Dssect1 Dgm2 Dadd6 Dmload1 Dimp5 Drload3)
          Drstore1 Dimp4 Dmext Dsexp Drload2 DrepL DimpL Drload1 Digc)
      (step_mallocarr Dadvance (propagate_rdest (rupdate_ Drupdate) Dsize1)
          Datomval2 hextend_ (nextloc_ Dnewloc) Dvexp DsizeElem
          (resolve_rco (rlookup_ Drlookup3)) DltSz Dprod DrepLen Dbi
          (resolve_rco (rlookup_ Drlookup2))
          (collect_ Dhcoll (rfile_unreachable_ Drunr Dvunr2) Dhunr Dlwf) Dgh
          Datomval1 (resolve_rco (rlookup_ Drlookup1)))
      Dimpl
      <- locmap_extend_lookup Dlext Dlook1
      <- atomval_size Datomval2 Dsize2 Dasize Dsum1
      <- asize_fun Dasize asize_pointer Dnateq2
      <- sum_resp nat_eq_ nat_eq_ Dnateq2 Dsum1 Dsum2
      <- sum_fun2 Dsum2 sum_z Dnateq3
      <- size_resp val_eq_ Dnateq3 Dsize2 Dsize3
      <- add_ident B9 is_zero_0_32 Dadd4
      <- add_commute Dadd4 Dadd5
      <- binary_word_to_word B9 Dimp4
      <- impl_val_addr Dlook1 Datomval2 asize_pointer Dsize3 represents_0_32
            Dadd5 Dimp4 Nlim Sstart IM Dival2
      <- can_rstore Dimach4 impl_reg_eax (rupdate_ Drupdate) Dival2 Drstore1
            Dimach5
      <- atomval_size Datomvalptr Dsize4 Dasize1 Dsum3
      <- asize_fun Dasize1 asize_pointer Dnateq4
      <- sum_resp nat_eq_ nat_eq_ Dnateq4 Dsum3 Dsum4
      <- sum_fun2 Dsum4 sum_z Dnateq5
      <- size_resp val_eq_ Dnateq5 Dsize4 Dsize5
      <- append_is_separate Dapp Dsize5 Dsep1
      <- can_zpop Dimach5 zlookup_ Dsep1 zupdate_ represents_4_32 nat_eq_
            Drload3 Dimp5 Dmload1 Dadd6 Dgm2 Dssect1 Drep2 Dadd7 Dadd8 Dadd9
            Dimp6 Drstore2 Dival3 Dimach6
      <- impl_atomval Dival3 Datomvalptr Daval1
      <- impl_jump_pc Dimach6 Daval1 Dimp7 Dputeip2 Dimpl
      <- val_unreachable_append Dapp Dvunr Dvunr1 Dvunr2.
simulate_runfac :
   Pi CI:corresp_info. Pi ST:state. Pi H:heap. Pi L:loc. Pi R:rfile. Pi PC:pc.
      Pi IN:inst. Pi M:machine. Pi Nirf:nat. Pi IRF:runfac Nirf. Pi REG:reg.
      Pi Nirf4:nat. Pi Dirf:binary wwb. Pi IREG:nat. Pi Z:val. Pi Lpc:loc.
      Pi Npc:nat. Pi Vpc:val. Pi Z':val. Pi R':rfile. Pi N1:nat.
      Pi Aneip:binary wwb. Pi ST1:state. Pi PC':pc. Pi ST2:state. Pi M':machine.
      impl_machine CI ST (mach H L R PC) -> decode H PC IN
         -> perform (mach H L R PC) IN M -> impl_instrf Nirf IRF REG IN
         -> product ww Nirf Nirf4 -> represents Nirf4 Dirf -> impl_reg IREG REG
         -> zlookup R Z -> advance H PC (pc_ Lpc Npc)
         -> atomval Vpc (pointer Lpc Npc) 0' -> append Vpc Z Z'
         -> zupdate R Z' R'
         -> nextseq ST
               (icodecons N1
                   (ii_call (oper_rm (eaddr_deref IREG 0' eax Dirf ww))) 
icodenil)
               Aneip
         -> impl_machine CI ST1 (mach H L R' PC')
         -> transition_runfac IRF ST1 ST2 -> perform (mach H L R PC) IN M'
         -> implements ST2 M' -> type.
- :
   simulate_runfac Dimach Ddecode
      (step_malloc Dadvance (propagate_rdest (rupdate_ Drupdate) Dsize1)
          Datomval2 hextend_ Dvexp (nextloc_ Dnewloc) DltSz DrepSz Dbi
          (resolve_rco (rlookup_ Drlookup2)) Dcoll Dgh Datomval1
          (resolve_rco (rlookup_ Drlookup1)))
      impl_malloc Dprod Drepirf Direg zlookup_ Dadvance1 Datomval Dapp zupdate_
      Dnexts Dimach2 Dtransirf Dstep1 Dimpl
      <- can_collect Dimach2 H2 OR2 Dicoll
      <- simulate_icollect Dimach2 Dicoll
            (collect_ Dhcoll (rfile_unreachable_ Drunr Dvunr) Dhunr Dlwf)
            Dimach3
      <- val_unreachable_append Dapp Dvunr Dvunr1 Dvunr2
      <- can_rload Dimach3 impl_reg_eax (rlookup_ Drlookup2) Drload2 DivalN
      <- can_implode_word Dbi DivalN DimpN
      <- can_consume_string OR2 Nsz S Dconsume
      <- junk_impl S (corresp_info_ N2 B2 LM1 IM1) Dvexp Divaljk
      <- collect_nextloc Dhcoll Dgh (nextloc_ Dnewloc) (nextloc_ Dnewloc1)
      <- goodheap_collect Dgh Dhcoll Dgh1
      <- lt_implies_sum DltSz DsumSz
      <- sum_fun3 DsumSz sum_z Dnateq1
      <- consume_preserves_impl Dimach3 OR3 Dimach3'
      <- can_mextend Dimach3' Dgh1 (nextloc_ Dnewloc1) Divaljk Dnateq1 hextend_
            Dmextresult
      <- simulate_malloc* Dimach Ddecode (resolve_rco (rlookup_ Drlookup1))
            Datomval1 Dgh Dcoll (resolve_rco (rlookup_ Drlookup2)) Dbi DrepSz
            DltSz (nextloc_ Dnewloc) Dvexp hextend_ Datomval2
            (propagate_rdest (rupdate_ Drupdate) Dsize1) Dadvance1 Datomval
            zlookup_ Dapp zupdate_ (igc_ Dicoll)
            (collect_ Dhcoll (rfile_unreachable_ Drunr Dvunr) Dhunr Dlwf)
            Dimach3 Drload2 DimpN getoracle_ Dconsume putoracle_ Dmextresult
            Dtransirf Dstep1 Dimpl.
- :
   simulate_runfac Dimach Ddecode
      (step_mallocarr Dadvance (propagate_rdest (rupdate_ Drupdate) Dsize1)
          Datomval2 hextend_ (nextloc_ Dnewloc) Dvexp DsizeElem
          (resolve_rco (rlookup_ Drlookup3)) DltSz DprodSz DrepL Dbi
          (resolve_rco (rlookup_ Drlookup2)) Dcoll Dgh Datomval1
          (resolve_rco (rlookup_ Drlookup1)))
      impl_mallocarr Dprod Drepirf Direg zlookup_ Dadvance1 Datomval Dapp
      zupdate_ Dnexts Dimach2 Dtransirf Dstep1 Dimpl
      <- can_collect Dimach2 H1 OR1 Dicoll
      <- simulate_icollect Dimach2 Dicoll
            (collect_ Dhcoll (rfile_unreachable_ Drunr Dvunr) Dhunr Dlwf)
            Dimach3
      <- val_unreachable_append Dapp Dvunr Dvunr1 Dvunr2
      <- can_rload Dimach3 impl_reg_eax (rlookup_ Drlookup2) Drload2 DivalL
      <- can_implode_word Dbi DivalL DimpL
      <- collect_nextloc Dhcoll Dgh (nextloc_ Dnewloc) (nextloc_ Dnewloc1)
      <- goodheap_collect Dgh Dhcoll Dgh1
      <- lt_implies_sum DltSz DsumSz
      <- sum_fun3 DsumSz sum_z Dnateq1
      <- can_rload Dimach3 impl_reg_ecx (rlookup_ Drlookup3) Drload3 DivalE
      <- can_string_exp DivalE Dvexp Dsexp DivalAll
      <- string_exp_implies_prod Dsexp DprodSz1
      <- prod_commute DprodSz1 DprodSz2
      <- prod_fun3 DprodSz2 DprodSz Dnateq2
      <- string_resp Dnateq2 S4 S3 Dseq1
      <- string_exp_resp string_eq_ nat_eq_ Dseq1 Dsexp Dsexp1
      <- impl_val_resp Dseq1 val_eq_ DivalAll DivalAll1
      <- can_mextend Dimach3 Dgh1 (nextloc_ Dnewloc1) DivalAll1 Dnateq1 
hextend_
            Dmextresult
      <- simulate_mallocarr* Dimach Ddecode (resolve_rco (rlookup_ Drlookup1))
            Datomval1 Dgh Dcoll (resolve_rco (rlookup_ Drlookup2)) Dbi DrepL
            DprodSz DltSz (resolve_rco (rlookup_ Drlookup3)) DsizeElem Dvexp
            (nextloc_ Dnewloc) hextend_ Datomval2
            (propagate_rdest (rupdate_ Drupdate) Dsize1) Dadvance1 Datomval
            zlookup_ Dapp zupdate_ (igc_ Dicoll)
            (collect_ Dhcoll (rfile_unreachable_ Drunr Dvunr) Dhunr Dlwf)
            Dimach3 Drload2 DimpL DrepL Drload3 Dsexp1 DivalAll1 Dmextresult
            Dtransirf Dstep1 Dimpl.
